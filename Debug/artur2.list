
artur2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abbc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c8  0800ad90  0800ad90  0000bd90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b458  0800b458  0000d1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b458  0800b458  0000c458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b460  0800b460  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b460  0800b460  0000c460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b464  0800b464  0000c464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800b468  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011998  200001d4  0800b63c  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20011b6c  0800b63c  0000db6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000efd7  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002578  00000000  00000000  0001c1db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe0  00000000  00000000  0001e758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c45  00000000  00000000  0001f738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024904  00000000  00000000  0002037d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001248e  00000000  00000000  00044c81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e18ee  00000000  00000000  0005710f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001389fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059d8  00000000  00000000  00138a40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0013e418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ad74 	.word	0x0800ad74

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	0800ad74 	.word	0x0800ad74

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <Heater_On>:
// External references
extern ADC_HandleTypeDef hadc1;


void Heater_On(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	printf("switching heater on\n\r");
 8001028:	4805      	ldr	r0, [pc, #20]	@ (8001040 <Heater_On+0x1c>)
 800102a:	f005 ff95 	bl	8006f58 <iprintf>
    HAL_GPIO_WritePin(HEATER_GPIO_PORT, HEATER_GPIO_PIN, GPIO_PIN_SET);
 800102e:	2201      	movs	r2, #1
 8001030:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001034:	4803      	ldr	r0, [pc, #12]	@ (8001044 <Heater_On+0x20>)
 8001036:	f003 f975 	bl	8004324 <HAL_GPIO_WritePin>
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	0800ad90 	.word	0x0800ad90
 8001044:	40020800 	.word	0x40020800

08001048 <Heater_Off>:

void Heater_Off(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
	printf("switching heater off\n\r");
 800104c:	4805      	ldr	r0, [pc, #20]	@ (8001064 <Heater_Off+0x1c>)
 800104e:	f005 ff83 	bl	8006f58 <iprintf>
    HAL_GPIO_WritePin(HEATER_GPIO_PORT, HEATER_GPIO_PIN, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001058:	4803      	ldr	r0, [pc, #12]	@ (8001068 <Heater_Off+0x20>)
 800105a:	f003 f963 	bl	8004324 <HAL_GPIO_WritePin>
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	0800ada8 	.word	0x0800ada8
 8001068:	40020800 	.word	0x40020800

0800106c <Read_Temperature_Celsius>:


/* Single conversion read of the thermistor channel, returning temp in Celsius */
float Read_Temperature_Celsius(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b088      	sub	sp, #32
 8001070:	af00      	add	r7, sp, #0
    // 1) Start ADC conversion
    HAL_ADC_Start(&hadc1);
 8001072:	4835      	ldr	r0, [pc, #212]	@ (8001148 <Read_Temperature_Celsius+0xdc>)
 8001074:	f001 fd86 	bl	8002b84 <HAL_ADC_Start>

    // 2) Wait for ADC conversion to finish
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) != HAL_OK)
 8001078:	f04f 31ff 	mov.w	r1, #4294967295
 800107c:	4832      	ldr	r0, [pc, #200]	@ (8001148 <Read_Temperature_Celsius+0xdc>)
 800107e:	f001 fe53 	bl	8002d28 <HAL_ADC_PollForConversion>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <Read_Temperature_Celsius+0x20>
    {
        // handle error or return an error indicator
        return -999.0f;
 8001088:	4b30      	ldr	r3, [pc, #192]	@ (800114c <Read_Temperature_Celsius+0xe0>)
 800108a:	e055      	b.n	8001138 <Read_Temperature_Celsius+0xcc>
    }

    // 3) Read the raw ADC value (0..4095 for 12-bit)
    uint32_t rawValue = HAL_ADC_GetValue(&hadc1);
 800108c:	482e      	ldr	r0, [pc, #184]	@ (8001148 <Read_Temperature_Celsius+0xdc>)
 800108e:	f001 ffe7 	bl	8003060 <HAL_ADC_GetValue>
 8001092:	61f8      	str	r0, [r7, #28]

    // 4) Convert the ADC count to voltage (assuming 3.3V reference)
    float voltage = (3.3f * (float)rawValue) / 4095.0f;
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	ee07 3a90 	vmov	s15, r3
 800109a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800109e:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8001150 <Read_Temperature_Celsius+0xe4>
 80010a2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010a6:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8001154 <Read_Temperature_Celsius+0xe8>
 80010aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010ae:	edc7 7a06 	vstr	s15, [r7, #24]

    // 5) Compute thermistor resistance (voltage divider with 10k resistor to ground)
    float R_fixed = 10000.0f; // 10k
 80010b2:	4b29      	ldr	r3, [pc, #164]	@ (8001158 <Read_Temperature_Celsius+0xec>)
 80010b4:	617b      	str	r3, [r7, #20]
    float R_therm = R_fixed * (voltage / (3.3f - voltage));
 80010b6:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001150 <Read_Temperature_Celsius+0xe4>
 80010ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80010be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010c2:	edd7 6a06 	vldr	s13, [r7, #24]
 80010c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010ca:	ed97 7a05 	vldr	s14, [r7, #20]
 80010ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010d2:	edc7 7a04 	vstr	s15, [r7, #16]

    // 6) Convert to temperature in °C using B‐coefficient equation
    float term = logf(R_therm / THERMISTOR_R25);  // ln(R/R25)
 80010d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80010da:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800115c <Read_Temperature_Celsius+0xf0>
 80010de:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010e2:	eeb0 0a47 	vmov.f32	s0, s14
 80010e6:	f009 fb87 	bl	800a7f8 <logf>
 80010ea:	ed87 0a03 	vstr	s0, [r7, #12]
    float invT = (term / THERMISTOR_B_COEFFICIENT) + (1.0f / THERMISTOR_REF_TEMPERATURE);
 80010ee:	ed97 7a03 	vldr	s14, [r7, #12]
 80010f2:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8001160 <Read_Temperature_Celsius+0xf4>
 80010f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010fa:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001164 <Read_Temperature_Celsius+0xf8>
 80010fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001102:	edc7 7a02 	vstr	s15, [r7, #8]
    float tempKelvin = 1.0f / invT;
 8001106:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800110a:	ed97 7a02 	vldr	s14, [r7, #8]
 800110e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001112:	edc7 7a01 	vstr	s15, [r7, #4]
    float tempCelsius = tempKelvin - 273.15f;
 8001116:	edd7 7a01 	vldr	s15, [r7, #4]
 800111a:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001168 <Read_Temperature_Celsius+0xfc>
 800111e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001122:	edc7 7a00 	vstr	s15, [r7]

    printf("temp: %f\n\r", tempCelsius);
 8001126:	6838      	ldr	r0, [r7, #0]
 8001128:	f7ff fa2e 	bl	8000588 <__aeabi_f2d>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	480e      	ldr	r0, [pc, #56]	@ (800116c <Read_Temperature_Celsius+0x100>)
 8001132:	f005 ff11 	bl	8006f58 <iprintf>

    return tempCelsius;
 8001136:	683b      	ldr	r3, [r7, #0]
}
 8001138:	ee07 3a90 	vmov	s15, r3
 800113c:	eeb0 0a67 	vmov.f32	s0, s15
 8001140:	3720      	adds	r7, #32
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	200001f0 	.word	0x200001f0
 800114c:	c479c000 	.word	0xc479c000
 8001150:	40533333 	.word	0x40533333
 8001154:	457ff000 	.word	0x457ff000
 8001158:	461c4000 	.word	0x461c4000
 800115c:	461c4000 	.word	0x461c4000
 8001160:	4576e000 	.word	0x4576e000
 8001164:	3b5bcf0f 	.word	0x3b5bcf0f
 8001168:	43889333 	.word	0x43889333
 800116c:	0800adc0 	.word	0x0800adc0

08001170 <Heater_Update_Blocking>:

/* BLOCKING approach: Turn heater on, wait until temperature is above threshold, then off */
void Heater_Update_Blocking(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
    Heater_On();
 8001174:	f7ff ff56 	bl	8001024 <Heater_On>
    while ((HEAT_EXPECTED_TEMP - Read_Temperature_Celsius()) > HEAT_TEMPERATURE_TOLERANCE)
 8001178:	e002      	b.n	8001180 <Heater_Update_Blocking+0x10>
    {
        HAL_Delay(HEAT_LOOP_INTERVAL);
 800117a:	200a      	movs	r0, #10
 800117c:	f001 fc9a 	bl	8002ab4 <HAL_Delay>
    while ((HEAT_EXPECTED_TEMP - Read_Temperature_Celsius()) > HEAT_TEMPERATURE_TOLERANCE)
 8001180:	f7ff ff74 	bl	800106c <Read_Temperature_Celsius>
 8001184:	eef0 7a40 	vmov.f32	s15, s0
 8001188:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 800118c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001190:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80011a8 <Heater_Update_Blocking+0x38>
 8001194:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800119c:	dced      	bgt.n	800117a <Heater_Update_Blocking+0xa>
    }
    Heater_Off();
 800119e:	f7ff ff53 	bl	8001048 <Heater_Off>
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	3e4ccccd 	.word	0x3e4ccccd

080011ac <Heater_Update_Non_Blocking>:

/* NON-BLOCKING approach: Call periodically; if below threshold => On, else Off */
void Heater_Update_Non_Blocking(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
    float currentTemp = Read_Temperature_Celsius();
 80011b2:	f7ff ff5b 	bl	800106c <Read_Temperature_Celsius>
 80011b6:	ed87 0a01 	vstr	s0, [r7, #4]
    if ((HEAT_EXPECTED_TEMP - currentTemp) > HEAT_TEMPERATURE_TOLERANCE)
 80011ba:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80011be:	edd7 7a01 	vldr	s15, [r7, #4]
 80011c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011c6:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80011e8 <Heater_Update_Non_Blocking+0x3c>
 80011ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d2:	dd02      	ble.n	80011da <Heater_Update_Non_Blocking+0x2e>
    {
        Heater_On();
 80011d4:	f7ff ff26 	bl	8001024 <Heater_On>
    }
    else
    {
        Heater_Off();
    }
}
 80011d8:	e001      	b.n	80011de <Heater_Update_Non_Blocking+0x32>
        Heater_Off();
 80011da:	f7ff ff35 	bl	8001048 <Heater_Off>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	3e4ccccd 	.word	0x3e4ccccd

080011ec <toggle_pins>:

#ifndef INC_TOGGLE_PINS_H_
#define INC_TOGGLE_PINS_H_

//przełączanie pomiędzy pinami
void toggle_pins(void) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
    static uint8_t state = 0;

    switch (state) {
 80011f0:	4b3d      	ldr	r3, [pc, #244]	@ (80012e8 <toggle_pins+0xfc>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b03      	cmp	r3, #3
 80011f6:	d863      	bhi.n	80012c0 <toggle_pins+0xd4>
 80011f8:	a201      	add	r2, pc, #4	@ (adr r2, 8001200 <toggle_pins+0x14>)
 80011fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011fe:	bf00      	nop
 8001200:	08001211 	.word	0x08001211
 8001204:	0800123d 	.word	0x0800123d
 8001208:	08001269 	.word	0x08001269
 800120c:	08001295 	.word	0x08001295
        case 0:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);  // PB0 HIGH
 8001210:	2201      	movs	r2, #1
 8001212:	2101      	movs	r1, #1
 8001214:	4835      	ldr	r0, [pc, #212]	@ (80012ec <toggle_pins+0x100>)
 8001216:	f003 f885 	bl	8004324 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);  // PB1 HIGH
 800121a:	2201      	movs	r2, #1
 800121c:	2102      	movs	r1, #2
 800121e:	4833      	ldr	r0, [pc, #204]	@ (80012ec <toggle_pins+0x100>)
 8001220:	f003 f880 	bl	8004324 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);  // PB2 LOW
 8001224:	2200      	movs	r2, #0
 8001226:	2104      	movs	r1, #4
 8001228:	4830      	ldr	r0, [pc, #192]	@ (80012ec <toggle_pins+0x100>)
 800122a:	f003 f87b 	bl	8004324 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET); // PB10 LOW
 800122e:	2200      	movs	r2, #0
 8001230:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001234:	482d      	ldr	r0, [pc, #180]	@ (80012ec <toggle_pins+0x100>)
 8001236:	f003 f875 	bl	8004324 <HAL_GPIO_WritePin>

            break;
 800123a:	e041      	b.n	80012c0 <toggle_pins+0xd4>
        case 1:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);  // PB0 LOW
 800123c:	2200      	movs	r2, #0
 800123e:	2101      	movs	r1, #1
 8001240:	482a      	ldr	r0, [pc, #168]	@ (80012ec <toggle_pins+0x100>)
 8001242:	f003 f86f 	bl	8004324 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);    // PB1 HIGH
 8001246:	2201      	movs	r2, #1
 8001248:	2102      	movs	r1, #2
 800124a:	4828      	ldr	r0, [pc, #160]	@ (80012ec <toggle_pins+0x100>)
 800124c:	f003 f86a 	bl	8004324 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);  // PB2 HIGH
 8001250:	2201      	movs	r2, #1
 8001252:	2104      	movs	r1, #4
 8001254:	4825      	ldr	r0, [pc, #148]	@ (80012ec <toggle_pins+0x100>)
 8001256:	f003 f865 	bl	8004324 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET); // PB10 LOW
 800125a:	2200      	movs	r2, #0
 800125c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001260:	4822      	ldr	r0, [pc, #136]	@ (80012ec <toggle_pins+0x100>)
 8001262:	f003 f85f 	bl	8004324 <HAL_GPIO_WritePin>
            break;
 8001266:	e02b      	b.n	80012c0 <toggle_pins+0xd4>
        case 2:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);  // PB0 LOW
 8001268:	2200      	movs	r2, #0
 800126a:	2101      	movs	r1, #1
 800126c:	481f      	ldr	r0, [pc, #124]	@ (80012ec <toggle_pins+0x100>)
 800126e:	f003 f859 	bl	8004324 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);  // PB1 LOW
 8001272:	2200      	movs	r2, #0
 8001274:	2102      	movs	r1, #2
 8001276:	481d      	ldr	r0, [pc, #116]	@ (80012ec <toggle_pins+0x100>)
 8001278:	f003 f854 	bl	8004324 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);    // PB2 HIGH
 800127c:	2201      	movs	r2, #1
 800127e:	2104      	movs	r1, #4
 8001280:	481a      	ldr	r0, [pc, #104]	@ (80012ec <toggle_pins+0x100>)
 8001282:	f003 f84f 	bl	8004324 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET); // PB10 HIGH
 8001286:	2201      	movs	r2, #1
 8001288:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800128c:	4817      	ldr	r0, [pc, #92]	@ (80012ec <toggle_pins+0x100>)
 800128e:	f003 f849 	bl	8004324 <HAL_GPIO_WritePin>
            break;
 8001292:	e015      	b.n	80012c0 <toggle_pins+0xd4>
        case 3:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);  // PB0 HIGH
 8001294:	2201      	movs	r2, #1
 8001296:	2101      	movs	r1, #1
 8001298:	4814      	ldr	r0, [pc, #80]	@ (80012ec <toggle_pins+0x100>)
 800129a:	f003 f843 	bl	8004324 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);  // PB1 LOW
 800129e:	2200      	movs	r2, #0
 80012a0:	2102      	movs	r1, #2
 80012a2:	4812      	ldr	r0, [pc, #72]	@ (80012ec <toggle_pins+0x100>)
 80012a4:	f003 f83e 	bl	8004324 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);  // PB2 LOW
 80012a8:	2200      	movs	r2, #0
 80012aa:	2104      	movs	r1, #4
 80012ac:	480f      	ldr	r0, [pc, #60]	@ (80012ec <toggle_pins+0x100>)
 80012ae:	f003 f839 	bl	8004324 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);   // PB10 HIGH
 80012b2:	2201      	movs	r2, #1
 80012b4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012b8:	480c      	ldr	r0, [pc, #48]	@ (80012ec <toggle_pins+0x100>)
 80012ba:	f003 f833 	bl	8004324 <HAL_GPIO_WritePin>
            break;
 80012be:	bf00      	nop
    }

    state = (state + 1) % 4;
 80012c0:	4b09      	ldr	r3, [pc, #36]	@ (80012e8 <toggle_pins+0xfc>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	3301      	adds	r3, #1
 80012c6:	425a      	negs	r2, r3
 80012c8:	f003 0303 	and.w	r3, r3, #3
 80012cc:	f002 0203 	and.w	r2, r2, #3
 80012d0:	bf58      	it	pl
 80012d2:	4253      	negpl	r3, r2
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	4b04      	ldr	r3, [pc, #16]	@ (80012e8 <toggle_pins+0xfc>)
 80012d8:	701a      	strb	r2, [r3, #0]

    HAL_Delay(1000);
 80012da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012de:	f001 fbe9 	bl	8002ab4 <HAL_Delay>
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20011a14 	.word	0x20011a14
 80012ec:	40020400 	.word	0x40020400

080012f0 <read_ADC_voltage>:
#define INC_READ_ADC_VOLTAGE_H_
ADC_HandleTypeDef hadc1;

//TERMISTOR VCO TEMP PC2
float read_ADC_voltage(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
    uint32_t adcValue = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	607b      	str	r3, [r7, #4]

    HAL_ADC_Start(&hadc1);
 80012fa:	4812      	ldr	r0, [pc, #72]	@ (8001344 <read_ADC_voltage+0x54>)
 80012fc:	f001 fc42 	bl	8002b84 <HAL_ADC_Start>

    if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 8001300:	210a      	movs	r1, #10
 8001302:	4810      	ldr	r0, [pc, #64]	@ (8001344 <read_ADC_voltage+0x54>)
 8001304:	f001 fd10 	bl	8002d28 <HAL_ADC_PollForConversion>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d103      	bne.n	8001316 <read_ADC_voltage+0x26>
    {
        adcValue = HAL_ADC_GetValue(&hadc1);
 800130e:	480d      	ldr	r0, [pc, #52]	@ (8001344 <read_ADC_voltage+0x54>)
 8001310:	f001 fea6 	bl	8003060 <HAL_ADC_GetValue>
 8001314:	6078      	str	r0, [r7, #4]
    }

    float voltage = (float)adcValue * 3.3f / 4095.0f;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	ee07 3a90 	vmov	s15, r3
 800131c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001320:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001348 <read_ADC_voltage+0x58>
 8001324:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001328:	eddf 6a08 	vldr	s13, [pc, #32]	@ 800134c <read_ADC_voltage+0x5c>
 800132c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001330:	edc7 7a00 	vstr	s15, [r7]
    return voltage;
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	ee07 3a90 	vmov	s15, r3
}
 800133a:	eeb0 0a67 	vmov.f32	s0, s15
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	200001f0 	.word	0x200001f0
 8001348:	40533333 	.word	0x40533333
 800134c:	457ff000 	.word	0x457ff000

08001350 <read_voltage>:

#ifndef INC_READ_VOLTAGE_H_
#define INC_READ_VOLTAGE_H_

// Funkcja odczytu napięcia dla danego kanału ADC (RSIA, RSIB)
float read_voltage(ADC_HandleTypeDef *hadc, uint32_t channel) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b088      	sub	sp, #32
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
    ADC_ChannelConfTypeDef sConfig = {0};
 800135a:	f107 0308 	add.w	r3, r7, #8
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	60da      	str	r2, [r3, #12]
    sConfig.Channel = channel;
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	60bb      	str	r3, [r7, #8]

    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800136c:	2300      	movs	r3, #0
 800136e:	613b      	str	r3, [r7, #16]

    if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK) {
 8001370:	f107 0308 	add.w	r3, r7, #8
 8001374:	4619      	mov	r1, r3
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f001 fe94 	bl	80030a4 <HAL_ADC_ConfigChannel>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <read_voltage+0x36>
        Error_Handler();
 8001382:	f000 ffb1 	bl	80022e8 <Error_Handler>
    }


    HAL_ADC_Start(hadc);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f001 fbfc 	bl	8002b84 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY) == HAL_OK) {
 800138c:	f04f 31ff 	mov.w	r1, #4294967295
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f001 fcc9 	bl	8002d28 <HAL_ADC_PollForConversion>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d11e      	bne.n	80013da <read_voltage+0x8a>
        uint32_t adcValue = HAL_ADC_GetValue(hadc);
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f001 fe5f 	bl	8003060 <HAL_ADC_GetValue>
 80013a2:	61f8      	str	r0, [r7, #28]
        float voltage = (adcValue * 3.3) / 4096;
 80013a4:	69f8      	ldr	r0, [r7, #28]
 80013a6:	f7ff f8cd 	bl	8000544 <__aeabi_ui2d>
 80013aa:	a312      	add	r3, pc, #72	@ (adr r3, 80013f4 <read_voltage+0xa4>)
 80013ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b0:	f7ff f942 	bl	8000638 <__aeabi_dmul>
 80013b4:	4602      	mov	r2, r0
 80013b6:	460b      	mov	r3, r1
 80013b8:	4610      	mov	r0, r2
 80013ba:	4619      	mov	r1, r3
 80013bc:	f04f 0200 	mov.w	r2, #0
 80013c0:	4b0b      	ldr	r3, [pc, #44]	@ (80013f0 <read_voltage+0xa0>)
 80013c2:	f7ff fa63 	bl	800088c <__aeabi_ddiv>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	4610      	mov	r0, r2
 80013cc:	4619      	mov	r1, r3
 80013ce:	f7ff fc2b 	bl	8000c28 <__aeabi_d2f>
 80013d2:	4603      	mov	r3, r0
 80013d4:	61bb      	str	r3, [r7, #24]
        return voltage;
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	e001      	b.n	80013de <read_voltage+0x8e>
    }

    return 0;
 80013da:	f04f 0300 	mov.w	r3, #0
}
 80013de:	ee07 3a90 	vmov	s15, r3
 80013e2:	eeb0 0a67 	vmov.f32	s0, s15
 80013e6:	3720      	adds	r7, #32
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	f3af 8000 	nop.w
 80013f0:	40b00000 	.word	0x40b00000
 80013f4:	66666666 	.word	0x66666666
 80013f8:	400a6666 	.word	0x400a6666
 80013fc:	00000000 	.word	0x00000000

08001400 <measure_frequency>:

TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

//FREQ_MEAS_A PA6
float measure_frequency() {
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
    __HAL_TIM_SET_COUNTER(&htim2, 0);
 8001406:	4b1a      	ldr	r3, [pc, #104]	@ (8001470 <measure_frequency+0x70>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2200      	movs	r2, #0
 800140c:	625a      	str	r2, [r3, #36]	@ 0x24


    HAL_TIM_Base_Start(&htim3);
 800140e:	4819      	ldr	r0, [pc, #100]	@ (8001474 <measure_frequency+0x74>)
 8001410:	f003 fd5a 	bl	8004ec8 <HAL_TIM_Base_Start>
    HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 8001414:	2100      	movs	r1, #0
 8001416:	4816      	ldr	r0, [pc, #88]	@ (8001470 <measure_frequency+0x70>)
 8001418:	f003 fe84 	bl	8005124 <HAL_TIM_IC_Start>

    HAL_Delay(1);
 800141c:	2001      	movs	r0, #1
 800141e:	f001 fb49 	bl	8002ab4 <HAL_Delay>


    uint32_t pulse_count = __HAL_TIM_GET_COUNTER(&htim2);
 8001422:	4b13      	ldr	r3, [pc, #76]	@ (8001470 <measure_frequency+0x70>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001428:	607b      	str	r3, [r7, #4]

    float frequency = pulse_count / 0.0001;
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff f88a 	bl	8000544 <__aeabi_ui2d>
 8001430:	a30d      	add	r3, pc, #52	@ (adr r3, 8001468 <measure_frequency+0x68>)
 8001432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001436:	f7ff fa29 	bl	800088c <__aeabi_ddiv>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4610      	mov	r0, r2
 8001440:	4619      	mov	r1, r3
 8001442:	f7ff fbf1 	bl	8000c28 <__aeabi_d2f>
 8001446:	4603      	mov	r3, r0
 8001448:	603b      	str	r3, [r7, #0]

    HAL_TIM_Base_Stop(&htim3);
 800144a:	480a      	ldr	r0, [pc, #40]	@ (8001474 <measure_frequency+0x74>)
 800144c:	f003 fda4 	bl	8004f98 <HAL_TIM_Base_Stop>
    HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);
 8001450:	2100      	movs	r1, #0
 8001452:	4807      	ldr	r0, [pc, #28]	@ (8001470 <measure_frequency+0x70>)
 8001454:	f003 ff42 	bl	80052dc <HAL_TIM_IC_Stop>
    return frequency;
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	ee07 3a90 	vmov	s15, r3

}
 800145e:	eeb0 0a67 	vmov.f32	s0, s15
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	eb1c432d 	.word	0xeb1c432d
 800146c:	3f1a36e2 	.word	0x3f1a36e2
 8001470:	20000238 	.word	0x20000238
 8001474:	20000280 	.word	0x20000280

08001478 <calculate_angles>:
    float azimuth;
    float elevation;
} AngleResults;

AngleResults calculate_angles(const float cosAlpha[4], const float cosBeta[4])
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b092      	sub	sp, #72	@ 0x48
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
    AngleResults results;

    // Tutaj ustalasz, JAK łączysz dane z 4 pomiarów
    // np. najprostszy pomysł: uśrednienie
    float sumAlpha = 0.0f;
 8001482:	f04f 0300 	mov.w	r3, #0
 8001486:	647b      	str	r3, [r7, #68]	@ 0x44
    float sumBeta  = 0.0f;
 8001488:	f04f 0300 	mov.w	r3, #0
 800148c:	643b      	str	r3, [r7, #64]	@ 0x40
    for (int i = 0; i < 4; i++)
 800148e:	2300      	movs	r3, #0
 8001490:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001492:	e01a      	b.n	80014ca <calculate_angles+0x52>
    {
        sumAlpha += cosAlpha[i];
 8001494:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	68fa      	ldr	r2, [r7, #12]
 800149a:	4413      	add	r3, r2
 800149c:	edd3 7a00 	vldr	s15, [r3]
 80014a0:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80014a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014a8:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        sumBeta  += cosBeta[i];
 80014ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	68ba      	ldr	r2, [r7, #8]
 80014b2:	4413      	add	r3, r2
 80014b4:	edd3 7a00 	vldr	s15, [r3]
 80014b8:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80014bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014c0:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    for (int i = 0; i < 4; i++)
 80014c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014c6:	3301      	adds	r3, #1
 80014c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80014ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014cc:	2b03      	cmp	r3, #3
 80014ce:	dde1      	ble.n	8001494 <calculate_angles+0x1c>
    }
    float meanAlpha = sumAlpha / 4.0f;
 80014d0:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80014d4:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80014d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014dc:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    float meanBeta  = sumBeta  / 4.0f;
 80014e0:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80014e4:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80014e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014ec:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Od tego miejsca - identyczna logika, jak w starej calculate_angles(...)
    float cos_alpha_squared = meanAlpha * meanAlpha;
 80014f0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80014f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80014f8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    float cos_beta_squared  = meanBeta  * meanBeta;
 80014fc:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001500:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001504:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    // Warunek sprawdzający, czy nie przekraczamy 1 (czy istnieje rozwiązanie):
    if (cos_alpha_squared + cos_beta_squared > 1.0f) {
 8001508:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800150c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001510:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001514:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001518:	eef4 7ac7 	vcmpe.f32	s15, s14
 800151c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001520:	dd0e      	ble.n	8001540 <calculate_angles+0xc8>
        // Brak geometrycznego przecięcia stożków => błąd pomiaru
        results.azimuth = 0.0f;
 8001522:	f04f 0300 	mov.w	r3, #0
 8001526:	613b      	str	r3, [r7, #16]
        results.elevation = 0.0f;
 8001528:	f04f 0300 	mov.w	r3, #0
 800152c:	617b      	str	r3, [r7, #20]
        return results;
 800152e:	f107 0318 	add.w	r3, r7, #24
 8001532:	f107 0210 	add.w	r2, r7, #16
 8001536:	e892 0003 	ldmia.w	r2, {r0, r1}
 800153a:	e883 0003 	stmia.w	r3, {r0, r1}
 800153e:	e05b      	b.n	80015f8 <calculate_angles+0x180>
    }

    // Wyliczenie "x, y, z" wg Twoich wzorów
    float x = meanAlpha;
 8001540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001542:	62bb      	str	r3, [r7, #40]	@ 0x28
    float y = meanBeta;
 8001544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001546:	627b      	str	r3, [r7, #36]	@ 0x24
    float z = sqrtf(1.0f - cos_alpha_squared - cos_beta_squared);
 8001548:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800154c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001550:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001554:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001558:	ee77 7a67 	vsub.f32	s15, s14, s15
 800155c:	eeb0 0a67 	vmov.f32	s0, s15
 8001560:	f009 f978 	bl	800a854 <sqrtf>
 8001564:	ed87 0a08 	vstr	s0, [r7, #32]

    // azimuth = atan2(x, y) => jak w Twoim kodzie
    results.azimuth = atan2f(x, y) * (180.0f / M_PI);
 8001568:	edd7 0a09 	vldr	s1, [r7, #36]	@ 0x24
 800156c:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8001570:	f009 f940 	bl	800a7f4 <atan2f>
 8001574:	ee10 3a10 	vmov	r3, s0
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff f805 	bl	8000588 <__aeabi_f2d>
 800157e:	a326      	add	r3, pc, #152	@ (adr r3, 8001618 <calculate_angles+0x1a0>)
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	f7ff f858 	bl	8000638 <__aeabi_dmul>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	4610      	mov	r0, r2
 800158e:	4619      	mov	r1, r3
 8001590:	f7ff fb4a 	bl	8000c28 <__aeabi_d2f>
 8001594:	4603      	mov	r3, r0
 8001596:	613b      	str	r3, [r7, #16]

    // elevation = atan2(z, sqrt(x^2 + y^2)) lub arcsin(z) => jak w Twoim kodzie
    results.elevation = atan2f(z, sqrtf(x*x + y*y)) * (180.0f / M_PI);
 8001598:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800159c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80015a0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80015a4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80015a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ac:	eeb0 0a67 	vmov.f32	s0, s15
 80015b0:	f009 f950 	bl	800a854 <sqrtf>
 80015b4:	eef0 7a40 	vmov.f32	s15, s0
 80015b8:	eef0 0a67 	vmov.f32	s1, s15
 80015bc:	ed97 0a08 	vldr	s0, [r7, #32]
 80015c0:	f009 f918 	bl	800a7f4 <atan2f>
 80015c4:	ee10 3a10 	vmov	r3, s0
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7fe ffdd 	bl	8000588 <__aeabi_f2d>
 80015ce:	a312      	add	r3, pc, #72	@ (adr r3, 8001618 <calculate_angles+0x1a0>)
 80015d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d4:	f7ff f830 	bl	8000638 <__aeabi_dmul>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4610      	mov	r0, r2
 80015de:	4619      	mov	r1, r3
 80015e0:	f7ff fb22 	bl	8000c28 <__aeabi_d2f>
 80015e4:	4603      	mov	r3, r0
 80015e6:	617b      	str	r3, [r7, #20]

    return results;
 80015e8:	f107 0318 	add.w	r3, r7, #24
 80015ec:	f107 0210 	add.w	r2, r7, #16
 80015f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015f4:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	ee07 2a10 	vmov	s14, r2
 8001600:	ee07 3a90 	vmov	s15, r3
 8001604:	eeb0 0a47 	vmov.f32	s0, s14
 8001608:	eef0 0a67 	vmov.f32	s1, s15
 800160c:	3748      	adds	r7, #72	@ 0x48
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	f3af 8000 	nop.w
 8001618:	1a63c1f8 	.word	0x1a63c1f8
 800161c:	404ca5dc 	.word	0x404ca5dc

08001620 <HAL_ADC_ConvCpltCallback>:
}




void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC2) {
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a05      	ldr	r2, [pc, #20]	@ (8001644 <HAL_ADC_ConvCpltCallback+0x24>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d102      	bne.n	8001638 <HAL_ADC_ConvCpltCallback+0x18>
        adc_ready = 1;  // Set a flag to indicate data is ready for processing
 8001632:	4b05      	ldr	r3, [pc, #20]	@ (8001648 <HAL_ADC_ConvCpltCallback+0x28>)
 8001634:	2201      	movs	r2, #1
 8001636:	701a      	strb	r2, [r3, #0]
    }
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	40012100 	.word	0x40012100
 8001648:	2000046c 	.word	0x2000046c

0800164c <CalculateFrequencyFromDAC>:
//-------------------------------------------------------------------------

// Example frequency mapping for demonstration.
// Tweak to match your VCO's tuning curve or actual measured function.
static float CalculateFrequencyFromDAC(uint16_t dacValue)
{
 800164c:	b480      	push	{r7}
 800164e:	b087      	sub	sp, #28
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	80fb      	strh	r3, [r7, #6]
    // Suppose 0 -> 2.3 GHz, 4095 -> 2.6 GHz, purely as an example:
    float freqMin = 2.3e9f; // 2.3 GHz
 8001656:	4b12      	ldr	r3, [pc, #72]	@ (80016a0 <CalculateFrequencyFromDAC+0x54>)
 8001658:	617b      	str	r3, [r7, #20]
    float freqMax = 2.6e9f; // 2.6 GHz
 800165a:	4b12      	ldr	r3, [pc, #72]	@ (80016a4 <CalculateFrequencyFromDAC+0x58>)
 800165c:	613b      	str	r3, [r7, #16]
    float ratio   = (float)dacValue / (float)DAC_MAX_VALUE;
 800165e:	88fb      	ldrh	r3, [r7, #6]
 8001660:	ee07 3a90 	vmov	s15, r3
 8001664:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001668:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 80016a8 <CalculateFrequencyFromDAC+0x5c>
 800166c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001670:	edc7 7a03 	vstr	s15, [r7, #12]
    return freqMin + ratio * (freqMax - freqMin);
 8001674:	ed97 7a04 	vldr	s14, [r7, #16]
 8001678:	edd7 7a05 	vldr	s15, [r7, #20]
 800167c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001680:	edd7 7a03 	vldr	s15, [r7, #12]
 8001684:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001688:	edd7 7a05 	vldr	s15, [r7, #20]
 800168c:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001690:	eeb0 0a67 	vmov.f32	s0, s15
 8001694:	371c      	adds	r7, #28
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	4f091737 	.word	0x4f091737
 80016a4:	4f1af8da 	.word	0x4f1af8da
 80016a8:	457ff000 	.word	0x457ff000

080016ac <SetDACValue>:

static void SetDACValue(uint16_t dacValue)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	80fb      	strh	r3, [r7, #6]
    // Example stub. You would set your hardware DAC here.
    // e.g., HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dacValue);
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <MeasureRSSI>:

static float MeasureRSSI(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0
    //TODO
	return 0;
 80016c6:	f04f 0300 	mov.w	r3, #0
 80016ca:	ee07 3a90 	vmov	s15, r3
}
 80016ce:	eeb0 0a67 	vmov.f32	s0, s15
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <AcquireAudioSamples>:

static void AcquireAudioSamples(float *buffer, uint32_t numSamples, float sampleRate)
{
 80016da:	b480      	push	{r7}
 80016dc:	b085      	sub	sp, #20
 80016de:	af00      	add	r7, sp, #0
 80016e0:	60f8      	str	r0, [r7, #12]
 80016e2:	60b9      	str	r1, [r7, #8]
 80016e4:	ed87 0a01 	vstr	s0, [r7, #4]
	//remember that buffer size = 2*numSamples
   //TODO
}
 80016e8:	bf00      	nop
 80016ea:	3714      	adds	r7, #20
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <ScanFrequencyRange>:


void ScanFrequencyRange(void)
{
 80016f4:	b590      	push	{r4, r7, lr}
 80016f6:	b089      	sub	sp, #36	@ 0x24
 80016f8:	af00      	add	r7, sp, #0
    float bestRatio = 0.0f;
 80016fa:	f04f 0300 	mov.w	r3, #0
 80016fe:	61fb      	str	r3, [r7, #28]
    uint16_t bestDACValue = 0;
 8001700:	2300      	movs	r3, #0
 8001702:	837b      	strh	r3, [r7, #26]

    // Clear candidate list
    candidateCount = 0;
 8001704:	4b92      	ldr	r3, [pc, #584]	@ (8001950 <ScanFrequencyRange+0x25c>)
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]

    // Iterate through the DAC range
    for(uint16_t dacValue = 0; dacValue <= DAC_MAX_VALUE; dacValue += DAC_STEP_SIZE)
 800170a:	2300      	movs	r3, #0
 800170c:	833b      	strh	r3, [r7, #24]
 800170e:	e0f6      	b.n	80018fe <ScanFrequencyRange+0x20a>
    {
        // 1) Set the DAC to the current value
        SetDACValue(dacValue);
 8001710:	8b3b      	ldrh	r3, [r7, #24]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff ffca 	bl	80016ac <SetDACValue>

        // 2) Measure the RSSI
        float rssi = MeasureRSSI();
 8001718:	f7ff ffd3 	bl	80016c2 <MeasureRSSI>
 800171c:	ed87 0a03 	vstr	s0, [r7, #12]

        // Check if RSSI > -50 dB threshold
        if(rssi > RSSI_THRESHOLD)
 8001720:	edd7 7a03 	vldr	s15, [r7, #12]
 8001724:	ed9f 7a8b 	vldr	s14, [pc, #556]	@ 8001954 <ScanFrequencyRange+0x260>
 8001728:	eef4 7ac7 	vcmpe.f32	s15, s14
 800172c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001730:	f340 80e2 	ble.w	80018f8 <ScanFrequencyRange+0x204>
        {
            // 3) Acquire 128 samples of the demodulated audio at 10 kHz
            AcquireAudioSamples(fft_input, FFT_SIZE, SAMPLE_FREQUENCY);
 8001734:	ed9f 0a88 	vldr	s0, [pc, #544]	@ 8001958 <ScanFrequencyRange+0x264>
 8001738:	2180      	movs	r1, #128	@ 0x80
 800173a:	4888      	ldr	r0, [pc, #544]	@ (800195c <ScanFrequencyRange+0x268>)
 800173c:	f7ff ffcd 	bl	80016da <AcquireAudioSamples>



            // 5) Check amplitude at ~1 kHz vs. average amplitude
            //    The bin for 1 kHz is roughly ~13 for 128 samples at 10 kHz
            float amplitude1kHz = fft_output[TARGET_FREQ_BIN];
 8001740:	4b87      	ldr	r3, [pc, #540]	@ (8001960 <ScanFrequencyRange+0x26c>)
 8001742:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001744:	60bb      	str	r3, [r7, #8]

            // Compute average amplitude across all bins from 0..(SAMPLES_COUNT/2 - 1)
            // (You might skip bin 0 if it’s large DC, but that’s up to you.)
            float sum = 0.0f;
 8001746:	f04f 0300 	mov.w	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
            for(uint32_t i = 0; i < (SAMPLES_COUNT / 2); i++) {
 800174c:	2300      	movs	r3, #0
 800174e:	613b      	str	r3, [r7, #16]
 8001750:	e00e      	b.n	8001770 <ScanFrequencyRange+0x7c>
                sum += fft_output[i];
 8001752:	4a83      	ldr	r2, [pc, #524]	@ (8001960 <ScanFrequencyRange+0x26c>)
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	4413      	add	r3, r2
 800175a:	edd3 7a00 	vldr	s15, [r3]
 800175e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001762:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001766:	edc7 7a05 	vstr	s15, [r7, #20]
            for(uint32_t i = 0; i < (SAMPLES_COUNT / 2); i++) {
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	3301      	adds	r3, #1
 800176e:	613b      	str	r3, [r7, #16]
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	2b3f      	cmp	r3, #63	@ 0x3f
 8001774:	d9ed      	bls.n	8001752 <ScanFrequencyRange+0x5e>
            }
            float avgAmplitude = sum / (float)(SAMPLES_COUNT / 2);
 8001776:	ed97 7a05 	vldr	s14, [r7, #20]
 800177a:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 8001964 <ScanFrequencyRange+0x270>
 800177e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001782:	edc7 7a01 	vstr	s15, [r7, #4]

            float ratio = amplitude1kHz / (avgAmplitude + 1e-9f); // Avoid divide-by-zero
 8001786:	edd7 7a01 	vldr	s15, [r7, #4]
 800178a:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 8001968 <ScanFrequencyRange+0x274>
 800178e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001792:	edd7 6a02 	vldr	s13, [r7, #8]
 8001796:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800179a:	edc7 7a00 	vstr	s15, [r7]

            // Check if amplitude at 1 kHz is >= 2x average
            if(ratio >= RATIO_THRESHOLD)
 800179e:	edd7 7a00 	vldr	s15, [r7]
 80017a2:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80017a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ae:	f2c0 80a3 	blt.w	80018f8 <ScanFrequencyRange+0x204>
            {
                // 6) Record in candidate list
                if(candidateCount < (sizeof(candidateList)/sizeof(candidateList[0])))
 80017b2:	4b67      	ldr	r3, [pc, #412]	@ (8001950 <ScanFrequencyRange+0x25c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2b3f      	cmp	r3, #63	@ 0x3f
 80017b8:	d84f      	bhi.n	800185a <ScanFrequencyRange+0x166>
                {
                    candidateList[candidateCount].approximateSignalFrequency = CalculateFrequencyFromDAC(dacValue);
 80017ba:	4b65      	ldr	r3, [pc, #404]	@ (8001950 <ScanFrequencyRange+0x25c>)
 80017bc:	681c      	ldr	r4, [r3, #0]
 80017be:	8b3b      	ldrh	r3, [r7, #24]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff ff43 	bl	800164c <CalculateFrequencyFromDAC>
 80017c6:	eef0 7a40 	vmov.f32	s15, s0
 80017ca:	4a68      	ldr	r2, [pc, #416]	@ (800196c <ScanFrequencyRange+0x278>)
 80017cc:	4623      	mov	r3, r4
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	4423      	add	r3, r4
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	4413      	add	r3, r2
 80017d6:	edc3 7a00 	vstr	s15, [r3]
                    candidateList[candidateCount].dacValue                 = dacValue;
 80017da:	4b5d      	ldr	r3, [pc, #372]	@ (8001950 <ScanFrequencyRange+0x25c>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	4963      	ldr	r1, [pc, #396]	@ (800196c <ScanFrequencyRange+0x278>)
 80017e0:	4613      	mov	r3, r2
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	4413      	add	r3, r2
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	440b      	add	r3, r1
 80017ea:	3304      	adds	r3, #4
 80017ec:	8b3a      	ldrh	r2, [r7, #24]
 80017ee:	801a      	strh	r2, [r3, #0]
                    candidateList[candidateCount].vcoTemperature           = Read_Temperature_Celsius();
 80017f0:	4b57      	ldr	r3, [pc, #348]	@ (8001950 <ScanFrequencyRange+0x25c>)
 80017f2:	681c      	ldr	r4, [r3, #0]
 80017f4:	f7ff fc3a 	bl	800106c <Read_Temperature_Celsius>
 80017f8:	eef0 7a40 	vmov.f32	s15, s0
 80017fc:	4a5b      	ldr	r2, [pc, #364]	@ (800196c <ScanFrequencyRange+0x278>)
 80017fe:	4623      	mov	r3, r4
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	4423      	add	r3, r4
 8001804:	00db      	lsls	r3, r3, #3
 8001806:	4413      	add	r3, r2
 8001808:	3308      	adds	r3, #8
 800180a:	edc3 7a00 	vstr	s15, [r3]
                    candidateList[candidateCount].amplitude1kHz            = amplitude1kHz;
 800180e:	4b50      	ldr	r3, [pc, #320]	@ (8001950 <ScanFrequencyRange+0x25c>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	4956      	ldr	r1, [pc, #344]	@ (800196c <ScanFrequencyRange+0x278>)
 8001814:	4613      	mov	r3, r2
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	4413      	add	r3, r2
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	440b      	add	r3, r1
 800181e:	330c      	adds	r3, #12
 8001820:	68ba      	ldr	r2, [r7, #8]
 8001822:	601a      	str	r2, [r3, #0]
                    candidateList[candidateCount].averageAmplitude         = avgAmplitude;
 8001824:	4b4a      	ldr	r3, [pc, #296]	@ (8001950 <ScanFrequencyRange+0x25c>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	4950      	ldr	r1, [pc, #320]	@ (800196c <ScanFrequencyRange+0x278>)
 800182a:	4613      	mov	r3, r2
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	4413      	add	r3, r2
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	440b      	add	r3, r1
 8001834:	3310      	adds	r3, #16
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	601a      	str	r2, [r3, #0]
                    candidateList[candidateCount].ratio                    = ratio;
 800183a:	4b45      	ldr	r3, [pc, #276]	@ (8001950 <ScanFrequencyRange+0x25c>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	494b      	ldr	r1, [pc, #300]	@ (800196c <ScanFrequencyRange+0x278>)
 8001840:	4613      	mov	r3, r2
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	4413      	add	r3, r2
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	440b      	add	r3, r1
 800184a:	3314      	adds	r3, #20
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	601a      	str	r2, [r3, #0]
                    candidateCount++;
 8001850:	4b3f      	ldr	r3, [pc, #252]	@ (8001950 <ScanFrequencyRange+0x25c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	3301      	adds	r3, #1
 8001856:	4a3e      	ldr	r2, [pc, #248]	@ (8001950 <ScanFrequencyRange+0x25c>)
 8001858:	6013      	str	r3, [r2, #0]
                }

                // 7) Print results
                printf("Candidate found!\n\r");
 800185a:	4845      	ldr	r0, [pc, #276]	@ (8001970 <ScanFrequencyRange+0x27c>)
 800185c:	f005 fb7c 	bl	8006f58 <iprintf>
                printf("  DAC = %u\n\r", dacValue);
 8001860:	8b3b      	ldrh	r3, [r7, #24]
 8001862:	4619      	mov	r1, r3
 8001864:	4843      	ldr	r0, [pc, #268]	@ (8001974 <ScanFrequencyRange+0x280>)
 8001866:	f005 fb77 	bl	8006f58 <iprintf>
                printf("  RSSI = %.3f\n\r", rssi);
 800186a:	68f8      	ldr	r0, [r7, #12]
 800186c:	f7fe fe8c 	bl	8000588 <__aeabi_f2d>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4840      	ldr	r0, [pc, #256]	@ (8001978 <ScanFrequencyRange+0x284>)
 8001876:	f005 fb6f 	bl	8006f58 <iprintf>
                printf("  Approx. Frequency = %.2f Hz\n\r",
                       CalculateFrequencyFromDAC(dacValue));
 800187a:	8b3b      	ldrh	r3, [r7, #24]
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fee5 	bl	800164c <CalculateFrequencyFromDAC>
 8001882:	ee10 3a10 	vmov	r3, s0
                printf("  Approx. Frequency = %.2f Hz\n\r",
 8001886:	4618      	mov	r0, r3
 8001888:	f7fe fe7e 	bl	8000588 <__aeabi_f2d>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	483a      	ldr	r0, [pc, #232]	@ (800197c <ScanFrequencyRange+0x288>)
 8001892:	f005 fb61 	bl	8006f58 <iprintf>
                printf("  Temperature = %.2f degC\n\r", Read_Temperature_Celsius());
 8001896:	f7ff fbe9 	bl	800106c <Read_Temperature_Celsius>
 800189a:	ee10 3a10 	vmov	r3, s0
 800189e:	4618      	mov	r0, r3
 80018a0:	f7fe fe72 	bl	8000588 <__aeabi_f2d>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4835      	ldr	r0, [pc, #212]	@ (8001980 <ScanFrequencyRange+0x28c>)
 80018aa:	f005 fb55 	bl	8006f58 <iprintf>
                printf("  1 kHz amplitude = %.4f\n\r", amplitude1kHz);
 80018ae:	68b8      	ldr	r0, [r7, #8]
 80018b0:	f7fe fe6a 	bl	8000588 <__aeabi_f2d>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4832      	ldr	r0, [pc, #200]	@ (8001984 <ScanFrequencyRange+0x290>)
 80018ba:	f005 fb4d 	bl	8006f58 <iprintf>
                printf("  Average amplitude = %.4f\n\r", avgAmplitude);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f7fe fe62 	bl	8000588 <__aeabi_f2d>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	482f      	ldr	r0, [pc, #188]	@ (8001988 <ScanFrequencyRange+0x294>)
 80018ca:	f005 fb45 	bl	8006f58 <iprintf>
                printf("  Ratio (1kHz/avg) = %.2f\n\r", ratio);
 80018ce:	6838      	ldr	r0, [r7, #0]
 80018d0:	f7fe fe5a 	bl	8000588 <__aeabi_f2d>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	482c      	ldr	r0, [pc, #176]	@ (800198c <ScanFrequencyRange+0x298>)
 80018da:	f005 fb3d 	bl	8006f58 <iprintf>

                // Keep track of the best ratio
                if(ratio > bestRatio)
 80018de:	ed97 7a00 	vldr	s14, [r7]
 80018e2:	edd7 7a07 	vldr	s15, [r7, #28]
 80018e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ee:	dd03      	ble.n	80018f8 <ScanFrequencyRange+0x204>
                {
                    bestRatio   = ratio;
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	61fb      	str	r3, [r7, #28]
                    bestDACValue = dacValue;
 80018f4:	8b3b      	ldrh	r3, [r7, #24]
 80018f6:	837b      	strh	r3, [r7, #26]
    for(uint16_t dacValue = 0; dacValue <= DAC_MAX_VALUE; dacValue += DAC_STEP_SIZE)
 80018f8:	8b3b      	ldrh	r3, [r7, #24]
 80018fa:	3301      	adds	r3, #1
 80018fc:	833b      	strh	r3, [r7, #24]
 80018fe:	8b3b      	ldrh	r3, [r7, #24]
 8001900:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001904:	f4ff af04 	bcc.w	8001710 <ScanFrequencyRange+0x1c>
            }
        } // end if RSSI > threshold
    } // end for(dacValue)

    // 8) After scanning, set DAC to the value that yielded the highest ratio
    if(bestRatio > 0.0f)
 8001908:	edd7 7a07 	vldr	s15, [r7, #28]
 800190c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001914:	dd14      	ble.n	8001940 <ScanFrequencyRange+0x24c>
    {
        SetDACValue(bestDACValue);
 8001916:	8b7b      	ldrh	r3, [r7, #26]
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff fec7 	bl	80016ac <SetDACValue>
        printf("\nSetting DAC to best ratio candidate:\n\r");
 800191e:	481c      	ldr	r0, [pc, #112]	@ (8001990 <ScanFrequencyRange+0x29c>)
 8001920:	f005 fb1a 	bl	8006f58 <iprintf>
        printf("  Best DAC Value = %u\n\r", bestDACValue);
 8001924:	8b7b      	ldrh	r3, [r7, #26]
 8001926:	4619      	mov	r1, r3
 8001928:	481a      	ldr	r0, [pc, #104]	@ (8001994 <ScanFrequencyRange+0x2a0>)
 800192a:	f005 fb15 	bl	8006f58 <iprintf>
        printf("  Best Ratio     = %.2f\n\n\r", bestRatio);
 800192e:	69f8      	ldr	r0, [r7, #28]
 8001930:	f7fe fe2a 	bl	8000588 <__aeabi_f2d>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	4817      	ldr	r0, [pc, #92]	@ (8001998 <ScanFrequencyRange+0x2a4>)
 800193a:	f005 fb0d 	bl	8006f58 <iprintf>
    }
    else
    {
        printf("No valid candidate found above threshold.\n\r");
    }
}
 800193e:	e002      	b.n	8001946 <ScanFrequencyRange+0x252>
        printf("No valid candidate found above threshold.\n\r");
 8001940:	4816      	ldr	r0, [pc, #88]	@ (800199c <ScanFrequencyRange+0x2a8>)
 8001942:	f005 fb09 	bl	8006f58 <iprintf>
}
 8001946:	bf00      	nop
 8001948:	3724      	adds	r7, #36	@ 0x24
 800194a:	46bd      	mov	sp, r7
 800194c:	bd90      	pop	{r4, r7, pc}
 800194e:	bf00      	nop
 8001950:	20011a10 	.word	0x20011a10
 8001954:	3d4ccccd 	.word	0x3d4ccccd
 8001958:	461c4000 	.word	0x461c4000
 800195c:	20000470 	.word	0x20000470
 8001960:	20000870 	.word	0x20000870
 8001964:	42800000 	.word	0x42800000
 8001968:	3089705f 	.word	0x3089705f
 800196c:	20011410 	.word	0x20011410
 8001970:	0800ae34 	.word	0x0800ae34
 8001974:	0800ae48 	.word	0x0800ae48
 8001978:	0800ae58 	.word	0x0800ae58
 800197c:	0800ae68 	.word	0x0800ae68
 8001980:	0800ae88 	.word	0x0800ae88
 8001984:	0800aea4 	.word	0x0800aea4
 8001988:	0800aec0 	.word	0x0800aec0
 800198c:	0800aee0 	.word	0x0800aee0
 8001990:	0800aefc 	.word	0x0800aefc
 8001994:	0800af24 	.word	0x0800af24
 8001998:	0800af3c 	.word	0x0800af3c
 800199c:	0800af58 	.word	0x0800af58

080019a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019a4:	b095      	sub	sp, #84	@ 0x54
 80019a6:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019a8:	f001 f812 	bl	80029d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019ac:	f000 f946 	bl	8001c3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019b0:	f000 fbf6 	bl	80021a0 <MX_GPIO_Init>
  MX_DMA_Init();
 80019b4:	f000 fbd4 	bl	8002160 <MX_DMA_Init>
  MX_ADC1_Init();
 80019b8:	f000 f9ae 	bl	8001d18 <MX_ADC1_Init>
  MX_DAC_Init();
 80019bc:	f000 faa2 	bl	8001f04 <MX_DAC_Init>
  MX_SPI2_Init();
 80019c0:	f000 fad4 	bl	8001f6c <MX_SPI2_Init>
  MX_ADC2_Init();
 80019c4:	f000 f9fa 	bl	8001dbc <MX_ADC2_Init>
  MX_ADC3_Init();
 80019c8:	f000 fa4a 	bl	8001e60 <MX_ADC3_Init>
  MX_TIM3_Init();
 80019cc:	f000 fb04 	bl	8001fd8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80019d0:	f000 fb60 	bl	8002094 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc2, (uint32_t *)adc_buffer, NUM_SAMPLES);
 80019d4:	2280      	movs	r2, #128	@ 0x80
 80019d6:	4991      	ldr	r1, [pc, #580]	@ (8001c1c <main+0x27c>)
 80019d8:	4891      	ldr	r0, [pc, #580]	@ (8001c20 <main+0x280>)
 80019da:	f001 fa31 	bl	8002e40 <HAL_ADC_Start_DMA>
  Heater_Update_Blocking();
 80019de:	f7ff fbc7 	bl	8001170 <Heater_Update_Blocking>
  ScanFrequencyRange();
 80019e2:	f7ff fe87 	bl	80016f4 <ScanFrequencyRange>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t num =0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80019ec:	2100      	movs	r1, #0
 80019ee:	488d      	ldr	r0, [pc, #564]	@ (8001c24 <main+0x284>)
 80019f0:	f003 fcd6 	bl	80053a0 <HAL_TIM_IC_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //toggle_pins();
	 Heater_Update_Non_Blocking();
 80019f4:	f7ff fbda 	bl	80011ac <Heater_Update_Non_Blocking>

	 float cos_alpha[4];
	 float cos_beta[4];
	  for (uint8_t pair = 0; pair < 4; pair++) {
 80019f8:	2300      	movs	r3, #0
 80019fa:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 80019fe:	e0ef      	b.n	8001be0 <main+0x240>
		  toggle_pins();
 8001a00:	f7ff fbf4 	bl	80011ec <toggle_pins>
		  measurements[num].phaseSettinggs[pair].voltage_measurements=read_ADC_voltage();
 8001a04:	f897 4037 	ldrb.w	r4, [r7, #55]	@ 0x37
 8001a08:	f897 5036 	ldrb.w	r5, [r7, #54]	@ 0x36
 8001a0c:	f7ff fc70 	bl	80012f0 <read_ADC_voltage>
 8001a10:	eef0 7a40 	vmov.f32	s15, s0
 8001a14:	4984      	ldr	r1, [pc, #528]	@ (8001c28 <main+0x288>)
 8001a16:	012a      	lsls	r2, r5, #4
 8001a18:	4623      	mov	r3, r4
 8001a1a:	011b      	lsls	r3, r3, #4
 8001a1c:	4423      	add	r3, r4
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	4413      	add	r3, r2
 8001a22:	440b      	add	r3, r1
 8001a24:	330c      	adds	r3, #12
 8001a26:	edc3 7a00 	vstr	s15, [r3]
		  measurements[num].phaseSettinggs[pair].rsia=read_voltage(&hadc1, ADC_CHANNEL_10);
 8001a2a:	f897 4037 	ldrb.w	r4, [r7, #55]	@ 0x37
 8001a2e:	f897 5036 	ldrb.w	r5, [r7, #54]	@ 0x36
 8001a32:	210a      	movs	r1, #10
 8001a34:	487d      	ldr	r0, [pc, #500]	@ (8001c2c <main+0x28c>)
 8001a36:	f7ff fc8b 	bl	8001350 <read_voltage>
 8001a3a:	eef0 7a40 	vmov.f32	s15, s0
 8001a3e:	497a      	ldr	r1, [pc, #488]	@ (8001c28 <main+0x288>)
 8001a40:	012a      	lsls	r2, r5, #4
 8001a42:	4623      	mov	r3, r4
 8001a44:	011b      	lsls	r3, r3, #4
 8001a46:	4423      	add	r3, r4
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4413      	add	r3, r2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	3304      	adds	r3, #4
 8001a50:	edc3 7a00 	vstr	s15, [r3]
		  measurements[num].phaseSettinggs[pair].rsib=read_voltage(&hadc1, ADC_CHANNEL_11);
 8001a54:	f897 4037 	ldrb.w	r4, [r7, #55]	@ 0x37
 8001a58:	f897 5036 	ldrb.w	r5, [r7, #54]	@ 0x36
 8001a5c:	210b      	movs	r1, #11
 8001a5e:	4873      	ldr	r0, [pc, #460]	@ (8001c2c <main+0x28c>)
 8001a60:	f7ff fc76 	bl	8001350 <read_voltage>
 8001a64:	eef0 7a40 	vmov.f32	s15, s0
 8001a68:	496f      	ldr	r1, [pc, #444]	@ (8001c28 <main+0x288>)
 8001a6a:	012a      	lsls	r2, r5, #4
 8001a6c:	4623      	mov	r3, r4
 8001a6e:	011b      	lsls	r3, r3, #4
 8001a70:	4423      	add	r3, r4
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	4413      	add	r3, r2
 8001a76:	440b      	add	r3, r1
 8001a78:	3308      	adds	r3, #8
 8001a7a:	edc3 7a00 	vstr	s15, [r3]
		  measurements[num].phaseSettinggs[pair].frequency=measure_frequency();
 8001a7e:	f897 4037 	ldrb.w	r4, [r7, #55]	@ 0x37
 8001a82:	f897 5036 	ldrb.w	r5, [r7, #54]	@ 0x36
 8001a86:	f7ff fcbb 	bl	8001400 <measure_frequency>
 8001a8a:	eef0 7a40 	vmov.f32	s15, s0
 8001a8e:	4966      	ldr	r1, [pc, #408]	@ (8001c28 <main+0x288>)
 8001a90:	012a      	lsls	r2, r5, #4
 8001a92:	4623      	mov	r3, r4
 8001a94:	011b      	lsls	r3, r3, #4
 8001a96:	4423      	add	r3, r4
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	3310      	adds	r3, #16
 8001aa0:	edc3 7a00 	vstr	s15, [r3]
		  float max_voltage = 3.3f;
 8001aa4:	4b62      	ldr	r3, [pc, #392]	@ (8001c30 <main+0x290>)
 8001aa6:	633b      	str	r3, [r7, #48]	@ 0x30
		  float mcos_alpha = measurements[num].phaseSettinggs[pair].rsia / max_voltage;
 8001aa8:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001aac:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001ab0:	485d      	ldr	r0, [pc, #372]	@ (8001c28 <main+0x288>)
 8001ab2:	0119      	lsls	r1, r3, #4
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	011b      	lsls	r3, r3, #4
 8001ab8:	4413      	add	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	440b      	add	r3, r1
 8001abe:	4403      	add	r3, r0
 8001ac0:	3304      	adds	r3, #4
 8001ac2:	edd3 6a00 	vldr	s13, [r3]
 8001ac6:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001aca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ace:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		  float mcos_beta = measurements[num].phaseSettinggs[pair].rsib / max_voltage;
 8001ad2:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001ad6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001ada:	4853      	ldr	r0, [pc, #332]	@ (8001c28 <main+0x288>)
 8001adc:	0119      	lsls	r1, r3, #4
 8001ade:	4613      	mov	r3, r2
 8001ae0:	011b      	lsls	r3, r3, #4
 8001ae2:	4413      	add	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	440b      	add	r3, r1
 8001ae8:	4403      	add	r3, r0
 8001aea:	3308      	adds	r3, #8
 8001aec:	edd3 6a00 	vldr	s13, [r3]
 8001af0:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001af4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001af8:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

		  cos_alpha[pair] = mcos_alpha;
 8001afc:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	3338      	adds	r3, #56	@ 0x38
 8001b04:	443b      	add	r3, r7
 8001b06:	3b20      	subs	r3, #32
 8001b08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b0a:	601a      	str	r2, [r3, #0]
		  cos_beta[pair]  = mcos_beta;
 8001b0c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	3338      	adds	r3, #56	@ 0x38
 8001b14:	443b      	add	r3, r7
 8001b16:	3b30      	subs	r3, #48	@ 0x30
 8001b18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b1a:	601a      	str	r2, [r3, #0]
		  printf("Antenna Pair %d: Detector=%.2f V, RSSI_A=%.2f V, RSSI_B=%.2f V, Frequency=%.2f Hz\n\r",
 8001b1c:	f897 6036 	ldrb.w	r6, [r7, #54]	@ 0x36
				  pair,
				  measurements[num].phaseSettinggs[pair].voltage_measurements,
 8001b20:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001b24:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001b28:	483f      	ldr	r0, [pc, #252]	@ (8001c28 <main+0x288>)
 8001b2a:	0119      	lsls	r1, r3, #4
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	011b      	lsls	r3, r3, #4
 8001b30:	4413      	add	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	440b      	add	r3, r1
 8001b36:	4403      	add	r3, r0
 8001b38:	330c      	adds	r3, #12
 8001b3a:	681b      	ldr	r3, [r3, #0]
		  printf("Antenna Pair %d: Detector=%.2f V, RSSI_A=%.2f V, RSSI_B=%.2f V, Frequency=%.2f Hz\n\r",
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7fe fd23 	bl	8000588 <__aeabi_f2d>
 8001b42:	4682      	mov	sl, r0
 8001b44:	468b      	mov	fp, r1
				  measurements[num].phaseSettinggs[pair].rsia,
 8001b46:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001b4a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001b4e:	4836      	ldr	r0, [pc, #216]	@ (8001c28 <main+0x288>)
 8001b50:	0119      	lsls	r1, r3, #4
 8001b52:	4613      	mov	r3, r2
 8001b54:	011b      	lsls	r3, r3, #4
 8001b56:	4413      	add	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	440b      	add	r3, r1
 8001b5c:	4403      	add	r3, r0
 8001b5e:	3304      	adds	r3, #4
 8001b60:	681b      	ldr	r3, [r3, #0]
		  printf("Antenna Pair %d: Detector=%.2f V, RSSI_A=%.2f V, RSSI_B=%.2f V, Frequency=%.2f Hz\n\r",
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7fe fd10 	bl	8000588 <__aeabi_f2d>
 8001b68:	4604      	mov	r4, r0
 8001b6a:	460d      	mov	r5, r1
				  measurements[num].phaseSettinggs[pair].rsib,
 8001b6c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001b70:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001b74:	482c      	ldr	r0, [pc, #176]	@ (8001c28 <main+0x288>)
 8001b76:	0119      	lsls	r1, r3, #4
 8001b78:	4613      	mov	r3, r2
 8001b7a:	011b      	lsls	r3, r3, #4
 8001b7c:	4413      	add	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	440b      	add	r3, r1
 8001b82:	4403      	add	r3, r0
 8001b84:	3308      	adds	r3, #8
 8001b86:	681b      	ldr	r3, [r3, #0]
		  printf("Antenna Pair %d: Detector=%.2f V, RSSI_A=%.2f V, RSSI_B=%.2f V, Frequency=%.2f Hz\n\r",
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7fe fcfd 	bl	8000588 <__aeabi_f2d>
 8001b8e:	4680      	mov	r8, r0
 8001b90:	4689      	mov	r9, r1
				  measurements[num].phaseSettinggs[pair].frequency
 8001b92:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001b96:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001b9a:	4823      	ldr	r0, [pc, #140]	@ (8001c28 <main+0x288>)
 8001b9c:	0119      	lsls	r1, r3, #4
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	011b      	lsls	r3, r3, #4
 8001ba2:	4413      	add	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	440b      	add	r3, r1
 8001ba8:	4403      	add	r3, r0
 8001baa:	3310      	adds	r3, #16
 8001bac:	681b      	ldr	r3, [r3, #0]
		  printf("Antenna Pair %d: Detector=%.2f V, RSSI_A=%.2f V, RSSI_B=%.2f V, Frequency=%.2f Hz\n\r",
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7fe fcea 	bl	8000588 <__aeabi_f2d>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001bbc:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001bc0:	e9cd 4500 	strd	r4, r5, [sp]
 8001bc4:	4652      	mov	r2, sl
 8001bc6:	465b      	mov	r3, fp
 8001bc8:	4631      	mov	r1, r6
 8001bca:	481a      	ldr	r0, [pc, #104]	@ (8001c34 <main+0x294>)
 8001bcc:	f005 f9c4 	bl	8006f58 <iprintf>
				  );

		  //set_servo_pwm(&htim4, TIM_CHANNEL_3, angles.azimuth);
		  //set_servo_pwm(&htim4, TIM_CHANNEL_4, angles.elevation);
		  HAL_Delay(100);
 8001bd0:	2064      	movs	r0, #100	@ 0x64
 8001bd2:	f000 ff6f 	bl	8002ab4 <HAL_Delay>
	  for (uint8_t pair = 0; pair < 4; pair++) {
 8001bd6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001bda:	3301      	adds	r3, #1
 8001bdc:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8001be0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001be4:	2b03      	cmp	r3, #3
 8001be6:	f67f af0b 	bls.w	8001a00 <main+0x60>
	  }
	  AngleResults angles = calculate_angles(cos_alpha, cos_beta);
 8001bea:	f107 0208 	add.w	r2, r7, #8
 8001bee:	f107 0318 	add.w	r3, r7, #24
 8001bf2:	4611      	mov	r1, r2
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff fc3f 	bl	8001478 <calculate_angles>
 8001bfa:	eeb0 7a40 	vmov.f32	s14, s0
 8001bfe:	eef0 7a60 	vmov.f32	s15, s1
 8001c02:	ed87 7a00 	vstr	s14, [r7]
 8001c06:	edc7 7a01 	vstr	s15, [r7, #4]
	  num++;
 8001c0a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001c0e:	3301      	adds	r3, #1
 8001c10:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	  if(num>900)
		  num=0;
	  printf("aaa");
 8001c14:	4808      	ldr	r0, [pc, #32]	@ (8001c38 <main+0x298>)
 8001c16:	f005 f99f 	bl	8006f58 <iprintf>
  {
 8001c1a:	e6eb      	b.n	80019f4 <main+0x54>
 8001c1c:	20000970 	.word	0x20000970
 8001c20:	200002c8 	.word	0x200002c8
 8001c24:	20000280 	.word	0x20000280
 8001c28:	20000a70 	.word	0x20000a70
 8001c2c:	200001f0 	.word	0x200001f0
 8001c30:	40533333 	.word	0x40533333
 8001c34:	0800af84 	.word	0x0800af84
 8001c38:	0800afd8 	.word	0x0800afd8

08001c3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b094      	sub	sp, #80	@ 0x50
 8001c40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c42:	f107 031c 	add.w	r3, r7, #28
 8001c46:	2234      	movs	r2, #52	@ 0x34
 8001c48:	2100      	movs	r1, #0
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f005 f9f9 	bl	8007042 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c50:	f107 0308 	add.w	r3, r7, #8
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c60:	2300      	movs	r3, #0
 8001c62:	607b      	str	r3, [r7, #4]
 8001c64:	4b2a      	ldr	r3, [pc, #168]	@ (8001d10 <SystemClock_Config+0xd4>)
 8001c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c68:	4a29      	ldr	r2, [pc, #164]	@ (8001d10 <SystemClock_Config+0xd4>)
 8001c6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c70:	4b27      	ldr	r3, [pc, #156]	@ (8001d10 <SystemClock_Config+0xd4>)
 8001c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c78:	607b      	str	r3, [r7, #4]
 8001c7a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	603b      	str	r3, [r7, #0]
 8001c80:	4b24      	ldr	r3, [pc, #144]	@ (8001d14 <SystemClock_Config+0xd8>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001c88:	4a22      	ldr	r2, [pc, #136]	@ (8001d14 <SystemClock_Config+0xd8>)
 8001c8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c8e:	6013      	str	r3, [r2, #0]
 8001c90:	4b20      	ldr	r3, [pc, #128]	@ (8001d14 <SystemClock_Config+0xd8>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001c98:	603b      	str	r3, [r7, #0]
 8001c9a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ca4:	2310      	movs	r3, #16
 8001ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001cac:	2300      	movs	r3, #0
 8001cae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001cb0:	230f      	movs	r3, #15
 8001cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001cb4:	2390      	movs	r3, #144	@ 0x90
 8001cb6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001cbc:	2305      	movs	r3, #5
 8001cbe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cc4:	f107 031c 	add.w	r3, r7, #28
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f002 fdd5 	bl	8004878 <HAL_RCC_OscConfig>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001cd4:	f000 fb08 	bl	80022e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cd8:	230f      	movs	r3, #15
 8001cda:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ce4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001ce8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001cea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cee:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001cf0:	f107 0308 	add.w	r3, r7, #8
 8001cf4:	2102      	movs	r1, #2
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f002 fb2e 	bl	8004358 <HAL_RCC_ClockConfig>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001d02:	f000 faf1 	bl	80022e8 <Error_Handler>
  }
}
 8001d06:	bf00      	nop
 8001d08:	3750      	adds	r7, #80	@ 0x50
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40007000 	.word	0x40007000

08001d18 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d1e:	463b      	mov	r3, r7
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001d2a:	4b21      	ldr	r3, [pc, #132]	@ (8001db0 <MX_ADC1_Init+0x98>)
 8001d2c:	4a21      	ldr	r2, [pc, #132]	@ (8001db4 <MX_ADC1_Init+0x9c>)
 8001d2e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001d30:	4b1f      	ldr	r3, [pc, #124]	@ (8001db0 <MX_ADC1_Init+0x98>)
 8001d32:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001d36:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d38:	4b1d      	ldr	r3, [pc, #116]	@ (8001db0 <MX_ADC1_Init+0x98>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001d3e:	4b1c      	ldr	r3, [pc, #112]	@ (8001db0 <MX_ADC1_Init+0x98>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001d44:	4b1a      	ldr	r3, [pc, #104]	@ (8001db0 <MX_ADC1_Init+0x98>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d4a:	4b19      	ldr	r3, [pc, #100]	@ (8001db0 <MX_ADC1_Init+0x98>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d52:	4b17      	ldr	r3, [pc, #92]	@ (8001db0 <MX_ADC1_Init+0x98>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d58:	4b15      	ldr	r3, [pc, #84]	@ (8001db0 <MX_ADC1_Init+0x98>)
 8001d5a:	4a17      	ldr	r2, [pc, #92]	@ (8001db8 <MX_ADC1_Init+0xa0>)
 8001d5c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d5e:	4b14      	ldr	r3, [pc, #80]	@ (8001db0 <MX_ADC1_Init+0x98>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001d64:	4b12      	ldr	r3, [pc, #72]	@ (8001db0 <MX_ADC1_Init+0x98>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001d6a:	4b11      	ldr	r3, [pc, #68]	@ (8001db0 <MX_ADC1_Init+0x98>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d72:	4b0f      	ldr	r3, [pc, #60]	@ (8001db0 <MX_ADC1_Init+0x98>)
 8001d74:	2201      	movs	r2, #1
 8001d76:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d78:	480d      	ldr	r0, [pc, #52]	@ (8001db0 <MX_ADC1_Init+0x98>)
 8001d7a:	f000 febf 	bl	8002afc <HAL_ADC_Init>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001d84:	f000 fab0 	bl	80022e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001d88:	230a      	movs	r3, #10
 8001d8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001d90:	2300      	movs	r3, #0
 8001d92:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d94:	463b      	mov	r3, r7
 8001d96:	4619      	mov	r1, r3
 8001d98:	4805      	ldr	r0, [pc, #20]	@ (8001db0 <MX_ADC1_Init+0x98>)
 8001d9a:	f001 f983 	bl	80030a4 <HAL_ADC_ConfigChannel>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001da4:	f000 faa0 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001da8:	bf00      	nop
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	200001f0 	.word	0x200001f0
 8001db4:	40012000 	.word	0x40012000
 8001db8:	0f000001 	.word	0x0f000001

08001dbc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001dc2:	463b      	mov	r3, r7
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001dce:	4b21      	ldr	r3, [pc, #132]	@ (8001e54 <MX_ADC2_Init+0x98>)
 8001dd0:	4a21      	ldr	r2, [pc, #132]	@ (8001e58 <MX_ADC2_Init+0x9c>)
 8001dd2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001dd4:	4b1f      	ldr	r3, [pc, #124]	@ (8001e54 <MX_ADC2_Init+0x98>)
 8001dd6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001dda:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001ddc:	4b1d      	ldr	r3, [pc, #116]	@ (8001e54 <MX_ADC2_Init+0x98>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001de2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e54 <MX_ADC2_Init+0x98>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001de8:	4b1a      	ldr	r3, [pc, #104]	@ (8001e54 <MX_ADC2_Init+0x98>)
 8001dea:	2201      	movs	r2, #1
 8001dec:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001dee:	4b19      	ldr	r3, [pc, #100]	@ (8001e54 <MX_ADC2_Init+0x98>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001df6:	4b17      	ldr	r3, [pc, #92]	@ (8001e54 <MX_ADC2_Init+0x98>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001dfc:	4b15      	ldr	r3, [pc, #84]	@ (8001e54 <MX_ADC2_Init+0x98>)
 8001dfe:	4a17      	ldr	r2, [pc, #92]	@ (8001e5c <MX_ADC2_Init+0xa0>)
 8001e00:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e02:	4b14      	ldr	r3, [pc, #80]	@ (8001e54 <MX_ADC2_Init+0x98>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001e08:	4b12      	ldr	r3, [pc, #72]	@ (8001e54 <MX_ADC2_Init+0x98>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001e0e:	4b11      	ldr	r3, [pc, #68]	@ (8001e54 <MX_ADC2_Init+0x98>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e16:	4b0f      	ldr	r3, [pc, #60]	@ (8001e54 <MX_ADC2_Init+0x98>)
 8001e18:	2201      	movs	r2, #1
 8001e1a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001e1c:	480d      	ldr	r0, [pc, #52]	@ (8001e54 <MX_ADC2_Init+0x98>)
 8001e1e:	f000 fe6d 	bl	8002afc <HAL_ADC_Init>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001e28:	f000 fa5e 	bl	80022e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001e30:	2301      	movs	r3, #1
 8001e32:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001e34:	2300      	movs	r3, #0
 8001e36:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001e38:	463b      	mov	r3, r7
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4805      	ldr	r0, [pc, #20]	@ (8001e54 <MX_ADC2_Init+0x98>)
 8001e3e:	f001 f931 	bl	80030a4 <HAL_ADC_ConfigChannel>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001e48:	f000 fa4e 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001e4c:	bf00      	nop
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	200002c8 	.word	0x200002c8
 8001e58:	40012100 	.word	0x40012100
 8001e5c:	0f000001 	.word	0x0f000001

08001e60 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e66:	463b      	mov	r3, r7
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001e72:	4b21      	ldr	r3, [pc, #132]	@ (8001ef8 <MX_ADC3_Init+0x98>)
 8001e74:	4a21      	ldr	r2, [pc, #132]	@ (8001efc <MX_ADC3_Init+0x9c>)
 8001e76:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001e78:	4b1f      	ldr	r3, [pc, #124]	@ (8001ef8 <MX_ADC3_Init+0x98>)
 8001e7a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001e7e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001e80:	4b1d      	ldr	r3, [pc, #116]	@ (8001ef8 <MX_ADC3_Init+0x98>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001e86:	4b1c      	ldr	r3, [pc, #112]	@ (8001ef8 <MX_ADC3_Init+0x98>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef8 <MX_ADC3_Init+0x98>)
 8001e8e:	2201      	movs	r2, #1
 8001e90:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001e92:	4b19      	ldr	r3, [pc, #100]	@ (8001ef8 <MX_ADC3_Init+0x98>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e9a:	4b17      	ldr	r3, [pc, #92]	@ (8001ef8 <MX_ADC3_Init+0x98>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ea0:	4b15      	ldr	r3, [pc, #84]	@ (8001ef8 <MX_ADC3_Init+0x98>)
 8001ea2:	4a17      	ldr	r2, [pc, #92]	@ (8001f00 <MX_ADC3_Init+0xa0>)
 8001ea4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ea6:	4b14      	ldr	r3, [pc, #80]	@ (8001ef8 <MX_ADC3_Init+0x98>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001eac:	4b12      	ldr	r3, [pc, #72]	@ (8001ef8 <MX_ADC3_Init+0x98>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001eb2:	4b11      	ldr	r3, [pc, #68]	@ (8001ef8 <MX_ADC3_Init+0x98>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001eba:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef8 <MX_ADC3_Init+0x98>)
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001ec0:	480d      	ldr	r0, [pc, #52]	@ (8001ef8 <MX_ADC3_Init+0x98>)
 8001ec2:	f000 fe1b 	bl	8002afc <HAL_ADC_Init>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001ecc:	f000 fa0c 	bl	80022e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001edc:	463b      	mov	r3, r7
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4805      	ldr	r0, [pc, #20]	@ (8001ef8 <MX_ADC3_Init+0x98>)
 8001ee2:	f001 f8df 	bl	80030a4 <HAL_ADC_ConfigChannel>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001eec:	f000 f9fc 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001ef0:	bf00      	nop
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	20000310 	.word	0x20000310
 8001efc:	40012200 	.word	0x40012200
 8001f00:	0f000001 	.word	0x0f000001

08001f04 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001f0a:	463b      	mov	r3, r7
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001f12:	4b14      	ldr	r3, [pc, #80]	@ (8001f64 <MX_DAC_Init+0x60>)
 8001f14:	4a14      	ldr	r2, [pc, #80]	@ (8001f68 <MX_DAC_Init+0x64>)
 8001f16:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001f18:	4812      	ldr	r0, [pc, #72]	@ (8001f64 <MX_DAC_Init+0x60>)
 8001f1a:	f001 fc84 	bl	8003826 <HAL_DAC_Init>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001f24:	f000 f9e0 	bl	80022e8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001f30:	463b      	mov	r3, r7
 8001f32:	2200      	movs	r2, #0
 8001f34:	4619      	mov	r1, r3
 8001f36:	480b      	ldr	r0, [pc, #44]	@ (8001f64 <MX_DAC_Init+0x60>)
 8001f38:	f001 fc97 	bl	800386a <HAL_DAC_ConfigChannel>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001f42:	f000 f9d1 	bl	80022e8 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001f46:	463b      	mov	r3, r7
 8001f48:	2210      	movs	r2, #16
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4805      	ldr	r0, [pc, #20]	@ (8001f64 <MX_DAC_Init+0x60>)
 8001f4e:	f001 fc8c 	bl	800386a <HAL_DAC_ConfigChannel>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8001f58:	f000 f9c6 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001f5c:	bf00      	nop
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	200003b8 	.word	0x200003b8
 8001f68:	40007400 	.word	0x40007400

08001f6c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001f70:	4b17      	ldr	r3, [pc, #92]	@ (8001fd0 <MX_SPI2_Init+0x64>)
 8001f72:	4a18      	ldr	r2, [pc, #96]	@ (8001fd4 <MX_SPI2_Init+0x68>)
 8001f74:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001f76:	4b16      	ldr	r3, [pc, #88]	@ (8001fd0 <MX_SPI2_Init+0x64>)
 8001f78:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f7c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001f7e:	4b14      	ldr	r3, [pc, #80]	@ (8001fd0 <MX_SPI2_Init+0x64>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f84:	4b12      	ldr	r3, [pc, #72]	@ (8001fd0 <MX_SPI2_Init+0x64>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f8a:	4b11      	ldr	r3, [pc, #68]	@ (8001fd0 <MX_SPI2_Init+0x64>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f90:	4b0f      	ldr	r3, [pc, #60]	@ (8001fd0 <MX_SPI2_Init+0x64>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001f96:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd0 <MX_SPI2_Init+0x64>)
 8001f98:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001f9c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd0 <MX_SPI2_Init+0x64>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fa4:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd0 <MX_SPI2_Init+0x64>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001faa:	4b09      	ldr	r3, [pc, #36]	@ (8001fd0 <MX_SPI2_Init+0x64>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fb0:	4b07      	ldr	r3, [pc, #28]	@ (8001fd0 <MX_SPI2_Init+0x64>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001fb6:	4b06      	ldr	r3, [pc, #24]	@ (8001fd0 <MX_SPI2_Init+0x64>)
 8001fb8:	220a      	movs	r2, #10
 8001fba:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001fbc:	4804      	ldr	r0, [pc, #16]	@ (8001fd0 <MX_SPI2_Init+0x64>)
 8001fbe:	f002 fef9 	bl	8004db4 <HAL_SPI_Init>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001fc8:	f000 f98e 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001fcc:	bf00      	nop
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	200003cc 	.word	0x200003cc
 8001fd4:	40003800 	.word	0x40003800

08001fd8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fde:	f107 0310 	add.w	r3, r7, #16
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001fe8:	463b      	mov	r3, r7
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	605a      	str	r2, [r3, #4]
 8001ff0:	609a      	str	r2, [r3, #8]
 8001ff2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ff4:	4b25      	ldr	r3, [pc, #148]	@ (800208c <MX_TIM3_Init+0xb4>)
 8001ff6:	4a26      	ldr	r2, [pc, #152]	@ (8002090 <MX_TIM3_Init+0xb8>)
 8001ff8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ffa:	4b24      	ldr	r3, [pc, #144]	@ (800208c <MX_TIM3_Init+0xb4>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002000:	4b22      	ldr	r3, [pc, #136]	@ (800208c <MX_TIM3_Init+0xb4>)
 8002002:	2200      	movs	r2, #0
 8002004:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002006:	4b21      	ldr	r3, [pc, #132]	@ (800208c <MX_TIM3_Init+0xb4>)
 8002008:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800200c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800200e:	4b1f      	ldr	r3, [pc, #124]	@ (800208c <MX_TIM3_Init+0xb4>)
 8002010:	2200      	movs	r2, #0
 8002012:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002014:	4b1d      	ldr	r3, [pc, #116]	@ (800208c <MX_TIM3_Init+0xb4>)
 8002016:	2200      	movs	r2, #0
 8002018:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800201a:	481c      	ldr	r0, [pc, #112]	@ (800208c <MX_TIM3_Init+0xb4>)
 800201c:	f003 f832 	bl	8005084 <HAL_TIM_IC_Init>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002026:	f000 f95f 	bl	80022e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800202a:	2300      	movs	r3, #0
 800202c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002032:	f107 0310 	add.w	r3, r7, #16
 8002036:	4619      	mov	r1, r3
 8002038:	4814      	ldr	r0, [pc, #80]	@ (800208c <MX_TIM3_Init+0xb4>)
 800203a:	f003 ffe3 	bl	8006004 <HAL_TIMEx_MasterConfigSynchronization>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002044:	f000 f950 	bl	80022e8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002048:	2300      	movs	r3, #0
 800204a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800204c:	2301      	movs	r3, #1
 800204e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002050:	2300      	movs	r3, #0
 8002052:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002054:	2300      	movs	r3, #0
 8002056:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002058:	463b      	mov	r3, r7
 800205a:	2200      	movs	r2, #0
 800205c:	4619      	mov	r1, r3
 800205e:	480b      	ldr	r0, [pc, #44]	@ (800208c <MX_TIM3_Init+0xb4>)
 8002060:	f003 fac6 	bl	80055f0 <HAL_TIM_IC_ConfigChannel>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800206a:	f000 f93d 	bl	80022e8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800206e:	463b      	mov	r3, r7
 8002070:	2204      	movs	r2, #4
 8002072:	4619      	mov	r1, r3
 8002074:	4805      	ldr	r0, [pc, #20]	@ (800208c <MX_TIM3_Init+0xb4>)
 8002076:	f003 fabb 	bl	80055f0 <HAL_TIM_IC_ConfigChannel>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8002080:	f000 f932 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002084:	bf00      	nop
 8002086:	3718      	adds	r7, #24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	20000280 	.word	0x20000280
 8002090:	40000400 	.word	0x40000400

08002094 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b08a      	sub	sp, #40	@ 0x28
 8002098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800209a:	f107 0320 	add.w	r3, r7, #32
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020a4:	1d3b      	adds	r3, r7, #4
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	605a      	str	r2, [r3, #4]
 80020ac:	609a      	str	r2, [r3, #8]
 80020ae:	60da      	str	r2, [r3, #12]
 80020b0:	611a      	str	r2, [r3, #16]
 80020b2:	615a      	str	r2, [r3, #20]
 80020b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80020b6:	4b28      	ldr	r3, [pc, #160]	@ (8002158 <MX_TIM4_Init+0xc4>)
 80020b8:	4a28      	ldr	r2, [pc, #160]	@ (800215c <MX_TIM4_Init+0xc8>)
 80020ba:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 80020bc:	4b26      	ldr	r3, [pc, #152]	@ (8002158 <MX_TIM4_Init+0xc4>)
 80020be:	2253      	movs	r2, #83	@ 0x53
 80020c0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020c2:	4b25      	ldr	r3, [pc, #148]	@ (8002158 <MX_TIM4_Init+0xc4>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 80020c8:	4b23      	ldr	r3, [pc, #140]	@ (8002158 <MX_TIM4_Init+0xc4>)
 80020ca:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80020ce:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020d0:	4b21      	ldr	r3, [pc, #132]	@ (8002158 <MX_TIM4_Init+0xc4>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020d6:	4b20      	ldr	r3, [pc, #128]	@ (8002158 <MX_TIM4_Init+0xc4>)
 80020d8:	2200      	movs	r2, #0
 80020da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80020dc:	481e      	ldr	r0, [pc, #120]	@ (8002158 <MX_TIM4_Init+0xc4>)
 80020de:	f002 ff82 	bl	8004fe6 <HAL_TIM_PWM_Init>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80020e8:	f000 f8fe 	bl	80022e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ec:	2300      	movs	r3, #0
 80020ee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020f0:	2300      	movs	r3, #0
 80020f2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80020f4:	f107 0320 	add.w	r3, r7, #32
 80020f8:	4619      	mov	r1, r3
 80020fa:	4817      	ldr	r0, [pc, #92]	@ (8002158 <MX_TIM4_Init+0xc4>)
 80020fc:	f003 ff82 	bl	8006004 <HAL_TIMEx_MasterConfigSynchronization>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8002106:	f000 f8ef 	bl	80022e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800210a:	2360      	movs	r3, #96	@ 0x60
 800210c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10000;
 800210e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002112:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002114:	2300      	movs	r3, #0
 8002116:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002118:	2300      	movs	r3, #0
 800211a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800211c:	1d3b      	adds	r3, r7, #4
 800211e:	2208      	movs	r2, #8
 8002120:	4619      	mov	r1, r3
 8002122:	480d      	ldr	r0, [pc, #52]	@ (8002158 <MX_TIM4_Init+0xc4>)
 8002124:	f003 fb00 	bl	8005728 <HAL_TIM_PWM_ConfigChannel>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800212e:	f000 f8db 	bl	80022e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002132:	1d3b      	adds	r3, r7, #4
 8002134:	220c      	movs	r2, #12
 8002136:	4619      	mov	r1, r3
 8002138:	4807      	ldr	r0, [pc, #28]	@ (8002158 <MX_TIM4_Init+0xc4>)
 800213a:	f003 faf5 	bl	8005728 <HAL_TIM_PWM_ConfigChannel>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8002144:	f000 f8d0 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002148:	4803      	ldr	r0, [pc, #12]	@ (8002158 <MX_TIM4_Init+0xc4>)
 800214a:	f000 facb 	bl	80026e4 <HAL_TIM_MspPostInit>

}
 800214e:	bf00      	nop
 8002150:	3728      	adds	r7, #40	@ 0x28
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	20000424 	.word	0x20000424
 800215c:	40000800 	.word	0x40000800

08002160 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	607b      	str	r3, [r7, #4]
 800216a:	4b0c      	ldr	r3, [pc, #48]	@ (800219c <MX_DMA_Init+0x3c>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216e:	4a0b      	ldr	r2, [pc, #44]	@ (800219c <MX_DMA_Init+0x3c>)
 8002170:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002174:	6313      	str	r3, [r2, #48]	@ 0x30
 8002176:	4b09      	ldr	r3, [pc, #36]	@ (800219c <MX_DMA_Init+0x3c>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800217e:	607b      	str	r3, [r7, #4]
 8002180:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002182:	2200      	movs	r2, #0
 8002184:	2100      	movs	r1, #0
 8002186:	203a      	movs	r0, #58	@ 0x3a
 8002188:	f001 fb17 	bl	80037ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800218c:	203a      	movs	r0, #58	@ 0x3a
 800218e:	f001 fb30 	bl	80037f2 <HAL_NVIC_EnableIRQ>

}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40023800 	.word	0x40023800

080021a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08a      	sub	sp, #40	@ 0x28
 80021a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a6:	f107 0314 	add.w	r3, r7, #20
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	605a      	str	r2, [r3, #4]
 80021b0:	609a      	str	r2, [r3, #8]
 80021b2:	60da      	str	r2, [r3, #12]
 80021b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();  // Enable clock for GPIOC
 80021b6:	2300      	movs	r3, #0
 80021b8:	613b      	str	r3, [r7, #16]
 80021ba:	4b47      	ldr	r3, [pc, #284]	@ (80022d8 <MX_GPIO_Init+0x138>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021be:	4a46      	ldr	r2, [pc, #280]	@ (80022d8 <MX_GPIO_Init+0x138>)
 80021c0:	f043 0304 	orr.w	r3, r3, #4
 80021c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021c6:	4b44      	ldr	r3, [pc, #272]	@ (80022d8 <MX_GPIO_Init+0x138>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ca:	f003 0304 	and.w	r3, r3, #4
 80021ce:	613b      	str	r3, [r7, #16]
 80021d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();  // Enable clock for GPIOH
 80021d2:	2300      	movs	r3, #0
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	4b40      	ldr	r3, [pc, #256]	@ (80022d8 <MX_GPIO_Init+0x138>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021da:	4a3f      	ldr	r2, [pc, #252]	@ (80022d8 <MX_GPIO_Init+0x138>)
 80021dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021e2:	4b3d      	ldr	r3, [pc, #244]	@ (80022d8 <MX_GPIO_Init+0x138>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();  // Enable clock for GPIOA
 80021ee:	2300      	movs	r3, #0
 80021f0:	60bb      	str	r3, [r7, #8]
 80021f2:	4b39      	ldr	r3, [pc, #228]	@ (80022d8 <MX_GPIO_Init+0x138>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f6:	4a38      	ldr	r2, [pc, #224]	@ (80022d8 <MX_GPIO_Init+0x138>)
 80021f8:	f043 0301 	orr.w	r3, r3, #1
 80021fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80021fe:	4b36      	ldr	r3, [pc, #216]	@ (80022d8 <MX_GPIO_Init+0x138>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	60bb      	str	r3, [r7, #8]
 8002208:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();  // Enable clock for GPIOB
 800220a:	2300      	movs	r3, #0
 800220c:	607b      	str	r3, [r7, #4]
 800220e:	4b32      	ldr	r3, [pc, #200]	@ (80022d8 <MX_GPIO_Init+0x138>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002212:	4a31      	ldr	r2, [pc, #196]	@ (80022d8 <MX_GPIO_Init+0x138>)
 8002214:	f043 0302 	orr.w	r3, r3, #2
 8002218:	6313      	str	r3, [r2, #48]	@ 0x30
 800221a:	4b2f      	ldr	r3, [pc, #188]	@ (80022d8 <MX_GPIO_Init+0x138>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	607b      	str	r3, [r7, #4]
 8002224:	687b      	ldr	r3, [r7, #4]

  /* Configure GPIO pins PC0 and PC1 as analog inputs for ADC */
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;  // PC0 and PC1
 8002226:	2303      	movs	r3, #3
 8002228:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;       // Analog mode
 800222a:	2303      	movs	r3, #3
 800222c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;            // No pull-up or pull-down
 800222e:	2300      	movs	r3, #0
 8002230:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);        // Initialize GPIOC with the above settings
 8002232:	f107 0314 	add.w	r3, r7, #20
 8002236:	4619      	mov	r1, r3
 8002238:	4828      	ldr	r0, [pc, #160]	@ (80022dc <MX_GPIO_Init+0x13c>)
 800223a:	f001 fedf 	bl	8003ffc <HAL_GPIO_Init>

  /* Configure GPIO pin Output Level for other pins */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_10
 800223e:	2200      	movs	r2, #0
 8002240:	f240 4117 	movw	r1, #1047	@ 0x417
 8002244:	4826      	ldr	r0, [pc, #152]	@ (80022e0 <MX_GPIO_Init+0x140>)
 8002246:	f002 f86d 	bl	8004324 <HAL_GPIO_WritePin>
                          | GPIO_PIN_4, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_12, GPIO_PIN_RESET);
 800224a:	2200      	movs	r2, #0
 800224c:	f44f 519c 	mov.w	r1, #4992	@ 0x1380
 8002250:	4822      	ldr	r0, [pc, #136]	@ (80022dc <MX_GPIO_Init+0x13c>)
 8002252:	f002 f867 	bl	8004324 <HAL_GPIO_WritePin>

  /* Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002256:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800225a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800225c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002260:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002262:	2300      	movs	r3, #0
 8002264:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002266:	f107 0314 	add.w	r3, r7, #20
 800226a:	4619      	mov	r1, r3
 800226c:	481b      	ldr	r0, [pc, #108]	@ (80022dc <MX_GPIO_Init+0x13c>)
 800226e:	f001 fec5 	bl	8003ffc <HAL_GPIO_Init>

  /* Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin | USART_RX_Pin;
 8002272:	230c      	movs	r3, #12
 8002274:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002276:	2302      	movs	r3, #2
 8002278:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227a:	2300      	movs	r3, #0
 800227c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800227e:	2303      	movs	r3, #3
 8002280:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002282:	2307      	movs	r3, #7
 8002284:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002286:	f107 0314 	add.w	r3, r7, #20
 800228a:	4619      	mov	r1, r3
 800228c:	4815      	ldr	r0, [pc, #84]	@ (80022e4 <MX_GPIO_Init+0x144>)
 800228e:	f001 feb5 	bl	8003ffc <HAL_GPIO_Init>

  /* Configure GPIO pins : PB0 PB1 PB2 PB10 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_10 | GPIO_PIN_4;
 8002292:	f240 4317 	movw	r3, #1047	@ 0x417
 8002296:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002298:	2301      	movs	r3, #1
 800229a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229c:	2300      	movs	r3, #0
 800229e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a0:	2300      	movs	r3, #0
 80022a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022a4:	f107 0314 	add.w	r3, r7, #20
 80022a8:	4619      	mov	r1, r3
 80022aa:	480d      	ldr	r0, [pc, #52]	@ (80022e0 <MX_GPIO_Init+0x140>)
 80022ac:	f001 fea6 	bl	8003ffc <HAL_GPIO_Init>

  /* Configure GPIO pins : PC7 PC8 PC9 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_12;
 80022b0:	f44f 539c 	mov.w	r3, #4992	@ 0x1380
 80022b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022b6:	2301      	movs	r3, #1
 80022b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022be:	2300      	movs	r3, #0
 80022c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022c2:	f107 0314 	add.w	r3, r7, #20
 80022c6:	4619      	mov	r1, r3
 80022c8:	4804      	ldr	r0, [pc, #16]	@ (80022dc <MX_GPIO_Init+0x13c>)
 80022ca:	f001 fe97 	bl	8003ffc <HAL_GPIO_Init>
}
 80022ce:	bf00      	nop
 80022d0:	3728      	adds	r7, #40	@ 0x28
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40023800 	.word	0x40023800
 80022dc:	40020800 	.word	0x40020800
 80022e0:	40020400 	.word	0x40020400
 80022e4:	40020000 	.word	0x40020000

080022e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022ec:	b672      	cpsid	i
}
 80022ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022f0:	bf00      	nop
 80022f2:	e7fd      	b.n	80022f0 <Error_Handler+0x8>

080022f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	607b      	str	r3, [r7, #4]
 80022fe:	4b10      	ldr	r3, [pc, #64]	@ (8002340 <HAL_MspInit+0x4c>)
 8002300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002302:	4a0f      	ldr	r2, [pc, #60]	@ (8002340 <HAL_MspInit+0x4c>)
 8002304:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002308:	6453      	str	r3, [r2, #68]	@ 0x44
 800230a:	4b0d      	ldr	r3, [pc, #52]	@ (8002340 <HAL_MspInit+0x4c>)
 800230c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800230e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002312:	607b      	str	r3, [r7, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	603b      	str	r3, [r7, #0]
 800231a:	4b09      	ldr	r3, [pc, #36]	@ (8002340 <HAL_MspInit+0x4c>)
 800231c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231e:	4a08      	ldr	r2, [pc, #32]	@ (8002340 <HAL_MspInit+0x4c>)
 8002320:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002324:	6413      	str	r3, [r2, #64]	@ 0x40
 8002326:	4b06      	ldr	r3, [pc, #24]	@ (8002340 <HAL_MspInit+0x4c>)
 8002328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800232e:	603b      	str	r3, [r7, #0]
 8002330:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002332:	2007      	movs	r0, #7
 8002334:	f001 fa36 	bl	80037a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002338:	bf00      	nop
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40023800 	.word	0x40023800

08002344 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b08e      	sub	sp, #56	@ 0x38
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800234c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	605a      	str	r2, [r3, #4]
 8002356:	609a      	str	r2, [r3, #8]
 8002358:	60da      	str	r2, [r3, #12]
 800235a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a5d      	ldr	r2, [pc, #372]	@ (80024d8 <HAL_ADC_MspInit+0x194>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d128      	bne.n	80023b8 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	623b      	str	r3, [r7, #32]
 800236a:	4b5c      	ldr	r3, [pc, #368]	@ (80024dc <HAL_ADC_MspInit+0x198>)
 800236c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800236e:	4a5b      	ldr	r2, [pc, #364]	@ (80024dc <HAL_ADC_MspInit+0x198>)
 8002370:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002374:	6453      	str	r3, [r2, #68]	@ 0x44
 8002376:	4b59      	ldr	r3, [pc, #356]	@ (80024dc <HAL_ADC_MspInit+0x198>)
 8002378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800237a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800237e:	623b      	str	r3, [r7, #32]
 8002380:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	61fb      	str	r3, [r7, #28]
 8002386:	4b55      	ldr	r3, [pc, #340]	@ (80024dc <HAL_ADC_MspInit+0x198>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238a:	4a54      	ldr	r2, [pc, #336]	@ (80024dc <HAL_ADC_MspInit+0x198>)
 800238c:	f043 0304 	orr.w	r3, r3, #4
 8002390:	6313      	str	r3, [r2, #48]	@ 0x30
 8002392:	4b52      	ldr	r3, [pc, #328]	@ (80024dc <HAL_ADC_MspInit+0x198>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002396:	f003 0304 	and.w	r3, r3, #4
 800239a:	61fb      	str	r3, [r7, #28]
 800239c:	69fb      	ldr	r3, [r7, #28]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800239e:	230f      	movs	r3, #15
 80023a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023a2:	2303      	movs	r3, #3
 80023a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023ae:	4619      	mov	r1, r3
 80023b0:	484b      	ldr	r0, [pc, #300]	@ (80024e0 <HAL_ADC_MspInit+0x19c>)
 80023b2:	f001 fe23 	bl	8003ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80023b6:	e08a      	b.n	80024ce <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC2)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a49      	ldr	r2, [pc, #292]	@ (80024e4 <HAL_ADC_MspInit+0x1a0>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d158      	bne.n	8002474 <HAL_ADC_MspInit+0x130>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	61bb      	str	r3, [r7, #24]
 80023c6:	4b45      	ldr	r3, [pc, #276]	@ (80024dc <HAL_ADC_MspInit+0x198>)
 80023c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ca:	4a44      	ldr	r2, [pc, #272]	@ (80024dc <HAL_ADC_MspInit+0x198>)
 80023cc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80023d2:	4b42      	ldr	r3, [pc, #264]	@ (80024dc <HAL_ADC_MspInit+0x198>)
 80023d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023da:	61bb      	str	r3, [r7, #24]
 80023dc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	617b      	str	r3, [r7, #20]
 80023e2:	4b3e      	ldr	r3, [pc, #248]	@ (80024dc <HAL_ADC_MspInit+0x198>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e6:	4a3d      	ldr	r2, [pc, #244]	@ (80024dc <HAL_ADC_MspInit+0x198>)
 80023e8:	f043 0301 	orr.w	r3, r3, #1
 80023ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ee:	4b3b      	ldr	r3, [pc, #236]	@ (80024dc <HAL_ADC_MspInit+0x198>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	617b      	str	r3, [r7, #20]
 80023f8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80023fa:	2301      	movs	r3, #1
 80023fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023fe:	2303      	movs	r3, #3
 8002400:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002402:	2300      	movs	r3, #0
 8002404:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002406:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800240a:	4619      	mov	r1, r3
 800240c:	4836      	ldr	r0, [pc, #216]	@ (80024e8 <HAL_ADC_MspInit+0x1a4>)
 800240e:	f001 fdf5 	bl	8003ffc <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8002412:	4b36      	ldr	r3, [pc, #216]	@ (80024ec <HAL_ADC_MspInit+0x1a8>)
 8002414:	4a36      	ldr	r2, [pc, #216]	@ (80024f0 <HAL_ADC_MspInit+0x1ac>)
 8002416:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8002418:	4b34      	ldr	r3, [pc, #208]	@ (80024ec <HAL_ADC_MspInit+0x1a8>)
 800241a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800241e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002420:	4b32      	ldr	r3, [pc, #200]	@ (80024ec <HAL_ADC_MspInit+0x1a8>)
 8002422:	2200      	movs	r2, #0
 8002424:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002426:	4b31      	ldr	r3, [pc, #196]	@ (80024ec <HAL_ADC_MspInit+0x1a8>)
 8002428:	2200      	movs	r2, #0
 800242a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800242c:	4b2f      	ldr	r3, [pc, #188]	@ (80024ec <HAL_ADC_MspInit+0x1a8>)
 800242e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002432:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002434:	4b2d      	ldr	r3, [pc, #180]	@ (80024ec <HAL_ADC_MspInit+0x1a8>)
 8002436:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800243a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800243c:	4b2b      	ldr	r3, [pc, #172]	@ (80024ec <HAL_ADC_MspInit+0x1a8>)
 800243e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002442:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8002444:	4b29      	ldr	r3, [pc, #164]	@ (80024ec <HAL_ADC_MspInit+0x1a8>)
 8002446:	2200      	movs	r2, #0
 8002448:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800244a:	4b28      	ldr	r3, [pc, #160]	@ (80024ec <HAL_ADC_MspInit+0x1a8>)
 800244c:	2200      	movs	r2, #0
 800244e:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002450:	4b26      	ldr	r3, [pc, #152]	@ (80024ec <HAL_ADC_MspInit+0x1a8>)
 8002452:	2200      	movs	r2, #0
 8002454:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002456:	4825      	ldr	r0, [pc, #148]	@ (80024ec <HAL_ADC_MspInit+0x1a8>)
 8002458:	f001 fa60 	bl	800391c <HAL_DMA_Init>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <HAL_ADC_MspInit+0x122>
      Error_Handler();
 8002462:	f7ff ff41 	bl	80022e8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a20      	ldr	r2, [pc, #128]	@ (80024ec <HAL_ADC_MspInit+0x1a8>)
 800246a:	639a      	str	r2, [r3, #56]	@ 0x38
 800246c:	4a1f      	ldr	r2, [pc, #124]	@ (80024ec <HAL_ADC_MspInit+0x1a8>)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002472:	e02c      	b.n	80024ce <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a1e      	ldr	r2, [pc, #120]	@ (80024f4 <HAL_ADC_MspInit+0x1b0>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d127      	bne.n	80024ce <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	613b      	str	r3, [r7, #16]
 8002482:	4b16      	ldr	r3, [pc, #88]	@ (80024dc <HAL_ADC_MspInit+0x198>)
 8002484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002486:	4a15      	ldr	r2, [pc, #84]	@ (80024dc <HAL_ADC_MspInit+0x198>)
 8002488:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800248c:	6453      	str	r3, [r2, #68]	@ 0x44
 800248e:	4b13      	ldr	r3, [pc, #76]	@ (80024dc <HAL_ADC_MspInit+0x198>)
 8002490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002492:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002496:	613b      	str	r3, [r7, #16]
 8002498:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	4b0f      	ldr	r3, [pc, #60]	@ (80024dc <HAL_ADC_MspInit+0x198>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a2:	4a0e      	ldr	r2, [pc, #56]	@ (80024dc <HAL_ADC_MspInit+0x198>)
 80024a4:	f043 0301 	orr.w	r3, r3, #1
 80024a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80024aa:	4b0c      	ldr	r3, [pc, #48]	@ (80024dc <HAL_ADC_MspInit+0x198>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80024b6:	2302      	movs	r3, #2
 80024b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024ba:	2303      	movs	r3, #3
 80024bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024be:	2300      	movs	r3, #0
 80024c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024c6:	4619      	mov	r1, r3
 80024c8:	4807      	ldr	r0, [pc, #28]	@ (80024e8 <HAL_ADC_MspInit+0x1a4>)
 80024ca:	f001 fd97 	bl	8003ffc <HAL_GPIO_Init>
}
 80024ce:	bf00      	nop
 80024d0:	3738      	adds	r7, #56	@ 0x38
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40012000 	.word	0x40012000
 80024dc:	40023800 	.word	0x40023800
 80024e0:	40020800 	.word	0x40020800
 80024e4:	40012100 	.word	0x40012100
 80024e8:	40020000 	.word	0x40020000
 80024ec:	20000358 	.word	0x20000358
 80024f0:	40026440 	.word	0x40026440
 80024f4:	40012200 	.word	0x40012200

080024f8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08a      	sub	sp, #40	@ 0x28
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002500:	f107 0314 	add.w	r3, r7, #20
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	605a      	str	r2, [r3, #4]
 800250a:	609a      	str	r2, [r3, #8]
 800250c:	60da      	str	r2, [r3, #12]
 800250e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a17      	ldr	r2, [pc, #92]	@ (8002574 <HAL_DAC_MspInit+0x7c>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d127      	bne.n	800256a <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800251a:	2300      	movs	r3, #0
 800251c:	613b      	str	r3, [r7, #16]
 800251e:	4b16      	ldr	r3, [pc, #88]	@ (8002578 <HAL_DAC_MspInit+0x80>)
 8002520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002522:	4a15      	ldr	r2, [pc, #84]	@ (8002578 <HAL_DAC_MspInit+0x80>)
 8002524:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002528:	6413      	str	r3, [r2, #64]	@ 0x40
 800252a:	4b13      	ldr	r3, [pc, #76]	@ (8002578 <HAL_DAC_MspInit+0x80>)
 800252c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002532:	613b      	str	r3, [r7, #16]
 8002534:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	60fb      	str	r3, [r7, #12]
 800253a:	4b0f      	ldr	r3, [pc, #60]	@ (8002578 <HAL_DAC_MspInit+0x80>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253e:	4a0e      	ldr	r2, [pc, #56]	@ (8002578 <HAL_DAC_MspInit+0x80>)
 8002540:	f043 0301 	orr.w	r3, r3, #1
 8002544:	6313      	str	r3, [r2, #48]	@ 0x30
 8002546:	4b0c      	ldr	r3, [pc, #48]	@ (8002578 <HAL_DAC_MspInit+0x80>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002552:	2330      	movs	r3, #48	@ 0x30
 8002554:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002556:	2303      	movs	r3, #3
 8002558:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255a:	2300      	movs	r3, #0
 800255c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800255e:	f107 0314 	add.w	r3, r7, #20
 8002562:	4619      	mov	r1, r3
 8002564:	4805      	ldr	r0, [pc, #20]	@ (800257c <HAL_DAC_MspInit+0x84>)
 8002566:	f001 fd49 	bl	8003ffc <HAL_GPIO_Init>

  /* USER CODE END DAC_MspInit 1 */

  }

}
 800256a:	bf00      	nop
 800256c:	3728      	adds	r7, #40	@ 0x28
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40007400 	.word	0x40007400
 8002578:	40023800 	.word	0x40023800
 800257c:	40020000 	.word	0x40020000

08002580 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b08a      	sub	sp, #40	@ 0x28
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002588:	f107 0314 	add.w	r3, r7, #20
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	605a      	str	r2, [r3, #4]
 8002592:	609a      	str	r2, [r3, #8]
 8002594:	60da      	str	r2, [r3, #12]
 8002596:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a19      	ldr	r2, [pc, #100]	@ (8002604 <HAL_SPI_MspInit+0x84>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d12c      	bne.n	80025fc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	613b      	str	r3, [r7, #16]
 80025a6:	4b18      	ldr	r3, [pc, #96]	@ (8002608 <HAL_SPI_MspInit+0x88>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025aa:	4a17      	ldr	r2, [pc, #92]	@ (8002608 <HAL_SPI_MspInit+0x88>)
 80025ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80025b2:	4b15      	ldr	r3, [pc, #84]	@ (8002608 <HAL_SPI_MspInit+0x88>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025ba:	613b      	str	r3, [r7, #16]
 80025bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025be:	2300      	movs	r3, #0
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	4b11      	ldr	r3, [pc, #68]	@ (8002608 <HAL_SPI_MspInit+0x88>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c6:	4a10      	ldr	r2, [pc, #64]	@ (8002608 <HAL_SPI_MspInit+0x88>)
 80025c8:	f043 0302 	orr.w	r3, r3, #2
 80025cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002608 <HAL_SPI_MspInit+0x88>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80025da:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80025de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e0:	2302      	movs	r3, #2
 80025e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e4:	2300      	movs	r3, #0
 80025e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e8:	2303      	movs	r3, #3
 80025ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80025ec:	2305      	movs	r3, #5
 80025ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025f0:	f107 0314 	add.w	r3, r7, #20
 80025f4:	4619      	mov	r1, r3
 80025f6:	4805      	ldr	r0, [pc, #20]	@ (800260c <HAL_SPI_MspInit+0x8c>)
 80025f8:	f001 fd00 	bl	8003ffc <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80025fc:	bf00      	nop
 80025fe:	3728      	adds	r7, #40	@ 0x28
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40003800 	.word	0x40003800
 8002608:	40023800 	.word	0x40023800
 800260c:	40020400 	.word	0x40020400

08002610 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b08a      	sub	sp, #40	@ 0x28
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002618:	f107 0314 	add.w	r3, r7, #20
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	605a      	str	r2, [r3, #4]
 8002622:	609a      	str	r2, [r3, #8]
 8002624:	60da      	str	r2, [r3, #12]
 8002626:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a19      	ldr	r2, [pc, #100]	@ (8002694 <HAL_TIM_IC_MspInit+0x84>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d12b      	bne.n	800268a <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	613b      	str	r3, [r7, #16]
 8002636:	4b18      	ldr	r3, [pc, #96]	@ (8002698 <HAL_TIM_IC_MspInit+0x88>)
 8002638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263a:	4a17      	ldr	r2, [pc, #92]	@ (8002698 <HAL_TIM_IC_MspInit+0x88>)
 800263c:	f043 0302 	orr.w	r3, r3, #2
 8002640:	6413      	str	r3, [r2, #64]	@ 0x40
 8002642:	4b15      	ldr	r3, [pc, #84]	@ (8002698 <HAL_TIM_IC_MspInit+0x88>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	613b      	str	r3, [r7, #16]
 800264c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	60fb      	str	r3, [r7, #12]
 8002652:	4b11      	ldr	r3, [pc, #68]	@ (8002698 <HAL_TIM_IC_MspInit+0x88>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002656:	4a10      	ldr	r2, [pc, #64]	@ (8002698 <HAL_TIM_IC_MspInit+0x88>)
 8002658:	f043 0301 	orr.w	r3, r3, #1
 800265c:	6313      	str	r3, [r2, #48]	@ 0x30
 800265e:	4b0e      	ldr	r3, [pc, #56]	@ (8002698 <HAL_TIM_IC_MspInit+0x88>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800266a:	23c0      	movs	r3, #192	@ 0xc0
 800266c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266e:	2302      	movs	r3, #2
 8002670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002672:	2300      	movs	r3, #0
 8002674:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002676:	2300      	movs	r3, #0
 8002678:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800267a:	2302      	movs	r3, #2
 800267c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800267e:	f107 0314 	add.w	r3, r7, #20
 8002682:	4619      	mov	r1, r3
 8002684:	4805      	ldr	r0, [pc, #20]	@ (800269c <HAL_TIM_IC_MspInit+0x8c>)
 8002686:	f001 fcb9 	bl	8003ffc <HAL_GPIO_Init>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800268a:	bf00      	nop
 800268c:	3728      	adds	r7, #40	@ 0x28
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40000400 	.word	0x40000400
 8002698:	40023800 	.word	0x40023800
 800269c:	40020000 	.word	0x40020000

080026a0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a0b      	ldr	r2, [pc, #44]	@ (80026dc <HAL_TIM_PWM_MspInit+0x3c>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d10d      	bne.n	80026ce <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80026b2:	2300      	movs	r3, #0
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	4b0a      	ldr	r3, [pc, #40]	@ (80026e0 <HAL_TIM_PWM_MspInit+0x40>)
 80026b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ba:	4a09      	ldr	r2, [pc, #36]	@ (80026e0 <HAL_TIM_PWM_MspInit+0x40>)
 80026bc:	f043 0304 	orr.w	r3, r3, #4
 80026c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80026c2:	4b07      	ldr	r3, [pc, #28]	@ (80026e0 <HAL_TIM_PWM_MspInit+0x40>)
 80026c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c6:	f003 0304 	and.w	r3, r3, #4
 80026ca:	60fb      	str	r3, [r7, #12]
 80026cc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 80026ce:	bf00      	nop
 80026d0:	3714      	adds	r7, #20
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	40000800 	.word	0x40000800
 80026e0:	40023800 	.word	0x40023800

080026e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b088      	sub	sp, #32
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ec:	f107 030c 	add.w	r3, r7, #12
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	609a      	str	r2, [r3, #8]
 80026f8:	60da      	str	r2, [r3, #12]
 80026fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a12      	ldr	r2, [pc, #72]	@ (800274c <HAL_TIM_MspPostInit+0x68>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d11e      	bne.n	8002744 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	60bb      	str	r3, [r7, #8]
 800270a:	4b11      	ldr	r3, [pc, #68]	@ (8002750 <HAL_TIM_MspPostInit+0x6c>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270e:	4a10      	ldr	r2, [pc, #64]	@ (8002750 <HAL_TIM_MspPostInit+0x6c>)
 8002710:	f043 0302 	orr.w	r3, r3, #2
 8002714:	6313      	str	r3, [r2, #48]	@ 0x30
 8002716:	4b0e      	ldr	r3, [pc, #56]	@ (8002750 <HAL_TIM_MspPostInit+0x6c>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	60bb      	str	r3, [r7, #8]
 8002720:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002722:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002726:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002728:	2302      	movs	r3, #2
 800272a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272c:	2300      	movs	r3, #0
 800272e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002730:	2300      	movs	r3, #0
 8002732:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002734:	2302      	movs	r3, #2
 8002736:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002738:	f107 030c 	add.w	r3, r7, #12
 800273c:	4619      	mov	r1, r3
 800273e:	4805      	ldr	r0, [pc, #20]	@ (8002754 <HAL_TIM_MspPostInit+0x70>)
 8002740:	f001 fc5c 	bl	8003ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002744:	bf00      	nop
 8002746:	3720      	adds	r7, #32
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40000800 	.word	0x40000800
 8002750:	40023800 	.word	0x40023800
 8002754:	40020400 	.word	0x40020400

08002758 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800275c:	bf00      	nop
 800275e:	e7fd      	b.n	800275c <NMI_Handler+0x4>

08002760 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002764:	bf00      	nop
 8002766:	e7fd      	b.n	8002764 <HardFault_Handler+0x4>

08002768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800276c:	bf00      	nop
 800276e:	e7fd      	b.n	800276c <MemManage_Handler+0x4>

08002770 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002774:	bf00      	nop
 8002776:	e7fd      	b.n	8002774 <BusFault_Handler+0x4>

08002778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800277c:	bf00      	nop
 800277e:	e7fd      	b.n	800277c <UsageFault_Handler+0x4>

08002780 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002784:	bf00      	nop
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800278e:	b480      	push	{r7}
 8002790:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002792:	bf00      	nop
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027a0:	bf00      	nop
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr

080027aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027ae:	f000 f961 	bl	8002a74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027b2:	bf00      	nop
 80027b4:	bd80      	pop	{r7, pc}
	...

080027b8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80027bc:	4802      	ldr	r0, [pc, #8]	@ (80027c8 <DMA2_Stream2_IRQHandler+0x10>)
 80027be:	f001 f9b3 	bl	8003b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	20000358 	.word	0x20000358

080027cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  return 1;
 80027d0:	2301      	movs	r3, #1
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <_kill>:

int _kill(int pid, int sig)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80027e6:	f004 fc7f 	bl	80070e8 <__errno>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2216      	movs	r2, #22
 80027ee:	601a      	str	r2, [r3, #0]
  return -1;
 80027f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <_exit>:

void _exit (int status)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002804:	f04f 31ff 	mov.w	r1, #4294967295
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f7ff ffe7 	bl	80027dc <_kill>
  while (1) {}    /* Make sure we hang here */
 800280e:	bf00      	nop
 8002810:	e7fd      	b.n	800280e <_exit+0x12>

08002812 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b086      	sub	sp, #24
 8002816:	af00      	add	r7, sp, #0
 8002818:	60f8      	str	r0, [r7, #12]
 800281a:	60b9      	str	r1, [r7, #8]
 800281c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800281e:	2300      	movs	r3, #0
 8002820:	617b      	str	r3, [r7, #20]
 8002822:	e00a      	b.n	800283a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002824:	f3af 8000 	nop.w
 8002828:	4601      	mov	r1, r0
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	1c5a      	adds	r2, r3, #1
 800282e:	60ba      	str	r2, [r7, #8]
 8002830:	b2ca      	uxtb	r2, r1
 8002832:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	3301      	adds	r3, #1
 8002838:	617b      	str	r3, [r7, #20]
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	429a      	cmp	r2, r3
 8002840:	dbf0      	blt.n	8002824 <_read+0x12>
  }

  return len;
 8002842:	687b      	ldr	r3, [r7, #4]
}
 8002844:	4618      	mov	r0, r3
 8002846:	3718      	adds	r7, #24
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002858:	2300      	movs	r3, #0
 800285a:	617b      	str	r3, [r7, #20]
 800285c:	e009      	b.n	8002872 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	1c5a      	adds	r2, r3, #1
 8002862:	60ba      	str	r2, [r7, #8]
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	3301      	adds	r3, #1
 8002870:	617b      	str	r3, [r7, #20]
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	429a      	cmp	r2, r3
 8002878:	dbf1      	blt.n	800285e <_write+0x12>
  }
  return len;
 800287a:	687b      	ldr	r3, [r7, #4]
}
 800287c:	4618      	mov	r0, r3
 800287e:	3718      	adds	r7, #24
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <_close>:

int _close(int file)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800288c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002890:	4618      	mov	r0, r3
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028ac:	605a      	str	r2, [r3, #4]
  return 0;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <_isatty>:

int _isatty(int file)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80028c4:	2301      	movs	r3, #1
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b085      	sub	sp, #20
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	60f8      	str	r0, [r7, #12]
 80028da:	60b9      	str	r1, [r7, #8]
 80028dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3714      	adds	r7, #20
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028f4:	4a14      	ldr	r2, [pc, #80]	@ (8002948 <_sbrk+0x5c>)
 80028f6:	4b15      	ldr	r3, [pc, #84]	@ (800294c <_sbrk+0x60>)
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002900:	4b13      	ldr	r3, [pc, #76]	@ (8002950 <_sbrk+0x64>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d102      	bne.n	800290e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002908:	4b11      	ldr	r3, [pc, #68]	@ (8002950 <_sbrk+0x64>)
 800290a:	4a12      	ldr	r2, [pc, #72]	@ (8002954 <_sbrk+0x68>)
 800290c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800290e:	4b10      	ldr	r3, [pc, #64]	@ (8002950 <_sbrk+0x64>)
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4413      	add	r3, r2
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	429a      	cmp	r2, r3
 800291a:	d207      	bcs.n	800292c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800291c:	f004 fbe4 	bl	80070e8 <__errno>
 8002920:	4603      	mov	r3, r0
 8002922:	220c      	movs	r2, #12
 8002924:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002926:	f04f 33ff 	mov.w	r3, #4294967295
 800292a:	e009      	b.n	8002940 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800292c:	4b08      	ldr	r3, [pc, #32]	@ (8002950 <_sbrk+0x64>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002932:	4b07      	ldr	r3, [pc, #28]	@ (8002950 <_sbrk+0x64>)
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4413      	add	r3, r2
 800293a:	4a05      	ldr	r2, [pc, #20]	@ (8002950 <_sbrk+0x64>)
 800293c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800293e:	68fb      	ldr	r3, [r7, #12]
}
 8002940:	4618      	mov	r0, r3
 8002942:	3718      	adds	r7, #24
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	20020000 	.word	0x20020000
 800294c:	00000400 	.word	0x00000400
 8002950:	20011a18 	.word	0x20011a18
 8002954:	20011b70 	.word	0x20011b70

08002958 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800295c:	4b06      	ldr	r3, [pc, #24]	@ (8002978 <SystemInit+0x20>)
 800295e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002962:	4a05      	ldr	r2, [pc, #20]	@ (8002978 <SystemInit+0x20>)
 8002964:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002968:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800296c:	bf00      	nop
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	e000ed00 	.word	0xe000ed00

0800297c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800297c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80029b4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002980:	f7ff ffea 	bl	8002958 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002984:	480c      	ldr	r0, [pc, #48]	@ (80029b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002986:	490d      	ldr	r1, [pc, #52]	@ (80029bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002988:	4a0d      	ldr	r2, [pc, #52]	@ (80029c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800298a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800298c:	e002      	b.n	8002994 <LoopCopyDataInit>

0800298e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800298e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002992:	3304      	adds	r3, #4

08002994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002998:	d3f9      	bcc.n	800298e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800299a:	4a0a      	ldr	r2, [pc, #40]	@ (80029c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800299c:	4c0a      	ldr	r4, [pc, #40]	@ (80029c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800299e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029a0:	e001      	b.n	80029a6 <LoopFillZerobss>

080029a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029a4:	3204      	adds	r2, #4

080029a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029a8:	d3fb      	bcc.n	80029a2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80029aa:	f004 fba3 	bl	80070f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029ae:	f7fe fff7 	bl	80019a0 <main>
  bx  lr    
 80029b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80029b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029bc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80029c0:	0800b468 	.word	0x0800b468
  ldr r2, =_sbss
 80029c4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80029c8:	20011b6c 	.word	0x20011b6c

080029cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029cc:	e7fe      	b.n	80029cc <ADC_IRQHandler>
	...

080029d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002a10 <HAL_Init+0x40>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002a10 <HAL_Init+0x40>)
 80029da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002a10 <HAL_Init+0x40>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002a10 <HAL_Init+0x40>)
 80029e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029ec:	4b08      	ldr	r3, [pc, #32]	@ (8002a10 <HAL_Init+0x40>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a07      	ldr	r2, [pc, #28]	@ (8002a10 <HAL_Init+0x40>)
 80029f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029f8:	2003      	movs	r0, #3
 80029fa:	f000 fed3 	bl	80037a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029fe:	2000      	movs	r0, #0
 8002a00:	f000 f808 	bl	8002a14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a04:	f7ff fc76 	bl	80022f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40023c00 	.word	0x40023c00

08002a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a1c:	4b12      	ldr	r3, [pc, #72]	@ (8002a68 <HAL_InitTick+0x54>)
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	4b12      	ldr	r3, [pc, #72]	@ (8002a6c <HAL_InitTick+0x58>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	4619      	mov	r1, r3
 8002a26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a32:	4618      	mov	r0, r3
 8002a34:	f000 feeb 	bl	800380e <HAL_SYSTICK_Config>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e00e      	b.n	8002a60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b0f      	cmp	r3, #15
 8002a46:	d80a      	bhi.n	8002a5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a48:	2200      	movs	r2, #0
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a50:	f000 feb3 	bl	80037ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a54:	4a06      	ldr	r2, [pc, #24]	@ (8002a70 <HAL_InitTick+0x5c>)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	e000      	b.n	8002a60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	20000000 	.word	0x20000000
 8002a6c:	20000008 	.word	0x20000008
 8002a70:	20000004 	.word	0x20000004

08002a74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a78:	4b06      	ldr	r3, [pc, #24]	@ (8002a94 <HAL_IncTick+0x20>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	4b06      	ldr	r3, [pc, #24]	@ (8002a98 <HAL_IncTick+0x24>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4413      	add	r3, r2
 8002a84:	4a04      	ldr	r2, [pc, #16]	@ (8002a98 <HAL_IncTick+0x24>)
 8002a86:	6013      	str	r3, [r2, #0]
}
 8002a88:	bf00      	nop
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	20000008 	.word	0x20000008
 8002a98:	20011a1c 	.word	0x20011a1c

08002a9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8002aa0:	4b03      	ldr	r3, [pc, #12]	@ (8002ab0 <HAL_GetTick+0x14>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	20011a1c 	.word	0x20011a1c

08002ab4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002abc:	f7ff ffee 	bl	8002a9c <HAL_GetTick>
 8002ac0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002acc:	d005      	beq.n	8002ada <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ace:	4b0a      	ldr	r3, [pc, #40]	@ (8002af8 <HAL_Delay+0x44>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ada:	bf00      	nop
 8002adc:	f7ff ffde 	bl	8002a9c <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d8f7      	bhi.n	8002adc <HAL_Delay+0x28>
  {
  }
}
 8002aec:	bf00      	nop
 8002aee:	bf00      	nop
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20000008 	.word	0x20000008

08002afc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b04:	2300      	movs	r3, #0
 8002b06:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e033      	b.n	8002b7a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d109      	bne.n	8002b2e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7ff fc12 	bl	8002344 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b32:	f003 0310 	and.w	r3, r3, #16
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d118      	bne.n	8002b6c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002b42:	f023 0302 	bic.w	r3, r3, #2
 8002b46:	f043 0202 	orr.w	r2, r3, #2
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 fbda 	bl	8003308 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5e:	f023 0303 	bic.w	r3, r3, #3
 8002b62:	f043 0201 	orr.w	r2, r3, #1
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	641a      	str	r2, [r3, #64]	@ 0x40
 8002b6a:	e001      	b.n	8002b70 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
	...

08002b84 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d101      	bne.n	8002b9e <HAL_ADC_Start+0x1a>
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	e0b2      	b.n	8002d04 <HAL_ADC_Start+0x180>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d018      	beq.n	8002be6 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f042 0201 	orr.w	r2, r2, #1
 8002bc2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002bc4:	4b52      	ldr	r3, [pc, #328]	@ (8002d10 <HAL_ADC_Start+0x18c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a52      	ldr	r2, [pc, #328]	@ (8002d14 <HAL_ADC_Start+0x190>)
 8002bca:	fba2 2303 	umull	r2, r3, r2, r3
 8002bce:	0c9a      	lsrs	r2, r3, #18
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	4413      	add	r3, r2
 8002bd6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002bd8:	e002      	b.n	8002be0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1f9      	bne.n	8002bda <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d17a      	bne.n	8002cea <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002bfc:	f023 0301 	bic.w	r3, r3, #1
 8002c00:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d007      	beq.n	8002c26 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002c1e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c32:	d106      	bne.n	8002c42 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c38:	f023 0206 	bic.w	r2, r3, #6
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	645a      	str	r2, [r3, #68]	@ 0x44
 8002c40:	e002      	b.n	8002c48 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c50:	4b31      	ldr	r3, [pc, #196]	@ (8002d18 <HAL_ADC_Start+0x194>)
 8002c52:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002c5c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f003 031f 	and.w	r3, r3, #31
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d12a      	bne.n	8002cc0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a2b      	ldr	r2, [pc, #172]	@ (8002d1c <HAL_ADC_Start+0x198>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d015      	beq.n	8002ca0 <HAL_ADC_Start+0x11c>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a29      	ldr	r2, [pc, #164]	@ (8002d20 <HAL_ADC_Start+0x19c>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d105      	bne.n	8002c8a <HAL_ADC_Start+0x106>
 8002c7e:	4b26      	ldr	r3, [pc, #152]	@ (8002d18 <HAL_ADC_Start+0x194>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f003 031f 	and.w	r3, r3, #31
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00a      	beq.n	8002ca0 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a25      	ldr	r2, [pc, #148]	@ (8002d24 <HAL_ADC_Start+0x1a0>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d136      	bne.n	8002d02 <HAL_ADC_Start+0x17e>
 8002c94:	4b20      	ldr	r3, [pc, #128]	@ (8002d18 <HAL_ADC_Start+0x194>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f003 0310 	and.w	r3, r3, #16
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d130      	bne.n	8002d02 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d129      	bne.n	8002d02 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689a      	ldr	r2, [r3, #8]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002cbc:	609a      	str	r2, [r3, #8]
 8002cbe:	e020      	b.n	8002d02 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a15      	ldr	r2, [pc, #84]	@ (8002d1c <HAL_ADC_Start+0x198>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d11b      	bne.n	8002d02 <HAL_ADC_Start+0x17e>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d114      	bne.n	8002d02 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689a      	ldr	r2, [r3, #8]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002ce6:	609a      	str	r2, [r3, #8]
 8002ce8:	e00b      	b.n	8002d02 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cee:	f043 0210 	orr.w	r2, r3, #16
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cfa:	f043 0201 	orr.w	r2, r3, #1
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr
 8002d10:	20000000 	.word	0x20000000
 8002d14:	431bde83 	.word	0x431bde83
 8002d18:	40012300 	.word	0x40012300
 8002d1c:	40012000 	.word	0x40012000
 8002d20:	40012100 	.word	0x40012100
 8002d24:	40012200 	.word	0x40012200

08002d28 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d44:	d113      	bne.n	8002d6e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002d50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d54:	d10b      	bne.n	8002d6e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5a:	f043 0220 	orr.w	r2, r3, #32
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e063      	b.n	8002e36 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d6e:	f7ff fe95 	bl	8002a9c <HAL_GetTick>
 8002d72:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002d74:	e021      	b.n	8002dba <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7c:	d01d      	beq.n	8002dba <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d007      	beq.n	8002d94 <HAL_ADC_PollForConversion+0x6c>
 8002d84:	f7ff fe8a 	bl	8002a9c <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d212      	bcs.n	8002dba <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d00b      	beq.n	8002dba <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da6:	f043 0204 	orr.w	r2, r3, #4
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e03d      	b.n	8002e36 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d1d6      	bne.n	8002d76 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f06f 0212 	mvn.w	r2, #18
 8002dd0:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d123      	bne.n	8002e34 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d11f      	bne.n	8002e34 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dfa:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d006      	beq.n	8002e10 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d111      	bne.n	8002e34 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e14:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d105      	bne.n	8002e34 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2c:	f043 0201 	orr.w	r2, r3, #1
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
	...

08002e40 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d101      	bne.n	8002e5e <HAL_ADC_Start_DMA+0x1e>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	e0e9      	b.n	8003032 <HAL_ADC_Start_DMA+0x1f2>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d018      	beq.n	8002ea6 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689a      	ldr	r2, [r3, #8]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f042 0201 	orr.w	r2, r2, #1
 8002e82:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e84:	4b6d      	ldr	r3, [pc, #436]	@ (800303c <HAL_ADC_Start_DMA+0x1fc>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a6d      	ldr	r2, [pc, #436]	@ (8003040 <HAL_ADC_Start_DMA+0x200>)
 8002e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8e:	0c9a      	lsrs	r2, r3, #18
 8002e90:	4613      	mov	r3, r2
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	4413      	add	r3, r2
 8002e96:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002e98:	e002      	b.n	8002ea0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1f9      	bne.n	8002e9a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002eb4:	d107      	bne.n	8002ec6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ec4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	f040 80a1 	bne.w	8003018 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eda:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002ede:	f023 0301 	bic.w	r3, r3, #1
 8002ee2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d007      	beq.n	8002f08 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002f00:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f14:	d106      	bne.n	8002f24 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f1a:	f023 0206 	bic.w	r2, r3, #6
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	645a      	str	r2, [r3, #68]	@ 0x44
 8002f22:	e002      	b.n	8002f2a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f32:	4b44      	ldr	r3, [pc, #272]	@ (8003044 <HAL_ADC_Start_DMA+0x204>)
 8002f34:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f3a:	4a43      	ldr	r2, [pc, #268]	@ (8003048 <HAL_ADC_Start_DMA+0x208>)
 8002f3c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f42:	4a42      	ldr	r2, [pc, #264]	@ (800304c <HAL_ADC_Start_DMA+0x20c>)
 8002f44:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f4a:	4a41      	ldr	r2, [pc, #260]	@ (8003050 <HAL_ADC_Start_DMA+0x210>)
 8002f4c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002f56:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002f66:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689a      	ldr	r2, [r3, #8]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f76:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	334c      	adds	r3, #76	@ 0x4c
 8002f82:	4619      	mov	r1, r3
 8002f84:	68ba      	ldr	r2, [r7, #8]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f000 fd76 	bl	8003a78 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f003 031f 	and.w	r3, r3, #31
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d12a      	bne.n	8002fee <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a2d      	ldr	r2, [pc, #180]	@ (8003054 <HAL_ADC_Start_DMA+0x214>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d015      	beq.n	8002fce <HAL_ADC_Start_DMA+0x18e>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a2c      	ldr	r2, [pc, #176]	@ (8003058 <HAL_ADC_Start_DMA+0x218>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d105      	bne.n	8002fb8 <HAL_ADC_Start_DMA+0x178>
 8002fac:	4b25      	ldr	r3, [pc, #148]	@ (8003044 <HAL_ADC_Start_DMA+0x204>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f003 031f 	and.w	r3, r3, #31
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00a      	beq.n	8002fce <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a27      	ldr	r2, [pc, #156]	@ (800305c <HAL_ADC_Start_DMA+0x21c>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d136      	bne.n	8003030 <HAL_ADC_Start_DMA+0x1f0>
 8002fc2:	4b20      	ldr	r3, [pc, #128]	@ (8003044 <HAL_ADC_Start_DMA+0x204>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f003 0310 	and.w	r3, r3, #16
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d130      	bne.n	8003030 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d129      	bne.n	8003030 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002fea:	609a      	str	r2, [r3, #8]
 8002fec:	e020      	b.n	8003030 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a18      	ldr	r2, [pc, #96]	@ (8003054 <HAL_ADC_Start_DMA+0x214>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d11b      	bne.n	8003030 <HAL_ADC_Start_DMA+0x1f0>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d114      	bne.n	8003030 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	689a      	ldr	r2, [r3, #8]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003014:	609a      	str	r2, [r3, #8]
 8003016:	e00b      	b.n	8003030 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301c:	f043 0210 	orr.w	r2, r3, #16
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003028:	f043 0201 	orr.w	r2, r3, #1
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3718      	adds	r7, #24
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	20000000 	.word	0x20000000
 8003040:	431bde83 	.word	0x431bde83
 8003044:	40012300 	.word	0x40012300
 8003048:	08003501 	.word	0x08003501
 800304c:	080035bb 	.word	0x080035bb
 8003050:	080035d7 	.word	0x080035d7
 8003054:	40012000 	.word	0x40012000
 8003058:	40012100 	.word	0x40012100
 800305c:	40012200 	.word	0x40012200

08003060 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800306e:	4618      	mov	r0, r3
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800307a:	b480      	push	{r7}
 800307c:	b083      	sub	sp, #12
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800308e:	b480      	push	{r7}
 8003090:	b083      	sub	sp, #12
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
	...

080030a4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80030ae:	2300      	movs	r3, #0
 80030b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d101      	bne.n	80030c0 <HAL_ADC_ConfigChannel+0x1c>
 80030bc:	2302      	movs	r3, #2
 80030be:	e113      	b.n	80032e8 <HAL_ADC_ConfigChannel+0x244>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2b09      	cmp	r3, #9
 80030ce:	d925      	bls.n	800311c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68d9      	ldr	r1, [r3, #12]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	b29b      	uxth	r3, r3
 80030dc:	461a      	mov	r2, r3
 80030de:	4613      	mov	r3, r2
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	4413      	add	r3, r2
 80030e4:	3b1e      	subs	r3, #30
 80030e6:	2207      	movs	r2, #7
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	43da      	mvns	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	400a      	ands	r2, r1
 80030f4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68d9      	ldr	r1, [r3, #12]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	b29b      	uxth	r3, r3
 8003106:	4618      	mov	r0, r3
 8003108:	4603      	mov	r3, r0
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	4403      	add	r3, r0
 800310e:	3b1e      	subs	r3, #30
 8003110:	409a      	lsls	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	60da      	str	r2, [r3, #12]
 800311a:	e022      	b.n	8003162 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6919      	ldr	r1, [r3, #16]
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	b29b      	uxth	r3, r3
 8003128:	461a      	mov	r2, r3
 800312a:	4613      	mov	r3, r2
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	4413      	add	r3, r2
 8003130:	2207      	movs	r2, #7
 8003132:	fa02 f303 	lsl.w	r3, r2, r3
 8003136:	43da      	mvns	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	400a      	ands	r2, r1
 800313e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6919      	ldr	r1, [r3, #16]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	689a      	ldr	r2, [r3, #8]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	b29b      	uxth	r3, r3
 8003150:	4618      	mov	r0, r3
 8003152:	4603      	mov	r3, r0
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	4403      	add	r3, r0
 8003158:	409a      	lsls	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	430a      	orrs	r2, r1
 8003160:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	2b06      	cmp	r3, #6
 8003168:	d824      	bhi.n	80031b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685a      	ldr	r2, [r3, #4]
 8003174:	4613      	mov	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4413      	add	r3, r2
 800317a:	3b05      	subs	r3, #5
 800317c:	221f      	movs	r2, #31
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	43da      	mvns	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	400a      	ands	r2, r1
 800318a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	b29b      	uxth	r3, r3
 8003198:	4618      	mov	r0, r3
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	4613      	mov	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4413      	add	r3, r2
 80031a4:	3b05      	subs	r3, #5
 80031a6:	fa00 f203 	lsl.w	r2, r0, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80031b2:	e04c      	b.n	800324e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	2b0c      	cmp	r3, #12
 80031ba:	d824      	bhi.n	8003206 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4413      	add	r3, r2
 80031cc:	3b23      	subs	r3, #35	@ 0x23
 80031ce:	221f      	movs	r2, #31
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	43da      	mvns	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	400a      	ands	r2, r1
 80031dc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	4618      	mov	r0, r3
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	4613      	mov	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	3b23      	subs	r3, #35	@ 0x23
 80031f8:	fa00 f203 	lsl.w	r2, r0, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	430a      	orrs	r2, r1
 8003202:	631a      	str	r2, [r3, #48]	@ 0x30
 8003204:	e023      	b.n	800324e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	4613      	mov	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	4413      	add	r3, r2
 8003216:	3b41      	subs	r3, #65	@ 0x41
 8003218:	221f      	movs	r2, #31
 800321a:	fa02 f303 	lsl.w	r3, r2, r3
 800321e:	43da      	mvns	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	400a      	ands	r2, r1
 8003226:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	b29b      	uxth	r3, r3
 8003234:	4618      	mov	r0, r3
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	4613      	mov	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4413      	add	r3, r2
 8003240:	3b41      	subs	r3, #65	@ 0x41
 8003242:	fa00 f203 	lsl.w	r2, r0, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	430a      	orrs	r2, r1
 800324c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800324e:	4b29      	ldr	r3, [pc, #164]	@ (80032f4 <HAL_ADC_ConfigChannel+0x250>)
 8003250:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a28      	ldr	r2, [pc, #160]	@ (80032f8 <HAL_ADC_ConfigChannel+0x254>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d10f      	bne.n	800327c <HAL_ADC_ConfigChannel+0x1d8>
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2b12      	cmp	r3, #18
 8003262:	d10b      	bne.n	800327c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a1d      	ldr	r2, [pc, #116]	@ (80032f8 <HAL_ADC_ConfigChannel+0x254>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d12b      	bne.n	80032de <HAL_ADC_ConfigChannel+0x23a>
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a1c      	ldr	r2, [pc, #112]	@ (80032fc <HAL_ADC_ConfigChannel+0x258>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d003      	beq.n	8003298 <HAL_ADC_ConfigChannel+0x1f4>
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2b11      	cmp	r3, #17
 8003296:	d122      	bne.n	80032de <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a11      	ldr	r2, [pc, #68]	@ (80032fc <HAL_ADC_ConfigChannel+0x258>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d111      	bne.n	80032de <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80032ba:	4b11      	ldr	r3, [pc, #68]	@ (8003300 <HAL_ADC_ConfigChannel+0x25c>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a11      	ldr	r2, [pc, #68]	@ (8003304 <HAL_ADC_ConfigChannel+0x260>)
 80032c0:	fba2 2303 	umull	r2, r3, r2, r3
 80032c4:	0c9a      	lsrs	r2, r3, #18
 80032c6:	4613      	mov	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	4413      	add	r3, r2
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80032d0:	e002      	b.n	80032d8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	3b01      	subs	r3, #1
 80032d6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1f9      	bne.n	80032d2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3714      	adds	r7, #20
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	40012300 	.word	0x40012300
 80032f8:	40012000 	.word	0x40012000
 80032fc:	10000012 	.word	0x10000012
 8003300:	20000000 	.word	0x20000000
 8003304:	431bde83 	.word	0x431bde83

08003308 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003310:	4b79      	ldr	r3, [pc, #484]	@ (80034f8 <ADC_Init+0x1f0>)
 8003312:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	431a      	orrs	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800333c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6859      	ldr	r1, [r3, #4]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	021a      	lsls	r2, r3, #8
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003360:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6859      	ldr	r1, [r3, #4]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689a      	ldr	r2, [r3, #8]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003382:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6899      	ldr	r1, [r3, #8]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	68da      	ldr	r2, [r3, #12]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800339a:	4a58      	ldr	r2, [pc, #352]	@ (80034fc <ADC_Init+0x1f4>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d022      	beq.n	80033e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689a      	ldr	r2, [r3, #8]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80033ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6899      	ldr	r1, [r3, #8]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80033d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	6899      	ldr	r1, [r3, #8]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	609a      	str	r2, [r3, #8]
 80033e4:	e00f      	b.n	8003406 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80033f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003404:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 0202 	bic.w	r2, r2, #2
 8003414:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	6899      	ldr	r1, [r3, #8]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	7e1b      	ldrb	r3, [r3, #24]
 8003420:	005a      	lsls	r2, r3, #1
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	430a      	orrs	r2, r1
 8003428:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d01b      	beq.n	800346c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685a      	ldr	r2, [r3, #4]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003442:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003452:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6859      	ldr	r1, [r3, #4]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345e:	3b01      	subs	r3, #1
 8003460:	035a      	lsls	r2, r3, #13
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	430a      	orrs	r2, r1
 8003468:	605a      	str	r2, [r3, #4]
 800346a:	e007      	b.n	800347c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800347a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800348a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	3b01      	subs	r3, #1
 8003498:	051a      	lsls	r2, r3, #20
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80034b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6899      	ldr	r1, [r3, #8]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80034be:	025a      	lsls	r2, r3, #9
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689a      	ldr	r2, [r3, #8]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6899      	ldr	r1, [r3, #8]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	029a      	lsls	r2, r3, #10
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	609a      	str	r2, [r3, #8]
}
 80034ec:	bf00      	nop
 80034ee:	3714      	adds	r7, #20
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr
 80034f8:	40012300 	.word	0x40012300
 80034fc:	0f000001 	.word	0x0f000001

08003500 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800350c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003512:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003516:	2b00      	cmp	r3, #0
 8003518:	d13c      	bne.n	8003594 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d12b      	bne.n	800358c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003538:	2b00      	cmp	r3, #0
 800353a:	d127      	bne.n	800358c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003542:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003546:	2b00      	cmp	r3, #0
 8003548:	d006      	beq.n	8003558 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003554:	2b00      	cmp	r3, #0
 8003556:	d119      	bne.n	800358c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	685a      	ldr	r2, [r3, #4]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f022 0220 	bic.w	r2, r2, #32
 8003566:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003578:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d105      	bne.n	800358c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003584:	f043 0201 	orr.w	r2, r3, #1
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f7fe f847 	bl	8001620 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003592:	e00e      	b.n	80035b2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003598:	f003 0310 	and.w	r3, r3, #16
 800359c:	2b00      	cmp	r3, #0
 800359e:	d003      	beq.n	80035a8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f7ff fd74 	bl	800308e <HAL_ADC_ErrorCallback>
}
 80035a6:	e004      	b.n	80035b2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	4798      	blx	r3
}
 80035b2:	bf00      	nop
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b084      	sub	sp, #16
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035c6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f7ff fd56 	bl	800307a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035ce:	bf00      	nop
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b084      	sub	sp, #16
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035e2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2240      	movs	r2, #64	@ 0x40
 80035e8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ee:	f043 0204 	orr.w	r2, r3, #4
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f7ff fd49 	bl	800308e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035fc:	bf00      	nop
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f003 0307 	and.w	r3, r3, #7
 8003612:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003614:	4b0c      	ldr	r3, [pc, #48]	@ (8003648 <__NVIC_SetPriorityGrouping+0x44>)
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003620:	4013      	ands	r3, r2
 8003622:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800362c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003630:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003636:	4a04      	ldr	r2, [pc, #16]	@ (8003648 <__NVIC_SetPriorityGrouping+0x44>)
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	60d3      	str	r3, [r2, #12]
}
 800363c:	bf00      	nop
 800363e:	3714      	adds	r7, #20
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr
 8003648:	e000ed00 	.word	0xe000ed00

0800364c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003650:	4b04      	ldr	r3, [pc, #16]	@ (8003664 <__NVIC_GetPriorityGrouping+0x18>)
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	0a1b      	lsrs	r3, r3, #8
 8003656:	f003 0307 	and.w	r3, r3, #7
}
 800365a:	4618      	mov	r0, r3
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	e000ed00 	.word	0xe000ed00

08003668 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	4603      	mov	r3, r0
 8003670:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003676:	2b00      	cmp	r3, #0
 8003678:	db0b      	blt.n	8003692 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800367a:	79fb      	ldrb	r3, [r7, #7]
 800367c:	f003 021f 	and.w	r2, r3, #31
 8003680:	4907      	ldr	r1, [pc, #28]	@ (80036a0 <__NVIC_EnableIRQ+0x38>)
 8003682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003686:	095b      	lsrs	r3, r3, #5
 8003688:	2001      	movs	r0, #1
 800368a:	fa00 f202 	lsl.w	r2, r0, r2
 800368e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003692:	bf00      	nop
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	e000e100 	.word	0xe000e100

080036a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	4603      	mov	r3, r0
 80036ac:	6039      	str	r1, [r7, #0]
 80036ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	db0a      	blt.n	80036ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	b2da      	uxtb	r2, r3
 80036bc:	490c      	ldr	r1, [pc, #48]	@ (80036f0 <__NVIC_SetPriority+0x4c>)
 80036be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c2:	0112      	lsls	r2, r2, #4
 80036c4:	b2d2      	uxtb	r2, r2
 80036c6:	440b      	add	r3, r1
 80036c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036cc:	e00a      	b.n	80036e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	b2da      	uxtb	r2, r3
 80036d2:	4908      	ldr	r1, [pc, #32]	@ (80036f4 <__NVIC_SetPriority+0x50>)
 80036d4:	79fb      	ldrb	r3, [r7, #7]
 80036d6:	f003 030f 	and.w	r3, r3, #15
 80036da:	3b04      	subs	r3, #4
 80036dc:	0112      	lsls	r2, r2, #4
 80036de:	b2d2      	uxtb	r2, r2
 80036e0:	440b      	add	r3, r1
 80036e2:	761a      	strb	r2, [r3, #24]
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr
 80036f0:	e000e100 	.word	0xe000e100
 80036f4:	e000ed00 	.word	0xe000ed00

080036f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b089      	sub	sp, #36	@ 0x24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f003 0307 	and.w	r3, r3, #7
 800370a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	f1c3 0307 	rsb	r3, r3, #7
 8003712:	2b04      	cmp	r3, #4
 8003714:	bf28      	it	cs
 8003716:	2304      	movcs	r3, #4
 8003718:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	3304      	adds	r3, #4
 800371e:	2b06      	cmp	r3, #6
 8003720:	d902      	bls.n	8003728 <NVIC_EncodePriority+0x30>
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	3b03      	subs	r3, #3
 8003726:	e000      	b.n	800372a <NVIC_EncodePriority+0x32>
 8003728:	2300      	movs	r3, #0
 800372a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800372c:	f04f 32ff 	mov.w	r2, #4294967295
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	fa02 f303 	lsl.w	r3, r2, r3
 8003736:	43da      	mvns	r2, r3
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	401a      	ands	r2, r3
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003740:	f04f 31ff 	mov.w	r1, #4294967295
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	fa01 f303 	lsl.w	r3, r1, r3
 800374a:	43d9      	mvns	r1, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003750:	4313      	orrs	r3, r2
         );
}
 8003752:	4618      	mov	r0, r3
 8003754:	3724      	adds	r7, #36	@ 0x24
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
	...

08003760 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	3b01      	subs	r3, #1
 800376c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003770:	d301      	bcc.n	8003776 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003772:	2301      	movs	r3, #1
 8003774:	e00f      	b.n	8003796 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003776:	4a0a      	ldr	r2, [pc, #40]	@ (80037a0 <SysTick_Config+0x40>)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	3b01      	subs	r3, #1
 800377c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800377e:	210f      	movs	r1, #15
 8003780:	f04f 30ff 	mov.w	r0, #4294967295
 8003784:	f7ff ff8e 	bl	80036a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003788:	4b05      	ldr	r3, [pc, #20]	@ (80037a0 <SysTick_Config+0x40>)
 800378a:	2200      	movs	r2, #0
 800378c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800378e:	4b04      	ldr	r3, [pc, #16]	@ (80037a0 <SysTick_Config+0x40>)
 8003790:	2207      	movs	r2, #7
 8003792:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	e000e010 	.word	0xe000e010

080037a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f7ff ff29 	bl	8003604 <__NVIC_SetPriorityGrouping>
}
 80037b2:	bf00      	nop
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b086      	sub	sp, #24
 80037be:	af00      	add	r7, sp, #0
 80037c0:	4603      	mov	r3, r0
 80037c2:	60b9      	str	r1, [r7, #8]
 80037c4:	607a      	str	r2, [r7, #4]
 80037c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037c8:	2300      	movs	r3, #0
 80037ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037cc:	f7ff ff3e 	bl	800364c <__NVIC_GetPriorityGrouping>
 80037d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	68b9      	ldr	r1, [r7, #8]
 80037d6:	6978      	ldr	r0, [r7, #20]
 80037d8:	f7ff ff8e 	bl	80036f8 <NVIC_EncodePriority>
 80037dc:	4602      	mov	r2, r0
 80037de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037e2:	4611      	mov	r1, r2
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7ff ff5d 	bl	80036a4 <__NVIC_SetPriority>
}
 80037ea:	bf00      	nop
 80037ec:	3718      	adds	r7, #24
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b082      	sub	sp, #8
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	4603      	mov	r3, r0
 80037fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003800:	4618      	mov	r0, r3
 8003802:	f7ff ff31 	bl	8003668 <__NVIC_EnableIRQ>
}
 8003806:	bf00      	nop
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b082      	sub	sp, #8
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7ff ffa2 	bl	8003760 <SysTick_Config>
 800381c:	4603      	mov	r3, r0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3708      	adds	r7, #8
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b082      	sub	sp, #8
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d101      	bne.n	8003838 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e014      	b.n	8003862 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	791b      	ldrb	r3, [r3, #4]
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d105      	bne.n	800384e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f7fe fe55 	bl	80024f8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2202      	movs	r2, #2
 8003852:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800386a:	b480      	push	{r7}
 800386c:	b089      	sub	sp, #36	@ 0x24
 800386e:	af00      	add	r7, sp, #0
 8003870:	60f8      	str	r0, [r7, #12]
 8003872:	60b9      	str	r1, [r7, #8]
 8003874:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003876:	2300      	movs	r3, #0
 8003878:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d002      	beq.n	8003886 <HAL_DAC_ConfigChannel+0x1c>
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e042      	b.n	8003910 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	795b      	ldrb	r3, [r3, #5]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d101      	bne.n	8003896 <HAL_DAC_ConfigChannel+0x2c>
 8003892:	2302      	movs	r3, #2
 8003894:	e03c      	b.n	8003910 <HAL_DAC_ConfigChannel+0xa6>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2201      	movs	r2, #1
 800389a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2202      	movs	r2, #2
 80038a0:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f003 0310 	and.w	r3, r3, #16
 80038b0:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 80038b8:	43db      	mvns	r3, r3
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	4013      	ands	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f003 0310 	and.w	r3, r3, #16
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	fa02 f303 	lsl.w	r3, r2, r3
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	4313      	orrs	r3, r2
 80038dc:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	6819      	ldr	r1, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f003 0310 	and.w	r3, r3, #16
 80038f2:	22c0      	movs	r2, #192	@ 0xc0
 80038f4:	fa02 f303 	lsl.w	r3, r2, r3
 80038f8:	43da      	mvns	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	400a      	ands	r2, r1
 8003900:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2201      	movs	r2, #1
 8003906:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800390e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003910:	4618      	mov	r0, r3
 8003912:	3724      	adds	r7, #36	@ 0x24
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b086      	sub	sp, #24
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003924:	2300      	movs	r3, #0
 8003926:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003928:	f7ff f8b8 	bl	8002a9c <HAL_GetTick>
 800392c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d101      	bne.n	8003938 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e099      	b.n	8003a6c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2202      	movs	r2, #2
 800393c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 0201 	bic.w	r2, r2, #1
 8003956:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003958:	e00f      	b.n	800397a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800395a:	f7ff f89f 	bl	8002a9c <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b05      	cmp	r3, #5
 8003966:	d908      	bls.n	800397a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2220      	movs	r2, #32
 800396c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2203      	movs	r2, #3
 8003972:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e078      	b.n	8003a6c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1e8      	bne.n	800395a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	4b38      	ldr	r3, [pc, #224]	@ (8003a74 <HAL_DMA_Init+0x158>)
 8003994:	4013      	ands	r3, r2
 8003996:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685a      	ldr	r2, [r3, #4]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d0:	2b04      	cmp	r3, #4
 80039d2:	d107      	bne.n	80039e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039dc:	4313      	orrs	r3, r2
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	f023 0307 	bic.w	r3, r3, #7
 80039fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	d117      	bne.n	8003a3e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00e      	beq.n	8003a3e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 fa6f 	bl	8003f04 <DMA_CheckFifoParam>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d008      	beq.n	8003a3e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2240      	movs	r2, #64	@ 0x40
 8003a30:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e016      	b.n	8003a6c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 fa26 	bl	8003e98 <DMA_CalcBaseAndBitshift>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a54:	223f      	movs	r2, #63	@ 0x3f
 8003a56:	409a      	lsls	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3718      	adds	r7, #24
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	f010803f 	.word	0xf010803f

08003a78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
 8003a84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a86:	2300      	movs	r3, #0
 8003a88:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a8e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d101      	bne.n	8003a9e <HAL_DMA_Start_IT+0x26>
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	e040      	b.n	8003b20 <HAL_DMA_Start_IT+0xa8>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d12f      	bne.n	8003b12 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2202      	movs	r2, #2
 8003ab6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	68b9      	ldr	r1, [r7, #8]
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f000 f9b8 	bl	8003e3c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ad0:	223f      	movs	r2, #63	@ 0x3f
 8003ad2:	409a      	lsls	r2, r3
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f042 0216 	orr.w	r2, r2, #22
 8003ae6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d007      	beq.n	8003b00 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 0208 	orr.w	r2, r2, #8
 8003afe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 0201 	orr.w	r2, r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]
 8003b10:	e005      	b.n	8003b1e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3718      	adds	r7, #24
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b086      	sub	sp, #24
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003b30:	2300      	movs	r3, #0
 8003b32:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b34:	4b8e      	ldr	r3, [pc, #568]	@ (8003d70 <HAL_DMA_IRQHandler+0x248>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a8e      	ldr	r2, [pc, #568]	@ (8003d74 <HAL_DMA_IRQHandler+0x24c>)
 8003b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3e:	0a9b      	lsrs	r3, r3, #10
 8003b40:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b46:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b52:	2208      	movs	r2, #8
 8003b54:	409a      	lsls	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d01a      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0304 	and.w	r3, r3, #4
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d013      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 0204 	bic.w	r2, r2, #4
 8003b7a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b80:	2208      	movs	r2, #8
 8003b82:	409a      	lsls	r2, r3
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b8c:	f043 0201 	orr.w	r2, r3, #1
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b98:	2201      	movs	r2, #1
 8003b9a:	409a      	lsls	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d012      	beq.n	8003bca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00b      	beq.n	8003bca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	409a      	lsls	r2, r3
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bc2:	f043 0202 	orr.w	r2, r3, #2
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bce:	2204      	movs	r2, #4
 8003bd0:	409a      	lsls	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d012      	beq.n	8003c00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00b      	beq.n	8003c00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bec:	2204      	movs	r2, #4
 8003bee:	409a      	lsls	r2, r3
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bf8:	f043 0204 	orr.w	r2, r3, #4
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c04:	2210      	movs	r2, #16
 8003c06:	409a      	lsls	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d043      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0308 	and.w	r3, r3, #8
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d03c      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c22:	2210      	movs	r2, #16
 8003c24:	409a      	lsls	r2, r3
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d018      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d108      	bne.n	8003c58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d024      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	4798      	blx	r3
 8003c56:	e01f      	b.n	8003c98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d01b      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	4798      	blx	r3
 8003c68:	e016      	b.n	8003c98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d107      	bne.n	8003c88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 0208 	bic.w	r2, r2, #8
 8003c86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d003      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c9c:	2220      	movs	r2, #32
 8003c9e:	409a      	lsls	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 808f 	beq.w	8003dc8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0310 	and.w	r3, r3, #16
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f000 8087 	beq.w	8003dc8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	409a      	lsls	r2, r3
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b05      	cmp	r3, #5
 8003cd0:	d136      	bne.n	8003d40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 0216 	bic.w	r2, r2, #22
 8003ce0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	695a      	ldr	r2, [r3, #20]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003cf0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d103      	bne.n	8003d02 <HAL_DMA_IRQHandler+0x1da>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d007      	beq.n	8003d12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 0208 	bic.w	r2, r2, #8
 8003d10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d16:	223f      	movs	r2, #63	@ 0x3f
 8003d18:	409a      	lsls	r2, r3
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d07e      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	4798      	blx	r3
        }
        return;
 8003d3e:	e079      	b.n	8003e34 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d01d      	beq.n	8003d8a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d10d      	bne.n	8003d78 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d031      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	4798      	blx	r3
 8003d6c:	e02c      	b.n	8003dc8 <HAL_DMA_IRQHandler+0x2a0>
 8003d6e:	bf00      	nop
 8003d70:	20000000 	.word	0x20000000
 8003d74:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d023      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	4798      	blx	r3
 8003d88:	e01e      	b.n	8003dc8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d10f      	bne.n	8003db8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 0210 	bic.w	r2, r2, #16
 8003da6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d003      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d032      	beq.n	8003e36 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d022      	beq.n	8003e22 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2205      	movs	r2, #5
 8003de0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f022 0201 	bic.w	r2, r2, #1
 8003df2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	3301      	adds	r3, #1
 8003df8:	60bb      	str	r3, [r7, #8]
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d307      	bcc.n	8003e10 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1f2      	bne.n	8003df4 <HAL_DMA_IRQHandler+0x2cc>
 8003e0e:	e000      	b.n	8003e12 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003e10:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d005      	beq.n	8003e36 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	4798      	blx	r3
 8003e32:	e000      	b.n	8003e36 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003e34:	bf00      	nop
    }
  }
}
 8003e36:	3718      	adds	r7, #24
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
 8003e48:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003e58:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	683a      	ldr	r2, [r7, #0]
 8003e60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	2b40      	cmp	r3, #64	@ 0x40
 8003e68:	d108      	bne.n	8003e7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e7a:	e007      	b.n	8003e8c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68ba      	ldr	r2, [r7, #8]
 8003e82:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	60da      	str	r2, [r3, #12]
}
 8003e8c:	bf00      	nop
 8003e8e:	3714      	adds	r7, #20
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	3b10      	subs	r3, #16
 8003ea8:	4a14      	ldr	r2, [pc, #80]	@ (8003efc <DMA_CalcBaseAndBitshift+0x64>)
 8003eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003eae:	091b      	lsrs	r3, r3, #4
 8003eb0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003eb2:	4a13      	ldr	r2, [pc, #76]	@ (8003f00 <DMA_CalcBaseAndBitshift+0x68>)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2b03      	cmp	r3, #3
 8003ec4:	d909      	bls.n	8003eda <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003ece:	f023 0303 	bic.w	r3, r3, #3
 8003ed2:	1d1a      	adds	r2, r3, #4
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	659a      	str	r2, [r3, #88]	@ 0x58
 8003ed8:	e007      	b.n	8003eea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003ee2:	f023 0303 	bic.w	r3, r3, #3
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3714      	adds	r7, #20
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	aaaaaaab 	.word	0xaaaaaaab
 8003f00:	0800afec 	.word	0x0800afec

08003f04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d11f      	bne.n	8003f5e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	2b03      	cmp	r3, #3
 8003f22:	d856      	bhi.n	8003fd2 <DMA_CheckFifoParam+0xce>
 8003f24:	a201      	add	r2, pc, #4	@ (adr r2, 8003f2c <DMA_CheckFifoParam+0x28>)
 8003f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f2a:	bf00      	nop
 8003f2c:	08003f3d 	.word	0x08003f3d
 8003f30:	08003f4f 	.word	0x08003f4f
 8003f34:	08003f3d 	.word	0x08003f3d
 8003f38:	08003fd3 	.word	0x08003fd3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d046      	beq.n	8003fd6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f4c:	e043      	b.n	8003fd6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f52:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003f56:	d140      	bne.n	8003fda <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f5c:	e03d      	b.n	8003fda <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f66:	d121      	bne.n	8003fac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	2b03      	cmp	r3, #3
 8003f6c:	d837      	bhi.n	8003fde <DMA_CheckFifoParam+0xda>
 8003f6e:	a201      	add	r2, pc, #4	@ (adr r2, 8003f74 <DMA_CheckFifoParam+0x70>)
 8003f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f74:	08003f85 	.word	0x08003f85
 8003f78:	08003f8b 	.word	0x08003f8b
 8003f7c:	08003f85 	.word	0x08003f85
 8003f80:	08003f9d 	.word	0x08003f9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	73fb      	strb	r3, [r7, #15]
      break;
 8003f88:	e030      	b.n	8003fec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f8e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d025      	beq.n	8003fe2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f9a:	e022      	b.n	8003fe2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003fa4:	d11f      	bne.n	8003fe6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003faa:	e01c      	b.n	8003fe6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d903      	bls.n	8003fba <DMA_CheckFifoParam+0xb6>
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	2b03      	cmp	r3, #3
 8003fb6:	d003      	beq.n	8003fc0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003fb8:	e018      	b.n	8003fec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	73fb      	strb	r3, [r7, #15]
      break;
 8003fbe:	e015      	b.n	8003fec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00e      	beq.n	8003fea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	73fb      	strb	r3, [r7, #15]
      break;
 8003fd0:	e00b      	b.n	8003fea <DMA_CheckFifoParam+0xe6>
      break;
 8003fd2:	bf00      	nop
 8003fd4:	e00a      	b.n	8003fec <DMA_CheckFifoParam+0xe8>
      break;
 8003fd6:	bf00      	nop
 8003fd8:	e008      	b.n	8003fec <DMA_CheckFifoParam+0xe8>
      break;
 8003fda:	bf00      	nop
 8003fdc:	e006      	b.n	8003fec <DMA_CheckFifoParam+0xe8>
      break;
 8003fde:	bf00      	nop
 8003fe0:	e004      	b.n	8003fec <DMA_CheckFifoParam+0xe8>
      break;
 8003fe2:	bf00      	nop
 8003fe4:	e002      	b.n	8003fec <DMA_CheckFifoParam+0xe8>
      break;   
 8003fe6:	bf00      	nop
 8003fe8:	e000      	b.n	8003fec <DMA_CheckFifoParam+0xe8>
      break;
 8003fea:	bf00      	nop
    }
  } 
  
  return status; 
 8003fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3714      	adds	r7, #20
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop

08003ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b089      	sub	sp, #36	@ 0x24
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004006:	2300      	movs	r3, #0
 8004008:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800400a:	2300      	movs	r3, #0
 800400c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800400e:	2300      	movs	r3, #0
 8004010:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004012:	2300      	movs	r3, #0
 8004014:	61fb      	str	r3, [r7, #28]
 8004016:	e165      	b.n	80042e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004018:	2201      	movs	r2, #1
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	fa02 f303 	lsl.w	r3, r2, r3
 8004020:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	4013      	ands	r3, r2
 800402a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	429a      	cmp	r2, r3
 8004032:	f040 8154 	bne.w	80042de <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f003 0303 	and.w	r3, r3, #3
 800403e:	2b01      	cmp	r3, #1
 8004040:	d005      	beq.n	800404e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800404a:	2b02      	cmp	r3, #2
 800404c:	d130      	bne.n	80040b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	2203      	movs	r2, #3
 800405a:	fa02 f303 	lsl.w	r3, r2, r3
 800405e:	43db      	mvns	r3, r3
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	4013      	ands	r3, r2
 8004064:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	68da      	ldr	r2, [r3, #12]
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	fa02 f303 	lsl.w	r3, r2, r3
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	4313      	orrs	r3, r2
 8004076:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	69ba      	ldr	r2, [r7, #24]
 800407c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004084:	2201      	movs	r2, #1
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	fa02 f303 	lsl.w	r3, r2, r3
 800408c:	43db      	mvns	r3, r3
 800408e:	69ba      	ldr	r2, [r7, #24]
 8004090:	4013      	ands	r3, r2
 8004092:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	091b      	lsrs	r3, r3, #4
 800409a:	f003 0201 	and.w	r2, r3, #1
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	fa02 f303 	lsl.w	r3, r2, r3
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f003 0303 	and.w	r3, r3, #3
 80040b8:	2b03      	cmp	r3, #3
 80040ba:	d017      	beq.n	80040ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	2203      	movs	r2, #3
 80040c8:	fa02 f303 	lsl.w	r3, r2, r3
 80040cc:	43db      	mvns	r3, r3
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	4013      	ands	r3, r2
 80040d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	005b      	lsls	r3, r3, #1
 80040dc:	fa02 f303 	lsl.w	r3, r2, r3
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f003 0303 	and.w	r3, r3, #3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d123      	bne.n	8004140 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	08da      	lsrs	r2, r3, #3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	3208      	adds	r2, #8
 8004100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004104:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	f003 0307 	and.w	r3, r3, #7
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	220f      	movs	r2, #15
 8004110:	fa02 f303 	lsl.w	r3, r2, r3
 8004114:	43db      	mvns	r3, r3
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	4013      	ands	r3, r2
 800411a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	691a      	ldr	r2, [r3, #16]
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	f003 0307 	and.w	r3, r3, #7
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	fa02 f303 	lsl.w	r3, r2, r3
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	4313      	orrs	r3, r2
 8004130:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	08da      	lsrs	r2, r3, #3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	3208      	adds	r2, #8
 800413a:	69b9      	ldr	r1, [r7, #24]
 800413c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	2203      	movs	r2, #3
 800414c:	fa02 f303 	lsl.w	r3, r2, r3
 8004150:	43db      	mvns	r3, r3
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	4013      	ands	r3, r2
 8004156:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f003 0203 	and.w	r2, r3, #3
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	fa02 f303 	lsl.w	r3, r2, r3
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	4313      	orrs	r3, r2
 800416c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800417c:	2b00      	cmp	r3, #0
 800417e:	f000 80ae 	beq.w	80042de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004182:	2300      	movs	r3, #0
 8004184:	60fb      	str	r3, [r7, #12]
 8004186:	4b5d      	ldr	r3, [pc, #372]	@ (80042fc <HAL_GPIO_Init+0x300>)
 8004188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800418a:	4a5c      	ldr	r2, [pc, #368]	@ (80042fc <HAL_GPIO_Init+0x300>)
 800418c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004190:	6453      	str	r3, [r2, #68]	@ 0x44
 8004192:	4b5a      	ldr	r3, [pc, #360]	@ (80042fc <HAL_GPIO_Init+0x300>)
 8004194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004196:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800419e:	4a58      	ldr	r2, [pc, #352]	@ (8004300 <HAL_GPIO_Init+0x304>)
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	089b      	lsrs	r3, r3, #2
 80041a4:	3302      	adds	r3, #2
 80041a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	f003 0303 	and.w	r3, r3, #3
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	220f      	movs	r2, #15
 80041b6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ba:	43db      	mvns	r3, r3
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	4013      	ands	r3, r2
 80041c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a4f      	ldr	r2, [pc, #316]	@ (8004304 <HAL_GPIO_Init+0x308>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d025      	beq.n	8004216 <HAL_GPIO_Init+0x21a>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a4e      	ldr	r2, [pc, #312]	@ (8004308 <HAL_GPIO_Init+0x30c>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d01f      	beq.n	8004212 <HAL_GPIO_Init+0x216>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a4d      	ldr	r2, [pc, #308]	@ (800430c <HAL_GPIO_Init+0x310>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d019      	beq.n	800420e <HAL_GPIO_Init+0x212>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a4c      	ldr	r2, [pc, #304]	@ (8004310 <HAL_GPIO_Init+0x314>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d013      	beq.n	800420a <HAL_GPIO_Init+0x20e>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a4b      	ldr	r2, [pc, #300]	@ (8004314 <HAL_GPIO_Init+0x318>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d00d      	beq.n	8004206 <HAL_GPIO_Init+0x20a>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a4a      	ldr	r2, [pc, #296]	@ (8004318 <HAL_GPIO_Init+0x31c>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d007      	beq.n	8004202 <HAL_GPIO_Init+0x206>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a49      	ldr	r2, [pc, #292]	@ (800431c <HAL_GPIO_Init+0x320>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d101      	bne.n	80041fe <HAL_GPIO_Init+0x202>
 80041fa:	2306      	movs	r3, #6
 80041fc:	e00c      	b.n	8004218 <HAL_GPIO_Init+0x21c>
 80041fe:	2307      	movs	r3, #7
 8004200:	e00a      	b.n	8004218 <HAL_GPIO_Init+0x21c>
 8004202:	2305      	movs	r3, #5
 8004204:	e008      	b.n	8004218 <HAL_GPIO_Init+0x21c>
 8004206:	2304      	movs	r3, #4
 8004208:	e006      	b.n	8004218 <HAL_GPIO_Init+0x21c>
 800420a:	2303      	movs	r3, #3
 800420c:	e004      	b.n	8004218 <HAL_GPIO_Init+0x21c>
 800420e:	2302      	movs	r3, #2
 8004210:	e002      	b.n	8004218 <HAL_GPIO_Init+0x21c>
 8004212:	2301      	movs	r3, #1
 8004214:	e000      	b.n	8004218 <HAL_GPIO_Init+0x21c>
 8004216:	2300      	movs	r3, #0
 8004218:	69fa      	ldr	r2, [r7, #28]
 800421a:	f002 0203 	and.w	r2, r2, #3
 800421e:	0092      	lsls	r2, r2, #2
 8004220:	4093      	lsls	r3, r2
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	4313      	orrs	r3, r2
 8004226:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004228:	4935      	ldr	r1, [pc, #212]	@ (8004300 <HAL_GPIO_Init+0x304>)
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	089b      	lsrs	r3, r3, #2
 800422e:	3302      	adds	r3, #2
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004236:	4b3a      	ldr	r3, [pc, #232]	@ (8004320 <HAL_GPIO_Init+0x324>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	43db      	mvns	r3, r3
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	4013      	ands	r3, r2
 8004244:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d003      	beq.n	800425a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	4313      	orrs	r3, r2
 8004258:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800425a:	4a31      	ldr	r2, [pc, #196]	@ (8004320 <HAL_GPIO_Init+0x324>)
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004260:	4b2f      	ldr	r3, [pc, #188]	@ (8004320 <HAL_GPIO_Init+0x324>)
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	43db      	mvns	r3, r3
 800426a:	69ba      	ldr	r2, [r7, #24]
 800426c:	4013      	ands	r3, r2
 800426e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d003      	beq.n	8004284 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	4313      	orrs	r3, r2
 8004282:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004284:	4a26      	ldr	r2, [pc, #152]	@ (8004320 <HAL_GPIO_Init+0x324>)
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800428a:	4b25      	ldr	r3, [pc, #148]	@ (8004320 <HAL_GPIO_Init+0x324>)
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	43db      	mvns	r3, r3
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	4013      	ands	r3, r2
 8004298:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d003      	beq.n	80042ae <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80042a6:	69ba      	ldr	r2, [r7, #24]
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80042ae:	4a1c      	ldr	r2, [pc, #112]	@ (8004320 <HAL_GPIO_Init+0x324>)
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042b4:	4b1a      	ldr	r3, [pc, #104]	@ (8004320 <HAL_GPIO_Init+0x324>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	43db      	mvns	r3, r3
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	4013      	ands	r3, r2
 80042c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d003      	beq.n	80042d8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042d8:	4a11      	ldr	r2, [pc, #68]	@ (8004320 <HAL_GPIO_Init+0x324>)
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	3301      	adds	r3, #1
 80042e2:	61fb      	str	r3, [r7, #28]
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	2b0f      	cmp	r3, #15
 80042e8:	f67f ae96 	bls.w	8004018 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042ec:	bf00      	nop
 80042ee:	bf00      	nop
 80042f0:	3724      	adds	r7, #36	@ 0x24
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	40023800 	.word	0x40023800
 8004300:	40013800 	.word	0x40013800
 8004304:	40020000 	.word	0x40020000
 8004308:	40020400 	.word	0x40020400
 800430c:	40020800 	.word	0x40020800
 8004310:	40020c00 	.word	0x40020c00
 8004314:	40021000 	.word	0x40021000
 8004318:	40021400 	.word	0x40021400
 800431c:	40021800 	.word	0x40021800
 8004320:	40013c00 	.word	0x40013c00

08004324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	460b      	mov	r3, r1
 800432e:	807b      	strh	r3, [r7, #2]
 8004330:	4613      	mov	r3, r2
 8004332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004334:	787b      	ldrb	r3, [r7, #1]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d003      	beq.n	8004342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800433a:	887a      	ldrh	r2, [r7, #2]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004340:	e003      	b.n	800434a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004342:	887b      	ldrh	r3, [r7, #2]
 8004344:	041a      	lsls	r2, r3, #16
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	619a      	str	r2, [r3, #24]
}
 800434a:	bf00      	nop
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
	...

08004358 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d101      	bne.n	800436c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e0cc      	b.n	8004506 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800436c:	4b68      	ldr	r3, [pc, #416]	@ (8004510 <HAL_RCC_ClockConfig+0x1b8>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 030f 	and.w	r3, r3, #15
 8004374:	683a      	ldr	r2, [r7, #0]
 8004376:	429a      	cmp	r2, r3
 8004378:	d90c      	bls.n	8004394 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800437a:	4b65      	ldr	r3, [pc, #404]	@ (8004510 <HAL_RCC_ClockConfig+0x1b8>)
 800437c:	683a      	ldr	r2, [r7, #0]
 800437e:	b2d2      	uxtb	r2, r2
 8004380:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004382:	4b63      	ldr	r3, [pc, #396]	@ (8004510 <HAL_RCC_ClockConfig+0x1b8>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 030f 	and.w	r3, r3, #15
 800438a:	683a      	ldr	r2, [r7, #0]
 800438c:	429a      	cmp	r2, r3
 800438e:	d001      	beq.n	8004394 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e0b8      	b.n	8004506 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0302 	and.w	r3, r3, #2
 800439c:	2b00      	cmp	r3, #0
 800439e:	d020      	beq.n	80043e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0304 	and.w	r3, r3, #4
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d005      	beq.n	80043b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043ac:	4b59      	ldr	r3, [pc, #356]	@ (8004514 <HAL_RCC_ClockConfig+0x1bc>)
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	4a58      	ldr	r2, [pc, #352]	@ (8004514 <HAL_RCC_ClockConfig+0x1bc>)
 80043b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80043b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0308 	and.w	r3, r3, #8
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d005      	beq.n	80043d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043c4:	4b53      	ldr	r3, [pc, #332]	@ (8004514 <HAL_RCC_ClockConfig+0x1bc>)
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	4a52      	ldr	r2, [pc, #328]	@ (8004514 <HAL_RCC_ClockConfig+0x1bc>)
 80043ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80043ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043d0:	4b50      	ldr	r3, [pc, #320]	@ (8004514 <HAL_RCC_ClockConfig+0x1bc>)
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	494d      	ldr	r1, [pc, #308]	@ (8004514 <HAL_RCC_ClockConfig+0x1bc>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d044      	beq.n	8004478 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d107      	bne.n	8004406 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043f6:	4b47      	ldr	r3, [pc, #284]	@ (8004514 <HAL_RCC_ClockConfig+0x1bc>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d119      	bne.n	8004436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e07f      	b.n	8004506 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	2b02      	cmp	r3, #2
 800440c:	d003      	beq.n	8004416 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004412:	2b03      	cmp	r3, #3
 8004414:	d107      	bne.n	8004426 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004416:	4b3f      	ldr	r3, [pc, #252]	@ (8004514 <HAL_RCC_ClockConfig+0x1bc>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d109      	bne.n	8004436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e06f      	b.n	8004506 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004426:	4b3b      	ldr	r3, [pc, #236]	@ (8004514 <HAL_RCC_ClockConfig+0x1bc>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d101      	bne.n	8004436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e067      	b.n	8004506 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004436:	4b37      	ldr	r3, [pc, #220]	@ (8004514 <HAL_RCC_ClockConfig+0x1bc>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f023 0203 	bic.w	r2, r3, #3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	4934      	ldr	r1, [pc, #208]	@ (8004514 <HAL_RCC_ClockConfig+0x1bc>)
 8004444:	4313      	orrs	r3, r2
 8004446:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004448:	f7fe fb28 	bl	8002a9c <HAL_GetTick>
 800444c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800444e:	e00a      	b.n	8004466 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004450:	f7fe fb24 	bl	8002a9c <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800445e:	4293      	cmp	r3, r2
 8004460:	d901      	bls.n	8004466 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e04f      	b.n	8004506 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004466:	4b2b      	ldr	r3, [pc, #172]	@ (8004514 <HAL_RCC_ClockConfig+0x1bc>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f003 020c 	and.w	r2, r3, #12
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	429a      	cmp	r2, r3
 8004476:	d1eb      	bne.n	8004450 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004478:	4b25      	ldr	r3, [pc, #148]	@ (8004510 <HAL_RCC_ClockConfig+0x1b8>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 030f 	and.w	r3, r3, #15
 8004480:	683a      	ldr	r2, [r7, #0]
 8004482:	429a      	cmp	r2, r3
 8004484:	d20c      	bcs.n	80044a0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004486:	4b22      	ldr	r3, [pc, #136]	@ (8004510 <HAL_RCC_ClockConfig+0x1b8>)
 8004488:	683a      	ldr	r2, [r7, #0]
 800448a:	b2d2      	uxtb	r2, r2
 800448c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800448e:	4b20      	ldr	r3, [pc, #128]	@ (8004510 <HAL_RCC_ClockConfig+0x1b8>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 030f 	and.w	r3, r3, #15
 8004496:	683a      	ldr	r2, [r7, #0]
 8004498:	429a      	cmp	r2, r3
 800449a:	d001      	beq.n	80044a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e032      	b.n	8004506 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0304 	and.w	r3, r3, #4
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d008      	beq.n	80044be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044ac:	4b19      	ldr	r3, [pc, #100]	@ (8004514 <HAL_RCC_ClockConfig+0x1bc>)
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	4916      	ldr	r1, [pc, #88]	@ (8004514 <HAL_RCC_ClockConfig+0x1bc>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0308 	and.w	r3, r3, #8
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d009      	beq.n	80044de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044ca:	4b12      	ldr	r3, [pc, #72]	@ (8004514 <HAL_RCC_ClockConfig+0x1bc>)
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	00db      	lsls	r3, r3, #3
 80044d8:	490e      	ldr	r1, [pc, #56]	@ (8004514 <HAL_RCC_ClockConfig+0x1bc>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80044de:	f000 f821 	bl	8004524 <HAL_RCC_GetSysClockFreq>
 80044e2:	4602      	mov	r2, r0
 80044e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004514 <HAL_RCC_ClockConfig+0x1bc>)
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	091b      	lsrs	r3, r3, #4
 80044ea:	f003 030f 	and.w	r3, r3, #15
 80044ee:	490a      	ldr	r1, [pc, #40]	@ (8004518 <HAL_RCC_ClockConfig+0x1c0>)
 80044f0:	5ccb      	ldrb	r3, [r1, r3]
 80044f2:	fa22 f303 	lsr.w	r3, r2, r3
 80044f6:	4a09      	ldr	r2, [pc, #36]	@ (800451c <HAL_RCC_ClockConfig+0x1c4>)
 80044f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80044fa:	4b09      	ldr	r3, [pc, #36]	@ (8004520 <HAL_RCC_ClockConfig+0x1c8>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4618      	mov	r0, r3
 8004500:	f7fe fa88 	bl	8002a14 <HAL_InitTick>

  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	40023c00 	.word	0x40023c00
 8004514:	40023800 	.word	0x40023800
 8004518:	0800afdc 	.word	0x0800afdc
 800451c:	20000000 	.word	0x20000000
 8004520:	20000004 	.word	0x20000004

08004524 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004524:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004528:	b0a6      	sub	sp, #152	@ 0x98
 800452a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800452c:	2300      	movs	r3, #0
 800452e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8004532:	2300      	movs	r3, #0
 8004534:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8004538:	2300      	movs	r3, #0
 800453a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800453e:	2300      	movs	r3, #0
 8004540:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8004544:	2300      	movs	r3, #0
 8004546:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800454a:	4bc8      	ldr	r3, [pc, #800]	@ (800486c <HAL_RCC_GetSysClockFreq+0x348>)
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f003 030c 	and.w	r3, r3, #12
 8004552:	2b0c      	cmp	r3, #12
 8004554:	f200 817e 	bhi.w	8004854 <HAL_RCC_GetSysClockFreq+0x330>
 8004558:	a201      	add	r2, pc, #4	@ (adr r2, 8004560 <HAL_RCC_GetSysClockFreq+0x3c>)
 800455a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800455e:	bf00      	nop
 8004560:	08004595 	.word	0x08004595
 8004564:	08004855 	.word	0x08004855
 8004568:	08004855 	.word	0x08004855
 800456c:	08004855 	.word	0x08004855
 8004570:	0800459d 	.word	0x0800459d
 8004574:	08004855 	.word	0x08004855
 8004578:	08004855 	.word	0x08004855
 800457c:	08004855 	.word	0x08004855
 8004580:	080045a5 	.word	0x080045a5
 8004584:	08004855 	.word	0x08004855
 8004588:	08004855 	.word	0x08004855
 800458c:	08004855 	.word	0x08004855
 8004590:	0800470f 	.word	0x0800470f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004594:	4bb6      	ldr	r3, [pc, #728]	@ (8004870 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004596:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800459a:	e15f      	b.n	800485c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800459c:	4bb5      	ldr	r3, [pc, #724]	@ (8004874 <HAL_RCC_GetSysClockFreq+0x350>)
 800459e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80045a2:	e15b      	b.n	800485c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045a4:	4bb1      	ldr	r3, [pc, #708]	@ (800486c <HAL_RCC_GetSysClockFreq+0x348>)
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045b0:	4bae      	ldr	r3, [pc, #696]	@ (800486c <HAL_RCC_GetSysClockFreq+0x348>)
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d031      	beq.n	8004620 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045bc:	4bab      	ldr	r3, [pc, #684]	@ (800486c <HAL_RCC_GetSysClockFreq+0x348>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	099b      	lsrs	r3, r3, #6
 80045c2:	2200      	movs	r2, #0
 80045c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80045c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80045ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80045d0:	2300      	movs	r3, #0
 80045d2:	667b      	str	r3, [r7, #100]	@ 0x64
 80045d4:	4ba7      	ldr	r3, [pc, #668]	@ (8004874 <HAL_RCC_GetSysClockFreq+0x350>)
 80045d6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80045da:	462a      	mov	r2, r5
 80045dc:	fb03 f202 	mul.w	r2, r3, r2
 80045e0:	2300      	movs	r3, #0
 80045e2:	4621      	mov	r1, r4
 80045e4:	fb01 f303 	mul.w	r3, r1, r3
 80045e8:	4413      	add	r3, r2
 80045ea:	4aa2      	ldr	r2, [pc, #648]	@ (8004874 <HAL_RCC_GetSysClockFreq+0x350>)
 80045ec:	4621      	mov	r1, r4
 80045ee:	fba1 1202 	umull	r1, r2, r1, r2
 80045f2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80045f4:	460a      	mov	r2, r1
 80045f6:	67ba      	str	r2, [r7, #120]	@ 0x78
 80045f8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80045fa:	4413      	add	r3, r2
 80045fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80045fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004602:	2200      	movs	r2, #0
 8004604:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004606:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004608:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800460c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8004610:	f7fc fb5a 	bl	8000cc8 <__aeabi_uldivmod>
 8004614:	4602      	mov	r2, r0
 8004616:	460b      	mov	r3, r1
 8004618:	4613      	mov	r3, r2
 800461a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800461e:	e064      	b.n	80046ea <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004620:	4b92      	ldr	r3, [pc, #584]	@ (800486c <HAL_RCC_GetSysClockFreq+0x348>)
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	099b      	lsrs	r3, r3, #6
 8004626:	2200      	movs	r2, #0
 8004628:	653b      	str	r3, [r7, #80]	@ 0x50
 800462a:	657a      	str	r2, [r7, #84]	@ 0x54
 800462c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800462e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004632:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004634:	2300      	movs	r3, #0
 8004636:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004638:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800463c:	4622      	mov	r2, r4
 800463e:	462b      	mov	r3, r5
 8004640:	f04f 0000 	mov.w	r0, #0
 8004644:	f04f 0100 	mov.w	r1, #0
 8004648:	0159      	lsls	r1, r3, #5
 800464a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800464e:	0150      	lsls	r0, r2, #5
 8004650:	4602      	mov	r2, r0
 8004652:	460b      	mov	r3, r1
 8004654:	4621      	mov	r1, r4
 8004656:	1a51      	subs	r1, r2, r1
 8004658:	6139      	str	r1, [r7, #16]
 800465a:	4629      	mov	r1, r5
 800465c:	eb63 0301 	sbc.w	r3, r3, r1
 8004660:	617b      	str	r3, [r7, #20]
 8004662:	f04f 0200 	mov.w	r2, #0
 8004666:	f04f 0300 	mov.w	r3, #0
 800466a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800466e:	4659      	mov	r1, fp
 8004670:	018b      	lsls	r3, r1, #6
 8004672:	4651      	mov	r1, sl
 8004674:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004678:	4651      	mov	r1, sl
 800467a:	018a      	lsls	r2, r1, #6
 800467c:	4651      	mov	r1, sl
 800467e:	ebb2 0801 	subs.w	r8, r2, r1
 8004682:	4659      	mov	r1, fp
 8004684:	eb63 0901 	sbc.w	r9, r3, r1
 8004688:	f04f 0200 	mov.w	r2, #0
 800468c:	f04f 0300 	mov.w	r3, #0
 8004690:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004694:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004698:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800469c:	4690      	mov	r8, r2
 800469e:	4699      	mov	r9, r3
 80046a0:	4623      	mov	r3, r4
 80046a2:	eb18 0303 	adds.w	r3, r8, r3
 80046a6:	60bb      	str	r3, [r7, #8]
 80046a8:	462b      	mov	r3, r5
 80046aa:	eb49 0303 	adc.w	r3, r9, r3
 80046ae:	60fb      	str	r3, [r7, #12]
 80046b0:	f04f 0200 	mov.w	r2, #0
 80046b4:	f04f 0300 	mov.w	r3, #0
 80046b8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80046bc:	4629      	mov	r1, r5
 80046be:	028b      	lsls	r3, r1, #10
 80046c0:	4621      	mov	r1, r4
 80046c2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046c6:	4621      	mov	r1, r4
 80046c8:	028a      	lsls	r2, r1, #10
 80046ca:	4610      	mov	r0, r2
 80046cc:	4619      	mov	r1, r3
 80046ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80046d2:	2200      	movs	r2, #0
 80046d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80046d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80046d8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80046dc:	f7fc faf4 	bl	8000cc8 <__aeabi_uldivmod>
 80046e0:	4602      	mov	r2, r0
 80046e2:	460b      	mov	r3, r1
 80046e4:	4613      	mov	r3, r2
 80046e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80046ea:	4b60      	ldr	r3, [pc, #384]	@ (800486c <HAL_RCC_GetSysClockFreq+0x348>)
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	0c1b      	lsrs	r3, r3, #16
 80046f0:	f003 0303 	and.w	r3, r3, #3
 80046f4:	3301      	adds	r3, #1
 80046f6:	005b      	lsls	r3, r3, #1
 80046f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80046fc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004700:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004704:	fbb2 f3f3 	udiv	r3, r2, r3
 8004708:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800470c:	e0a6      	b.n	800485c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800470e:	4b57      	ldr	r3, [pc, #348]	@ (800486c <HAL_RCC_GetSysClockFreq+0x348>)
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004716:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800471a:	4b54      	ldr	r3, [pc, #336]	@ (800486c <HAL_RCC_GetSysClockFreq+0x348>)
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d02a      	beq.n	800477c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004726:	4b51      	ldr	r3, [pc, #324]	@ (800486c <HAL_RCC_GetSysClockFreq+0x348>)
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	099b      	lsrs	r3, r3, #6
 800472c:	2200      	movs	r2, #0
 800472e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004730:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004734:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004738:	2100      	movs	r1, #0
 800473a:	4b4e      	ldr	r3, [pc, #312]	@ (8004874 <HAL_RCC_GetSysClockFreq+0x350>)
 800473c:	fb03 f201 	mul.w	r2, r3, r1
 8004740:	2300      	movs	r3, #0
 8004742:	fb00 f303 	mul.w	r3, r0, r3
 8004746:	4413      	add	r3, r2
 8004748:	4a4a      	ldr	r2, [pc, #296]	@ (8004874 <HAL_RCC_GetSysClockFreq+0x350>)
 800474a:	fba0 1202 	umull	r1, r2, r0, r2
 800474e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004750:	460a      	mov	r2, r1
 8004752:	673a      	str	r2, [r7, #112]	@ 0x70
 8004754:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004756:	4413      	add	r3, r2
 8004758:	677b      	str	r3, [r7, #116]	@ 0x74
 800475a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800475e:	2200      	movs	r2, #0
 8004760:	633b      	str	r3, [r7, #48]	@ 0x30
 8004762:	637a      	str	r2, [r7, #52]	@ 0x34
 8004764:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004768:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800476c:	f7fc faac 	bl	8000cc8 <__aeabi_uldivmod>
 8004770:	4602      	mov	r2, r0
 8004772:	460b      	mov	r3, r1
 8004774:	4613      	mov	r3, r2
 8004776:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800477a:	e05b      	b.n	8004834 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800477c:	4b3b      	ldr	r3, [pc, #236]	@ (800486c <HAL_RCC_GetSysClockFreq+0x348>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	099b      	lsrs	r3, r3, #6
 8004782:	2200      	movs	r2, #0
 8004784:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004786:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800478a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800478e:	623b      	str	r3, [r7, #32]
 8004790:	2300      	movs	r3, #0
 8004792:	627b      	str	r3, [r7, #36]	@ 0x24
 8004794:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004798:	4642      	mov	r2, r8
 800479a:	464b      	mov	r3, r9
 800479c:	f04f 0000 	mov.w	r0, #0
 80047a0:	f04f 0100 	mov.w	r1, #0
 80047a4:	0159      	lsls	r1, r3, #5
 80047a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047aa:	0150      	lsls	r0, r2, #5
 80047ac:	4602      	mov	r2, r0
 80047ae:	460b      	mov	r3, r1
 80047b0:	4641      	mov	r1, r8
 80047b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80047b6:	4649      	mov	r1, r9
 80047b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80047bc:	f04f 0200 	mov.w	r2, #0
 80047c0:	f04f 0300 	mov.w	r3, #0
 80047c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80047c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80047cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80047d0:	ebb2 040a 	subs.w	r4, r2, sl
 80047d4:	eb63 050b 	sbc.w	r5, r3, fp
 80047d8:	f04f 0200 	mov.w	r2, #0
 80047dc:	f04f 0300 	mov.w	r3, #0
 80047e0:	00eb      	lsls	r3, r5, #3
 80047e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047e6:	00e2      	lsls	r2, r4, #3
 80047e8:	4614      	mov	r4, r2
 80047ea:	461d      	mov	r5, r3
 80047ec:	4643      	mov	r3, r8
 80047ee:	18e3      	adds	r3, r4, r3
 80047f0:	603b      	str	r3, [r7, #0]
 80047f2:	464b      	mov	r3, r9
 80047f4:	eb45 0303 	adc.w	r3, r5, r3
 80047f8:	607b      	str	r3, [r7, #4]
 80047fa:	f04f 0200 	mov.w	r2, #0
 80047fe:	f04f 0300 	mov.w	r3, #0
 8004802:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004806:	4629      	mov	r1, r5
 8004808:	028b      	lsls	r3, r1, #10
 800480a:	4621      	mov	r1, r4
 800480c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004810:	4621      	mov	r1, r4
 8004812:	028a      	lsls	r2, r1, #10
 8004814:	4610      	mov	r0, r2
 8004816:	4619      	mov	r1, r3
 8004818:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800481c:	2200      	movs	r2, #0
 800481e:	61bb      	str	r3, [r7, #24]
 8004820:	61fa      	str	r2, [r7, #28]
 8004822:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004826:	f7fc fa4f 	bl	8000cc8 <__aeabi_uldivmod>
 800482a:	4602      	mov	r2, r0
 800482c:	460b      	mov	r3, r1
 800482e:	4613      	mov	r3, r2
 8004830:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004834:	4b0d      	ldr	r3, [pc, #52]	@ (800486c <HAL_RCC_GetSysClockFreq+0x348>)
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	0f1b      	lsrs	r3, r3, #28
 800483a:	f003 0307 	and.w	r3, r3, #7
 800483e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8004842:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004846:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800484a:	fbb2 f3f3 	udiv	r3, r2, r3
 800484e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004852:	e003      	b.n	800485c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004854:	4b06      	ldr	r3, [pc, #24]	@ (8004870 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004856:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800485a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800485c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8004860:	4618      	mov	r0, r3
 8004862:	3798      	adds	r7, #152	@ 0x98
 8004864:	46bd      	mov	sp, r7
 8004866:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800486a:	bf00      	nop
 800486c:	40023800 	.word	0x40023800
 8004870:	00f42400 	.word	0x00f42400
 8004874:	017d7840 	.word	0x017d7840

08004878 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e28d      	b.n	8004da6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b00      	cmp	r3, #0
 8004894:	f000 8083 	beq.w	800499e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004898:	4b94      	ldr	r3, [pc, #592]	@ (8004aec <HAL_RCC_OscConfig+0x274>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f003 030c 	and.w	r3, r3, #12
 80048a0:	2b04      	cmp	r3, #4
 80048a2:	d019      	beq.n	80048d8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80048a4:	4b91      	ldr	r3, [pc, #580]	@ (8004aec <HAL_RCC_OscConfig+0x274>)
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f003 030c 	and.w	r3, r3, #12
        || \
 80048ac:	2b08      	cmp	r3, #8
 80048ae:	d106      	bne.n	80048be <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80048b0:	4b8e      	ldr	r3, [pc, #568]	@ (8004aec <HAL_RCC_OscConfig+0x274>)
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048bc:	d00c      	beq.n	80048d8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048be:	4b8b      	ldr	r3, [pc, #556]	@ (8004aec <HAL_RCC_OscConfig+0x274>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80048c6:	2b0c      	cmp	r3, #12
 80048c8:	d112      	bne.n	80048f0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048ca:	4b88      	ldr	r3, [pc, #544]	@ (8004aec <HAL_RCC_OscConfig+0x274>)
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048d6:	d10b      	bne.n	80048f0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048d8:	4b84      	ldr	r3, [pc, #528]	@ (8004aec <HAL_RCC_OscConfig+0x274>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d05b      	beq.n	800499c <HAL_RCC_OscConfig+0x124>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d157      	bne.n	800499c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e25a      	b.n	8004da6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048f8:	d106      	bne.n	8004908 <HAL_RCC_OscConfig+0x90>
 80048fa:	4b7c      	ldr	r3, [pc, #496]	@ (8004aec <HAL_RCC_OscConfig+0x274>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a7b      	ldr	r2, [pc, #492]	@ (8004aec <HAL_RCC_OscConfig+0x274>)
 8004900:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004904:	6013      	str	r3, [r2, #0]
 8004906:	e01d      	b.n	8004944 <HAL_RCC_OscConfig+0xcc>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004910:	d10c      	bne.n	800492c <HAL_RCC_OscConfig+0xb4>
 8004912:	4b76      	ldr	r3, [pc, #472]	@ (8004aec <HAL_RCC_OscConfig+0x274>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a75      	ldr	r2, [pc, #468]	@ (8004aec <HAL_RCC_OscConfig+0x274>)
 8004918:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800491c:	6013      	str	r3, [r2, #0]
 800491e:	4b73      	ldr	r3, [pc, #460]	@ (8004aec <HAL_RCC_OscConfig+0x274>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a72      	ldr	r2, [pc, #456]	@ (8004aec <HAL_RCC_OscConfig+0x274>)
 8004924:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004928:	6013      	str	r3, [r2, #0]
 800492a:	e00b      	b.n	8004944 <HAL_RCC_OscConfig+0xcc>
 800492c:	4b6f      	ldr	r3, [pc, #444]	@ (8004aec <HAL_RCC_OscConfig+0x274>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a6e      	ldr	r2, [pc, #440]	@ (8004aec <HAL_RCC_OscConfig+0x274>)
 8004932:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004936:	6013      	str	r3, [r2, #0]
 8004938:	4b6c      	ldr	r3, [pc, #432]	@ (8004aec <HAL_RCC_OscConfig+0x274>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a6b      	ldr	r2, [pc, #428]	@ (8004aec <HAL_RCC_OscConfig+0x274>)
 800493e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004942:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d013      	beq.n	8004974 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800494c:	f7fe f8a6 	bl	8002a9c <HAL_GetTick>
 8004950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004952:	e008      	b.n	8004966 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004954:	f7fe f8a2 	bl	8002a9c <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b64      	cmp	r3, #100	@ 0x64
 8004960:	d901      	bls.n	8004966 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e21f      	b.n	8004da6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004966:	4b61      	ldr	r3, [pc, #388]	@ (8004aec <HAL_RCC_OscConfig+0x274>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d0f0      	beq.n	8004954 <HAL_RCC_OscConfig+0xdc>
 8004972:	e014      	b.n	800499e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004974:	f7fe f892 	bl	8002a9c <HAL_GetTick>
 8004978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800497a:	e008      	b.n	800498e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800497c:	f7fe f88e 	bl	8002a9c <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b64      	cmp	r3, #100	@ 0x64
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e20b      	b.n	8004da6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800498e:	4b57      	ldr	r3, [pc, #348]	@ (8004aec <HAL_RCC_OscConfig+0x274>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1f0      	bne.n	800497c <HAL_RCC_OscConfig+0x104>
 800499a:	e000      	b.n	800499e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800499c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0302 	and.w	r3, r3, #2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d06f      	beq.n	8004a8a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80049aa:	4b50      	ldr	r3, [pc, #320]	@ (8004aec <HAL_RCC_OscConfig+0x274>)
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f003 030c 	and.w	r3, r3, #12
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d017      	beq.n	80049e6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80049b6:	4b4d      	ldr	r3, [pc, #308]	@ (8004aec <HAL_RCC_OscConfig+0x274>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f003 030c 	and.w	r3, r3, #12
        || \
 80049be:	2b08      	cmp	r3, #8
 80049c0:	d105      	bne.n	80049ce <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80049c2:	4b4a      	ldr	r3, [pc, #296]	@ (8004aec <HAL_RCC_OscConfig+0x274>)
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00b      	beq.n	80049e6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ce:	4b47      	ldr	r3, [pc, #284]	@ (8004aec <HAL_RCC_OscConfig+0x274>)
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80049d6:	2b0c      	cmp	r3, #12
 80049d8:	d11c      	bne.n	8004a14 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049da:	4b44      	ldr	r3, [pc, #272]	@ (8004aec <HAL_RCC_OscConfig+0x274>)
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d116      	bne.n	8004a14 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049e6:	4b41      	ldr	r3, [pc, #260]	@ (8004aec <HAL_RCC_OscConfig+0x274>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d005      	beq.n	80049fe <HAL_RCC_OscConfig+0x186>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d001      	beq.n	80049fe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e1d3      	b.n	8004da6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049fe:	4b3b      	ldr	r3, [pc, #236]	@ (8004aec <HAL_RCC_OscConfig+0x274>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	00db      	lsls	r3, r3, #3
 8004a0c:	4937      	ldr	r1, [pc, #220]	@ (8004aec <HAL_RCC_OscConfig+0x274>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a12:	e03a      	b.n	8004a8a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d020      	beq.n	8004a5e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a1c:	4b34      	ldr	r3, [pc, #208]	@ (8004af0 <HAL_RCC_OscConfig+0x278>)
 8004a1e:	2201      	movs	r2, #1
 8004a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a22:	f7fe f83b 	bl	8002a9c <HAL_GetTick>
 8004a26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a28:	e008      	b.n	8004a3c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a2a:	f7fe f837 	bl	8002a9c <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d901      	bls.n	8004a3c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e1b4      	b.n	8004da6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a3c:	4b2b      	ldr	r3, [pc, #172]	@ (8004aec <HAL_RCC_OscConfig+0x274>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d0f0      	beq.n	8004a2a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a48:	4b28      	ldr	r3, [pc, #160]	@ (8004aec <HAL_RCC_OscConfig+0x274>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	00db      	lsls	r3, r3, #3
 8004a56:	4925      	ldr	r1, [pc, #148]	@ (8004aec <HAL_RCC_OscConfig+0x274>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	600b      	str	r3, [r1, #0]
 8004a5c:	e015      	b.n	8004a8a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a5e:	4b24      	ldr	r3, [pc, #144]	@ (8004af0 <HAL_RCC_OscConfig+0x278>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a64:	f7fe f81a 	bl	8002a9c <HAL_GetTick>
 8004a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a6a:	e008      	b.n	8004a7e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a6c:	f7fe f816 	bl	8002a9c <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e193      	b.n	8004da6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a7e:	4b1b      	ldr	r3, [pc, #108]	@ (8004aec <HAL_RCC_OscConfig+0x274>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1f0      	bne.n	8004a6c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0308 	and.w	r3, r3, #8
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d036      	beq.n	8004b04 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d016      	beq.n	8004acc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a9e:	4b15      	ldr	r3, [pc, #84]	@ (8004af4 <HAL_RCC_OscConfig+0x27c>)
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa4:	f7fd fffa 	bl	8002a9c <HAL_GetTick>
 8004aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aaa:	e008      	b.n	8004abe <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004aac:	f7fd fff6 	bl	8002a9c <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e173      	b.n	8004da6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004abe:	4b0b      	ldr	r3, [pc, #44]	@ (8004aec <HAL_RCC_OscConfig+0x274>)
 8004ac0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d0f0      	beq.n	8004aac <HAL_RCC_OscConfig+0x234>
 8004aca:	e01b      	b.n	8004b04 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004acc:	4b09      	ldr	r3, [pc, #36]	@ (8004af4 <HAL_RCC_OscConfig+0x27c>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ad2:	f7fd ffe3 	bl	8002a9c <HAL_GetTick>
 8004ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ad8:	e00e      	b.n	8004af8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ada:	f7fd ffdf 	bl	8002a9c <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d907      	bls.n	8004af8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e15c      	b.n	8004da6 <HAL_RCC_OscConfig+0x52e>
 8004aec:	40023800 	.word	0x40023800
 8004af0:	42470000 	.word	0x42470000
 8004af4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004af8:	4b8a      	ldr	r3, [pc, #552]	@ (8004d24 <HAL_RCC_OscConfig+0x4ac>)
 8004afa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004afc:	f003 0302 	and.w	r3, r3, #2
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1ea      	bne.n	8004ada <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0304 	and.w	r3, r3, #4
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f000 8097 	beq.w	8004c40 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b12:	2300      	movs	r3, #0
 8004b14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b16:	4b83      	ldr	r3, [pc, #524]	@ (8004d24 <HAL_RCC_OscConfig+0x4ac>)
 8004b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10f      	bne.n	8004b42 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b22:	2300      	movs	r3, #0
 8004b24:	60bb      	str	r3, [r7, #8]
 8004b26:	4b7f      	ldr	r3, [pc, #508]	@ (8004d24 <HAL_RCC_OscConfig+0x4ac>)
 8004b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2a:	4a7e      	ldr	r2, [pc, #504]	@ (8004d24 <HAL_RCC_OscConfig+0x4ac>)
 8004b2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b30:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b32:	4b7c      	ldr	r3, [pc, #496]	@ (8004d24 <HAL_RCC_OscConfig+0x4ac>)
 8004b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b3a:	60bb      	str	r3, [r7, #8]
 8004b3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b42:	4b79      	ldr	r3, [pc, #484]	@ (8004d28 <HAL_RCC_OscConfig+0x4b0>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d118      	bne.n	8004b80 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b4e:	4b76      	ldr	r3, [pc, #472]	@ (8004d28 <HAL_RCC_OscConfig+0x4b0>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a75      	ldr	r2, [pc, #468]	@ (8004d28 <HAL_RCC_OscConfig+0x4b0>)
 8004b54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b5a:	f7fd ff9f 	bl	8002a9c <HAL_GetTick>
 8004b5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b60:	e008      	b.n	8004b74 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b62:	f7fd ff9b 	bl	8002a9c <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d901      	bls.n	8004b74 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e118      	b.n	8004da6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b74:	4b6c      	ldr	r3, [pc, #432]	@ (8004d28 <HAL_RCC_OscConfig+0x4b0>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d0f0      	beq.n	8004b62 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d106      	bne.n	8004b96 <HAL_RCC_OscConfig+0x31e>
 8004b88:	4b66      	ldr	r3, [pc, #408]	@ (8004d24 <HAL_RCC_OscConfig+0x4ac>)
 8004b8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b8c:	4a65      	ldr	r2, [pc, #404]	@ (8004d24 <HAL_RCC_OscConfig+0x4ac>)
 8004b8e:	f043 0301 	orr.w	r3, r3, #1
 8004b92:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b94:	e01c      	b.n	8004bd0 <HAL_RCC_OscConfig+0x358>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	2b05      	cmp	r3, #5
 8004b9c:	d10c      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x340>
 8004b9e:	4b61      	ldr	r3, [pc, #388]	@ (8004d24 <HAL_RCC_OscConfig+0x4ac>)
 8004ba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ba2:	4a60      	ldr	r2, [pc, #384]	@ (8004d24 <HAL_RCC_OscConfig+0x4ac>)
 8004ba4:	f043 0304 	orr.w	r3, r3, #4
 8004ba8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004baa:	4b5e      	ldr	r3, [pc, #376]	@ (8004d24 <HAL_RCC_OscConfig+0x4ac>)
 8004bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bae:	4a5d      	ldr	r2, [pc, #372]	@ (8004d24 <HAL_RCC_OscConfig+0x4ac>)
 8004bb0:	f043 0301 	orr.w	r3, r3, #1
 8004bb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bb6:	e00b      	b.n	8004bd0 <HAL_RCC_OscConfig+0x358>
 8004bb8:	4b5a      	ldr	r3, [pc, #360]	@ (8004d24 <HAL_RCC_OscConfig+0x4ac>)
 8004bba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bbc:	4a59      	ldr	r2, [pc, #356]	@ (8004d24 <HAL_RCC_OscConfig+0x4ac>)
 8004bbe:	f023 0301 	bic.w	r3, r3, #1
 8004bc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bc4:	4b57      	ldr	r3, [pc, #348]	@ (8004d24 <HAL_RCC_OscConfig+0x4ac>)
 8004bc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bc8:	4a56      	ldr	r2, [pc, #344]	@ (8004d24 <HAL_RCC_OscConfig+0x4ac>)
 8004bca:	f023 0304 	bic.w	r3, r3, #4
 8004bce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d015      	beq.n	8004c04 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bd8:	f7fd ff60 	bl	8002a9c <HAL_GetTick>
 8004bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bde:	e00a      	b.n	8004bf6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004be0:	f7fd ff5c 	bl	8002a9c <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e0d7      	b.n	8004da6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bf6:	4b4b      	ldr	r3, [pc, #300]	@ (8004d24 <HAL_RCC_OscConfig+0x4ac>)
 8004bf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d0ee      	beq.n	8004be0 <HAL_RCC_OscConfig+0x368>
 8004c02:	e014      	b.n	8004c2e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c04:	f7fd ff4a 	bl	8002a9c <HAL_GetTick>
 8004c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c0a:	e00a      	b.n	8004c22 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c0c:	f7fd ff46 	bl	8002a9c <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e0c1      	b.n	8004da6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c22:	4b40      	ldr	r3, [pc, #256]	@ (8004d24 <HAL_RCC_OscConfig+0x4ac>)
 8004c24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1ee      	bne.n	8004c0c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c2e:	7dfb      	ldrb	r3, [r7, #23]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d105      	bne.n	8004c40 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c34:	4b3b      	ldr	r3, [pc, #236]	@ (8004d24 <HAL_RCC_OscConfig+0x4ac>)
 8004c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c38:	4a3a      	ldr	r2, [pc, #232]	@ (8004d24 <HAL_RCC_OscConfig+0x4ac>)
 8004c3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c3e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f000 80ad 	beq.w	8004da4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c4a:	4b36      	ldr	r3, [pc, #216]	@ (8004d24 <HAL_RCC_OscConfig+0x4ac>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f003 030c 	and.w	r3, r3, #12
 8004c52:	2b08      	cmp	r3, #8
 8004c54:	d060      	beq.n	8004d18 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d145      	bne.n	8004cea <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c5e:	4b33      	ldr	r3, [pc, #204]	@ (8004d2c <HAL_RCC_OscConfig+0x4b4>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c64:	f7fd ff1a 	bl	8002a9c <HAL_GetTick>
 8004c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c6a:	e008      	b.n	8004c7e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c6c:	f7fd ff16 	bl	8002a9c <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e093      	b.n	8004da6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c7e:	4b29      	ldr	r3, [pc, #164]	@ (8004d24 <HAL_RCC_OscConfig+0x4ac>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1f0      	bne.n	8004c6c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	69da      	ldr	r2, [r3, #28]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a1b      	ldr	r3, [r3, #32]
 8004c92:	431a      	orrs	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c98:	019b      	lsls	r3, r3, #6
 8004c9a:	431a      	orrs	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca0:	085b      	lsrs	r3, r3, #1
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	041b      	lsls	r3, r3, #16
 8004ca6:	431a      	orrs	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cac:	061b      	lsls	r3, r3, #24
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cb4:	071b      	lsls	r3, r3, #28
 8004cb6:	491b      	ldr	r1, [pc, #108]	@ (8004d24 <HAL_RCC_OscConfig+0x4ac>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8004d2c <HAL_RCC_OscConfig+0x4b4>)
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc2:	f7fd feeb 	bl	8002a9c <HAL_GetTick>
 8004cc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cc8:	e008      	b.n	8004cdc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cca:	f7fd fee7 	bl	8002a9c <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d901      	bls.n	8004cdc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e064      	b.n	8004da6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cdc:	4b11      	ldr	r3, [pc, #68]	@ (8004d24 <HAL_RCC_OscConfig+0x4ac>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d0f0      	beq.n	8004cca <HAL_RCC_OscConfig+0x452>
 8004ce8:	e05c      	b.n	8004da4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cea:	4b10      	ldr	r3, [pc, #64]	@ (8004d2c <HAL_RCC_OscConfig+0x4b4>)
 8004cec:	2200      	movs	r2, #0
 8004cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf0:	f7fd fed4 	bl	8002a9c <HAL_GetTick>
 8004cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cf6:	e008      	b.n	8004d0a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cf8:	f7fd fed0 	bl	8002a9c <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d901      	bls.n	8004d0a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e04d      	b.n	8004da6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d0a:	4b06      	ldr	r3, [pc, #24]	@ (8004d24 <HAL_RCC_OscConfig+0x4ac>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1f0      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x480>
 8004d16:	e045      	b.n	8004da4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d107      	bne.n	8004d30 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e040      	b.n	8004da6 <HAL_RCC_OscConfig+0x52e>
 8004d24:	40023800 	.word	0x40023800
 8004d28:	40007000 	.word	0x40007000
 8004d2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d30:	4b1f      	ldr	r3, [pc, #124]	@ (8004db0 <HAL_RCC_OscConfig+0x538>)
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d030      	beq.n	8004da0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d129      	bne.n	8004da0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d122      	bne.n	8004da0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004d60:	4013      	ands	r3, r2
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004d66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d119      	bne.n	8004da0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d76:	085b      	lsrs	r3, r3, #1
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d10f      	bne.n	8004da0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d107      	bne.n	8004da0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d9a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d001      	beq.n	8004da4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e000      	b.n	8004da6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3718      	adds	r7, #24
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	40023800 	.word	0x40023800

08004db4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d101      	bne.n	8004dc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e07b      	b.n	8004ebe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d108      	bne.n	8004de0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004dd6:	d009      	beq.n	8004dec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	61da      	str	r2, [r3, #28]
 8004dde:	e005      	b.n	8004dec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d106      	bne.n	8004e0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f7fd fbba 	bl	8002580 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2202      	movs	r2, #2
 8004e10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e22:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004e34:	431a      	orrs	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e3e:	431a      	orrs	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	f003 0302 	and.w	r3, r3, #2
 8004e48:	431a      	orrs	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	f003 0301 	and.w	r3, r3, #1
 8004e52:	431a      	orrs	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e5c:	431a      	orrs	r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	69db      	ldr	r3, [r3, #28]
 8004e62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e66:	431a      	orrs	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a1b      	ldr	r3, [r3, #32]
 8004e6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e70:	ea42 0103 	orr.w	r1, r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e78:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	430a      	orrs	r2, r1
 8004e82:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	0c1b      	lsrs	r3, r3, #16
 8004e8a:	f003 0104 	and.w	r1, r3, #4
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e92:	f003 0210 	and.w	r2, r3, #16
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	69da      	ldr	r2, [r3, #28]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004eac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3708      	adds	r7, #8
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
	...

08004ec8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d001      	beq.n	8004ee0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e046      	b.n	8004f6e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a23      	ldr	r2, [pc, #140]	@ (8004f7c <HAL_TIM_Base_Start+0xb4>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d022      	beq.n	8004f38 <HAL_TIM_Base_Start+0x70>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004efa:	d01d      	beq.n	8004f38 <HAL_TIM_Base_Start+0x70>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a1f      	ldr	r2, [pc, #124]	@ (8004f80 <HAL_TIM_Base_Start+0xb8>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d018      	beq.n	8004f38 <HAL_TIM_Base_Start+0x70>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a1e      	ldr	r2, [pc, #120]	@ (8004f84 <HAL_TIM_Base_Start+0xbc>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d013      	beq.n	8004f38 <HAL_TIM_Base_Start+0x70>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a1c      	ldr	r2, [pc, #112]	@ (8004f88 <HAL_TIM_Base_Start+0xc0>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d00e      	beq.n	8004f38 <HAL_TIM_Base_Start+0x70>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a1b      	ldr	r2, [pc, #108]	@ (8004f8c <HAL_TIM_Base_Start+0xc4>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d009      	beq.n	8004f38 <HAL_TIM_Base_Start+0x70>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a19      	ldr	r2, [pc, #100]	@ (8004f90 <HAL_TIM_Base_Start+0xc8>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d004      	beq.n	8004f38 <HAL_TIM_Base_Start+0x70>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a18      	ldr	r2, [pc, #96]	@ (8004f94 <HAL_TIM_Base_Start+0xcc>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d111      	bne.n	8004f5c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f003 0307 	and.w	r3, r3, #7
 8004f42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2b06      	cmp	r3, #6
 8004f48:	d010      	beq.n	8004f6c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f042 0201 	orr.w	r2, r2, #1
 8004f58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f5a:	e007      	b.n	8004f6c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f042 0201 	orr.w	r2, r2, #1
 8004f6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	40010000 	.word	0x40010000
 8004f80:	40000400 	.word	0x40000400
 8004f84:	40000800 	.word	0x40000800
 8004f88:	40000c00 	.word	0x40000c00
 8004f8c:	40010400 	.word	0x40010400
 8004f90:	40014000 	.word	0x40014000
 8004f94:	40001800 	.word	0x40001800

08004f98 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6a1a      	ldr	r2, [r3, #32]
 8004fa6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004faa:	4013      	ands	r3, r2
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d10f      	bne.n	8004fd0 <HAL_TIM_Base_Stop+0x38>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6a1a      	ldr	r2, [r3, #32]
 8004fb6:	f240 4344 	movw	r3, #1092	@ 0x444
 8004fba:	4013      	ands	r3, r2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d107      	bne.n	8004fd0 <HAL_TIM_Base_Stop+0x38>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f022 0201 	bic.w	r2, r2, #1
 8004fce:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr

08004fe6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004fe6:	b580      	push	{r7, lr}
 8004fe8:	b082      	sub	sp, #8
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d101      	bne.n	8004ff8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e041      	b.n	800507c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	2b00      	cmp	r3, #0
 8005002:	d106      	bne.n	8005012 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f7fd fb47 	bl	80026a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2202      	movs	r2, #2
 8005016:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	3304      	adds	r3, #4
 8005022:	4619      	mov	r1, r3
 8005024:	4610      	mov	r0, r2
 8005026:	f000 fc41 	bl	80058ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2201      	movs	r2, #1
 800502e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2201      	movs	r2, #1
 800503e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2201      	movs	r2, #1
 800504e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800507a:	2300      	movs	r3, #0
}
 800507c:	4618      	mov	r0, r3
 800507e:	3708      	adds	r7, #8
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d101      	bne.n	8005096 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e041      	b.n	800511a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800509c:	b2db      	uxtb	r3, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d106      	bne.n	80050b0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f7fd fab0 	bl	8002610 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2202      	movs	r2, #2
 80050b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	3304      	adds	r3, #4
 80050c0:	4619      	mov	r1, r3
 80050c2:	4610      	mov	r0, r2
 80050c4:	f000 fbf2 	bl	80058ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3708      	adds	r7, #8
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
	...

08005124 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d104      	bne.n	800513e <HAL_TIM_IC_Start+0x1a>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800513a:	b2db      	uxtb	r3, r3
 800513c:	e013      	b.n	8005166 <HAL_TIM_IC_Start+0x42>
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	2b04      	cmp	r3, #4
 8005142:	d104      	bne.n	800514e <HAL_TIM_IC_Start+0x2a>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800514a:	b2db      	uxtb	r3, r3
 800514c:	e00b      	b.n	8005166 <HAL_TIM_IC_Start+0x42>
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	2b08      	cmp	r3, #8
 8005152:	d104      	bne.n	800515e <HAL_TIM_IC_Start+0x3a>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800515a:	b2db      	uxtb	r3, r3
 800515c:	e003      	b.n	8005166 <HAL_TIM_IC_Start+0x42>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005164:	b2db      	uxtb	r3, r3
 8005166:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d104      	bne.n	8005178 <HAL_TIM_IC_Start+0x54>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005174:	b2db      	uxtb	r3, r3
 8005176:	e013      	b.n	80051a0 <HAL_TIM_IC_Start+0x7c>
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	2b04      	cmp	r3, #4
 800517c:	d104      	bne.n	8005188 <HAL_TIM_IC_Start+0x64>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005184:	b2db      	uxtb	r3, r3
 8005186:	e00b      	b.n	80051a0 <HAL_TIM_IC_Start+0x7c>
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	2b08      	cmp	r3, #8
 800518c:	d104      	bne.n	8005198 <HAL_TIM_IC_Start+0x74>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005194:	b2db      	uxtb	r3, r3
 8005196:	e003      	b.n	80051a0 <HAL_TIM_IC_Start+0x7c>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80051a2:	7bfb      	ldrb	r3, [r7, #15]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d102      	bne.n	80051ae <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80051a8:	7bbb      	ldrb	r3, [r7, #14]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d001      	beq.n	80051b2 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e081      	b.n	80052b6 <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d104      	bne.n	80051c2 <HAL_TIM_IC_Start+0x9e>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2202      	movs	r2, #2
 80051bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051c0:	e013      	b.n	80051ea <HAL_TIM_IC_Start+0xc6>
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	2b04      	cmp	r3, #4
 80051c6:	d104      	bne.n	80051d2 <HAL_TIM_IC_Start+0xae>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2202      	movs	r2, #2
 80051cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051d0:	e00b      	b.n	80051ea <HAL_TIM_IC_Start+0xc6>
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	2b08      	cmp	r3, #8
 80051d6:	d104      	bne.n	80051e2 <HAL_TIM_IC_Start+0xbe>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2202      	movs	r2, #2
 80051dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051e0:	e003      	b.n	80051ea <HAL_TIM_IC_Start+0xc6>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2202      	movs	r2, #2
 80051e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d104      	bne.n	80051fa <HAL_TIM_IC_Start+0xd6>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2202      	movs	r2, #2
 80051f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051f8:	e013      	b.n	8005222 <HAL_TIM_IC_Start+0xfe>
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	2b04      	cmp	r3, #4
 80051fe:	d104      	bne.n	800520a <HAL_TIM_IC_Start+0xe6>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2202      	movs	r2, #2
 8005204:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005208:	e00b      	b.n	8005222 <HAL_TIM_IC_Start+0xfe>
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	2b08      	cmp	r3, #8
 800520e:	d104      	bne.n	800521a <HAL_TIM_IC_Start+0xf6>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2202      	movs	r2, #2
 8005214:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005218:	e003      	b.n	8005222 <HAL_TIM_IC_Start+0xfe>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2202      	movs	r2, #2
 800521e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2201      	movs	r2, #1
 8005228:	6839      	ldr	r1, [r7, #0]
 800522a:	4618      	mov	r0, r3
 800522c:	f000 fec4 	bl	8005fb8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a22      	ldr	r2, [pc, #136]	@ (80052c0 <HAL_TIM_IC_Start+0x19c>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d022      	beq.n	8005280 <HAL_TIM_IC_Start+0x15c>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005242:	d01d      	beq.n	8005280 <HAL_TIM_IC_Start+0x15c>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a1e      	ldr	r2, [pc, #120]	@ (80052c4 <HAL_TIM_IC_Start+0x1a0>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d018      	beq.n	8005280 <HAL_TIM_IC_Start+0x15c>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a1d      	ldr	r2, [pc, #116]	@ (80052c8 <HAL_TIM_IC_Start+0x1a4>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d013      	beq.n	8005280 <HAL_TIM_IC_Start+0x15c>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a1b      	ldr	r2, [pc, #108]	@ (80052cc <HAL_TIM_IC_Start+0x1a8>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d00e      	beq.n	8005280 <HAL_TIM_IC_Start+0x15c>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a1a      	ldr	r2, [pc, #104]	@ (80052d0 <HAL_TIM_IC_Start+0x1ac>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d009      	beq.n	8005280 <HAL_TIM_IC_Start+0x15c>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a18      	ldr	r2, [pc, #96]	@ (80052d4 <HAL_TIM_IC_Start+0x1b0>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d004      	beq.n	8005280 <HAL_TIM_IC_Start+0x15c>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a17      	ldr	r2, [pc, #92]	@ (80052d8 <HAL_TIM_IC_Start+0x1b4>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d111      	bne.n	80052a4 <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	f003 0307 	and.w	r3, r3, #7
 800528a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	2b06      	cmp	r3, #6
 8005290:	d010      	beq.n	80052b4 <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f042 0201 	orr.w	r2, r2, #1
 80052a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a2:	e007      	b.n	80052b4 <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f042 0201 	orr.w	r2, r2, #1
 80052b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	40010000 	.word	0x40010000
 80052c4:	40000400 	.word	0x40000400
 80052c8:	40000800 	.word	0x40000800
 80052cc:	40000c00 	.word	0x40000c00
 80052d0:	40010400 	.word	0x40010400
 80052d4:	40014000 	.word	0x40014000
 80052d8:	40001800 	.word	0x40001800

080052dc <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2200      	movs	r2, #0
 80052ec:	6839      	ldr	r1, [r7, #0]
 80052ee:	4618      	mov	r0, r3
 80052f0:	f000 fe62 	bl	8005fb8 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	6a1a      	ldr	r2, [r3, #32]
 80052fa:	f241 1311 	movw	r3, #4369	@ 0x1111
 80052fe:	4013      	ands	r3, r2
 8005300:	2b00      	cmp	r3, #0
 8005302:	d10f      	bne.n	8005324 <HAL_TIM_IC_Stop+0x48>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6a1a      	ldr	r2, [r3, #32]
 800530a:	f240 4344 	movw	r3, #1092	@ 0x444
 800530e:	4013      	ands	r3, r2
 8005310:	2b00      	cmp	r3, #0
 8005312:	d107      	bne.n	8005324 <HAL_TIM_IC_Stop+0x48>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f022 0201 	bic.w	r2, r2, #1
 8005322:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d104      	bne.n	8005334 <HAL_TIM_IC_Stop+0x58>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005332:	e013      	b.n	800535c <HAL_TIM_IC_Stop+0x80>
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	2b04      	cmp	r3, #4
 8005338:	d104      	bne.n	8005344 <HAL_TIM_IC_Stop+0x68>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2201      	movs	r2, #1
 800533e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005342:	e00b      	b.n	800535c <HAL_TIM_IC_Stop+0x80>
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	2b08      	cmp	r3, #8
 8005348:	d104      	bne.n	8005354 <HAL_TIM_IC_Stop+0x78>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2201      	movs	r2, #1
 800534e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005352:	e003      	b.n	800535c <HAL_TIM_IC_Stop+0x80>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d104      	bne.n	800536c <HAL_TIM_IC_Stop+0x90>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2201      	movs	r2, #1
 8005366:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800536a:	e013      	b.n	8005394 <HAL_TIM_IC_Stop+0xb8>
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	2b04      	cmp	r3, #4
 8005370:	d104      	bne.n	800537c <HAL_TIM_IC_Stop+0xa0>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2201      	movs	r2, #1
 8005376:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800537a:	e00b      	b.n	8005394 <HAL_TIM_IC_Stop+0xb8>
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	2b08      	cmp	r3, #8
 8005380:	d104      	bne.n	800538c <HAL_TIM_IC_Stop+0xb0>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2201      	movs	r2, #1
 8005386:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800538a:	e003      	b.n	8005394 <HAL_TIM_IC_Stop+0xb8>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3708      	adds	r7, #8
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
	...

080053a0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053aa:	2300      	movs	r3, #0
 80053ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d104      	bne.n	80053be <HAL_TIM_IC_Start_IT+0x1e>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	e013      	b.n	80053e6 <HAL_TIM_IC_Start_IT+0x46>
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	2b04      	cmp	r3, #4
 80053c2:	d104      	bne.n	80053ce <HAL_TIM_IC_Start_IT+0x2e>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	e00b      	b.n	80053e6 <HAL_TIM_IC_Start_IT+0x46>
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	2b08      	cmp	r3, #8
 80053d2:	d104      	bne.n	80053de <HAL_TIM_IC_Start_IT+0x3e>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	e003      	b.n	80053e6 <HAL_TIM_IC_Start_IT+0x46>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d104      	bne.n	80053f8 <HAL_TIM_IC_Start_IT+0x58>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	e013      	b.n	8005420 <HAL_TIM_IC_Start_IT+0x80>
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	2b04      	cmp	r3, #4
 80053fc:	d104      	bne.n	8005408 <HAL_TIM_IC_Start_IT+0x68>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005404:	b2db      	uxtb	r3, r3
 8005406:	e00b      	b.n	8005420 <HAL_TIM_IC_Start_IT+0x80>
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	2b08      	cmp	r3, #8
 800540c:	d104      	bne.n	8005418 <HAL_TIM_IC_Start_IT+0x78>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005414:	b2db      	uxtb	r3, r3
 8005416:	e003      	b.n	8005420 <HAL_TIM_IC_Start_IT+0x80>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800541e:	b2db      	uxtb	r3, r3
 8005420:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005422:	7bbb      	ldrb	r3, [r7, #14]
 8005424:	2b01      	cmp	r3, #1
 8005426:	d102      	bne.n	800542e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005428:	7b7b      	ldrb	r3, [r7, #13]
 800542a:	2b01      	cmp	r3, #1
 800542c:	d001      	beq.n	8005432 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e0cc      	b.n	80055cc <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d104      	bne.n	8005442 <HAL_TIM_IC_Start_IT+0xa2>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2202      	movs	r2, #2
 800543c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005440:	e013      	b.n	800546a <HAL_TIM_IC_Start_IT+0xca>
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	2b04      	cmp	r3, #4
 8005446:	d104      	bne.n	8005452 <HAL_TIM_IC_Start_IT+0xb2>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2202      	movs	r2, #2
 800544c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005450:	e00b      	b.n	800546a <HAL_TIM_IC_Start_IT+0xca>
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	2b08      	cmp	r3, #8
 8005456:	d104      	bne.n	8005462 <HAL_TIM_IC_Start_IT+0xc2>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005460:	e003      	b.n	800546a <HAL_TIM_IC_Start_IT+0xca>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2202      	movs	r2, #2
 8005466:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d104      	bne.n	800547a <HAL_TIM_IC_Start_IT+0xda>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2202      	movs	r2, #2
 8005474:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005478:	e013      	b.n	80054a2 <HAL_TIM_IC_Start_IT+0x102>
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	2b04      	cmp	r3, #4
 800547e:	d104      	bne.n	800548a <HAL_TIM_IC_Start_IT+0xea>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2202      	movs	r2, #2
 8005484:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005488:	e00b      	b.n	80054a2 <HAL_TIM_IC_Start_IT+0x102>
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	2b08      	cmp	r3, #8
 800548e:	d104      	bne.n	800549a <HAL_TIM_IC_Start_IT+0xfa>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2202      	movs	r2, #2
 8005494:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005498:	e003      	b.n	80054a2 <HAL_TIM_IC_Start_IT+0x102>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2202      	movs	r2, #2
 800549e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	2b0c      	cmp	r3, #12
 80054a6:	d841      	bhi.n	800552c <HAL_TIM_IC_Start_IT+0x18c>
 80054a8:	a201      	add	r2, pc, #4	@ (adr r2, 80054b0 <HAL_TIM_IC_Start_IT+0x110>)
 80054aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ae:	bf00      	nop
 80054b0:	080054e5 	.word	0x080054e5
 80054b4:	0800552d 	.word	0x0800552d
 80054b8:	0800552d 	.word	0x0800552d
 80054bc:	0800552d 	.word	0x0800552d
 80054c0:	080054f7 	.word	0x080054f7
 80054c4:	0800552d 	.word	0x0800552d
 80054c8:	0800552d 	.word	0x0800552d
 80054cc:	0800552d 	.word	0x0800552d
 80054d0:	08005509 	.word	0x08005509
 80054d4:	0800552d 	.word	0x0800552d
 80054d8:	0800552d 	.word	0x0800552d
 80054dc:	0800552d 	.word	0x0800552d
 80054e0:	0800551b 	.word	0x0800551b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68da      	ldr	r2, [r3, #12]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f042 0202 	orr.w	r2, r2, #2
 80054f2:	60da      	str	r2, [r3, #12]
      break;
 80054f4:	e01d      	b.n	8005532 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68da      	ldr	r2, [r3, #12]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f042 0204 	orr.w	r2, r2, #4
 8005504:	60da      	str	r2, [r3, #12]
      break;
 8005506:	e014      	b.n	8005532 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68da      	ldr	r2, [r3, #12]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f042 0208 	orr.w	r2, r2, #8
 8005516:	60da      	str	r2, [r3, #12]
      break;
 8005518:	e00b      	b.n	8005532 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68da      	ldr	r2, [r3, #12]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f042 0210 	orr.w	r2, r2, #16
 8005528:	60da      	str	r2, [r3, #12]
      break;
 800552a:	e002      	b.n	8005532 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	73fb      	strb	r3, [r7, #15]
      break;
 8005530:	bf00      	nop
  }

  if (status == HAL_OK)
 8005532:	7bfb      	ldrb	r3, [r7, #15]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d148      	bne.n	80055ca <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2201      	movs	r2, #1
 800553e:	6839      	ldr	r1, [r7, #0]
 8005540:	4618      	mov	r0, r3
 8005542:	f000 fd39 	bl	8005fb8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a22      	ldr	r2, [pc, #136]	@ (80055d4 <HAL_TIM_IC_Start_IT+0x234>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d022      	beq.n	8005596 <HAL_TIM_IC_Start_IT+0x1f6>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005558:	d01d      	beq.n	8005596 <HAL_TIM_IC_Start_IT+0x1f6>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a1e      	ldr	r2, [pc, #120]	@ (80055d8 <HAL_TIM_IC_Start_IT+0x238>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d018      	beq.n	8005596 <HAL_TIM_IC_Start_IT+0x1f6>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a1c      	ldr	r2, [pc, #112]	@ (80055dc <HAL_TIM_IC_Start_IT+0x23c>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d013      	beq.n	8005596 <HAL_TIM_IC_Start_IT+0x1f6>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a1b      	ldr	r2, [pc, #108]	@ (80055e0 <HAL_TIM_IC_Start_IT+0x240>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d00e      	beq.n	8005596 <HAL_TIM_IC_Start_IT+0x1f6>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a19      	ldr	r2, [pc, #100]	@ (80055e4 <HAL_TIM_IC_Start_IT+0x244>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d009      	beq.n	8005596 <HAL_TIM_IC_Start_IT+0x1f6>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a18      	ldr	r2, [pc, #96]	@ (80055e8 <HAL_TIM_IC_Start_IT+0x248>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d004      	beq.n	8005596 <HAL_TIM_IC_Start_IT+0x1f6>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a16      	ldr	r2, [pc, #88]	@ (80055ec <HAL_TIM_IC_Start_IT+0x24c>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d111      	bne.n	80055ba <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	f003 0307 	and.w	r3, r3, #7
 80055a0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	2b06      	cmp	r3, #6
 80055a6:	d010      	beq.n	80055ca <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f042 0201 	orr.w	r2, r2, #1
 80055b6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055b8:	e007      	b.n	80055ca <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f042 0201 	orr.w	r2, r2, #1
 80055c8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80055ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3710      	adds	r7, #16
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	40010000 	.word	0x40010000
 80055d8:	40000400 	.word	0x40000400
 80055dc:	40000800 	.word	0x40000800
 80055e0:	40000c00 	.word	0x40000c00
 80055e4:	40010400 	.word	0x40010400
 80055e8:	40014000 	.word	0x40014000
 80055ec:	40001800 	.word	0x40001800

080055f0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b086      	sub	sp, #24
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055fc:	2300      	movs	r3, #0
 80055fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005606:	2b01      	cmp	r3, #1
 8005608:	d101      	bne.n	800560e <HAL_TIM_IC_ConfigChannel+0x1e>
 800560a:	2302      	movs	r3, #2
 800560c:	e088      	b.n	8005720 <HAL_TIM_IC_ConfigChannel+0x130>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d11b      	bne.n	8005654 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800562c:	f000 fb9a 	bl	8005d64 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	699a      	ldr	r2, [r3, #24]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f022 020c 	bic.w	r2, r2, #12
 800563e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	6999      	ldr	r1, [r3, #24]
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	689a      	ldr	r2, [r3, #8]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	430a      	orrs	r2, r1
 8005650:	619a      	str	r2, [r3, #24]
 8005652:	e060      	b.n	8005716 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2b04      	cmp	r3, #4
 8005658:	d11c      	bne.n	8005694 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800566a:	f000 fbef 	bl	8005e4c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	699a      	ldr	r2, [r3, #24]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800567c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	6999      	ldr	r1, [r3, #24]
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	021a      	lsls	r2, r3, #8
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	430a      	orrs	r2, r1
 8005690:	619a      	str	r2, [r3, #24]
 8005692:	e040      	b.n	8005716 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2b08      	cmp	r3, #8
 8005698:	d11b      	bne.n	80056d2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80056aa:	f000 fc0c 	bl	8005ec6 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	69da      	ldr	r2, [r3, #28]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f022 020c 	bic.w	r2, r2, #12
 80056bc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	69d9      	ldr	r1, [r3, #28]
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	689a      	ldr	r2, [r3, #8]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	430a      	orrs	r2, r1
 80056ce:	61da      	str	r2, [r3, #28]
 80056d0:	e021      	b.n	8005716 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2b0c      	cmp	r3, #12
 80056d6:	d11c      	bne.n	8005712 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80056e8:	f000 fc29 	bl	8005f3e <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	69da      	ldr	r2, [r3, #28]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80056fa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	69d9      	ldr	r1, [r3, #28]
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	021a      	lsls	r2, r3, #8
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	430a      	orrs	r2, r1
 800570e:	61da      	str	r2, [r3, #28]
 8005710:	e001      	b.n	8005716 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800571e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005720:	4618      	mov	r0, r3
 8005722:	3718      	adds	r7, #24
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b086      	sub	sp, #24
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005734:	2300      	movs	r3, #0
 8005736:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800573e:	2b01      	cmp	r3, #1
 8005740:	d101      	bne.n	8005746 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005742:	2302      	movs	r3, #2
 8005744:	e0ae      	b.n	80058a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b0c      	cmp	r3, #12
 8005752:	f200 809f 	bhi.w	8005894 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005756:	a201      	add	r2, pc, #4	@ (adr r2, 800575c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800575c:	08005791 	.word	0x08005791
 8005760:	08005895 	.word	0x08005895
 8005764:	08005895 	.word	0x08005895
 8005768:	08005895 	.word	0x08005895
 800576c:	080057d1 	.word	0x080057d1
 8005770:	08005895 	.word	0x08005895
 8005774:	08005895 	.word	0x08005895
 8005778:	08005895 	.word	0x08005895
 800577c:	08005813 	.word	0x08005813
 8005780:	08005895 	.word	0x08005895
 8005784:	08005895 	.word	0x08005895
 8005788:	08005895 	.word	0x08005895
 800578c:	08005853 	.word	0x08005853
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68b9      	ldr	r1, [r7, #8]
 8005796:	4618      	mov	r0, r3
 8005798:	f000 f934 	bl	8005a04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	699a      	ldr	r2, [r3, #24]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f042 0208 	orr.w	r2, r2, #8
 80057aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	699a      	ldr	r2, [r3, #24]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f022 0204 	bic.w	r2, r2, #4
 80057ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	6999      	ldr	r1, [r3, #24]
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	691a      	ldr	r2, [r3, #16]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	430a      	orrs	r2, r1
 80057cc:	619a      	str	r2, [r3, #24]
      break;
 80057ce:	e064      	b.n	800589a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68b9      	ldr	r1, [r7, #8]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f000 f984 	bl	8005ae4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	699a      	ldr	r2, [r3, #24]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	699a      	ldr	r2, [r3, #24]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	6999      	ldr	r1, [r3, #24]
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	021a      	lsls	r2, r3, #8
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	430a      	orrs	r2, r1
 800580e:	619a      	str	r2, [r3, #24]
      break;
 8005810:	e043      	b.n	800589a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68b9      	ldr	r1, [r7, #8]
 8005818:	4618      	mov	r0, r3
 800581a:	f000 f9d9 	bl	8005bd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	69da      	ldr	r2, [r3, #28]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f042 0208 	orr.w	r2, r2, #8
 800582c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	69da      	ldr	r2, [r3, #28]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f022 0204 	bic.w	r2, r2, #4
 800583c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	69d9      	ldr	r1, [r3, #28]
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	691a      	ldr	r2, [r3, #16]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	430a      	orrs	r2, r1
 800584e:	61da      	str	r2, [r3, #28]
      break;
 8005850:	e023      	b.n	800589a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68b9      	ldr	r1, [r7, #8]
 8005858:	4618      	mov	r0, r3
 800585a:	f000 fa2d 	bl	8005cb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	69da      	ldr	r2, [r3, #28]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800586c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	69da      	ldr	r2, [r3, #28]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800587c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	69d9      	ldr	r1, [r3, #28]
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	021a      	lsls	r2, r3, #8
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	430a      	orrs	r2, r1
 8005890:	61da      	str	r2, [r3, #28]
      break;
 8005892:	e002      	b.n	800589a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	75fb      	strb	r3, [r7, #23]
      break;
 8005898:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80058a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3718      	adds	r7, #24
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a46      	ldr	r2, [pc, #280]	@ (80059d8 <TIM_Base_SetConfig+0x12c>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d013      	beq.n	80058ec <TIM_Base_SetConfig+0x40>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058ca:	d00f      	beq.n	80058ec <TIM_Base_SetConfig+0x40>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a43      	ldr	r2, [pc, #268]	@ (80059dc <TIM_Base_SetConfig+0x130>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d00b      	beq.n	80058ec <TIM_Base_SetConfig+0x40>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a42      	ldr	r2, [pc, #264]	@ (80059e0 <TIM_Base_SetConfig+0x134>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d007      	beq.n	80058ec <TIM_Base_SetConfig+0x40>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a41      	ldr	r2, [pc, #260]	@ (80059e4 <TIM_Base_SetConfig+0x138>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d003      	beq.n	80058ec <TIM_Base_SetConfig+0x40>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a40      	ldr	r2, [pc, #256]	@ (80059e8 <TIM_Base_SetConfig+0x13c>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d108      	bne.n	80058fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a35      	ldr	r2, [pc, #212]	@ (80059d8 <TIM_Base_SetConfig+0x12c>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d02b      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800590c:	d027      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a32      	ldr	r2, [pc, #200]	@ (80059dc <TIM_Base_SetConfig+0x130>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d023      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a31      	ldr	r2, [pc, #196]	@ (80059e0 <TIM_Base_SetConfig+0x134>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d01f      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a30      	ldr	r2, [pc, #192]	@ (80059e4 <TIM_Base_SetConfig+0x138>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d01b      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a2f      	ldr	r2, [pc, #188]	@ (80059e8 <TIM_Base_SetConfig+0x13c>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d017      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a2e      	ldr	r2, [pc, #184]	@ (80059ec <TIM_Base_SetConfig+0x140>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d013      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a2d      	ldr	r2, [pc, #180]	@ (80059f0 <TIM_Base_SetConfig+0x144>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d00f      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a2c      	ldr	r2, [pc, #176]	@ (80059f4 <TIM_Base_SetConfig+0x148>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d00b      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a2b      	ldr	r2, [pc, #172]	@ (80059f8 <TIM_Base_SetConfig+0x14c>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d007      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a2a      	ldr	r2, [pc, #168]	@ (80059fc <TIM_Base_SetConfig+0x150>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d003      	beq.n	800595e <TIM_Base_SetConfig+0xb2>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a29      	ldr	r2, [pc, #164]	@ (8005a00 <TIM_Base_SetConfig+0x154>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d108      	bne.n	8005970 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005964:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	4313      	orrs	r3, r2
 800596e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	4313      	orrs	r3, r2
 800597c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	689a      	ldr	r2, [r3, #8]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a10      	ldr	r2, [pc, #64]	@ (80059d8 <TIM_Base_SetConfig+0x12c>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d003      	beq.n	80059a4 <TIM_Base_SetConfig+0xf8>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a12      	ldr	r2, [pc, #72]	@ (80059e8 <TIM_Base_SetConfig+0x13c>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d103      	bne.n	80059ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	691a      	ldr	r2, [r3, #16]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	f003 0301 	and.w	r3, r3, #1
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d105      	bne.n	80059ca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	f023 0201 	bic.w	r2, r3, #1
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	611a      	str	r2, [r3, #16]
  }
}
 80059ca:	bf00      	nop
 80059cc:	3714      	adds	r7, #20
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	40010000 	.word	0x40010000
 80059dc:	40000400 	.word	0x40000400
 80059e0:	40000800 	.word	0x40000800
 80059e4:	40000c00 	.word	0x40000c00
 80059e8:	40010400 	.word	0x40010400
 80059ec:	40014000 	.word	0x40014000
 80059f0:	40014400 	.word	0x40014400
 80059f4:	40014800 	.word	0x40014800
 80059f8:	40001800 	.word	0x40001800
 80059fc:	40001c00 	.word	0x40001c00
 8005a00:	40002000 	.word	0x40002000

08005a04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b087      	sub	sp, #28
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a1b      	ldr	r3, [r3, #32]
 8005a18:	f023 0201 	bic.w	r2, r3, #1
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	699b      	ldr	r3, [r3, #24]
 8005a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f023 0303 	bic.w	r3, r3, #3
 8005a3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	f023 0302 	bic.w	r3, r3, #2
 8005a4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a20      	ldr	r2, [pc, #128]	@ (8005adc <TIM_OC1_SetConfig+0xd8>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d003      	beq.n	8005a68 <TIM_OC1_SetConfig+0x64>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a1f      	ldr	r2, [pc, #124]	@ (8005ae0 <TIM_OC1_SetConfig+0xdc>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d10c      	bne.n	8005a82 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	f023 0308 	bic.w	r3, r3, #8
 8005a6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f023 0304 	bic.w	r3, r3, #4
 8005a80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a15      	ldr	r2, [pc, #84]	@ (8005adc <TIM_OC1_SetConfig+0xd8>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d003      	beq.n	8005a92 <TIM_OC1_SetConfig+0x8e>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a14      	ldr	r2, [pc, #80]	@ (8005ae0 <TIM_OC1_SetConfig+0xdc>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d111      	bne.n	8005ab6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005aa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	699b      	ldr	r3, [r3, #24]
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	685a      	ldr	r2, [r3, #4]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	697a      	ldr	r2, [r7, #20]
 8005ace:	621a      	str	r2, [r3, #32]
}
 8005ad0:	bf00      	nop
 8005ad2:	371c      	adds	r7, #28
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr
 8005adc:	40010000 	.word	0x40010000
 8005ae0:	40010400 	.word	0x40010400

08005ae4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b087      	sub	sp, #28
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6a1b      	ldr	r3, [r3, #32]
 8005af8:	f023 0210 	bic.w	r2, r3, #16
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	021b      	lsls	r3, r3, #8
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	f023 0320 	bic.w	r3, r3, #32
 8005b2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	011b      	lsls	r3, r3, #4
 8005b36:	697a      	ldr	r2, [r7, #20]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4a22      	ldr	r2, [pc, #136]	@ (8005bc8 <TIM_OC2_SetConfig+0xe4>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d003      	beq.n	8005b4c <TIM_OC2_SetConfig+0x68>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a21      	ldr	r2, [pc, #132]	@ (8005bcc <TIM_OC2_SetConfig+0xe8>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d10d      	bne.n	8005b68 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	011b      	lsls	r3, r3, #4
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a17      	ldr	r2, [pc, #92]	@ (8005bc8 <TIM_OC2_SetConfig+0xe4>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d003      	beq.n	8005b78 <TIM_OC2_SetConfig+0x94>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a16      	ldr	r2, [pc, #88]	@ (8005bcc <TIM_OC2_SetConfig+0xe8>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d113      	bne.n	8005ba0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	695b      	ldr	r3, [r3, #20]
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	699b      	ldr	r3, [r3, #24]
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	693a      	ldr	r2, [r7, #16]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	685a      	ldr	r2, [r3, #4]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	697a      	ldr	r2, [r7, #20]
 8005bb8:	621a      	str	r2, [r3, #32]
}
 8005bba:	bf00      	nop
 8005bbc:	371c      	adds	r7, #28
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	40010000 	.word	0x40010000
 8005bcc:	40010400 	.word	0x40010400

08005bd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b087      	sub	sp, #28
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a1b      	ldr	r3, [r3, #32]
 8005be4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f023 0303 	bic.w	r3, r3, #3
 8005c06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	021b      	lsls	r3, r3, #8
 8005c20:	697a      	ldr	r2, [r7, #20]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a21      	ldr	r2, [pc, #132]	@ (8005cb0 <TIM_OC3_SetConfig+0xe0>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d003      	beq.n	8005c36 <TIM_OC3_SetConfig+0x66>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a20      	ldr	r2, [pc, #128]	@ (8005cb4 <TIM_OC3_SetConfig+0xe4>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d10d      	bne.n	8005c52 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	021b      	lsls	r3, r3, #8
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a16      	ldr	r2, [pc, #88]	@ (8005cb0 <TIM_OC3_SetConfig+0xe0>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d003      	beq.n	8005c62 <TIM_OC3_SetConfig+0x92>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a15      	ldr	r2, [pc, #84]	@ (8005cb4 <TIM_OC3_SetConfig+0xe4>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d113      	bne.n	8005c8a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	011b      	lsls	r3, r3, #4
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	011b      	lsls	r3, r3, #4
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	693a      	ldr	r2, [r7, #16]
 8005c8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	685a      	ldr	r2, [r3, #4]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	621a      	str	r2, [r3, #32]
}
 8005ca4:	bf00      	nop
 8005ca6:	371c      	adds	r7, #28
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr
 8005cb0:	40010000 	.word	0x40010000
 8005cb4:	40010400 	.word	0x40010400

08005cb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b087      	sub	sp, #28
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
 8005cc6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a1b      	ldr	r3, [r3, #32]
 8005ccc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	69db      	ldr	r3, [r3, #28]
 8005cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	021b      	lsls	r3, r3, #8
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	031b      	lsls	r3, r3, #12
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a12      	ldr	r2, [pc, #72]	@ (8005d5c <TIM_OC4_SetConfig+0xa4>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d003      	beq.n	8005d20 <TIM_OC4_SetConfig+0x68>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a11      	ldr	r2, [pc, #68]	@ (8005d60 <TIM_OC4_SetConfig+0xa8>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d109      	bne.n	8005d34 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	695b      	ldr	r3, [r3, #20]
 8005d2c:	019b      	lsls	r3, r3, #6
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	685a      	ldr	r2, [r3, #4]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	621a      	str	r2, [r3, #32]
}
 8005d4e:	bf00      	nop
 8005d50:	371c      	adds	r7, #28
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop
 8005d5c:	40010000 	.word	0x40010000
 8005d60:	40010400 	.word	0x40010400

08005d64 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b087      	sub	sp, #28
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	607a      	str	r2, [r7, #4]
 8005d70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6a1b      	ldr	r3, [r3, #32]
 8005d76:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6a1b      	ldr	r3, [r3, #32]
 8005d7c:	f023 0201 	bic.w	r2, r3, #1
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	699b      	ldr	r3, [r3, #24]
 8005d88:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	4a28      	ldr	r2, [pc, #160]	@ (8005e30 <TIM_TI1_SetConfig+0xcc>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d01b      	beq.n	8005dca <TIM_TI1_SetConfig+0x66>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d98:	d017      	beq.n	8005dca <TIM_TI1_SetConfig+0x66>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	4a25      	ldr	r2, [pc, #148]	@ (8005e34 <TIM_TI1_SetConfig+0xd0>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d013      	beq.n	8005dca <TIM_TI1_SetConfig+0x66>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	4a24      	ldr	r2, [pc, #144]	@ (8005e38 <TIM_TI1_SetConfig+0xd4>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d00f      	beq.n	8005dca <TIM_TI1_SetConfig+0x66>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	4a23      	ldr	r2, [pc, #140]	@ (8005e3c <TIM_TI1_SetConfig+0xd8>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d00b      	beq.n	8005dca <TIM_TI1_SetConfig+0x66>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	4a22      	ldr	r2, [pc, #136]	@ (8005e40 <TIM_TI1_SetConfig+0xdc>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d007      	beq.n	8005dca <TIM_TI1_SetConfig+0x66>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	4a21      	ldr	r2, [pc, #132]	@ (8005e44 <TIM_TI1_SetConfig+0xe0>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d003      	beq.n	8005dca <TIM_TI1_SetConfig+0x66>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	4a20      	ldr	r2, [pc, #128]	@ (8005e48 <TIM_TI1_SetConfig+0xe4>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d101      	bne.n	8005dce <TIM_TI1_SetConfig+0x6a>
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e000      	b.n	8005dd0 <TIM_TI1_SetConfig+0x6c>
 8005dce:	2300      	movs	r3, #0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d008      	beq.n	8005de6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	f023 0303 	bic.w	r3, r3, #3
 8005dda:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005ddc:	697a      	ldr	r2, [r7, #20]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	617b      	str	r3, [r7, #20]
 8005de4:	e003      	b.n	8005dee <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	f043 0301 	orr.w	r3, r3, #1
 8005dec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005df4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	011b      	lsls	r3, r3, #4
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	697a      	ldr	r2, [r7, #20]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	f023 030a 	bic.w	r3, r3, #10
 8005e08:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	f003 030a 	and.w	r3, r3, #10
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	621a      	str	r2, [r3, #32]
}
 8005e22:	bf00      	nop
 8005e24:	371c      	adds	r7, #28
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	40010000 	.word	0x40010000
 8005e34:	40000400 	.word	0x40000400
 8005e38:	40000800 	.word	0x40000800
 8005e3c:	40000c00 	.word	0x40000c00
 8005e40:	40010400 	.word	0x40010400
 8005e44:	40014000 	.word	0x40014000
 8005e48:	40001800 	.word	0x40001800

08005e4c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b087      	sub	sp, #28
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]
 8005e58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6a1b      	ldr	r3, [r3, #32]
 8005e5e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6a1b      	ldr	r3, [r3, #32]
 8005e64:	f023 0210 	bic.w	r2, r3, #16
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	699b      	ldr	r3, [r3, #24]
 8005e70:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	021b      	lsls	r3, r3, #8
 8005e7e:	693a      	ldr	r2, [r7, #16]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	031b      	lsls	r3, r3, #12
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005e9e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	011b      	lsls	r3, r3, #4
 8005ea4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005ea8:	697a      	ldr	r2, [r7, #20]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	697a      	ldr	r2, [r7, #20]
 8005eb8:	621a      	str	r2, [r3, #32]
}
 8005eba:	bf00      	nop
 8005ebc:	371c      	adds	r7, #28
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr

08005ec6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	b087      	sub	sp, #28
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	60f8      	str	r0, [r7, #12]
 8005ece:	60b9      	str	r1, [r7, #8]
 8005ed0:	607a      	str	r2, [r7, #4]
 8005ed2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6a1b      	ldr	r3, [r3, #32]
 8005ed8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	69db      	ldr	r3, [r3, #28]
 8005eea:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	f023 0303 	bic.w	r3, r3, #3
 8005ef2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005ef4:	693a      	ldr	r2, [r7, #16]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f02:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	011b      	lsls	r3, r3, #4
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	693a      	ldr	r2, [r7, #16]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8005f16:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	021b      	lsls	r3, r3, #8
 8005f1c:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8005f20:	697a      	ldr	r2, [r7, #20]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	693a      	ldr	r2, [r7, #16]
 8005f2a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	697a      	ldr	r2, [r7, #20]
 8005f30:	621a      	str	r2, [r3, #32]
}
 8005f32:	bf00      	nop
 8005f34:	371c      	adds	r7, #28
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr

08005f3e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f3e:	b480      	push	{r7}
 8005f40:	b087      	sub	sp, #28
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	60f8      	str	r0, [r7, #12]
 8005f46:	60b9      	str	r1, [r7, #8]
 8005f48:	607a      	str	r2, [r7, #4]
 8005f4a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6a1b      	ldr	r3, [r3, #32]
 8005f50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6a1b      	ldr	r3, [r3, #32]
 8005f56:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	69db      	ldr	r3, [r3, #28]
 8005f62:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f6a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	021b      	lsls	r3, r3, #8
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f7c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	031b      	lsls	r3, r3, #12
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8005f90:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	031b      	lsls	r3, r3, #12
 8005f96:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8005f9a:	697a      	ldr	r2, [r7, #20]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	693a      	ldr	r2, [r7, #16]
 8005fa4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	697a      	ldr	r2, [r7, #20]
 8005faa:	621a      	str	r2, [r3, #32]
}
 8005fac:	bf00      	nop
 8005fae:	371c      	adds	r7, #28
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b087      	sub	sp, #28
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	f003 031f 	and.w	r3, r3, #31
 8005fca:	2201      	movs	r2, #1
 8005fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6a1a      	ldr	r2, [r3, #32]
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	43db      	mvns	r3, r3
 8005fda:	401a      	ands	r2, r3
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6a1a      	ldr	r2, [r3, #32]
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	f003 031f 	and.w	r3, r3, #31
 8005fea:	6879      	ldr	r1, [r7, #4]
 8005fec:	fa01 f303 	lsl.w	r3, r1, r3
 8005ff0:	431a      	orrs	r2, r3
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	621a      	str	r2, [r3, #32]
}
 8005ff6:	bf00      	nop
 8005ff8:	371c      	adds	r7, #28
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
	...

08006004 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006014:	2b01      	cmp	r3, #1
 8006016:	d101      	bne.n	800601c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006018:	2302      	movs	r3, #2
 800601a:	e05a      	b.n	80060d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2202      	movs	r2, #2
 8006028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006042:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	4313      	orrs	r3, r2
 800604c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a21      	ldr	r2, [pc, #132]	@ (80060e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d022      	beq.n	80060a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006068:	d01d      	beq.n	80060a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a1d      	ldr	r2, [pc, #116]	@ (80060e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d018      	beq.n	80060a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a1b      	ldr	r2, [pc, #108]	@ (80060e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d013      	beq.n	80060a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a1a      	ldr	r2, [pc, #104]	@ (80060ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d00e      	beq.n	80060a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a18      	ldr	r2, [pc, #96]	@ (80060f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d009      	beq.n	80060a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a17      	ldr	r2, [pc, #92]	@ (80060f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d004      	beq.n	80060a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a15      	ldr	r2, [pc, #84]	@ (80060f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d10c      	bne.n	80060c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	68ba      	ldr	r2, [r7, #8]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68ba      	ldr	r2, [r7, #8]
 80060be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3714      	adds	r7, #20
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	40010000 	.word	0x40010000
 80060e4:	40000400 	.word	0x40000400
 80060e8:	40000800 	.word	0x40000800
 80060ec:	40000c00 	.word	0x40000c00
 80060f0:	40010400 	.word	0x40010400
 80060f4:	40014000 	.word	0x40014000
 80060f8:	40001800 	.word	0x40001800

080060fc <__cvt>:
 80060fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006100:	ec57 6b10 	vmov	r6, r7, d0
 8006104:	2f00      	cmp	r7, #0
 8006106:	460c      	mov	r4, r1
 8006108:	4619      	mov	r1, r3
 800610a:	463b      	mov	r3, r7
 800610c:	bfbb      	ittet	lt
 800610e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006112:	461f      	movlt	r7, r3
 8006114:	2300      	movge	r3, #0
 8006116:	232d      	movlt	r3, #45	@ 0x2d
 8006118:	700b      	strb	r3, [r1, #0]
 800611a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800611c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006120:	4691      	mov	r9, r2
 8006122:	f023 0820 	bic.w	r8, r3, #32
 8006126:	bfbc      	itt	lt
 8006128:	4632      	movlt	r2, r6
 800612a:	4616      	movlt	r6, r2
 800612c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006130:	d005      	beq.n	800613e <__cvt+0x42>
 8006132:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006136:	d100      	bne.n	800613a <__cvt+0x3e>
 8006138:	3401      	adds	r4, #1
 800613a:	2102      	movs	r1, #2
 800613c:	e000      	b.n	8006140 <__cvt+0x44>
 800613e:	2103      	movs	r1, #3
 8006140:	ab03      	add	r3, sp, #12
 8006142:	9301      	str	r3, [sp, #4]
 8006144:	ab02      	add	r3, sp, #8
 8006146:	9300      	str	r3, [sp, #0]
 8006148:	ec47 6b10 	vmov	d0, r6, r7
 800614c:	4653      	mov	r3, sl
 800614e:	4622      	mov	r2, r4
 8006150:	f001 f886 	bl	8007260 <_dtoa_r>
 8006154:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006158:	4605      	mov	r5, r0
 800615a:	d119      	bne.n	8006190 <__cvt+0x94>
 800615c:	f019 0f01 	tst.w	r9, #1
 8006160:	d00e      	beq.n	8006180 <__cvt+0x84>
 8006162:	eb00 0904 	add.w	r9, r0, r4
 8006166:	2200      	movs	r2, #0
 8006168:	2300      	movs	r3, #0
 800616a:	4630      	mov	r0, r6
 800616c:	4639      	mov	r1, r7
 800616e:	f7fa fccb 	bl	8000b08 <__aeabi_dcmpeq>
 8006172:	b108      	cbz	r0, 8006178 <__cvt+0x7c>
 8006174:	f8cd 900c 	str.w	r9, [sp, #12]
 8006178:	2230      	movs	r2, #48	@ 0x30
 800617a:	9b03      	ldr	r3, [sp, #12]
 800617c:	454b      	cmp	r3, r9
 800617e:	d31e      	bcc.n	80061be <__cvt+0xc2>
 8006180:	9b03      	ldr	r3, [sp, #12]
 8006182:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006184:	1b5b      	subs	r3, r3, r5
 8006186:	4628      	mov	r0, r5
 8006188:	6013      	str	r3, [r2, #0]
 800618a:	b004      	add	sp, #16
 800618c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006190:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006194:	eb00 0904 	add.w	r9, r0, r4
 8006198:	d1e5      	bne.n	8006166 <__cvt+0x6a>
 800619a:	7803      	ldrb	r3, [r0, #0]
 800619c:	2b30      	cmp	r3, #48	@ 0x30
 800619e:	d10a      	bne.n	80061b6 <__cvt+0xba>
 80061a0:	2200      	movs	r2, #0
 80061a2:	2300      	movs	r3, #0
 80061a4:	4630      	mov	r0, r6
 80061a6:	4639      	mov	r1, r7
 80061a8:	f7fa fcae 	bl	8000b08 <__aeabi_dcmpeq>
 80061ac:	b918      	cbnz	r0, 80061b6 <__cvt+0xba>
 80061ae:	f1c4 0401 	rsb	r4, r4, #1
 80061b2:	f8ca 4000 	str.w	r4, [sl]
 80061b6:	f8da 3000 	ldr.w	r3, [sl]
 80061ba:	4499      	add	r9, r3
 80061bc:	e7d3      	b.n	8006166 <__cvt+0x6a>
 80061be:	1c59      	adds	r1, r3, #1
 80061c0:	9103      	str	r1, [sp, #12]
 80061c2:	701a      	strb	r2, [r3, #0]
 80061c4:	e7d9      	b.n	800617a <__cvt+0x7e>

080061c6 <__exponent>:
 80061c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061c8:	2900      	cmp	r1, #0
 80061ca:	bfba      	itte	lt
 80061cc:	4249      	neglt	r1, r1
 80061ce:	232d      	movlt	r3, #45	@ 0x2d
 80061d0:	232b      	movge	r3, #43	@ 0x2b
 80061d2:	2909      	cmp	r1, #9
 80061d4:	7002      	strb	r2, [r0, #0]
 80061d6:	7043      	strb	r3, [r0, #1]
 80061d8:	dd29      	ble.n	800622e <__exponent+0x68>
 80061da:	f10d 0307 	add.w	r3, sp, #7
 80061de:	461d      	mov	r5, r3
 80061e0:	270a      	movs	r7, #10
 80061e2:	461a      	mov	r2, r3
 80061e4:	fbb1 f6f7 	udiv	r6, r1, r7
 80061e8:	fb07 1416 	mls	r4, r7, r6, r1
 80061ec:	3430      	adds	r4, #48	@ 0x30
 80061ee:	f802 4c01 	strb.w	r4, [r2, #-1]
 80061f2:	460c      	mov	r4, r1
 80061f4:	2c63      	cmp	r4, #99	@ 0x63
 80061f6:	f103 33ff 	add.w	r3, r3, #4294967295
 80061fa:	4631      	mov	r1, r6
 80061fc:	dcf1      	bgt.n	80061e2 <__exponent+0x1c>
 80061fe:	3130      	adds	r1, #48	@ 0x30
 8006200:	1e94      	subs	r4, r2, #2
 8006202:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006206:	1c41      	adds	r1, r0, #1
 8006208:	4623      	mov	r3, r4
 800620a:	42ab      	cmp	r3, r5
 800620c:	d30a      	bcc.n	8006224 <__exponent+0x5e>
 800620e:	f10d 0309 	add.w	r3, sp, #9
 8006212:	1a9b      	subs	r3, r3, r2
 8006214:	42ac      	cmp	r4, r5
 8006216:	bf88      	it	hi
 8006218:	2300      	movhi	r3, #0
 800621a:	3302      	adds	r3, #2
 800621c:	4403      	add	r3, r0
 800621e:	1a18      	subs	r0, r3, r0
 8006220:	b003      	add	sp, #12
 8006222:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006224:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006228:	f801 6f01 	strb.w	r6, [r1, #1]!
 800622c:	e7ed      	b.n	800620a <__exponent+0x44>
 800622e:	2330      	movs	r3, #48	@ 0x30
 8006230:	3130      	adds	r1, #48	@ 0x30
 8006232:	7083      	strb	r3, [r0, #2]
 8006234:	70c1      	strb	r1, [r0, #3]
 8006236:	1d03      	adds	r3, r0, #4
 8006238:	e7f1      	b.n	800621e <__exponent+0x58>
	...

0800623c <_printf_float>:
 800623c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006240:	b08d      	sub	sp, #52	@ 0x34
 8006242:	460c      	mov	r4, r1
 8006244:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006248:	4616      	mov	r6, r2
 800624a:	461f      	mov	r7, r3
 800624c:	4605      	mov	r5, r0
 800624e:	f000 ff01 	bl	8007054 <_localeconv_r>
 8006252:	6803      	ldr	r3, [r0, #0]
 8006254:	9304      	str	r3, [sp, #16]
 8006256:	4618      	mov	r0, r3
 8006258:	f7fa f82a 	bl	80002b0 <strlen>
 800625c:	2300      	movs	r3, #0
 800625e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006260:	f8d8 3000 	ldr.w	r3, [r8]
 8006264:	9005      	str	r0, [sp, #20]
 8006266:	3307      	adds	r3, #7
 8006268:	f023 0307 	bic.w	r3, r3, #7
 800626c:	f103 0208 	add.w	r2, r3, #8
 8006270:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006274:	f8d4 b000 	ldr.w	fp, [r4]
 8006278:	f8c8 2000 	str.w	r2, [r8]
 800627c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006280:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006284:	9307      	str	r3, [sp, #28]
 8006286:	f8cd 8018 	str.w	r8, [sp, #24]
 800628a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800628e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006292:	4b9c      	ldr	r3, [pc, #624]	@ (8006504 <_printf_float+0x2c8>)
 8006294:	f04f 32ff 	mov.w	r2, #4294967295
 8006298:	f7fa fc68 	bl	8000b6c <__aeabi_dcmpun>
 800629c:	bb70      	cbnz	r0, 80062fc <_printf_float+0xc0>
 800629e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062a2:	4b98      	ldr	r3, [pc, #608]	@ (8006504 <_printf_float+0x2c8>)
 80062a4:	f04f 32ff 	mov.w	r2, #4294967295
 80062a8:	f7fa fc42 	bl	8000b30 <__aeabi_dcmple>
 80062ac:	bb30      	cbnz	r0, 80062fc <_printf_float+0xc0>
 80062ae:	2200      	movs	r2, #0
 80062b0:	2300      	movs	r3, #0
 80062b2:	4640      	mov	r0, r8
 80062b4:	4649      	mov	r1, r9
 80062b6:	f7fa fc31 	bl	8000b1c <__aeabi_dcmplt>
 80062ba:	b110      	cbz	r0, 80062c2 <_printf_float+0x86>
 80062bc:	232d      	movs	r3, #45	@ 0x2d
 80062be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062c2:	4a91      	ldr	r2, [pc, #580]	@ (8006508 <_printf_float+0x2cc>)
 80062c4:	4b91      	ldr	r3, [pc, #580]	@ (800650c <_printf_float+0x2d0>)
 80062c6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80062ca:	bf94      	ite	ls
 80062cc:	4690      	movls	r8, r2
 80062ce:	4698      	movhi	r8, r3
 80062d0:	2303      	movs	r3, #3
 80062d2:	6123      	str	r3, [r4, #16]
 80062d4:	f02b 0304 	bic.w	r3, fp, #4
 80062d8:	6023      	str	r3, [r4, #0]
 80062da:	f04f 0900 	mov.w	r9, #0
 80062de:	9700      	str	r7, [sp, #0]
 80062e0:	4633      	mov	r3, r6
 80062e2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80062e4:	4621      	mov	r1, r4
 80062e6:	4628      	mov	r0, r5
 80062e8:	f000 f9d2 	bl	8006690 <_printf_common>
 80062ec:	3001      	adds	r0, #1
 80062ee:	f040 808d 	bne.w	800640c <_printf_float+0x1d0>
 80062f2:	f04f 30ff 	mov.w	r0, #4294967295
 80062f6:	b00d      	add	sp, #52	@ 0x34
 80062f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062fc:	4642      	mov	r2, r8
 80062fe:	464b      	mov	r3, r9
 8006300:	4640      	mov	r0, r8
 8006302:	4649      	mov	r1, r9
 8006304:	f7fa fc32 	bl	8000b6c <__aeabi_dcmpun>
 8006308:	b140      	cbz	r0, 800631c <_printf_float+0xe0>
 800630a:	464b      	mov	r3, r9
 800630c:	2b00      	cmp	r3, #0
 800630e:	bfbc      	itt	lt
 8006310:	232d      	movlt	r3, #45	@ 0x2d
 8006312:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006316:	4a7e      	ldr	r2, [pc, #504]	@ (8006510 <_printf_float+0x2d4>)
 8006318:	4b7e      	ldr	r3, [pc, #504]	@ (8006514 <_printf_float+0x2d8>)
 800631a:	e7d4      	b.n	80062c6 <_printf_float+0x8a>
 800631c:	6863      	ldr	r3, [r4, #4]
 800631e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006322:	9206      	str	r2, [sp, #24]
 8006324:	1c5a      	adds	r2, r3, #1
 8006326:	d13b      	bne.n	80063a0 <_printf_float+0x164>
 8006328:	2306      	movs	r3, #6
 800632a:	6063      	str	r3, [r4, #4]
 800632c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006330:	2300      	movs	r3, #0
 8006332:	6022      	str	r2, [r4, #0]
 8006334:	9303      	str	r3, [sp, #12]
 8006336:	ab0a      	add	r3, sp, #40	@ 0x28
 8006338:	e9cd a301 	strd	sl, r3, [sp, #4]
 800633c:	ab09      	add	r3, sp, #36	@ 0x24
 800633e:	9300      	str	r3, [sp, #0]
 8006340:	6861      	ldr	r1, [r4, #4]
 8006342:	ec49 8b10 	vmov	d0, r8, r9
 8006346:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800634a:	4628      	mov	r0, r5
 800634c:	f7ff fed6 	bl	80060fc <__cvt>
 8006350:	9b06      	ldr	r3, [sp, #24]
 8006352:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006354:	2b47      	cmp	r3, #71	@ 0x47
 8006356:	4680      	mov	r8, r0
 8006358:	d129      	bne.n	80063ae <_printf_float+0x172>
 800635a:	1cc8      	adds	r0, r1, #3
 800635c:	db02      	blt.n	8006364 <_printf_float+0x128>
 800635e:	6863      	ldr	r3, [r4, #4]
 8006360:	4299      	cmp	r1, r3
 8006362:	dd41      	ble.n	80063e8 <_printf_float+0x1ac>
 8006364:	f1aa 0a02 	sub.w	sl, sl, #2
 8006368:	fa5f fa8a 	uxtb.w	sl, sl
 800636c:	3901      	subs	r1, #1
 800636e:	4652      	mov	r2, sl
 8006370:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006374:	9109      	str	r1, [sp, #36]	@ 0x24
 8006376:	f7ff ff26 	bl	80061c6 <__exponent>
 800637a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800637c:	1813      	adds	r3, r2, r0
 800637e:	2a01      	cmp	r2, #1
 8006380:	4681      	mov	r9, r0
 8006382:	6123      	str	r3, [r4, #16]
 8006384:	dc02      	bgt.n	800638c <_printf_float+0x150>
 8006386:	6822      	ldr	r2, [r4, #0]
 8006388:	07d2      	lsls	r2, r2, #31
 800638a:	d501      	bpl.n	8006390 <_printf_float+0x154>
 800638c:	3301      	adds	r3, #1
 800638e:	6123      	str	r3, [r4, #16]
 8006390:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006394:	2b00      	cmp	r3, #0
 8006396:	d0a2      	beq.n	80062de <_printf_float+0xa2>
 8006398:	232d      	movs	r3, #45	@ 0x2d
 800639a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800639e:	e79e      	b.n	80062de <_printf_float+0xa2>
 80063a0:	9a06      	ldr	r2, [sp, #24]
 80063a2:	2a47      	cmp	r2, #71	@ 0x47
 80063a4:	d1c2      	bne.n	800632c <_printf_float+0xf0>
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d1c0      	bne.n	800632c <_printf_float+0xf0>
 80063aa:	2301      	movs	r3, #1
 80063ac:	e7bd      	b.n	800632a <_printf_float+0xee>
 80063ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80063b2:	d9db      	bls.n	800636c <_printf_float+0x130>
 80063b4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80063b8:	d118      	bne.n	80063ec <_printf_float+0x1b0>
 80063ba:	2900      	cmp	r1, #0
 80063bc:	6863      	ldr	r3, [r4, #4]
 80063be:	dd0b      	ble.n	80063d8 <_printf_float+0x19c>
 80063c0:	6121      	str	r1, [r4, #16]
 80063c2:	b913      	cbnz	r3, 80063ca <_printf_float+0x18e>
 80063c4:	6822      	ldr	r2, [r4, #0]
 80063c6:	07d0      	lsls	r0, r2, #31
 80063c8:	d502      	bpl.n	80063d0 <_printf_float+0x194>
 80063ca:	3301      	adds	r3, #1
 80063cc:	440b      	add	r3, r1
 80063ce:	6123      	str	r3, [r4, #16]
 80063d0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80063d2:	f04f 0900 	mov.w	r9, #0
 80063d6:	e7db      	b.n	8006390 <_printf_float+0x154>
 80063d8:	b913      	cbnz	r3, 80063e0 <_printf_float+0x1a4>
 80063da:	6822      	ldr	r2, [r4, #0]
 80063dc:	07d2      	lsls	r2, r2, #31
 80063de:	d501      	bpl.n	80063e4 <_printf_float+0x1a8>
 80063e0:	3302      	adds	r3, #2
 80063e2:	e7f4      	b.n	80063ce <_printf_float+0x192>
 80063e4:	2301      	movs	r3, #1
 80063e6:	e7f2      	b.n	80063ce <_printf_float+0x192>
 80063e8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80063ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80063ee:	4299      	cmp	r1, r3
 80063f0:	db05      	blt.n	80063fe <_printf_float+0x1c2>
 80063f2:	6823      	ldr	r3, [r4, #0]
 80063f4:	6121      	str	r1, [r4, #16]
 80063f6:	07d8      	lsls	r0, r3, #31
 80063f8:	d5ea      	bpl.n	80063d0 <_printf_float+0x194>
 80063fa:	1c4b      	adds	r3, r1, #1
 80063fc:	e7e7      	b.n	80063ce <_printf_float+0x192>
 80063fe:	2900      	cmp	r1, #0
 8006400:	bfd4      	ite	le
 8006402:	f1c1 0202 	rsble	r2, r1, #2
 8006406:	2201      	movgt	r2, #1
 8006408:	4413      	add	r3, r2
 800640a:	e7e0      	b.n	80063ce <_printf_float+0x192>
 800640c:	6823      	ldr	r3, [r4, #0]
 800640e:	055a      	lsls	r2, r3, #21
 8006410:	d407      	bmi.n	8006422 <_printf_float+0x1e6>
 8006412:	6923      	ldr	r3, [r4, #16]
 8006414:	4642      	mov	r2, r8
 8006416:	4631      	mov	r1, r6
 8006418:	4628      	mov	r0, r5
 800641a:	47b8      	blx	r7
 800641c:	3001      	adds	r0, #1
 800641e:	d12b      	bne.n	8006478 <_printf_float+0x23c>
 8006420:	e767      	b.n	80062f2 <_printf_float+0xb6>
 8006422:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006426:	f240 80dd 	bls.w	80065e4 <_printf_float+0x3a8>
 800642a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800642e:	2200      	movs	r2, #0
 8006430:	2300      	movs	r3, #0
 8006432:	f7fa fb69 	bl	8000b08 <__aeabi_dcmpeq>
 8006436:	2800      	cmp	r0, #0
 8006438:	d033      	beq.n	80064a2 <_printf_float+0x266>
 800643a:	4a37      	ldr	r2, [pc, #220]	@ (8006518 <_printf_float+0x2dc>)
 800643c:	2301      	movs	r3, #1
 800643e:	4631      	mov	r1, r6
 8006440:	4628      	mov	r0, r5
 8006442:	47b8      	blx	r7
 8006444:	3001      	adds	r0, #1
 8006446:	f43f af54 	beq.w	80062f2 <_printf_float+0xb6>
 800644a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800644e:	4543      	cmp	r3, r8
 8006450:	db02      	blt.n	8006458 <_printf_float+0x21c>
 8006452:	6823      	ldr	r3, [r4, #0]
 8006454:	07d8      	lsls	r0, r3, #31
 8006456:	d50f      	bpl.n	8006478 <_printf_float+0x23c>
 8006458:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800645c:	4631      	mov	r1, r6
 800645e:	4628      	mov	r0, r5
 8006460:	47b8      	blx	r7
 8006462:	3001      	adds	r0, #1
 8006464:	f43f af45 	beq.w	80062f2 <_printf_float+0xb6>
 8006468:	f04f 0900 	mov.w	r9, #0
 800646c:	f108 38ff 	add.w	r8, r8, #4294967295
 8006470:	f104 0a1a 	add.w	sl, r4, #26
 8006474:	45c8      	cmp	r8, r9
 8006476:	dc09      	bgt.n	800648c <_printf_float+0x250>
 8006478:	6823      	ldr	r3, [r4, #0]
 800647a:	079b      	lsls	r3, r3, #30
 800647c:	f100 8103 	bmi.w	8006686 <_printf_float+0x44a>
 8006480:	68e0      	ldr	r0, [r4, #12]
 8006482:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006484:	4298      	cmp	r0, r3
 8006486:	bfb8      	it	lt
 8006488:	4618      	movlt	r0, r3
 800648a:	e734      	b.n	80062f6 <_printf_float+0xba>
 800648c:	2301      	movs	r3, #1
 800648e:	4652      	mov	r2, sl
 8006490:	4631      	mov	r1, r6
 8006492:	4628      	mov	r0, r5
 8006494:	47b8      	blx	r7
 8006496:	3001      	adds	r0, #1
 8006498:	f43f af2b 	beq.w	80062f2 <_printf_float+0xb6>
 800649c:	f109 0901 	add.w	r9, r9, #1
 80064a0:	e7e8      	b.n	8006474 <_printf_float+0x238>
 80064a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	dc39      	bgt.n	800651c <_printf_float+0x2e0>
 80064a8:	4a1b      	ldr	r2, [pc, #108]	@ (8006518 <_printf_float+0x2dc>)
 80064aa:	2301      	movs	r3, #1
 80064ac:	4631      	mov	r1, r6
 80064ae:	4628      	mov	r0, r5
 80064b0:	47b8      	blx	r7
 80064b2:	3001      	adds	r0, #1
 80064b4:	f43f af1d 	beq.w	80062f2 <_printf_float+0xb6>
 80064b8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80064bc:	ea59 0303 	orrs.w	r3, r9, r3
 80064c0:	d102      	bne.n	80064c8 <_printf_float+0x28c>
 80064c2:	6823      	ldr	r3, [r4, #0]
 80064c4:	07d9      	lsls	r1, r3, #31
 80064c6:	d5d7      	bpl.n	8006478 <_printf_float+0x23c>
 80064c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064cc:	4631      	mov	r1, r6
 80064ce:	4628      	mov	r0, r5
 80064d0:	47b8      	blx	r7
 80064d2:	3001      	adds	r0, #1
 80064d4:	f43f af0d 	beq.w	80062f2 <_printf_float+0xb6>
 80064d8:	f04f 0a00 	mov.w	sl, #0
 80064dc:	f104 0b1a 	add.w	fp, r4, #26
 80064e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064e2:	425b      	negs	r3, r3
 80064e4:	4553      	cmp	r3, sl
 80064e6:	dc01      	bgt.n	80064ec <_printf_float+0x2b0>
 80064e8:	464b      	mov	r3, r9
 80064ea:	e793      	b.n	8006414 <_printf_float+0x1d8>
 80064ec:	2301      	movs	r3, #1
 80064ee:	465a      	mov	r2, fp
 80064f0:	4631      	mov	r1, r6
 80064f2:	4628      	mov	r0, r5
 80064f4:	47b8      	blx	r7
 80064f6:	3001      	adds	r0, #1
 80064f8:	f43f aefb 	beq.w	80062f2 <_printf_float+0xb6>
 80064fc:	f10a 0a01 	add.w	sl, sl, #1
 8006500:	e7ee      	b.n	80064e0 <_printf_float+0x2a4>
 8006502:	bf00      	nop
 8006504:	7fefffff 	.word	0x7fefffff
 8006508:	0800aff4 	.word	0x0800aff4
 800650c:	0800aff8 	.word	0x0800aff8
 8006510:	0800affc 	.word	0x0800affc
 8006514:	0800b000 	.word	0x0800b000
 8006518:	0800b004 	.word	0x0800b004
 800651c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800651e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006522:	4553      	cmp	r3, sl
 8006524:	bfa8      	it	ge
 8006526:	4653      	movge	r3, sl
 8006528:	2b00      	cmp	r3, #0
 800652a:	4699      	mov	r9, r3
 800652c:	dc36      	bgt.n	800659c <_printf_float+0x360>
 800652e:	f04f 0b00 	mov.w	fp, #0
 8006532:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006536:	f104 021a 	add.w	r2, r4, #26
 800653a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800653c:	9306      	str	r3, [sp, #24]
 800653e:	eba3 0309 	sub.w	r3, r3, r9
 8006542:	455b      	cmp	r3, fp
 8006544:	dc31      	bgt.n	80065aa <_printf_float+0x36e>
 8006546:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006548:	459a      	cmp	sl, r3
 800654a:	dc3a      	bgt.n	80065c2 <_printf_float+0x386>
 800654c:	6823      	ldr	r3, [r4, #0]
 800654e:	07da      	lsls	r2, r3, #31
 8006550:	d437      	bmi.n	80065c2 <_printf_float+0x386>
 8006552:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006554:	ebaa 0903 	sub.w	r9, sl, r3
 8006558:	9b06      	ldr	r3, [sp, #24]
 800655a:	ebaa 0303 	sub.w	r3, sl, r3
 800655e:	4599      	cmp	r9, r3
 8006560:	bfa8      	it	ge
 8006562:	4699      	movge	r9, r3
 8006564:	f1b9 0f00 	cmp.w	r9, #0
 8006568:	dc33      	bgt.n	80065d2 <_printf_float+0x396>
 800656a:	f04f 0800 	mov.w	r8, #0
 800656e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006572:	f104 0b1a 	add.w	fp, r4, #26
 8006576:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006578:	ebaa 0303 	sub.w	r3, sl, r3
 800657c:	eba3 0309 	sub.w	r3, r3, r9
 8006580:	4543      	cmp	r3, r8
 8006582:	f77f af79 	ble.w	8006478 <_printf_float+0x23c>
 8006586:	2301      	movs	r3, #1
 8006588:	465a      	mov	r2, fp
 800658a:	4631      	mov	r1, r6
 800658c:	4628      	mov	r0, r5
 800658e:	47b8      	blx	r7
 8006590:	3001      	adds	r0, #1
 8006592:	f43f aeae 	beq.w	80062f2 <_printf_float+0xb6>
 8006596:	f108 0801 	add.w	r8, r8, #1
 800659a:	e7ec      	b.n	8006576 <_printf_float+0x33a>
 800659c:	4642      	mov	r2, r8
 800659e:	4631      	mov	r1, r6
 80065a0:	4628      	mov	r0, r5
 80065a2:	47b8      	blx	r7
 80065a4:	3001      	adds	r0, #1
 80065a6:	d1c2      	bne.n	800652e <_printf_float+0x2f2>
 80065a8:	e6a3      	b.n	80062f2 <_printf_float+0xb6>
 80065aa:	2301      	movs	r3, #1
 80065ac:	4631      	mov	r1, r6
 80065ae:	4628      	mov	r0, r5
 80065b0:	9206      	str	r2, [sp, #24]
 80065b2:	47b8      	blx	r7
 80065b4:	3001      	adds	r0, #1
 80065b6:	f43f ae9c 	beq.w	80062f2 <_printf_float+0xb6>
 80065ba:	9a06      	ldr	r2, [sp, #24]
 80065bc:	f10b 0b01 	add.w	fp, fp, #1
 80065c0:	e7bb      	b.n	800653a <_printf_float+0x2fe>
 80065c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065c6:	4631      	mov	r1, r6
 80065c8:	4628      	mov	r0, r5
 80065ca:	47b8      	blx	r7
 80065cc:	3001      	adds	r0, #1
 80065ce:	d1c0      	bne.n	8006552 <_printf_float+0x316>
 80065d0:	e68f      	b.n	80062f2 <_printf_float+0xb6>
 80065d2:	9a06      	ldr	r2, [sp, #24]
 80065d4:	464b      	mov	r3, r9
 80065d6:	4442      	add	r2, r8
 80065d8:	4631      	mov	r1, r6
 80065da:	4628      	mov	r0, r5
 80065dc:	47b8      	blx	r7
 80065de:	3001      	adds	r0, #1
 80065e0:	d1c3      	bne.n	800656a <_printf_float+0x32e>
 80065e2:	e686      	b.n	80062f2 <_printf_float+0xb6>
 80065e4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80065e8:	f1ba 0f01 	cmp.w	sl, #1
 80065ec:	dc01      	bgt.n	80065f2 <_printf_float+0x3b6>
 80065ee:	07db      	lsls	r3, r3, #31
 80065f0:	d536      	bpl.n	8006660 <_printf_float+0x424>
 80065f2:	2301      	movs	r3, #1
 80065f4:	4642      	mov	r2, r8
 80065f6:	4631      	mov	r1, r6
 80065f8:	4628      	mov	r0, r5
 80065fa:	47b8      	blx	r7
 80065fc:	3001      	adds	r0, #1
 80065fe:	f43f ae78 	beq.w	80062f2 <_printf_float+0xb6>
 8006602:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006606:	4631      	mov	r1, r6
 8006608:	4628      	mov	r0, r5
 800660a:	47b8      	blx	r7
 800660c:	3001      	adds	r0, #1
 800660e:	f43f ae70 	beq.w	80062f2 <_printf_float+0xb6>
 8006612:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006616:	2200      	movs	r2, #0
 8006618:	2300      	movs	r3, #0
 800661a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800661e:	f7fa fa73 	bl	8000b08 <__aeabi_dcmpeq>
 8006622:	b9c0      	cbnz	r0, 8006656 <_printf_float+0x41a>
 8006624:	4653      	mov	r3, sl
 8006626:	f108 0201 	add.w	r2, r8, #1
 800662a:	4631      	mov	r1, r6
 800662c:	4628      	mov	r0, r5
 800662e:	47b8      	blx	r7
 8006630:	3001      	adds	r0, #1
 8006632:	d10c      	bne.n	800664e <_printf_float+0x412>
 8006634:	e65d      	b.n	80062f2 <_printf_float+0xb6>
 8006636:	2301      	movs	r3, #1
 8006638:	465a      	mov	r2, fp
 800663a:	4631      	mov	r1, r6
 800663c:	4628      	mov	r0, r5
 800663e:	47b8      	blx	r7
 8006640:	3001      	adds	r0, #1
 8006642:	f43f ae56 	beq.w	80062f2 <_printf_float+0xb6>
 8006646:	f108 0801 	add.w	r8, r8, #1
 800664a:	45d0      	cmp	r8, sl
 800664c:	dbf3      	blt.n	8006636 <_printf_float+0x3fa>
 800664e:	464b      	mov	r3, r9
 8006650:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006654:	e6df      	b.n	8006416 <_printf_float+0x1da>
 8006656:	f04f 0800 	mov.w	r8, #0
 800665a:	f104 0b1a 	add.w	fp, r4, #26
 800665e:	e7f4      	b.n	800664a <_printf_float+0x40e>
 8006660:	2301      	movs	r3, #1
 8006662:	4642      	mov	r2, r8
 8006664:	e7e1      	b.n	800662a <_printf_float+0x3ee>
 8006666:	2301      	movs	r3, #1
 8006668:	464a      	mov	r2, r9
 800666a:	4631      	mov	r1, r6
 800666c:	4628      	mov	r0, r5
 800666e:	47b8      	blx	r7
 8006670:	3001      	adds	r0, #1
 8006672:	f43f ae3e 	beq.w	80062f2 <_printf_float+0xb6>
 8006676:	f108 0801 	add.w	r8, r8, #1
 800667a:	68e3      	ldr	r3, [r4, #12]
 800667c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800667e:	1a5b      	subs	r3, r3, r1
 8006680:	4543      	cmp	r3, r8
 8006682:	dcf0      	bgt.n	8006666 <_printf_float+0x42a>
 8006684:	e6fc      	b.n	8006480 <_printf_float+0x244>
 8006686:	f04f 0800 	mov.w	r8, #0
 800668a:	f104 0919 	add.w	r9, r4, #25
 800668e:	e7f4      	b.n	800667a <_printf_float+0x43e>

08006690 <_printf_common>:
 8006690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006694:	4616      	mov	r6, r2
 8006696:	4698      	mov	r8, r3
 8006698:	688a      	ldr	r2, [r1, #8]
 800669a:	690b      	ldr	r3, [r1, #16]
 800669c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80066a0:	4293      	cmp	r3, r2
 80066a2:	bfb8      	it	lt
 80066a4:	4613      	movlt	r3, r2
 80066a6:	6033      	str	r3, [r6, #0]
 80066a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80066ac:	4607      	mov	r7, r0
 80066ae:	460c      	mov	r4, r1
 80066b0:	b10a      	cbz	r2, 80066b6 <_printf_common+0x26>
 80066b2:	3301      	adds	r3, #1
 80066b4:	6033      	str	r3, [r6, #0]
 80066b6:	6823      	ldr	r3, [r4, #0]
 80066b8:	0699      	lsls	r1, r3, #26
 80066ba:	bf42      	ittt	mi
 80066bc:	6833      	ldrmi	r3, [r6, #0]
 80066be:	3302      	addmi	r3, #2
 80066c0:	6033      	strmi	r3, [r6, #0]
 80066c2:	6825      	ldr	r5, [r4, #0]
 80066c4:	f015 0506 	ands.w	r5, r5, #6
 80066c8:	d106      	bne.n	80066d8 <_printf_common+0x48>
 80066ca:	f104 0a19 	add.w	sl, r4, #25
 80066ce:	68e3      	ldr	r3, [r4, #12]
 80066d0:	6832      	ldr	r2, [r6, #0]
 80066d2:	1a9b      	subs	r3, r3, r2
 80066d4:	42ab      	cmp	r3, r5
 80066d6:	dc26      	bgt.n	8006726 <_printf_common+0x96>
 80066d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80066dc:	6822      	ldr	r2, [r4, #0]
 80066de:	3b00      	subs	r3, #0
 80066e0:	bf18      	it	ne
 80066e2:	2301      	movne	r3, #1
 80066e4:	0692      	lsls	r2, r2, #26
 80066e6:	d42b      	bmi.n	8006740 <_printf_common+0xb0>
 80066e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80066ec:	4641      	mov	r1, r8
 80066ee:	4638      	mov	r0, r7
 80066f0:	47c8      	blx	r9
 80066f2:	3001      	adds	r0, #1
 80066f4:	d01e      	beq.n	8006734 <_printf_common+0xa4>
 80066f6:	6823      	ldr	r3, [r4, #0]
 80066f8:	6922      	ldr	r2, [r4, #16]
 80066fa:	f003 0306 	and.w	r3, r3, #6
 80066fe:	2b04      	cmp	r3, #4
 8006700:	bf02      	ittt	eq
 8006702:	68e5      	ldreq	r5, [r4, #12]
 8006704:	6833      	ldreq	r3, [r6, #0]
 8006706:	1aed      	subeq	r5, r5, r3
 8006708:	68a3      	ldr	r3, [r4, #8]
 800670a:	bf0c      	ite	eq
 800670c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006710:	2500      	movne	r5, #0
 8006712:	4293      	cmp	r3, r2
 8006714:	bfc4      	itt	gt
 8006716:	1a9b      	subgt	r3, r3, r2
 8006718:	18ed      	addgt	r5, r5, r3
 800671a:	2600      	movs	r6, #0
 800671c:	341a      	adds	r4, #26
 800671e:	42b5      	cmp	r5, r6
 8006720:	d11a      	bne.n	8006758 <_printf_common+0xc8>
 8006722:	2000      	movs	r0, #0
 8006724:	e008      	b.n	8006738 <_printf_common+0xa8>
 8006726:	2301      	movs	r3, #1
 8006728:	4652      	mov	r2, sl
 800672a:	4641      	mov	r1, r8
 800672c:	4638      	mov	r0, r7
 800672e:	47c8      	blx	r9
 8006730:	3001      	adds	r0, #1
 8006732:	d103      	bne.n	800673c <_printf_common+0xac>
 8006734:	f04f 30ff 	mov.w	r0, #4294967295
 8006738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800673c:	3501      	adds	r5, #1
 800673e:	e7c6      	b.n	80066ce <_printf_common+0x3e>
 8006740:	18e1      	adds	r1, r4, r3
 8006742:	1c5a      	adds	r2, r3, #1
 8006744:	2030      	movs	r0, #48	@ 0x30
 8006746:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800674a:	4422      	add	r2, r4
 800674c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006750:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006754:	3302      	adds	r3, #2
 8006756:	e7c7      	b.n	80066e8 <_printf_common+0x58>
 8006758:	2301      	movs	r3, #1
 800675a:	4622      	mov	r2, r4
 800675c:	4641      	mov	r1, r8
 800675e:	4638      	mov	r0, r7
 8006760:	47c8      	blx	r9
 8006762:	3001      	adds	r0, #1
 8006764:	d0e6      	beq.n	8006734 <_printf_common+0xa4>
 8006766:	3601      	adds	r6, #1
 8006768:	e7d9      	b.n	800671e <_printf_common+0x8e>
	...

0800676c <_printf_i>:
 800676c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006770:	7e0f      	ldrb	r7, [r1, #24]
 8006772:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006774:	2f78      	cmp	r7, #120	@ 0x78
 8006776:	4691      	mov	r9, r2
 8006778:	4680      	mov	r8, r0
 800677a:	460c      	mov	r4, r1
 800677c:	469a      	mov	sl, r3
 800677e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006782:	d807      	bhi.n	8006794 <_printf_i+0x28>
 8006784:	2f62      	cmp	r7, #98	@ 0x62
 8006786:	d80a      	bhi.n	800679e <_printf_i+0x32>
 8006788:	2f00      	cmp	r7, #0
 800678a:	f000 80d2 	beq.w	8006932 <_printf_i+0x1c6>
 800678e:	2f58      	cmp	r7, #88	@ 0x58
 8006790:	f000 80b9 	beq.w	8006906 <_printf_i+0x19a>
 8006794:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006798:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800679c:	e03a      	b.n	8006814 <_printf_i+0xa8>
 800679e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80067a2:	2b15      	cmp	r3, #21
 80067a4:	d8f6      	bhi.n	8006794 <_printf_i+0x28>
 80067a6:	a101      	add	r1, pc, #4	@ (adr r1, 80067ac <_printf_i+0x40>)
 80067a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067ac:	08006805 	.word	0x08006805
 80067b0:	08006819 	.word	0x08006819
 80067b4:	08006795 	.word	0x08006795
 80067b8:	08006795 	.word	0x08006795
 80067bc:	08006795 	.word	0x08006795
 80067c0:	08006795 	.word	0x08006795
 80067c4:	08006819 	.word	0x08006819
 80067c8:	08006795 	.word	0x08006795
 80067cc:	08006795 	.word	0x08006795
 80067d0:	08006795 	.word	0x08006795
 80067d4:	08006795 	.word	0x08006795
 80067d8:	08006919 	.word	0x08006919
 80067dc:	08006843 	.word	0x08006843
 80067e0:	080068d3 	.word	0x080068d3
 80067e4:	08006795 	.word	0x08006795
 80067e8:	08006795 	.word	0x08006795
 80067ec:	0800693b 	.word	0x0800693b
 80067f0:	08006795 	.word	0x08006795
 80067f4:	08006843 	.word	0x08006843
 80067f8:	08006795 	.word	0x08006795
 80067fc:	08006795 	.word	0x08006795
 8006800:	080068db 	.word	0x080068db
 8006804:	6833      	ldr	r3, [r6, #0]
 8006806:	1d1a      	adds	r2, r3, #4
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	6032      	str	r2, [r6, #0]
 800680c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006810:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006814:	2301      	movs	r3, #1
 8006816:	e09d      	b.n	8006954 <_printf_i+0x1e8>
 8006818:	6833      	ldr	r3, [r6, #0]
 800681a:	6820      	ldr	r0, [r4, #0]
 800681c:	1d19      	adds	r1, r3, #4
 800681e:	6031      	str	r1, [r6, #0]
 8006820:	0606      	lsls	r6, r0, #24
 8006822:	d501      	bpl.n	8006828 <_printf_i+0xbc>
 8006824:	681d      	ldr	r5, [r3, #0]
 8006826:	e003      	b.n	8006830 <_printf_i+0xc4>
 8006828:	0645      	lsls	r5, r0, #25
 800682a:	d5fb      	bpl.n	8006824 <_printf_i+0xb8>
 800682c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006830:	2d00      	cmp	r5, #0
 8006832:	da03      	bge.n	800683c <_printf_i+0xd0>
 8006834:	232d      	movs	r3, #45	@ 0x2d
 8006836:	426d      	negs	r5, r5
 8006838:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800683c:	4859      	ldr	r0, [pc, #356]	@ (80069a4 <_printf_i+0x238>)
 800683e:	230a      	movs	r3, #10
 8006840:	e011      	b.n	8006866 <_printf_i+0xfa>
 8006842:	6821      	ldr	r1, [r4, #0]
 8006844:	6833      	ldr	r3, [r6, #0]
 8006846:	0608      	lsls	r0, r1, #24
 8006848:	f853 5b04 	ldr.w	r5, [r3], #4
 800684c:	d402      	bmi.n	8006854 <_printf_i+0xe8>
 800684e:	0649      	lsls	r1, r1, #25
 8006850:	bf48      	it	mi
 8006852:	b2ad      	uxthmi	r5, r5
 8006854:	2f6f      	cmp	r7, #111	@ 0x6f
 8006856:	4853      	ldr	r0, [pc, #332]	@ (80069a4 <_printf_i+0x238>)
 8006858:	6033      	str	r3, [r6, #0]
 800685a:	bf14      	ite	ne
 800685c:	230a      	movne	r3, #10
 800685e:	2308      	moveq	r3, #8
 8006860:	2100      	movs	r1, #0
 8006862:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006866:	6866      	ldr	r6, [r4, #4]
 8006868:	60a6      	str	r6, [r4, #8]
 800686a:	2e00      	cmp	r6, #0
 800686c:	bfa2      	ittt	ge
 800686e:	6821      	ldrge	r1, [r4, #0]
 8006870:	f021 0104 	bicge.w	r1, r1, #4
 8006874:	6021      	strge	r1, [r4, #0]
 8006876:	b90d      	cbnz	r5, 800687c <_printf_i+0x110>
 8006878:	2e00      	cmp	r6, #0
 800687a:	d04b      	beq.n	8006914 <_printf_i+0x1a8>
 800687c:	4616      	mov	r6, r2
 800687e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006882:	fb03 5711 	mls	r7, r3, r1, r5
 8006886:	5dc7      	ldrb	r7, [r0, r7]
 8006888:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800688c:	462f      	mov	r7, r5
 800688e:	42bb      	cmp	r3, r7
 8006890:	460d      	mov	r5, r1
 8006892:	d9f4      	bls.n	800687e <_printf_i+0x112>
 8006894:	2b08      	cmp	r3, #8
 8006896:	d10b      	bne.n	80068b0 <_printf_i+0x144>
 8006898:	6823      	ldr	r3, [r4, #0]
 800689a:	07df      	lsls	r7, r3, #31
 800689c:	d508      	bpl.n	80068b0 <_printf_i+0x144>
 800689e:	6923      	ldr	r3, [r4, #16]
 80068a0:	6861      	ldr	r1, [r4, #4]
 80068a2:	4299      	cmp	r1, r3
 80068a4:	bfde      	ittt	le
 80068a6:	2330      	movle	r3, #48	@ 0x30
 80068a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80068ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80068b0:	1b92      	subs	r2, r2, r6
 80068b2:	6122      	str	r2, [r4, #16]
 80068b4:	f8cd a000 	str.w	sl, [sp]
 80068b8:	464b      	mov	r3, r9
 80068ba:	aa03      	add	r2, sp, #12
 80068bc:	4621      	mov	r1, r4
 80068be:	4640      	mov	r0, r8
 80068c0:	f7ff fee6 	bl	8006690 <_printf_common>
 80068c4:	3001      	adds	r0, #1
 80068c6:	d14a      	bne.n	800695e <_printf_i+0x1f2>
 80068c8:	f04f 30ff 	mov.w	r0, #4294967295
 80068cc:	b004      	add	sp, #16
 80068ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068d2:	6823      	ldr	r3, [r4, #0]
 80068d4:	f043 0320 	orr.w	r3, r3, #32
 80068d8:	6023      	str	r3, [r4, #0]
 80068da:	4833      	ldr	r0, [pc, #204]	@ (80069a8 <_printf_i+0x23c>)
 80068dc:	2778      	movs	r7, #120	@ 0x78
 80068de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80068e2:	6823      	ldr	r3, [r4, #0]
 80068e4:	6831      	ldr	r1, [r6, #0]
 80068e6:	061f      	lsls	r7, r3, #24
 80068e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80068ec:	d402      	bmi.n	80068f4 <_printf_i+0x188>
 80068ee:	065f      	lsls	r7, r3, #25
 80068f0:	bf48      	it	mi
 80068f2:	b2ad      	uxthmi	r5, r5
 80068f4:	6031      	str	r1, [r6, #0]
 80068f6:	07d9      	lsls	r1, r3, #31
 80068f8:	bf44      	itt	mi
 80068fa:	f043 0320 	orrmi.w	r3, r3, #32
 80068fe:	6023      	strmi	r3, [r4, #0]
 8006900:	b11d      	cbz	r5, 800690a <_printf_i+0x19e>
 8006902:	2310      	movs	r3, #16
 8006904:	e7ac      	b.n	8006860 <_printf_i+0xf4>
 8006906:	4827      	ldr	r0, [pc, #156]	@ (80069a4 <_printf_i+0x238>)
 8006908:	e7e9      	b.n	80068de <_printf_i+0x172>
 800690a:	6823      	ldr	r3, [r4, #0]
 800690c:	f023 0320 	bic.w	r3, r3, #32
 8006910:	6023      	str	r3, [r4, #0]
 8006912:	e7f6      	b.n	8006902 <_printf_i+0x196>
 8006914:	4616      	mov	r6, r2
 8006916:	e7bd      	b.n	8006894 <_printf_i+0x128>
 8006918:	6833      	ldr	r3, [r6, #0]
 800691a:	6825      	ldr	r5, [r4, #0]
 800691c:	6961      	ldr	r1, [r4, #20]
 800691e:	1d18      	adds	r0, r3, #4
 8006920:	6030      	str	r0, [r6, #0]
 8006922:	062e      	lsls	r6, r5, #24
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	d501      	bpl.n	800692c <_printf_i+0x1c0>
 8006928:	6019      	str	r1, [r3, #0]
 800692a:	e002      	b.n	8006932 <_printf_i+0x1c6>
 800692c:	0668      	lsls	r0, r5, #25
 800692e:	d5fb      	bpl.n	8006928 <_printf_i+0x1bc>
 8006930:	8019      	strh	r1, [r3, #0]
 8006932:	2300      	movs	r3, #0
 8006934:	6123      	str	r3, [r4, #16]
 8006936:	4616      	mov	r6, r2
 8006938:	e7bc      	b.n	80068b4 <_printf_i+0x148>
 800693a:	6833      	ldr	r3, [r6, #0]
 800693c:	1d1a      	adds	r2, r3, #4
 800693e:	6032      	str	r2, [r6, #0]
 8006940:	681e      	ldr	r6, [r3, #0]
 8006942:	6862      	ldr	r2, [r4, #4]
 8006944:	2100      	movs	r1, #0
 8006946:	4630      	mov	r0, r6
 8006948:	f7f9 fc62 	bl	8000210 <memchr>
 800694c:	b108      	cbz	r0, 8006952 <_printf_i+0x1e6>
 800694e:	1b80      	subs	r0, r0, r6
 8006950:	6060      	str	r0, [r4, #4]
 8006952:	6863      	ldr	r3, [r4, #4]
 8006954:	6123      	str	r3, [r4, #16]
 8006956:	2300      	movs	r3, #0
 8006958:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800695c:	e7aa      	b.n	80068b4 <_printf_i+0x148>
 800695e:	6923      	ldr	r3, [r4, #16]
 8006960:	4632      	mov	r2, r6
 8006962:	4649      	mov	r1, r9
 8006964:	4640      	mov	r0, r8
 8006966:	47d0      	blx	sl
 8006968:	3001      	adds	r0, #1
 800696a:	d0ad      	beq.n	80068c8 <_printf_i+0x15c>
 800696c:	6823      	ldr	r3, [r4, #0]
 800696e:	079b      	lsls	r3, r3, #30
 8006970:	d413      	bmi.n	800699a <_printf_i+0x22e>
 8006972:	68e0      	ldr	r0, [r4, #12]
 8006974:	9b03      	ldr	r3, [sp, #12]
 8006976:	4298      	cmp	r0, r3
 8006978:	bfb8      	it	lt
 800697a:	4618      	movlt	r0, r3
 800697c:	e7a6      	b.n	80068cc <_printf_i+0x160>
 800697e:	2301      	movs	r3, #1
 8006980:	4632      	mov	r2, r6
 8006982:	4649      	mov	r1, r9
 8006984:	4640      	mov	r0, r8
 8006986:	47d0      	blx	sl
 8006988:	3001      	adds	r0, #1
 800698a:	d09d      	beq.n	80068c8 <_printf_i+0x15c>
 800698c:	3501      	adds	r5, #1
 800698e:	68e3      	ldr	r3, [r4, #12]
 8006990:	9903      	ldr	r1, [sp, #12]
 8006992:	1a5b      	subs	r3, r3, r1
 8006994:	42ab      	cmp	r3, r5
 8006996:	dcf2      	bgt.n	800697e <_printf_i+0x212>
 8006998:	e7eb      	b.n	8006972 <_printf_i+0x206>
 800699a:	2500      	movs	r5, #0
 800699c:	f104 0619 	add.w	r6, r4, #25
 80069a0:	e7f5      	b.n	800698e <_printf_i+0x222>
 80069a2:	bf00      	nop
 80069a4:	0800b006 	.word	0x0800b006
 80069a8:	0800b017 	.word	0x0800b017

080069ac <_scanf_float>:
 80069ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069b0:	b087      	sub	sp, #28
 80069b2:	4617      	mov	r7, r2
 80069b4:	9303      	str	r3, [sp, #12]
 80069b6:	688b      	ldr	r3, [r1, #8]
 80069b8:	1e5a      	subs	r2, r3, #1
 80069ba:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80069be:	bf81      	itttt	hi
 80069c0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80069c4:	eb03 0b05 	addhi.w	fp, r3, r5
 80069c8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80069cc:	608b      	strhi	r3, [r1, #8]
 80069ce:	680b      	ldr	r3, [r1, #0]
 80069d0:	460a      	mov	r2, r1
 80069d2:	f04f 0500 	mov.w	r5, #0
 80069d6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80069da:	f842 3b1c 	str.w	r3, [r2], #28
 80069de:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80069e2:	4680      	mov	r8, r0
 80069e4:	460c      	mov	r4, r1
 80069e6:	bf98      	it	ls
 80069e8:	f04f 0b00 	movls.w	fp, #0
 80069ec:	9201      	str	r2, [sp, #4]
 80069ee:	4616      	mov	r6, r2
 80069f0:	46aa      	mov	sl, r5
 80069f2:	46a9      	mov	r9, r5
 80069f4:	9502      	str	r5, [sp, #8]
 80069f6:	68a2      	ldr	r2, [r4, #8]
 80069f8:	b152      	cbz	r2, 8006a10 <_scanf_float+0x64>
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	2b4e      	cmp	r3, #78	@ 0x4e
 8006a00:	d864      	bhi.n	8006acc <_scanf_float+0x120>
 8006a02:	2b40      	cmp	r3, #64	@ 0x40
 8006a04:	d83c      	bhi.n	8006a80 <_scanf_float+0xd4>
 8006a06:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006a0a:	b2c8      	uxtb	r0, r1
 8006a0c:	280e      	cmp	r0, #14
 8006a0e:	d93a      	bls.n	8006a86 <_scanf_float+0xda>
 8006a10:	f1b9 0f00 	cmp.w	r9, #0
 8006a14:	d003      	beq.n	8006a1e <_scanf_float+0x72>
 8006a16:	6823      	ldr	r3, [r4, #0]
 8006a18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a1c:	6023      	str	r3, [r4, #0]
 8006a1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a22:	f1ba 0f01 	cmp.w	sl, #1
 8006a26:	f200 8117 	bhi.w	8006c58 <_scanf_float+0x2ac>
 8006a2a:	9b01      	ldr	r3, [sp, #4]
 8006a2c:	429e      	cmp	r6, r3
 8006a2e:	f200 8108 	bhi.w	8006c42 <_scanf_float+0x296>
 8006a32:	2001      	movs	r0, #1
 8006a34:	b007      	add	sp, #28
 8006a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a3a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006a3e:	2a0d      	cmp	r2, #13
 8006a40:	d8e6      	bhi.n	8006a10 <_scanf_float+0x64>
 8006a42:	a101      	add	r1, pc, #4	@ (adr r1, 8006a48 <_scanf_float+0x9c>)
 8006a44:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006a48:	08006b8f 	.word	0x08006b8f
 8006a4c:	08006a11 	.word	0x08006a11
 8006a50:	08006a11 	.word	0x08006a11
 8006a54:	08006a11 	.word	0x08006a11
 8006a58:	08006bef 	.word	0x08006bef
 8006a5c:	08006bc7 	.word	0x08006bc7
 8006a60:	08006a11 	.word	0x08006a11
 8006a64:	08006a11 	.word	0x08006a11
 8006a68:	08006b9d 	.word	0x08006b9d
 8006a6c:	08006a11 	.word	0x08006a11
 8006a70:	08006a11 	.word	0x08006a11
 8006a74:	08006a11 	.word	0x08006a11
 8006a78:	08006a11 	.word	0x08006a11
 8006a7c:	08006b55 	.word	0x08006b55
 8006a80:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006a84:	e7db      	b.n	8006a3e <_scanf_float+0x92>
 8006a86:	290e      	cmp	r1, #14
 8006a88:	d8c2      	bhi.n	8006a10 <_scanf_float+0x64>
 8006a8a:	a001      	add	r0, pc, #4	@ (adr r0, 8006a90 <_scanf_float+0xe4>)
 8006a8c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006a90:	08006b45 	.word	0x08006b45
 8006a94:	08006a11 	.word	0x08006a11
 8006a98:	08006b45 	.word	0x08006b45
 8006a9c:	08006bdb 	.word	0x08006bdb
 8006aa0:	08006a11 	.word	0x08006a11
 8006aa4:	08006aed 	.word	0x08006aed
 8006aa8:	08006b2b 	.word	0x08006b2b
 8006aac:	08006b2b 	.word	0x08006b2b
 8006ab0:	08006b2b 	.word	0x08006b2b
 8006ab4:	08006b2b 	.word	0x08006b2b
 8006ab8:	08006b2b 	.word	0x08006b2b
 8006abc:	08006b2b 	.word	0x08006b2b
 8006ac0:	08006b2b 	.word	0x08006b2b
 8006ac4:	08006b2b 	.word	0x08006b2b
 8006ac8:	08006b2b 	.word	0x08006b2b
 8006acc:	2b6e      	cmp	r3, #110	@ 0x6e
 8006ace:	d809      	bhi.n	8006ae4 <_scanf_float+0x138>
 8006ad0:	2b60      	cmp	r3, #96	@ 0x60
 8006ad2:	d8b2      	bhi.n	8006a3a <_scanf_float+0x8e>
 8006ad4:	2b54      	cmp	r3, #84	@ 0x54
 8006ad6:	d07b      	beq.n	8006bd0 <_scanf_float+0x224>
 8006ad8:	2b59      	cmp	r3, #89	@ 0x59
 8006ada:	d199      	bne.n	8006a10 <_scanf_float+0x64>
 8006adc:	2d07      	cmp	r5, #7
 8006ade:	d197      	bne.n	8006a10 <_scanf_float+0x64>
 8006ae0:	2508      	movs	r5, #8
 8006ae2:	e02c      	b.n	8006b3e <_scanf_float+0x192>
 8006ae4:	2b74      	cmp	r3, #116	@ 0x74
 8006ae6:	d073      	beq.n	8006bd0 <_scanf_float+0x224>
 8006ae8:	2b79      	cmp	r3, #121	@ 0x79
 8006aea:	e7f6      	b.n	8006ada <_scanf_float+0x12e>
 8006aec:	6821      	ldr	r1, [r4, #0]
 8006aee:	05c8      	lsls	r0, r1, #23
 8006af0:	d51b      	bpl.n	8006b2a <_scanf_float+0x17e>
 8006af2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006af6:	6021      	str	r1, [r4, #0]
 8006af8:	f109 0901 	add.w	r9, r9, #1
 8006afc:	f1bb 0f00 	cmp.w	fp, #0
 8006b00:	d003      	beq.n	8006b0a <_scanf_float+0x15e>
 8006b02:	3201      	adds	r2, #1
 8006b04:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006b08:	60a2      	str	r2, [r4, #8]
 8006b0a:	68a3      	ldr	r3, [r4, #8]
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	60a3      	str	r3, [r4, #8]
 8006b10:	6923      	ldr	r3, [r4, #16]
 8006b12:	3301      	adds	r3, #1
 8006b14:	6123      	str	r3, [r4, #16]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	3b01      	subs	r3, #1
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	607b      	str	r3, [r7, #4]
 8006b1e:	f340 8087 	ble.w	8006c30 <_scanf_float+0x284>
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	3301      	adds	r3, #1
 8006b26:	603b      	str	r3, [r7, #0]
 8006b28:	e765      	b.n	80069f6 <_scanf_float+0x4a>
 8006b2a:	eb1a 0105 	adds.w	r1, sl, r5
 8006b2e:	f47f af6f 	bne.w	8006a10 <_scanf_float+0x64>
 8006b32:	6822      	ldr	r2, [r4, #0]
 8006b34:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006b38:	6022      	str	r2, [r4, #0]
 8006b3a:	460d      	mov	r5, r1
 8006b3c:	468a      	mov	sl, r1
 8006b3e:	f806 3b01 	strb.w	r3, [r6], #1
 8006b42:	e7e2      	b.n	8006b0a <_scanf_float+0x15e>
 8006b44:	6822      	ldr	r2, [r4, #0]
 8006b46:	0610      	lsls	r0, r2, #24
 8006b48:	f57f af62 	bpl.w	8006a10 <_scanf_float+0x64>
 8006b4c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006b50:	6022      	str	r2, [r4, #0]
 8006b52:	e7f4      	b.n	8006b3e <_scanf_float+0x192>
 8006b54:	f1ba 0f00 	cmp.w	sl, #0
 8006b58:	d10e      	bne.n	8006b78 <_scanf_float+0x1cc>
 8006b5a:	f1b9 0f00 	cmp.w	r9, #0
 8006b5e:	d10e      	bne.n	8006b7e <_scanf_float+0x1d2>
 8006b60:	6822      	ldr	r2, [r4, #0]
 8006b62:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006b66:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006b6a:	d108      	bne.n	8006b7e <_scanf_float+0x1d2>
 8006b6c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006b70:	6022      	str	r2, [r4, #0]
 8006b72:	f04f 0a01 	mov.w	sl, #1
 8006b76:	e7e2      	b.n	8006b3e <_scanf_float+0x192>
 8006b78:	f1ba 0f02 	cmp.w	sl, #2
 8006b7c:	d055      	beq.n	8006c2a <_scanf_float+0x27e>
 8006b7e:	2d01      	cmp	r5, #1
 8006b80:	d002      	beq.n	8006b88 <_scanf_float+0x1dc>
 8006b82:	2d04      	cmp	r5, #4
 8006b84:	f47f af44 	bne.w	8006a10 <_scanf_float+0x64>
 8006b88:	3501      	adds	r5, #1
 8006b8a:	b2ed      	uxtb	r5, r5
 8006b8c:	e7d7      	b.n	8006b3e <_scanf_float+0x192>
 8006b8e:	f1ba 0f01 	cmp.w	sl, #1
 8006b92:	f47f af3d 	bne.w	8006a10 <_scanf_float+0x64>
 8006b96:	f04f 0a02 	mov.w	sl, #2
 8006b9a:	e7d0      	b.n	8006b3e <_scanf_float+0x192>
 8006b9c:	b97d      	cbnz	r5, 8006bbe <_scanf_float+0x212>
 8006b9e:	f1b9 0f00 	cmp.w	r9, #0
 8006ba2:	f47f af38 	bne.w	8006a16 <_scanf_float+0x6a>
 8006ba6:	6822      	ldr	r2, [r4, #0]
 8006ba8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006bac:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006bb0:	f040 8108 	bne.w	8006dc4 <_scanf_float+0x418>
 8006bb4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006bb8:	6022      	str	r2, [r4, #0]
 8006bba:	2501      	movs	r5, #1
 8006bbc:	e7bf      	b.n	8006b3e <_scanf_float+0x192>
 8006bbe:	2d03      	cmp	r5, #3
 8006bc0:	d0e2      	beq.n	8006b88 <_scanf_float+0x1dc>
 8006bc2:	2d05      	cmp	r5, #5
 8006bc4:	e7de      	b.n	8006b84 <_scanf_float+0x1d8>
 8006bc6:	2d02      	cmp	r5, #2
 8006bc8:	f47f af22 	bne.w	8006a10 <_scanf_float+0x64>
 8006bcc:	2503      	movs	r5, #3
 8006bce:	e7b6      	b.n	8006b3e <_scanf_float+0x192>
 8006bd0:	2d06      	cmp	r5, #6
 8006bd2:	f47f af1d 	bne.w	8006a10 <_scanf_float+0x64>
 8006bd6:	2507      	movs	r5, #7
 8006bd8:	e7b1      	b.n	8006b3e <_scanf_float+0x192>
 8006bda:	6822      	ldr	r2, [r4, #0]
 8006bdc:	0591      	lsls	r1, r2, #22
 8006bde:	f57f af17 	bpl.w	8006a10 <_scanf_float+0x64>
 8006be2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006be6:	6022      	str	r2, [r4, #0]
 8006be8:	f8cd 9008 	str.w	r9, [sp, #8]
 8006bec:	e7a7      	b.n	8006b3e <_scanf_float+0x192>
 8006bee:	6822      	ldr	r2, [r4, #0]
 8006bf0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006bf4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006bf8:	d006      	beq.n	8006c08 <_scanf_float+0x25c>
 8006bfa:	0550      	lsls	r0, r2, #21
 8006bfc:	f57f af08 	bpl.w	8006a10 <_scanf_float+0x64>
 8006c00:	f1b9 0f00 	cmp.w	r9, #0
 8006c04:	f000 80de 	beq.w	8006dc4 <_scanf_float+0x418>
 8006c08:	0591      	lsls	r1, r2, #22
 8006c0a:	bf58      	it	pl
 8006c0c:	9902      	ldrpl	r1, [sp, #8]
 8006c0e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006c12:	bf58      	it	pl
 8006c14:	eba9 0101 	subpl.w	r1, r9, r1
 8006c18:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006c1c:	bf58      	it	pl
 8006c1e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006c22:	6022      	str	r2, [r4, #0]
 8006c24:	f04f 0900 	mov.w	r9, #0
 8006c28:	e789      	b.n	8006b3e <_scanf_float+0x192>
 8006c2a:	f04f 0a03 	mov.w	sl, #3
 8006c2e:	e786      	b.n	8006b3e <_scanf_float+0x192>
 8006c30:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006c34:	4639      	mov	r1, r7
 8006c36:	4640      	mov	r0, r8
 8006c38:	4798      	blx	r3
 8006c3a:	2800      	cmp	r0, #0
 8006c3c:	f43f aedb 	beq.w	80069f6 <_scanf_float+0x4a>
 8006c40:	e6e6      	b.n	8006a10 <_scanf_float+0x64>
 8006c42:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006c46:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006c4a:	463a      	mov	r2, r7
 8006c4c:	4640      	mov	r0, r8
 8006c4e:	4798      	blx	r3
 8006c50:	6923      	ldr	r3, [r4, #16]
 8006c52:	3b01      	subs	r3, #1
 8006c54:	6123      	str	r3, [r4, #16]
 8006c56:	e6e8      	b.n	8006a2a <_scanf_float+0x7e>
 8006c58:	1e6b      	subs	r3, r5, #1
 8006c5a:	2b06      	cmp	r3, #6
 8006c5c:	d824      	bhi.n	8006ca8 <_scanf_float+0x2fc>
 8006c5e:	2d02      	cmp	r5, #2
 8006c60:	d836      	bhi.n	8006cd0 <_scanf_float+0x324>
 8006c62:	9b01      	ldr	r3, [sp, #4]
 8006c64:	429e      	cmp	r6, r3
 8006c66:	f67f aee4 	bls.w	8006a32 <_scanf_float+0x86>
 8006c6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006c6e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006c72:	463a      	mov	r2, r7
 8006c74:	4640      	mov	r0, r8
 8006c76:	4798      	blx	r3
 8006c78:	6923      	ldr	r3, [r4, #16]
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	6123      	str	r3, [r4, #16]
 8006c7e:	e7f0      	b.n	8006c62 <_scanf_float+0x2b6>
 8006c80:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006c84:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006c88:	463a      	mov	r2, r7
 8006c8a:	4640      	mov	r0, r8
 8006c8c:	4798      	blx	r3
 8006c8e:	6923      	ldr	r3, [r4, #16]
 8006c90:	3b01      	subs	r3, #1
 8006c92:	6123      	str	r3, [r4, #16]
 8006c94:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c98:	fa5f fa8a 	uxtb.w	sl, sl
 8006c9c:	f1ba 0f02 	cmp.w	sl, #2
 8006ca0:	d1ee      	bne.n	8006c80 <_scanf_float+0x2d4>
 8006ca2:	3d03      	subs	r5, #3
 8006ca4:	b2ed      	uxtb	r5, r5
 8006ca6:	1b76      	subs	r6, r6, r5
 8006ca8:	6823      	ldr	r3, [r4, #0]
 8006caa:	05da      	lsls	r2, r3, #23
 8006cac:	d530      	bpl.n	8006d10 <_scanf_float+0x364>
 8006cae:	055b      	lsls	r3, r3, #21
 8006cb0:	d511      	bpl.n	8006cd6 <_scanf_float+0x32a>
 8006cb2:	9b01      	ldr	r3, [sp, #4]
 8006cb4:	429e      	cmp	r6, r3
 8006cb6:	f67f aebc 	bls.w	8006a32 <_scanf_float+0x86>
 8006cba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006cbe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006cc2:	463a      	mov	r2, r7
 8006cc4:	4640      	mov	r0, r8
 8006cc6:	4798      	blx	r3
 8006cc8:	6923      	ldr	r3, [r4, #16]
 8006cca:	3b01      	subs	r3, #1
 8006ccc:	6123      	str	r3, [r4, #16]
 8006cce:	e7f0      	b.n	8006cb2 <_scanf_float+0x306>
 8006cd0:	46aa      	mov	sl, r5
 8006cd2:	46b3      	mov	fp, r6
 8006cd4:	e7de      	b.n	8006c94 <_scanf_float+0x2e8>
 8006cd6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006cda:	6923      	ldr	r3, [r4, #16]
 8006cdc:	2965      	cmp	r1, #101	@ 0x65
 8006cde:	f103 33ff 	add.w	r3, r3, #4294967295
 8006ce2:	f106 35ff 	add.w	r5, r6, #4294967295
 8006ce6:	6123      	str	r3, [r4, #16]
 8006ce8:	d00c      	beq.n	8006d04 <_scanf_float+0x358>
 8006cea:	2945      	cmp	r1, #69	@ 0x45
 8006cec:	d00a      	beq.n	8006d04 <_scanf_float+0x358>
 8006cee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006cf2:	463a      	mov	r2, r7
 8006cf4:	4640      	mov	r0, r8
 8006cf6:	4798      	blx	r3
 8006cf8:	6923      	ldr	r3, [r4, #16]
 8006cfa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	1eb5      	subs	r5, r6, #2
 8006d02:	6123      	str	r3, [r4, #16]
 8006d04:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006d08:	463a      	mov	r2, r7
 8006d0a:	4640      	mov	r0, r8
 8006d0c:	4798      	blx	r3
 8006d0e:	462e      	mov	r6, r5
 8006d10:	6822      	ldr	r2, [r4, #0]
 8006d12:	f012 0210 	ands.w	r2, r2, #16
 8006d16:	d001      	beq.n	8006d1c <_scanf_float+0x370>
 8006d18:	2000      	movs	r0, #0
 8006d1a:	e68b      	b.n	8006a34 <_scanf_float+0x88>
 8006d1c:	7032      	strb	r2, [r6, #0]
 8006d1e:	6823      	ldr	r3, [r4, #0]
 8006d20:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006d24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d28:	d11c      	bne.n	8006d64 <_scanf_float+0x3b8>
 8006d2a:	9b02      	ldr	r3, [sp, #8]
 8006d2c:	454b      	cmp	r3, r9
 8006d2e:	eba3 0209 	sub.w	r2, r3, r9
 8006d32:	d123      	bne.n	8006d7c <_scanf_float+0x3d0>
 8006d34:	9901      	ldr	r1, [sp, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	4640      	mov	r0, r8
 8006d3a:	f002 fc09 	bl	8009550 <_strtod_r>
 8006d3e:	9b03      	ldr	r3, [sp, #12]
 8006d40:	6821      	ldr	r1, [r4, #0]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f011 0f02 	tst.w	r1, #2
 8006d48:	ec57 6b10 	vmov	r6, r7, d0
 8006d4c:	f103 0204 	add.w	r2, r3, #4
 8006d50:	d01f      	beq.n	8006d92 <_scanf_float+0x3e6>
 8006d52:	9903      	ldr	r1, [sp, #12]
 8006d54:	600a      	str	r2, [r1, #0]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	e9c3 6700 	strd	r6, r7, [r3]
 8006d5c:	68e3      	ldr	r3, [r4, #12]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	60e3      	str	r3, [r4, #12]
 8006d62:	e7d9      	b.n	8006d18 <_scanf_float+0x36c>
 8006d64:	9b04      	ldr	r3, [sp, #16]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d0e4      	beq.n	8006d34 <_scanf_float+0x388>
 8006d6a:	9905      	ldr	r1, [sp, #20]
 8006d6c:	230a      	movs	r3, #10
 8006d6e:	3101      	adds	r1, #1
 8006d70:	4640      	mov	r0, r8
 8006d72:	f002 fc6d 	bl	8009650 <_strtol_r>
 8006d76:	9b04      	ldr	r3, [sp, #16]
 8006d78:	9e05      	ldr	r6, [sp, #20]
 8006d7a:	1ac2      	subs	r2, r0, r3
 8006d7c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006d80:	429e      	cmp	r6, r3
 8006d82:	bf28      	it	cs
 8006d84:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006d88:	4910      	ldr	r1, [pc, #64]	@ (8006dcc <_scanf_float+0x420>)
 8006d8a:	4630      	mov	r0, r6
 8006d8c:	f000 f8f6 	bl	8006f7c <siprintf>
 8006d90:	e7d0      	b.n	8006d34 <_scanf_float+0x388>
 8006d92:	f011 0f04 	tst.w	r1, #4
 8006d96:	9903      	ldr	r1, [sp, #12]
 8006d98:	600a      	str	r2, [r1, #0]
 8006d9a:	d1dc      	bne.n	8006d56 <_scanf_float+0x3aa>
 8006d9c:	681d      	ldr	r5, [r3, #0]
 8006d9e:	4632      	mov	r2, r6
 8006da0:	463b      	mov	r3, r7
 8006da2:	4630      	mov	r0, r6
 8006da4:	4639      	mov	r1, r7
 8006da6:	f7f9 fee1 	bl	8000b6c <__aeabi_dcmpun>
 8006daa:	b128      	cbz	r0, 8006db8 <_scanf_float+0x40c>
 8006dac:	4808      	ldr	r0, [pc, #32]	@ (8006dd0 <_scanf_float+0x424>)
 8006dae:	f000 f9c9 	bl	8007144 <nanf>
 8006db2:	ed85 0a00 	vstr	s0, [r5]
 8006db6:	e7d1      	b.n	8006d5c <_scanf_float+0x3b0>
 8006db8:	4630      	mov	r0, r6
 8006dba:	4639      	mov	r1, r7
 8006dbc:	f7f9 ff34 	bl	8000c28 <__aeabi_d2f>
 8006dc0:	6028      	str	r0, [r5, #0]
 8006dc2:	e7cb      	b.n	8006d5c <_scanf_float+0x3b0>
 8006dc4:	f04f 0900 	mov.w	r9, #0
 8006dc8:	e629      	b.n	8006a1e <_scanf_float+0x72>
 8006dca:	bf00      	nop
 8006dcc:	0800b028 	.word	0x0800b028
 8006dd0:	0800b3bd 	.word	0x0800b3bd

08006dd4 <std>:
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	b510      	push	{r4, lr}
 8006dd8:	4604      	mov	r4, r0
 8006dda:	e9c0 3300 	strd	r3, r3, [r0]
 8006dde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006de2:	6083      	str	r3, [r0, #8]
 8006de4:	8181      	strh	r1, [r0, #12]
 8006de6:	6643      	str	r3, [r0, #100]	@ 0x64
 8006de8:	81c2      	strh	r2, [r0, #14]
 8006dea:	6183      	str	r3, [r0, #24]
 8006dec:	4619      	mov	r1, r3
 8006dee:	2208      	movs	r2, #8
 8006df0:	305c      	adds	r0, #92	@ 0x5c
 8006df2:	f000 f926 	bl	8007042 <memset>
 8006df6:	4b0d      	ldr	r3, [pc, #52]	@ (8006e2c <std+0x58>)
 8006df8:	6263      	str	r3, [r4, #36]	@ 0x24
 8006dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8006e30 <std+0x5c>)
 8006dfc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8006e34 <std+0x60>)
 8006e00:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006e02:	4b0d      	ldr	r3, [pc, #52]	@ (8006e38 <std+0x64>)
 8006e04:	6323      	str	r3, [r4, #48]	@ 0x30
 8006e06:	4b0d      	ldr	r3, [pc, #52]	@ (8006e3c <std+0x68>)
 8006e08:	6224      	str	r4, [r4, #32]
 8006e0a:	429c      	cmp	r4, r3
 8006e0c:	d006      	beq.n	8006e1c <std+0x48>
 8006e0e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006e12:	4294      	cmp	r4, r2
 8006e14:	d002      	beq.n	8006e1c <std+0x48>
 8006e16:	33d0      	adds	r3, #208	@ 0xd0
 8006e18:	429c      	cmp	r4, r3
 8006e1a:	d105      	bne.n	8006e28 <std+0x54>
 8006e1c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e24:	f000 b98a 	b.w	800713c <__retarget_lock_init_recursive>
 8006e28:	bd10      	pop	{r4, pc}
 8006e2a:	bf00      	nop
 8006e2c:	08006fbd 	.word	0x08006fbd
 8006e30:	08006fdf 	.word	0x08006fdf
 8006e34:	08007017 	.word	0x08007017
 8006e38:	0800703b 	.word	0x0800703b
 8006e3c:	20011a20 	.word	0x20011a20

08006e40 <stdio_exit_handler>:
 8006e40:	4a02      	ldr	r2, [pc, #8]	@ (8006e4c <stdio_exit_handler+0xc>)
 8006e42:	4903      	ldr	r1, [pc, #12]	@ (8006e50 <stdio_exit_handler+0x10>)
 8006e44:	4803      	ldr	r0, [pc, #12]	@ (8006e54 <stdio_exit_handler+0x14>)
 8006e46:	f000 b869 	b.w	8006f1c <_fwalk_sglue>
 8006e4a:	bf00      	nop
 8006e4c:	2000000c 	.word	0x2000000c
 8006e50:	08009c91 	.word	0x08009c91
 8006e54:	2000001c 	.word	0x2000001c

08006e58 <cleanup_stdio>:
 8006e58:	6841      	ldr	r1, [r0, #4]
 8006e5a:	4b0c      	ldr	r3, [pc, #48]	@ (8006e8c <cleanup_stdio+0x34>)
 8006e5c:	4299      	cmp	r1, r3
 8006e5e:	b510      	push	{r4, lr}
 8006e60:	4604      	mov	r4, r0
 8006e62:	d001      	beq.n	8006e68 <cleanup_stdio+0x10>
 8006e64:	f002 ff14 	bl	8009c90 <_fflush_r>
 8006e68:	68a1      	ldr	r1, [r4, #8]
 8006e6a:	4b09      	ldr	r3, [pc, #36]	@ (8006e90 <cleanup_stdio+0x38>)
 8006e6c:	4299      	cmp	r1, r3
 8006e6e:	d002      	beq.n	8006e76 <cleanup_stdio+0x1e>
 8006e70:	4620      	mov	r0, r4
 8006e72:	f002 ff0d 	bl	8009c90 <_fflush_r>
 8006e76:	68e1      	ldr	r1, [r4, #12]
 8006e78:	4b06      	ldr	r3, [pc, #24]	@ (8006e94 <cleanup_stdio+0x3c>)
 8006e7a:	4299      	cmp	r1, r3
 8006e7c:	d004      	beq.n	8006e88 <cleanup_stdio+0x30>
 8006e7e:	4620      	mov	r0, r4
 8006e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e84:	f002 bf04 	b.w	8009c90 <_fflush_r>
 8006e88:	bd10      	pop	{r4, pc}
 8006e8a:	bf00      	nop
 8006e8c:	20011a20 	.word	0x20011a20
 8006e90:	20011a88 	.word	0x20011a88
 8006e94:	20011af0 	.word	0x20011af0

08006e98 <global_stdio_init.part.0>:
 8006e98:	b510      	push	{r4, lr}
 8006e9a:	4b0b      	ldr	r3, [pc, #44]	@ (8006ec8 <global_stdio_init.part.0+0x30>)
 8006e9c:	4c0b      	ldr	r4, [pc, #44]	@ (8006ecc <global_stdio_init.part.0+0x34>)
 8006e9e:	4a0c      	ldr	r2, [pc, #48]	@ (8006ed0 <global_stdio_init.part.0+0x38>)
 8006ea0:	601a      	str	r2, [r3, #0]
 8006ea2:	4620      	mov	r0, r4
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	2104      	movs	r1, #4
 8006ea8:	f7ff ff94 	bl	8006dd4 <std>
 8006eac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	2109      	movs	r1, #9
 8006eb4:	f7ff ff8e 	bl	8006dd4 <std>
 8006eb8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006ebc:	2202      	movs	r2, #2
 8006ebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ec2:	2112      	movs	r1, #18
 8006ec4:	f7ff bf86 	b.w	8006dd4 <std>
 8006ec8:	20011b58 	.word	0x20011b58
 8006ecc:	20011a20 	.word	0x20011a20
 8006ed0:	08006e41 	.word	0x08006e41

08006ed4 <__sfp_lock_acquire>:
 8006ed4:	4801      	ldr	r0, [pc, #4]	@ (8006edc <__sfp_lock_acquire+0x8>)
 8006ed6:	f000 b932 	b.w	800713e <__retarget_lock_acquire_recursive>
 8006eda:	bf00      	nop
 8006edc:	20011b61 	.word	0x20011b61

08006ee0 <__sfp_lock_release>:
 8006ee0:	4801      	ldr	r0, [pc, #4]	@ (8006ee8 <__sfp_lock_release+0x8>)
 8006ee2:	f000 b92d 	b.w	8007140 <__retarget_lock_release_recursive>
 8006ee6:	bf00      	nop
 8006ee8:	20011b61 	.word	0x20011b61

08006eec <__sinit>:
 8006eec:	b510      	push	{r4, lr}
 8006eee:	4604      	mov	r4, r0
 8006ef0:	f7ff fff0 	bl	8006ed4 <__sfp_lock_acquire>
 8006ef4:	6a23      	ldr	r3, [r4, #32]
 8006ef6:	b11b      	cbz	r3, 8006f00 <__sinit+0x14>
 8006ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006efc:	f7ff bff0 	b.w	8006ee0 <__sfp_lock_release>
 8006f00:	4b04      	ldr	r3, [pc, #16]	@ (8006f14 <__sinit+0x28>)
 8006f02:	6223      	str	r3, [r4, #32]
 8006f04:	4b04      	ldr	r3, [pc, #16]	@ (8006f18 <__sinit+0x2c>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d1f5      	bne.n	8006ef8 <__sinit+0xc>
 8006f0c:	f7ff ffc4 	bl	8006e98 <global_stdio_init.part.0>
 8006f10:	e7f2      	b.n	8006ef8 <__sinit+0xc>
 8006f12:	bf00      	nop
 8006f14:	08006e59 	.word	0x08006e59
 8006f18:	20011b58 	.word	0x20011b58

08006f1c <_fwalk_sglue>:
 8006f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f20:	4607      	mov	r7, r0
 8006f22:	4688      	mov	r8, r1
 8006f24:	4614      	mov	r4, r2
 8006f26:	2600      	movs	r6, #0
 8006f28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f2c:	f1b9 0901 	subs.w	r9, r9, #1
 8006f30:	d505      	bpl.n	8006f3e <_fwalk_sglue+0x22>
 8006f32:	6824      	ldr	r4, [r4, #0]
 8006f34:	2c00      	cmp	r4, #0
 8006f36:	d1f7      	bne.n	8006f28 <_fwalk_sglue+0xc>
 8006f38:	4630      	mov	r0, r6
 8006f3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f3e:	89ab      	ldrh	r3, [r5, #12]
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d907      	bls.n	8006f54 <_fwalk_sglue+0x38>
 8006f44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f48:	3301      	adds	r3, #1
 8006f4a:	d003      	beq.n	8006f54 <_fwalk_sglue+0x38>
 8006f4c:	4629      	mov	r1, r5
 8006f4e:	4638      	mov	r0, r7
 8006f50:	47c0      	blx	r8
 8006f52:	4306      	orrs	r6, r0
 8006f54:	3568      	adds	r5, #104	@ 0x68
 8006f56:	e7e9      	b.n	8006f2c <_fwalk_sglue+0x10>

08006f58 <iprintf>:
 8006f58:	b40f      	push	{r0, r1, r2, r3}
 8006f5a:	b507      	push	{r0, r1, r2, lr}
 8006f5c:	4906      	ldr	r1, [pc, #24]	@ (8006f78 <iprintf+0x20>)
 8006f5e:	ab04      	add	r3, sp, #16
 8006f60:	6808      	ldr	r0, [r1, #0]
 8006f62:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f66:	6881      	ldr	r1, [r0, #8]
 8006f68:	9301      	str	r3, [sp, #4]
 8006f6a:	f002 fcf5 	bl	8009958 <_vfiprintf_r>
 8006f6e:	b003      	add	sp, #12
 8006f70:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f74:	b004      	add	sp, #16
 8006f76:	4770      	bx	lr
 8006f78:	20000018 	.word	0x20000018

08006f7c <siprintf>:
 8006f7c:	b40e      	push	{r1, r2, r3}
 8006f7e:	b500      	push	{lr}
 8006f80:	b09c      	sub	sp, #112	@ 0x70
 8006f82:	ab1d      	add	r3, sp, #116	@ 0x74
 8006f84:	9002      	str	r0, [sp, #8]
 8006f86:	9006      	str	r0, [sp, #24]
 8006f88:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006f8c:	4809      	ldr	r0, [pc, #36]	@ (8006fb4 <siprintf+0x38>)
 8006f8e:	9107      	str	r1, [sp, #28]
 8006f90:	9104      	str	r1, [sp, #16]
 8006f92:	4909      	ldr	r1, [pc, #36]	@ (8006fb8 <siprintf+0x3c>)
 8006f94:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f98:	9105      	str	r1, [sp, #20]
 8006f9a:	6800      	ldr	r0, [r0, #0]
 8006f9c:	9301      	str	r3, [sp, #4]
 8006f9e:	a902      	add	r1, sp, #8
 8006fa0:	f002 fbb4 	bl	800970c <_svfiprintf_r>
 8006fa4:	9b02      	ldr	r3, [sp, #8]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	701a      	strb	r2, [r3, #0]
 8006faa:	b01c      	add	sp, #112	@ 0x70
 8006fac:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fb0:	b003      	add	sp, #12
 8006fb2:	4770      	bx	lr
 8006fb4:	20000018 	.word	0x20000018
 8006fb8:	ffff0208 	.word	0xffff0208

08006fbc <__sread>:
 8006fbc:	b510      	push	{r4, lr}
 8006fbe:	460c      	mov	r4, r1
 8006fc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fc4:	f000 f86c 	bl	80070a0 <_read_r>
 8006fc8:	2800      	cmp	r0, #0
 8006fca:	bfab      	itete	ge
 8006fcc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006fce:	89a3      	ldrhlt	r3, [r4, #12]
 8006fd0:	181b      	addge	r3, r3, r0
 8006fd2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006fd6:	bfac      	ite	ge
 8006fd8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006fda:	81a3      	strhlt	r3, [r4, #12]
 8006fdc:	bd10      	pop	{r4, pc}

08006fde <__swrite>:
 8006fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fe2:	461f      	mov	r7, r3
 8006fe4:	898b      	ldrh	r3, [r1, #12]
 8006fe6:	05db      	lsls	r3, r3, #23
 8006fe8:	4605      	mov	r5, r0
 8006fea:	460c      	mov	r4, r1
 8006fec:	4616      	mov	r6, r2
 8006fee:	d505      	bpl.n	8006ffc <__swrite+0x1e>
 8006ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ff4:	2302      	movs	r3, #2
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f000 f840 	bl	800707c <_lseek_r>
 8006ffc:	89a3      	ldrh	r3, [r4, #12]
 8006ffe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007002:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007006:	81a3      	strh	r3, [r4, #12]
 8007008:	4632      	mov	r2, r6
 800700a:	463b      	mov	r3, r7
 800700c:	4628      	mov	r0, r5
 800700e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007012:	f000 b857 	b.w	80070c4 <_write_r>

08007016 <__sseek>:
 8007016:	b510      	push	{r4, lr}
 8007018:	460c      	mov	r4, r1
 800701a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800701e:	f000 f82d 	bl	800707c <_lseek_r>
 8007022:	1c43      	adds	r3, r0, #1
 8007024:	89a3      	ldrh	r3, [r4, #12]
 8007026:	bf15      	itete	ne
 8007028:	6560      	strne	r0, [r4, #84]	@ 0x54
 800702a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800702e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007032:	81a3      	strheq	r3, [r4, #12]
 8007034:	bf18      	it	ne
 8007036:	81a3      	strhne	r3, [r4, #12]
 8007038:	bd10      	pop	{r4, pc}

0800703a <__sclose>:
 800703a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800703e:	f000 b80d 	b.w	800705c <_close_r>

08007042 <memset>:
 8007042:	4402      	add	r2, r0
 8007044:	4603      	mov	r3, r0
 8007046:	4293      	cmp	r3, r2
 8007048:	d100      	bne.n	800704c <memset+0xa>
 800704a:	4770      	bx	lr
 800704c:	f803 1b01 	strb.w	r1, [r3], #1
 8007050:	e7f9      	b.n	8007046 <memset+0x4>
	...

08007054 <_localeconv_r>:
 8007054:	4800      	ldr	r0, [pc, #0]	@ (8007058 <_localeconv_r+0x4>)
 8007056:	4770      	bx	lr
 8007058:	20000158 	.word	0x20000158

0800705c <_close_r>:
 800705c:	b538      	push	{r3, r4, r5, lr}
 800705e:	4d06      	ldr	r5, [pc, #24]	@ (8007078 <_close_r+0x1c>)
 8007060:	2300      	movs	r3, #0
 8007062:	4604      	mov	r4, r0
 8007064:	4608      	mov	r0, r1
 8007066:	602b      	str	r3, [r5, #0]
 8007068:	f7fb fc0c 	bl	8002884 <_close>
 800706c:	1c43      	adds	r3, r0, #1
 800706e:	d102      	bne.n	8007076 <_close_r+0x1a>
 8007070:	682b      	ldr	r3, [r5, #0]
 8007072:	b103      	cbz	r3, 8007076 <_close_r+0x1a>
 8007074:	6023      	str	r3, [r4, #0]
 8007076:	bd38      	pop	{r3, r4, r5, pc}
 8007078:	20011b5c 	.word	0x20011b5c

0800707c <_lseek_r>:
 800707c:	b538      	push	{r3, r4, r5, lr}
 800707e:	4d07      	ldr	r5, [pc, #28]	@ (800709c <_lseek_r+0x20>)
 8007080:	4604      	mov	r4, r0
 8007082:	4608      	mov	r0, r1
 8007084:	4611      	mov	r1, r2
 8007086:	2200      	movs	r2, #0
 8007088:	602a      	str	r2, [r5, #0]
 800708a:	461a      	mov	r2, r3
 800708c:	f7fb fc21 	bl	80028d2 <_lseek>
 8007090:	1c43      	adds	r3, r0, #1
 8007092:	d102      	bne.n	800709a <_lseek_r+0x1e>
 8007094:	682b      	ldr	r3, [r5, #0]
 8007096:	b103      	cbz	r3, 800709a <_lseek_r+0x1e>
 8007098:	6023      	str	r3, [r4, #0]
 800709a:	bd38      	pop	{r3, r4, r5, pc}
 800709c:	20011b5c 	.word	0x20011b5c

080070a0 <_read_r>:
 80070a0:	b538      	push	{r3, r4, r5, lr}
 80070a2:	4d07      	ldr	r5, [pc, #28]	@ (80070c0 <_read_r+0x20>)
 80070a4:	4604      	mov	r4, r0
 80070a6:	4608      	mov	r0, r1
 80070a8:	4611      	mov	r1, r2
 80070aa:	2200      	movs	r2, #0
 80070ac:	602a      	str	r2, [r5, #0]
 80070ae:	461a      	mov	r2, r3
 80070b0:	f7fb fbaf 	bl	8002812 <_read>
 80070b4:	1c43      	adds	r3, r0, #1
 80070b6:	d102      	bne.n	80070be <_read_r+0x1e>
 80070b8:	682b      	ldr	r3, [r5, #0]
 80070ba:	b103      	cbz	r3, 80070be <_read_r+0x1e>
 80070bc:	6023      	str	r3, [r4, #0]
 80070be:	bd38      	pop	{r3, r4, r5, pc}
 80070c0:	20011b5c 	.word	0x20011b5c

080070c4 <_write_r>:
 80070c4:	b538      	push	{r3, r4, r5, lr}
 80070c6:	4d07      	ldr	r5, [pc, #28]	@ (80070e4 <_write_r+0x20>)
 80070c8:	4604      	mov	r4, r0
 80070ca:	4608      	mov	r0, r1
 80070cc:	4611      	mov	r1, r2
 80070ce:	2200      	movs	r2, #0
 80070d0:	602a      	str	r2, [r5, #0]
 80070d2:	461a      	mov	r2, r3
 80070d4:	f7fb fbba 	bl	800284c <_write>
 80070d8:	1c43      	adds	r3, r0, #1
 80070da:	d102      	bne.n	80070e2 <_write_r+0x1e>
 80070dc:	682b      	ldr	r3, [r5, #0]
 80070de:	b103      	cbz	r3, 80070e2 <_write_r+0x1e>
 80070e0:	6023      	str	r3, [r4, #0]
 80070e2:	bd38      	pop	{r3, r4, r5, pc}
 80070e4:	20011b5c 	.word	0x20011b5c

080070e8 <__errno>:
 80070e8:	4b01      	ldr	r3, [pc, #4]	@ (80070f0 <__errno+0x8>)
 80070ea:	6818      	ldr	r0, [r3, #0]
 80070ec:	4770      	bx	lr
 80070ee:	bf00      	nop
 80070f0:	20000018 	.word	0x20000018

080070f4 <__libc_init_array>:
 80070f4:	b570      	push	{r4, r5, r6, lr}
 80070f6:	4d0d      	ldr	r5, [pc, #52]	@ (800712c <__libc_init_array+0x38>)
 80070f8:	4c0d      	ldr	r4, [pc, #52]	@ (8007130 <__libc_init_array+0x3c>)
 80070fa:	1b64      	subs	r4, r4, r5
 80070fc:	10a4      	asrs	r4, r4, #2
 80070fe:	2600      	movs	r6, #0
 8007100:	42a6      	cmp	r6, r4
 8007102:	d109      	bne.n	8007118 <__libc_init_array+0x24>
 8007104:	4d0b      	ldr	r5, [pc, #44]	@ (8007134 <__libc_init_array+0x40>)
 8007106:	4c0c      	ldr	r4, [pc, #48]	@ (8007138 <__libc_init_array+0x44>)
 8007108:	f003 fe34 	bl	800ad74 <_init>
 800710c:	1b64      	subs	r4, r4, r5
 800710e:	10a4      	asrs	r4, r4, #2
 8007110:	2600      	movs	r6, #0
 8007112:	42a6      	cmp	r6, r4
 8007114:	d105      	bne.n	8007122 <__libc_init_array+0x2e>
 8007116:	bd70      	pop	{r4, r5, r6, pc}
 8007118:	f855 3b04 	ldr.w	r3, [r5], #4
 800711c:	4798      	blx	r3
 800711e:	3601      	adds	r6, #1
 8007120:	e7ee      	b.n	8007100 <__libc_init_array+0xc>
 8007122:	f855 3b04 	ldr.w	r3, [r5], #4
 8007126:	4798      	blx	r3
 8007128:	3601      	adds	r6, #1
 800712a:	e7f2      	b.n	8007112 <__libc_init_array+0x1e>
 800712c:	0800b460 	.word	0x0800b460
 8007130:	0800b460 	.word	0x0800b460
 8007134:	0800b460 	.word	0x0800b460
 8007138:	0800b464 	.word	0x0800b464

0800713c <__retarget_lock_init_recursive>:
 800713c:	4770      	bx	lr

0800713e <__retarget_lock_acquire_recursive>:
 800713e:	4770      	bx	lr

08007140 <__retarget_lock_release_recursive>:
 8007140:	4770      	bx	lr
	...

08007144 <nanf>:
 8007144:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800714c <nanf+0x8>
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop
 800714c:	7fc00000 	.word	0x7fc00000

08007150 <quorem>:
 8007150:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007154:	6903      	ldr	r3, [r0, #16]
 8007156:	690c      	ldr	r4, [r1, #16]
 8007158:	42a3      	cmp	r3, r4
 800715a:	4607      	mov	r7, r0
 800715c:	db7e      	blt.n	800725c <quorem+0x10c>
 800715e:	3c01      	subs	r4, #1
 8007160:	f101 0814 	add.w	r8, r1, #20
 8007164:	00a3      	lsls	r3, r4, #2
 8007166:	f100 0514 	add.w	r5, r0, #20
 800716a:	9300      	str	r3, [sp, #0]
 800716c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007170:	9301      	str	r3, [sp, #4]
 8007172:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007176:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800717a:	3301      	adds	r3, #1
 800717c:	429a      	cmp	r2, r3
 800717e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007182:	fbb2 f6f3 	udiv	r6, r2, r3
 8007186:	d32e      	bcc.n	80071e6 <quorem+0x96>
 8007188:	f04f 0a00 	mov.w	sl, #0
 800718c:	46c4      	mov	ip, r8
 800718e:	46ae      	mov	lr, r5
 8007190:	46d3      	mov	fp, sl
 8007192:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007196:	b298      	uxth	r0, r3
 8007198:	fb06 a000 	mla	r0, r6, r0, sl
 800719c:	0c02      	lsrs	r2, r0, #16
 800719e:	0c1b      	lsrs	r3, r3, #16
 80071a0:	fb06 2303 	mla	r3, r6, r3, r2
 80071a4:	f8de 2000 	ldr.w	r2, [lr]
 80071a8:	b280      	uxth	r0, r0
 80071aa:	b292      	uxth	r2, r2
 80071ac:	1a12      	subs	r2, r2, r0
 80071ae:	445a      	add	r2, fp
 80071b0:	f8de 0000 	ldr.w	r0, [lr]
 80071b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80071be:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80071c2:	b292      	uxth	r2, r2
 80071c4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80071c8:	45e1      	cmp	r9, ip
 80071ca:	f84e 2b04 	str.w	r2, [lr], #4
 80071ce:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80071d2:	d2de      	bcs.n	8007192 <quorem+0x42>
 80071d4:	9b00      	ldr	r3, [sp, #0]
 80071d6:	58eb      	ldr	r3, [r5, r3]
 80071d8:	b92b      	cbnz	r3, 80071e6 <quorem+0x96>
 80071da:	9b01      	ldr	r3, [sp, #4]
 80071dc:	3b04      	subs	r3, #4
 80071de:	429d      	cmp	r5, r3
 80071e0:	461a      	mov	r2, r3
 80071e2:	d32f      	bcc.n	8007244 <quorem+0xf4>
 80071e4:	613c      	str	r4, [r7, #16]
 80071e6:	4638      	mov	r0, r7
 80071e8:	f001 f9c2 	bl	8008570 <__mcmp>
 80071ec:	2800      	cmp	r0, #0
 80071ee:	db25      	blt.n	800723c <quorem+0xec>
 80071f0:	4629      	mov	r1, r5
 80071f2:	2000      	movs	r0, #0
 80071f4:	f858 2b04 	ldr.w	r2, [r8], #4
 80071f8:	f8d1 c000 	ldr.w	ip, [r1]
 80071fc:	fa1f fe82 	uxth.w	lr, r2
 8007200:	fa1f f38c 	uxth.w	r3, ip
 8007204:	eba3 030e 	sub.w	r3, r3, lr
 8007208:	4403      	add	r3, r0
 800720a:	0c12      	lsrs	r2, r2, #16
 800720c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007210:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007214:	b29b      	uxth	r3, r3
 8007216:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800721a:	45c1      	cmp	r9, r8
 800721c:	f841 3b04 	str.w	r3, [r1], #4
 8007220:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007224:	d2e6      	bcs.n	80071f4 <quorem+0xa4>
 8007226:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800722a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800722e:	b922      	cbnz	r2, 800723a <quorem+0xea>
 8007230:	3b04      	subs	r3, #4
 8007232:	429d      	cmp	r5, r3
 8007234:	461a      	mov	r2, r3
 8007236:	d30b      	bcc.n	8007250 <quorem+0x100>
 8007238:	613c      	str	r4, [r7, #16]
 800723a:	3601      	adds	r6, #1
 800723c:	4630      	mov	r0, r6
 800723e:	b003      	add	sp, #12
 8007240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007244:	6812      	ldr	r2, [r2, #0]
 8007246:	3b04      	subs	r3, #4
 8007248:	2a00      	cmp	r2, #0
 800724a:	d1cb      	bne.n	80071e4 <quorem+0x94>
 800724c:	3c01      	subs	r4, #1
 800724e:	e7c6      	b.n	80071de <quorem+0x8e>
 8007250:	6812      	ldr	r2, [r2, #0]
 8007252:	3b04      	subs	r3, #4
 8007254:	2a00      	cmp	r2, #0
 8007256:	d1ef      	bne.n	8007238 <quorem+0xe8>
 8007258:	3c01      	subs	r4, #1
 800725a:	e7ea      	b.n	8007232 <quorem+0xe2>
 800725c:	2000      	movs	r0, #0
 800725e:	e7ee      	b.n	800723e <quorem+0xee>

08007260 <_dtoa_r>:
 8007260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007264:	69c7      	ldr	r7, [r0, #28]
 8007266:	b099      	sub	sp, #100	@ 0x64
 8007268:	ed8d 0b02 	vstr	d0, [sp, #8]
 800726c:	ec55 4b10 	vmov	r4, r5, d0
 8007270:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007272:	9109      	str	r1, [sp, #36]	@ 0x24
 8007274:	4683      	mov	fp, r0
 8007276:	920e      	str	r2, [sp, #56]	@ 0x38
 8007278:	9313      	str	r3, [sp, #76]	@ 0x4c
 800727a:	b97f      	cbnz	r7, 800729c <_dtoa_r+0x3c>
 800727c:	2010      	movs	r0, #16
 800727e:	f000 fdfd 	bl	8007e7c <malloc>
 8007282:	4602      	mov	r2, r0
 8007284:	f8cb 001c 	str.w	r0, [fp, #28]
 8007288:	b920      	cbnz	r0, 8007294 <_dtoa_r+0x34>
 800728a:	4ba7      	ldr	r3, [pc, #668]	@ (8007528 <_dtoa_r+0x2c8>)
 800728c:	21ef      	movs	r1, #239	@ 0xef
 800728e:	48a7      	ldr	r0, [pc, #668]	@ (800752c <_dtoa_r+0x2cc>)
 8007290:	f002 fe0e 	bl	8009eb0 <__assert_func>
 8007294:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007298:	6007      	str	r7, [r0, #0]
 800729a:	60c7      	str	r7, [r0, #12]
 800729c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80072a0:	6819      	ldr	r1, [r3, #0]
 80072a2:	b159      	cbz	r1, 80072bc <_dtoa_r+0x5c>
 80072a4:	685a      	ldr	r2, [r3, #4]
 80072a6:	604a      	str	r2, [r1, #4]
 80072a8:	2301      	movs	r3, #1
 80072aa:	4093      	lsls	r3, r2
 80072ac:	608b      	str	r3, [r1, #8]
 80072ae:	4658      	mov	r0, fp
 80072b0:	f000 feda 	bl	8008068 <_Bfree>
 80072b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80072b8:	2200      	movs	r2, #0
 80072ba:	601a      	str	r2, [r3, #0]
 80072bc:	1e2b      	subs	r3, r5, #0
 80072be:	bfb9      	ittee	lt
 80072c0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80072c4:	9303      	strlt	r3, [sp, #12]
 80072c6:	2300      	movge	r3, #0
 80072c8:	6033      	strge	r3, [r6, #0]
 80072ca:	9f03      	ldr	r7, [sp, #12]
 80072cc:	4b98      	ldr	r3, [pc, #608]	@ (8007530 <_dtoa_r+0x2d0>)
 80072ce:	bfbc      	itt	lt
 80072d0:	2201      	movlt	r2, #1
 80072d2:	6032      	strlt	r2, [r6, #0]
 80072d4:	43bb      	bics	r3, r7
 80072d6:	d112      	bne.n	80072fe <_dtoa_r+0x9e>
 80072d8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80072da:	f242 730f 	movw	r3, #9999	@ 0x270f
 80072de:	6013      	str	r3, [r2, #0]
 80072e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80072e4:	4323      	orrs	r3, r4
 80072e6:	f000 854d 	beq.w	8007d84 <_dtoa_r+0xb24>
 80072ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80072ec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007544 <_dtoa_r+0x2e4>
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	f000 854f 	beq.w	8007d94 <_dtoa_r+0xb34>
 80072f6:	f10a 0303 	add.w	r3, sl, #3
 80072fa:	f000 bd49 	b.w	8007d90 <_dtoa_r+0xb30>
 80072fe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007302:	2200      	movs	r2, #0
 8007304:	ec51 0b17 	vmov	r0, r1, d7
 8007308:	2300      	movs	r3, #0
 800730a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800730e:	f7f9 fbfb 	bl	8000b08 <__aeabi_dcmpeq>
 8007312:	4680      	mov	r8, r0
 8007314:	b158      	cbz	r0, 800732e <_dtoa_r+0xce>
 8007316:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007318:	2301      	movs	r3, #1
 800731a:	6013      	str	r3, [r2, #0]
 800731c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800731e:	b113      	cbz	r3, 8007326 <_dtoa_r+0xc6>
 8007320:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007322:	4b84      	ldr	r3, [pc, #528]	@ (8007534 <_dtoa_r+0x2d4>)
 8007324:	6013      	str	r3, [r2, #0]
 8007326:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007548 <_dtoa_r+0x2e8>
 800732a:	f000 bd33 	b.w	8007d94 <_dtoa_r+0xb34>
 800732e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007332:	aa16      	add	r2, sp, #88	@ 0x58
 8007334:	a917      	add	r1, sp, #92	@ 0x5c
 8007336:	4658      	mov	r0, fp
 8007338:	f001 fa3a 	bl	80087b0 <__d2b>
 800733c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007340:	4681      	mov	r9, r0
 8007342:	2e00      	cmp	r6, #0
 8007344:	d077      	beq.n	8007436 <_dtoa_r+0x1d6>
 8007346:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007348:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800734c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007350:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007354:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007358:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800735c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007360:	4619      	mov	r1, r3
 8007362:	2200      	movs	r2, #0
 8007364:	4b74      	ldr	r3, [pc, #464]	@ (8007538 <_dtoa_r+0x2d8>)
 8007366:	f7f8 ffaf 	bl	80002c8 <__aeabi_dsub>
 800736a:	a369      	add	r3, pc, #420	@ (adr r3, 8007510 <_dtoa_r+0x2b0>)
 800736c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007370:	f7f9 f962 	bl	8000638 <__aeabi_dmul>
 8007374:	a368      	add	r3, pc, #416	@ (adr r3, 8007518 <_dtoa_r+0x2b8>)
 8007376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737a:	f7f8 ffa7 	bl	80002cc <__adddf3>
 800737e:	4604      	mov	r4, r0
 8007380:	4630      	mov	r0, r6
 8007382:	460d      	mov	r5, r1
 8007384:	f7f9 f8ee 	bl	8000564 <__aeabi_i2d>
 8007388:	a365      	add	r3, pc, #404	@ (adr r3, 8007520 <_dtoa_r+0x2c0>)
 800738a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738e:	f7f9 f953 	bl	8000638 <__aeabi_dmul>
 8007392:	4602      	mov	r2, r0
 8007394:	460b      	mov	r3, r1
 8007396:	4620      	mov	r0, r4
 8007398:	4629      	mov	r1, r5
 800739a:	f7f8 ff97 	bl	80002cc <__adddf3>
 800739e:	4604      	mov	r4, r0
 80073a0:	460d      	mov	r5, r1
 80073a2:	f7f9 fbf9 	bl	8000b98 <__aeabi_d2iz>
 80073a6:	2200      	movs	r2, #0
 80073a8:	4607      	mov	r7, r0
 80073aa:	2300      	movs	r3, #0
 80073ac:	4620      	mov	r0, r4
 80073ae:	4629      	mov	r1, r5
 80073b0:	f7f9 fbb4 	bl	8000b1c <__aeabi_dcmplt>
 80073b4:	b140      	cbz	r0, 80073c8 <_dtoa_r+0x168>
 80073b6:	4638      	mov	r0, r7
 80073b8:	f7f9 f8d4 	bl	8000564 <__aeabi_i2d>
 80073bc:	4622      	mov	r2, r4
 80073be:	462b      	mov	r3, r5
 80073c0:	f7f9 fba2 	bl	8000b08 <__aeabi_dcmpeq>
 80073c4:	b900      	cbnz	r0, 80073c8 <_dtoa_r+0x168>
 80073c6:	3f01      	subs	r7, #1
 80073c8:	2f16      	cmp	r7, #22
 80073ca:	d851      	bhi.n	8007470 <_dtoa_r+0x210>
 80073cc:	4b5b      	ldr	r3, [pc, #364]	@ (800753c <_dtoa_r+0x2dc>)
 80073ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80073d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073da:	f7f9 fb9f 	bl	8000b1c <__aeabi_dcmplt>
 80073de:	2800      	cmp	r0, #0
 80073e0:	d048      	beq.n	8007474 <_dtoa_r+0x214>
 80073e2:	3f01      	subs	r7, #1
 80073e4:	2300      	movs	r3, #0
 80073e6:	9312      	str	r3, [sp, #72]	@ 0x48
 80073e8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80073ea:	1b9b      	subs	r3, r3, r6
 80073ec:	1e5a      	subs	r2, r3, #1
 80073ee:	bf44      	itt	mi
 80073f0:	f1c3 0801 	rsbmi	r8, r3, #1
 80073f4:	2300      	movmi	r3, #0
 80073f6:	9208      	str	r2, [sp, #32]
 80073f8:	bf54      	ite	pl
 80073fa:	f04f 0800 	movpl.w	r8, #0
 80073fe:	9308      	strmi	r3, [sp, #32]
 8007400:	2f00      	cmp	r7, #0
 8007402:	db39      	blt.n	8007478 <_dtoa_r+0x218>
 8007404:	9b08      	ldr	r3, [sp, #32]
 8007406:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007408:	443b      	add	r3, r7
 800740a:	9308      	str	r3, [sp, #32]
 800740c:	2300      	movs	r3, #0
 800740e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007410:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007412:	2b09      	cmp	r3, #9
 8007414:	d864      	bhi.n	80074e0 <_dtoa_r+0x280>
 8007416:	2b05      	cmp	r3, #5
 8007418:	bfc4      	itt	gt
 800741a:	3b04      	subgt	r3, #4
 800741c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800741e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007420:	f1a3 0302 	sub.w	r3, r3, #2
 8007424:	bfcc      	ite	gt
 8007426:	2400      	movgt	r4, #0
 8007428:	2401      	movle	r4, #1
 800742a:	2b03      	cmp	r3, #3
 800742c:	d863      	bhi.n	80074f6 <_dtoa_r+0x296>
 800742e:	e8df f003 	tbb	[pc, r3]
 8007432:	372a      	.short	0x372a
 8007434:	5535      	.short	0x5535
 8007436:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800743a:	441e      	add	r6, r3
 800743c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007440:	2b20      	cmp	r3, #32
 8007442:	bfc1      	itttt	gt
 8007444:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007448:	409f      	lslgt	r7, r3
 800744a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800744e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007452:	bfd6      	itet	le
 8007454:	f1c3 0320 	rsble	r3, r3, #32
 8007458:	ea47 0003 	orrgt.w	r0, r7, r3
 800745c:	fa04 f003 	lslle.w	r0, r4, r3
 8007460:	f7f9 f870 	bl	8000544 <__aeabi_ui2d>
 8007464:	2201      	movs	r2, #1
 8007466:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800746a:	3e01      	subs	r6, #1
 800746c:	9214      	str	r2, [sp, #80]	@ 0x50
 800746e:	e777      	b.n	8007360 <_dtoa_r+0x100>
 8007470:	2301      	movs	r3, #1
 8007472:	e7b8      	b.n	80073e6 <_dtoa_r+0x186>
 8007474:	9012      	str	r0, [sp, #72]	@ 0x48
 8007476:	e7b7      	b.n	80073e8 <_dtoa_r+0x188>
 8007478:	427b      	negs	r3, r7
 800747a:	930a      	str	r3, [sp, #40]	@ 0x28
 800747c:	2300      	movs	r3, #0
 800747e:	eba8 0807 	sub.w	r8, r8, r7
 8007482:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007484:	e7c4      	b.n	8007410 <_dtoa_r+0x1b0>
 8007486:	2300      	movs	r3, #0
 8007488:	930b      	str	r3, [sp, #44]	@ 0x2c
 800748a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800748c:	2b00      	cmp	r3, #0
 800748e:	dc35      	bgt.n	80074fc <_dtoa_r+0x29c>
 8007490:	2301      	movs	r3, #1
 8007492:	9300      	str	r3, [sp, #0]
 8007494:	9307      	str	r3, [sp, #28]
 8007496:	461a      	mov	r2, r3
 8007498:	920e      	str	r2, [sp, #56]	@ 0x38
 800749a:	e00b      	b.n	80074b4 <_dtoa_r+0x254>
 800749c:	2301      	movs	r3, #1
 800749e:	e7f3      	b.n	8007488 <_dtoa_r+0x228>
 80074a0:	2300      	movs	r3, #0
 80074a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074a6:	18fb      	adds	r3, r7, r3
 80074a8:	9300      	str	r3, [sp, #0]
 80074aa:	3301      	adds	r3, #1
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	9307      	str	r3, [sp, #28]
 80074b0:	bfb8      	it	lt
 80074b2:	2301      	movlt	r3, #1
 80074b4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80074b8:	2100      	movs	r1, #0
 80074ba:	2204      	movs	r2, #4
 80074bc:	f102 0514 	add.w	r5, r2, #20
 80074c0:	429d      	cmp	r5, r3
 80074c2:	d91f      	bls.n	8007504 <_dtoa_r+0x2a4>
 80074c4:	6041      	str	r1, [r0, #4]
 80074c6:	4658      	mov	r0, fp
 80074c8:	f000 fd8e 	bl	8007fe8 <_Balloc>
 80074cc:	4682      	mov	sl, r0
 80074ce:	2800      	cmp	r0, #0
 80074d0:	d13c      	bne.n	800754c <_dtoa_r+0x2ec>
 80074d2:	4b1b      	ldr	r3, [pc, #108]	@ (8007540 <_dtoa_r+0x2e0>)
 80074d4:	4602      	mov	r2, r0
 80074d6:	f240 11af 	movw	r1, #431	@ 0x1af
 80074da:	e6d8      	b.n	800728e <_dtoa_r+0x2e>
 80074dc:	2301      	movs	r3, #1
 80074de:	e7e0      	b.n	80074a2 <_dtoa_r+0x242>
 80074e0:	2401      	movs	r4, #1
 80074e2:	2300      	movs	r3, #0
 80074e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80074e6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80074e8:	f04f 33ff 	mov.w	r3, #4294967295
 80074ec:	9300      	str	r3, [sp, #0]
 80074ee:	9307      	str	r3, [sp, #28]
 80074f0:	2200      	movs	r2, #0
 80074f2:	2312      	movs	r3, #18
 80074f4:	e7d0      	b.n	8007498 <_dtoa_r+0x238>
 80074f6:	2301      	movs	r3, #1
 80074f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074fa:	e7f5      	b.n	80074e8 <_dtoa_r+0x288>
 80074fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074fe:	9300      	str	r3, [sp, #0]
 8007500:	9307      	str	r3, [sp, #28]
 8007502:	e7d7      	b.n	80074b4 <_dtoa_r+0x254>
 8007504:	3101      	adds	r1, #1
 8007506:	0052      	lsls	r2, r2, #1
 8007508:	e7d8      	b.n	80074bc <_dtoa_r+0x25c>
 800750a:	bf00      	nop
 800750c:	f3af 8000 	nop.w
 8007510:	636f4361 	.word	0x636f4361
 8007514:	3fd287a7 	.word	0x3fd287a7
 8007518:	8b60c8b3 	.word	0x8b60c8b3
 800751c:	3fc68a28 	.word	0x3fc68a28
 8007520:	509f79fb 	.word	0x509f79fb
 8007524:	3fd34413 	.word	0x3fd34413
 8007528:	0800b03a 	.word	0x0800b03a
 800752c:	0800b051 	.word	0x0800b051
 8007530:	7ff00000 	.word	0x7ff00000
 8007534:	0800b005 	.word	0x0800b005
 8007538:	3ff80000 	.word	0x3ff80000
 800753c:	0800b148 	.word	0x0800b148
 8007540:	0800b0a9 	.word	0x0800b0a9
 8007544:	0800b036 	.word	0x0800b036
 8007548:	0800b004 	.word	0x0800b004
 800754c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007550:	6018      	str	r0, [r3, #0]
 8007552:	9b07      	ldr	r3, [sp, #28]
 8007554:	2b0e      	cmp	r3, #14
 8007556:	f200 80a4 	bhi.w	80076a2 <_dtoa_r+0x442>
 800755a:	2c00      	cmp	r4, #0
 800755c:	f000 80a1 	beq.w	80076a2 <_dtoa_r+0x442>
 8007560:	2f00      	cmp	r7, #0
 8007562:	dd33      	ble.n	80075cc <_dtoa_r+0x36c>
 8007564:	4bad      	ldr	r3, [pc, #692]	@ (800781c <_dtoa_r+0x5bc>)
 8007566:	f007 020f 	and.w	r2, r7, #15
 800756a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800756e:	ed93 7b00 	vldr	d7, [r3]
 8007572:	05f8      	lsls	r0, r7, #23
 8007574:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007578:	ea4f 1427 	mov.w	r4, r7, asr #4
 800757c:	d516      	bpl.n	80075ac <_dtoa_r+0x34c>
 800757e:	4ba8      	ldr	r3, [pc, #672]	@ (8007820 <_dtoa_r+0x5c0>)
 8007580:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007584:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007588:	f7f9 f980 	bl	800088c <__aeabi_ddiv>
 800758c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007590:	f004 040f 	and.w	r4, r4, #15
 8007594:	2603      	movs	r6, #3
 8007596:	4da2      	ldr	r5, [pc, #648]	@ (8007820 <_dtoa_r+0x5c0>)
 8007598:	b954      	cbnz	r4, 80075b0 <_dtoa_r+0x350>
 800759a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800759e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075a2:	f7f9 f973 	bl	800088c <__aeabi_ddiv>
 80075a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075aa:	e028      	b.n	80075fe <_dtoa_r+0x39e>
 80075ac:	2602      	movs	r6, #2
 80075ae:	e7f2      	b.n	8007596 <_dtoa_r+0x336>
 80075b0:	07e1      	lsls	r1, r4, #31
 80075b2:	d508      	bpl.n	80075c6 <_dtoa_r+0x366>
 80075b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80075bc:	f7f9 f83c 	bl	8000638 <__aeabi_dmul>
 80075c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075c4:	3601      	adds	r6, #1
 80075c6:	1064      	asrs	r4, r4, #1
 80075c8:	3508      	adds	r5, #8
 80075ca:	e7e5      	b.n	8007598 <_dtoa_r+0x338>
 80075cc:	f000 80d2 	beq.w	8007774 <_dtoa_r+0x514>
 80075d0:	427c      	negs	r4, r7
 80075d2:	4b92      	ldr	r3, [pc, #584]	@ (800781c <_dtoa_r+0x5bc>)
 80075d4:	4d92      	ldr	r5, [pc, #584]	@ (8007820 <_dtoa_r+0x5c0>)
 80075d6:	f004 020f 	and.w	r2, r4, #15
 80075da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80075e6:	f7f9 f827 	bl	8000638 <__aeabi_dmul>
 80075ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075ee:	1124      	asrs	r4, r4, #4
 80075f0:	2300      	movs	r3, #0
 80075f2:	2602      	movs	r6, #2
 80075f4:	2c00      	cmp	r4, #0
 80075f6:	f040 80b2 	bne.w	800775e <_dtoa_r+0x4fe>
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d1d3      	bne.n	80075a6 <_dtoa_r+0x346>
 80075fe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007600:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007604:	2b00      	cmp	r3, #0
 8007606:	f000 80b7 	beq.w	8007778 <_dtoa_r+0x518>
 800760a:	4b86      	ldr	r3, [pc, #536]	@ (8007824 <_dtoa_r+0x5c4>)
 800760c:	2200      	movs	r2, #0
 800760e:	4620      	mov	r0, r4
 8007610:	4629      	mov	r1, r5
 8007612:	f7f9 fa83 	bl	8000b1c <__aeabi_dcmplt>
 8007616:	2800      	cmp	r0, #0
 8007618:	f000 80ae 	beq.w	8007778 <_dtoa_r+0x518>
 800761c:	9b07      	ldr	r3, [sp, #28]
 800761e:	2b00      	cmp	r3, #0
 8007620:	f000 80aa 	beq.w	8007778 <_dtoa_r+0x518>
 8007624:	9b00      	ldr	r3, [sp, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	dd37      	ble.n	800769a <_dtoa_r+0x43a>
 800762a:	1e7b      	subs	r3, r7, #1
 800762c:	9304      	str	r3, [sp, #16]
 800762e:	4620      	mov	r0, r4
 8007630:	4b7d      	ldr	r3, [pc, #500]	@ (8007828 <_dtoa_r+0x5c8>)
 8007632:	2200      	movs	r2, #0
 8007634:	4629      	mov	r1, r5
 8007636:	f7f8 ffff 	bl	8000638 <__aeabi_dmul>
 800763a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800763e:	9c00      	ldr	r4, [sp, #0]
 8007640:	3601      	adds	r6, #1
 8007642:	4630      	mov	r0, r6
 8007644:	f7f8 ff8e 	bl	8000564 <__aeabi_i2d>
 8007648:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800764c:	f7f8 fff4 	bl	8000638 <__aeabi_dmul>
 8007650:	4b76      	ldr	r3, [pc, #472]	@ (800782c <_dtoa_r+0x5cc>)
 8007652:	2200      	movs	r2, #0
 8007654:	f7f8 fe3a 	bl	80002cc <__adddf3>
 8007658:	4605      	mov	r5, r0
 800765a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800765e:	2c00      	cmp	r4, #0
 8007660:	f040 808d 	bne.w	800777e <_dtoa_r+0x51e>
 8007664:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007668:	4b71      	ldr	r3, [pc, #452]	@ (8007830 <_dtoa_r+0x5d0>)
 800766a:	2200      	movs	r2, #0
 800766c:	f7f8 fe2c 	bl	80002c8 <__aeabi_dsub>
 8007670:	4602      	mov	r2, r0
 8007672:	460b      	mov	r3, r1
 8007674:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007678:	462a      	mov	r2, r5
 800767a:	4633      	mov	r3, r6
 800767c:	f7f9 fa6c 	bl	8000b58 <__aeabi_dcmpgt>
 8007680:	2800      	cmp	r0, #0
 8007682:	f040 828b 	bne.w	8007b9c <_dtoa_r+0x93c>
 8007686:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800768a:	462a      	mov	r2, r5
 800768c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007690:	f7f9 fa44 	bl	8000b1c <__aeabi_dcmplt>
 8007694:	2800      	cmp	r0, #0
 8007696:	f040 8128 	bne.w	80078ea <_dtoa_r+0x68a>
 800769a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800769e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80076a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	f2c0 815a 	blt.w	800795e <_dtoa_r+0x6fe>
 80076aa:	2f0e      	cmp	r7, #14
 80076ac:	f300 8157 	bgt.w	800795e <_dtoa_r+0x6fe>
 80076b0:	4b5a      	ldr	r3, [pc, #360]	@ (800781c <_dtoa_r+0x5bc>)
 80076b2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80076b6:	ed93 7b00 	vldr	d7, [r3]
 80076ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80076bc:	2b00      	cmp	r3, #0
 80076be:	ed8d 7b00 	vstr	d7, [sp]
 80076c2:	da03      	bge.n	80076cc <_dtoa_r+0x46c>
 80076c4:	9b07      	ldr	r3, [sp, #28]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	f340 8101 	ble.w	80078ce <_dtoa_r+0x66e>
 80076cc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80076d0:	4656      	mov	r6, sl
 80076d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076d6:	4620      	mov	r0, r4
 80076d8:	4629      	mov	r1, r5
 80076da:	f7f9 f8d7 	bl	800088c <__aeabi_ddiv>
 80076de:	f7f9 fa5b 	bl	8000b98 <__aeabi_d2iz>
 80076e2:	4680      	mov	r8, r0
 80076e4:	f7f8 ff3e 	bl	8000564 <__aeabi_i2d>
 80076e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076ec:	f7f8 ffa4 	bl	8000638 <__aeabi_dmul>
 80076f0:	4602      	mov	r2, r0
 80076f2:	460b      	mov	r3, r1
 80076f4:	4620      	mov	r0, r4
 80076f6:	4629      	mov	r1, r5
 80076f8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80076fc:	f7f8 fde4 	bl	80002c8 <__aeabi_dsub>
 8007700:	f806 4b01 	strb.w	r4, [r6], #1
 8007704:	9d07      	ldr	r5, [sp, #28]
 8007706:	eba6 040a 	sub.w	r4, r6, sl
 800770a:	42a5      	cmp	r5, r4
 800770c:	4602      	mov	r2, r0
 800770e:	460b      	mov	r3, r1
 8007710:	f040 8117 	bne.w	8007942 <_dtoa_r+0x6e2>
 8007714:	f7f8 fdda 	bl	80002cc <__adddf3>
 8007718:	e9dd 2300 	ldrd	r2, r3, [sp]
 800771c:	4604      	mov	r4, r0
 800771e:	460d      	mov	r5, r1
 8007720:	f7f9 fa1a 	bl	8000b58 <__aeabi_dcmpgt>
 8007724:	2800      	cmp	r0, #0
 8007726:	f040 80f9 	bne.w	800791c <_dtoa_r+0x6bc>
 800772a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800772e:	4620      	mov	r0, r4
 8007730:	4629      	mov	r1, r5
 8007732:	f7f9 f9e9 	bl	8000b08 <__aeabi_dcmpeq>
 8007736:	b118      	cbz	r0, 8007740 <_dtoa_r+0x4e0>
 8007738:	f018 0f01 	tst.w	r8, #1
 800773c:	f040 80ee 	bne.w	800791c <_dtoa_r+0x6bc>
 8007740:	4649      	mov	r1, r9
 8007742:	4658      	mov	r0, fp
 8007744:	f000 fc90 	bl	8008068 <_Bfree>
 8007748:	2300      	movs	r3, #0
 800774a:	7033      	strb	r3, [r6, #0]
 800774c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800774e:	3701      	adds	r7, #1
 8007750:	601f      	str	r7, [r3, #0]
 8007752:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007754:	2b00      	cmp	r3, #0
 8007756:	f000 831d 	beq.w	8007d94 <_dtoa_r+0xb34>
 800775a:	601e      	str	r6, [r3, #0]
 800775c:	e31a      	b.n	8007d94 <_dtoa_r+0xb34>
 800775e:	07e2      	lsls	r2, r4, #31
 8007760:	d505      	bpl.n	800776e <_dtoa_r+0x50e>
 8007762:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007766:	f7f8 ff67 	bl	8000638 <__aeabi_dmul>
 800776a:	3601      	adds	r6, #1
 800776c:	2301      	movs	r3, #1
 800776e:	1064      	asrs	r4, r4, #1
 8007770:	3508      	adds	r5, #8
 8007772:	e73f      	b.n	80075f4 <_dtoa_r+0x394>
 8007774:	2602      	movs	r6, #2
 8007776:	e742      	b.n	80075fe <_dtoa_r+0x39e>
 8007778:	9c07      	ldr	r4, [sp, #28]
 800777a:	9704      	str	r7, [sp, #16]
 800777c:	e761      	b.n	8007642 <_dtoa_r+0x3e2>
 800777e:	4b27      	ldr	r3, [pc, #156]	@ (800781c <_dtoa_r+0x5bc>)
 8007780:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007782:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007786:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800778a:	4454      	add	r4, sl
 800778c:	2900      	cmp	r1, #0
 800778e:	d053      	beq.n	8007838 <_dtoa_r+0x5d8>
 8007790:	4928      	ldr	r1, [pc, #160]	@ (8007834 <_dtoa_r+0x5d4>)
 8007792:	2000      	movs	r0, #0
 8007794:	f7f9 f87a 	bl	800088c <__aeabi_ddiv>
 8007798:	4633      	mov	r3, r6
 800779a:	462a      	mov	r2, r5
 800779c:	f7f8 fd94 	bl	80002c8 <__aeabi_dsub>
 80077a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80077a4:	4656      	mov	r6, sl
 80077a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077aa:	f7f9 f9f5 	bl	8000b98 <__aeabi_d2iz>
 80077ae:	4605      	mov	r5, r0
 80077b0:	f7f8 fed8 	bl	8000564 <__aeabi_i2d>
 80077b4:	4602      	mov	r2, r0
 80077b6:	460b      	mov	r3, r1
 80077b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077bc:	f7f8 fd84 	bl	80002c8 <__aeabi_dsub>
 80077c0:	3530      	adds	r5, #48	@ 0x30
 80077c2:	4602      	mov	r2, r0
 80077c4:	460b      	mov	r3, r1
 80077c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80077ca:	f806 5b01 	strb.w	r5, [r6], #1
 80077ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80077d2:	f7f9 f9a3 	bl	8000b1c <__aeabi_dcmplt>
 80077d6:	2800      	cmp	r0, #0
 80077d8:	d171      	bne.n	80078be <_dtoa_r+0x65e>
 80077da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80077de:	4911      	ldr	r1, [pc, #68]	@ (8007824 <_dtoa_r+0x5c4>)
 80077e0:	2000      	movs	r0, #0
 80077e2:	f7f8 fd71 	bl	80002c8 <__aeabi_dsub>
 80077e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80077ea:	f7f9 f997 	bl	8000b1c <__aeabi_dcmplt>
 80077ee:	2800      	cmp	r0, #0
 80077f0:	f040 8095 	bne.w	800791e <_dtoa_r+0x6be>
 80077f4:	42a6      	cmp	r6, r4
 80077f6:	f43f af50 	beq.w	800769a <_dtoa_r+0x43a>
 80077fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80077fe:	4b0a      	ldr	r3, [pc, #40]	@ (8007828 <_dtoa_r+0x5c8>)
 8007800:	2200      	movs	r2, #0
 8007802:	f7f8 ff19 	bl	8000638 <__aeabi_dmul>
 8007806:	4b08      	ldr	r3, [pc, #32]	@ (8007828 <_dtoa_r+0x5c8>)
 8007808:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800780c:	2200      	movs	r2, #0
 800780e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007812:	f7f8 ff11 	bl	8000638 <__aeabi_dmul>
 8007816:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800781a:	e7c4      	b.n	80077a6 <_dtoa_r+0x546>
 800781c:	0800b148 	.word	0x0800b148
 8007820:	0800b120 	.word	0x0800b120
 8007824:	3ff00000 	.word	0x3ff00000
 8007828:	40240000 	.word	0x40240000
 800782c:	401c0000 	.word	0x401c0000
 8007830:	40140000 	.word	0x40140000
 8007834:	3fe00000 	.word	0x3fe00000
 8007838:	4631      	mov	r1, r6
 800783a:	4628      	mov	r0, r5
 800783c:	f7f8 fefc 	bl	8000638 <__aeabi_dmul>
 8007840:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007844:	9415      	str	r4, [sp, #84]	@ 0x54
 8007846:	4656      	mov	r6, sl
 8007848:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800784c:	f7f9 f9a4 	bl	8000b98 <__aeabi_d2iz>
 8007850:	4605      	mov	r5, r0
 8007852:	f7f8 fe87 	bl	8000564 <__aeabi_i2d>
 8007856:	4602      	mov	r2, r0
 8007858:	460b      	mov	r3, r1
 800785a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800785e:	f7f8 fd33 	bl	80002c8 <__aeabi_dsub>
 8007862:	3530      	adds	r5, #48	@ 0x30
 8007864:	f806 5b01 	strb.w	r5, [r6], #1
 8007868:	4602      	mov	r2, r0
 800786a:	460b      	mov	r3, r1
 800786c:	42a6      	cmp	r6, r4
 800786e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007872:	f04f 0200 	mov.w	r2, #0
 8007876:	d124      	bne.n	80078c2 <_dtoa_r+0x662>
 8007878:	4bac      	ldr	r3, [pc, #688]	@ (8007b2c <_dtoa_r+0x8cc>)
 800787a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800787e:	f7f8 fd25 	bl	80002cc <__adddf3>
 8007882:	4602      	mov	r2, r0
 8007884:	460b      	mov	r3, r1
 8007886:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800788a:	f7f9 f965 	bl	8000b58 <__aeabi_dcmpgt>
 800788e:	2800      	cmp	r0, #0
 8007890:	d145      	bne.n	800791e <_dtoa_r+0x6be>
 8007892:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007896:	49a5      	ldr	r1, [pc, #660]	@ (8007b2c <_dtoa_r+0x8cc>)
 8007898:	2000      	movs	r0, #0
 800789a:	f7f8 fd15 	bl	80002c8 <__aeabi_dsub>
 800789e:	4602      	mov	r2, r0
 80078a0:	460b      	mov	r3, r1
 80078a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078a6:	f7f9 f939 	bl	8000b1c <__aeabi_dcmplt>
 80078aa:	2800      	cmp	r0, #0
 80078ac:	f43f aef5 	beq.w	800769a <_dtoa_r+0x43a>
 80078b0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80078b2:	1e73      	subs	r3, r6, #1
 80078b4:	9315      	str	r3, [sp, #84]	@ 0x54
 80078b6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80078ba:	2b30      	cmp	r3, #48	@ 0x30
 80078bc:	d0f8      	beq.n	80078b0 <_dtoa_r+0x650>
 80078be:	9f04      	ldr	r7, [sp, #16]
 80078c0:	e73e      	b.n	8007740 <_dtoa_r+0x4e0>
 80078c2:	4b9b      	ldr	r3, [pc, #620]	@ (8007b30 <_dtoa_r+0x8d0>)
 80078c4:	f7f8 feb8 	bl	8000638 <__aeabi_dmul>
 80078c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078cc:	e7bc      	b.n	8007848 <_dtoa_r+0x5e8>
 80078ce:	d10c      	bne.n	80078ea <_dtoa_r+0x68a>
 80078d0:	4b98      	ldr	r3, [pc, #608]	@ (8007b34 <_dtoa_r+0x8d4>)
 80078d2:	2200      	movs	r2, #0
 80078d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078d8:	f7f8 feae 	bl	8000638 <__aeabi_dmul>
 80078dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078e0:	f7f9 f930 	bl	8000b44 <__aeabi_dcmpge>
 80078e4:	2800      	cmp	r0, #0
 80078e6:	f000 8157 	beq.w	8007b98 <_dtoa_r+0x938>
 80078ea:	2400      	movs	r4, #0
 80078ec:	4625      	mov	r5, r4
 80078ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80078f0:	43db      	mvns	r3, r3
 80078f2:	9304      	str	r3, [sp, #16]
 80078f4:	4656      	mov	r6, sl
 80078f6:	2700      	movs	r7, #0
 80078f8:	4621      	mov	r1, r4
 80078fa:	4658      	mov	r0, fp
 80078fc:	f000 fbb4 	bl	8008068 <_Bfree>
 8007900:	2d00      	cmp	r5, #0
 8007902:	d0dc      	beq.n	80078be <_dtoa_r+0x65e>
 8007904:	b12f      	cbz	r7, 8007912 <_dtoa_r+0x6b2>
 8007906:	42af      	cmp	r7, r5
 8007908:	d003      	beq.n	8007912 <_dtoa_r+0x6b2>
 800790a:	4639      	mov	r1, r7
 800790c:	4658      	mov	r0, fp
 800790e:	f000 fbab 	bl	8008068 <_Bfree>
 8007912:	4629      	mov	r1, r5
 8007914:	4658      	mov	r0, fp
 8007916:	f000 fba7 	bl	8008068 <_Bfree>
 800791a:	e7d0      	b.n	80078be <_dtoa_r+0x65e>
 800791c:	9704      	str	r7, [sp, #16]
 800791e:	4633      	mov	r3, r6
 8007920:	461e      	mov	r6, r3
 8007922:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007926:	2a39      	cmp	r2, #57	@ 0x39
 8007928:	d107      	bne.n	800793a <_dtoa_r+0x6da>
 800792a:	459a      	cmp	sl, r3
 800792c:	d1f8      	bne.n	8007920 <_dtoa_r+0x6c0>
 800792e:	9a04      	ldr	r2, [sp, #16]
 8007930:	3201      	adds	r2, #1
 8007932:	9204      	str	r2, [sp, #16]
 8007934:	2230      	movs	r2, #48	@ 0x30
 8007936:	f88a 2000 	strb.w	r2, [sl]
 800793a:	781a      	ldrb	r2, [r3, #0]
 800793c:	3201      	adds	r2, #1
 800793e:	701a      	strb	r2, [r3, #0]
 8007940:	e7bd      	b.n	80078be <_dtoa_r+0x65e>
 8007942:	4b7b      	ldr	r3, [pc, #492]	@ (8007b30 <_dtoa_r+0x8d0>)
 8007944:	2200      	movs	r2, #0
 8007946:	f7f8 fe77 	bl	8000638 <__aeabi_dmul>
 800794a:	2200      	movs	r2, #0
 800794c:	2300      	movs	r3, #0
 800794e:	4604      	mov	r4, r0
 8007950:	460d      	mov	r5, r1
 8007952:	f7f9 f8d9 	bl	8000b08 <__aeabi_dcmpeq>
 8007956:	2800      	cmp	r0, #0
 8007958:	f43f aebb 	beq.w	80076d2 <_dtoa_r+0x472>
 800795c:	e6f0      	b.n	8007740 <_dtoa_r+0x4e0>
 800795e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007960:	2a00      	cmp	r2, #0
 8007962:	f000 80db 	beq.w	8007b1c <_dtoa_r+0x8bc>
 8007966:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007968:	2a01      	cmp	r2, #1
 800796a:	f300 80bf 	bgt.w	8007aec <_dtoa_r+0x88c>
 800796e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007970:	2a00      	cmp	r2, #0
 8007972:	f000 80b7 	beq.w	8007ae4 <_dtoa_r+0x884>
 8007976:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800797a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800797c:	4646      	mov	r6, r8
 800797e:	9a08      	ldr	r2, [sp, #32]
 8007980:	2101      	movs	r1, #1
 8007982:	441a      	add	r2, r3
 8007984:	4658      	mov	r0, fp
 8007986:	4498      	add	r8, r3
 8007988:	9208      	str	r2, [sp, #32]
 800798a:	f000 fc6b 	bl	8008264 <__i2b>
 800798e:	4605      	mov	r5, r0
 8007990:	b15e      	cbz	r6, 80079aa <_dtoa_r+0x74a>
 8007992:	9b08      	ldr	r3, [sp, #32]
 8007994:	2b00      	cmp	r3, #0
 8007996:	dd08      	ble.n	80079aa <_dtoa_r+0x74a>
 8007998:	42b3      	cmp	r3, r6
 800799a:	9a08      	ldr	r2, [sp, #32]
 800799c:	bfa8      	it	ge
 800799e:	4633      	movge	r3, r6
 80079a0:	eba8 0803 	sub.w	r8, r8, r3
 80079a4:	1af6      	subs	r6, r6, r3
 80079a6:	1ad3      	subs	r3, r2, r3
 80079a8:	9308      	str	r3, [sp, #32]
 80079aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079ac:	b1f3      	cbz	r3, 80079ec <_dtoa_r+0x78c>
 80079ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	f000 80b7 	beq.w	8007b24 <_dtoa_r+0x8c4>
 80079b6:	b18c      	cbz	r4, 80079dc <_dtoa_r+0x77c>
 80079b8:	4629      	mov	r1, r5
 80079ba:	4622      	mov	r2, r4
 80079bc:	4658      	mov	r0, fp
 80079be:	f000 fd11 	bl	80083e4 <__pow5mult>
 80079c2:	464a      	mov	r2, r9
 80079c4:	4601      	mov	r1, r0
 80079c6:	4605      	mov	r5, r0
 80079c8:	4658      	mov	r0, fp
 80079ca:	f000 fc61 	bl	8008290 <__multiply>
 80079ce:	4649      	mov	r1, r9
 80079d0:	9004      	str	r0, [sp, #16]
 80079d2:	4658      	mov	r0, fp
 80079d4:	f000 fb48 	bl	8008068 <_Bfree>
 80079d8:	9b04      	ldr	r3, [sp, #16]
 80079da:	4699      	mov	r9, r3
 80079dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079de:	1b1a      	subs	r2, r3, r4
 80079e0:	d004      	beq.n	80079ec <_dtoa_r+0x78c>
 80079e2:	4649      	mov	r1, r9
 80079e4:	4658      	mov	r0, fp
 80079e6:	f000 fcfd 	bl	80083e4 <__pow5mult>
 80079ea:	4681      	mov	r9, r0
 80079ec:	2101      	movs	r1, #1
 80079ee:	4658      	mov	r0, fp
 80079f0:	f000 fc38 	bl	8008264 <__i2b>
 80079f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079f6:	4604      	mov	r4, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	f000 81cf 	beq.w	8007d9c <_dtoa_r+0xb3c>
 80079fe:	461a      	mov	r2, r3
 8007a00:	4601      	mov	r1, r0
 8007a02:	4658      	mov	r0, fp
 8007a04:	f000 fcee 	bl	80083e4 <__pow5mult>
 8007a08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	4604      	mov	r4, r0
 8007a0e:	f300 8095 	bgt.w	8007b3c <_dtoa_r+0x8dc>
 8007a12:	9b02      	ldr	r3, [sp, #8]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	f040 8087 	bne.w	8007b28 <_dtoa_r+0x8c8>
 8007a1a:	9b03      	ldr	r3, [sp, #12]
 8007a1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f040 8089 	bne.w	8007b38 <_dtoa_r+0x8d8>
 8007a26:	9b03      	ldr	r3, [sp, #12]
 8007a28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007a2c:	0d1b      	lsrs	r3, r3, #20
 8007a2e:	051b      	lsls	r3, r3, #20
 8007a30:	b12b      	cbz	r3, 8007a3e <_dtoa_r+0x7de>
 8007a32:	9b08      	ldr	r3, [sp, #32]
 8007a34:	3301      	adds	r3, #1
 8007a36:	9308      	str	r3, [sp, #32]
 8007a38:	f108 0801 	add.w	r8, r8, #1
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	f000 81b0 	beq.w	8007da8 <_dtoa_r+0xb48>
 8007a48:	6923      	ldr	r3, [r4, #16]
 8007a4a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007a4e:	6918      	ldr	r0, [r3, #16]
 8007a50:	f000 fbbc 	bl	80081cc <__hi0bits>
 8007a54:	f1c0 0020 	rsb	r0, r0, #32
 8007a58:	9b08      	ldr	r3, [sp, #32]
 8007a5a:	4418      	add	r0, r3
 8007a5c:	f010 001f 	ands.w	r0, r0, #31
 8007a60:	d077      	beq.n	8007b52 <_dtoa_r+0x8f2>
 8007a62:	f1c0 0320 	rsb	r3, r0, #32
 8007a66:	2b04      	cmp	r3, #4
 8007a68:	dd6b      	ble.n	8007b42 <_dtoa_r+0x8e2>
 8007a6a:	9b08      	ldr	r3, [sp, #32]
 8007a6c:	f1c0 001c 	rsb	r0, r0, #28
 8007a70:	4403      	add	r3, r0
 8007a72:	4480      	add	r8, r0
 8007a74:	4406      	add	r6, r0
 8007a76:	9308      	str	r3, [sp, #32]
 8007a78:	f1b8 0f00 	cmp.w	r8, #0
 8007a7c:	dd05      	ble.n	8007a8a <_dtoa_r+0x82a>
 8007a7e:	4649      	mov	r1, r9
 8007a80:	4642      	mov	r2, r8
 8007a82:	4658      	mov	r0, fp
 8007a84:	f000 fd08 	bl	8008498 <__lshift>
 8007a88:	4681      	mov	r9, r0
 8007a8a:	9b08      	ldr	r3, [sp, #32]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	dd05      	ble.n	8007a9c <_dtoa_r+0x83c>
 8007a90:	4621      	mov	r1, r4
 8007a92:	461a      	mov	r2, r3
 8007a94:	4658      	mov	r0, fp
 8007a96:	f000 fcff 	bl	8008498 <__lshift>
 8007a9a:	4604      	mov	r4, r0
 8007a9c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d059      	beq.n	8007b56 <_dtoa_r+0x8f6>
 8007aa2:	4621      	mov	r1, r4
 8007aa4:	4648      	mov	r0, r9
 8007aa6:	f000 fd63 	bl	8008570 <__mcmp>
 8007aaa:	2800      	cmp	r0, #0
 8007aac:	da53      	bge.n	8007b56 <_dtoa_r+0x8f6>
 8007aae:	1e7b      	subs	r3, r7, #1
 8007ab0:	9304      	str	r3, [sp, #16]
 8007ab2:	4649      	mov	r1, r9
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	220a      	movs	r2, #10
 8007ab8:	4658      	mov	r0, fp
 8007aba:	f000 faf7 	bl	80080ac <__multadd>
 8007abe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ac0:	4681      	mov	r9, r0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	f000 8172 	beq.w	8007dac <_dtoa_r+0xb4c>
 8007ac8:	2300      	movs	r3, #0
 8007aca:	4629      	mov	r1, r5
 8007acc:	220a      	movs	r2, #10
 8007ace:	4658      	mov	r0, fp
 8007ad0:	f000 faec 	bl	80080ac <__multadd>
 8007ad4:	9b00      	ldr	r3, [sp, #0]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	4605      	mov	r5, r0
 8007ada:	dc67      	bgt.n	8007bac <_dtoa_r+0x94c>
 8007adc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ade:	2b02      	cmp	r3, #2
 8007ae0:	dc41      	bgt.n	8007b66 <_dtoa_r+0x906>
 8007ae2:	e063      	b.n	8007bac <_dtoa_r+0x94c>
 8007ae4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007ae6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007aea:	e746      	b.n	800797a <_dtoa_r+0x71a>
 8007aec:	9b07      	ldr	r3, [sp, #28]
 8007aee:	1e5c      	subs	r4, r3, #1
 8007af0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007af2:	42a3      	cmp	r3, r4
 8007af4:	bfbf      	itttt	lt
 8007af6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007af8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007afa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007afc:	1ae3      	sublt	r3, r4, r3
 8007afe:	bfb4      	ite	lt
 8007b00:	18d2      	addlt	r2, r2, r3
 8007b02:	1b1c      	subge	r4, r3, r4
 8007b04:	9b07      	ldr	r3, [sp, #28]
 8007b06:	bfbc      	itt	lt
 8007b08:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007b0a:	2400      	movlt	r4, #0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	bfb5      	itete	lt
 8007b10:	eba8 0603 	sublt.w	r6, r8, r3
 8007b14:	9b07      	ldrge	r3, [sp, #28]
 8007b16:	2300      	movlt	r3, #0
 8007b18:	4646      	movge	r6, r8
 8007b1a:	e730      	b.n	800797e <_dtoa_r+0x71e>
 8007b1c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007b1e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007b20:	4646      	mov	r6, r8
 8007b22:	e735      	b.n	8007990 <_dtoa_r+0x730>
 8007b24:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007b26:	e75c      	b.n	80079e2 <_dtoa_r+0x782>
 8007b28:	2300      	movs	r3, #0
 8007b2a:	e788      	b.n	8007a3e <_dtoa_r+0x7de>
 8007b2c:	3fe00000 	.word	0x3fe00000
 8007b30:	40240000 	.word	0x40240000
 8007b34:	40140000 	.word	0x40140000
 8007b38:	9b02      	ldr	r3, [sp, #8]
 8007b3a:	e780      	b.n	8007a3e <_dtoa_r+0x7de>
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b40:	e782      	b.n	8007a48 <_dtoa_r+0x7e8>
 8007b42:	d099      	beq.n	8007a78 <_dtoa_r+0x818>
 8007b44:	9a08      	ldr	r2, [sp, #32]
 8007b46:	331c      	adds	r3, #28
 8007b48:	441a      	add	r2, r3
 8007b4a:	4498      	add	r8, r3
 8007b4c:	441e      	add	r6, r3
 8007b4e:	9208      	str	r2, [sp, #32]
 8007b50:	e792      	b.n	8007a78 <_dtoa_r+0x818>
 8007b52:	4603      	mov	r3, r0
 8007b54:	e7f6      	b.n	8007b44 <_dtoa_r+0x8e4>
 8007b56:	9b07      	ldr	r3, [sp, #28]
 8007b58:	9704      	str	r7, [sp, #16]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	dc20      	bgt.n	8007ba0 <_dtoa_r+0x940>
 8007b5e:	9300      	str	r3, [sp, #0]
 8007b60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b62:	2b02      	cmp	r3, #2
 8007b64:	dd1e      	ble.n	8007ba4 <_dtoa_r+0x944>
 8007b66:	9b00      	ldr	r3, [sp, #0]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f47f aec0 	bne.w	80078ee <_dtoa_r+0x68e>
 8007b6e:	4621      	mov	r1, r4
 8007b70:	2205      	movs	r2, #5
 8007b72:	4658      	mov	r0, fp
 8007b74:	f000 fa9a 	bl	80080ac <__multadd>
 8007b78:	4601      	mov	r1, r0
 8007b7a:	4604      	mov	r4, r0
 8007b7c:	4648      	mov	r0, r9
 8007b7e:	f000 fcf7 	bl	8008570 <__mcmp>
 8007b82:	2800      	cmp	r0, #0
 8007b84:	f77f aeb3 	ble.w	80078ee <_dtoa_r+0x68e>
 8007b88:	4656      	mov	r6, sl
 8007b8a:	2331      	movs	r3, #49	@ 0x31
 8007b8c:	f806 3b01 	strb.w	r3, [r6], #1
 8007b90:	9b04      	ldr	r3, [sp, #16]
 8007b92:	3301      	adds	r3, #1
 8007b94:	9304      	str	r3, [sp, #16]
 8007b96:	e6ae      	b.n	80078f6 <_dtoa_r+0x696>
 8007b98:	9c07      	ldr	r4, [sp, #28]
 8007b9a:	9704      	str	r7, [sp, #16]
 8007b9c:	4625      	mov	r5, r4
 8007b9e:	e7f3      	b.n	8007b88 <_dtoa_r+0x928>
 8007ba0:	9b07      	ldr	r3, [sp, #28]
 8007ba2:	9300      	str	r3, [sp, #0]
 8007ba4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	f000 8104 	beq.w	8007db4 <_dtoa_r+0xb54>
 8007bac:	2e00      	cmp	r6, #0
 8007bae:	dd05      	ble.n	8007bbc <_dtoa_r+0x95c>
 8007bb0:	4629      	mov	r1, r5
 8007bb2:	4632      	mov	r2, r6
 8007bb4:	4658      	mov	r0, fp
 8007bb6:	f000 fc6f 	bl	8008498 <__lshift>
 8007bba:	4605      	mov	r5, r0
 8007bbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d05a      	beq.n	8007c78 <_dtoa_r+0xa18>
 8007bc2:	6869      	ldr	r1, [r5, #4]
 8007bc4:	4658      	mov	r0, fp
 8007bc6:	f000 fa0f 	bl	8007fe8 <_Balloc>
 8007bca:	4606      	mov	r6, r0
 8007bcc:	b928      	cbnz	r0, 8007bda <_dtoa_r+0x97a>
 8007bce:	4b84      	ldr	r3, [pc, #528]	@ (8007de0 <_dtoa_r+0xb80>)
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007bd6:	f7ff bb5a 	b.w	800728e <_dtoa_r+0x2e>
 8007bda:	692a      	ldr	r2, [r5, #16]
 8007bdc:	3202      	adds	r2, #2
 8007bde:	0092      	lsls	r2, r2, #2
 8007be0:	f105 010c 	add.w	r1, r5, #12
 8007be4:	300c      	adds	r0, #12
 8007be6:	f002 f94b 	bl	8009e80 <memcpy>
 8007bea:	2201      	movs	r2, #1
 8007bec:	4631      	mov	r1, r6
 8007bee:	4658      	mov	r0, fp
 8007bf0:	f000 fc52 	bl	8008498 <__lshift>
 8007bf4:	f10a 0301 	add.w	r3, sl, #1
 8007bf8:	9307      	str	r3, [sp, #28]
 8007bfa:	9b00      	ldr	r3, [sp, #0]
 8007bfc:	4453      	add	r3, sl
 8007bfe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c00:	9b02      	ldr	r3, [sp, #8]
 8007c02:	f003 0301 	and.w	r3, r3, #1
 8007c06:	462f      	mov	r7, r5
 8007c08:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c0a:	4605      	mov	r5, r0
 8007c0c:	9b07      	ldr	r3, [sp, #28]
 8007c0e:	4621      	mov	r1, r4
 8007c10:	3b01      	subs	r3, #1
 8007c12:	4648      	mov	r0, r9
 8007c14:	9300      	str	r3, [sp, #0]
 8007c16:	f7ff fa9b 	bl	8007150 <quorem>
 8007c1a:	4639      	mov	r1, r7
 8007c1c:	9002      	str	r0, [sp, #8]
 8007c1e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007c22:	4648      	mov	r0, r9
 8007c24:	f000 fca4 	bl	8008570 <__mcmp>
 8007c28:	462a      	mov	r2, r5
 8007c2a:	9008      	str	r0, [sp, #32]
 8007c2c:	4621      	mov	r1, r4
 8007c2e:	4658      	mov	r0, fp
 8007c30:	f000 fcba 	bl	80085a8 <__mdiff>
 8007c34:	68c2      	ldr	r2, [r0, #12]
 8007c36:	4606      	mov	r6, r0
 8007c38:	bb02      	cbnz	r2, 8007c7c <_dtoa_r+0xa1c>
 8007c3a:	4601      	mov	r1, r0
 8007c3c:	4648      	mov	r0, r9
 8007c3e:	f000 fc97 	bl	8008570 <__mcmp>
 8007c42:	4602      	mov	r2, r0
 8007c44:	4631      	mov	r1, r6
 8007c46:	4658      	mov	r0, fp
 8007c48:	920e      	str	r2, [sp, #56]	@ 0x38
 8007c4a:	f000 fa0d 	bl	8008068 <_Bfree>
 8007c4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c50:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c52:	9e07      	ldr	r6, [sp, #28]
 8007c54:	ea43 0102 	orr.w	r1, r3, r2
 8007c58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c5a:	4319      	orrs	r1, r3
 8007c5c:	d110      	bne.n	8007c80 <_dtoa_r+0xa20>
 8007c5e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c62:	d029      	beq.n	8007cb8 <_dtoa_r+0xa58>
 8007c64:	9b08      	ldr	r3, [sp, #32]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	dd02      	ble.n	8007c70 <_dtoa_r+0xa10>
 8007c6a:	9b02      	ldr	r3, [sp, #8]
 8007c6c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007c70:	9b00      	ldr	r3, [sp, #0]
 8007c72:	f883 8000 	strb.w	r8, [r3]
 8007c76:	e63f      	b.n	80078f8 <_dtoa_r+0x698>
 8007c78:	4628      	mov	r0, r5
 8007c7a:	e7bb      	b.n	8007bf4 <_dtoa_r+0x994>
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	e7e1      	b.n	8007c44 <_dtoa_r+0x9e4>
 8007c80:	9b08      	ldr	r3, [sp, #32]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	db04      	blt.n	8007c90 <_dtoa_r+0xa30>
 8007c86:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007c88:	430b      	orrs	r3, r1
 8007c8a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007c8c:	430b      	orrs	r3, r1
 8007c8e:	d120      	bne.n	8007cd2 <_dtoa_r+0xa72>
 8007c90:	2a00      	cmp	r2, #0
 8007c92:	dded      	ble.n	8007c70 <_dtoa_r+0xa10>
 8007c94:	4649      	mov	r1, r9
 8007c96:	2201      	movs	r2, #1
 8007c98:	4658      	mov	r0, fp
 8007c9a:	f000 fbfd 	bl	8008498 <__lshift>
 8007c9e:	4621      	mov	r1, r4
 8007ca0:	4681      	mov	r9, r0
 8007ca2:	f000 fc65 	bl	8008570 <__mcmp>
 8007ca6:	2800      	cmp	r0, #0
 8007ca8:	dc03      	bgt.n	8007cb2 <_dtoa_r+0xa52>
 8007caa:	d1e1      	bne.n	8007c70 <_dtoa_r+0xa10>
 8007cac:	f018 0f01 	tst.w	r8, #1
 8007cb0:	d0de      	beq.n	8007c70 <_dtoa_r+0xa10>
 8007cb2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007cb6:	d1d8      	bne.n	8007c6a <_dtoa_r+0xa0a>
 8007cb8:	9a00      	ldr	r2, [sp, #0]
 8007cba:	2339      	movs	r3, #57	@ 0x39
 8007cbc:	7013      	strb	r3, [r2, #0]
 8007cbe:	4633      	mov	r3, r6
 8007cc0:	461e      	mov	r6, r3
 8007cc2:	3b01      	subs	r3, #1
 8007cc4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007cc8:	2a39      	cmp	r2, #57	@ 0x39
 8007cca:	d052      	beq.n	8007d72 <_dtoa_r+0xb12>
 8007ccc:	3201      	adds	r2, #1
 8007cce:	701a      	strb	r2, [r3, #0]
 8007cd0:	e612      	b.n	80078f8 <_dtoa_r+0x698>
 8007cd2:	2a00      	cmp	r2, #0
 8007cd4:	dd07      	ble.n	8007ce6 <_dtoa_r+0xa86>
 8007cd6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007cda:	d0ed      	beq.n	8007cb8 <_dtoa_r+0xa58>
 8007cdc:	9a00      	ldr	r2, [sp, #0]
 8007cde:	f108 0301 	add.w	r3, r8, #1
 8007ce2:	7013      	strb	r3, [r2, #0]
 8007ce4:	e608      	b.n	80078f8 <_dtoa_r+0x698>
 8007ce6:	9b07      	ldr	r3, [sp, #28]
 8007ce8:	9a07      	ldr	r2, [sp, #28]
 8007cea:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007cee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d028      	beq.n	8007d46 <_dtoa_r+0xae6>
 8007cf4:	4649      	mov	r1, r9
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	220a      	movs	r2, #10
 8007cfa:	4658      	mov	r0, fp
 8007cfc:	f000 f9d6 	bl	80080ac <__multadd>
 8007d00:	42af      	cmp	r7, r5
 8007d02:	4681      	mov	r9, r0
 8007d04:	f04f 0300 	mov.w	r3, #0
 8007d08:	f04f 020a 	mov.w	r2, #10
 8007d0c:	4639      	mov	r1, r7
 8007d0e:	4658      	mov	r0, fp
 8007d10:	d107      	bne.n	8007d22 <_dtoa_r+0xac2>
 8007d12:	f000 f9cb 	bl	80080ac <__multadd>
 8007d16:	4607      	mov	r7, r0
 8007d18:	4605      	mov	r5, r0
 8007d1a:	9b07      	ldr	r3, [sp, #28]
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	9307      	str	r3, [sp, #28]
 8007d20:	e774      	b.n	8007c0c <_dtoa_r+0x9ac>
 8007d22:	f000 f9c3 	bl	80080ac <__multadd>
 8007d26:	4629      	mov	r1, r5
 8007d28:	4607      	mov	r7, r0
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	220a      	movs	r2, #10
 8007d2e:	4658      	mov	r0, fp
 8007d30:	f000 f9bc 	bl	80080ac <__multadd>
 8007d34:	4605      	mov	r5, r0
 8007d36:	e7f0      	b.n	8007d1a <_dtoa_r+0xaba>
 8007d38:	9b00      	ldr	r3, [sp, #0]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	bfcc      	ite	gt
 8007d3e:	461e      	movgt	r6, r3
 8007d40:	2601      	movle	r6, #1
 8007d42:	4456      	add	r6, sl
 8007d44:	2700      	movs	r7, #0
 8007d46:	4649      	mov	r1, r9
 8007d48:	2201      	movs	r2, #1
 8007d4a:	4658      	mov	r0, fp
 8007d4c:	f000 fba4 	bl	8008498 <__lshift>
 8007d50:	4621      	mov	r1, r4
 8007d52:	4681      	mov	r9, r0
 8007d54:	f000 fc0c 	bl	8008570 <__mcmp>
 8007d58:	2800      	cmp	r0, #0
 8007d5a:	dcb0      	bgt.n	8007cbe <_dtoa_r+0xa5e>
 8007d5c:	d102      	bne.n	8007d64 <_dtoa_r+0xb04>
 8007d5e:	f018 0f01 	tst.w	r8, #1
 8007d62:	d1ac      	bne.n	8007cbe <_dtoa_r+0xa5e>
 8007d64:	4633      	mov	r3, r6
 8007d66:	461e      	mov	r6, r3
 8007d68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d6c:	2a30      	cmp	r2, #48	@ 0x30
 8007d6e:	d0fa      	beq.n	8007d66 <_dtoa_r+0xb06>
 8007d70:	e5c2      	b.n	80078f8 <_dtoa_r+0x698>
 8007d72:	459a      	cmp	sl, r3
 8007d74:	d1a4      	bne.n	8007cc0 <_dtoa_r+0xa60>
 8007d76:	9b04      	ldr	r3, [sp, #16]
 8007d78:	3301      	adds	r3, #1
 8007d7a:	9304      	str	r3, [sp, #16]
 8007d7c:	2331      	movs	r3, #49	@ 0x31
 8007d7e:	f88a 3000 	strb.w	r3, [sl]
 8007d82:	e5b9      	b.n	80078f8 <_dtoa_r+0x698>
 8007d84:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007d86:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007de4 <_dtoa_r+0xb84>
 8007d8a:	b11b      	cbz	r3, 8007d94 <_dtoa_r+0xb34>
 8007d8c:	f10a 0308 	add.w	r3, sl, #8
 8007d90:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007d92:	6013      	str	r3, [r2, #0]
 8007d94:	4650      	mov	r0, sl
 8007d96:	b019      	add	sp, #100	@ 0x64
 8007d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	f77f ae37 	ble.w	8007a12 <_dtoa_r+0x7b2>
 8007da4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007da6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007da8:	2001      	movs	r0, #1
 8007daa:	e655      	b.n	8007a58 <_dtoa_r+0x7f8>
 8007dac:	9b00      	ldr	r3, [sp, #0]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	f77f aed6 	ble.w	8007b60 <_dtoa_r+0x900>
 8007db4:	4656      	mov	r6, sl
 8007db6:	4621      	mov	r1, r4
 8007db8:	4648      	mov	r0, r9
 8007dba:	f7ff f9c9 	bl	8007150 <quorem>
 8007dbe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007dc2:	f806 8b01 	strb.w	r8, [r6], #1
 8007dc6:	9b00      	ldr	r3, [sp, #0]
 8007dc8:	eba6 020a 	sub.w	r2, r6, sl
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	ddb3      	ble.n	8007d38 <_dtoa_r+0xad8>
 8007dd0:	4649      	mov	r1, r9
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	220a      	movs	r2, #10
 8007dd6:	4658      	mov	r0, fp
 8007dd8:	f000 f968 	bl	80080ac <__multadd>
 8007ddc:	4681      	mov	r9, r0
 8007dde:	e7ea      	b.n	8007db6 <_dtoa_r+0xb56>
 8007de0:	0800b0a9 	.word	0x0800b0a9
 8007de4:	0800b02d 	.word	0x0800b02d

08007de8 <_free_r>:
 8007de8:	b538      	push	{r3, r4, r5, lr}
 8007dea:	4605      	mov	r5, r0
 8007dec:	2900      	cmp	r1, #0
 8007dee:	d041      	beq.n	8007e74 <_free_r+0x8c>
 8007df0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007df4:	1f0c      	subs	r4, r1, #4
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	bfb8      	it	lt
 8007dfa:	18e4      	addlt	r4, r4, r3
 8007dfc:	f000 f8e8 	bl	8007fd0 <__malloc_lock>
 8007e00:	4a1d      	ldr	r2, [pc, #116]	@ (8007e78 <_free_r+0x90>)
 8007e02:	6813      	ldr	r3, [r2, #0]
 8007e04:	b933      	cbnz	r3, 8007e14 <_free_r+0x2c>
 8007e06:	6063      	str	r3, [r4, #4]
 8007e08:	6014      	str	r4, [r2, #0]
 8007e0a:	4628      	mov	r0, r5
 8007e0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e10:	f000 b8e4 	b.w	8007fdc <__malloc_unlock>
 8007e14:	42a3      	cmp	r3, r4
 8007e16:	d908      	bls.n	8007e2a <_free_r+0x42>
 8007e18:	6820      	ldr	r0, [r4, #0]
 8007e1a:	1821      	adds	r1, r4, r0
 8007e1c:	428b      	cmp	r3, r1
 8007e1e:	bf01      	itttt	eq
 8007e20:	6819      	ldreq	r1, [r3, #0]
 8007e22:	685b      	ldreq	r3, [r3, #4]
 8007e24:	1809      	addeq	r1, r1, r0
 8007e26:	6021      	streq	r1, [r4, #0]
 8007e28:	e7ed      	b.n	8007e06 <_free_r+0x1e>
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	b10b      	cbz	r3, 8007e34 <_free_r+0x4c>
 8007e30:	42a3      	cmp	r3, r4
 8007e32:	d9fa      	bls.n	8007e2a <_free_r+0x42>
 8007e34:	6811      	ldr	r1, [r2, #0]
 8007e36:	1850      	adds	r0, r2, r1
 8007e38:	42a0      	cmp	r0, r4
 8007e3a:	d10b      	bne.n	8007e54 <_free_r+0x6c>
 8007e3c:	6820      	ldr	r0, [r4, #0]
 8007e3e:	4401      	add	r1, r0
 8007e40:	1850      	adds	r0, r2, r1
 8007e42:	4283      	cmp	r3, r0
 8007e44:	6011      	str	r1, [r2, #0]
 8007e46:	d1e0      	bne.n	8007e0a <_free_r+0x22>
 8007e48:	6818      	ldr	r0, [r3, #0]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	6053      	str	r3, [r2, #4]
 8007e4e:	4408      	add	r0, r1
 8007e50:	6010      	str	r0, [r2, #0]
 8007e52:	e7da      	b.n	8007e0a <_free_r+0x22>
 8007e54:	d902      	bls.n	8007e5c <_free_r+0x74>
 8007e56:	230c      	movs	r3, #12
 8007e58:	602b      	str	r3, [r5, #0]
 8007e5a:	e7d6      	b.n	8007e0a <_free_r+0x22>
 8007e5c:	6820      	ldr	r0, [r4, #0]
 8007e5e:	1821      	adds	r1, r4, r0
 8007e60:	428b      	cmp	r3, r1
 8007e62:	bf04      	itt	eq
 8007e64:	6819      	ldreq	r1, [r3, #0]
 8007e66:	685b      	ldreq	r3, [r3, #4]
 8007e68:	6063      	str	r3, [r4, #4]
 8007e6a:	bf04      	itt	eq
 8007e6c:	1809      	addeq	r1, r1, r0
 8007e6e:	6021      	streq	r1, [r4, #0]
 8007e70:	6054      	str	r4, [r2, #4]
 8007e72:	e7ca      	b.n	8007e0a <_free_r+0x22>
 8007e74:	bd38      	pop	{r3, r4, r5, pc}
 8007e76:	bf00      	nop
 8007e78:	20011b68 	.word	0x20011b68

08007e7c <malloc>:
 8007e7c:	4b02      	ldr	r3, [pc, #8]	@ (8007e88 <malloc+0xc>)
 8007e7e:	4601      	mov	r1, r0
 8007e80:	6818      	ldr	r0, [r3, #0]
 8007e82:	f000 b825 	b.w	8007ed0 <_malloc_r>
 8007e86:	bf00      	nop
 8007e88:	20000018 	.word	0x20000018

08007e8c <sbrk_aligned>:
 8007e8c:	b570      	push	{r4, r5, r6, lr}
 8007e8e:	4e0f      	ldr	r6, [pc, #60]	@ (8007ecc <sbrk_aligned+0x40>)
 8007e90:	460c      	mov	r4, r1
 8007e92:	6831      	ldr	r1, [r6, #0]
 8007e94:	4605      	mov	r5, r0
 8007e96:	b911      	cbnz	r1, 8007e9e <sbrk_aligned+0x12>
 8007e98:	f001 ffe2 	bl	8009e60 <_sbrk_r>
 8007e9c:	6030      	str	r0, [r6, #0]
 8007e9e:	4621      	mov	r1, r4
 8007ea0:	4628      	mov	r0, r5
 8007ea2:	f001 ffdd 	bl	8009e60 <_sbrk_r>
 8007ea6:	1c43      	adds	r3, r0, #1
 8007ea8:	d103      	bne.n	8007eb2 <sbrk_aligned+0x26>
 8007eaa:	f04f 34ff 	mov.w	r4, #4294967295
 8007eae:	4620      	mov	r0, r4
 8007eb0:	bd70      	pop	{r4, r5, r6, pc}
 8007eb2:	1cc4      	adds	r4, r0, #3
 8007eb4:	f024 0403 	bic.w	r4, r4, #3
 8007eb8:	42a0      	cmp	r0, r4
 8007eba:	d0f8      	beq.n	8007eae <sbrk_aligned+0x22>
 8007ebc:	1a21      	subs	r1, r4, r0
 8007ebe:	4628      	mov	r0, r5
 8007ec0:	f001 ffce 	bl	8009e60 <_sbrk_r>
 8007ec4:	3001      	adds	r0, #1
 8007ec6:	d1f2      	bne.n	8007eae <sbrk_aligned+0x22>
 8007ec8:	e7ef      	b.n	8007eaa <sbrk_aligned+0x1e>
 8007eca:	bf00      	nop
 8007ecc:	20011b64 	.word	0x20011b64

08007ed0 <_malloc_r>:
 8007ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ed4:	1ccd      	adds	r5, r1, #3
 8007ed6:	f025 0503 	bic.w	r5, r5, #3
 8007eda:	3508      	adds	r5, #8
 8007edc:	2d0c      	cmp	r5, #12
 8007ede:	bf38      	it	cc
 8007ee0:	250c      	movcc	r5, #12
 8007ee2:	2d00      	cmp	r5, #0
 8007ee4:	4606      	mov	r6, r0
 8007ee6:	db01      	blt.n	8007eec <_malloc_r+0x1c>
 8007ee8:	42a9      	cmp	r1, r5
 8007eea:	d904      	bls.n	8007ef6 <_malloc_r+0x26>
 8007eec:	230c      	movs	r3, #12
 8007eee:	6033      	str	r3, [r6, #0]
 8007ef0:	2000      	movs	r0, #0
 8007ef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ef6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007fcc <_malloc_r+0xfc>
 8007efa:	f000 f869 	bl	8007fd0 <__malloc_lock>
 8007efe:	f8d8 3000 	ldr.w	r3, [r8]
 8007f02:	461c      	mov	r4, r3
 8007f04:	bb44      	cbnz	r4, 8007f58 <_malloc_r+0x88>
 8007f06:	4629      	mov	r1, r5
 8007f08:	4630      	mov	r0, r6
 8007f0a:	f7ff ffbf 	bl	8007e8c <sbrk_aligned>
 8007f0e:	1c43      	adds	r3, r0, #1
 8007f10:	4604      	mov	r4, r0
 8007f12:	d158      	bne.n	8007fc6 <_malloc_r+0xf6>
 8007f14:	f8d8 4000 	ldr.w	r4, [r8]
 8007f18:	4627      	mov	r7, r4
 8007f1a:	2f00      	cmp	r7, #0
 8007f1c:	d143      	bne.n	8007fa6 <_malloc_r+0xd6>
 8007f1e:	2c00      	cmp	r4, #0
 8007f20:	d04b      	beq.n	8007fba <_malloc_r+0xea>
 8007f22:	6823      	ldr	r3, [r4, #0]
 8007f24:	4639      	mov	r1, r7
 8007f26:	4630      	mov	r0, r6
 8007f28:	eb04 0903 	add.w	r9, r4, r3
 8007f2c:	f001 ff98 	bl	8009e60 <_sbrk_r>
 8007f30:	4581      	cmp	r9, r0
 8007f32:	d142      	bne.n	8007fba <_malloc_r+0xea>
 8007f34:	6821      	ldr	r1, [r4, #0]
 8007f36:	1a6d      	subs	r5, r5, r1
 8007f38:	4629      	mov	r1, r5
 8007f3a:	4630      	mov	r0, r6
 8007f3c:	f7ff ffa6 	bl	8007e8c <sbrk_aligned>
 8007f40:	3001      	adds	r0, #1
 8007f42:	d03a      	beq.n	8007fba <_malloc_r+0xea>
 8007f44:	6823      	ldr	r3, [r4, #0]
 8007f46:	442b      	add	r3, r5
 8007f48:	6023      	str	r3, [r4, #0]
 8007f4a:	f8d8 3000 	ldr.w	r3, [r8]
 8007f4e:	685a      	ldr	r2, [r3, #4]
 8007f50:	bb62      	cbnz	r2, 8007fac <_malloc_r+0xdc>
 8007f52:	f8c8 7000 	str.w	r7, [r8]
 8007f56:	e00f      	b.n	8007f78 <_malloc_r+0xa8>
 8007f58:	6822      	ldr	r2, [r4, #0]
 8007f5a:	1b52      	subs	r2, r2, r5
 8007f5c:	d420      	bmi.n	8007fa0 <_malloc_r+0xd0>
 8007f5e:	2a0b      	cmp	r2, #11
 8007f60:	d917      	bls.n	8007f92 <_malloc_r+0xc2>
 8007f62:	1961      	adds	r1, r4, r5
 8007f64:	42a3      	cmp	r3, r4
 8007f66:	6025      	str	r5, [r4, #0]
 8007f68:	bf18      	it	ne
 8007f6a:	6059      	strne	r1, [r3, #4]
 8007f6c:	6863      	ldr	r3, [r4, #4]
 8007f6e:	bf08      	it	eq
 8007f70:	f8c8 1000 	streq.w	r1, [r8]
 8007f74:	5162      	str	r2, [r4, r5]
 8007f76:	604b      	str	r3, [r1, #4]
 8007f78:	4630      	mov	r0, r6
 8007f7a:	f000 f82f 	bl	8007fdc <__malloc_unlock>
 8007f7e:	f104 000b 	add.w	r0, r4, #11
 8007f82:	1d23      	adds	r3, r4, #4
 8007f84:	f020 0007 	bic.w	r0, r0, #7
 8007f88:	1ac2      	subs	r2, r0, r3
 8007f8a:	bf1c      	itt	ne
 8007f8c:	1a1b      	subne	r3, r3, r0
 8007f8e:	50a3      	strne	r3, [r4, r2]
 8007f90:	e7af      	b.n	8007ef2 <_malloc_r+0x22>
 8007f92:	6862      	ldr	r2, [r4, #4]
 8007f94:	42a3      	cmp	r3, r4
 8007f96:	bf0c      	ite	eq
 8007f98:	f8c8 2000 	streq.w	r2, [r8]
 8007f9c:	605a      	strne	r2, [r3, #4]
 8007f9e:	e7eb      	b.n	8007f78 <_malloc_r+0xa8>
 8007fa0:	4623      	mov	r3, r4
 8007fa2:	6864      	ldr	r4, [r4, #4]
 8007fa4:	e7ae      	b.n	8007f04 <_malloc_r+0x34>
 8007fa6:	463c      	mov	r4, r7
 8007fa8:	687f      	ldr	r7, [r7, #4]
 8007faa:	e7b6      	b.n	8007f1a <_malloc_r+0x4a>
 8007fac:	461a      	mov	r2, r3
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	42a3      	cmp	r3, r4
 8007fb2:	d1fb      	bne.n	8007fac <_malloc_r+0xdc>
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	6053      	str	r3, [r2, #4]
 8007fb8:	e7de      	b.n	8007f78 <_malloc_r+0xa8>
 8007fba:	230c      	movs	r3, #12
 8007fbc:	6033      	str	r3, [r6, #0]
 8007fbe:	4630      	mov	r0, r6
 8007fc0:	f000 f80c 	bl	8007fdc <__malloc_unlock>
 8007fc4:	e794      	b.n	8007ef0 <_malloc_r+0x20>
 8007fc6:	6005      	str	r5, [r0, #0]
 8007fc8:	e7d6      	b.n	8007f78 <_malloc_r+0xa8>
 8007fca:	bf00      	nop
 8007fcc:	20011b68 	.word	0x20011b68

08007fd0 <__malloc_lock>:
 8007fd0:	4801      	ldr	r0, [pc, #4]	@ (8007fd8 <__malloc_lock+0x8>)
 8007fd2:	f7ff b8b4 	b.w	800713e <__retarget_lock_acquire_recursive>
 8007fd6:	bf00      	nop
 8007fd8:	20011b60 	.word	0x20011b60

08007fdc <__malloc_unlock>:
 8007fdc:	4801      	ldr	r0, [pc, #4]	@ (8007fe4 <__malloc_unlock+0x8>)
 8007fde:	f7ff b8af 	b.w	8007140 <__retarget_lock_release_recursive>
 8007fe2:	bf00      	nop
 8007fe4:	20011b60 	.word	0x20011b60

08007fe8 <_Balloc>:
 8007fe8:	b570      	push	{r4, r5, r6, lr}
 8007fea:	69c6      	ldr	r6, [r0, #28]
 8007fec:	4604      	mov	r4, r0
 8007fee:	460d      	mov	r5, r1
 8007ff0:	b976      	cbnz	r6, 8008010 <_Balloc+0x28>
 8007ff2:	2010      	movs	r0, #16
 8007ff4:	f7ff ff42 	bl	8007e7c <malloc>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	61e0      	str	r0, [r4, #28]
 8007ffc:	b920      	cbnz	r0, 8008008 <_Balloc+0x20>
 8007ffe:	4b18      	ldr	r3, [pc, #96]	@ (8008060 <_Balloc+0x78>)
 8008000:	4818      	ldr	r0, [pc, #96]	@ (8008064 <_Balloc+0x7c>)
 8008002:	216b      	movs	r1, #107	@ 0x6b
 8008004:	f001 ff54 	bl	8009eb0 <__assert_func>
 8008008:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800800c:	6006      	str	r6, [r0, #0]
 800800e:	60c6      	str	r6, [r0, #12]
 8008010:	69e6      	ldr	r6, [r4, #28]
 8008012:	68f3      	ldr	r3, [r6, #12]
 8008014:	b183      	cbz	r3, 8008038 <_Balloc+0x50>
 8008016:	69e3      	ldr	r3, [r4, #28]
 8008018:	68db      	ldr	r3, [r3, #12]
 800801a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800801e:	b9b8      	cbnz	r0, 8008050 <_Balloc+0x68>
 8008020:	2101      	movs	r1, #1
 8008022:	fa01 f605 	lsl.w	r6, r1, r5
 8008026:	1d72      	adds	r2, r6, #5
 8008028:	0092      	lsls	r2, r2, #2
 800802a:	4620      	mov	r0, r4
 800802c:	f001 ff5e 	bl	8009eec <_calloc_r>
 8008030:	b160      	cbz	r0, 800804c <_Balloc+0x64>
 8008032:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008036:	e00e      	b.n	8008056 <_Balloc+0x6e>
 8008038:	2221      	movs	r2, #33	@ 0x21
 800803a:	2104      	movs	r1, #4
 800803c:	4620      	mov	r0, r4
 800803e:	f001 ff55 	bl	8009eec <_calloc_r>
 8008042:	69e3      	ldr	r3, [r4, #28]
 8008044:	60f0      	str	r0, [r6, #12]
 8008046:	68db      	ldr	r3, [r3, #12]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d1e4      	bne.n	8008016 <_Balloc+0x2e>
 800804c:	2000      	movs	r0, #0
 800804e:	bd70      	pop	{r4, r5, r6, pc}
 8008050:	6802      	ldr	r2, [r0, #0]
 8008052:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008056:	2300      	movs	r3, #0
 8008058:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800805c:	e7f7      	b.n	800804e <_Balloc+0x66>
 800805e:	bf00      	nop
 8008060:	0800b03a 	.word	0x0800b03a
 8008064:	0800b0ba 	.word	0x0800b0ba

08008068 <_Bfree>:
 8008068:	b570      	push	{r4, r5, r6, lr}
 800806a:	69c6      	ldr	r6, [r0, #28]
 800806c:	4605      	mov	r5, r0
 800806e:	460c      	mov	r4, r1
 8008070:	b976      	cbnz	r6, 8008090 <_Bfree+0x28>
 8008072:	2010      	movs	r0, #16
 8008074:	f7ff ff02 	bl	8007e7c <malloc>
 8008078:	4602      	mov	r2, r0
 800807a:	61e8      	str	r0, [r5, #28]
 800807c:	b920      	cbnz	r0, 8008088 <_Bfree+0x20>
 800807e:	4b09      	ldr	r3, [pc, #36]	@ (80080a4 <_Bfree+0x3c>)
 8008080:	4809      	ldr	r0, [pc, #36]	@ (80080a8 <_Bfree+0x40>)
 8008082:	218f      	movs	r1, #143	@ 0x8f
 8008084:	f001 ff14 	bl	8009eb0 <__assert_func>
 8008088:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800808c:	6006      	str	r6, [r0, #0]
 800808e:	60c6      	str	r6, [r0, #12]
 8008090:	b13c      	cbz	r4, 80080a2 <_Bfree+0x3a>
 8008092:	69eb      	ldr	r3, [r5, #28]
 8008094:	6862      	ldr	r2, [r4, #4]
 8008096:	68db      	ldr	r3, [r3, #12]
 8008098:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800809c:	6021      	str	r1, [r4, #0]
 800809e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80080a2:	bd70      	pop	{r4, r5, r6, pc}
 80080a4:	0800b03a 	.word	0x0800b03a
 80080a8:	0800b0ba 	.word	0x0800b0ba

080080ac <__multadd>:
 80080ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080b0:	690d      	ldr	r5, [r1, #16]
 80080b2:	4607      	mov	r7, r0
 80080b4:	460c      	mov	r4, r1
 80080b6:	461e      	mov	r6, r3
 80080b8:	f101 0c14 	add.w	ip, r1, #20
 80080bc:	2000      	movs	r0, #0
 80080be:	f8dc 3000 	ldr.w	r3, [ip]
 80080c2:	b299      	uxth	r1, r3
 80080c4:	fb02 6101 	mla	r1, r2, r1, r6
 80080c8:	0c1e      	lsrs	r6, r3, #16
 80080ca:	0c0b      	lsrs	r3, r1, #16
 80080cc:	fb02 3306 	mla	r3, r2, r6, r3
 80080d0:	b289      	uxth	r1, r1
 80080d2:	3001      	adds	r0, #1
 80080d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80080d8:	4285      	cmp	r5, r0
 80080da:	f84c 1b04 	str.w	r1, [ip], #4
 80080de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80080e2:	dcec      	bgt.n	80080be <__multadd+0x12>
 80080e4:	b30e      	cbz	r6, 800812a <__multadd+0x7e>
 80080e6:	68a3      	ldr	r3, [r4, #8]
 80080e8:	42ab      	cmp	r3, r5
 80080ea:	dc19      	bgt.n	8008120 <__multadd+0x74>
 80080ec:	6861      	ldr	r1, [r4, #4]
 80080ee:	4638      	mov	r0, r7
 80080f0:	3101      	adds	r1, #1
 80080f2:	f7ff ff79 	bl	8007fe8 <_Balloc>
 80080f6:	4680      	mov	r8, r0
 80080f8:	b928      	cbnz	r0, 8008106 <__multadd+0x5a>
 80080fa:	4602      	mov	r2, r0
 80080fc:	4b0c      	ldr	r3, [pc, #48]	@ (8008130 <__multadd+0x84>)
 80080fe:	480d      	ldr	r0, [pc, #52]	@ (8008134 <__multadd+0x88>)
 8008100:	21ba      	movs	r1, #186	@ 0xba
 8008102:	f001 fed5 	bl	8009eb0 <__assert_func>
 8008106:	6922      	ldr	r2, [r4, #16]
 8008108:	3202      	adds	r2, #2
 800810a:	f104 010c 	add.w	r1, r4, #12
 800810e:	0092      	lsls	r2, r2, #2
 8008110:	300c      	adds	r0, #12
 8008112:	f001 feb5 	bl	8009e80 <memcpy>
 8008116:	4621      	mov	r1, r4
 8008118:	4638      	mov	r0, r7
 800811a:	f7ff ffa5 	bl	8008068 <_Bfree>
 800811e:	4644      	mov	r4, r8
 8008120:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008124:	3501      	adds	r5, #1
 8008126:	615e      	str	r6, [r3, #20]
 8008128:	6125      	str	r5, [r4, #16]
 800812a:	4620      	mov	r0, r4
 800812c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008130:	0800b0a9 	.word	0x0800b0a9
 8008134:	0800b0ba 	.word	0x0800b0ba

08008138 <__s2b>:
 8008138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800813c:	460c      	mov	r4, r1
 800813e:	4615      	mov	r5, r2
 8008140:	461f      	mov	r7, r3
 8008142:	2209      	movs	r2, #9
 8008144:	3308      	adds	r3, #8
 8008146:	4606      	mov	r6, r0
 8008148:	fb93 f3f2 	sdiv	r3, r3, r2
 800814c:	2100      	movs	r1, #0
 800814e:	2201      	movs	r2, #1
 8008150:	429a      	cmp	r2, r3
 8008152:	db09      	blt.n	8008168 <__s2b+0x30>
 8008154:	4630      	mov	r0, r6
 8008156:	f7ff ff47 	bl	8007fe8 <_Balloc>
 800815a:	b940      	cbnz	r0, 800816e <__s2b+0x36>
 800815c:	4602      	mov	r2, r0
 800815e:	4b19      	ldr	r3, [pc, #100]	@ (80081c4 <__s2b+0x8c>)
 8008160:	4819      	ldr	r0, [pc, #100]	@ (80081c8 <__s2b+0x90>)
 8008162:	21d3      	movs	r1, #211	@ 0xd3
 8008164:	f001 fea4 	bl	8009eb0 <__assert_func>
 8008168:	0052      	lsls	r2, r2, #1
 800816a:	3101      	adds	r1, #1
 800816c:	e7f0      	b.n	8008150 <__s2b+0x18>
 800816e:	9b08      	ldr	r3, [sp, #32]
 8008170:	6143      	str	r3, [r0, #20]
 8008172:	2d09      	cmp	r5, #9
 8008174:	f04f 0301 	mov.w	r3, #1
 8008178:	6103      	str	r3, [r0, #16]
 800817a:	dd16      	ble.n	80081aa <__s2b+0x72>
 800817c:	f104 0909 	add.w	r9, r4, #9
 8008180:	46c8      	mov	r8, r9
 8008182:	442c      	add	r4, r5
 8008184:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008188:	4601      	mov	r1, r0
 800818a:	3b30      	subs	r3, #48	@ 0x30
 800818c:	220a      	movs	r2, #10
 800818e:	4630      	mov	r0, r6
 8008190:	f7ff ff8c 	bl	80080ac <__multadd>
 8008194:	45a0      	cmp	r8, r4
 8008196:	d1f5      	bne.n	8008184 <__s2b+0x4c>
 8008198:	f1a5 0408 	sub.w	r4, r5, #8
 800819c:	444c      	add	r4, r9
 800819e:	1b2d      	subs	r5, r5, r4
 80081a0:	1963      	adds	r3, r4, r5
 80081a2:	42bb      	cmp	r3, r7
 80081a4:	db04      	blt.n	80081b0 <__s2b+0x78>
 80081a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081aa:	340a      	adds	r4, #10
 80081ac:	2509      	movs	r5, #9
 80081ae:	e7f6      	b.n	800819e <__s2b+0x66>
 80081b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80081b4:	4601      	mov	r1, r0
 80081b6:	3b30      	subs	r3, #48	@ 0x30
 80081b8:	220a      	movs	r2, #10
 80081ba:	4630      	mov	r0, r6
 80081bc:	f7ff ff76 	bl	80080ac <__multadd>
 80081c0:	e7ee      	b.n	80081a0 <__s2b+0x68>
 80081c2:	bf00      	nop
 80081c4:	0800b0a9 	.word	0x0800b0a9
 80081c8:	0800b0ba 	.word	0x0800b0ba

080081cc <__hi0bits>:
 80081cc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80081d0:	4603      	mov	r3, r0
 80081d2:	bf36      	itet	cc
 80081d4:	0403      	lslcc	r3, r0, #16
 80081d6:	2000      	movcs	r0, #0
 80081d8:	2010      	movcc	r0, #16
 80081da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80081de:	bf3c      	itt	cc
 80081e0:	021b      	lslcc	r3, r3, #8
 80081e2:	3008      	addcc	r0, #8
 80081e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80081e8:	bf3c      	itt	cc
 80081ea:	011b      	lslcc	r3, r3, #4
 80081ec:	3004      	addcc	r0, #4
 80081ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081f2:	bf3c      	itt	cc
 80081f4:	009b      	lslcc	r3, r3, #2
 80081f6:	3002      	addcc	r0, #2
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	db05      	blt.n	8008208 <__hi0bits+0x3c>
 80081fc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008200:	f100 0001 	add.w	r0, r0, #1
 8008204:	bf08      	it	eq
 8008206:	2020      	moveq	r0, #32
 8008208:	4770      	bx	lr

0800820a <__lo0bits>:
 800820a:	6803      	ldr	r3, [r0, #0]
 800820c:	4602      	mov	r2, r0
 800820e:	f013 0007 	ands.w	r0, r3, #7
 8008212:	d00b      	beq.n	800822c <__lo0bits+0x22>
 8008214:	07d9      	lsls	r1, r3, #31
 8008216:	d421      	bmi.n	800825c <__lo0bits+0x52>
 8008218:	0798      	lsls	r0, r3, #30
 800821a:	bf49      	itett	mi
 800821c:	085b      	lsrmi	r3, r3, #1
 800821e:	089b      	lsrpl	r3, r3, #2
 8008220:	2001      	movmi	r0, #1
 8008222:	6013      	strmi	r3, [r2, #0]
 8008224:	bf5c      	itt	pl
 8008226:	6013      	strpl	r3, [r2, #0]
 8008228:	2002      	movpl	r0, #2
 800822a:	4770      	bx	lr
 800822c:	b299      	uxth	r1, r3
 800822e:	b909      	cbnz	r1, 8008234 <__lo0bits+0x2a>
 8008230:	0c1b      	lsrs	r3, r3, #16
 8008232:	2010      	movs	r0, #16
 8008234:	b2d9      	uxtb	r1, r3
 8008236:	b909      	cbnz	r1, 800823c <__lo0bits+0x32>
 8008238:	3008      	adds	r0, #8
 800823a:	0a1b      	lsrs	r3, r3, #8
 800823c:	0719      	lsls	r1, r3, #28
 800823e:	bf04      	itt	eq
 8008240:	091b      	lsreq	r3, r3, #4
 8008242:	3004      	addeq	r0, #4
 8008244:	0799      	lsls	r1, r3, #30
 8008246:	bf04      	itt	eq
 8008248:	089b      	lsreq	r3, r3, #2
 800824a:	3002      	addeq	r0, #2
 800824c:	07d9      	lsls	r1, r3, #31
 800824e:	d403      	bmi.n	8008258 <__lo0bits+0x4e>
 8008250:	085b      	lsrs	r3, r3, #1
 8008252:	f100 0001 	add.w	r0, r0, #1
 8008256:	d003      	beq.n	8008260 <__lo0bits+0x56>
 8008258:	6013      	str	r3, [r2, #0]
 800825a:	4770      	bx	lr
 800825c:	2000      	movs	r0, #0
 800825e:	4770      	bx	lr
 8008260:	2020      	movs	r0, #32
 8008262:	4770      	bx	lr

08008264 <__i2b>:
 8008264:	b510      	push	{r4, lr}
 8008266:	460c      	mov	r4, r1
 8008268:	2101      	movs	r1, #1
 800826a:	f7ff febd 	bl	8007fe8 <_Balloc>
 800826e:	4602      	mov	r2, r0
 8008270:	b928      	cbnz	r0, 800827e <__i2b+0x1a>
 8008272:	4b05      	ldr	r3, [pc, #20]	@ (8008288 <__i2b+0x24>)
 8008274:	4805      	ldr	r0, [pc, #20]	@ (800828c <__i2b+0x28>)
 8008276:	f240 1145 	movw	r1, #325	@ 0x145
 800827a:	f001 fe19 	bl	8009eb0 <__assert_func>
 800827e:	2301      	movs	r3, #1
 8008280:	6144      	str	r4, [r0, #20]
 8008282:	6103      	str	r3, [r0, #16]
 8008284:	bd10      	pop	{r4, pc}
 8008286:	bf00      	nop
 8008288:	0800b0a9 	.word	0x0800b0a9
 800828c:	0800b0ba 	.word	0x0800b0ba

08008290 <__multiply>:
 8008290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008294:	4614      	mov	r4, r2
 8008296:	690a      	ldr	r2, [r1, #16]
 8008298:	6923      	ldr	r3, [r4, #16]
 800829a:	429a      	cmp	r2, r3
 800829c:	bfa8      	it	ge
 800829e:	4623      	movge	r3, r4
 80082a0:	460f      	mov	r7, r1
 80082a2:	bfa4      	itt	ge
 80082a4:	460c      	movge	r4, r1
 80082a6:	461f      	movge	r7, r3
 80082a8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80082ac:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80082b0:	68a3      	ldr	r3, [r4, #8]
 80082b2:	6861      	ldr	r1, [r4, #4]
 80082b4:	eb0a 0609 	add.w	r6, sl, r9
 80082b8:	42b3      	cmp	r3, r6
 80082ba:	b085      	sub	sp, #20
 80082bc:	bfb8      	it	lt
 80082be:	3101      	addlt	r1, #1
 80082c0:	f7ff fe92 	bl	8007fe8 <_Balloc>
 80082c4:	b930      	cbnz	r0, 80082d4 <__multiply+0x44>
 80082c6:	4602      	mov	r2, r0
 80082c8:	4b44      	ldr	r3, [pc, #272]	@ (80083dc <__multiply+0x14c>)
 80082ca:	4845      	ldr	r0, [pc, #276]	@ (80083e0 <__multiply+0x150>)
 80082cc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80082d0:	f001 fdee 	bl	8009eb0 <__assert_func>
 80082d4:	f100 0514 	add.w	r5, r0, #20
 80082d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80082dc:	462b      	mov	r3, r5
 80082de:	2200      	movs	r2, #0
 80082e0:	4543      	cmp	r3, r8
 80082e2:	d321      	bcc.n	8008328 <__multiply+0x98>
 80082e4:	f107 0114 	add.w	r1, r7, #20
 80082e8:	f104 0214 	add.w	r2, r4, #20
 80082ec:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80082f0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80082f4:	9302      	str	r3, [sp, #8]
 80082f6:	1b13      	subs	r3, r2, r4
 80082f8:	3b15      	subs	r3, #21
 80082fa:	f023 0303 	bic.w	r3, r3, #3
 80082fe:	3304      	adds	r3, #4
 8008300:	f104 0715 	add.w	r7, r4, #21
 8008304:	42ba      	cmp	r2, r7
 8008306:	bf38      	it	cc
 8008308:	2304      	movcc	r3, #4
 800830a:	9301      	str	r3, [sp, #4]
 800830c:	9b02      	ldr	r3, [sp, #8]
 800830e:	9103      	str	r1, [sp, #12]
 8008310:	428b      	cmp	r3, r1
 8008312:	d80c      	bhi.n	800832e <__multiply+0x9e>
 8008314:	2e00      	cmp	r6, #0
 8008316:	dd03      	ble.n	8008320 <__multiply+0x90>
 8008318:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800831c:	2b00      	cmp	r3, #0
 800831e:	d05b      	beq.n	80083d8 <__multiply+0x148>
 8008320:	6106      	str	r6, [r0, #16]
 8008322:	b005      	add	sp, #20
 8008324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008328:	f843 2b04 	str.w	r2, [r3], #4
 800832c:	e7d8      	b.n	80082e0 <__multiply+0x50>
 800832e:	f8b1 a000 	ldrh.w	sl, [r1]
 8008332:	f1ba 0f00 	cmp.w	sl, #0
 8008336:	d024      	beq.n	8008382 <__multiply+0xf2>
 8008338:	f104 0e14 	add.w	lr, r4, #20
 800833c:	46a9      	mov	r9, r5
 800833e:	f04f 0c00 	mov.w	ip, #0
 8008342:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008346:	f8d9 3000 	ldr.w	r3, [r9]
 800834a:	fa1f fb87 	uxth.w	fp, r7
 800834e:	b29b      	uxth	r3, r3
 8008350:	fb0a 330b 	mla	r3, sl, fp, r3
 8008354:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008358:	f8d9 7000 	ldr.w	r7, [r9]
 800835c:	4463      	add	r3, ip
 800835e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008362:	fb0a c70b 	mla	r7, sl, fp, ip
 8008366:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800836a:	b29b      	uxth	r3, r3
 800836c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008370:	4572      	cmp	r2, lr
 8008372:	f849 3b04 	str.w	r3, [r9], #4
 8008376:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800837a:	d8e2      	bhi.n	8008342 <__multiply+0xb2>
 800837c:	9b01      	ldr	r3, [sp, #4]
 800837e:	f845 c003 	str.w	ip, [r5, r3]
 8008382:	9b03      	ldr	r3, [sp, #12]
 8008384:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008388:	3104      	adds	r1, #4
 800838a:	f1b9 0f00 	cmp.w	r9, #0
 800838e:	d021      	beq.n	80083d4 <__multiply+0x144>
 8008390:	682b      	ldr	r3, [r5, #0]
 8008392:	f104 0c14 	add.w	ip, r4, #20
 8008396:	46ae      	mov	lr, r5
 8008398:	f04f 0a00 	mov.w	sl, #0
 800839c:	f8bc b000 	ldrh.w	fp, [ip]
 80083a0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80083a4:	fb09 770b 	mla	r7, r9, fp, r7
 80083a8:	4457      	add	r7, sl
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80083b0:	f84e 3b04 	str.w	r3, [lr], #4
 80083b4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80083b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80083bc:	f8be 3000 	ldrh.w	r3, [lr]
 80083c0:	fb09 330a 	mla	r3, r9, sl, r3
 80083c4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80083c8:	4562      	cmp	r2, ip
 80083ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80083ce:	d8e5      	bhi.n	800839c <__multiply+0x10c>
 80083d0:	9f01      	ldr	r7, [sp, #4]
 80083d2:	51eb      	str	r3, [r5, r7]
 80083d4:	3504      	adds	r5, #4
 80083d6:	e799      	b.n	800830c <__multiply+0x7c>
 80083d8:	3e01      	subs	r6, #1
 80083da:	e79b      	b.n	8008314 <__multiply+0x84>
 80083dc:	0800b0a9 	.word	0x0800b0a9
 80083e0:	0800b0ba 	.word	0x0800b0ba

080083e4 <__pow5mult>:
 80083e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083e8:	4615      	mov	r5, r2
 80083ea:	f012 0203 	ands.w	r2, r2, #3
 80083ee:	4607      	mov	r7, r0
 80083f0:	460e      	mov	r6, r1
 80083f2:	d007      	beq.n	8008404 <__pow5mult+0x20>
 80083f4:	4c25      	ldr	r4, [pc, #148]	@ (800848c <__pow5mult+0xa8>)
 80083f6:	3a01      	subs	r2, #1
 80083f8:	2300      	movs	r3, #0
 80083fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80083fe:	f7ff fe55 	bl	80080ac <__multadd>
 8008402:	4606      	mov	r6, r0
 8008404:	10ad      	asrs	r5, r5, #2
 8008406:	d03d      	beq.n	8008484 <__pow5mult+0xa0>
 8008408:	69fc      	ldr	r4, [r7, #28]
 800840a:	b97c      	cbnz	r4, 800842c <__pow5mult+0x48>
 800840c:	2010      	movs	r0, #16
 800840e:	f7ff fd35 	bl	8007e7c <malloc>
 8008412:	4602      	mov	r2, r0
 8008414:	61f8      	str	r0, [r7, #28]
 8008416:	b928      	cbnz	r0, 8008424 <__pow5mult+0x40>
 8008418:	4b1d      	ldr	r3, [pc, #116]	@ (8008490 <__pow5mult+0xac>)
 800841a:	481e      	ldr	r0, [pc, #120]	@ (8008494 <__pow5mult+0xb0>)
 800841c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008420:	f001 fd46 	bl	8009eb0 <__assert_func>
 8008424:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008428:	6004      	str	r4, [r0, #0]
 800842a:	60c4      	str	r4, [r0, #12]
 800842c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008430:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008434:	b94c      	cbnz	r4, 800844a <__pow5mult+0x66>
 8008436:	f240 2171 	movw	r1, #625	@ 0x271
 800843a:	4638      	mov	r0, r7
 800843c:	f7ff ff12 	bl	8008264 <__i2b>
 8008440:	2300      	movs	r3, #0
 8008442:	f8c8 0008 	str.w	r0, [r8, #8]
 8008446:	4604      	mov	r4, r0
 8008448:	6003      	str	r3, [r0, #0]
 800844a:	f04f 0900 	mov.w	r9, #0
 800844e:	07eb      	lsls	r3, r5, #31
 8008450:	d50a      	bpl.n	8008468 <__pow5mult+0x84>
 8008452:	4631      	mov	r1, r6
 8008454:	4622      	mov	r2, r4
 8008456:	4638      	mov	r0, r7
 8008458:	f7ff ff1a 	bl	8008290 <__multiply>
 800845c:	4631      	mov	r1, r6
 800845e:	4680      	mov	r8, r0
 8008460:	4638      	mov	r0, r7
 8008462:	f7ff fe01 	bl	8008068 <_Bfree>
 8008466:	4646      	mov	r6, r8
 8008468:	106d      	asrs	r5, r5, #1
 800846a:	d00b      	beq.n	8008484 <__pow5mult+0xa0>
 800846c:	6820      	ldr	r0, [r4, #0]
 800846e:	b938      	cbnz	r0, 8008480 <__pow5mult+0x9c>
 8008470:	4622      	mov	r2, r4
 8008472:	4621      	mov	r1, r4
 8008474:	4638      	mov	r0, r7
 8008476:	f7ff ff0b 	bl	8008290 <__multiply>
 800847a:	6020      	str	r0, [r4, #0]
 800847c:	f8c0 9000 	str.w	r9, [r0]
 8008480:	4604      	mov	r4, r0
 8008482:	e7e4      	b.n	800844e <__pow5mult+0x6a>
 8008484:	4630      	mov	r0, r6
 8008486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800848a:	bf00      	nop
 800848c:	0800b114 	.word	0x0800b114
 8008490:	0800b03a 	.word	0x0800b03a
 8008494:	0800b0ba 	.word	0x0800b0ba

08008498 <__lshift>:
 8008498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800849c:	460c      	mov	r4, r1
 800849e:	6849      	ldr	r1, [r1, #4]
 80084a0:	6923      	ldr	r3, [r4, #16]
 80084a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80084a6:	68a3      	ldr	r3, [r4, #8]
 80084a8:	4607      	mov	r7, r0
 80084aa:	4691      	mov	r9, r2
 80084ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80084b0:	f108 0601 	add.w	r6, r8, #1
 80084b4:	42b3      	cmp	r3, r6
 80084b6:	db0b      	blt.n	80084d0 <__lshift+0x38>
 80084b8:	4638      	mov	r0, r7
 80084ba:	f7ff fd95 	bl	8007fe8 <_Balloc>
 80084be:	4605      	mov	r5, r0
 80084c0:	b948      	cbnz	r0, 80084d6 <__lshift+0x3e>
 80084c2:	4602      	mov	r2, r0
 80084c4:	4b28      	ldr	r3, [pc, #160]	@ (8008568 <__lshift+0xd0>)
 80084c6:	4829      	ldr	r0, [pc, #164]	@ (800856c <__lshift+0xd4>)
 80084c8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80084cc:	f001 fcf0 	bl	8009eb0 <__assert_func>
 80084d0:	3101      	adds	r1, #1
 80084d2:	005b      	lsls	r3, r3, #1
 80084d4:	e7ee      	b.n	80084b4 <__lshift+0x1c>
 80084d6:	2300      	movs	r3, #0
 80084d8:	f100 0114 	add.w	r1, r0, #20
 80084dc:	f100 0210 	add.w	r2, r0, #16
 80084e0:	4618      	mov	r0, r3
 80084e2:	4553      	cmp	r3, sl
 80084e4:	db33      	blt.n	800854e <__lshift+0xb6>
 80084e6:	6920      	ldr	r0, [r4, #16]
 80084e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80084ec:	f104 0314 	add.w	r3, r4, #20
 80084f0:	f019 091f 	ands.w	r9, r9, #31
 80084f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80084f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80084fc:	d02b      	beq.n	8008556 <__lshift+0xbe>
 80084fe:	f1c9 0e20 	rsb	lr, r9, #32
 8008502:	468a      	mov	sl, r1
 8008504:	2200      	movs	r2, #0
 8008506:	6818      	ldr	r0, [r3, #0]
 8008508:	fa00 f009 	lsl.w	r0, r0, r9
 800850c:	4310      	orrs	r0, r2
 800850e:	f84a 0b04 	str.w	r0, [sl], #4
 8008512:	f853 2b04 	ldr.w	r2, [r3], #4
 8008516:	459c      	cmp	ip, r3
 8008518:	fa22 f20e 	lsr.w	r2, r2, lr
 800851c:	d8f3      	bhi.n	8008506 <__lshift+0x6e>
 800851e:	ebac 0304 	sub.w	r3, ip, r4
 8008522:	3b15      	subs	r3, #21
 8008524:	f023 0303 	bic.w	r3, r3, #3
 8008528:	3304      	adds	r3, #4
 800852a:	f104 0015 	add.w	r0, r4, #21
 800852e:	4584      	cmp	ip, r0
 8008530:	bf38      	it	cc
 8008532:	2304      	movcc	r3, #4
 8008534:	50ca      	str	r2, [r1, r3]
 8008536:	b10a      	cbz	r2, 800853c <__lshift+0xa4>
 8008538:	f108 0602 	add.w	r6, r8, #2
 800853c:	3e01      	subs	r6, #1
 800853e:	4638      	mov	r0, r7
 8008540:	612e      	str	r6, [r5, #16]
 8008542:	4621      	mov	r1, r4
 8008544:	f7ff fd90 	bl	8008068 <_Bfree>
 8008548:	4628      	mov	r0, r5
 800854a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800854e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008552:	3301      	adds	r3, #1
 8008554:	e7c5      	b.n	80084e2 <__lshift+0x4a>
 8008556:	3904      	subs	r1, #4
 8008558:	f853 2b04 	ldr.w	r2, [r3], #4
 800855c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008560:	459c      	cmp	ip, r3
 8008562:	d8f9      	bhi.n	8008558 <__lshift+0xc0>
 8008564:	e7ea      	b.n	800853c <__lshift+0xa4>
 8008566:	bf00      	nop
 8008568:	0800b0a9 	.word	0x0800b0a9
 800856c:	0800b0ba 	.word	0x0800b0ba

08008570 <__mcmp>:
 8008570:	690a      	ldr	r2, [r1, #16]
 8008572:	4603      	mov	r3, r0
 8008574:	6900      	ldr	r0, [r0, #16]
 8008576:	1a80      	subs	r0, r0, r2
 8008578:	b530      	push	{r4, r5, lr}
 800857a:	d10e      	bne.n	800859a <__mcmp+0x2a>
 800857c:	3314      	adds	r3, #20
 800857e:	3114      	adds	r1, #20
 8008580:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008584:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008588:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800858c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008590:	4295      	cmp	r5, r2
 8008592:	d003      	beq.n	800859c <__mcmp+0x2c>
 8008594:	d205      	bcs.n	80085a2 <__mcmp+0x32>
 8008596:	f04f 30ff 	mov.w	r0, #4294967295
 800859a:	bd30      	pop	{r4, r5, pc}
 800859c:	42a3      	cmp	r3, r4
 800859e:	d3f3      	bcc.n	8008588 <__mcmp+0x18>
 80085a0:	e7fb      	b.n	800859a <__mcmp+0x2a>
 80085a2:	2001      	movs	r0, #1
 80085a4:	e7f9      	b.n	800859a <__mcmp+0x2a>
	...

080085a8 <__mdiff>:
 80085a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ac:	4689      	mov	r9, r1
 80085ae:	4606      	mov	r6, r0
 80085b0:	4611      	mov	r1, r2
 80085b2:	4648      	mov	r0, r9
 80085b4:	4614      	mov	r4, r2
 80085b6:	f7ff ffdb 	bl	8008570 <__mcmp>
 80085ba:	1e05      	subs	r5, r0, #0
 80085bc:	d112      	bne.n	80085e4 <__mdiff+0x3c>
 80085be:	4629      	mov	r1, r5
 80085c0:	4630      	mov	r0, r6
 80085c2:	f7ff fd11 	bl	8007fe8 <_Balloc>
 80085c6:	4602      	mov	r2, r0
 80085c8:	b928      	cbnz	r0, 80085d6 <__mdiff+0x2e>
 80085ca:	4b3f      	ldr	r3, [pc, #252]	@ (80086c8 <__mdiff+0x120>)
 80085cc:	f240 2137 	movw	r1, #567	@ 0x237
 80085d0:	483e      	ldr	r0, [pc, #248]	@ (80086cc <__mdiff+0x124>)
 80085d2:	f001 fc6d 	bl	8009eb0 <__assert_func>
 80085d6:	2301      	movs	r3, #1
 80085d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80085dc:	4610      	mov	r0, r2
 80085de:	b003      	add	sp, #12
 80085e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085e4:	bfbc      	itt	lt
 80085e6:	464b      	movlt	r3, r9
 80085e8:	46a1      	movlt	r9, r4
 80085ea:	4630      	mov	r0, r6
 80085ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80085f0:	bfba      	itte	lt
 80085f2:	461c      	movlt	r4, r3
 80085f4:	2501      	movlt	r5, #1
 80085f6:	2500      	movge	r5, #0
 80085f8:	f7ff fcf6 	bl	8007fe8 <_Balloc>
 80085fc:	4602      	mov	r2, r0
 80085fe:	b918      	cbnz	r0, 8008608 <__mdiff+0x60>
 8008600:	4b31      	ldr	r3, [pc, #196]	@ (80086c8 <__mdiff+0x120>)
 8008602:	f240 2145 	movw	r1, #581	@ 0x245
 8008606:	e7e3      	b.n	80085d0 <__mdiff+0x28>
 8008608:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800860c:	6926      	ldr	r6, [r4, #16]
 800860e:	60c5      	str	r5, [r0, #12]
 8008610:	f109 0310 	add.w	r3, r9, #16
 8008614:	f109 0514 	add.w	r5, r9, #20
 8008618:	f104 0e14 	add.w	lr, r4, #20
 800861c:	f100 0b14 	add.w	fp, r0, #20
 8008620:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008624:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008628:	9301      	str	r3, [sp, #4]
 800862a:	46d9      	mov	r9, fp
 800862c:	f04f 0c00 	mov.w	ip, #0
 8008630:	9b01      	ldr	r3, [sp, #4]
 8008632:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008636:	f853 af04 	ldr.w	sl, [r3, #4]!
 800863a:	9301      	str	r3, [sp, #4]
 800863c:	fa1f f38a 	uxth.w	r3, sl
 8008640:	4619      	mov	r1, r3
 8008642:	b283      	uxth	r3, r0
 8008644:	1acb      	subs	r3, r1, r3
 8008646:	0c00      	lsrs	r0, r0, #16
 8008648:	4463      	add	r3, ip
 800864a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800864e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008652:	b29b      	uxth	r3, r3
 8008654:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008658:	4576      	cmp	r6, lr
 800865a:	f849 3b04 	str.w	r3, [r9], #4
 800865e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008662:	d8e5      	bhi.n	8008630 <__mdiff+0x88>
 8008664:	1b33      	subs	r3, r6, r4
 8008666:	3b15      	subs	r3, #21
 8008668:	f023 0303 	bic.w	r3, r3, #3
 800866c:	3415      	adds	r4, #21
 800866e:	3304      	adds	r3, #4
 8008670:	42a6      	cmp	r6, r4
 8008672:	bf38      	it	cc
 8008674:	2304      	movcc	r3, #4
 8008676:	441d      	add	r5, r3
 8008678:	445b      	add	r3, fp
 800867a:	461e      	mov	r6, r3
 800867c:	462c      	mov	r4, r5
 800867e:	4544      	cmp	r4, r8
 8008680:	d30e      	bcc.n	80086a0 <__mdiff+0xf8>
 8008682:	f108 0103 	add.w	r1, r8, #3
 8008686:	1b49      	subs	r1, r1, r5
 8008688:	f021 0103 	bic.w	r1, r1, #3
 800868c:	3d03      	subs	r5, #3
 800868e:	45a8      	cmp	r8, r5
 8008690:	bf38      	it	cc
 8008692:	2100      	movcc	r1, #0
 8008694:	440b      	add	r3, r1
 8008696:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800869a:	b191      	cbz	r1, 80086c2 <__mdiff+0x11a>
 800869c:	6117      	str	r7, [r2, #16]
 800869e:	e79d      	b.n	80085dc <__mdiff+0x34>
 80086a0:	f854 1b04 	ldr.w	r1, [r4], #4
 80086a4:	46e6      	mov	lr, ip
 80086a6:	0c08      	lsrs	r0, r1, #16
 80086a8:	fa1c fc81 	uxtah	ip, ip, r1
 80086ac:	4471      	add	r1, lr
 80086ae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80086b2:	b289      	uxth	r1, r1
 80086b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80086b8:	f846 1b04 	str.w	r1, [r6], #4
 80086bc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80086c0:	e7dd      	b.n	800867e <__mdiff+0xd6>
 80086c2:	3f01      	subs	r7, #1
 80086c4:	e7e7      	b.n	8008696 <__mdiff+0xee>
 80086c6:	bf00      	nop
 80086c8:	0800b0a9 	.word	0x0800b0a9
 80086cc:	0800b0ba 	.word	0x0800b0ba

080086d0 <__ulp>:
 80086d0:	b082      	sub	sp, #8
 80086d2:	ed8d 0b00 	vstr	d0, [sp]
 80086d6:	9a01      	ldr	r2, [sp, #4]
 80086d8:	4b0f      	ldr	r3, [pc, #60]	@ (8008718 <__ulp+0x48>)
 80086da:	4013      	ands	r3, r2
 80086dc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	dc08      	bgt.n	80086f6 <__ulp+0x26>
 80086e4:	425b      	negs	r3, r3
 80086e6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80086ea:	ea4f 5223 	mov.w	r2, r3, asr #20
 80086ee:	da04      	bge.n	80086fa <__ulp+0x2a>
 80086f0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80086f4:	4113      	asrs	r3, r2
 80086f6:	2200      	movs	r2, #0
 80086f8:	e008      	b.n	800870c <__ulp+0x3c>
 80086fa:	f1a2 0314 	sub.w	r3, r2, #20
 80086fe:	2b1e      	cmp	r3, #30
 8008700:	bfda      	itte	le
 8008702:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008706:	40da      	lsrle	r2, r3
 8008708:	2201      	movgt	r2, #1
 800870a:	2300      	movs	r3, #0
 800870c:	4619      	mov	r1, r3
 800870e:	4610      	mov	r0, r2
 8008710:	ec41 0b10 	vmov	d0, r0, r1
 8008714:	b002      	add	sp, #8
 8008716:	4770      	bx	lr
 8008718:	7ff00000 	.word	0x7ff00000

0800871c <__b2d>:
 800871c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008720:	6906      	ldr	r6, [r0, #16]
 8008722:	f100 0814 	add.w	r8, r0, #20
 8008726:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800872a:	1f37      	subs	r7, r6, #4
 800872c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008730:	4610      	mov	r0, r2
 8008732:	f7ff fd4b 	bl	80081cc <__hi0bits>
 8008736:	f1c0 0320 	rsb	r3, r0, #32
 800873a:	280a      	cmp	r0, #10
 800873c:	600b      	str	r3, [r1, #0]
 800873e:	491b      	ldr	r1, [pc, #108]	@ (80087ac <__b2d+0x90>)
 8008740:	dc15      	bgt.n	800876e <__b2d+0x52>
 8008742:	f1c0 0c0b 	rsb	ip, r0, #11
 8008746:	fa22 f30c 	lsr.w	r3, r2, ip
 800874a:	45b8      	cmp	r8, r7
 800874c:	ea43 0501 	orr.w	r5, r3, r1
 8008750:	bf34      	ite	cc
 8008752:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008756:	2300      	movcs	r3, #0
 8008758:	3015      	adds	r0, #21
 800875a:	fa02 f000 	lsl.w	r0, r2, r0
 800875e:	fa23 f30c 	lsr.w	r3, r3, ip
 8008762:	4303      	orrs	r3, r0
 8008764:	461c      	mov	r4, r3
 8008766:	ec45 4b10 	vmov	d0, r4, r5
 800876a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800876e:	45b8      	cmp	r8, r7
 8008770:	bf3a      	itte	cc
 8008772:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008776:	f1a6 0708 	subcc.w	r7, r6, #8
 800877a:	2300      	movcs	r3, #0
 800877c:	380b      	subs	r0, #11
 800877e:	d012      	beq.n	80087a6 <__b2d+0x8a>
 8008780:	f1c0 0120 	rsb	r1, r0, #32
 8008784:	fa23 f401 	lsr.w	r4, r3, r1
 8008788:	4082      	lsls	r2, r0
 800878a:	4322      	orrs	r2, r4
 800878c:	4547      	cmp	r7, r8
 800878e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008792:	bf8c      	ite	hi
 8008794:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008798:	2200      	movls	r2, #0
 800879a:	4083      	lsls	r3, r0
 800879c:	40ca      	lsrs	r2, r1
 800879e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80087a2:	4313      	orrs	r3, r2
 80087a4:	e7de      	b.n	8008764 <__b2d+0x48>
 80087a6:	ea42 0501 	orr.w	r5, r2, r1
 80087aa:	e7db      	b.n	8008764 <__b2d+0x48>
 80087ac:	3ff00000 	.word	0x3ff00000

080087b0 <__d2b>:
 80087b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80087b4:	460f      	mov	r7, r1
 80087b6:	2101      	movs	r1, #1
 80087b8:	ec59 8b10 	vmov	r8, r9, d0
 80087bc:	4616      	mov	r6, r2
 80087be:	f7ff fc13 	bl	8007fe8 <_Balloc>
 80087c2:	4604      	mov	r4, r0
 80087c4:	b930      	cbnz	r0, 80087d4 <__d2b+0x24>
 80087c6:	4602      	mov	r2, r0
 80087c8:	4b23      	ldr	r3, [pc, #140]	@ (8008858 <__d2b+0xa8>)
 80087ca:	4824      	ldr	r0, [pc, #144]	@ (800885c <__d2b+0xac>)
 80087cc:	f240 310f 	movw	r1, #783	@ 0x30f
 80087d0:	f001 fb6e 	bl	8009eb0 <__assert_func>
 80087d4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80087d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80087dc:	b10d      	cbz	r5, 80087e2 <__d2b+0x32>
 80087de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80087e2:	9301      	str	r3, [sp, #4]
 80087e4:	f1b8 0300 	subs.w	r3, r8, #0
 80087e8:	d023      	beq.n	8008832 <__d2b+0x82>
 80087ea:	4668      	mov	r0, sp
 80087ec:	9300      	str	r3, [sp, #0]
 80087ee:	f7ff fd0c 	bl	800820a <__lo0bits>
 80087f2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80087f6:	b1d0      	cbz	r0, 800882e <__d2b+0x7e>
 80087f8:	f1c0 0320 	rsb	r3, r0, #32
 80087fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008800:	430b      	orrs	r3, r1
 8008802:	40c2      	lsrs	r2, r0
 8008804:	6163      	str	r3, [r4, #20]
 8008806:	9201      	str	r2, [sp, #4]
 8008808:	9b01      	ldr	r3, [sp, #4]
 800880a:	61a3      	str	r3, [r4, #24]
 800880c:	2b00      	cmp	r3, #0
 800880e:	bf0c      	ite	eq
 8008810:	2201      	moveq	r2, #1
 8008812:	2202      	movne	r2, #2
 8008814:	6122      	str	r2, [r4, #16]
 8008816:	b1a5      	cbz	r5, 8008842 <__d2b+0x92>
 8008818:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800881c:	4405      	add	r5, r0
 800881e:	603d      	str	r5, [r7, #0]
 8008820:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008824:	6030      	str	r0, [r6, #0]
 8008826:	4620      	mov	r0, r4
 8008828:	b003      	add	sp, #12
 800882a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800882e:	6161      	str	r1, [r4, #20]
 8008830:	e7ea      	b.n	8008808 <__d2b+0x58>
 8008832:	a801      	add	r0, sp, #4
 8008834:	f7ff fce9 	bl	800820a <__lo0bits>
 8008838:	9b01      	ldr	r3, [sp, #4]
 800883a:	6163      	str	r3, [r4, #20]
 800883c:	3020      	adds	r0, #32
 800883e:	2201      	movs	r2, #1
 8008840:	e7e8      	b.n	8008814 <__d2b+0x64>
 8008842:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008846:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800884a:	6038      	str	r0, [r7, #0]
 800884c:	6918      	ldr	r0, [r3, #16]
 800884e:	f7ff fcbd 	bl	80081cc <__hi0bits>
 8008852:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008856:	e7e5      	b.n	8008824 <__d2b+0x74>
 8008858:	0800b0a9 	.word	0x0800b0a9
 800885c:	0800b0ba 	.word	0x0800b0ba

08008860 <__ratio>:
 8008860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008864:	b085      	sub	sp, #20
 8008866:	e9cd 1000 	strd	r1, r0, [sp]
 800886a:	a902      	add	r1, sp, #8
 800886c:	f7ff ff56 	bl	800871c <__b2d>
 8008870:	9800      	ldr	r0, [sp, #0]
 8008872:	a903      	add	r1, sp, #12
 8008874:	ec55 4b10 	vmov	r4, r5, d0
 8008878:	f7ff ff50 	bl	800871c <__b2d>
 800887c:	9b01      	ldr	r3, [sp, #4]
 800887e:	6919      	ldr	r1, [r3, #16]
 8008880:	9b00      	ldr	r3, [sp, #0]
 8008882:	691b      	ldr	r3, [r3, #16]
 8008884:	1ac9      	subs	r1, r1, r3
 8008886:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800888a:	1a9b      	subs	r3, r3, r2
 800888c:	ec5b ab10 	vmov	sl, fp, d0
 8008890:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008894:	2b00      	cmp	r3, #0
 8008896:	bfce      	itee	gt
 8008898:	462a      	movgt	r2, r5
 800889a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800889e:	465a      	movle	r2, fp
 80088a0:	462f      	mov	r7, r5
 80088a2:	46d9      	mov	r9, fp
 80088a4:	bfcc      	ite	gt
 80088a6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80088aa:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80088ae:	464b      	mov	r3, r9
 80088b0:	4652      	mov	r2, sl
 80088b2:	4620      	mov	r0, r4
 80088b4:	4639      	mov	r1, r7
 80088b6:	f7f7 ffe9 	bl	800088c <__aeabi_ddiv>
 80088ba:	ec41 0b10 	vmov	d0, r0, r1
 80088be:	b005      	add	sp, #20
 80088c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080088c4 <__copybits>:
 80088c4:	3901      	subs	r1, #1
 80088c6:	b570      	push	{r4, r5, r6, lr}
 80088c8:	1149      	asrs	r1, r1, #5
 80088ca:	6914      	ldr	r4, [r2, #16]
 80088cc:	3101      	adds	r1, #1
 80088ce:	f102 0314 	add.w	r3, r2, #20
 80088d2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80088d6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80088da:	1f05      	subs	r5, r0, #4
 80088dc:	42a3      	cmp	r3, r4
 80088de:	d30c      	bcc.n	80088fa <__copybits+0x36>
 80088e0:	1aa3      	subs	r3, r4, r2
 80088e2:	3b11      	subs	r3, #17
 80088e4:	f023 0303 	bic.w	r3, r3, #3
 80088e8:	3211      	adds	r2, #17
 80088ea:	42a2      	cmp	r2, r4
 80088ec:	bf88      	it	hi
 80088ee:	2300      	movhi	r3, #0
 80088f0:	4418      	add	r0, r3
 80088f2:	2300      	movs	r3, #0
 80088f4:	4288      	cmp	r0, r1
 80088f6:	d305      	bcc.n	8008904 <__copybits+0x40>
 80088f8:	bd70      	pop	{r4, r5, r6, pc}
 80088fa:	f853 6b04 	ldr.w	r6, [r3], #4
 80088fe:	f845 6f04 	str.w	r6, [r5, #4]!
 8008902:	e7eb      	b.n	80088dc <__copybits+0x18>
 8008904:	f840 3b04 	str.w	r3, [r0], #4
 8008908:	e7f4      	b.n	80088f4 <__copybits+0x30>

0800890a <__any_on>:
 800890a:	f100 0214 	add.w	r2, r0, #20
 800890e:	6900      	ldr	r0, [r0, #16]
 8008910:	114b      	asrs	r3, r1, #5
 8008912:	4298      	cmp	r0, r3
 8008914:	b510      	push	{r4, lr}
 8008916:	db11      	blt.n	800893c <__any_on+0x32>
 8008918:	dd0a      	ble.n	8008930 <__any_on+0x26>
 800891a:	f011 011f 	ands.w	r1, r1, #31
 800891e:	d007      	beq.n	8008930 <__any_on+0x26>
 8008920:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008924:	fa24 f001 	lsr.w	r0, r4, r1
 8008928:	fa00 f101 	lsl.w	r1, r0, r1
 800892c:	428c      	cmp	r4, r1
 800892e:	d10b      	bne.n	8008948 <__any_on+0x3e>
 8008930:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008934:	4293      	cmp	r3, r2
 8008936:	d803      	bhi.n	8008940 <__any_on+0x36>
 8008938:	2000      	movs	r0, #0
 800893a:	bd10      	pop	{r4, pc}
 800893c:	4603      	mov	r3, r0
 800893e:	e7f7      	b.n	8008930 <__any_on+0x26>
 8008940:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008944:	2900      	cmp	r1, #0
 8008946:	d0f5      	beq.n	8008934 <__any_on+0x2a>
 8008948:	2001      	movs	r0, #1
 800894a:	e7f6      	b.n	800893a <__any_on+0x30>

0800894c <sulp>:
 800894c:	b570      	push	{r4, r5, r6, lr}
 800894e:	4604      	mov	r4, r0
 8008950:	460d      	mov	r5, r1
 8008952:	ec45 4b10 	vmov	d0, r4, r5
 8008956:	4616      	mov	r6, r2
 8008958:	f7ff feba 	bl	80086d0 <__ulp>
 800895c:	ec51 0b10 	vmov	r0, r1, d0
 8008960:	b17e      	cbz	r6, 8008982 <sulp+0x36>
 8008962:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008966:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800896a:	2b00      	cmp	r3, #0
 800896c:	dd09      	ble.n	8008982 <sulp+0x36>
 800896e:	051b      	lsls	r3, r3, #20
 8008970:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008974:	2400      	movs	r4, #0
 8008976:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800897a:	4622      	mov	r2, r4
 800897c:	462b      	mov	r3, r5
 800897e:	f7f7 fe5b 	bl	8000638 <__aeabi_dmul>
 8008982:	ec41 0b10 	vmov	d0, r0, r1
 8008986:	bd70      	pop	{r4, r5, r6, pc}

08008988 <_strtod_l>:
 8008988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800898c:	b09f      	sub	sp, #124	@ 0x7c
 800898e:	460c      	mov	r4, r1
 8008990:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008992:	2200      	movs	r2, #0
 8008994:	921a      	str	r2, [sp, #104]	@ 0x68
 8008996:	9005      	str	r0, [sp, #20]
 8008998:	f04f 0a00 	mov.w	sl, #0
 800899c:	f04f 0b00 	mov.w	fp, #0
 80089a0:	460a      	mov	r2, r1
 80089a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80089a4:	7811      	ldrb	r1, [r2, #0]
 80089a6:	292b      	cmp	r1, #43	@ 0x2b
 80089a8:	d04a      	beq.n	8008a40 <_strtod_l+0xb8>
 80089aa:	d838      	bhi.n	8008a1e <_strtod_l+0x96>
 80089ac:	290d      	cmp	r1, #13
 80089ae:	d832      	bhi.n	8008a16 <_strtod_l+0x8e>
 80089b0:	2908      	cmp	r1, #8
 80089b2:	d832      	bhi.n	8008a1a <_strtod_l+0x92>
 80089b4:	2900      	cmp	r1, #0
 80089b6:	d03b      	beq.n	8008a30 <_strtod_l+0xa8>
 80089b8:	2200      	movs	r2, #0
 80089ba:	920b      	str	r2, [sp, #44]	@ 0x2c
 80089bc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80089be:	782a      	ldrb	r2, [r5, #0]
 80089c0:	2a30      	cmp	r2, #48	@ 0x30
 80089c2:	f040 80b3 	bne.w	8008b2c <_strtod_l+0x1a4>
 80089c6:	786a      	ldrb	r2, [r5, #1]
 80089c8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80089cc:	2a58      	cmp	r2, #88	@ 0x58
 80089ce:	d16e      	bne.n	8008aae <_strtod_l+0x126>
 80089d0:	9302      	str	r3, [sp, #8]
 80089d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80089d4:	9301      	str	r3, [sp, #4]
 80089d6:	ab1a      	add	r3, sp, #104	@ 0x68
 80089d8:	9300      	str	r3, [sp, #0]
 80089da:	4a8e      	ldr	r2, [pc, #568]	@ (8008c14 <_strtod_l+0x28c>)
 80089dc:	9805      	ldr	r0, [sp, #20]
 80089de:	ab1b      	add	r3, sp, #108	@ 0x6c
 80089e0:	a919      	add	r1, sp, #100	@ 0x64
 80089e2:	f001 faff 	bl	8009fe4 <__gethex>
 80089e6:	f010 060f 	ands.w	r6, r0, #15
 80089ea:	4604      	mov	r4, r0
 80089ec:	d005      	beq.n	80089fa <_strtod_l+0x72>
 80089ee:	2e06      	cmp	r6, #6
 80089f0:	d128      	bne.n	8008a44 <_strtod_l+0xbc>
 80089f2:	3501      	adds	r5, #1
 80089f4:	2300      	movs	r3, #0
 80089f6:	9519      	str	r5, [sp, #100]	@ 0x64
 80089f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80089fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	f040 858e 	bne.w	800951e <_strtod_l+0xb96>
 8008a02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a04:	b1cb      	cbz	r3, 8008a3a <_strtod_l+0xb2>
 8008a06:	4652      	mov	r2, sl
 8008a08:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008a0c:	ec43 2b10 	vmov	d0, r2, r3
 8008a10:	b01f      	add	sp, #124	@ 0x7c
 8008a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a16:	2920      	cmp	r1, #32
 8008a18:	d1ce      	bne.n	80089b8 <_strtod_l+0x30>
 8008a1a:	3201      	adds	r2, #1
 8008a1c:	e7c1      	b.n	80089a2 <_strtod_l+0x1a>
 8008a1e:	292d      	cmp	r1, #45	@ 0x2d
 8008a20:	d1ca      	bne.n	80089b8 <_strtod_l+0x30>
 8008a22:	2101      	movs	r1, #1
 8008a24:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008a26:	1c51      	adds	r1, r2, #1
 8008a28:	9119      	str	r1, [sp, #100]	@ 0x64
 8008a2a:	7852      	ldrb	r2, [r2, #1]
 8008a2c:	2a00      	cmp	r2, #0
 8008a2e:	d1c5      	bne.n	80089bc <_strtod_l+0x34>
 8008a30:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008a32:	9419      	str	r4, [sp, #100]	@ 0x64
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	f040 8570 	bne.w	800951a <_strtod_l+0xb92>
 8008a3a:	4652      	mov	r2, sl
 8008a3c:	465b      	mov	r3, fp
 8008a3e:	e7e5      	b.n	8008a0c <_strtod_l+0x84>
 8008a40:	2100      	movs	r1, #0
 8008a42:	e7ef      	b.n	8008a24 <_strtod_l+0x9c>
 8008a44:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008a46:	b13a      	cbz	r2, 8008a58 <_strtod_l+0xd0>
 8008a48:	2135      	movs	r1, #53	@ 0x35
 8008a4a:	a81c      	add	r0, sp, #112	@ 0x70
 8008a4c:	f7ff ff3a 	bl	80088c4 <__copybits>
 8008a50:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008a52:	9805      	ldr	r0, [sp, #20]
 8008a54:	f7ff fb08 	bl	8008068 <_Bfree>
 8008a58:	3e01      	subs	r6, #1
 8008a5a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008a5c:	2e04      	cmp	r6, #4
 8008a5e:	d806      	bhi.n	8008a6e <_strtod_l+0xe6>
 8008a60:	e8df f006 	tbb	[pc, r6]
 8008a64:	201d0314 	.word	0x201d0314
 8008a68:	14          	.byte	0x14
 8008a69:	00          	.byte	0x00
 8008a6a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008a6e:	05e1      	lsls	r1, r4, #23
 8008a70:	bf48      	it	mi
 8008a72:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008a76:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008a7a:	0d1b      	lsrs	r3, r3, #20
 8008a7c:	051b      	lsls	r3, r3, #20
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d1bb      	bne.n	80089fa <_strtod_l+0x72>
 8008a82:	f7fe fb31 	bl	80070e8 <__errno>
 8008a86:	2322      	movs	r3, #34	@ 0x22
 8008a88:	6003      	str	r3, [r0, #0]
 8008a8a:	e7b6      	b.n	80089fa <_strtod_l+0x72>
 8008a8c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008a90:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008a94:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008a98:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008a9c:	e7e7      	b.n	8008a6e <_strtod_l+0xe6>
 8008a9e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008c1c <_strtod_l+0x294>
 8008aa2:	e7e4      	b.n	8008a6e <_strtod_l+0xe6>
 8008aa4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008aa8:	f04f 3aff 	mov.w	sl, #4294967295
 8008aac:	e7df      	b.n	8008a6e <_strtod_l+0xe6>
 8008aae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008ab0:	1c5a      	adds	r2, r3, #1
 8008ab2:	9219      	str	r2, [sp, #100]	@ 0x64
 8008ab4:	785b      	ldrb	r3, [r3, #1]
 8008ab6:	2b30      	cmp	r3, #48	@ 0x30
 8008ab8:	d0f9      	beq.n	8008aae <_strtod_l+0x126>
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d09d      	beq.n	80089fa <_strtod_l+0x72>
 8008abe:	2301      	movs	r3, #1
 8008ac0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ac2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008ac4:	930c      	str	r3, [sp, #48]	@ 0x30
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	9308      	str	r3, [sp, #32]
 8008aca:	930a      	str	r3, [sp, #40]	@ 0x28
 8008acc:	461f      	mov	r7, r3
 8008ace:	220a      	movs	r2, #10
 8008ad0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008ad2:	7805      	ldrb	r5, [r0, #0]
 8008ad4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008ad8:	b2d9      	uxtb	r1, r3
 8008ada:	2909      	cmp	r1, #9
 8008adc:	d928      	bls.n	8008b30 <_strtod_l+0x1a8>
 8008ade:	494e      	ldr	r1, [pc, #312]	@ (8008c18 <_strtod_l+0x290>)
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	f001 f9ab 	bl	8009e3c <strncmp>
 8008ae6:	2800      	cmp	r0, #0
 8008ae8:	d032      	beq.n	8008b50 <_strtod_l+0x1c8>
 8008aea:	2000      	movs	r0, #0
 8008aec:	462a      	mov	r2, r5
 8008aee:	4681      	mov	r9, r0
 8008af0:	463d      	mov	r5, r7
 8008af2:	4603      	mov	r3, r0
 8008af4:	2a65      	cmp	r2, #101	@ 0x65
 8008af6:	d001      	beq.n	8008afc <_strtod_l+0x174>
 8008af8:	2a45      	cmp	r2, #69	@ 0x45
 8008afa:	d114      	bne.n	8008b26 <_strtod_l+0x19e>
 8008afc:	b91d      	cbnz	r5, 8008b06 <_strtod_l+0x17e>
 8008afe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b00:	4302      	orrs	r2, r0
 8008b02:	d095      	beq.n	8008a30 <_strtod_l+0xa8>
 8008b04:	2500      	movs	r5, #0
 8008b06:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008b08:	1c62      	adds	r2, r4, #1
 8008b0a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008b0c:	7862      	ldrb	r2, [r4, #1]
 8008b0e:	2a2b      	cmp	r2, #43	@ 0x2b
 8008b10:	d077      	beq.n	8008c02 <_strtod_l+0x27a>
 8008b12:	2a2d      	cmp	r2, #45	@ 0x2d
 8008b14:	d07b      	beq.n	8008c0e <_strtod_l+0x286>
 8008b16:	f04f 0c00 	mov.w	ip, #0
 8008b1a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008b1e:	2909      	cmp	r1, #9
 8008b20:	f240 8082 	bls.w	8008c28 <_strtod_l+0x2a0>
 8008b24:	9419      	str	r4, [sp, #100]	@ 0x64
 8008b26:	f04f 0800 	mov.w	r8, #0
 8008b2a:	e0a2      	b.n	8008c72 <_strtod_l+0x2ea>
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	e7c7      	b.n	8008ac0 <_strtod_l+0x138>
 8008b30:	2f08      	cmp	r7, #8
 8008b32:	bfd5      	itete	le
 8008b34:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008b36:	9908      	ldrgt	r1, [sp, #32]
 8008b38:	fb02 3301 	mlale	r3, r2, r1, r3
 8008b3c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008b40:	f100 0001 	add.w	r0, r0, #1
 8008b44:	bfd4      	ite	le
 8008b46:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008b48:	9308      	strgt	r3, [sp, #32]
 8008b4a:	3701      	adds	r7, #1
 8008b4c:	9019      	str	r0, [sp, #100]	@ 0x64
 8008b4e:	e7bf      	b.n	8008ad0 <_strtod_l+0x148>
 8008b50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b52:	1c5a      	adds	r2, r3, #1
 8008b54:	9219      	str	r2, [sp, #100]	@ 0x64
 8008b56:	785a      	ldrb	r2, [r3, #1]
 8008b58:	b37f      	cbz	r7, 8008bba <_strtod_l+0x232>
 8008b5a:	4681      	mov	r9, r0
 8008b5c:	463d      	mov	r5, r7
 8008b5e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008b62:	2b09      	cmp	r3, #9
 8008b64:	d912      	bls.n	8008b8c <_strtod_l+0x204>
 8008b66:	2301      	movs	r3, #1
 8008b68:	e7c4      	b.n	8008af4 <_strtod_l+0x16c>
 8008b6a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b6c:	1c5a      	adds	r2, r3, #1
 8008b6e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008b70:	785a      	ldrb	r2, [r3, #1]
 8008b72:	3001      	adds	r0, #1
 8008b74:	2a30      	cmp	r2, #48	@ 0x30
 8008b76:	d0f8      	beq.n	8008b6a <_strtod_l+0x1e2>
 8008b78:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008b7c:	2b08      	cmp	r3, #8
 8008b7e:	f200 84d3 	bhi.w	8009528 <_strtod_l+0xba0>
 8008b82:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b84:	930c      	str	r3, [sp, #48]	@ 0x30
 8008b86:	4681      	mov	r9, r0
 8008b88:	2000      	movs	r0, #0
 8008b8a:	4605      	mov	r5, r0
 8008b8c:	3a30      	subs	r2, #48	@ 0x30
 8008b8e:	f100 0301 	add.w	r3, r0, #1
 8008b92:	d02a      	beq.n	8008bea <_strtod_l+0x262>
 8008b94:	4499      	add	r9, r3
 8008b96:	eb00 0c05 	add.w	ip, r0, r5
 8008b9a:	462b      	mov	r3, r5
 8008b9c:	210a      	movs	r1, #10
 8008b9e:	4563      	cmp	r3, ip
 8008ba0:	d10d      	bne.n	8008bbe <_strtod_l+0x236>
 8008ba2:	1c69      	adds	r1, r5, #1
 8008ba4:	4401      	add	r1, r0
 8008ba6:	4428      	add	r0, r5
 8008ba8:	2808      	cmp	r0, #8
 8008baa:	dc16      	bgt.n	8008bda <_strtod_l+0x252>
 8008bac:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008bae:	230a      	movs	r3, #10
 8008bb0:	fb03 2300 	mla	r3, r3, r0, r2
 8008bb4:	930a      	str	r3, [sp, #40]	@ 0x28
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	e018      	b.n	8008bec <_strtod_l+0x264>
 8008bba:	4638      	mov	r0, r7
 8008bbc:	e7da      	b.n	8008b74 <_strtod_l+0x1ec>
 8008bbe:	2b08      	cmp	r3, #8
 8008bc0:	f103 0301 	add.w	r3, r3, #1
 8008bc4:	dc03      	bgt.n	8008bce <_strtod_l+0x246>
 8008bc6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008bc8:	434e      	muls	r6, r1
 8008bca:	960a      	str	r6, [sp, #40]	@ 0x28
 8008bcc:	e7e7      	b.n	8008b9e <_strtod_l+0x216>
 8008bce:	2b10      	cmp	r3, #16
 8008bd0:	bfde      	ittt	le
 8008bd2:	9e08      	ldrle	r6, [sp, #32]
 8008bd4:	434e      	mulle	r6, r1
 8008bd6:	9608      	strle	r6, [sp, #32]
 8008bd8:	e7e1      	b.n	8008b9e <_strtod_l+0x216>
 8008bda:	280f      	cmp	r0, #15
 8008bdc:	dceb      	bgt.n	8008bb6 <_strtod_l+0x22e>
 8008bde:	9808      	ldr	r0, [sp, #32]
 8008be0:	230a      	movs	r3, #10
 8008be2:	fb03 2300 	mla	r3, r3, r0, r2
 8008be6:	9308      	str	r3, [sp, #32]
 8008be8:	e7e5      	b.n	8008bb6 <_strtod_l+0x22e>
 8008bea:	4629      	mov	r1, r5
 8008bec:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008bee:	1c50      	adds	r0, r2, #1
 8008bf0:	9019      	str	r0, [sp, #100]	@ 0x64
 8008bf2:	7852      	ldrb	r2, [r2, #1]
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	460d      	mov	r5, r1
 8008bf8:	e7b1      	b.n	8008b5e <_strtod_l+0x1d6>
 8008bfa:	f04f 0900 	mov.w	r9, #0
 8008bfe:	2301      	movs	r3, #1
 8008c00:	e77d      	b.n	8008afe <_strtod_l+0x176>
 8008c02:	f04f 0c00 	mov.w	ip, #0
 8008c06:	1ca2      	adds	r2, r4, #2
 8008c08:	9219      	str	r2, [sp, #100]	@ 0x64
 8008c0a:	78a2      	ldrb	r2, [r4, #2]
 8008c0c:	e785      	b.n	8008b1a <_strtod_l+0x192>
 8008c0e:	f04f 0c01 	mov.w	ip, #1
 8008c12:	e7f8      	b.n	8008c06 <_strtod_l+0x27e>
 8008c14:	0800b228 	.word	0x0800b228
 8008c18:	0800b210 	.word	0x0800b210
 8008c1c:	7ff00000 	.word	0x7ff00000
 8008c20:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008c22:	1c51      	adds	r1, r2, #1
 8008c24:	9119      	str	r1, [sp, #100]	@ 0x64
 8008c26:	7852      	ldrb	r2, [r2, #1]
 8008c28:	2a30      	cmp	r2, #48	@ 0x30
 8008c2a:	d0f9      	beq.n	8008c20 <_strtod_l+0x298>
 8008c2c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008c30:	2908      	cmp	r1, #8
 8008c32:	f63f af78 	bhi.w	8008b26 <_strtod_l+0x19e>
 8008c36:	3a30      	subs	r2, #48	@ 0x30
 8008c38:	920e      	str	r2, [sp, #56]	@ 0x38
 8008c3a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008c3c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008c3e:	f04f 080a 	mov.w	r8, #10
 8008c42:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008c44:	1c56      	adds	r6, r2, #1
 8008c46:	9619      	str	r6, [sp, #100]	@ 0x64
 8008c48:	7852      	ldrb	r2, [r2, #1]
 8008c4a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008c4e:	f1be 0f09 	cmp.w	lr, #9
 8008c52:	d939      	bls.n	8008cc8 <_strtod_l+0x340>
 8008c54:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008c56:	1a76      	subs	r6, r6, r1
 8008c58:	2e08      	cmp	r6, #8
 8008c5a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008c5e:	dc03      	bgt.n	8008c68 <_strtod_l+0x2e0>
 8008c60:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008c62:	4588      	cmp	r8, r1
 8008c64:	bfa8      	it	ge
 8008c66:	4688      	movge	r8, r1
 8008c68:	f1bc 0f00 	cmp.w	ip, #0
 8008c6c:	d001      	beq.n	8008c72 <_strtod_l+0x2ea>
 8008c6e:	f1c8 0800 	rsb	r8, r8, #0
 8008c72:	2d00      	cmp	r5, #0
 8008c74:	d14e      	bne.n	8008d14 <_strtod_l+0x38c>
 8008c76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008c78:	4308      	orrs	r0, r1
 8008c7a:	f47f aebe 	bne.w	80089fa <_strtod_l+0x72>
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	f47f aed6 	bne.w	8008a30 <_strtod_l+0xa8>
 8008c84:	2a69      	cmp	r2, #105	@ 0x69
 8008c86:	d028      	beq.n	8008cda <_strtod_l+0x352>
 8008c88:	dc25      	bgt.n	8008cd6 <_strtod_l+0x34e>
 8008c8a:	2a49      	cmp	r2, #73	@ 0x49
 8008c8c:	d025      	beq.n	8008cda <_strtod_l+0x352>
 8008c8e:	2a4e      	cmp	r2, #78	@ 0x4e
 8008c90:	f47f aece 	bne.w	8008a30 <_strtod_l+0xa8>
 8008c94:	499b      	ldr	r1, [pc, #620]	@ (8008f04 <_strtod_l+0x57c>)
 8008c96:	a819      	add	r0, sp, #100	@ 0x64
 8008c98:	f001 fbc6 	bl	800a428 <__match>
 8008c9c:	2800      	cmp	r0, #0
 8008c9e:	f43f aec7 	beq.w	8008a30 <_strtod_l+0xa8>
 8008ca2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	2b28      	cmp	r3, #40	@ 0x28
 8008ca8:	d12e      	bne.n	8008d08 <_strtod_l+0x380>
 8008caa:	4997      	ldr	r1, [pc, #604]	@ (8008f08 <_strtod_l+0x580>)
 8008cac:	aa1c      	add	r2, sp, #112	@ 0x70
 8008cae:	a819      	add	r0, sp, #100	@ 0x64
 8008cb0:	f001 fbce 	bl	800a450 <__hexnan>
 8008cb4:	2805      	cmp	r0, #5
 8008cb6:	d127      	bne.n	8008d08 <_strtod_l+0x380>
 8008cb8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008cba:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008cbe:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008cc2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008cc6:	e698      	b.n	80089fa <_strtod_l+0x72>
 8008cc8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008cca:	fb08 2101 	mla	r1, r8, r1, r2
 8008cce:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008cd2:	920e      	str	r2, [sp, #56]	@ 0x38
 8008cd4:	e7b5      	b.n	8008c42 <_strtod_l+0x2ba>
 8008cd6:	2a6e      	cmp	r2, #110	@ 0x6e
 8008cd8:	e7da      	b.n	8008c90 <_strtod_l+0x308>
 8008cda:	498c      	ldr	r1, [pc, #560]	@ (8008f0c <_strtod_l+0x584>)
 8008cdc:	a819      	add	r0, sp, #100	@ 0x64
 8008cde:	f001 fba3 	bl	800a428 <__match>
 8008ce2:	2800      	cmp	r0, #0
 8008ce4:	f43f aea4 	beq.w	8008a30 <_strtod_l+0xa8>
 8008ce8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008cea:	4989      	ldr	r1, [pc, #548]	@ (8008f10 <_strtod_l+0x588>)
 8008cec:	3b01      	subs	r3, #1
 8008cee:	a819      	add	r0, sp, #100	@ 0x64
 8008cf0:	9319      	str	r3, [sp, #100]	@ 0x64
 8008cf2:	f001 fb99 	bl	800a428 <__match>
 8008cf6:	b910      	cbnz	r0, 8008cfe <_strtod_l+0x376>
 8008cf8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	9319      	str	r3, [sp, #100]	@ 0x64
 8008cfe:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008f20 <_strtod_l+0x598>
 8008d02:	f04f 0a00 	mov.w	sl, #0
 8008d06:	e678      	b.n	80089fa <_strtod_l+0x72>
 8008d08:	4882      	ldr	r0, [pc, #520]	@ (8008f14 <_strtod_l+0x58c>)
 8008d0a:	f001 f8c9 	bl	8009ea0 <nan>
 8008d0e:	ec5b ab10 	vmov	sl, fp, d0
 8008d12:	e672      	b.n	80089fa <_strtod_l+0x72>
 8008d14:	eba8 0309 	sub.w	r3, r8, r9
 8008d18:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008d1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d1c:	2f00      	cmp	r7, #0
 8008d1e:	bf08      	it	eq
 8008d20:	462f      	moveq	r7, r5
 8008d22:	2d10      	cmp	r5, #16
 8008d24:	462c      	mov	r4, r5
 8008d26:	bfa8      	it	ge
 8008d28:	2410      	movge	r4, #16
 8008d2a:	f7f7 fc0b 	bl	8000544 <__aeabi_ui2d>
 8008d2e:	2d09      	cmp	r5, #9
 8008d30:	4682      	mov	sl, r0
 8008d32:	468b      	mov	fp, r1
 8008d34:	dc13      	bgt.n	8008d5e <_strtod_l+0x3d6>
 8008d36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	f43f ae5e 	beq.w	80089fa <_strtod_l+0x72>
 8008d3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d40:	dd78      	ble.n	8008e34 <_strtod_l+0x4ac>
 8008d42:	2b16      	cmp	r3, #22
 8008d44:	dc5f      	bgt.n	8008e06 <_strtod_l+0x47e>
 8008d46:	4974      	ldr	r1, [pc, #464]	@ (8008f18 <_strtod_l+0x590>)
 8008d48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008d4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d50:	4652      	mov	r2, sl
 8008d52:	465b      	mov	r3, fp
 8008d54:	f7f7 fc70 	bl	8000638 <__aeabi_dmul>
 8008d58:	4682      	mov	sl, r0
 8008d5a:	468b      	mov	fp, r1
 8008d5c:	e64d      	b.n	80089fa <_strtod_l+0x72>
 8008d5e:	4b6e      	ldr	r3, [pc, #440]	@ (8008f18 <_strtod_l+0x590>)
 8008d60:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008d64:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008d68:	f7f7 fc66 	bl	8000638 <__aeabi_dmul>
 8008d6c:	4682      	mov	sl, r0
 8008d6e:	9808      	ldr	r0, [sp, #32]
 8008d70:	468b      	mov	fp, r1
 8008d72:	f7f7 fbe7 	bl	8000544 <__aeabi_ui2d>
 8008d76:	4602      	mov	r2, r0
 8008d78:	460b      	mov	r3, r1
 8008d7a:	4650      	mov	r0, sl
 8008d7c:	4659      	mov	r1, fp
 8008d7e:	f7f7 faa5 	bl	80002cc <__adddf3>
 8008d82:	2d0f      	cmp	r5, #15
 8008d84:	4682      	mov	sl, r0
 8008d86:	468b      	mov	fp, r1
 8008d88:	ddd5      	ble.n	8008d36 <_strtod_l+0x3ae>
 8008d8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d8c:	1b2c      	subs	r4, r5, r4
 8008d8e:	441c      	add	r4, r3
 8008d90:	2c00      	cmp	r4, #0
 8008d92:	f340 8096 	ble.w	8008ec2 <_strtod_l+0x53a>
 8008d96:	f014 030f 	ands.w	r3, r4, #15
 8008d9a:	d00a      	beq.n	8008db2 <_strtod_l+0x42a>
 8008d9c:	495e      	ldr	r1, [pc, #376]	@ (8008f18 <_strtod_l+0x590>)
 8008d9e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008da2:	4652      	mov	r2, sl
 8008da4:	465b      	mov	r3, fp
 8008da6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008daa:	f7f7 fc45 	bl	8000638 <__aeabi_dmul>
 8008dae:	4682      	mov	sl, r0
 8008db0:	468b      	mov	fp, r1
 8008db2:	f034 040f 	bics.w	r4, r4, #15
 8008db6:	d073      	beq.n	8008ea0 <_strtod_l+0x518>
 8008db8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008dbc:	dd48      	ble.n	8008e50 <_strtod_l+0x4c8>
 8008dbe:	2400      	movs	r4, #0
 8008dc0:	46a0      	mov	r8, r4
 8008dc2:	940a      	str	r4, [sp, #40]	@ 0x28
 8008dc4:	46a1      	mov	r9, r4
 8008dc6:	9a05      	ldr	r2, [sp, #20]
 8008dc8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008f20 <_strtod_l+0x598>
 8008dcc:	2322      	movs	r3, #34	@ 0x22
 8008dce:	6013      	str	r3, [r2, #0]
 8008dd0:	f04f 0a00 	mov.w	sl, #0
 8008dd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	f43f ae0f 	beq.w	80089fa <_strtod_l+0x72>
 8008ddc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008dde:	9805      	ldr	r0, [sp, #20]
 8008de0:	f7ff f942 	bl	8008068 <_Bfree>
 8008de4:	9805      	ldr	r0, [sp, #20]
 8008de6:	4649      	mov	r1, r9
 8008de8:	f7ff f93e 	bl	8008068 <_Bfree>
 8008dec:	9805      	ldr	r0, [sp, #20]
 8008dee:	4641      	mov	r1, r8
 8008df0:	f7ff f93a 	bl	8008068 <_Bfree>
 8008df4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008df6:	9805      	ldr	r0, [sp, #20]
 8008df8:	f7ff f936 	bl	8008068 <_Bfree>
 8008dfc:	9805      	ldr	r0, [sp, #20]
 8008dfe:	4621      	mov	r1, r4
 8008e00:	f7ff f932 	bl	8008068 <_Bfree>
 8008e04:	e5f9      	b.n	80089fa <_strtod_l+0x72>
 8008e06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e08:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	dbbc      	blt.n	8008d8a <_strtod_l+0x402>
 8008e10:	4c41      	ldr	r4, [pc, #260]	@ (8008f18 <_strtod_l+0x590>)
 8008e12:	f1c5 050f 	rsb	r5, r5, #15
 8008e16:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008e1a:	4652      	mov	r2, sl
 8008e1c:	465b      	mov	r3, fp
 8008e1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e22:	f7f7 fc09 	bl	8000638 <__aeabi_dmul>
 8008e26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e28:	1b5d      	subs	r5, r3, r5
 8008e2a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008e2e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008e32:	e78f      	b.n	8008d54 <_strtod_l+0x3cc>
 8008e34:	3316      	adds	r3, #22
 8008e36:	dba8      	blt.n	8008d8a <_strtod_l+0x402>
 8008e38:	4b37      	ldr	r3, [pc, #220]	@ (8008f18 <_strtod_l+0x590>)
 8008e3a:	eba9 0808 	sub.w	r8, r9, r8
 8008e3e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008e42:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008e46:	4650      	mov	r0, sl
 8008e48:	4659      	mov	r1, fp
 8008e4a:	f7f7 fd1f 	bl	800088c <__aeabi_ddiv>
 8008e4e:	e783      	b.n	8008d58 <_strtod_l+0x3d0>
 8008e50:	4b32      	ldr	r3, [pc, #200]	@ (8008f1c <_strtod_l+0x594>)
 8008e52:	9308      	str	r3, [sp, #32]
 8008e54:	2300      	movs	r3, #0
 8008e56:	1124      	asrs	r4, r4, #4
 8008e58:	4650      	mov	r0, sl
 8008e5a:	4659      	mov	r1, fp
 8008e5c:	461e      	mov	r6, r3
 8008e5e:	2c01      	cmp	r4, #1
 8008e60:	dc21      	bgt.n	8008ea6 <_strtod_l+0x51e>
 8008e62:	b10b      	cbz	r3, 8008e68 <_strtod_l+0x4e0>
 8008e64:	4682      	mov	sl, r0
 8008e66:	468b      	mov	fp, r1
 8008e68:	492c      	ldr	r1, [pc, #176]	@ (8008f1c <_strtod_l+0x594>)
 8008e6a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008e6e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008e72:	4652      	mov	r2, sl
 8008e74:	465b      	mov	r3, fp
 8008e76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e7a:	f7f7 fbdd 	bl	8000638 <__aeabi_dmul>
 8008e7e:	4b28      	ldr	r3, [pc, #160]	@ (8008f20 <_strtod_l+0x598>)
 8008e80:	460a      	mov	r2, r1
 8008e82:	400b      	ands	r3, r1
 8008e84:	4927      	ldr	r1, [pc, #156]	@ (8008f24 <_strtod_l+0x59c>)
 8008e86:	428b      	cmp	r3, r1
 8008e88:	4682      	mov	sl, r0
 8008e8a:	d898      	bhi.n	8008dbe <_strtod_l+0x436>
 8008e8c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008e90:	428b      	cmp	r3, r1
 8008e92:	bf86      	itte	hi
 8008e94:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008f28 <_strtod_l+0x5a0>
 8008e98:	f04f 3aff 	movhi.w	sl, #4294967295
 8008e9c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	9308      	str	r3, [sp, #32]
 8008ea4:	e07a      	b.n	8008f9c <_strtod_l+0x614>
 8008ea6:	07e2      	lsls	r2, r4, #31
 8008ea8:	d505      	bpl.n	8008eb6 <_strtod_l+0x52e>
 8008eaa:	9b08      	ldr	r3, [sp, #32]
 8008eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb0:	f7f7 fbc2 	bl	8000638 <__aeabi_dmul>
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	9a08      	ldr	r2, [sp, #32]
 8008eb8:	3208      	adds	r2, #8
 8008eba:	3601      	adds	r6, #1
 8008ebc:	1064      	asrs	r4, r4, #1
 8008ebe:	9208      	str	r2, [sp, #32]
 8008ec0:	e7cd      	b.n	8008e5e <_strtod_l+0x4d6>
 8008ec2:	d0ed      	beq.n	8008ea0 <_strtod_l+0x518>
 8008ec4:	4264      	negs	r4, r4
 8008ec6:	f014 020f 	ands.w	r2, r4, #15
 8008eca:	d00a      	beq.n	8008ee2 <_strtod_l+0x55a>
 8008ecc:	4b12      	ldr	r3, [pc, #72]	@ (8008f18 <_strtod_l+0x590>)
 8008ece:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ed2:	4650      	mov	r0, sl
 8008ed4:	4659      	mov	r1, fp
 8008ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eda:	f7f7 fcd7 	bl	800088c <__aeabi_ddiv>
 8008ede:	4682      	mov	sl, r0
 8008ee0:	468b      	mov	fp, r1
 8008ee2:	1124      	asrs	r4, r4, #4
 8008ee4:	d0dc      	beq.n	8008ea0 <_strtod_l+0x518>
 8008ee6:	2c1f      	cmp	r4, #31
 8008ee8:	dd20      	ble.n	8008f2c <_strtod_l+0x5a4>
 8008eea:	2400      	movs	r4, #0
 8008eec:	46a0      	mov	r8, r4
 8008eee:	940a      	str	r4, [sp, #40]	@ 0x28
 8008ef0:	46a1      	mov	r9, r4
 8008ef2:	9a05      	ldr	r2, [sp, #20]
 8008ef4:	2322      	movs	r3, #34	@ 0x22
 8008ef6:	f04f 0a00 	mov.w	sl, #0
 8008efa:	f04f 0b00 	mov.w	fp, #0
 8008efe:	6013      	str	r3, [r2, #0]
 8008f00:	e768      	b.n	8008dd4 <_strtod_l+0x44c>
 8008f02:	bf00      	nop
 8008f04:	0800b001 	.word	0x0800b001
 8008f08:	0800b214 	.word	0x0800b214
 8008f0c:	0800aff9 	.word	0x0800aff9
 8008f10:	0800b030 	.word	0x0800b030
 8008f14:	0800b3bd 	.word	0x0800b3bd
 8008f18:	0800b148 	.word	0x0800b148
 8008f1c:	0800b120 	.word	0x0800b120
 8008f20:	7ff00000 	.word	0x7ff00000
 8008f24:	7ca00000 	.word	0x7ca00000
 8008f28:	7fefffff 	.word	0x7fefffff
 8008f2c:	f014 0310 	ands.w	r3, r4, #16
 8008f30:	bf18      	it	ne
 8008f32:	236a      	movne	r3, #106	@ 0x6a
 8008f34:	4ea9      	ldr	r6, [pc, #676]	@ (80091dc <_strtod_l+0x854>)
 8008f36:	9308      	str	r3, [sp, #32]
 8008f38:	4650      	mov	r0, sl
 8008f3a:	4659      	mov	r1, fp
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	07e2      	lsls	r2, r4, #31
 8008f40:	d504      	bpl.n	8008f4c <_strtod_l+0x5c4>
 8008f42:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008f46:	f7f7 fb77 	bl	8000638 <__aeabi_dmul>
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	1064      	asrs	r4, r4, #1
 8008f4e:	f106 0608 	add.w	r6, r6, #8
 8008f52:	d1f4      	bne.n	8008f3e <_strtod_l+0x5b6>
 8008f54:	b10b      	cbz	r3, 8008f5a <_strtod_l+0x5d2>
 8008f56:	4682      	mov	sl, r0
 8008f58:	468b      	mov	fp, r1
 8008f5a:	9b08      	ldr	r3, [sp, #32]
 8008f5c:	b1b3      	cbz	r3, 8008f8c <_strtod_l+0x604>
 8008f5e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008f62:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	4659      	mov	r1, fp
 8008f6a:	dd0f      	ble.n	8008f8c <_strtod_l+0x604>
 8008f6c:	2b1f      	cmp	r3, #31
 8008f6e:	dd55      	ble.n	800901c <_strtod_l+0x694>
 8008f70:	2b34      	cmp	r3, #52	@ 0x34
 8008f72:	bfde      	ittt	le
 8008f74:	f04f 33ff 	movle.w	r3, #4294967295
 8008f78:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008f7c:	4093      	lslle	r3, r2
 8008f7e:	f04f 0a00 	mov.w	sl, #0
 8008f82:	bfcc      	ite	gt
 8008f84:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008f88:	ea03 0b01 	andle.w	fp, r3, r1
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	2300      	movs	r3, #0
 8008f90:	4650      	mov	r0, sl
 8008f92:	4659      	mov	r1, fp
 8008f94:	f7f7 fdb8 	bl	8000b08 <__aeabi_dcmpeq>
 8008f98:	2800      	cmp	r0, #0
 8008f9a:	d1a6      	bne.n	8008eea <_strtod_l+0x562>
 8008f9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f9e:	9300      	str	r3, [sp, #0]
 8008fa0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008fa2:	9805      	ldr	r0, [sp, #20]
 8008fa4:	462b      	mov	r3, r5
 8008fa6:	463a      	mov	r2, r7
 8008fa8:	f7ff f8c6 	bl	8008138 <__s2b>
 8008fac:	900a      	str	r0, [sp, #40]	@ 0x28
 8008fae:	2800      	cmp	r0, #0
 8008fb0:	f43f af05 	beq.w	8008dbe <_strtod_l+0x436>
 8008fb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008fb6:	2a00      	cmp	r2, #0
 8008fb8:	eba9 0308 	sub.w	r3, r9, r8
 8008fbc:	bfa8      	it	ge
 8008fbe:	2300      	movge	r3, #0
 8008fc0:	9312      	str	r3, [sp, #72]	@ 0x48
 8008fc2:	2400      	movs	r4, #0
 8008fc4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008fc8:	9316      	str	r3, [sp, #88]	@ 0x58
 8008fca:	46a0      	mov	r8, r4
 8008fcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fce:	9805      	ldr	r0, [sp, #20]
 8008fd0:	6859      	ldr	r1, [r3, #4]
 8008fd2:	f7ff f809 	bl	8007fe8 <_Balloc>
 8008fd6:	4681      	mov	r9, r0
 8008fd8:	2800      	cmp	r0, #0
 8008fda:	f43f aef4 	beq.w	8008dc6 <_strtod_l+0x43e>
 8008fde:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fe0:	691a      	ldr	r2, [r3, #16]
 8008fe2:	3202      	adds	r2, #2
 8008fe4:	f103 010c 	add.w	r1, r3, #12
 8008fe8:	0092      	lsls	r2, r2, #2
 8008fea:	300c      	adds	r0, #12
 8008fec:	f000 ff48 	bl	8009e80 <memcpy>
 8008ff0:	ec4b ab10 	vmov	d0, sl, fp
 8008ff4:	9805      	ldr	r0, [sp, #20]
 8008ff6:	aa1c      	add	r2, sp, #112	@ 0x70
 8008ff8:	a91b      	add	r1, sp, #108	@ 0x6c
 8008ffa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008ffe:	f7ff fbd7 	bl	80087b0 <__d2b>
 8009002:	901a      	str	r0, [sp, #104]	@ 0x68
 8009004:	2800      	cmp	r0, #0
 8009006:	f43f aede 	beq.w	8008dc6 <_strtod_l+0x43e>
 800900a:	9805      	ldr	r0, [sp, #20]
 800900c:	2101      	movs	r1, #1
 800900e:	f7ff f929 	bl	8008264 <__i2b>
 8009012:	4680      	mov	r8, r0
 8009014:	b948      	cbnz	r0, 800902a <_strtod_l+0x6a2>
 8009016:	f04f 0800 	mov.w	r8, #0
 800901a:	e6d4      	b.n	8008dc6 <_strtod_l+0x43e>
 800901c:	f04f 32ff 	mov.w	r2, #4294967295
 8009020:	fa02 f303 	lsl.w	r3, r2, r3
 8009024:	ea03 0a0a 	and.w	sl, r3, sl
 8009028:	e7b0      	b.n	8008f8c <_strtod_l+0x604>
 800902a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800902c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800902e:	2d00      	cmp	r5, #0
 8009030:	bfab      	itete	ge
 8009032:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009034:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009036:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009038:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800903a:	bfac      	ite	ge
 800903c:	18ef      	addge	r7, r5, r3
 800903e:	1b5e      	sublt	r6, r3, r5
 8009040:	9b08      	ldr	r3, [sp, #32]
 8009042:	1aed      	subs	r5, r5, r3
 8009044:	4415      	add	r5, r2
 8009046:	4b66      	ldr	r3, [pc, #408]	@ (80091e0 <_strtod_l+0x858>)
 8009048:	3d01      	subs	r5, #1
 800904a:	429d      	cmp	r5, r3
 800904c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009050:	da50      	bge.n	80090f4 <_strtod_l+0x76c>
 8009052:	1b5b      	subs	r3, r3, r5
 8009054:	2b1f      	cmp	r3, #31
 8009056:	eba2 0203 	sub.w	r2, r2, r3
 800905a:	f04f 0101 	mov.w	r1, #1
 800905e:	dc3d      	bgt.n	80090dc <_strtod_l+0x754>
 8009060:	fa01 f303 	lsl.w	r3, r1, r3
 8009064:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009066:	2300      	movs	r3, #0
 8009068:	9310      	str	r3, [sp, #64]	@ 0x40
 800906a:	18bd      	adds	r5, r7, r2
 800906c:	9b08      	ldr	r3, [sp, #32]
 800906e:	42af      	cmp	r7, r5
 8009070:	4416      	add	r6, r2
 8009072:	441e      	add	r6, r3
 8009074:	463b      	mov	r3, r7
 8009076:	bfa8      	it	ge
 8009078:	462b      	movge	r3, r5
 800907a:	42b3      	cmp	r3, r6
 800907c:	bfa8      	it	ge
 800907e:	4633      	movge	r3, r6
 8009080:	2b00      	cmp	r3, #0
 8009082:	bfc2      	ittt	gt
 8009084:	1aed      	subgt	r5, r5, r3
 8009086:	1af6      	subgt	r6, r6, r3
 8009088:	1aff      	subgt	r7, r7, r3
 800908a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800908c:	2b00      	cmp	r3, #0
 800908e:	dd16      	ble.n	80090be <_strtod_l+0x736>
 8009090:	4641      	mov	r1, r8
 8009092:	9805      	ldr	r0, [sp, #20]
 8009094:	461a      	mov	r2, r3
 8009096:	f7ff f9a5 	bl	80083e4 <__pow5mult>
 800909a:	4680      	mov	r8, r0
 800909c:	2800      	cmp	r0, #0
 800909e:	d0ba      	beq.n	8009016 <_strtod_l+0x68e>
 80090a0:	4601      	mov	r1, r0
 80090a2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80090a4:	9805      	ldr	r0, [sp, #20]
 80090a6:	f7ff f8f3 	bl	8008290 <__multiply>
 80090aa:	900e      	str	r0, [sp, #56]	@ 0x38
 80090ac:	2800      	cmp	r0, #0
 80090ae:	f43f ae8a 	beq.w	8008dc6 <_strtod_l+0x43e>
 80090b2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80090b4:	9805      	ldr	r0, [sp, #20]
 80090b6:	f7fe ffd7 	bl	8008068 <_Bfree>
 80090ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80090bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80090be:	2d00      	cmp	r5, #0
 80090c0:	dc1d      	bgt.n	80090fe <_strtod_l+0x776>
 80090c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	dd23      	ble.n	8009110 <_strtod_l+0x788>
 80090c8:	4649      	mov	r1, r9
 80090ca:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80090cc:	9805      	ldr	r0, [sp, #20]
 80090ce:	f7ff f989 	bl	80083e4 <__pow5mult>
 80090d2:	4681      	mov	r9, r0
 80090d4:	b9e0      	cbnz	r0, 8009110 <_strtod_l+0x788>
 80090d6:	f04f 0900 	mov.w	r9, #0
 80090da:	e674      	b.n	8008dc6 <_strtod_l+0x43e>
 80090dc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80090e0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80090e4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80090e8:	35e2      	adds	r5, #226	@ 0xe2
 80090ea:	fa01 f305 	lsl.w	r3, r1, r5
 80090ee:	9310      	str	r3, [sp, #64]	@ 0x40
 80090f0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80090f2:	e7ba      	b.n	800906a <_strtod_l+0x6e2>
 80090f4:	2300      	movs	r3, #0
 80090f6:	9310      	str	r3, [sp, #64]	@ 0x40
 80090f8:	2301      	movs	r3, #1
 80090fa:	9313      	str	r3, [sp, #76]	@ 0x4c
 80090fc:	e7b5      	b.n	800906a <_strtod_l+0x6e2>
 80090fe:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009100:	9805      	ldr	r0, [sp, #20]
 8009102:	462a      	mov	r2, r5
 8009104:	f7ff f9c8 	bl	8008498 <__lshift>
 8009108:	901a      	str	r0, [sp, #104]	@ 0x68
 800910a:	2800      	cmp	r0, #0
 800910c:	d1d9      	bne.n	80090c2 <_strtod_l+0x73a>
 800910e:	e65a      	b.n	8008dc6 <_strtod_l+0x43e>
 8009110:	2e00      	cmp	r6, #0
 8009112:	dd07      	ble.n	8009124 <_strtod_l+0x79c>
 8009114:	4649      	mov	r1, r9
 8009116:	9805      	ldr	r0, [sp, #20]
 8009118:	4632      	mov	r2, r6
 800911a:	f7ff f9bd 	bl	8008498 <__lshift>
 800911e:	4681      	mov	r9, r0
 8009120:	2800      	cmp	r0, #0
 8009122:	d0d8      	beq.n	80090d6 <_strtod_l+0x74e>
 8009124:	2f00      	cmp	r7, #0
 8009126:	dd08      	ble.n	800913a <_strtod_l+0x7b2>
 8009128:	4641      	mov	r1, r8
 800912a:	9805      	ldr	r0, [sp, #20]
 800912c:	463a      	mov	r2, r7
 800912e:	f7ff f9b3 	bl	8008498 <__lshift>
 8009132:	4680      	mov	r8, r0
 8009134:	2800      	cmp	r0, #0
 8009136:	f43f ae46 	beq.w	8008dc6 <_strtod_l+0x43e>
 800913a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800913c:	9805      	ldr	r0, [sp, #20]
 800913e:	464a      	mov	r2, r9
 8009140:	f7ff fa32 	bl	80085a8 <__mdiff>
 8009144:	4604      	mov	r4, r0
 8009146:	2800      	cmp	r0, #0
 8009148:	f43f ae3d 	beq.w	8008dc6 <_strtod_l+0x43e>
 800914c:	68c3      	ldr	r3, [r0, #12]
 800914e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009150:	2300      	movs	r3, #0
 8009152:	60c3      	str	r3, [r0, #12]
 8009154:	4641      	mov	r1, r8
 8009156:	f7ff fa0b 	bl	8008570 <__mcmp>
 800915a:	2800      	cmp	r0, #0
 800915c:	da46      	bge.n	80091ec <_strtod_l+0x864>
 800915e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009160:	ea53 030a 	orrs.w	r3, r3, sl
 8009164:	d16c      	bne.n	8009240 <_strtod_l+0x8b8>
 8009166:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800916a:	2b00      	cmp	r3, #0
 800916c:	d168      	bne.n	8009240 <_strtod_l+0x8b8>
 800916e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009172:	0d1b      	lsrs	r3, r3, #20
 8009174:	051b      	lsls	r3, r3, #20
 8009176:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800917a:	d961      	bls.n	8009240 <_strtod_l+0x8b8>
 800917c:	6963      	ldr	r3, [r4, #20]
 800917e:	b913      	cbnz	r3, 8009186 <_strtod_l+0x7fe>
 8009180:	6923      	ldr	r3, [r4, #16]
 8009182:	2b01      	cmp	r3, #1
 8009184:	dd5c      	ble.n	8009240 <_strtod_l+0x8b8>
 8009186:	4621      	mov	r1, r4
 8009188:	2201      	movs	r2, #1
 800918a:	9805      	ldr	r0, [sp, #20]
 800918c:	f7ff f984 	bl	8008498 <__lshift>
 8009190:	4641      	mov	r1, r8
 8009192:	4604      	mov	r4, r0
 8009194:	f7ff f9ec 	bl	8008570 <__mcmp>
 8009198:	2800      	cmp	r0, #0
 800919a:	dd51      	ble.n	8009240 <_strtod_l+0x8b8>
 800919c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80091a0:	9a08      	ldr	r2, [sp, #32]
 80091a2:	0d1b      	lsrs	r3, r3, #20
 80091a4:	051b      	lsls	r3, r3, #20
 80091a6:	2a00      	cmp	r2, #0
 80091a8:	d06b      	beq.n	8009282 <_strtod_l+0x8fa>
 80091aa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80091ae:	d868      	bhi.n	8009282 <_strtod_l+0x8fa>
 80091b0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80091b4:	f67f ae9d 	bls.w	8008ef2 <_strtod_l+0x56a>
 80091b8:	4b0a      	ldr	r3, [pc, #40]	@ (80091e4 <_strtod_l+0x85c>)
 80091ba:	4650      	mov	r0, sl
 80091bc:	4659      	mov	r1, fp
 80091be:	2200      	movs	r2, #0
 80091c0:	f7f7 fa3a 	bl	8000638 <__aeabi_dmul>
 80091c4:	4b08      	ldr	r3, [pc, #32]	@ (80091e8 <_strtod_l+0x860>)
 80091c6:	400b      	ands	r3, r1
 80091c8:	4682      	mov	sl, r0
 80091ca:	468b      	mov	fp, r1
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	f47f ae05 	bne.w	8008ddc <_strtod_l+0x454>
 80091d2:	9a05      	ldr	r2, [sp, #20]
 80091d4:	2322      	movs	r3, #34	@ 0x22
 80091d6:	6013      	str	r3, [r2, #0]
 80091d8:	e600      	b.n	8008ddc <_strtod_l+0x454>
 80091da:	bf00      	nop
 80091dc:	0800b240 	.word	0x0800b240
 80091e0:	fffffc02 	.word	0xfffffc02
 80091e4:	39500000 	.word	0x39500000
 80091e8:	7ff00000 	.word	0x7ff00000
 80091ec:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80091f0:	d165      	bne.n	80092be <_strtod_l+0x936>
 80091f2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80091f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80091f8:	b35a      	cbz	r2, 8009252 <_strtod_l+0x8ca>
 80091fa:	4a9f      	ldr	r2, [pc, #636]	@ (8009478 <_strtod_l+0xaf0>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d12b      	bne.n	8009258 <_strtod_l+0x8d0>
 8009200:	9b08      	ldr	r3, [sp, #32]
 8009202:	4651      	mov	r1, sl
 8009204:	b303      	cbz	r3, 8009248 <_strtod_l+0x8c0>
 8009206:	4b9d      	ldr	r3, [pc, #628]	@ (800947c <_strtod_l+0xaf4>)
 8009208:	465a      	mov	r2, fp
 800920a:	4013      	ands	r3, r2
 800920c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009210:	f04f 32ff 	mov.w	r2, #4294967295
 8009214:	d81b      	bhi.n	800924e <_strtod_l+0x8c6>
 8009216:	0d1b      	lsrs	r3, r3, #20
 8009218:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800921c:	fa02 f303 	lsl.w	r3, r2, r3
 8009220:	4299      	cmp	r1, r3
 8009222:	d119      	bne.n	8009258 <_strtod_l+0x8d0>
 8009224:	4b96      	ldr	r3, [pc, #600]	@ (8009480 <_strtod_l+0xaf8>)
 8009226:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009228:	429a      	cmp	r2, r3
 800922a:	d102      	bne.n	8009232 <_strtod_l+0x8aa>
 800922c:	3101      	adds	r1, #1
 800922e:	f43f adca 	beq.w	8008dc6 <_strtod_l+0x43e>
 8009232:	4b92      	ldr	r3, [pc, #584]	@ (800947c <_strtod_l+0xaf4>)
 8009234:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009236:	401a      	ands	r2, r3
 8009238:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800923c:	f04f 0a00 	mov.w	sl, #0
 8009240:	9b08      	ldr	r3, [sp, #32]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d1b8      	bne.n	80091b8 <_strtod_l+0x830>
 8009246:	e5c9      	b.n	8008ddc <_strtod_l+0x454>
 8009248:	f04f 33ff 	mov.w	r3, #4294967295
 800924c:	e7e8      	b.n	8009220 <_strtod_l+0x898>
 800924e:	4613      	mov	r3, r2
 8009250:	e7e6      	b.n	8009220 <_strtod_l+0x898>
 8009252:	ea53 030a 	orrs.w	r3, r3, sl
 8009256:	d0a1      	beq.n	800919c <_strtod_l+0x814>
 8009258:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800925a:	b1db      	cbz	r3, 8009294 <_strtod_l+0x90c>
 800925c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800925e:	4213      	tst	r3, r2
 8009260:	d0ee      	beq.n	8009240 <_strtod_l+0x8b8>
 8009262:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009264:	9a08      	ldr	r2, [sp, #32]
 8009266:	4650      	mov	r0, sl
 8009268:	4659      	mov	r1, fp
 800926a:	b1bb      	cbz	r3, 800929c <_strtod_l+0x914>
 800926c:	f7ff fb6e 	bl	800894c <sulp>
 8009270:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009274:	ec53 2b10 	vmov	r2, r3, d0
 8009278:	f7f7 f828 	bl	80002cc <__adddf3>
 800927c:	4682      	mov	sl, r0
 800927e:	468b      	mov	fp, r1
 8009280:	e7de      	b.n	8009240 <_strtod_l+0x8b8>
 8009282:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009286:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800928a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800928e:	f04f 3aff 	mov.w	sl, #4294967295
 8009292:	e7d5      	b.n	8009240 <_strtod_l+0x8b8>
 8009294:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009296:	ea13 0f0a 	tst.w	r3, sl
 800929a:	e7e1      	b.n	8009260 <_strtod_l+0x8d8>
 800929c:	f7ff fb56 	bl	800894c <sulp>
 80092a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80092a4:	ec53 2b10 	vmov	r2, r3, d0
 80092a8:	f7f7 f80e 	bl	80002c8 <__aeabi_dsub>
 80092ac:	2200      	movs	r2, #0
 80092ae:	2300      	movs	r3, #0
 80092b0:	4682      	mov	sl, r0
 80092b2:	468b      	mov	fp, r1
 80092b4:	f7f7 fc28 	bl	8000b08 <__aeabi_dcmpeq>
 80092b8:	2800      	cmp	r0, #0
 80092ba:	d0c1      	beq.n	8009240 <_strtod_l+0x8b8>
 80092bc:	e619      	b.n	8008ef2 <_strtod_l+0x56a>
 80092be:	4641      	mov	r1, r8
 80092c0:	4620      	mov	r0, r4
 80092c2:	f7ff facd 	bl	8008860 <__ratio>
 80092c6:	ec57 6b10 	vmov	r6, r7, d0
 80092ca:	2200      	movs	r2, #0
 80092cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80092d0:	4630      	mov	r0, r6
 80092d2:	4639      	mov	r1, r7
 80092d4:	f7f7 fc2c 	bl	8000b30 <__aeabi_dcmple>
 80092d8:	2800      	cmp	r0, #0
 80092da:	d06f      	beq.n	80093bc <_strtod_l+0xa34>
 80092dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d17a      	bne.n	80093d8 <_strtod_l+0xa50>
 80092e2:	f1ba 0f00 	cmp.w	sl, #0
 80092e6:	d158      	bne.n	800939a <_strtod_l+0xa12>
 80092e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80092ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d15a      	bne.n	80093a8 <_strtod_l+0xa20>
 80092f2:	4b64      	ldr	r3, [pc, #400]	@ (8009484 <_strtod_l+0xafc>)
 80092f4:	2200      	movs	r2, #0
 80092f6:	4630      	mov	r0, r6
 80092f8:	4639      	mov	r1, r7
 80092fa:	f7f7 fc0f 	bl	8000b1c <__aeabi_dcmplt>
 80092fe:	2800      	cmp	r0, #0
 8009300:	d159      	bne.n	80093b6 <_strtod_l+0xa2e>
 8009302:	4630      	mov	r0, r6
 8009304:	4639      	mov	r1, r7
 8009306:	4b60      	ldr	r3, [pc, #384]	@ (8009488 <_strtod_l+0xb00>)
 8009308:	2200      	movs	r2, #0
 800930a:	f7f7 f995 	bl	8000638 <__aeabi_dmul>
 800930e:	4606      	mov	r6, r0
 8009310:	460f      	mov	r7, r1
 8009312:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009316:	9606      	str	r6, [sp, #24]
 8009318:	9307      	str	r3, [sp, #28]
 800931a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800931e:	4d57      	ldr	r5, [pc, #348]	@ (800947c <_strtod_l+0xaf4>)
 8009320:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009324:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009326:	401d      	ands	r5, r3
 8009328:	4b58      	ldr	r3, [pc, #352]	@ (800948c <_strtod_l+0xb04>)
 800932a:	429d      	cmp	r5, r3
 800932c:	f040 80b2 	bne.w	8009494 <_strtod_l+0xb0c>
 8009330:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009332:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009336:	ec4b ab10 	vmov	d0, sl, fp
 800933a:	f7ff f9c9 	bl	80086d0 <__ulp>
 800933e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009342:	ec51 0b10 	vmov	r0, r1, d0
 8009346:	f7f7 f977 	bl	8000638 <__aeabi_dmul>
 800934a:	4652      	mov	r2, sl
 800934c:	465b      	mov	r3, fp
 800934e:	f7f6 ffbd 	bl	80002cc <__adddf3>
 8009352:	460b      	mov	r3, r1
 8009354:	4949      	ldr	r1, [pc, #292]	@ (800947c <_strtod_l+0xaf4>)
 8009356:	4a4e      	ldr	r2, [pc, #312]	@ (8009490 <_strtod_l+0xb08>)
 8009358:	4019      	ands	r1, r3
 800935a:	4291      	cmp	r1, r2
 800935c:	4682      	mov	sl, r0
 800935e:	d942      	bls.n	80093e6 <_strtod_l+0xa5e>
 8009360:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009362:	4b47      	ldr	r3, [pc, #284]	@ (8009480 <_strtod_l+0xaf8>)
 8009364:	429a      	cmp	r2, r3
 8009366:	d103      	bne.n	8009370 <_strtod_l+0x9e8>
 8009368:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800936a:	3301      	adds	r3, #1
 800936c:	f43f ad2b 	beq.w	8008dc6 <_strtod_l+0x43e>
 8009370:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009480 <_strtod_l+0xaf8>
 8009374:	f04f 3aff 	mov.w	sl, #4294967295
 8009378:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800937a:	9805      	ldr	r0, [sp, #20]
 800937c:	f7fe fe74 	bl	8008068 <_Bfree>
 8009380:	9805      	ldr	r0, [sp, #20]
 8009382:	4649      	mov	r1, r9
 8009384:	f7fe fe70 	bl	8008068 <_Bfree>
 8009388:	9805      	ldr	r0, [sp, #20]
 800938a:	4641      	mov	r1, r8
 800938c:	f7fe fe6c 	bl	8008068 <_Bfree>
 8009390:	9805      	ldr	r0, [sp, #20]
 8009392:	4621      	mov	r1, r4
 8009394:	f7fe fe68 	bl	8008068 <_Bfree>
 8009398:	e618      	b.n	8008fcc <_strtod_l+0x644>
 800939a:	f1ba 0f01 	cmp.w	sl, #1
 800939e:	d103      	bne.n	80093a8 <_strtod_l+0xa20>
 80093a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	f43f ada5 	beq.w	8008ef2 <_strtod_l+0x56a>
 80093a8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009458 <_strtod_l+0xad0>
 80093ac:	4f35      	ldr	r7, [pc, #212]	@ (8009484 <_strtod_l+0xafc>)
 80093ae:	ed8d 7b06 	vstr	d7, [sp, #24]
 80093b2:	2600      	movs	r6, #0
 80093b4:	e7b1      	b.n	800931a <_strtod_l+0x992>
 80093b6:	4f34      	ldr	r7, [pc, #208]	@ (8009488 <_strtod_l+0xb00>)
 80093b8:	2600      	movs	r6, #0
 80093ba:	e7aa      	b.n	8009312 <_strtod_l+0x98a>
 80093bc:	4b32      	ldr	r3, [pc, #200]	@ (8009488 <_strtod_l+0xb00>)
 80093be:	4630      	mov	r0, r6
 80093c0:	4639      	mov	r1, r7
 80093c2:	2200      	movs	r2, #0
 80093c4:	f7f7 f938 	bl	8000638 <__aeabi_dmul>
 80093c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093ca:	4606      	mov	r6, r0
 80093cc:	460f      	mov	r7, r1
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d09f      	beq.n	8009312 <_strtod_l+0x98a>
 80093d2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80093d6:	e7a0      	b.n	800931a <_strtod_l+0x992>
 80093d8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009460 <_strtod_l+0xad8>
 80093dc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80093e0:	ec57 6b17 	vmov	r6, r7, d7
 80093e4:	e799      	b.n	800931a <_strtod_l+0x992>
 80093e6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80093ea:	9b08      	ldr	r3, [sp, #32]
 80093ec:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d1c1      	bne.n	8009378 <_strtod_l+0x9f0>
 80093f4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80093f8:	0d1b      	lsrs	r3, r3, #20
 80093fa:	051b      	lsls	r3, r3, #20
 80093fc:	429d      	cmp	r5, r3
 80093fe:	d1bb      	bne.n	8009378 <_strtod_l+0x9f0>
 8009400:	4630      	mov	r0, r6
 8009402:	4639      	mov	r1, r7
 8009404:	f7f7 fc78 	bl	8000cf8 <__aeabi_d2lz>
 8009408:	f7f7 f8e8 	bl	80005dc <__aeabi_l2d>
 800940c:	4602      	mov	r2, r0
 800940e:	460b      	mov	r3, r1
 8009410:	4630      	mov	r0, r6
 8009412:	4639      	mov	r1, r7
 8009414:	f7f6 ff58 	bl	80002c8 <__aeabi_dsub>
 8009418:	460b      	mov	r3, r1
 800941a:	4602      	mov	r2, r0
 800941c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009420:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009424:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009426:	ea46 060a 	orr.w	r6, r6, sl
 800942a:	431e      	orrs	r6, r3
 800942c:	d06f      	beq.n	800950e <_strtod_l+0xb86>
 800942e:	a30e      	add	r3, pc, #56	@ (adr r3, 8009468 <_strtod_l+0xae0>)
 8009430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009434:	f7f7 fb72 	bl	8000b1c <__aeabi_dcmplt>
 8009438:	2800      	cmp	r0, #0
 800943a:	f47f accf 	bne.w	8008ddc <_strtod_l+0x454>
 800943e:	a30c      	add	r3, pc, #48	@ (adr r3, 8009470 <_strtod_l+0xae8>)
 8009440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009444:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009448:	f7f7 fb86 	bl	8000b58 <__aeabi_dcmpgt>
 800944c:	2800      	cmp	r0, #0
 800944e:	d093      	beq.n	8009378 <_strtod_l+0x9f0>
 8009450:	e4c4      	b.n	8008ddc <_strtod_l+0x454>
 8009452:	bf00      	nop
 8009454:	f3af 8000 	nop.w
 8009458:	00000000 	.word	0x00000000
 800945c:	bff00000 	.word	0xbff00000
 8009460:	00000000 	.word	0x00000000
 8009464:	3ff00000 	.word	0x3ff00000
 8009468:	94a03595 	.word	0x94a03595
 800946c:	3fdfffff 	.word	0x3fdfffff
 8009470:	35afe535 	.word	0x35afe535
 8009474:	3fe00000 	.word	0x3fe00000
 8009478:	000fffff 	.word	0x000fffff
 800947c:	7ff00000 	.word	0x7ff00000
 8009480:	7fefffff 	.word	0x7fefffff
 8009484:	3ff00000 	.word	0x3ff00000
 8009488:	3fe00000 	.word	0x3fe00000
 800948c:	7fe00000 	.word	0x7fe00000
 8009490:	7c9fffff 	.word	0x7c9fffff
 8009494:	9b08      	ldr	r3, [sp, #32]
 8009496:	b323      	cbz	r3, 80094e2 <_strtod_l+0xb5a>
 8009498:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800949c:	d821      	bhi.n	80094e2 <_strtod_l+0xb5a>
 800949e:	a328      	add	r3, pc, #160	@ (adr r3, 8009540 <_strtod_l+0xbb8>)
 80094a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a4:	4630      	mov	r0, r6
 80094a6:	4639      	mov	r1, r7
 80094a8:	f7f7 fb42 	bl	8000b30 <__aeabi_dcmple>
 80094ac:	b1a0      	cbz	r0, 80094d8 <_strtod_l+0xb50>
 80094ae:	4639      	mov	r1, r7
 80094b0:	4630      	mov	r0, r6
 80094b2:	f7f7 fb99 	bl	8000be8 <__aeabi_d2uiz>
 80094b6:	2801      	cmp	r0, #1
 80094b8:	bf38      	it	cc
 80094ba:	2001      	movcc	r0, #1
 80094bc:	f7f7 f842 	bl	8000544 <__aeabi_ui2d>
 80094c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094c2:	4606      	mov	r6, r0
 80094c4:	460f      	mov	r7, r1
 80094c6:	b9fb      	cbnz	r3, 8009508 <_strtod_l+0xb80>
 80094c8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80094cc:	9014      	str	r0, [sp, #80]	@ 0x50
 80094ce:	9315      	str	r3, [sp, #84]	@ 0x54
 80094d0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80094d4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80094d8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80094da:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80094de:	1b5b      	subs	r3, r3, r5
 80094e0:	9311      	str	r3, [sp, #68]	@ 0x44
 80094e2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80094e6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80094ea:	f7ff f8f1 	bl	80086d0 <__ulp>
 80094ee:	4650      	mov	r0, sl
 80094f0:	ec53 2b10 	vmov	r2, r3, d0
 80094f4:	4659      	mov	r1, fp
 80094f6:	f7f7 f89f 	bl	8000638 <__aeabi_dmul>
 80094fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80094fe:	f7f6 fee5 	bl	80002cc <__adddf3>
 8009502:	4682      	mov	sl, r0
 8009504:	468b      	mov	fp, r1
 8009506:	e770      	b.n	80093ea <_strtod_l+0xa62>
 8009508:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800950c:	e7e0      	b.n	80094d0 <_strtod_l+0xb48>
 800950e:	a30e      	add	r3, pc, #56	@ (adr r3, 8009548 <_strtod_l+0xbc0>)
 8009510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009514:	f7f7 fb02 	bl	8000b1c <__aeabi_dcmplt>
 8009518:	e798      	b.n	800944c <_strtod_l+0xac4>
 800951a:	2300      	movs	r3, #0
 800951c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800951e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009520:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009522:	6013      	str	r3, [r2, #0]
 8009524:	f7ff ba6d 	b.w	8008a02 <_strtod_l+0x7a>
 8009528:	2a65      	cmp	r2, #101	@ 0x65
 800952a:	f43f ab66 	beq.w	8008bfa <_strtod_l+0x272>
 800952e:	2a45      	cmp	r2, #69	@ 0x45
 8009530:	f43f ab63 	beq.w	8008bfa <_strtod_l+0x272>
 8009534:	2301      	movs	r3, #1
 8009536:	f7ff bb9e 	b.w	8008c76 <_strtod_l+0x2ee>
 800953a:	bf00      	nop
 800953c:	f3af 8000 	nop.w
 8009540:	ffc00000 	.word	0xffc00000
 8009544:	41dfffff 	.word	0x41dfffff
 8009548:	94a03595 	.word	0x94a03595
 800954c:	3fcfffff 	.word	0x3fcfffff

08009550 <_strtod_r>:
 8009550:	4b01      	ldr	r3, [pc, #4]	@ (8009558 <_strtod_r+0x8>)
 8009552:	f7ff ba19 	b.w	8008988 <_strtod_l>
 8009556:	bf00      	nop
 8009558:	20000068 	.word	0x20000068

0800955c <_strtol_l.constprop.0>:
 800955c:	2b24      	cmp	r3, #36	@ 0x24
 800955e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009562:	4686      	mov	lr, r0
 8009564:	4690      	mov	r8, r2
 8009566:	d801      	bhi.n	800956c <_strtol_l.constprop.0+0x10>
 8009568:	2b01      	cmp	r3, #1
 800956a:	d106      	bne.n	800957a <_strtol_l.constprop.0+0x1e>
 800956c:	f7fd fdbc 	bl	80070e8 <__errno>
 8009570:	2316      	movs	r3, #22
 8009572:	6003      	str	r3, [r0, #0]
 8009574:	2000      	movs	r0, #0
 8009576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800957a:	4834      	ldr	r0, [pc, #208]	@ (800964c <_strtol_l.constprop.0+0xf0>)
 800957c:	460d      	mov	r5, r1
 800957e:	462a      	mov	r2, r5
 8009580:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009584:	5d06      	ldrb	r6, [r0, r4]
 8009586:	f016 0608 	ands.w	r6, r6, #8
 800958a:	d1f8      	bne.n	800957e <_strtol_l.constprop.0+0x22>
 800958c:	2c2d      	cmp	r4, #45	@ 0x2d
 800958e:	d12d      	bne.n	80095ec <_strtol_l.constprop.0+0x90>
 8009590:	782c      	ldrb	r4, [r5, #0]
 8009592:	2601      	movs	r6, #1
 8009594:	1c95      	adds	r5, r2, #2
 8009596:	f033 0210 	bics.w	r2, r3, #16
 800959a:	d109      	bne.n	80095b0 <_strtol_l.constprop.0+0x54>
 800959c:	2c30      	cmp	r4, #48	@ 0x30
 800959e:	d12a      	bne.n	80095f6 <_strtol_l.constprop.0+0x9a>
 80095a0:	782a      	ldrb	r2, [r5, #0]
 80095a2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80095a6:	2a58      	cmp	r2, #88	@ 0x58
 80095a8:	d125      	bne.n	80095f6 <_strtol_l.constprop.0+0x9a>
 80095aa:	786c      	ldrb	r4, [r5, #1]
 80095ac:	2310      	movs	r3, #16
 80095ae:	3502      	adds	r5, #2
 80095b0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80095b4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80095b8:	2200      	movs	r2, #0
 80095ba:	fbbc f9f3 	udiv	r9, ip, r3
 80095be:	4610      	mov	r0, r2
 80095c0:	fb03 ca19 	mls	sl, r3, r9, ip
 80095c4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80095c8:	2f09      	cmp	r7, #9
 80095ca:	d81b      	bhi.n	8009604 <_strtol_l.constprop.0+0xa8>
 80095cc:	463c      	mov	r4, r7
 80095ce:	42a3      	cmp	r3, r4
 80095d0:	dd27      	ble.n	8009622 <_strtol_l.constprop.0+0xc6>
 80095d2:	1c57      	adds	r7, r2, #1
 80095d4:	d007      	beq.n	80095e6 <_strtol_l.constprop.0+0x8a>
 80095d6:	4581      	cmp	r9, r0
 80095d8:	d320      	bcc.n	800961c <_strtol_l.constprop.0+0xc0>
 80095da:	d101      	bne.n	80095e0 <_strtol_l.constprop.0+0x84>
 80095dc:	45a2      	cmp	sl, r4
 80095de:	db1d      	blt.n	800961c <_strtol_l.constprop.0+0xc0>
 80095e0:	fb00 4003 	mla	r0, r0, r3, r4
 80095e4:	2201      	movs	r2, #1
 80095e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80095ea:	e7eb      	b.n	80095c4 <_strtol_l.constprop.0+0x68>
 80095ec:	2c2b      	cmp	r4, #43	@ 0x2b
 80095ee:	bf04      	itt	eq
 80095f0:	782c      	ldrbeq	r4, [r5, #0]
 80095f2:	1c95      	addeq	r5, r2, #2
 80095f4:	e7cf      	b.n	8009596 <_strtol_l.constprop.0+0x3a>
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d1da      	bne.n	80095b0 <_strtol_l.constprop.0+0x54>
 80095fa:	2c30      	cmp	r4, #48	@ 0x30
 80095fc:	bf0c      	ite	eq
 80095fe:	2308      	moveq	r3, #8
 8009600:	230a      	movne	r3, #10
 8009602:	e7d5      	b.n	80095b0 <_strtol_l.constprop.0+0x54>
 8009604:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009608:	2f19      	cmp	r7, #25
 800960a:	d801      	bhi.n	8009610 <_strtol_l.constprop.0+0xb4>
 800960c:	3c37      	subs	r4, #55	@ 0x37
 800960e:	e7de      	b.n	80095ce <_strtol_l.constprop.0+0x72>
 8009610:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009614:	2f19      	cmp	r7, #25
 8009616:	d804      	bhi.n	8009622 <_strtol_l.constprop.0+0xc6>
 8009618:	3c57      	subs	r4, #87	@ 0x57
 800961a:	e7d8      	b.n	80095ce <_strtol_l.constprop.0+0x72>
 800961c:	f04f 32ff 	mov.w	r2, #4294967295
 8009620:	e7e1      	b.n	80095e6 <_strtol_l.constprop.0+0x8a>
 8009622:	1c53      	adds	r3, r2, #1
 8009624:	d108      	bne.n	8009638 <_strtol_l.constprop.0+0xdc>
 8009626:	2322      	movs	r3, #34	@ 0x22
 8009628:	f8ce 3000 	str.w	r3, [lr]
 800962c:	4660      	mov	r0, ip
 800962e:	f1b8 0f00 	cmp.w	r8, #0
 8009632:	d0a0      	beq.n	8009576 <_strtol_l.constprop.0+0x1a>
 8009634:	1e69      	subs	r1, r5, #1
 8009636:	e006      	b.n	8009646 <_strtol_l.constprop.0+0xea>
 8009638:	b106      	cbz	r6, 800963c <_strtol_l.constprop.0+0xe0>
 800963a:	4240      	negs	r0, r0
 800963c:	f1b8 0f00 	cmp.w	r8, #0
 8009640:	d099      	beq.n	8009576 <_strtol_l.constprop.0+0x1a>
 8009642:	2a00      	cmp	r2, #0
 8009644:	d1f6      	bne.n	8009634 <_strtol_l.constprop.0+0xd8>
 8009646:	f8c8 1000 	str.w	r1, [r8]
 800964a:	e794      	b.n	8009576 <_strtol_l.constprop.0+0x1a>
 800964c:	0800b269 	.word	0x0800b269

08009650 <_strtol_r>:
 8009650:	f7ff bf84 	b.w	800955c <_strtol_l.constprop.0>

08009654 <__ssputs_r>:
 8009654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009658:	688e      	ldr	r6, [r1, #8]
 800965a:	461f      	mov	r7, r3
 800965c:	42be      	cmp	r6, r7
 800965e:	680b      	ldr	r3, [r1, #0]
 8009660:	4682      	mov	sl, r0
 8009662:	460c      	mov	r4, r1
 8009664:	4690      	mov	r8, r2
 8009666:	d82d      	bhi.n	80096c4 <__ssputs_r+0x70>
 8009668:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800966c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009670:	d026      	beq.n	80096c0 <__ssputs_r+0x6c>
 8009672:	6965      	ldr	r5, [r4, #20]
 8009674:	6909      	ldr	r1, [r1, #16]
 8009676:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800967a:	eba3 0901 	sub.w	r9, r3, r1
 800967e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009682:	1c7b      	adds	r3, r7, #1
 8009684:	444b      	add	r3, r9
 8009686:	106d      	asrs	r5, r5, #1
 8009688:	429d      	cmp	r5, r3
 800968a:	bf38      	it	cc
 800968c:	461d      	movcc	r5, r3
 800968e:	0553      	lsls	r3, r2, #21
 8009690:	d527      	bpl.n	80096e2 <__ssputs_r+0x8e>
 8009692:	4629      	mov	r1, r5
 8009694:	f7fe fc1c 	bl	8007ed0 <_malloc_r>
 8009698:	4606      	mov	r6, r0
 800969a:	b360      	cbz	r0, 80096f6 <__ssputs_r+0xa2>
 800969c:	6921      	ldr	r1, [r4, #16]
 800969e:	464a      	mov	r2, r9
 80096a0:	f000 fbee 	bl	8009e80 <memcpy>
 80096a4:	89a3      	ldrh	r3, [r4, #12]
 80096a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80096aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096ae:	81a3      	strh	r3, [r4, #12]
 80096b0:	6126      	str	r6, [r4, #16]
 80096b2:	6165      	str	r5, [r4, #20]
 80096b4:	444e      	add	r6, r9
 80096b6:	eba5 0509 	sub.w	r5, r5, r9
 80096ba:	6026      	str	r6, [r4, #0]
 80096bc:	60a5      	str	r5, [r4, #8]
 80096be:	463e      	mov	r6, r7
 80096c0:	42be      	cmp	r6, r7
 80096c2:	d900      	bls.n	80096c6 <__ssputs_r+0x72>
 80096c4:	463e      	mov	r6, r7
 80096c6:	6820      	ldr	r0, [r4, #0]
 80096c8:	4632      	mov	r2, r6
 80096ca:	4641      	mov	r1, r8
 80096cc:	f000 fb9c 	bl	8009e08 <memmove>
 80096d0:	68a3      	ldr	r3, [r4, #8]
 80096d2:	1b9b      	subs	r3, r3, r6
 80096d4:	60a3      	str	r3, [r4, #8]
 80096d6:	6823      	ldr	r3, [r4, #0]
 80096d8:	4433      	add	r3, r6
 80096da:	6023      	str	r3, [r4, #0]
 80096dc:	2000      	movs	r0, #0
 80096de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096e2:	462a      	mov	r2, r5
 80096e4:	f000 ff61 	bl	800a5aa <_realloc_r>
 80096e8:	4606      	mov	r6, r0
 80096ea:	2800      	cmp	r0, #0
 80096ec:	d1e0      	bne.n	80096b0 <__ssputs_r+0x5c>
 80096ee:	6921      	ldr	r1, [r4, #16]
 80096f0:	4650      	mov	r0, sl
 80096f2:	f7fe fb79 	bl	8007de8 <_free_r>
 80096f6:	230c      	movs	r3, #12
 80096f8:	f8ca 3000 	str.w	r3, [sl]
 80096fc:	89a3      	ldrh	r3, [r4, #12]
 80096fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009702:	81a3      	strh	r3, [r4, #12]
 8009704:	f04f 30ff 	mov.w	r0, #4294967295
 8009708:	e7e9      	b.n	80096de <__ssputs_r+0x8a>
	...

0800970c <_svfiprintf_r>:
 800970c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009710:	4698      	mov	r8, r3
 8009712:	898b      	ldrh	r3, [r1, #12]
 8009714:	061b      	lsls	r3, r3, #24
 8009716:	b09d      	sub	sp, #116	@ 0x74
 8009718:	4607      	mov	r7, r0
 800971a:	460d      	mov	r5, r1
 800971c:	4614      	mov	r4, r2
 800971e:	d510      	bpl.n	8009742 <_svfiprintf_r+0x36>
 8009720:	690b      	ldr	r3, [r1, #16]
 8009722:	b973      	cbnz	r3, 8009742 <_svfiprintf_r+0x36>
 8009724:	2140      	movs	r1, #64	@ 0x40
 8009726:	f7fe fbd3 	bl	8007ed0 <_malloc_r>
 800972a:	6028      	str	r0, [r5, #0]
 800972c:	6128      	str	r0, [r5, #16]
 800972e:	b930      	cbnz	r0, 800973e <_svfiprintf_r+0x32>
 8009730:	230c      	movs	r3, #12
 8009732:	603b      	str	r3, [r7, #0]
 8009734:	f04f 30ff 	mov.w	r0, #4294967295
 8009738:	b01d      	add	sp, #116	@ 0x74
 800973a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800973e:	2340      	movs	r3, #64	@ 0x40
 8009740:	616b      	str	r3, [r5, #20]
 8009742:	2300      	movs	r3, #0
 8009744:	9309      	str	r3, [sp, #36]	@ 0x24
 8009746:	2320      	movs	r3, #32
 8009748:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800974c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009750:	2330      	movs	r3, #48	@ 0x30
 8009752:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80098f0 <_svfiprintf_r+0x1e4>
 8009756:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800975a:	f04f 0901 	mov.w	r9, #1
 800975e:	4623      	mov	r3, r4
 8009760:	469a      	mov	sl, r3
 8009762:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009766:	b10a      	cbz	r2, 800976c <_svfiprintf_r+0x60>
 8009768:	2a25      	cmp	r2, #37	@ 0x25
 800976a:	d1f9      	bne.n	8009760 <_svfiprintf_r+0x54>
 800976c:	ebba 0b04 	subs.w	fp, sl, r4
 8009770:	d00b      	beq.n	800978a <_svfiprintf_r+0x7e>
 8009772:	465b      	mov	r3, fp
 8009774:	4622      	mov	r2, r4
 8009776:	4629      	mov	r1, r5
 8009778:	4638      	mov	r0, r7
 800977a:	f7ff ff6b 	bl	8009654 <__ssputs_r>
 800977e:	3001      	adds	r0, #1
 8009780:	f000 80a7 	beq.w	80098d2 <_svfiprintf_r+0x1c6>
 8009784:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009786:	445a      	add	r2, fp
 8009788:	9209      	str	r2, [sp, #36]	@ 0x24
 800978a:	f89a 3000 	ldrb.w	r3, [sl]
 800978e:	2b00      	cmp	r3, #0
 8009790:	f000 809f 	beq.w	80098d2 <_svfiprintf_r+0x1c6>
 8009794:	2300      	movs	r3, #0
 8009796:	f04f 32ff 	mov.w	r2, #4294967295
 800979a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800979e:	f10a 0a01 	add.w	sl, sl, #1
 80097a2:	9304      	str	r3, [sp, #16]
 80097a4:	9307      	str	r3, [sp, #28]
 80097a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80097aa:	931a      	str	r3, [sp, #104]	@ 0x68
 80097ac:	4654      	mov	r4, sl
 80097ae:	2205      	movs	r2, #5
 80097b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097b4:	484e      	ldr	r0, [pc, #312]	@ (80098f0 <_svfiprintf_r+0x1e4>)
 80097b6:	f7f6 fd2b 	bl	8000210 <memchr>
 80097ba:	9a04      	ldr	r2, [sp, #16]
 80097bc:	b9d8      	cbnz	r0, 80097f6 <_svfiprintf_r+0xea>
 80097be:	06d0      	lsls	r0, r2, #27
 80097c0:	bf44      	itt	mi
 80097c2:	2320      	movmi	r3, #32
 80097c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80097c8:	0711      	lsls	r1, r2, #28
 80097ca:	bf44      	itt	mi
 80097cc:	232b      	movmi	r3, #43	@ 0x2b
 80097ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80097d2:	f89a 3000 	ldrb.w	r3, [sl]
 80097d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80097d8:	d015      	beq.n	8009806 <_svfiprintf_r+0xfa>
 80097da:	9a07      	ldr	r2, [sp, #28]
 80097dc:	4654      	mov	r4, sl
 80097de:	2000      	movs	r0, #0
 80097e0:	f04f 0c0a 	mov.w	ip, #10
 80097e4:	4621      	mov	r1, r4
 80097e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097ea:	3b30      	subs	r3, #48	@ 0x30
 80097ec:	2b09      	cmp	r3, #9
 80097ee:	d94b      	bls.n	8009888 <_svfiprintf_r+0x17c>
 80097f0:	b1b0      	cbz	r0, 8009820 <_svfiprintf_r+0x114>
 80097f2:	9207      	str	r2, [sp, #28]
 80097f4:	e014      	b.n	8009820 <_svfiprintf_r+0x114>
 80097f6:	eba0 0308 	sub.w	r3, r0, r8
 80097fa:	fa09 f303 	lsl.w	r3, r9, r3
 80097fe:	4313      	orrs	r3, r2
 8009800:	9304      	str	r3, [sp, #16]
 8009802:	46a2      	mov	sl, r4
 8009804:	e7d2      	b.n	80097ac <_svfiprintf_r+0xa0>
 8009806:	9b03      	ldr	r3, [sp, #12]
 8009808:	1d19      	adds	r1, r3, #4
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	9103      	str	r1, [sp, #12]
 800980e:	2b00      	cmp	r3, #0
 8009810:	bfbb      	ittet	lt
 8009812:	425b      	neglt	r3, r3
 8009814:	f042 0202 	orrlt.w	r2, r2, #2
 8009818:	9307      	strge	r3, [sp, #28]
 800981a:	9307      	strlt	r3, [sp, #28]
 800981c:	bfb8      	it	lt
 800981e:	9204      	strlt	r2, [sp, #16]
 8009820:	7823      	ldrb	r3, [r4, #0]
 8009822:	2b2e      	cmp	r3, #46	@ 0x2e
 8009824:	d10a      	bne.n	800983c <_svfiprintf_r+0x130>
 8009826:	7863      	ldrb	r3, [r4, #1]
 8009828:	2b2a      	cmp	r3, #42	@ 0x2a
 800982a:	d132      	bne.n	8009892 <_svfiprintf_r+0x186>
 800982c:	9b03      	ldr	r3, [sp, #12]
 800982e:	1d1a      	adds	r2, r3, #4
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	9203      	str	r2, [sp, #12]
 8009834:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009838:	3402      	adds	r4, #2
 800983a:	9305      	str	r3, [sp, #20]
 800983c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009900 <_svfiprintf_r+0x1f4>
 8009840:	7821      	ldrb	r1, [r4, #0]
 8009842:	2203      	movs	r2, #3
 8009844:	4650      	mov	r0, sl
 8009846:	f7f6 fce3 	bl	8000210 <memchr>
 800984a:	b138      	cbz	r0, 800985c <_svfiprintf_r+0x150>
 800984c:	9b04      	ldr	r3, [sp, #16]
 800984e:	eba0 000a 	sub.w	r0, r0, sl
 8009852:	2240      	movs	r2, #64	@ 0x40
 8009854:	4082      	lsls	r2, r0
 8009856:	4313      	orrs	r3, r2
 8009858:	3401      	adds	r4, #1
 800985a:	9304      	str	r3, [sp, #16]
 800985c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009860:	4824      	ldr	r0, [pc, #144]	@ (80098f4 <_svfiprintf_r+0x1e8>)
 8009862:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009866:	2206      	movs	r2, #6
 8009868:	f7f6 fcd2 	bl	8000210 <memchr>
 800986c:	2800      	cmp	r0, #0
 800986e:	d036      	beq.n	80098de <_svfiprintf_r+0x1d2>
 8009870:	4b21      	ldr	r3, [pc, #132]	@ (80098f8 <_svfiprintf_r+0x1ec>)
 8009872:	bb1b      	cbnz	r3, 80098bc <_svfiprintf_r+0x1b0>
 8009874:	9b03      	ldr	r3, [sp, #12]
 8009876:	3307      	adds	r3, #7
 8009878:	f023 0307 	bic.w	r3, r3, #7
 800987c:	3308      	adds	r3, #8
 800987e:	9303      	str	r3, [sp, #12]
 8009880:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009882:	4433      	add	r3, r6
 8009884:	9309      	str	r3, [sp, #36]	@ 0x24
 8009886:	e76a      	b.n	800975e <_svfiprintf_r+0x52>
 8009888:	fb0c 3202 	mla	r2, ip, r2, r3
 800988c:	460c      	mov	r4, r1
 800988e:	2001      	movs	r0, #1
 8009890:	e7a8      	b.n	80097e4 <_svfiprintf_r+0xd8>
 8009892:	2300      	movs	r3, #0
 8009894:	3401      	adds	r4, #1
 8009896:	9305      	str	r3, [sp, #20]
 8009898:	4619      	mov	r1, r3
 800989a:	f04f 0c0a 	mov.w	ip, #10
 800989e:	4620      	mov	r0, r4
 80098a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098a4:	3a30      	subs	r2, #48	@ 0x30
 80098a6:	2a09      	cmp	r2, #9
 80098a8:	d903      	bls.n	80098b2 <_svfiprintf_r+0x1a6>
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d0c6      	beq.n	800983c <_svfiprintf_r+0x130>
 80098ae:	9105      	str	r1, [sp, #20]
 80098b0:	e7c4      	b.n	800983c <_svfiprintf_r+0x130>
 80098b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80098b6:	4604      	mov	r4, r0
 80098b8:	2301      	movs	r3, #1
 80098ba:	e7f0      	b.n	800989e <_svfiprintf_r+0x192>
 80098bc:	ab03      	add	r3, sp, #12
 80098be:	9300      	str	r3, [sp, #0]
 80098c0:	462a      	mov	r2, r5
 80098c2:	4b0e      	ldr	r3, [pc, #56]	@ (80098fc <_svfiprintf_r+0x1f0>)
 80098c4:	a904      	add	r1, sp, #16
 80098c6:	4638      	mov	r0, r7
 80098c8:	f7fc fcb8 	bl	800623c <_printf_float>
 80098cc:	1c42      	adds	r2, r0, #1
 80098ce:	4606      	mov	r6, r0
 80098d0:	d1d6      	bne.n	8009880 <_svfiprintf_r+0x174>
 80098d2:	89ab      	ldrh	r3, [r5, #12]
 80098d4:	065b      	lsls	r3, r3, #25
 80098d6:	f53f af2d 	bmi.w	8009734 <_svfiprintf_r+0x28>
 80098da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80098dc:	e72c      	b.n	8009738 <_svfiprintf_r+0x2c>
 80098de:	ab03      	add	r3, sp, #12
 80098e0:	9300      	str	r3, [sp, #0]
 80098e2:	462a      	mov	r2, r5
 80098e4:	4b05      	ldr	r3, [pc, #20]	@ (80098fc <_svfiprintf_r+0x1f0>)
 80098e6:	a904      	add	r1, sp, #16
 80098e8:	4638      	mov	r0, r7
 80098ea:	f7fc ff3f 	bl	800676c <_printf_i>
 80098ee:	e7ed      	b.n	80098cc <_svfiprintf_r+0x1c0>
 80098f0:	0800b369 	.word	0x0800b369
 80098f4:	0800b373 	.word	0x0800b373
 80098f8:	0800623d 	.word	0x0800623d
 80098fc:	08009655 	.word	0x08009655
 8009900:	0800b36f 	.word	0x0800b36f

08009904 <__sfputc_r>:
 8009904:	6893      	ldr	r3, [r2, #8]
 8009906:	3b01      	subs	r3, #1
 8009908:	2b00      	cmp	r3, #0
 800990a:	b410      	push	{r4}
 800990c:	6093      	str	r3, [r2, #8]
 800990e:	da08      	bge.n	8009922 <__sfputc_r+0x1e>
 8009910:	6994      	ldr	r4, [r2, #24]
 8009912:	42a3      	cmp	r3, r4
 8009914:	db01      	blt.n	800991a <__sfputc_r+0x16>
 8009916:	290a      	cmp	r1, #10
 8009918:	d103      	bne.n	8009922 <__sfputc_r+0x1e>
 800991a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800991e:	f000 b9df 	b.w	8009ce0 <__swbuf_r>
 8009922:	6813      	ldr	r3, [r2, #0]
 8009924:	1c58      	adds	r0, r3, #1
 8009926:	6010      	str	r0, [r2, #0]
 8009928:	7019      	strb	r1, [r3, #0]
 800992a:	4608      	mov	r0, r1
 800992c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009930:	4770      	bx	lr

08009932 <__sfputs_r>:
 8009932:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009934:	4606      	mov	r6, r0
 8009936:	460f      	mov	r7, r1
 8009938:	4614      	mov	r4, r2
 800993a:	18d5      	adds	r5, r2, r3
 800993c:	42ac      	cmp	r4, r5
 800993e:	d101      	bne.n	8009944 <__sfputs_r+0x12>
 8009940:	2000      	movs	r0, #0
 8009942:	e007      	b.n	8009954 <__sfputs_r+0x22>
 8009944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009948:	463a      	mov	r2, r7
 800994a:	4630      	mov	r0, r6
 800994c:	f7ff ffda 	bl	8009904 <__sfputc_r>
 8009950:	1c43      	adds	r3, r0, #1
 8009952:	d1f3      	bne.n	800993c <__sfputs_r+0xa>
 8009954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009958 <_vfiprintf_r>:
 8009958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800995c:	460d      	mov	r5, r1
 800995e:	b09d      	sub	sp, #116	@ 0x74
 8009960:	4614      	mov	r4, r2
 8009962:	4698      	mov	r8, r3
 8009964:	4606      	mov	r6, r0
 8009966:	b118      	cbz	r0, 8009970 <_vfiprintf_r+0x18>
 8009968:	6a03      	ldr	r3, [r0, #32]
 800996a:	b90b      	cbnz	r3, 8009970 <_vfiprintf_r+0x18>
 800996c:	f7fd fabe 	bl	8006eec <__sinit>
 8009970:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009972:	07d9      	lsls	r1, r3, #31
 8009974:	d405      	bmi.n	8009982 <_vfiprintf_r+0x2a>
 8009976:	89ab      	ldrh	r3, [r5, #12]
 8009978:	059a      	lsls	r2, r3, #22
 800997a:	d402      	bmi.n	8009982 <_vfiprintf_r+0x2a>
 800997c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800997e:	f7fd fbde 	bl	800713e <__retarget_lock_acquire_recursive>
 8009982:	89ab      	ldrh	r3, [r5, #12]
 8009984:	071b      	lsls	r3, r3, #28
 8009986:	d501      	bpl.n	800998c <_vfiprintf_r+0x34>
 8009988:	692b      	ldr	r3, [r5, #16]
 800998a:	b99b      	cbnz	r3, 80099b4 <_vfiprintf_r+0x5c>
 800998c:	4629      	mov	r1, r5
 800998e:	4630      	mov	r0, r6
 8009990:	f000 f9e4 	bl	8009d5c <__swsetup_r>
 8009994:	b170      	cbz	r0, 80099b4 <_vfiprintf_r+0x5c>
 8009996:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009998:	07dc      	lsls	r4, r3, #31
 800999a:	d504      	bpl.n	80099a6 <_vfiprintf_r+0x4e>
 800999c:	f04f 30ff 	mov.w	r0, #4294967295
 80099a0:	b01d      	add	sp, #116	@ 0x74
 80099a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099a6:	89ab      	ldrh	r3, [r5, #12]
 80099a8:	0598      	lsls	r0, r3, #22
 80099aa:	d4f7      	bmi.n	800999c <_vfiprintf_r+0x44>
 80099ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80099ae:	f7fd fbc7 	bl	8007140 <__retarget_lock_release_recursive>
 80099b2:	e7f3      	b.n	800999c <_vfiprintf_r+0x44>
 80099b4:	2300      	movs	r3, #0
 80099b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80099b8:	2320      	movs	r3, #32
 80099ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80099be:	f8cd 800c 	str.w	r8, [sp, #12]
 80099c2:	2330      	movs	r3, #48	@ 0x30
 80099c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009b74 <_vfiprintf_r+0x21c>
 80099c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80099cc:	f04f 0901 	mov.w	r9, #1
 80099d0:	4623      	mov	r3, r4
 80099d2:	469a      	mov	sl, r3
 80099d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099d8:	b10a      	cbz	r2, 80099de <_vfiprintf_r+0x86>
 80099da:	2a25      	cmp	r2, #37	@ 0x25
 80099dc:	d1f9      	bne.n	80099d2 <_vfiprintf_r+0x7a>
 80099de:	ebba 0b04 	subs.w	fp, sl, r4
 80099e2:	d00b      	beq.n	80099fc <_vfiprintf_r+0xa4>
 80099e4:	465b      	mov	r3, fp
 80099e6:	4622      	mov	r2, r4
 80099e8:	4629      	mov	r1, r5
 80099ea:	4630      	mov	r0, r6
 80099ec:	f7ff ffa1 	bl	8009932 <__sfputs_r>
 80099f0:	3001      	adds	r0, #1
 80099f2:	f000 80a7 	beq.w	8009b44 <_vfiprintf_r+0x1ec>
 80099f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80099f8:	445a      	add	r2, fp
 80099fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80099fc:	f89a 3000 	ldrb.w	r3, [sl]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	f000 809f 	beq.w	8009b44 <_vfiprintf_r+0x1ec>
 8009a06:	2300      	movs	r3, #0
 8009a08:	f04f 32ff 	mov.w	r2, #4294967295
 8009a0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a10:	f10a 0a01 	add.w	sl, sl, #1
 8009a14:	9304      	str	r3, [sp, #16]
 8009a16:	9307      	str	r3, [sp, #28]
 8009a18:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009a1c:	931a      	str	r3, [sp, #104]	@ 0x68
 8009a1e:	4654      	mov	r4, sl
 8009a20:	2205      	movs	r2, #5
 8009a22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a26:	4853      	ldr	r0, [pc, #332]	@ (8009b74 <_vfiprintf_r+0x21c>)
 8009a28:	f7f6 fbf2 	bl	8000210 <memchr>
 8009a2c:	9a04      	ldr	r2, [sp, #16]
 8009a2e:	b9d8      	cbnz	r0, 8009a68 <_vfiprintf_r+0x110>
 8009a30:	06d1      	lsls	r1, r2, #27
 8009a32:	bf44      	itt	mi
 8009a34:	2320      	movmi	r3, #32
 8009a36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a3a:	0713      	lsls	r3, r2, #28
 8009a3c:	bf44      	itt	mi
 8009a3e:	232b      	movmi	r3, #43	@ 0x2b
 8009a40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a44:	f89a 3000 	ldrb.w	r3, [sl]
 8009a48:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a4a:	d015      	beq.n	8009a78 <_vfiprintf_r+0x120>
 8009a4c:	9a07      	ldr	r2, [sp, #28]
 8009a4e:	4654      	mov	r4, sl
 8009a50:	2000      	movs	r0, #0
 8009a52:	f04f 0c0a 	mov.w	ip, #10
 8009a56:	4621      	mov	r1, r4
 8009a58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a5c:	3b30      	subs	r3, #48	@ 0x30
 8009a5e:	2b09      	cmp	r3, #9
 8009a60:	d94b      	bls.n	8009afa <_vfiprintf_r+0x1a2>
 8009a62:	b1b0      	cbz	r0, 8009a92 <_vfiprintf_r+0x13a>
 8009a64:	9207      	str	r2, [sp, #28]
 8009a66:	e014      	b.n	8009a92 <_vfiprintf_r+0x13a>
 8009a68:	eba0 0308 	sub.w	r3, r0, r8
 8009a6c:	fa09 f303 	lsl.w	r3, r9, r3
 8009a70:	4313      	orrs	r3, r2
 8009a72:	9304      	str	r3, [sp, #16]
 8009a74:	46a2      	mov	sl, r4
 8009a76:	e7d2      	b.n	8009a1e <_vfiprintf_r+0xc6>
 8009a78:	9b03      	ldr	r3, [sp, #12]
 8009a7a:	1d19      	adds	r1, r3, #4
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	9103      	str	r1, [sp, #12]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	bfbb      	ittet	lt
 8009a84:	425b      	neglt	r3, r3
 8009a86:	f042 0202 	orrlt.w	r2, r2, #2
 8009a8a:	9307      	strge	r3, [sp, #28]
 8009a8c:	9307      	strlt	r3, [sp, #28]
 8009a8e:	bfb8      	it	lt
 8009a90:	9204      	strlt	r2, [sp, #16]
 8009a92:	7823      	ldrb	r3, [r4, #0]
 8009a94:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a96:	d10a      	bne.n	8009aae <_vfiprintf_r+0x156>
 8009a98:	7863      	ldrb	r3, [r4, #1]
 8009a9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a9c:	d132      	bne.n	8009b04 <_vfiprintf_r+0x1ac>
 8009a9e:	9b03      	ldr	r3, [sp, #12]
 8009aa0:	1d1a      	adds	r2, r3, #4
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	9203      	str	r2, [sp, #12]
 8009aa6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009aaa:	3402      	adds	r4, #2
 8009aac:	9305      	str	r3, [sp, #20]
 8009aae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009b84 <_vfiprintf_r+0x22c>
 8009ab2:	7821      	ldrb	r1, [r4, #0]
 8009ab4:	2203      	movs	r2, #3
 8009ab6:	4650      	mov	r0, sl
 8009ab8:	f7f6 fbaa 	bl	8000210 <memchr>
 8009abc:	b138      	cbz	r0, 8009ace <_vfiprintf_r+0x176>
 8009abe:	9b04      	ldr	r3, [sp, #16]
 8009ac0:	eba0 000a 	sub.w	r0, r0, sl
 8009ac4:	2240      	movs	r2, #64	@ 0x40
 8009ac6:	4082      	lsls	r2, r0
 8009ac8:	4313      	orrs	r3, r2
 8009aca:	3401      	adds	r4, #1
 8009acc:	9304      	str	r3, [sp, #16]
 8009ace:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ad2:	4829      	ldr	r0, [pc, #164]	@ (8009b78 <_vfiprintf_r+0x220>)
 8009ad4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009ad8:	2206      	movs	r2, #6
 8009ada:	f7f6 fb99 	bl	8000210 <memchr>
 8009ade:	2800      	cmp	r0, #0
 8009ae0:	d03f      	beq.n	8009b62 <_vfiprintf_r+0x20a>
 8009ae2:	4b26      	ldr	r3, [pc, #152]	@ (8009b7c <_vfiprintf_r+0x224>)
 8009ae4:	bb1b      	cbnz	r3, 8009b2e <_vfiprintf_r+0x1d6>
 8009ae6:	9b03      	ldr	r3, [sp, #12]
 8009ae8:	3307      	adds	r3, #7
 8009aea:	f023 0307 	bic.w	r3, r3, #7
 8009aee:	3308      	adds	r3, #8
 8009af0:	9303      	str	r3, [sp, #12]
 8009af2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009af4:	443b      	add	r3, r7
 8009af6:	9309      	str	r3, [sp, #36]	@ 0x24
 8009af8:	e76a      	b.n	80099d0 <_vfiprintf_r+0x78>
 8009afa:	fb0c 3202 	mla	r2, ip, r2, r3
 8009afe:	460c      	mov	r4, r1
 8009b00:	2001      	movs	r0, #1
 8009b02:	e7a8      	b.n	8009a56 <_vfiprintf_r+0xfe>
 8009b04:	2300      	movs	r3, #0
 8009b06:	3401      	adds	r4, #1
 8009b08:	9305      	str	r3, [sp, #20]
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	f04f 0c0a 	mov.w	ip, #10
 8009b10:	4620      	mov	r0, r4
 8009b12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b16:	3a30      	subs	r2, #48	@ 0x30
 8009b18:	2a09      	cmp	r2, #9
 8009b1a:	d903      	bls.n	8009b24 <_vfiprintf_r+0x1cc>
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d0c6      	beq.n	8009aae <_vfiprintf_r+0x156>
 8009b20:	9105      	str	r1, [sp, #20]
 8009b22:	e7c4      	b.n	8009aae <_vfiprintf_r+0x156>
 8009b24:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b28:	4604      	mov	r4, r0
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	e7f0      	b.n	8009b10 <_vfiprintf_r+0x1b8>
 8009b2e:	ab03      	add	r3, sp, #12
 8009b30:	9300      	str	r3, [sp, #0]
 8009b32:	462a      	mov	r2, r5
 8009b34:	4b12      	ldr	r3, [pc, #72]	@ (8009b80 <_vfiprintf_r+0x228>)
 8009b36:	a904      	add	r1, sp, #16
 8009b38:	4630      	mov	r0, r6
 8009b3a:	f7fc fb7f 	bl	800623c <_printf_float>
 8009b3e:	4607      	mov	r7, r0
 8009b40:	1c78      	adds	r0, r7, #1
 8009b42:	d1d6      	bne.n	8009af2 <_vfiprintf_r+0x19a>
 8009b44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b46:	07d9      	lsls	r1, r3, #31
 8009b48:	d405      	bmi.n	8009b56 <_vfiprintf_r+0x1fe>
 8009b4a:	89ab      	ldrh	r3, [r5, #12]
 8009b4c:	059a      	lsls	r2, r3, #22
 8009b4e:	d402      	bmi.n	8009b56 <_vfiprintf_r+0x1fe>
 8009b50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b52:	f7fd faf5 	bl	8007140 <__retarget_lock_release_recursive>
 8009b56:	89ab      	ldrh	r3, [r5, #12]
 8009b58:	065b      	lsls	r3, r3, #25
 8009b5a:	f53f af1f 	bmi.w	800999c <_vfiprintf_r+0x44>
 8009b5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b60:	e71e      	b.n	80099a0 <_vfiprintf_r+0x48>
 8009b62:	ab03      	add	r3, sp, #12
 8009b64:	9300      	str	r3, [sp, #0]
 8009b66:	462a      	mov	r2, r5
 8009b68:	4b05      	ldr	r3, [pc, #20]	@ (8009b80 <_vfiprintf_r+0x228>)
 8009b6a:	a904      	add	r1, sp, #16
 8009b6c:	4630      	mov	r0, r6
 8009b6e:	f7fc fdfd 	bl	800676c <_printf_i>
 8009b72:	e7e4      	b.n	8009b3e <_vfiprintf_r+0x1e6>
 8009b74:	0800b369 	.word	0x0800b369
 8009b78:	0800b373 	.word	0x0800b373
 8009b7c:	0800623d 	.word	0x0800623d
 8009b80:	08009933 	.word	0x08009933
 8009b84:	0800b36f 	.word	0x0800b36f

08009b88 <__sflush_r>:
 8009b88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b90:	0716      	lsls	r6, r2, #28
 8009b92:	4605      	mov	r5, r0
 8009b94:	460c      	mov	r4, r1
 8009b96:	d454      	bmi.n	8009c42 <__sflush_r+0xba>
 8009b98:	684b      	ldr	r3, [r1, #4]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	dc02      	bgt.n	8009ba4 <__sflush_r+0x1c>
 8009b9e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	dd48      	ble.n	8009c36 <__sflush_r+0xae>
 8009ba4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009ba6:	2e00      	cmp	r6, #0
 8009ba8:	d045      	beq.n	8009c36 <__sflush_r+0xae>
 8009baa:	2300      	movs	r3, #0
 8009bac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009bb0:	682f      	ldr	r7, [r5, #0]
 8009bb2:	6a21      	ldr	r1, [r4, #32]
 8009bb4:	602b      	str	r3, [r5, #0]
 8009bb6:	d030      	beq.n	8009c1a <__sflush_r+0x92>
 8009bb8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009bba:	89a3      	ldrh	r3, [r4, #12]
 8009bbc:	0759      	lsls	r1, r3, #29
 8009bbe:	d505      	bpl.n	8009bcc <__sflush_r+0x44>
 8009bc0:	6863      	ldr	r3, [r4, #4]
 8009bc2:	1ad2      	subs	r2, r2, r3
 8009bc4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009bc6:	b10b      	cbz	r3, 8009bcc <__sflush_r+0x44>
 8009bc8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009bca:	1ad2      	subs	r2, r2, r3
 8009bcc:	2300      	movs	r3, #0
 8009bce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009bd0:	6a21      	ldr	r1, [r4, #32]
 8009bd2:	4628      	mov	r0, r5
 8009bd4:	47b0      	blx	r6
 8009bd6:	1c43      	adds	r3, r0, #1
 8009bd8:	89a3      	ldrh	r3, [r4, #12]
 8009bda:	d106      	bne.n	8009bea <__sflush_r+0x62>
 8009bdc:	6829      	ldr	r1, [r5, #0]
 8009bde:	291d      	cmp	r1, #29
 8009be0:	d82b      	bhi.n	8009c3a <__sflush_r+0xb2>
 8009be2:	4a2a      	ldr	r2, [pc, #168]	@ (8009c8c <__sflush_r+0x104>)
 8009be4:	410a      	asrs	r2, r1
 8009be6:	07d6      	lsls	r6, r2, #31
 8009be8:	d427      	bmi.n	8009c3a <__sflush_r+0xb2>
 8009bea:	2200      	movs	r2, #0
 8009bec:	6062      	str	r2, [r4, #4]
 8009bee:	04d9      	lsls	r1, r3, #19
 8009bf0:	6922      	ldr	r2, [r4, #16]
 8009bf2:	6022      	str	r2, [r4, #0]
 8009bf4:	d504      	bpl.n	8009c00 <__sflush_r+0x78>
 8009bf6:	1c42      	adds	r2, r0, #1
 8009bf8:	d101      	bne.n	8009bfe <__sflush_r+0x76>
 8009bfa:	682b      	ldr	r3, [r5, #0]
 8009bfc:	b903      	cbnz	r3, 8009c00 <__sflush_r+0x78>
 8009bfe:	6560      	str	r0, [r4, #84]	@ 0x54
 8009c00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c02:	602f      	str	r7, [r5, #0]
 8009c04:	b1b9      	cbz	r1, 8009c36 <__sflush_r+0xae>
 8009c06:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009c0a:	4299      	cmp	r1, r3
 8009c0c:	d002      	beq.n	8009c14 <__sflush_r+0x8c>
 8009c0e:	4628      	mov	r0, r5
 8009c10:	f7fe f8ea 	bl	8007de8 <_free_r>
 8009c14:	2300      	movs	r3, #0
 8009c16:	6363      	str	r3, [r4, #52]	@ 0x34
 8009c18:	e00d      	b.n	8009c36 <__sflush_r+0xae>
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	4628      	mov	r0, r5
 8009c1e:	47b0      	blx	r6
 8009c20:	4602      	mov	r2, r0
 8009c22:	1c50      	adds	r0, r2, #1
 8009c24:	d1c9      	bne.n	8009bba <__sflush_r+0x32>
 8009c26:	682b      	ldr	r3, [r5, #0]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d0c6      	beq.n	8009bba <__sflush_r+0x32>
 8009c2c:	2b1d      	cmp	r3, #29
 8009c2e:	d001      	beq.n	8009c34 <__sflush_r+0xac>
 8009c30:	2b16      	cmp	r3, #22
 8009c32:	d11e      	bne.n	8009c72 <__sflush_r+0xea>
 8009c34:	602f      	str	r7, [r5, #0]
 8009c36:	2000      	movs	r0, #0
 8009c38:	e022      	b.n	8009c80 <__sflush_r+0xf8>
 8009c3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c3e:	b21b      	sxth	r3, r3
 8009c40:	e01b      	b.n	8009c7a <__sflush_r+0xf2>
 8009c42:	690f      	ldr	r7, [r1, #16]
 8009c44:	2f00      	cmp	r7, #0
 8009c46:	d0f6      	beq.n	8009c36 <__sflush_r+0xae>
 8009c48:	0793      	lsls	r3, r2, #30
 8009c4a:	680e      	ldr	r6, [r1, #0]
 8009c4c:	bf08      	it	eq
 8009c4e:	694b      	ldreq	r3, [r1, #20]
 8009c50:	600f      	str	r7, [r1, #0]
 8009c52:	bf18      	it	ne
 8009c54:	2300      	movne	r3, #0
 8009c56:	eba6 0807 	sub.w	r8, r6, r7
 8009c5a:	608b      	str	r3, [r1, #8]
 8009c5c:	f1b8 0f00 	cmp.w	r8, #0
 8009c60:	dde9      	ble.n	8009c36 <__sflush_r+0xae>
 8009c62:	6a21      	ldr	r1, [r4, #32]
 8009c64:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009c66:	4643      	mov	r3, r8
 8009c68:	463a      	mov	r2, r7
 8009c6a:	4628      	mov	r0, r5
 8009c6c:	47b0      	blx	r6
 8009c6e:	2800      	cmp	r0, #0
 8009c70:	dc08      	bgt.n	8009c84 <__sflush_r+0xfc>
 8009c72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c7a:	81a3      	strh	r3, [r4, #12]
 8009c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c84:	4407      	add	r7, r0
 8009c86:	eba8 0800 	sub.w	r8, r8, r0
 8009c8a:	e7e7      	b.n	8009c5c <__sflush_r+0xd4>
 8009c8c:	dfbffffe 	.word	0xdfbffffe

08009c90 <_fflush_r>:
 8009c90:	b538      	push	{r3, r4, r5, lr}
 8009c92:	690b      	ldr	r3, [r1, #16]
 8009c94:	4605      	mov	r5, r0
 8009c96:	460c      	mov	r4, r1
 8009c98:	b913      	cbnz	r3, 8009ca0 <_fflush_r+0x10>
 8009c9a:	2500      	movs	r5, #0
 8009c9c:	4628      	mov	r0, r5
 8009c9e:	bd38      	pop	{r3, r4, r5, pc}
 8009ca0:	b118      	cbz	r0, 8009caa <_fflush_r+0x1a>
 8009ca2:	6a03      	ldr	r3, [r0, #32]
 8009ca4:	b90b      	cbnz	r3, 8009caa <_fflush_r+0x1a>
 8009ca6:	f7fd f921 	bl	8006eec <__sinit>
 8009caa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d0f3      	beq.n	8009c9a <_fflush_r+0xa>
 8009cb2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009cb4:	07d0      	lsls	r0, r2, #31
 8009cb6:	d404      	bmi.n	8009cc2 <_fflush_r+0x32>
 8009cb8:	0599      	lsls	r1, r3, #22
 8009cba:	d402      	bmi.n	8009cc2 <_fflush_r+0x32>
 8009cbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009cbe:	f7fd fa3e 	bl	800713e <__retarget_lock_acquire_recursive>
 8009cc2:	4628      	mov	r0, r5
 8009cc4:	4621      	mov	r1, r4
 8009cc6:	f7ff ff5f 	bl	8009b88 <__sflush_r>
 8009cca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009ccc:	07da      	lsls	r2, r3, #31
 8009cce:	4605      	mov	r5, r0
 8009cd0:	d4e4      	bmi.n	8009c9c <_fflush_r+0xc>
 8009cd2:	89a3      	ldrh	r3, [r4, #12]
 8009cd4:	059b      	lsls	r3, r3, #22
 8009cd6:	d4e1      	bmi.n	8009c9c <_fflush_r+0xc>
 8009cd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009cda:	f7fd fa31 	bl	8007140 <__retarget_lock_release_recursive>
 8009cde:	e7dd      	b.n	8009c9c <_fflush_r+0xc>

08009ce0 <__swbuf_r>:
 8009ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ce2:	460e      	mov	r6, r1
 8009ce4:	4614      	mov	r4, r2
 8009ce6:	4605      	mov	r5, r0
 8009ce8:	b118      	cbz	r0, 8009cf2 <__swbuf_r+0x12>
 8009cea:	6a03      	ldr	r3, [r0, #32]
 8009cec:	b90b      	cbnz	r3, 8009cf2 <__swbuf_r+0x12>
 8009cee:	f7fd f8fd 	bl	8006eec <__sinit>
 8009cf2:	69a3      	ldr	r3, [r4, #24]
 8009cf4:	60a3      	str	r3, [r4, #8]
 8009cf6:	89a3      	ldrh	r3, [r4, #12]
 8009cf8:	071a      	lsls	r2, r3, #28
 8009cfa:	d501      	bpl.n	8009d00 <__swbuf_r+0x20>
 8009cfc:	6923      	ldr	r3, [r4, #16]
 8009cfe:	b943      	cbnz	r3, 8009d12 <__swbuf_r+0x32>
 8009d00:	4621      	mov	r1, r4
 8009d02:	4628      	mov	r0, r5
 8009d04:	f000 f82a 	bl	8009d5c <__swsetup_r>
 8009d08:	b118      	cbz	r0, 8009d12 <__swbuf_r+0x32>
 8009d0a:	f04f 37ff 	mov.w	r7, #4294967295
 8009d0e:	4638      	mov	r0, r7
 8009d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d12:	6823      	ldr	r3, [r4, #0]
 8009d14:	6922      	ldr	r2, [r4, #16]
 8009d16:	1a98      	subs	r0, r3, r2
 8009d18:	6963      	ldr	r3, [r4, #20]
 8009d1a:	b2f6      	uxtb	r6, r6
 8009d1c:	4283      	cmp	r3, r0
 8009d1e:	4637      	mov	r7, r6
 8009d20:	dc05      	bgt.n	8009d2e <__swbuf_r+0x4e>
 8009d22:	4621      	mov	r1, r4
 8009d24:	4628      	mov	r0, r5
 8009d26:	f7ff ffb3 	bl	8009c90 <_fflush_r>
 8009d2a:	2800      	cmp	r0, #0
 8009d2c:	d1ed      	bne.n	8009d0a <__swbuf_r+0x2a>
 8009d2e:	68a3      	ldr	r3, [r4, #8]
 8009d30:	3b01      	subs	r3, #1
 8009d32:	60a3      	str	r3, [r4, #8]
 8009d34:	6823      	ldr	r3, [r4, #0]
 8009d36:	1c5a      	adds	r2, r3, #1
 8009d38:	6022      	str	r2, [r4, #0]
 8009d3a:	701e      	strb	r6, [r3, #0]
 8009d3c:	6962      	ldr	r2, [r4, #20]
 8009d3e:	1c43      	adds	r3, r0, #1
 8009d40:	429a      	cmp	r2, r3
 8009d42:	d004      	beq.n	8009d4e <__swbuf_r+0x6e>
 8009d44:	89a3      	ldrh	r3, [r4, #12]
 8009d46:	07db      	lsls	r3, r3, #31
 8009d48:	d5e1      	bpl.n	8009d0e <__swbuf_r+0x2e>
 8009d4a:	2e0a      	cmp	r6, #10
 8009d4c:	d1df      	bne.n	8009d0e <__swbuf_r+0x2e>
 8009d4e:	4621      	mov	r1, r4
 8009d50:	4628      	mov	r0, r5
 8009d52:	f7ff ff9d 	bl	8009c90 <_fflush_r>
 8009d56:	2800      	cmp	r0, #0
 8009d58:	d0d9      	beq.n	8009d0e <__swbuf_r+0x2e>
 8009d5a:	e7d6      	b.n	8009d0a <__swbuf_r+0x2a>

08009d5c <__swsetup_r>:
 8009d5c:	b538      	push	{r3, r4, r5, lr}
 8009d5e:	4b29      	ldr	r3, [pc, #164]	@ (8009e04 <__swsetup_r+0xa8>)
 8009d60:	4605      	mov	r5, r0
 8009d62:	6818      	ldr	r0, [r3, #0]
 8009d64:	460c      	mov	r4, r1
 8009d66:	b118      	cbz	r0, 8009d70 <__swsetup_r+0x14>
 8009d68:	6a03      	ldr	r3, [r0, #32]
 8009d6a:	b90b      	cbnz	r3, 8009d70 <__swsetup_r+0x14>
 8009d6c:	f7fd f8be 	bl	8006eec <__sinit>
 8009d70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d74:	0719      	lsls	r1, r3, #28
 8009d76:	d422      	bmi.n	8009dbe <__swsetup_r+0x62>
 8009d78:	06da      	lsls	r2, r3, #27
 8009d7a:	d407      	bmi.n	8009d8c <__swsetup_r+0x30>
 8009d7c:	2209      	movs	r2, #9
 8009d7e:	602a      	str	r2, [r5, #0]
 8009d80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d84:	81a3      	strh	r3, [r4, #12]
 8009d86:	f04f 30ff 	mov.w	r0, #4294967295
 8009d8a:	e033      	b.n	8009df4 <__swsetup_r+0x98>
 8009d8c:	0758      	lsls	r0, r3, #29
 8009d8e:	d512      	bpl.n	8009db6 <__swsetup_r+0x5a>
 8009d90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009d92:	b141      	cbz	r1, 8009da6 <__swsetup_r+0x4a>
 8009d94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009d98:	4299      	cmp	r1, r3
 8009d9a:	d002      	beq.n	8009da2 <__swsetup_r+0x46>
 8009d9c:	4628      	mov	r0, r5
 8009d9e:	f7fe f823 	bl	8007de8 <_free_r>
 8009da2:	2300      	movs	r3, #0
 8009da4:	6363      	str	r3, [r4, #52]	@ 0x34
 8009da6:	89a3      	ldrh	r3, [r4, #12]
 8009da8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009dac:	81a3      	strh	r3, [r4, #12]
 8009dae:	2300      	movs	r3, #0
 8009db0:	6063      	str	r3, [r4, #4]
 8009db2:	6923      	ldr	r3, [r4, #16]
 8009db4:	6023      	str	r3, [r4, #0]
 8009db6:	89a3      	ldrh	r3, [r4, #12]
 8009db8:	f043 0308 	orr.w	r3, r3, #8
 8009dbc:	81a3      	strh	r3, [r4, #12]
 8009dbe:	6923      	ldr	r3, [r4, #16]
 8009dc0:	b94b      	cbnz	r3, 8009dd6 <__swsetup_r+0x7a>
 8009dc2:	89a3      	ldrh	r3, [r4, #12]
 8009dc4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009dc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009dcc:	d003      	beq.n	8009dd6 <__swsetup_r+0x7a>
 8009dce:	4621      	mov	r1, r4
 8009dd0:	4628      	mov	r0, r5
 8009dd2:	f000 fc5d 	bl	800a690 <__smakebuf_r>
 8009dd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dda:	f013 0201 	ands.w	r2, r3, #1
 8009dde:	d00a      	beq.n	8009df6 <__swsetup_r+0x9a>
 8009de0:	2200      	movs	r2, #0
 8009de2:	60a2      	str	r2, [r4, #8]
 8009de4:	6962      	ldr	r2, [r4, #20]
 8009de6:	4252      	negs	r2, r2
 8009de8:	61a2      	str	r2, [r4, #24]
 8009dea:	6922      	ldr	r2, [r4, #16]
 8009dec:	b942      	cbnz	r2, 8009e00 <__swsetup_r+0xa4>
 8009dee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009df2:	d1c5      	bne.n	8009d80 <__swsetup_r+0x24>
 8009df4:	bd38      	pop	{r3, r4, r5, pc}
 8009df6:	0799      	lsls	r1, r3, #30
 8009df8:	bf58      	it	pl
 8009dfa:	6962      	ldrpl	r2, [r4, #20]
 8009dfc:	60a2      	str	r2, [r4, #8]
 8009dfe:	e7f4      	b.n	8009dea <__swsetup_r+0x8e>
 8009e00:	2000      	movs	r0, #0
 8009e02:	e7f7      	b.n	8009df4 <__swsetup_r+0x98>
 8009e04:	20000018 	.word	0x20000018

08009e08 <memmove>:
 8009e08:	4288      	cmp	r0, r1
 8009e0a:	b510      	push	{r4, lr}
 8009e0c:	eb01 0402 	add.w	r4, r1, r2
 8009e10:	d902      	bls.n	8009e18 <memmove+0x10>
 8009e12:	4284      	cmp	r4, r0
 8009e14:	4623      	mov	r3, r4
 8009e16:	d807      	bhi.n	8009e28 <memmove+0x20>
 8009e18:	1e43      	subs	r3, r0, #1
 8009e1a:	42a1      	cmp	r1, r4
 8009e1c:	d008      	beq.n	8009e30 <memmove+0x28>
 8009e1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e26:	e7f8      	b.n	8009e1a <memmove+0x12>
 8009e28:	4402      	add	r2, r0
 8009e2a:	4601      	mov	r1, r0
 8009e2c:	428a      	cmp	r2, r1
 8009e2e:	d100      	bne.n	8009e32 <memmove+0x2a>
 8009e30:	bd10      	pop	{r4, pc}
 8009e32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009e3a:	e7f7      	b.n	8009e2c <memmove+0x24>

08009e3c <strncmp>:
 8009e3c:	b510      	push	{r4, lr}
 8009e3e:	b16a      	cbz	r2, 8009e5c <strncmp+0x20>
 8009e40:	3901      	subs	r1, #1
 8009e42:	1884      	adds	r4, r0, r2
 8009e44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e48:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009e4c:	429a      	cmp	r2, r3
 8009e4e:	d103      	bne.n	8009e58 <strncmp+0x1c>
 8009e50:	42a0      	cmp	r0, r4
 8009e52:	d001      	beq.n	8009e58 <strncmp+0x1c>
 8009e54:	2a00      	cmp	r2, #0
 8009e56:	d1f5      	bne.n	8009e44 <strncmp+0x8>
 8009e58:	1ad0      	subs	r0, r2, r3
 8009e5a:	bd10      	pop	{r4, pc}
 8009e5c:	4610      	mov	r0, r2
 8009e5e:	e7fc      	b.n	8009e5a <strncmp+0x1e>

08009e60 <_sbrk_r>:
 8009e60:	b538      	push	{r3, r4, r5, lr}
 8009e62:	4d06      	ldr	r5, [pc, #24]	@ (8009e7c <_sbrk_r+0x1c>)
 8009e64:	2300      	movs	r3, #0
 8009e66:	4604      	mov	r4, r0
 8009e68:	4608      	mov	r0, r1
 8009e6a:	602b      	str	r3, [r5, #0]
 8009e6c:	f7f8 fd3e 	bl	80028ec <_sbrk>
 8009e70:	1c43      	adds	r3, r0, #1
 8009e72:	d102      	bne.n	8009e7a <_sbrk_r+0x1a>
 8009e74:	682b      	ldr	r3, [r5, #0]
 8009e76:	b103      	cbz	r3, 8009e7a <_sbrk_r+0x1a>
 8009e78:	6023      	str	r3, [r4, #0]
 8009e7a:	bd38      	pop	{r3, r4, r5, pc}
 8009e7c:	20011b5c 	.word	0x20011b5c

08009e80 <memcpy>:
 8009e80:	440a      	add	r2, r1
 8009e82:	4291      	cmp	r1, r2
 8009e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e88:	d100      	bne.n	8009e8c <memcpy+0xc>
 8009e8a:	4770      	bx	lr
 8009e8c:	b510      	push	{r4, lr}
 8009e8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e96:	4291      	cmp	r1, r2
 8009e98:	d1f9      	bne.n	8009e8e <memcpy+0xe>
 8009e9a:	bd10      	pop	{r4, pc}
 8009e9c:	0000      	movs	r0, r0
	...

08009ea0 <nan>:
 8009ea0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009ea8 <nan+0x8>
 8009ea4:	4770      	bx	lr
 8009ea6:	bf00      	nop
 8009ea8:	00000000 	.word	0x00000000
 8009eac:	7ff80000 	.word	0x7ff80000

08009eb0 <__assert_func>:
 8009eb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009eb2:	4614      	mov	r4, r2
 8009eb4:	461a      	mov	r2, r3
 8009eb6:	4b09      	ldr	r3, [pc, #36]	@ (8009edc <__assert_func+0x2c>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	4605      	mov	r5, r0
 8009ebc:	68d8      	ldr	r0, [r3, #12]
 8009ebe:	b954      	cbnz	r4, 8009ed6 <__assert_func+0x26>
 8009ec0:	4b07      	ldr	r3, [pc, #28]	@ (8009ee0 <__assert_func+0x30>)
 8009ec2:	461c      	mov	r4, r3
 8009ec4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009ec8:	9100      	str	r1, [sp, #0]
 8009eca:	462b      	mov	r3, r5
 8009ecc:	4905      	ldr	r1, [pc, #20]	@ (8009ee4 <__assert_func+0x34>)
 8009ece:	f000 fba7 	bl	800a620 <fiprintf>
 8009ed2:	f000 fc3b 	bl	800a74c <abort>
 8009ed6:	4b04      	ldr	r3, [pc, #16]	@ (8009ee8 <__assert_func+0x38>)
 8009ed8:	e7f4      	b.n	8009ec4 <__assert_func+0x14>
 8009eda:	bf00      	nop
 8009edc:	20000018 	.word	0x20000018
 8009ee0:	0800b3bd 	.word	0x0800b3bd
 8009ee4:	0800b38f 	.word	0x0800b38f
 8009ee8:	0800b382 	.word	0x0800b382

08009eec <_calloc_r>:
 8009eec:	b570      	push	{r4, r5, r6, lr}
 8009eee:	fba1 5402 	umull	r5, r4, r1, r2
 8009ef2:	b93c      	cbnz	r4, 8009f04 <_calloc_r+0x18>
 8009ef4:	4629      	mov	r1, r5
 8009ef6:	f7fd ffeb 	bl	8007ed0 <_malloc_r>
 8009efa:	4606      	mov	r6, r0
 8009efc:	b928      	cbnz	r0, 8009f0a <_calloc_r+0x1e>
 8009efe:	2600      	movs	r6, #0
 8009f00:	4630      	mov	r0, r6
 8009f02:	bd70      	pop	{r4, r5, r6, pc}
 8009f04:	220c      	movs	r2, #12
 8009f06:	6002      	str	r2, [r0, #0]
 8009f08:	e7f9      	b.n	8009efe <_calloc_r+0x12>
 8009f0a:	462a      	mov	r2, r5
 8009f0c:	4621      	mov	r1, r4
 8009f0e:	f7fd f898 	bl	8007042 <memset>
 8009f12:	e7f5      	b.n	8009f00 <_calloc_r+0x14>

08009f14 <rshift>:
 8009f14:	6903      	ldr	r3, [r0, #16]
 8009f16:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009f1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f1e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009f22:	f100 0414 	add.w	r4, r0, #20
 8009f26:	dd45      	ble.n	8009fb4 <rshift+0xa0>
 8009f28:	f011 011f 	ands.w	r1, r1, #31
 8009f2c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009f30:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009f34:	d10c      	bne.n	8009f50 <rshift+0x3c>
 8009f36:	f100 0710 	add.w	r7, r0, #16
 8009f3a:	4629      	mov	r1, r5
 8009f3c:	42b1      	cmp	r1, r6
 8009f3e:	d334      	bcc.n	8009faa <rshift+0x96>
 8009f40:	1a9b      	subs	r3, r3, r2
 8009f42:	009b      	lsls	r3, r3, #2
 8009f44:	1eea      	subs	r2, r5, #3
 8009f46:	4296      	cmp	r6, r2
 8009f48:	bf38      	it	cc
 8009f4a:	2300      	movcc	r3, #0
 8009f4c:	4423      	add	r3, r4
 8009f4e:	e015      	b.n	8009f7c <rshift+0x68>
 8009f50:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009f54:	f1c1 0820 	rsb	r8, r1, #32
 8009f58:	40cf      	lsrs	r7, r1
 8009f5a:	f105 0e04 	add.w	lr, r5, #4
 8009f5e:	46a1      	mov	r9, r4
 8009f60:	4576      	cmp	r6, lr
 8009f62:	46f4      	mov	ip, lr
 8009f64:	d815      	bhi.n	8009f92 <rshift+0x7e>
 8009f66:	1a9a      	subs	r2, r3, r2
 8009f68:	0092      	lsls	r2, r2, #2
 8009f6a:	3a04      	subs	r2, #4
 8009f6c:	3501      	adds	r5, #1
 8009f6e:	42ae      	cmp	r6, r5
 8009f70:	bf38      	it	cc
 8009f72:	2200      	movcc	r2, #0
 8009f74:	18a3      	adds	r3, r4, r2
 8009f76:	50a7      	str	r7, [r4, r2]
 8009f78:	b107      	cbz	r7, 8009f7c <rshift+0x68>
 8009f7a:	3304      	adds	r3, #4
 8009f7c:	1b1a      	subs	r2, r3, r4
 8009f7e:	42a3      	cmp	r3, r4
 8009f80:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009f84:	bf08      	it	eq
 8009f86:	2300      	moveq	r3, #0
 8009f88:	6102      	str	r2, [r0, #16]
 8009f8a:	bf08      	it	eq
 8009f8c:	6143      	streq	r3, [r0, #20]
 8009f8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f92:	f8dc c000 	ldr.w	ip, [ip]
 8009f96:	fa0c fc08 	lsl.w	ip, ip, r8
 8009f9a:	ea4c 0707 	orr.w	r7, ip, r7
 8009f9e:	f849 7b04 	str.w	r7, [r9], #4
 8009fa2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009fa6:	40cf      	lsrs	r7, r1
 8009fa8:	e7da      	b.n	8009f60 <rshift+0x4c>
 8009faa:	f851 cb04 	ldr.w	ip, [r1], #4
 8009fae:	f847 cf04 	str.w	ip, [r7, #4]!
 8009fb2:	e7c3      	b.n	8009f3c <rshift+0x28>
 8009fb4:	4623      	mov	r3, r4
 8009fb6:	e7e1      	b.n	8009f7c <rshift+0x68>

08009fb8 <__hexdig_fun>:
 8009fb8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009fbc:	2b09      	cmp	r3, #9
 8009fbe:	d802      	bhi.n	8009fc6 <__hexdig_fun+0xe>
 8009fc0:	3820      	subs	r0, #32
 8009fc2:	b2c0      	uxtb	r0, r0
 8009fc4:	4770      	bx	lr
 8009fc6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009fca:	2b05      	cmp	r3, #5
 8009fcc:	d801      	bhi.n	8009fd2 <__hexdig_fun+0x1a>
 8009fce:	3847      	subs	r0, #71	@ 0x47
 8009fd0:	e7f7      	b.n	8009fc2 <__hexdig_fun+0xa>
 8009fd2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009fd6:	2b05      	cmp	r3, #5
 8009fd8:	d801      	bhi.n	8009fde <__hexdig_fun+0x26>
 8009fda:	3827      	subs	r0, #39	@ 0x27
 8009fdc:	e7f1      	b.n	8009fc2 <__hexdig_fun+0xa>
 8009fde:	2000      	movs	r0, #0
 8009fe0:	4770      	bx	lr
	...

08009fe4 <__gethex>:
 8009fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fe8:	b085      	sub	sp, #20
 8009fea:	468a      	mov	sl, r1
 8009fec:	9302      	str	r3, [sp, #8]
 8009fee:	680b      	ldr	r3, [r1, #0]
 8009ff0:	9001      	str	r0, [sp, #4]
 8009ff2:	4690      	mov	r8, r2
 8009ff4:	1c9c      	adds	r4, r3, #2
 8009ff6:	46a1      	mov	r9, r4
 8009ff8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009ffc:	2830      	cmp	r0, #48	@ 0x30
 8009ffe:	d0fa      	beq.n	8009ff6 <__gethex+0x12>
 800a000:	eba9 0303 	sub.w	r3, r9, r3
 800a004:	f1a3 0b02 	sub.w	fp, r3, #2
 800a008:	f7ff ffd6 	bl	8009fb8 <__hexdig_fun>
 800a00c:	4605      	mov	r5, r0
 800a00e:	2800      	cmp	r0, #0
 800a010:	d168      	bne.n	800a0e4 <__gethex+0x100>
 800a012:	49a0      	ldr	r1, [pc, #640]	@ (800a294 <__gethex+0x2b0>)
 800a014:	2201      	movs	r2, #1
 800a016:	4648      	mov	r0, r9
 800a018:	f7ff ff10 	bl	8009e3c <strncmp>
 800a01c:	4607      	mov	r7, r0
 800a01e:	2800      	cmp	r0, #0
 800a020:	d167      	bne.n	800a0f2 <__gethex+0x10e>
 800a022:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a026:	4626      	mov	r6, r4
 800a028:	f7ff ffc6 	bl	8009fb8 <__hexdig_fun>
 800a02c:	2800      	cmp	r0, #0
 800a02e:	d062      	beq.n	800a0f6 <__gethex+0x112>
 800a030:	4623      	mov	r3, r4
 800a032:	7818      	ldrb	r0, [r3, #0]
 800a034:	2830      	cmp	r0, #48	@ 0x30
 800a036:	4699      	mov	r9, r3
 800a038:	f103 0301 	add.w	r3, r3, #1
 800a03c:	d0f9      	beq.n	800a032 <__gethex+0x4e>
 800a03e:	f7ff ffbb 	bl	8009fb8 <__hexdig_fun>
 800a042:	fab0 f580 	clz	r5, r0
 800a046:	096d      	lsrs	r5, r5, #5
 800a048:	f04f 0b01 	mov.w	fp, #1
 800a04c:	464a      	mov	r2, r9
 800a04e:	4616      	mov	r6, r2
 800a050:	3201      	adds	r2, #1
 800a052:	7830      	ldrb	r0, [r6, #0]
 800a054:	f7ff ffb0 	bl	8009fb8 <__hexdig_fun>
 800a058:	2800      	cmp	r0, #0
 800a05a:	d1f8      	bne.n	800a04e <__gethex+0x6a>
 800a05c:	498d      	ldr	r1, [pc, #564]	@ (800a294 <__gethex+0x2b0>)
 800a05e:	2201      	movs	r2, #1
 800a060:	4630      	mov	r0, r6
 800a062:	f7ff feeb 	bl	8009e3c <strncmp>
 800a066:	2800      	cmp	r0, #0
 800a068:	d13f      	bne.n	800a0ea <__gethex+0x106>
 800a06a:	b944      	cbnz	r4, 800a07e <__gethex+0x9a>
 800a06c:	1c74      	adds	r4, r6, #1
 800a06e:	4622      	mov	r2, r4
 800a070:	4616      	mov	r6, r2
 800a072:	3201      	adds	r2, #1
 800a074:	7830      	ldrb	r0, [r6, #0]
 800a076:	f7ff ff9f 	bl	8009fb8 <__hexdig_fun>
 800a07a:	2800      	cmp	r0, #0
 800a07c:	d1f8      	bne.n	800a070 <__gethex+0x8c>
 800a07e:	1ba4      	subs	r4, r4, r6
 800a080:	00a7      	lsls	r7, r4, #2
 800a082:	7833      	ldrb	r3, [r6, #0]
 800a084:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a088:	2b50      	cmp	r3, #80	@ 0x50
 800a08a:	d13e      	bne.n	800a10a <__gethex+0x126>
 800a08c:	7873      	ldrb	r3, [r6, #1]
 800a08e:	2b2b      	cmp	r3, #43	@ 0x2b
 800a090:	d033      	beq.n	800a0fa <__gethex+0x116>
 800a092:	2b2d      	cmp	r3, #45	@ 0x2d
 800a094:	d034      	beq.n	800a100 <__gethex+0x11c>
 800a096:	1c71      	adds	r1, r6, #1
 800a098:	2400      	movs	r4, #0
 800a09a:	7808      	ldrb	r0, [r1, #0]
 800a09c:	f7ff ff8c 	bl	8009fb8 <__hexdig_fun>
 800a0a0:	1e43      	subs	r3, r0, #1
 800a0a2:	b2db      	uxtb	r3, r3
 800a0a4:	2b18      	cmp	r3, #24
 800a0a6:	d830      	bhi.n	800a10a <__gethex+0x126>
 800a0a8:	f1a0 0210 	sub.w	r2, r0, #16
 800a0ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a0b0:	f7ff ff82 	bl	8009fb8 <__hexdig_fun>
 800a0b4:	f100 3cff 	add.w	ip, r0, #4294967295
 800a0b8:	fa5f fc8c 	uxtb.w	ip, ip
 800a0bc:	f1bc 0f18 	cmp.w	ip, #24
 800a0c0:	f04f 030a 	mov.w	r3, #10
 800a0c4:	d91e      	bls.n	800a104 <__gethex+0x120>
 800a0c6:	b104      	cbz	r4, 800a0ca <__gethex+0xe6>
 800a0c8:	4252      	negs	r2, r2
 800a0ca:	4417      	add	r7, r2
 800a0cc:	f8ca 1000 	str.w	r1, [sl]
 800a0d0:	b1ed      	cbz	r5, 800a10e <__gethex+0x12a>
 800a0d2:	f1bb 0f00 	cmp.w	fp, #0
 800a0d6:	bf0c      	ite	eq
 800a0d8:	2506      	moveq	r5, #6
 800a0da:	2500      	movne	r5, #0
 800a0dc:	4628      	mov	r0, r5
 800a0de:	b005      	add	sp, #20
 800a0e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0e4:	2500      	movs	r5, #0
 800a0e6:	462c      	mov	r4, r5
 800a0e8:	e7b0      	b.n	800a04c <__gethex+0x68>
 800a0ea:	2c00      	cmp	r4, #0
 800a0ec:	d1c7      	bne.n	800a07e <__gethex+0x9a>
 800a0ee:	4627      	mov	r7, r4
 800a0f0:	e7c7      	b.n	800a082 <__gethex+0x9e>
 800a0f2:	464e      	mov	r6, r9
 800a0f4:	462f      	mov	r7, r5
 800a0f6:	2501      	movs	r5, #1
 800a0f8:	e7c3      	b.n	800a082 <__gethex+0x9e>
 800a0fa:	2400      	movs	r4, #0
 800a0fc:	1cb1      	adds	r1, r6, #2
 800a0fe:	e7cc      	b.n	800a09a <__gethex+0xb6>
 800a100:	2401      	movs	r4, #1
 800a102:	e7fb      	b.n	800a0fc <__gethex+0x118>
 800a104:	fb03 0002 	mla	r0, r3, r2, r0
 800a108:	e7ce      	b.n	800a0a8 <__gethex+0xc4>
 800a10a:	4631      	mov	r1, r6
 800a10c:	e7de      	b.n	800a0cc <__gethex+0xe8>
 800a10e:	eba6 0309 	sub.w	r3, r6, r9
 800a112:	3b01      	subs	r3, #1
 800a114:	4629      	mov	r1, r5
 800a116:	2b07      	cmp	r3, #7
 800a118:	dc0a      	bgt.n	800a130 <__gethex+0x14c>
 800a11a:	9801      	ldr	r0, [sp, #4]
 800a11c:	f7fd ff64 	bl	8007fe8 <_Balloc>
 800a120:	4604      	mov	r4, r0
 800a122:	b940      	cbnz	r0, 800a136 <__gethex+0x152>
 800a124:	4b5c      	ldr	r3, [pc, #368]	@ (800a298 <__gethex+0x2b4>)
 800a126:	4602      	mov	r2, r0
 800a128:	21e4      	movs	r1, #228	@ 0xe4
 800a12a:	485c      	ldr	r0, [pc, #368]	@ (800a29c <__gethex+0x2b8>)
 800a12c:	f7ff fec0 	bl	8009eb0 <__assert_func>
 800a130:	3101      	adds	r1, #1
 800a132:	105b      	asrs	r3, r3, #1
 800a134:	e7ef      	b.n	800a116 <__gethex+0x132>
 800a136:	f100 0a14 	add.w	sl, r0, #20
 800a13a:	2300      	movs	r3, #0
 800a13c:	4655      	mov	r5, sl
 800a13e:	469b      	mov	fp, r3
 800a140:	45b1      	cmp	r9, r6
 800a142:	d337      	bcc.n	800a1b4 <__gethex+0x1d0>
 800a144:	f845 bb04 	str.w	fp, [r5], #4
 800a148:	eba5 050a 	sub.w	r5, r5, sl
 800a14c:	10ad      	asrs	r5, r5, #2
 800a14e:	6125      	str	r5, [r4, #16]
 800a150:	4658      	mov	r0, fp
 800a152:	f7fe f83b 	bl	80081cc <__hi0bits>
 800a156:	016d      	lsls	r5, r5, #5
 800a158:	f8d8 6000 	ldr.w	r6, [r8]
 800a15c:	1a2d      	subs	r5, r5, r0
 800a15e:	42b5      	cmp	r5, r6
 800a160:	dd54      	ble.n	800a20c <__gethex+0x228>
 800a162:	1bad      	subs	r5, r5, r6
 800a164:	4629      	mov	r1, r5
 800a166:	4620      	mov	r0, r4
 800a168:	f7fe fbcf 	bl	800890a <__any_on>
 800a16c:	4681      	mov	r9, r0
 800a16e:	b178      	cbz	r0, 800a190 <__gethex+0x1ac>
 800a170:	1e6b      	subs	r3, r5, #1
 800a172:	1159      	asrs	r1, r3, #5
 800a174:	f003 021f 	and.w	r2, r3, #31
 800a178:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a17c:	f04f 0901 	mov.w	r9, #1
 800a180:	fa09 f202 	lsl.w	r2, r9, r2
 800a184:	420a      	tst	r2, r1
 800a186:	d003      	beq.n	800a190 <__gethex+0x1ac>
 800a188:	454b      	cmp	r3, r9
 800a18a:	dc36      	bgt.n	800a1fa <__gethex+0x216>
 800a18c:	f04f 0902 	mov.w	r9, #2
 800a190:	4629      	mov	r1, r5
 800a192:	4620      	mov	r0, r4
 800a194:	f7ff febe 	bl	8009f14 <rshift>
 800a198:	442f      	add	r7, r5
 800a19a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a19e:	42bb      	cmp	r3, r7
 800a1a0:	da42      	bge.n	800a228 <__gethex+0x244>
 800a1a2:	9801      	ldr	r0, [sp, #4]
 800a1a4:	4621      	mov	r1, r4
 800a1a6:	f7fd ff5f 	bl	8008068 <_Bfree>
 800a1aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	6013      	str	r3, [r2, #0]
 800a1b0:	25a3      	movs	r5, #163	@ 0xa3
 800a1b2:	e793      	b.n	800a0dc <__gethex+0xf8>
 800a1b4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a1b8:	2a2e      	cmp	r2, #46	@ 0x2e
 800a1ba:	d012      	beq.n	800a1e2 <__gethex+0x1fe>
 800a1bc:	2b20      	cmp	r3, #32
 800a1be:	d104      	bne.n	800a1ca <__gethex+0x1e6>
 800a1c0:	f845 bb04 	str.w	fp, [r5], #4
 800a1c4:	f04f 0b00 	mov.w	fp, #0
 800a1c8:	465b      	mov	r3, fp
 800a1ca:	7830      	ldrb	r0, [r6, #0]
 800a1cc:	9303      	str	r3, [sp, #12]
 800a1ce:	f7ff fef3 	bl	8009fb8 <__hexdig_fun>
 800a1d2:	9b03      	ldr	r3, [sp, #12]
 800a1d4:	f000 000f 	and.w	r0, r0, #15
 800a1d8:	4098      	lsls	r0, r3
 800a1da:	ea4b 0b00 	orr.w	fp, fp, r0
 800a1de:	3304      	adds	r3, #4
 800a1e0:	e7ae      	b.n	800a140 <__gethex+0x15c>
 800a1e2:	45b1      	cmp	r9, r6
 800a1e4:	d8ea      	bhi.n	800a1bc <__gethex+0x1d8>
 800a1e6:	492b      	ldr	r1, [pc, #172]	@ (800a294 <__gethex+0x2b0>)
 800a1e8:	9303      	str	r3, [sp, #12]
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	4630      	mov	r0, r6
 800a1ee:	f7ff fe25 	bl	8009e3c <strncmp>
 800a1f2:	9b03      	ldr	r3, [sp, #12]
 800a1f4:	2800      	cmp	r0, #0
 800a1f6:	d1e1      	bne.n	800a1bc <__gethex+0x1d8>
 800a1f8:	e7a2      	b.n	800a140 <__gethex+0x15c>
 800a1fa:	1ea9      	subs	r1, r5, #2
 800a1fc:	4620      	mov	r0, r4
 800a1fe:	f7fe fb84 	bl	800890a <__any_on>
 800a202:	2800      	cmp	r0, #0
 800a204:	d0c2      	beq.n	800a18c <__gethex+0x1a8>
 800a206:	f04f 0903 	mov.w	r9, #3
 800a20a:	e7c1      	b.n	800a190 <__gethex+0x1ac>
 800a20c:	da09      	bge.n	800a222 <__gethex+0x23e>
 800a20e:	1b75      	subs	r5, r6, r5
 800a210:	4621      	mov	r1, r4
 800a212:	9801      	ldr	r0, [sp, #4]
 800a214:	462a      	mov	r2, r5
 800a216:	f7fe f93f 	bl	8008498 <__lshift>
 800a21a:	1b7f      	subs	r7, r7, r5
 800a21c:	4604      	mov	r4, r0
 800a21e:	f100 0a14 	add.w	sl, r0, #20
 800a222:	f04f 0900 	mov.w	r9, #0
 800a226:	e7b8      	b.n	800a19a <__gethex+0x1b6>
 800a228:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a22c:	42bd      	cmp	r5, r7
 800a22e:	dd6f      	ble.n	800a310 <__gethex+0x32c>
 800a230:	1bed      	subs	r5, r5, r7
 800a232:	42ae      	cmp	r6, r5
 800a234:	dc34      	bgt.n	800a2a0 <__gethex+0x2bc>
 800a236:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a23a:	2b02      	cmp	r3, #2
 800a23c:	d022      	beq.n	800a284 <__gethex+0x2a0>
 800a23e:	2b03      	cmp	r3, #3
 800a240:	d024      	beq.n	800a28c <__gethex+0x2a8>
 800a242:	2b01      	cmp	r3, #1
 800a244:	d115      	bne.n	800a272 <__gethex+0x28e>
 800a246:	42ae      	cmp	r6, r5
 800a248:	d113      	bne.n	800a272 <__gethex+0x28e>
 800a24a:	2e01      	cmp	r6, #1
 800a24c:	d10b      	bne.n	800a266 <__gethex+0x282>
 800a24e:	9a02      	ldr	r2, [sp, #8]
 800a250:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a254:	6013      	str	r3, [r2, #0]
 800a256:	2301      	movs	r3, #1
 800a258:	6123      	str	r3, [r4, #16]
 800a25a:	f8ca 3000 	str.w	r3, [sl]
 800a25e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a260:	2562      	movs	r5, #98	@ 0x62
 800a262:	601c      	str	r4, [r3, #0]
 800a264:	e73a      	b.n	800a0dc <__gethex+0xf8>
 800a266:	1e71      	subs	r1, r6, #1
 800a268:	4620      	mov	r0, r4
 800a26a:	f7fe fb4e 	bl	800890a <__any_on>
 800a26e:	2800      	cmp	r0, #0
 800a270:	d1ed      	bne.n	800a24e <__gethex+0x26a>
 800a272:	9801      	ldr	r0, [sp, #4]
 800a274:	4621      	mov	r1, r4
 800a276:	f7fd fef7 	bl	8008068 <_Bfree>
 800a27a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a27c:	2300      	movs	r3, #0
 800a27e:	6013      	str	r3, [r2, #0]
 800a280:	2550      	movs	r5, #80	@ 0x50
 800a282:	e72b      	b.n	800a0dc <__gethex+0xf8>
 800a284:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a286:	2b00      	cmp	r3, #0
 800a288:	d1f3      	bne.n	800a272 <__gethex+0x28e>
 800a28a:	e7e0      	b.n	800a24e <__gethex+0x26a>
 800a28c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d1dd      	bne.n	800a24e <__gethex+0x26a>
 800a292:	e7ee      	b.n	800a272 <__gethex+0x28e>
 800a294:	0800b210 	.word	0x0800b210
 800a298:	0800b0a9 	.word	0x0800b0a9
 800a29c:	0800b3be 	.word	0x0800b3be
 800a2a0:	1e6f      	subs	r7, r5, #1
 800a2a2:	f1b9 0f00 	cmp.w	r9, #0
 800a2a6:	d130      	bne.n	800a30a <__gethex+0x326>
 800a2a8:	b127      	cbz	r7, 800a2b4 <__gethex+0x2d0>
 800a2aa:	4639      	mov	r1, r7
 800a2ac:	4620      	mov	r0, r4
 800a2ae:	f7fe fb2c 	bl	800890a <__any_on>
 800a2b2:	4681      	mov	r9, r0
 800a2b4:	117a      	asrs	r2, r7, #5
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a2bc:	f007 071f 	and.w	r7, r7, #31
 800a2c0:	40bb      	lsls	r3, r7
 800a2c2:	4213      	tst	r3, r2
 800a2c4:	4629      	mov	r1, r5
 800a2c6:	4620      	mov	r0, r4
 800a2c8:	bf18      	it	ne
 800a2ca:	f049 0902 	orrne.w	r9, r9, #2
 800a2ce:	f7ff fe21 	bl	8009f14 <rshift>
 800a2d2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a2d6:	1b76      	subs	r6, r6, r5
 800a2d8:	2502      	movs	r5, #2
 800a2da:	f1b9 0f00 	cmp.w	r9, #0
 800a2de:	d047      	beq.n	800a370 <__gethex+0x38c>
 800a2e0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a2e4:	2b02      	cmp	r3, #2
 800a2e6:	d015      	beq.n	800a314 <__gethex+0x330>
 800a2e8:	2b03      	cmp	r3, #3
 800a2ea:	d017      	beq.n	800a31c <__gethex+0x338>
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	d109      	bne.n	800a304 <__gethex+0x320>
 800a2f0:	f019 0f02 	tst.w	r9, #2
 800a2f4:	d006      	beq.n	800a304 <__gethex+0x320>
 800a2f6:	f8da 3000 	ldr.w	r3, [sl]
 800a2fa:	ea49 0903 	orr.w	r9, r9, r3
 800a2fe:	f019 0f01 	tst.w	r9, #1
 800a302:	d10e      	bne.n	800a322 <__gethex+0x33e>
 800a304:	f045 0510 	orr.w	r5, r5, #16
 800a308:	e032      	b.n	800a370 <__gethex+0x38c>
 800a30a:	f04f 0901 	mov.w	r9, #1
 800a30e:	e7d1      	b.n	800a2b4 <__gethex+0x2d0>
 800a310:	2501      	movs	r5, #1
 800a312:	e7e2      	b.n	800a2da <__gethex+0x2f6>
 800a314:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a316:	f1c3 0301 	rsb	r3, r3, #1
 800a31a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a31c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d0f0      	beq.n	800a304 <__gethex+0x320>
 800a322:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a326:	f104 0314 	add.w	r3, r4, #20
 800a32a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a32e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a332:	f04f 0c00 	mov.w	ip, #0
 800a336:	4618      	mov	r0, r3
 800a338:	f853 2b04 	ldr.w	r2, [r3], #4
 800a33c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a340:	d01b      	beq.n	800a37a <__gethex+0x396>
 800a342:	3201      	adds	r2, #1
 800a344:	6002      	str	r2, [r0, #0]
 800a346:	2d02      	cmp	r5, #2
 800a348:	f104 0314 	add.w	r3, r4, #20
 800a34c:	d13c      	bne.n	800a3c8 <__gethex+0x3e4>
 800a34e:	f8d8 2000 	ldr.w	r2, [r8]
 800a352:	3a01      	subs	r2, #1
 800a354:	42b2      	cmp	r2, r6
 800a356:	d109      	bne.n	800a36c <__gethex+0x388>
 800a358:	1171      	asrs	r1, r6, #5
 800a35a:	2201      	movs	r2, #1
 800a35c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a360:	f006 061f 	and.w	r6, r6, #31
 800a364:	fa02 f606 	lsl.w	r6, r2, r6
 800a368:	421e      	tst	r6, r3
 800a36a:	d13a      	bne.n	800a3e2 <__gethex+0x3fe>
 800a36c:	f045 0520 	orr.w	r5, r5, #32
 800a370:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a372:	601c      	str	r4, [r3, #0]
 800a374:	9b02      	ldr	r3, [sp, #8]
 800a376:	601f      	str	r7, [r3, #0]
 800a378:	e6b0      	b.n	800a0dc <__gethex+0xf8>
 800a37a:	4299      	cmp	r1, r3
 800a37c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a380:	d8d9      	bhi.n	800a336 <__gethex+0x352>
 800a382:	68a3      	ldr	r3, [r4, #8]
 800a384:	459b      	cmp	fp, r3
 800a386:	db17      	blt.n	800a3b8 <__gethex+0x3d4>
 800a388:	6861      	ldr	r1, [r4, #4]
 800a38a:	9801      	ldr	r0, [sp, #4]
 800a38c:	3101      	adds	r1, #1
 800a38e:	f7fd fe2b 	bl	8007fe8 <_Balloc>
 800a392:	4681      	mov	r9, r0
 800a394:	b918      	cbnz	r0, 800a39e <__gethex+0x3ba>
 800a396:	4b1a      	ldr	r3, [pc, #104]	@ (800a400 <__gethex+0x41c>)
 800a398:	4602      	mov	r2, r0
 800a39a:	2184      	movs	r1, #132	@ 0x84
 800a39c:	e6c5      	b.n	800a12a <__gethex+0x146>
 800a39e:	6922      	ldr	r2, [r4, #16]
 800a3a0:	3202      	adds	r2, #2
 800a3a2:	f104 010c 	add.w	r1, r4, #12
 800a3a6:	0092      	lsls	r2, r2, #2
 800a3a8:	300c      	adds	r0, #12
 800a3aa:	f7ff fd69 	bl	8009e80 <memcpy>
 800a3ae:	4621      	mov	r1, r4
 800a3b0:	9801      	ldr	r0, [sp, #4]
 800a3b2:	f7fd fe59 	bl	8008068 <_Bfree>
 800a3b6:	464c      	mov	r4, r9
 800a3b8:	6923      	ldr	r3, [r4, #16]
 800a3ba:	1c5a      	adds	r2, r3, #1
 800a3bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a3c0:	6122      	str	r2, [r4, #16]
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	615a      	str	r2, [r3, #20]
 800a3c6:	e7be      	b.n	800a346 <__gethex+0x362>
 800a3c8:	6922      	ldr	r2, [r4, #16]
 800a3ca:	455a      	cmp	r2, fp
 800a3cc:	dd0b      	ble.n	800a3e6 <__gethex+0x402>
 800a3ce:	2101      	movs	r1, #1
 800a3d0:	4620      	mov	r0, r4
 800a3d2:	f7ff fd9f 	bl	8009f14 <rshift>
 800a3d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a3da:	3701      	adds	r7, #1
 800a3dc:	42bb      	cmp	r3, r7
 800a3de:	f6ff aee0 	blt.w	800a1a2 <__gethex+0x1be>
 800a3e2:	2501      	movs	r5, #1
 800a3e4:	e7c2      	b.n	800a36c <__gethex+0x388>
 800a3e6:	f016 061f 	ands.w	r6, r6, #31
 800a3ea:	d0fa      	beq.n	800a3e2 <__gethex+0x3fe>
 800a3ec:	4453      	add	r3, sl
 800a3ee:	f1c6 0620 	rsb	r6, r6, #32
 800a3f2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a3f6:	f7fd fee9 	bl	80081cc <__hi0bits>
 800a3fa:	42b0      	cmp	r0, r6
 800a3fc:	dbe7      	blt.n	800a3ce <__gethex+0x3ea>
 800a3fe:	e7f0      	b.n	800a3e2 <__gethex+0x3fe>
 800a400:	0800b0a9 	.word	0x0800b0a9

0800a404 <L_shift>:
 800a404:	f1c2 0208 	rsb	r2, r2, #8
 800a408:	0092      	lsls	r2, r2, #2
 800a40a:	b570      	push	{r4, r5, r6, lr}
 800a40c:	f1c2 0620 	rsb	r6, r2, #32
 800a410:	6843      	ldr	r3, [r0, #4]
 800a412:	6804      	ldr	r4, [r0, #0]
 800a414:	fa03 f506 	lsl.w	r5, r3, r6
 800a418:	432c      	orrs	r4, r5
 800a41a:	40d3      	lsrs	r3, r2
 800a41c:	6004      	str	r4, [r0, #0]
 800a41e:	f840 3f04 	str.w	r3, [r0, #4]!
 800a422:	4288      	cmp	r0, r1
 800a424:	d3f4      	bcc.n	800a410 <L_shift+0xc>
 800a426:	bd70      	pop	{r4, r5, r6, pc}

0800a428 <__match>:
 800a428:	b530      	push	{r4, r5, lr}
 800a42a:	6803      	ldr	r3, [r0, #0]
 800a42c:	3301      	adds	r3, #1
 800a42e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a432:	b914      	cbnz	r4, 800a43a <__match+0x12>
 800a434:	6003      	str	r3, [r0, #0]
 800a436:	2001      	movs	r0, #1
 800a438:	bd30      	pop	{r4, r5, pc}
 800a43a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a43e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a442:	2d19      	cmp	r5, #25
 800a444:	bf98      	it	ls
 800a446:	3220      	addls	r2, #32
 800a448:	42a2      	cmp	r2, r4
 800a44a:	d0f0      	beq.n	800a42e <__match+0x6>
 800a44c:	2000      	movs	r0, #0
 800a44e:	e7f3      	b.n	800a438 <__match+0x10>

0800a450 <__hexnan>:
 800a450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a454:	680b      	ldr	r3, [r1, #0]
 800a456:	6801      	ldr	r1, [r0, #0]
 800a458:	115e      	asrs	r6, r3, #5
 800a45a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a45e:	f013 031f 	ands.w	r3, r3, #31
 800a462:	b087      	sub	sp, #28
 800a464:	bf18      	it	ne
 800a466:	3604      	addne	r6, #4
 800a468:	2500      	movs	r5, #0
 800a46a:	1f37      	subs	r7, r6, #4
 800a46c:	4682      	mov	sl, r0
 800a46e:	4690      	mov	r8, r2
 800a470:	9301      	str	r3, [sp, #4]
 800a472:	f846 5c04 	str.w	r5, [r6, #-4]
 800a476:	46b9      	mov	r9, r7
 800a478:	463c      	mov	r4, r7
 800a47a:	9502      	str	r5, [sp, #8]
 800a47c:	46ab      	mov	fp, r5
 800a47e:	784a      	ldrb	r2, [r1, #1]
 800a480:	1c4b      	adds	r3, r1, #1
 800a482:	9303      	str	r3, [sp, #12]
 800a484:	b342      	cbz	r2, 800a4d8 <__hexnan+0x88>
 800a486:	4610      	mov	r0, r2
 800a488:	9105      	str	r1, [sp, #20]
 800a48a:	9204      	str	r2, [sp, #16]
 800a48c:	f7ff fd94 	bl	8009fb8 <__hexdig_fun>
 800a490:	2800      	cmp	r0, #0
 800a492:	d151      	bne.n	800a538 <__hexnan+0xe8>
 800a494:	9a04      	ldr	r2, [sp, #16]
 800a496:	9905      	ldr	r1, [sp, #20]
 800a498:	2a20      	cmp	r2, #32
 800a49a:	d818      	bhi.n	800a4ce <__hexnan+0x7e>
 800a49c:	9b02      	ldr	r3, [sp, #8]
 800a49e:	459b      	cmp	fp, r3
 800a4a0:	dd13      	ble.n	800a4ca <__hexnan+0x7a>
 800a4a2:	454c      	cmp	r4, r9
 800a4a4:	d206      	bcs.n	800a4b4 <__hexnan+0x64>
 800a4a6:	2d07      	cmp	r5, #7
 800a4a8:	dc04      	bgt.n	800a4b4 <__hexnan+0x64>
 800a4aa:	462a      	mov	r2, r5
 800a4ac:	4649      	mov	r1, r9
 800a4ae:	4620      	mov	r0, r4
 800a4b0:	f7ff ffa8 	bl	800a404 <L_shift>
 800a4b4:	4544      	cmp	r4, r8
 800a4b6:	d952      	bls.n	800a55e <__hexnan+0x10e>
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	f1a4 0904 	sub.w	r9, r4, #4
 800a4be:	f844 3c04 	str.w	r3, [r4, #-4]
 800a4c2:	f8cd b008 	str.w	fp, [sp, #8]
 800a4c6:	464c      	mov	r4, r9
 800a4c8:	461d      	mov	r5, r3
 800a4ca:	9903      	ldr	r1, [sp, #12]
 800a4cc:	e7d7      	b.n	800a47e <__hexnan+0x2e>
 800a4ce:	2a29      	cmp	r2, #41	@ 0x29
 800a4d0:	d157      	bne.n	800a582 <__hexnan+0x132>
 800a4d2:	3102      	adds	r1, #2
 800a4d4:	f8ca 1000 	str.w	r1, [sl]
 800a4d8:	f1bb 0f00 	cmp.w	fp, #0
 800a4dc:	d051      	beq.n	800a582 <__hexnan+0x132>
 800a4de:	454c      	cmp	r4, r9
 800a4e0:	d206      	bcs.n	800a4f0 <__hexnan+0xa0>
 800a4e2:	2d07      	cmp	r5, #7
 800a4e4:	dc04      	bgt.n	800a4f0 <__hexnan+0xa0>
 800a4e6:	462a      	mov	r2, r5
 800a4e8:	4649      	mov	r1, r9
 800a4ea:	4620      	mov	r0, r4
 800a4ec:	f7ff ff8a 	bl	800a404 <L_shift>
 800a4f0:	4544      	cmp	r4, r8
 800a4f2:	d936      	bls.n	800a562 <__hexnan+0x112>
 800a4f4:	f1a8 0204 	sub.w	r2, r8, #4
 800a4f8:	4623      	mov	r3, r4
 800a4fa:	f853 1b04 	ldr.w	r1, [r3], #4
 800a4fe:	f842 1f04 	str.w	r1, [r2, #4]!
 800a502:	429f      	cmp	r7, r3
 800a504:	d2f9      	bcs.n	800a4fa <__hexnan+0xaa>
 800a506:	1b3b      	subs	r3, r7, r4
 800a508:	f023 0303 	bic.w	r3, r3, #3
 800a50c:	3304      	adds	r3, #4
 800a50e:	3401      	adds	r4, #1
 800a510:	3e03      	subs	r6, #3
 800a512:	42b4      	cmp	r4, r6
 800a514:	bf88      	it	hi
 800a516:	2304      	movhi	r3, #4
 800a518:	4443      	add	r3, r8
 800a51a:	2200      	movs	r2, #0
 800a51c:	f843 2b04 	str.w	r2, [r3], #4
 800a520:	429f      	cmp	r7, r3
 800a522:	d2fb      	bcs.n	800a51c <__hexnan+0xcc>
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	b91b      	cbnz	r3, 800a530 <__hexnan+0xe0>
 800a528:	4547      	cmp	r7, r8
 800a52a:	d128      	bne.n	800a57e <__hexnan+0x12e>
 800a52c:	2301      	movs	r3, #1
 800a52e:	603b      	str	r3, [r7, #0]
 800a530:	2005      	movs	r0, #5
 800a532:	b007      	add	sp, #28
 800a534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a538:	3501      	adds	r5, #1
 800a53a:	2d08      	cmp	r5, #8
 800a53c:	f10b 0b01 	add.w	fp, fp, #1
 800a540:	dd06      	ble.n	800a550 <__hexnan+0x100>
 800a542:	4544      	cmp	r4, r8
 800a544:	d9c1      	bls.n	800a4ca <__hexnan+0x7a>
 800a546:	2300      	movs	r3, #0
 800a548:	f844 3c04 	str.w	r3, [r4, #-4]
 800a54c:	2501      	movs	r5, #1
 800a54e:	3c04      	subs	r4, #4
 800a550:	6822      	ldr	r2, [r4, #0]
 800a552:	f000 000f 	and.w	r0, r0, #15
 800a556:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a55a:	6020      	str	r0, [r4, #0]
 800a55c:	e7b5      	b.n	800a4ca <__hexnan+0x7a>
 800a55e:	2508      	movs	r5, #8
 800a560:	e7b3      	b.n	800a4ca <__hexnan+0x7a>
 800a562:	9b01      	ldr	r3, [sp, #4]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d0dd      	beq.n	800a524 <__hexnan+0xd4>
 800a568:	f1c3 0320 	rsb	r3, r3, #32
 800a56c:	f04f 32ff 	mov.w	r2, #4294967295
 800a570:	40da      	lsrs	r2, r3
 800a572:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a576:	4013      	ands	r3, r2
 800a578:	f846 3c04 	str.w	r3, [r6, #-4]
 800a57c:	e7d2      	b.n	800a524 <__hexnan+0xd4>
 800a57e:	3f04      	subs	r7, #4
 800a580:	e7d0      	b.n	800a524 <__hexnan+0xd4>
 800a582:	2004      	movs	r0, #4
 800a584:	e7d5      	b.n	800a532 <__hexnan+0xe2>

0800a586 <__ascii_mbtowc>:
 800a586:	b082      	sub	sp, #8
 800a588:	b901      	cbnz	r1, 800a58c <__ascii_mbtowc+0x6>
 800a58a:	a901      	add	r1, sp, #4
 800a58c:	b142      	cbz	r2, 800a5a0 <__ascii_mbtowc+0x1a>
 800a58e:	b14b      	cbz	r3, 800a5a4 <__ascii_mbtowc+0x1e>
 800a590:	7813      	ldrb	r3, [r2, #0]
 800a592:	600b      	str	r3, [r1, #0]
 800a594:	7812      	ldrb	r2, [r2, #0]
 800a596:	1e10      	subs	r0, r2, #0
 800a598:	bf18      	it	ne
 800a59a:	2001      	movne	r0, #1
 800a59c:	b002      	add	sp, #8
 800a59e:	4770      	bx	lr
 800a5a0:	4610      	mov	r0, r2
 800a5a2:	e7fb      	b.n	800a59c <__ascii_mbtowc+0x16>
 800a5a4:	f06f 0001 	mvn.w	r0, #1
 800a5a8:	e7f8      	b.n	800a59c <__ascii_mbtowc+0x16>

0800a5aa <_realloc_r>:
 800a5aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5ae:	4680      	mov	r8, r0
 800a5b0:	4615      	mov	r5, r2
 800a5b2:	460c      	mov	r4, r1
 800a5b4:	b921      	cbnz	r1, 800a5c0 <_realloc_r+0x16>
 800a5b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5ba:	4611      	mov	r1, r2
 800a5bc:	f7fd bc88 	b.w	8007ed0 <_malloc_r>
 800a5c0:	b92a      	cbnz	r2, 800a5ce <_realloc_r+0x24>
 800a5c2:	f7fd fc11 	bl	8007de8 <_free_r>
 800a5c6:	2400      	movs	r4, #0
 800a5c8:	4620      	mov	r0, r4
 800a5ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5ce:	f000 f8c4 	bl	800a75a <_malloc_usable_size_r>
 800a5d2:	4285      	cmp	r5, r0
 800a5d4:	4606      	mov	r6, r0
 800a5d6:	d802      	bhi.n	800a5de <_realloc_r+0x34>
 800a5d8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a5dc:	d8f4      	bhi.n	800a5c8 <_realloc_r+0x1e>
 800a5de:	4629      	mov	r1, r5
 800a5e0:	4640      	mov	r0, r8
 800a5e2:	f7fd fc75 	bl	8007ed0 <_malloc_r>
 800a5e6:	4607      	mov	r7, r0
 800a5e8:	2800      	cmp	r0, #0
 800a5ea:	d0ec      	beq.n	800a5c6 <_realloc_r+0x1c>
 800a5ec:	42b5      	cmp	r5, r6
 800a5ee:	462a      	mov	r2, r5
 800a5f0:	4621      	mov	r1, r4
 800a5f2:	bf28      	it	cs
 800a5f4:	4632      	movcs	r2, r6
 800a5f6:	f7ff fc43 	bl	8009e80 <memcpy>
 800a5fa:	4621      	mov	r1, r4
 800a5fc:	4640      	mov	r0, r8
 800a5fe:	f7fd fbf3 	bl	8007de8 <_free_r>
 800a602:	463c      	mov	r4, r7
 800a604:	e7e0      	b.n	800a5c8 <_realloc_r+0x1e>

0800a606 <__ascii_wctomb>:
 800a606:	4603      	mov	r3, r0
 800a608:	4608      	mov	r0, r1
 800a60a:	b141      	cbz	r1, 800a61e <__ascii_wctomb+0x18>
 800a60c:	2aff      	cmp	r2, #255	@ 0xff
 800a60e:	d904      	bls.n	800a61a <__ascii_wctomb+0x14>
 800a610:	228a      	movs	r2, #138	@ 0x8a
 800a612:	601a      	str	r2, [r3, #0]
 800a614:	f04f 30ff 	mov.w	r0, #4294967295
 800a618:	4770      	bx	lr
 800a61a:	700a      	strb	r2, [r1, #0]
 800a61c:	2001      	movs	r0, #1
 800a61e:	4770      	bx	lr

0800a620 <fiprintf>:
 800a620:	b40e      	push	{r1, r2, r3}
 800a622:	b503      	push	{r0, r1, lr}
 800a624:	4601      	mov	r1, r0
 800a626:	ab03      	add	r3, sp, #12
 800a628:	4805      	ldr	r0, [pc, #20]	@ (800a640 <fiprintf+0x20>)
 800a62a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a62e:	6800      	ldr	r0, [r0, #0]
 800a630:	9301      	str	r3, [sp, #4]
 800a632:	f7ff f991 	bl	8009958 <_vfiprintf_r>
 800a636:	b002      	add	sp, #8
 800a638:	f85d eb04 	ldr.w	lr, [sp], #4
 800a63c:	b003      	add	sp, #12
 800a63e:	4770      	bx	lr
 800a640:	20000018 	.word	0x20000018

0800a644 <__swhatbuf_r>:
 800a644:	b570      	push	{r4, r5, r6, lr}
 800a646:	460c      	mov	r4, r1
 800a648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a64c:	2900      	cmp	r1, #0
 800a64e:	b096      	sub	sp, #88	@ 0x58
 800a650:	4615      	mov	r5, r2
 800a652:	461e      	mov	r6, r3
 800a654:	da0d      	bge.n	800a672 <__swhatbuf_r+0x2e>
 800a656:	89a3      	ldrh	r3, [r4, #12]
 800a658:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a65c:	f04f 0100 	mov.w	r1, #0
 800a660:	bf14      	ite	ne
 800a662:	2340      	movne	r3, #64	@ 0x40
 800a664:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a668:	2000      	movs	r0, #0
 800a66a:	6031      	str	r1, [r6, #0]
 800a66c:	602b      	str	r3, [r5, #0]
 800a66e:	b016      	add	sp, #88	@ 0x58
 800a670:	bd70      	pop	{r4, r5, r6, pc}
 800a672:	466a      	mov	r2, sp
 800a674:	f000 f848 	bl	800a708 <_fstat_r>
 800a678:	2800      	cmp	r0, #0
 800a67a:	dbec      	blt.n	800a656 <__swhatbuf_r+0x12>
 800a67c:	9901      	ldr	r1, [sp, #4]
 800a67e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a682:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a686:	4259      	negs	r1, r3
 800a688:	4159      	adcs	r1, r3
 800a68a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a68e:	e7eb      	b.n	800a668 <__swhatbuf_r+0x24>

0800a690 <__smakebuf_r>:
 800a690:	898b      	ldrh	r3, [r1, #12]
 800a692:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a694:	079d      	lsls	r5, r3, #30
 800a696:	4606      	mov	r6, r0
 800a698:	460c      	mov	r4, r1
 800a69a:	d507      	bpl.n	800a6ac <__smakebuf_r+0x1c>
 800a69c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a6a0:	6023      	str	r3, [r4, #0]
 800a6a2:	6123      	str	r3, [r4, #16]
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	6163      	str	r3, [r4, #20]
 800a6a8:	b003      	add	sp, #12
 800a6aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6ac:	ab01      	add	r3, sp, #4
 800a6ae:	466a      	mov	r2, sp
 800a6b0:	f7ff ffc8 	bl	800a644 <__swhatbuf_r>
 800a6b4:	9f00      	ldr	r7, [sp, #0]
 800a6b6:	4605      	mov	r5, r0
 800a6b8:	4639      	mov	r1, r7
 800a6ba:	4630      	mov	r0, r6
 800a6bc:	f7fd fc08 	bl	8007ed0 <_malloc_r>
 800a6c0:	b948      	cbnz	r0, 800a6d6 <__smakebuf_r+0x46>
 800a6c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6c6:	059a      	lsls	r2, r3, #22
 800a6c8:	d4ee      	bmi.n	800a6a8 <__smakebuf_r+0x18>
 800a6ca:	f023 0303 	bic.w	r3, r3, #3
 800a6ce:	f043 0302 	orr.w	r3, r3, #2
 800a6d2:	81a3      	strh	r3, [r4, #12]
 800a6d4:	e7e2      	b.n	800a69c <__smakebuf_r+0xc>
 800a6d6:	89a3      	ldrh	r3, [r4, #12]
 800a6d8:	6020      	str	r0, [r4, #0]
 800a6da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a6de:	81a3      	strh	r3, [r4, #12]
 800a6e0:	9b01      	ldr	r3, [sp, #4]
 800a6e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a6e6:	b15b      	cbz	r3, 800a700 <__smakebuf_r+0x70>
 800a6e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6ec:	4630      	mov	r0, r6
 800a6ee:	f000 f81d 	bl	800a72c <_isatty_r>
 800a6f2:	b128      	cbz	r0, 800a700 <__smakebuf_r+0x70>
 800a6f4:	89a3      	ldrh	r3, [r4, #12]
 800a6f6:	f023 0303 	bic.w	r3, r3, #3
 800a6fa:	f043 0301 	orr.w	r3, r3, #1
 800a6fe:	81a3      	strh	r3, [r4, #12]
 800a700:	89a3      	ldrh	r3, [r4, #12]
 800a702:	431d      	orrs	r5, r3
 800a704:	81a5      	strh	r5, [r4, #12]
 800a706:	e7cf      	b.n	800a6a8 <__smakebuf_r+0x18>

0800a708 <_fstat_r>:
 800a708:	b538      	push	{r3, r4, r5, lr}
 800a70a:	4d07      	ldr	r5, [pc, #28]	@ (800a728 <_fstat_r+0x20>)
 800a70c:	2300      	movs	r3, #0
 800a70e:	4604      	mov	r4, r0
 800a710:	4608      	mov	r0, r1
 800a712:	4611      	mov	r1, r2
 800a714:	602b      	str	r3, [r5, #0]
 800a716:	f7f8 f8c1 	bl	800289c <_fstat>
 800a71a:	1c43      	adds	r3, r0, #1
 800a71c:	d102      	bne.n	800a724 <_fstat_r+0x1c>
 800a71e:	682b      	ldr	r3, [r5, #0]
 800a720:	b103      	cbz	r3, 800a724 <_fstat_r+0x1c>
 800a722:	6023      	str	r3, [r4, #0]
 800a724:	bd38      	pop	{r3, r4, r5, pc}
 800a726:	bf00      	nop
 800a728:	20011b5c 	.word	0x20011b5c

0800a72c <_isatty_r>:
 800a72c:	b538      	push	{r3, r4, r5, lr}
 800a72e:	4d06      	ldr	r5, [pc, #24]	@ (800a748 <_isatty_r+0x1c>)
 800a730:	2300      	movs	r3, #0
 800a732:	4604      	mov	r4, r0
 800a734:	4608      	mov	r0, r1
 800a736:	602b      	str	r3, [r5, #0]
 800a738:	f7f8 f8c0 	bl	80028bc <_isatty>
 800a73c:	1c43      	adds	r3, r0, #1
 800a73e:	d102      	bne.n	800a746 <_isatty_r+0x1a>
 800a740:	682b      	ldr	r3, [r5, #0]
 800a742:	b103      	cbz	r3, 800a746 <_isatty_r+0x1a>
 800a744:	6023      	str	r3, [r4, #0]
 800a746:	bd38      	pop	{r3, r4, r5, pc}
 800a748:	20011b5c 	.word	0x20011b5c

0800a74c <abort>:
 800a74c:	b508      	push	{r3, lr}
 800a74e:	2006      	movs	r0, #6
 800a750:	f000 f834 	bl	800a7bc <raise>
 800a754:	2001      	movs	r0, #1
 800a756:	f7f8 f851 	bl	80027fc <_exit>

0800a75a <_malloc_usable_size_r>:
 800a75a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a75e:	1f18      	subs	r0, r3, #4
 800a760:	2b00      	cmp	r3, #0
 800a762:	bfbc      	itt	lt
 800a764:	580b      	ldrlt	r3, [r1, r0]
 800a766:	18c0      	addlt	r0, r0, r3
 800a768:	4770      	bx	lr

0800a76a <_raise_r>:
 800a76a:	291f      	cmp	r1, #31
 800a76c:	b538      	push	{r3, r4, r5, lr}
 800a76e:	4605      	mov	r5, r0
 800a770:	460c      	mov	r4, r1
 800a772:	d904      	bls.n	800a77e <_raise_r+0x14>
 800a774:	2316      	movs	r3, #22
 800a776:	6003      	str	r3, [r0, #0]
 800a778:	f04f 30ff 	mov.w	r0, #4294967295
 800a77c:	bd38      	pop	{r3, r4, r5, pc}
 800a77e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a780:	b112      	cbz	r2, 800a788 <_raise_r+0x1e>
 800a782:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a786:	b94b      	cbnz	r3, 800a79c <_raise_r+0x32>
 800a788:	4628      	mov	r0, r5
 800a78a:	f000 f831 	bl	800a7f0 <_getpid_r>
 800a78e:	4622      	mov	r2, r4
 800a790:	4601      	mov	r1, r0
 800a792:	4628      	mov	r0, r5
 800a794:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a798:	f000 b818 	b.w	800a7cc <_kill_r>
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	d00a      	beq.n	800a7b6 <_raise_r+0x4c>
 800a7a0:	1c59      	adds	r1, r3, #1
 800a7a2:	d103      	bne.n	800a7ac <_raise_r+0x42>
 800a7a4:	2316      	movs	r3, #22
 800a7a6:	6003      	str	r3, [r0, #0]
 800a7a8:	2001      	movs	r0, #1
 800a7aa:	e7e7      	b.n	800a77c <_raise_r+0x12>
 800a7ac:	2100      	movs	r1, #0
 800a7ae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a7b2:	4620      	mov	r0, r4
 800a7b4:	4798      	blx	r3
 800a7b6:	2000      	movs	r0, #0
 800a7b8:	e7e0      	b.n	800a77c <_raise_r+0x12>
	...

0800a7bc <raise>:
 800a7bc:	4b02      	ldr	r3, [pc, #8]	@ (800a7c8 <raise+0xc>)
 800a7be:	4601      	mov	r1, r0
 800a7c0:	6818      	ldr	r0, [r3, #0]
 800a7c2:	f7ff bfd2 	b.w	800a76a <_raise_r>
 800a7c6:	bf00      	nop
 800a7c8:	20000018 	.word	0x20000018

0800a7cc <_kill_r>:
 800a7cc:	b538      	push	{r3, r4, r5, lr}
 800a7ce:	4d07      	ldr	r5, [pc, #28]	@ (800a7ec <_kill_r+0x20>)
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	4604      	mov	r4, r0
 800a7d4:	4608      	mov	r0, r1
 800a7d6:	4611      	mov	r1, r2
 800a7d8:	602b      	str	r3, [r5, #0]
 800a7da:	f7f7 ffff 	bl	80027dc <_kill>
 800a7de:	1c43      	adds	r3, r0, #1
 800a7e0:	d102      	bne.n	800a7e8 <_kill_r+0x1c>
 800a7e2:	682b      	ldr	r3, [r5, #0]
 800a7e4:	b103      	cbz	r3, 800a7e8 <_kill_r+0x1c>
 800a7e6:	6023      	str	r3, [r4, #0]
 800a7e8:	bd38      	pop	{r3, r4, r5, pc}
 800a7ea:	bf00      	nop
 800a7ec:	20011b5c 	.word	0x20011b5c

0800a7f0 <_getpid_r>:
 800a7f0:	f7f7 bfec 	b.w	80027cc <_getpid>

0800a7f4 <atan2f>:
 800a7f4:	f000 b850 	b.w	800a898 <__ieee754_atan2f>

0800a7f8 <logf>:
 800a7f8:	b508      	push	{r3, lr}
 800a7fa:	ed2d 8b02 	vpush	{d8}
 800a7fe:	eeb0 8a40 	vmov.f32	s16, s0
 800a802:	f000 f8e9 	bl	800a9d8 <__ieee754_logf>
 800a806:	eeb4 8a48 	vcmp.f32	s16, s16
 800a80a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a80e:	d60f      	bvs.n	800a830 <logf+0x38>
 800a810:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a818:	dc0a      	bgt.n	800a830 <logf+0x38>
 800a81a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800a81e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a822:	d108      	bne.n	800a836 <logf+0x3e>
 800a824:	f7fc fc60 	bl	80070e8 <__errno>
 800a828:	2322      	movs	r3, #34	@ 0x22
 800a82a:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800a84c <logf+0x54>
 800a82e:	6003      	str	r3, [r0, #0]
 800a830:	ecbd 8b02 	vpop	{d8}
 800a834:	bd08      	pop	{r3, pc}
 800a836:	f7fc fc57 	bl	80070e8 <__errno>
 800a83a:	ecbd 8b02 	vpop	{d8}
 800a83e:	2321      	movs	r3, #33	@ 0x21
 800a840:	6003      	str	r3, [r0, #0]
 800a842:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a846:	4802      	ldr	r0, [pc, #8]	@ (800a850 <logf+0x58>)
 800a848:	f7fc bc7c 	b.w	8007144 <nanf>
 800a84c:	ff800000 	.word	0xff800000
 800a850:	0800b3bd 	.word	0x0800b3bd

0800a854 <sqrtf>:
 800a854:	b508      	push	{r3, lr}
 800a856:	ed2d 8b02 	vpush	{d8}
 800a85a:	eeb0 8a40 	vmov.f32	s16, s0
 800a85e:	f000 f817 	bl	800a890 <__ieee754_sqrtf>
 800a862:	eeb4 8a48 	vcmp.f32	s16, s16
 800a866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a86a:	d60c      	bvs.n	800a886 <sqrtf+0x32>
 800a86c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800a88c <sqrtf+0x38>
 800a870:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a878:	d505      	bpl.n	800a886 <sqrtf+0x32>
 800a87a:	f7fc fc35 	bl	80070e8 <__errno>
 800a87e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a882:	2321      	movs	r3, #33	@ 0x21
 800a884:	6003      	str	r3, [r0, #0]
 800a886:	ecbd 8b02 	vpop	{d8}
 800a88a:	bd08      	pop	{r3, pc}
 800a88c:	00000000 	.word	0x00000000

0800a890 <__ieee754_sqrtf>:
 800a890:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a894:	4770      	bx	lr
	...

0800a898 <__ieee754_atan2f>:
 800a898:	ee10 2a90 	vmov	r2, s1
 800a89c:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800a8a0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800a8a4:	b510      	push	{r4, lr}
 800a8a6:	eef0 7a40 	vmov.f32	s15, s0
 800a8aa:	d806      	bhi.n	800a8ba <__ieee754_atan2f+0x22>
 800a8ac:	ee10 0a10 	vmov	r0, s0
 800a8b0:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800a8b4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a8b8:	d904      	bls.n	800a8c4 <__ieee754_atan2f+0x2c>
 800a8ba:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800a8be:	eeb0 0a67 	vmov.f32	s0, s15
 800a8c2:	bd10      	pop	{r4, pc}
 800a8c4:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800a8c8:	d103      	bne.n	800a8d2 <__ieee754_atan2f+0x3a>
 800a8ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8ce:	f000 b975 	b.w	800abbc <atanf>
 800a8d2:	1794      	asrs	r4, r2, #30
 800a8d4:	f004 0402 	and.w	r4, r4, #2
 800a8d8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800a8dc:	b943      	cbnz	r3, 800a8f0 <__ieee754_atan2f+0x58>
 800a8de:	2c02      	cmp	r4, #2
 800a8e0:	d05e      	beq.n	800a9a0 <__ieee754_atan2f+0x108>
 800a8e2:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800a9b4 <__ieee754_atan2f+0x11c>
 800a8e6:	2c03      	cmp	r4, #3
 800a8e8:	bf08      	it	eq
 800a8ea:	eef0 7a47 	vmoveq.f32	s15, s14
 800a8ee:	e7e6      	b.n	800a8be <__ieee754_atan2f+0x26>
 800a8f0:	b941      	cbnz	r1, 800a904 <__ieee754_atan2f+0x6c>
 800a8f2:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800a9b8 <__ieee754_atan2f+0x120>
 800a8f6:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800a9bc <__ieee754_atan2f+0x124>
 800a8fa:	2800      	cmp	r0, #0
 800a8fc:	bfb8      	it	lt
 800a8fe:	eef0 7a47 	vmovlt.f32	s15, s14
 800a902:	e7dc      	b.n	800a8be <__ieee754_atan2f+0x26>
 800a904:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800a908:	d110      	bne.n	800a92c <__ieee754_atan2f+0x94>
 800a90a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a90e:	f104 34ff 	add.w	r4, r4, #4294967295
 800a912:	d107      	bne.n	800a924 <__ieee754_atan2f+0x8c>
 800a914:	2c02      	cmp	r4, #2
 800a916:	d846      	bhi.n	800a9a6 <__ieee754_atan2f+0x10e>
 800a918:	4b29      	ldr	r3, [pc, #164]	@ (800a9c0 <__ieee754_atan2f+0x128>)
 800a91a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a91e:	edd3 7a00 	vldr	s15, [r3]
 800a922:	e7cc      	b.n	800a8be <__ieee754_atan2f+0x26>
 800a924:	2c02      	cmp	r4, #2
 800a926:	d841      	bhi.n	800a9ac <__ieee754_atan2f+0x114>
 800a928:	4b26      	ldr	r3, [pc, #152]	@ (800a9c4 <__ieee754_atan2f+0x12c>)
 800a92a:	e7f6      	b.n	800a91a <__ieee754_atan2f+0x82>
 800a92c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a930:	d0df      	beq.n	800a8f2 <__ieee754_atan2f+0x5a>
 800a932:	1a5b      	subs	r3, r3, r1
 800a934:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800a938:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800a93c:	da1a      	bge.n	800a974 <__ieee754_atan2f+0xdc>
 800a93e:	2a00      	cmp	r2, #0
 800a940:	da01      	bge.n	800a946 <__ieee754_atan2f+0xae>
 800a942:	313c      	adds	r1, #60	@ 0x3c
 800a944:	db19      	blt.n	800a97a <__ieee754_atan2f+0xe2>
 800a946:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800a94a:	f000 fa0b 	bl	800ad64 <fabsf>
 800a94e:	f000 f935 	bl	800abbc <atanf>
 800a952:	eef0 7a40 	vmov.f32	s15, s0
 800a956:	2c01      	cmp	r4, #1
 800a958:	d012      	beq.n	800a980 <__ieee754_atan2f+0xe8>
 800a95a:	2c02      	cmp	r4, #2
 800a95c:	d017      	beq.n	800a98e <__ieee754_atan2f+0xf6>
 800a95e:	2c00      	cmp	r4, #0
 800a960:	d0ad      	beq.n	800a8be <__ieee754_atan2f+0x26>
 800a962:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800a9c8 <__ieee754_atan2f+0x130>
 800a966:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a96a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800a9cc <__ieee754_atan2f+0x134>
 800a96e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a972:	e7a4      	b.n	800a8be <__ieee754_atan2f+0x26>
 800a974:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800a9b8 <__ieee754_atan2f+0x120>
 800a978:	e7ed      	b.n	800a956 <__ieee754_atan2f+0xbe>
 800a97a:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800a9d0 <__ieee754_atan2f+0x138>
 800a97e:	e7ea      	b.n	800a956 <__ieee754_atan2f+0xbe>
 800a980:	ee17 3a90 	vmov	r3, s15
 800a984:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800a988:	ee07 3a90 	vmov	s15, r3
 800a98c:	e797      	b.n	800a8be <__ieee754_atan2f+0x26>
 800a98e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800a9c8 <__ieee754_atan2f+0x130>
 800a992:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a996:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800a9cc <__ieee754_atan2f+0x134>
 800a99a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a99e:	e78e      	b.n	800a8be <__ieee754_atan2f+0x26>
 800a9a0:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800a9cc <__ieee754_atan2f+0x134>
 800a9a4:	e78b      	b.n	800a8be <__ieee754_atan2f+0x26>
 800a9a6:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800a9d4 <__ieee754_atan2f+0x13c>
 800a9aa:	e788      	b.n	800a8be <__ieee754_atan2f+0x26>
 800a9ac:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800a9d0 <__ieee754_atan2f+0x138>
 800a9b0:	e785      	b.n	800a8be <__ieee754_atan2f+0x26>
 800a9b2:	bf00      	nop
 800a9b4:	c0490fdb 	.word	0xc0490fdb
 800a9b8:	3fc90fdb 	.word	0x3fc90fdb
 800a9bc:	bfc90fdb 	.word	0xbfc90fdb
 800a9c0:	0800b42c 	.word	0x0800b42c
 800a9c4:	0800b420 	.word	0x0800b420
 800a9c8:	33bbbd2e 	.word	0x33bbbd2e
 800a9cc:	40490fdb 	.word	0x40490fdb
 800a9d0:	00000000 	.word	0x00000000
 800a9d4:	3f490fdb 	.word	0x3f490fdb

0800a9d8 <__ieee754_logf>:
 800a9d8:	ee10 3a10 	vmov	r3, s0
 800a9dc:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800a9e0:	d106      	bne.n	800a9f0 <__ieee754_logf+0x18>
 800a9e2:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 800ab7c <__ieee754_logf+0x1a4>
 800a9e6:	eddf 7a66 	vldr	s15, [pc, #408]	@ 800ab80 <__ieee754_logf+0x1a8>
 800a9ea:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800a9ee:	4770      	bx	lr
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	461a      	mov	r2, r3
 800a9f4:	da02      	bge.n	800a9fc <__ieee754_logf+0x24>
 800a9f6:	ee30 7a40 	vsub.f32	s14, s0, s0
 800a9fa:	e7f4      	b.n	800a9e6 <__ieee754_logf+0xe>
 800a9fc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800aa00:	db02      	blt.n	800aa08 <__ieee754_logf+0x30>
 800aa02:	ee30 0a00 	vadd.f32	s0, s0, s0
 800aa06:	4770      	bx	lr
 800aa08:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800aa0c:	bfb8      	it	lt
 800aa0e:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 800ab84 <__ieee754_logf+0x1ac>
 800aa12:	485d      	ldr	r0, [pc, #372]	@ (800ab88 <__ieee754_logf+0x1b0>)
 800aa14:	bfbe      	ittt	lt
 800aa16:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800aa1a:	f06f 0118 	mvnlt.w	r1, #24
 800aa1e:	ee17 2a90 	vmovlt	r2, s15
 800aa22:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800aa26:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800aa2a:	4410      	add	r0, r2
 800aa2c:	bfa8      	it	ge
 800aa2e:	2100      	movge	r1, #0
 800aa30:	3b7f      	subs	r3, #127	@ 0x7f
 800aa32:	440b      	add	r3, r1
 800aa34:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 800aa38:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 800aa3c:	4311      	orrs	r1, r2
 800aa3e:	ee00 1a10 	vmov	s0, r1
 800aa42:	4952      	ldr	r1, [pc, #328]	@ (800ab8c <__ieee754_logf+0x1b4>)
 800aa44:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 800aa48:	f102 000f 	add.w	r0, r2, #15
 800aa4c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800aa50:	4001      	ands	r1, r0
 800aa52:	ee30 0a67 	vsub.f32	s0, s0, s15
 800aa56:	bb89      	cbnz	r1, 800aabc <__ieee754_logf+0xe4>
 800aa58:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800aa5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa60:	d10f      	bne.n	800aa82 <__ieee754_logf+0xaa>
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	f000 8087 	beq.w	800ab76 <__ieee754_logf+0x19e>
 800aa68:	ee07 3a90 	vmov	s15, r3
 800aa6c:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 800ab90 <__ieee754_logf+0x1b8>
 800aa70:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800ab94 <__ieee754_logf+0x1bc>
 800aa74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aa78:	ee27 0a80 	vmul.f32	s0, s15, s0
 800aa7c:	eea7 0a87 	vfma.f32	s0, s15, s14
 800aa80:	4770      	bx	lr
 800aa82:	eddf 6a45 	vldr	s13, [pc, #276]	@ 800ab98 <__ieee754_logf+0x1c0>
 800aa86:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800aa8a:	eee0 7a66 	vfms.f32	s15, s0, s13
 800aa8e:	ee20 7a00 	vmul.f32	s14, s0, s0
 800aa92:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa96:	b913      	cbnz	r3, 800aa9e <__ieee754_logf+0xc6>
 800aa98:	ee30 0a47 	vsub.f32	s0, s0, s14
 800aa9c:	4770      	bx	lr
 800aa9e:	ee07 3a90 	vmov	s15, r3
 800aaa2:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800ab90 <__ieee754_logf+0x1b8>
 800aaa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aaaa:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800aaae:	ee37 0a40 	vsub.f32	s0, s14, s0
 800aab2:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800ab94 <__ieee754_logf+0x1bc>
 800aab6:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800aaba:	4770      	bx	lr
 800aabc:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800aac0:	ee70 7a27 	vadd.f32	s15, s0, s15
 800aac4:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800ab9c <__ieee754_logf+0x1c4>
 800aac8:	eddf 4a35 	vldr	s9, [pc, #212]	@ 800aba0 <__ieee754_logf+0x1c8>
 800aacc:	4935      	ldr	r1, [pc, #212]	@ (800aba4 <__ieee754_logf+0x1cc>)
 800aace:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800aad2:	4411      	add	r1, r2
 800aad4:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 800aad8:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 800aadc:	430a      	orrs	r2, r1
 800aade:	2a00      	cmp	r2, #0
 800aae0:	ee07 3a90 	vmov	s15, r3
 800aae4:	ee26 5a06 	vmul.f32	s10, s12, s12
 800aae8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800aaec:	ee25 7a05 	vmul.f32	s14, s10, s10
 800aaf0:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 800aba8 <__ieee754_logf+0x1d0>
 800aaf4:	eee7 7a25 	vfma.f32	s15, s14, s11
 800aaf8:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800abac <__ieee754_logf+0x1d4>
 800aafc:	eee7 5a87 	vfma.f32	s11, s15, s14
 800ab00:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 800abb0 <__ieee754_logf+0x1d8>
 800ab04:	eee7 7a24 	vfma.f32	s15, s14, s9
 800ab08:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 800abb4 <__ieee754_logf+0x1dc>
 800ab0c:	eee7 4a87 	vfma.f32	s9, s15, s14
 800ab10:	eddf 7a29 	vldr	s15, [pc, #164]	@ 800abb8 <__ieee754_logf+0x1e0>
 800ab14:	eee4 7a87 	vfma.f32	s15, s9, s14
 800ab18:	ee67 7a85 	vmul.f32	s15, s15, s10
 800ab1c:	eee5 7a87 	vfma.f32	s15, s11, s14
 800ab20:	dd1a      	ble.n	800ab58 <__ieee754_logf+0x180>
 800ab22:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800ab26:	ee20 7a07 	vmul.f32	s14, s0, s14
 800ab2a:	ee27 7a00 	vmul.f32	s14, s14, s0
 800ab2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ab32:	ee67 7a86 	vmul.f32	s15, s15, s12
 800ab36:	b913      	cbnz	r3, 800ab3e <__ieee754_logf+0x166>
 800ab38:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ab3c:	e7ac      	b.n	800aa98 <__ieee754_logf+0xc0>
 800ab3e:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 800ab90 <__ieee754_logf+0x1b8>
 800ab42:	eee6 7a86 	vfma.f32	s15, s13, s12
 800ab46:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ab4a:	ee37 0a40 	vsub.f32	s0, s14, s0
 800ab4e:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800ab94 <__ieee754_logf+0x1bc>
 800ab52:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800ab56:	4770      	bx	lr
 800ab58:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ab5c:	ee67 7a86 	vmul.f32	s15, s15, s12
 800ab60:	b913      	cbnz	r3, 800ab68 <__ieee754_logf+0x190>
 800ab62:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ab66:	4770      	bx	lr
 800ab68:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800ab90 <__ieee754_logf+0x1b8>
 800ab6c:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800ab70:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800ab74:	e7eb      	b.n	800ab4e <__ieee754_logf+0x176>
 800ab76:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 800ab80 <__ieee754_logf+0x1a8>
 800ab7a:	4770      	bx	lr
 800ab7c:	cc000000 	.word	0xcc000000
 800ab80:	00000000 	.word	0x00000000
 800ab84:	4c000000 	.word	0x4c000000
 800ab88:	004afb20 	.word	0x004afb20
 800ab8c:	007ffff0 	.word	0x007ffff0
 800ab90:	3717f7d1 	.word	0x3717f7d1
 800ab94:	3f317180 	.word	0x3f317180
 800ab98:	3eaaaaab 	.word	0x3eaaaaab
 800ab9c:	3e1cd04f 	.word	0x3e1cd04f
 800aba0:	3e178897 	.word	0x3e178897
 800aba4:	ffcf5c30 	.word	0xffcf5c30
 800aba8:	3e638e29 	.word	0x3e638e29
 800abac:	3ecccccd 	.word	0x3ecccccd
 800abb0:	3e3a3325 	.word	0x3e3a3325
 800abb4:	3e924925 	.word	0x3e924925
 800abb8:	3f2aaaab 	.word	0x3f2aaaab

0800abbc <atanf>:
 800abbc:	b538      	push	{r3, r4, r5, lr}
 800abbe:	ee10 5a10 	vmov	r5, s0
 800abc2:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800abc6:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800abca:	eef0 7a40 	vmov.f32	s15, s0
 800abce:	d310      	bcc.n	800abf2 <atanf+0x36>
 800abd0:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800abd4:	d904      	bls.n	800abe0 <atanf+0x24>
 800abd6:	ee70 7a00 	vadd.f32	s15, s0, s0
 800abda:	eeb0 0a67 	vmov.f32	s0, s15
 800abde:	bd38      	pop	{r3, r4, r5, pc}
 800abe0:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800ad18 <atanf+0x15c>
 800abe4:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800ad1c <atanf+0x160>
 800abe8:	2d00      	cmp	r5, #0
 800abea:	bfc8      	it	gt
 800abec:	eef0 7a47 	vmovgt.f32	s15, s14
 800abf0:	e7f3      	b.n	800abda <atanf+0x1e>
 800abf2:	4b4b      	ldr	r3, [pc, #300]	@ (800ad20 <atanf+0x164>)
 800abf4:	429c      	cmp	r4, r3
 800abf6:	d810      	bhi.n	800ac1a <atanf+0x5e>
 800abf8:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800abfc:	d20a      	bcs.n	800ac14 <atanf+0x58>
 800abfe:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800ad24 <atanf+0x168>
 800ac02:	ee30 7a07 	vadd.f32	s14, s0, s14
 800ac06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac0a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800ac0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac12:	dce2      	bgt.n	800abda <atanf+0x1e>
 800ac14:	f04f 33ff 	mov.w	r3, #4294967295
 800ac18:	e013      	b.n	800ac42 <atanf+0x86>
 800ac1a:	f000 f8a3 	bl	800ad64 <fabsf>
 800ac1e:	4b42      	ldr	r3, [pc, #264]	@ (800ad28 <atanf+0x16c>)
 800ac20:	429c      	cmp	r4, r3
 800ac22:	d84f      	bhi.n	800acc4 <atanf+0x108>
 800ac24:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800ac28:	429c      	cmp	r4, r3
 800ac2a:	d841      	bhi.n	800acb0 <atanf+0xf4>
 800ac2c:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800ac30:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800ac34:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ac38:	2300      	movs	r3, #0
 800ac3a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ac3e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ac42:	1c5a      	adds	r2, r3, #1
 800ac44:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800ac48:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800ad2c <atanf+0x170>
 800ac4c:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800ad30 <atanf+0x174>
 800ac50:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800ad34 <atanf+0x178>
 800ac54:	ee66 6a06 	vmul.f32	s13, s12, s12
 800ac58:	eee6 5a87 	vfma.f32	s11, s13, s14
 800ac5c:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800ad38 <atanf+0x17c>
 800ac60:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ac64:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800ad3c <atanf+0x180>
 800ac68:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ac6c:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800ad40 <atanf+0x184>
 800ac70:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ac74:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800ad44 <atanf+0x188>
 800ac78:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ac7c:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800ad48 <atanf+0x18c>
 800ac80:	eea6 5a87 	vfma.f32	s10, s13, s14
 800ac84:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800ad4c <atanf+0x190>
 800ac88:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ac8c:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800ad50 <atanf+0x194>
 800ac90:	eea7 5a26 	vfma.f32	s10, s14, s13
 800ac94:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800ad54 <atanf+0x198>
 800ac98:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ac9c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800aca0:	eea5 7a86 	vfma.f32	s14, s11, s12
 800aca4:	ee27 7a87 	vmul.f32	s14, s15, s14
 800aca8:	d121      	bne.n	800acee <atanf+0x132>
 800acaa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800acae:	e794      	b.n	800abda <atanf+0x1e>
 800acb0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800acb4:	ee30 7a67 	vsub.f32	s14, s0, s15
 800acb8:	ee30 0a27 	vadd.f32	s0, s0, s15
 800acbc:	2301      	movs	r3, #1
 800acbe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800acc2:	e7be      	b.n	800ac42 <atanf+0x86>
 800acc4:	4b24      	ldr	r3, [pc, #144]	@ (800ad58 <atanf+0x19c>)
 800acc6:	429c      	cmp	r4, r3
 800acc8:	d80b      	bhi.n	800ace2 <atanf+0x126>
 800acca:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800acce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800acd2:	eea0 7a27 	vfma.f32	s14, s0, s15
 800acd6:	2302      	movs	r3, #2
 800acd8:	ee70 6a67 	vsub.f32	s13, s0, s15
 800acdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ace0:	e7af      	b.n	800ac42 <atanf+0x86>
 800ace2:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800ace6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800acea:	2303      	movs	r3, #3
 800acec:	e7a9      	b.n	800ac42 <atanf+0x86>
 800acee:	4a1b      	ldr	r2, [pc, #108]	@ (800ad5c <atanf+0x1a0>)
 800acf0:	491b      	ldr	r1, [pc, #108]	@ (800ad60 <atanf+0x1a4>)
 800acf2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800acf6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800acfa:	edd3 6a00 	vldr	s13, [r3]
 800acfe:	ee37 7a66 	vsub.f32	s14, s14, s13
 800ad02:	2d00      	cmp	r5, #0
 800ad04:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ad08:	edd2 7a00 	vldr	s15, [r2]
 800ad0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ad10:	bfb8      	it	lt
 800ad12:	eef1 7a67 	vneglt.f32	s15, s15
 800ad16:	e760      	b.n	800abda <atanf+0x1e>
 800ad18:	bfc90fdb 	.word	0xbfc90fdb
 800ad1c:	3fc90fdb 	.word	0x3fc90fdb
 800ad20:	3edfffff 	.word	0x3edfffff
 800ad24:	7149f2ca 	.word	0x7149f2ca
 800ad28:	3f97ffff 	.word	0x3f97ffff
 800ad2c:	3c8569d7 	.word	0x3c8569d7
 800ad30:	3d4bda59 	.word	0x3d4bda59
 800ad34:	bd6ef16b 	.word	0xbd6ef16b
 800ad38:	3d886b35 	.word	0x3d886b35
 800ad3c:	3dba2e6e 	.word	0x3dba2e6e
 800ad40:	3e124925 	.word	0x3e124925
 800ad44:	3eaaaaab 	.word	0x3eaaaaab
 800ad48:	bd15a221 	.word	0xbd15a221
 800ad4c:	bd9d8795 	.word	0xbd9d8795
 800ad50:	bde38e38 	.word	0xbde38e38
 800ad54:	be4ccccd 	.word	0xbe4ccccd
 800ad58:	401bffff 	.word	0x401bffff
 800ad5c:	0800b448 	.word	0x0800b448
 800ad60:	0800b438 	.word	0x0800b438

0800ad64 <fabsf>:
 800ad64:	ee10 3a10 	vmov	r3, s0
 800ad68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ad6c:	ee00 3a10 	vmov	s0, r3
 800ad70:	4770      	bx	lr
	...

0800ad74 <_init>:
 800ad74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad76:	bf00      	nop
 800ad78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad7a:	bc08      	pop	{r3}
 800ad7c:	469e      	mov	lr, r3
 800ad7e:	4770      	bx	lr

0800ad80 <_fini>:
 800ad80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad82:	bf00      	nop
 800ad84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad86:	bc08      	pop	{r3}
 800ad88:	469e      	mov	lr, r3
 800ad8a:	4770      	bx	lr
