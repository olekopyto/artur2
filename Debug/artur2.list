
artur2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010f38  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013988  08011108  08011108  00012108  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024a90  08024a90  000262d4  2**0
                  CONTENTS
  4 .ARM          00000008  08024a90  08024a90  00025a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08024a98  08024a98  000262d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08024a98  08024a98  00025a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08024a9c  08024a9c  00025a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d4  20000000  08024aa0  00026000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000026d8  200002d4  08024d74  000262d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200029ac  08024d74  000269ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000262d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e431  00000000  00000000  00026304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047ec  00000000  00000000  00044735  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019f0  00000000  00000000  00048f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000135e  00000000  00000000  0004a918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000280de  00000000  00000000  0004bc76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002121a  00000000  00000000  00073d54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8474  00000000  00000000  00094f6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b3  00000000  00000000  0017d3e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008278  00000000  00000000  0017d498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  00185710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00002a79  00000000  00000000  00185769  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000060  00000000  00000000  001881e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002d4 	.word	0x200002d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080110f0 	.word	0x080110f0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002d8 	.word	0x200002d8
 800020c:	080110f0 	.word	0x080110f0

08000210 <arm_bitreversal_32>:
 8000210:	1c4b      	adds	r3, r1, #1
 8000212:	2b01      	cmp	r3, #1
 8000214:	bf98      	it	ls
 8000216:	4770      	bxls	lr
 8000218:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800021c:	1c91      	adds	r1, r2, #2
 800021e:	089b      	lsrs	r3, r3, #2

08000220 <arm_bitreversal_32_0>:
 8000220:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000224:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000228:	880a      	ldrh	r2, [r1, #0]
 800022a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800022e:	4480      	add	r8, r0
 8000230:	4481      	add	r9, r0
 8000232:	4402      	add	r2, r0
 8000234:	4484      	add	ip, r0
 8000236:	f8d9 7000 	ldr.w	r7, [r9]
 800023a:	f8d8 6000 	ldr.w	r6, [r8]
 800023e:	6815      	ldr	r5, [r2, #0]
 8000240:	f8dc 4000 	ldr.w	r4, [ip]
 8000244:	f8c9 6000 	str.w	r6, [r9]
 8000248:	f8c8 7000 	str.w	r7, [r8]
 800024c:	f8cc 5000 	str.w	r5, [ip]
 8000250:	6014      	str	r4, [r2, #0]
 8000252:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000256:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800025a:	6855      	ldr	r5, [r2, #4]
 800025c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000260:	f8c9 6004 	str.w	r6, [r9, #4]
 8000264:	f8c8 7004 	str.w	r7, [r8, #4]
 8000268:	f8cc 5004 	str.w	r5, [ip, #4]
 800026c:	6054      	str	r4, [r2, #4]
 800026e:	3108      	adds	r1, #8
 8000270:	3b01      	subs	r3, #1
 8000272:	d1d5      	bne.n	8000220 <arm_bitreversal_32_0>
 8000274:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000278:	4770      	bx	lr

0800027a <arm_bitreversal_16>:
 800027a:	1c4b      	adds	r3, r1, #1
 800027c:	2b01      	cmp	r3, #1
 800027e:	bf98      	it	ls
 8000280:	4770      	bxls	lr
 8000282:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000286:	1c91      	adds	r1, r2, #2
 8000288:	089b      	lsrs	r3, r3, #2

0800028a <arm_bitreversal_16_0>:
 800028a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800028e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000292:	880a      	ldrh	r2, [r1, #0]
 8000294:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000298:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800029c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002a0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002a4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002a8:	f8d9 7000 	ldr.w	r7, [r9]
 80002ac:	f8d8 6000 	ldr.w	r6, [r8]
 80002b0:	6815      	ldr	r5, [r2, #0]
 80002b2:	f8dc 4000 	ldr.w	r4, [ip]
 80002b6:	f8c9 6000 	str.w	r6, [r9]
 80002ba:	f8c8 7000 	str.w	r7, [r8]
 80002be:	f8cc 5000 	str.w	r5, [ip]
 80002c2:	6014      	str	r4, [r2, #0]
 80002c4:	3108      	adds	r1, #8
 80002c6:	3b01      	subs	r3, #1
 80002c8:	d1df      	bne.n	800028a <arm_bitreversal_16_0>
 80002ca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ce:	4770      	bx	lr

080002d0 <memchr>:
 80002d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002d4:	2a10      	cmp	r2, #16
 80002d6:	db2b      	blt.n	8000330 <memchr+0x60>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	d008      	beq.n	80002f0 <memchr+0x20>
 80002de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e2:	3a01      	subs	r2, #1
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d02d      	beq.n	8000344 <memchr+0x74>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	b342      	cbz	r2, 8000340 <memchr+0x70>
 80002ee:	d1f6      	bne.n	80002de <memchr+0xe>
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
 80002f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002fa:	f022 0407 	bic.w	r4, r2, #7
 80002fe:	f07f 0700 	mvns.w	r7, #0
 8000302:	2300      	movs	r3, #0
 8000304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000308:	3c08      	subs	r4, #8
 800030a:	ea85 0501 	eor.w	r5, r5, r1
 800030e:	ea86 0601 	eor.w	r6, r6, r1
 8000312:	fa85 f547 	uadd8	r5, r5, r7
 8000316:	faa3 f587 	sel	r5, r3, r7
 800031a:	fa86 f647 	uadd8	r6, r6, r7
 800031e:	faa5 f687 	sel	r6, r5, r7
 8000322:	b98e      	cbnz	r6, 8000348 <memchr+0x78>
 8000324:	d1ee      	bne.n	8000304 <memchr+0x34>
 8000326:	bcf0      	pop	{r4, r5, r6, r7}
 8000328:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800032c:	f002 0207 	and.w	r2, r2, #7
 8000330:	b132      	cbz	r2, 8000340 <memchr+0x70>
 8000332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000336:	3a01      	subs	r2, #1
 8000338:	ea83 0301 	eor.w	r3, r3, r1
 800033c:	b113      	cbz	r3, 8000344 <memchr+0x74>
 800033e:	d1f8      	bne.n	8000332 <memchr+0x62>
 8000340:	2000      	movs	r0, #0
 8000342:	4770      	bx	lr
 8000344:	3801      	subs	r0, #1
 8000346:	4770      	bx	lr
 8000348:	2d00      	cmp	r5, #0
 800034a:	bf06      	itte	eq
 800034c:	4635      	moveq	r5, r6
 800034e:	3803      	subeq	r0, #3
 8000350:	3807      	subne	r0, #7
 8000352:	f015 0f01 	tst.w	r5, #1
 8000356:	d107      	bne.n	8000368 <memchr+0x98>
 8000358:	3001      	adds	r0, #1
 800035a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800035e:	bf02      	ittt	eq
 8000360:	3001      	addeq	r0, #1
 8000362:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000366:	3001      	addeq	r0, #1
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	3801      	subs	r0, #1
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <strlen>:
 8000370:	4603      	mov	r3, r0
 8000372:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000376:	2a00      	cmp	r2, #0
 8000378:	d1fb      	bne.n	8000372 <strlen+0x2>
 800037a:	1a18      	subs	r0, r3, r0
 800037c:	3801      	subs	r0, #1
 800037e:	4770      	bx	lr

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	@ 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <__aeabi_dmul>:
 80006f8:	b570      	push	{r4, r5, r6, lr}
 80006fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000702:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000706:	bf1d      	ittte	ne
 8000708:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800070c:	ea94 0f0c 	teqne	r4, ip
 8000710:	ea95 0f0c 	teqne	r5, ip
 8000714:	f000 f8de 	bleq	80008d4 <__aeabi_dmul+0x1dc>
 8000718:	442c      	add	r4, r5
 800071a:	ea81 0603 	eor.w	r6, r1, r3
 800071e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000722:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000726:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800072a:	bf18      	it	ne
 800072c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000730:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000734:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000738:	d038      	beq.n	80007ac <__aeabi_dmul+0xb4>
 800073a:	fba0 ce02 	umull	ip, lr, r0, r2
 800073e:	f04f 0500 	mov.w	r5, #0
 8000742:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000746:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800074a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800074e:	f04f 0600 	mov.w	r6, #0
 8000752:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000756:	f09c 0f00 	teq	ip, #0
 800075a:	bf18      	it	ne
 800075c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000760:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000764:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000768:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800076c:	d204      	bcs.n	8000778 <__aeabi_dmul+0x80>
 800076e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000772:	416d      	adcs	r5, r5
 8000774:	eb46 0606 	adc.w	r6, r6, r6
 8000778:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800077c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000780:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000784:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000788:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800078c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000790:	bf88      	it	hi
 8000792:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000796:	d81e      	bhi.n	80007d6 <__aeabi_dmul+0xde>
 8000798:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800079c:	bf08      	it	eq
 800079e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007a2:	f150 0000 	adcs.w	r0, r0, #0
 80007a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80007b0:	ea46 0101 	orr.w	r1, r6, r1
 80007b4:	ea40 0002 	orr.w	r0, r0, r2
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007c0:	bfc2      	ittt	gt
 80007c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	popgt	{r4, r5, r6, pc}
 80007cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007d0:	f04f 0e00 	mov.w	lr, #0
 80007d4:	3c01      	subs	r4, #1
 80007d6:	f300 80ab 	bgt.w	8000930 <__aeabi_dmul+0x238>
 80007da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80007de:	bfde      	ittt	le
 80007e0:	2000      	movle	r0, #0
 80007e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80007e6:	bd70      	pople	{r4, r5, r6, pc}
 80007e8:	f1c4 0400 	rsb	r4, r4, #0
 80007ec:	3c20      	subs	r4, #32
 80007ee:	da35      	bge.n	800085c <__aeabi_dmul+0x164>
 80007f0:	340c      	adds	r4, #12
 80007f2:	dc1b      	bgt.n	800082c <__aeabi_dmul+0x134>
 80007f4:	f104 0414 	add.w	r4, r4, #20
 80007f8:	f1c4 0520 	rsb	r5, r4, #32
 80007fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000800:	fa20 f004 	lsr.w	r0, r0, r4
 8000804:	fa01 f205 	lsl.w	r2, r1, r5
 8000808:	ea40 0002 	orr.w	r0, r0, r2
 800080c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000810:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000814:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000818:	fa21 f604 	lsr.w	r6, r1, r4
 800081c:	eb42 0106 	adc.w	r1, r2, r6
 8000820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000824:	bf08      	it	eq
 8000826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800082a:	bd70      	pop	{r4, r5, r6, pc}
 800082c:	f1c4 040c 	rsb	r4, r4, #12
 8000830:	f1c4 0520 	rsb	r5, r4, #32
 8000834:	fa00 f304 	lsl.w	r3, r0, r4
 8000838:	fa20 f005 	lsr.w	r0, r0, r5
 800083c:	fa01 f204 	lsl.w	r2, r1, r4
 8000840:	ea40 0002 	orr.w	r0, r0, r2
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800084c:	f141 0100 	adc.w	r1, r1, #0
 8000850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000854:	bf08      	it	eq
 8000856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f1c4 0520 	rsb	r5, r4, #32
 8000860:	fa00 f205 	lsl.w	r2, r0, r5
 8000864:	ea4e 0e02 	orr.w	lr, lr, r2
 8000868:	fa20 f304 	lsr.w	r3, r0, r4
 800086c:	fa01 f205 	lsl.w	r2, r1, r5
 8000870:	ea43 0302 	orr.w	r3, r3, r2
 8000874:	fa21 f004 	lsr.w	r0, r1, r4
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	fa21 f204 	lsr.w	r2, r1, r4
 8000880:	ea20 0002 	bic.w	r0, r0, r2
 8000884:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000888:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800088c:	bf08      	it	eq
 800088e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000892:	bd70      	pop	{r4, r5, r6, pc}
 8000894:	f094 0f00 	teq	r4, #0
 8000898:	d10f      	bne.n	80008ba <__aeabi_dmul+0x1c2>
 800089a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800089e:	0040      	lsls	r0, r0, #1
 80008a0:	eb41 0101 	adc.w	r1, r1, r1
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	bf08      	it	eq
 80008aa:	3c01      	subeq	r4, #1
 80008ac:	d0f7      	beq.n	800089e <__aeabi_dmul+0x1a6>
 80008ae:	ea41 0106 	orr.w	r1, r1, r6
 80008b2:	f095 0f00 	teq	r5, #0
 80008b6:	bf18      	it	ne
 80008b8:	4770      	bxne	lr
 80008ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80008be:	0052      	lsls	r2, r2, #1
 80008c0:	eb43 0303 	adc.w	r3, r3, r3
 80008c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3d01      	subeq	r5, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1c6>
 80008ce:	ea43 0306 	orr.w	r3, r3, r6
 80008d2:	4770      	bx	lr
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008dc:	bf18      	it	ne
 80008de:	ea95 0f0c 	teqne	r5, ip
 80008e2:	d00c      	beq.n	80008fe <__aeabi_dmul+0x206>
 80008e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e8:	bf18      	it	ne
 80008ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ee:	d1d1      	bne.n	8000894 <__aeabi_dmul+0x19c>
 80008f0:	ea81 0103 	eor.w	r1, r1, r3
 80008f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008f8:	f04f 0000 	mov.w	r0, #0
 80008fc:	bd70      	pop	{r4, r5, r6, pc}
 80008fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000902:	bf06      	itte	eq
 8000904:	4610      	moveq	r0, r2
 8000906:	4619      	moveq	r1, r3
 8000908:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090c:	d019      	beq.n	8000942 <__aeabi_dmul+0x24a>
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	d102      	bne.n	800091a <__aeabi_dmul+0x222>
 8000914:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000918:	d113      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	d105      	bne.n	800092c <__aeabi_dmul+0x234>
 8000920:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000924:	bf1c      	itt	ne
 8000926:	4610      	movne	r0, r2
 8000928:	4619      	movne	r1, r3
 800092a:	d10a      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800092c:	ea81 0103 	eor.w	r1, r1, r3
 8000930:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000934:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000938:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	bd70      	pop	{r4, r5, r6, pc}
 8000942:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000946:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800094a:	bd70      	pop	{r4, r5, r6, pc}

0800094c <__aeabi_ddiv>:
 800094c:	b570      	push	{r4, r5, r6, lr}
 800094e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000952:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000956:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800095a:	bf1d      	ittte	ne
 800095c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000960:	ea94 0f0c 	teqne	r4, ip
 8000964:	ea95 0f0c 	teqne	r5, ip
 8000968:	f000 f8a7 	bleq	8000aba <__aeabi_ddiv+0x16e>
 800096c:	eba4 0405 	sub.w	r4, r4, r5
 8000970:	ea81 0e03 	eor.w	lr, r1, r3
 8000974:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000978:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800097c:	f000 8088 	beq.w	8000a90 <__aeabi_ddiv+0x144>
 8000980:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000984:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000988:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800098c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000990:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000994:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000998:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800099c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80009a4:	429d      	cmp	r5, r3
 80009a6:	bf08      	it	eq
 80009a8:	4296      	cmpeq	r6, r2
 80009aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80009ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80009b2:	d202      	bcs.n	80009ba <__aeabi_ddiv+0x6e>
 80009b4:	085b      	lsrs	r3, r3, #1
 80009b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ba:	1ab6      	subs	r6, r6, r2
 80009bc:	eb65 0503 	sbc.w	r5, r5, r3
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80009ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80009ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80009d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d6:	bf22      	ittt	cs
 80009d8:	1ab6      	subcs	r6, r6, r2
 80009da:	4675      	movcs	r5, lr
 80009dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ee:	bf22      	ittt	cs
 80009f0:	1ab6      	subcs	r6, r6, r2
 80009f2:	4675      	movcs	r5, lr
 80009f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a06:	bf22      	ittt	cs
 8000a08:	1ab6      	subcs	r6, r6, r2
 8000a0a:	4675      	movcs	r5, lr
 8000a0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a10:	085b      	lsrs	r3, r3, #1
 8000a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a1e:	bf22      	ittt	cs
 8000a20:	1ab6      	subcs	r6, r6, r2
 8000a22:	4675      	movcs	r5, lr
 8000a24:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a28:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a2c:	d018      	beq.n	8000a60 <__aeabi_ddiv+0x114>
 8000a2e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a32:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a36:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a3a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a3e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a42:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a46:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a4a:	d1c0      	bne.n	80009ce <__aeabi_ddiv+0x82>
 8000a4c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a50:	d10b      	bne.n	8000a6a <__aeabi_ddiv+0x11e>
 8000a52:	ea41 0100 	orr.w	r1, r1, r0
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a5e:	e7b6      	b.n	80009ce <__aeabi_ddiv+0x82>
 8000a60:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a64:	bf04      	itt	eq
 8000a66:	4301      	orreq	r1, r0
 8000a68:	2000      	moveq	r0, #0
 8000a6a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a6e:	bf88      	it	hi
 8000a70:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a74:	f63f aeaf 	bhi.w	80007d6 <__aeabi_dmul+0xde>
 8000a78:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a7c:	bf04      	itt	eq
 8000a7e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a86:	f150 0000 	adcs.w	r0, r0, #0
 8000a8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a8e:	bd70      	pop	{r4, r5, r6, pc}
 8000a90:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a94:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a98:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a9c:	bfc2      	ittt	gt
 8000a9e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000aa2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000aa6:	bd70      	popgt	{r4, r5, r6, pc}
 8000aa8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aac:	f04f 0e00 	mov.w	lr, #0
 8000ab0:	3c01      	subs	r4, #1
 8000ab2:	e690      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000ab4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ab8:	e68d      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000aba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000abe:	ea94 0f0c 	teq	r4, ip
 8000ac2:	bf08      	it	eq
 8000ac4:	ea95 0f0c 	teqeq	r5, ip
 8000ac8:	f43f af3b 	beq.w	8000942 <__aeabi_dmul+0x24a>
 8000acc:	ea94 0f0c 	teq	r4, ip
 8000ad0:	d10a      	bne.n	8000ae8 <__aeabi_ddiv+0x19c>
 8000ad2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ad6:	f47f af34 	bne.w	8000942 <__aeabi_dmul+0x24a>
 8000ada:	ea95 0f0c 	teq	r5, ip
 8000ade:	f47f af25 	bne.w	800092c <__aeabi_dmul+0x234>
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	e72c      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000ae8:	ea95 0f0c 	teq	r5, ip
 8000aec:	d106      	bne.n	8000afc <__aeabi_ddiv+0x1b0>
 8000aee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000af2:	f43f aefd 	beq.w	80008f0 <__aeabi_dmul+0x1f8>
 8000af6:	4610      	mov	r0, r2
 8000af8:	4619      	mov	r1, r3
 8000afa:	e722      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000afc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b06:	f47f aec5 	bne.w	8000894 <__aeabi_dmul+0x19c>
 8000b0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b0e:	f47f af0d 	bne.w	800092c <__aeabi_dmul+0x234>
 8000b12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b16:	f47f aeeb 	bne.w	80008f0 <__aeabi_dmul+0x1f8>
 8000b1a:	e712      	b.n	8000942 <__aeabi_dmul+0x24a>

08000b1c <__gedf2>:
 8000b1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b20:	e006      	b.n	8000b30 <__cmpdf2+0x4>
 8000b22:	bf00      	nop

08000b24 <__ledf2>:
 8000b24:	f04f 0c01 	mov.w	ip, #1
 8000b28:	e002      	b.n	8000b30 <__cmpdf2+0x4>
 8000b2a:	bf00      	nop

08000b2c <__cmpdf2>:
 8000b2c:	f04f 0c01 	mov.w	ip, #1
 8000b30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	bf18      	it	ne
 8000b42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b46:	d01b      	beq.n	8000b80 <__cmpdf2+0x54>
 8000b48:	b001      	add	sp, #4
 8000b4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b4e:	bf0c      	ite	eq
 8000b50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b54:	ea91 0f03 	teqne	r1, r3
 8000b58:	bf02      	ittt	eq
 8000b5a:	ea90 0f02 	teqeq	r0, r2
 8000b5e:	2000      	moveq	r0, #0
 8000b60:	4770      	bxeq	lr
 8000b62:	f110 0f00 	cmn.w	r0, #0
 8000b66:	ea91 0f03 	teq	r1, r3
 8000b6a:	bf58      	it	pl
 8000b6c:	4299      	cmppl	r1, r3
 8000b6e:	bf08      	it	eq
 8000b70:	4290      	cmpeq	r0, r2
 8000b72:	bf2c      	ite	cs
 8000b74:	17d8      	asrcs	r0, r3, #31
 8000b76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b7a:	f040 0001 	orr.w	r0, r0, #1
 8000b7e:	4770      	bx	lr
 8000b80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d102      	bne.n	8000b90 <__cmpdf2+0x64>
 8000b8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8e:	d107      	bne.n	8000ba0 <__cmpdf2+0x74>
 8000b90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d1d6      	bne.n	8000b48 <__cmpdf2+0x1c>
 8000b9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9e:	d0d3      	beq.n	8000b48 <__cmpdf2+0x1c>
 8000ba0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_cdrcmple>:
 8000ba8:	4684      	mov	ip, r0
 8000baa:	4610      	mov	r0, r2
 8000bac:	4662      	mov	r2, ip
 8000bae:	468c      	mov	ip, r1
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4663      	mov	r3, ip
 8000bb4:	e000      	b.n	8000bb8 <__aeabi_cdcmpeq>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_cdcmpeq>:
 8000bb8:	b501      	push	{r0, lr}
 8000bba:	f7ff ffb7 	bl	8000b2c <__cmpdf2>
 8000bbe:	2800      	cmp	r0, #0
 8000bc0:	bf48      	it	mi
 8000bc2:	f110 0f00 	cmnmi.w	r0, #0
 8000bc6:	bd01      	pop	{r0, pc}

08000bc8 <__aeabi_dcmpeq>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff fff4 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bd0:	bf0c      	ite	eq
 8000bd2:	2001      	moveq	r0, #1
 8000bd4:	2000      	movne	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_dcmplt>:
 8000bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be0:	f7ff ffea 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000be4:	bf34      	ite	cc
 8000be6:	2001      	movcc	r0, #1
 8000be8:	2000      	movcs	r0, #0
 8000bea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bee:	bf00      	nop

08000bf0 <__aeabi_dcmple>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff ffe0 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bf8:	bf94      	ite	ls
 8000bfa:	2001      	movls	r0, #1
 8000bfc:	2000      	movhi	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_dcmpge>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffce 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c0c:	bf94      	ite	ls
 8000c0e:	2001      	movls	r0, #1
 8000c10:	2000      	movhi	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_dcmpgt>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffc4 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c20:	bf34      	ite	cc
 8000c22:	2001      	movcc	r0, #1
 8000c24:	2000      	movcs	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_dcmpun>:
 8000c2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c34:	d102      	bne.n	8000c3c <__aeabi_dcmpun+0x10>
 8000c36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c3a:	d10a      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c44:	d102      	bne.n	8000c4c <__aeabi_dcmpun+0x20>
 8000c46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c4c:	f04f 0000 	mov.w	r0, #0
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0001 	mov.w	r0, #1
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2iz>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c60:	d215      	bcs.n	8000c8e <__aeabi_d2iz+0x36>
 8000c62:	d511      	bpl.n	8000c88 <__aeabi_d2iz+0x30>
 8000c64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c6c:	d912      	bls.n	8000c94 <__aeabi_d2iz+0x3c>
 8000c6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c82:	bf18      	it	ne
 8000c84:	4240      	negne	r0, r0
 8000c86:	4770      	bx	lr
 8000c88:	f04f 0000 	mov.w	r0, #0
 8000c8c:	4770      	bx	lr
 8000c8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c92:	d105      	bne.n	8000ca0 <__aeabi_d2iz+0x48>
 8000c94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c98:	bf08      	it	eq
 8000c9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c9e:	4770      	bx	lr
 8000ca0:	f04f 0000 	mov.w	r0, #0
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2uiz>:
 8000ca8:	004a      	lsls	r2, r1, #1
 8000caa:	d211      	bcs.n	8000cd0 <__aeabi_d2uiz+0x28>
 8000cac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000cb0:	d211      	bcs.n	8000cd6 <__aeabi_d2uiz+0x2e>
 8000cb2:	d50d      	bpl.n	8000cd0 <__aeabi_d2uiz+0x28>
 8000cb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000cb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000cbc:	d40e      	bmi.n	8000cdc <__aeabi_d2uiz+0x34>
 8000cbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000cc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cca:	fa23 f002 	lsr.w	r0, r3, r2
 8000cce:	4770      	bx	lr
 8000cd0:	f04f 0000 	mov.w	r0, #0
 8000cd4:	4770      	bx	lr
 8000cd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cda:	d102      	bne.n	8000ce2 <__aeabi_d2uiz+0x3a>
 8000cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce0:	4770      	bx	lr
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2f>:
 8000ce8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000cec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000cf0:	bf24      	itt	cs
 8000cf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000cf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000cfa:	d90d      	bls.n	8000d18 <__aeabi_d2f+0x30>
 8000cfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000d04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000d08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000d0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000d10:	bf08      	it	eq
 8000d12:	f020 0001 	biceq.w	r0, r0, #1
 8000d16:	4770      	bx	lr
 8000d18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000d1c:	d121      	bne.n	8000d62 <__aeabi_d2f+0x7a>
 8000d1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000d22:	bfbc      	itt	lt
 8000d24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000d28:	4770      	bxlt	lr
 8000d2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000d2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000d32:	f1c2 0218 	rsb	r2, r2, #24
 8000d36:	f1c2 0c20 	rsb	ip, r2, #32
 8000d3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000d3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000d42:	bf18      	it	ne
 8000d44:	f040 0001 	orrne.w	r0, r0, #1
 8000d48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d54:	ea40 000c 	orr.w	r0, r0, ip
 8000d58:	fa23 f302 	lsr.w	r3, r3, r2
 8000d5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d60:	e7cc      	b.n	8000cfc <__aeabi_d2f+0x14>
 8000d62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d66:	d107      	bne.n	8000d78 <__aeabi_d2f+0x90>
 8000d68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d6c:	bf1e      	ittt	ne
 8000d6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000d72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000d76:	4770      	bxne	lr
 8000d78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000d7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop

08000d88 <__aeabi_uldivmod>:
 8000d88:	b953      	cbnz	r3, 8000da0 <__aeabi_uldivmod+0x18>
 8000d8a:	b94a      	cbnz	r2, 8000da0 <__aeabi_uldivmod+0x18>
 8000d8c:	2900      	cmp	r1, #0
 8000d8e:	bf08      	it	eq
 8000d90:	2800      	cmpeq	r0, #0
 8000d92:	bf1c      	itt	ne
 8000d94:	f04f 31ff 	movne.w	r1, #4294967295
 8000d98:	f04f 30ff 	movne.w	r0, #4294967295
 8000d9c:	f000 b9a0 	b.w	80010e0 <__aeabi_idiv0>
 8000da0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000da4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000da8:	f000 f83c 	bl	8000e24 <__udivmoddi4>
 8000dac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000db0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000db4:	b004      	add	sp, #16
 8000db6:	4770      	bx	lr

08000db8 <__aeabi_d2lz>:
 8000db8:	b538      	push	{r3, r4, r5, lr}
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	4604      	mov	r4, r0
 8000dc0:	460d      	mov	r5, r1
 8000dc2:	f7ff ff0b 	bl	8000bdc <__aeabi_dcmplt>
 8000dc6:	b928      	cbnz	r0, 8000dd4 <__aeabi_d2lz+0x1c>
 8000dc8:	4620      	mov	r0, r4
 8000dca:	4629      	mov	r1, r5
 8000dcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000dd0:	f000 b80a 	b.w	8000de8 <__aeabi_d2ulz>
 8000dd4:	4620      	mov	r0, r4
 8000dd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000dda:	f000 f805 	bl	8000de8 <__aeabi_d2ulz>
 8000dde:	4240      	negs	r0, r0
 8000de0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000de4:	bd38      	pop	{r3, r4, r5, pc}
 8000de6:	bf00      	nop

08000de8 <__aeabi_d2ulz>:
 8000de8:	b5d0      	push	{r4, r6, r7, lr}
 8000dea:	4b0c      	ldr	r3, [pc, #48]	@ (8000e1c <__aeabi_d2ulz+0x34>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	4606      	mov	r6, r0
 8000df0:	460f      	mov	r7, r1
 8000df2:	f7ff fc81 	bl	80006f8 <__aeabi_dmul>
 8000df6:	f7ff ff57 	bl	8000ca8 <__aeabi_d2uiz>
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	f7ff fc02 	bl	8000604 <__aeabi_ui2d>
 8000e00:	4b07      	ldr	r3, [pc, #28]	@ (8000e20 <__aeabi_d2ulz+0x38>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	f7ff fc78 	bl	80006f8 <__aeabi_dmul>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	4639      	mov	r1, r7
 8000e10:	f7ff faba 	bl	8000388 <__aeabi_dsub>
 8000e14:	f7ff ff48 	bl	8000ca8 <__aeabi_d2uiz>
 8000e18:	4621      	mov	r1, r4
 8000e1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000e1c:	3df00000 	.word	0x3df00000
 8000e20:	41f00000 	.word	0x41f00000

08000e24 <__udivmoddi4>:
 8000e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e28:	9d08      	ldr	r5, [sp, #32]
 8000e2a:	460c      	mov	r4, r1
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d14e      	bne.n	8000ece <__udivmoddi4+0xaa>
 8000e30:	4694      	mov	ip, r2
 8000e32:	458c      	cmp	ip, r1
 8000e34:	4686      	mov	lr, r0
 8000e36:	fab2 f282 	clz	r2, r2
 8000e3a:	d962      	bls.n	8000f02 <__udivmoddi4+0xde>
 8000e3c:	b14a      	cbz	r2, 8000e52 <__udivmoddi4+0x2e>
 8000e3e:	f1c2 0320 	rsb	r3, r2, #32
 8000e42:	4091      	lsls	r1, r2
 8000e44:	fa20 f303 	lsr.w	r3, r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	4319      	orrs	r1, r3
 8000e4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e56:	fa1f f68c 	uxth.w	r6, ip
 8000e5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e62:	fb07 1114 	mls	r1, r7, r4, r1
 8000e66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e6a:	fb04 f106 	mul.w	r1, r4, r6
 8000e6e:	4299      	cmp	r1, r3
 8000e70:	d90a      	bls.n	8000e88 <__udivmoddi4+0x64>
 8000e72:	eb1c 0303 	adds.w	r3, ip, r3
 8000e76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e7a:	f080 8112 	bcs.w	80010a2 <__udivmoddi4+0x27e>
 8000e7e:	4299      	cmp	r1, r3
 8000e80:	f240 810f 	bls.w	80010a2 <__udivmoddi4+0x27e>
 8000e84:	3c02      	subs	r4, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1a59      	subs	r1, r3, r1
 8000e8a:	fa1f f38e 	uxth.w	r3, lr
 8000e8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e92:	fb07 1110 	mls	r1, r7, r0, r1
 8000e96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e9a:	fb00 f606 	mul.w	r6, r0, r6
 8000e9e:	429e      	cmp	r6, r3
 8000ea0:	d90a      	bls.n	8000eb8 <__udivmoddi4+0x94>
 8000ea2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ea6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eaa:	f080 80fc 	bcs.w	80010a6 <__udivmoddi4+0x282>
 8000eae:	429e      	cmp	r6, r3
 8000eb0:	f240 80f9 	bls.w	80010a6 <__udivmoddi4+0x282>
 8000eb4:	4463      	add	r3, ip
 8000eb6:	3802      	subs	r0, #2
 8000eb8:	1b9b      	subs	r3, r3, r6
 8000eba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	b11d      	cbz	r5, 8000eca <__udivmoddi4+0xa6>
 8000ec2:	40d3      	lsrs	r3, r2
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	e9c5 3200 	strd	r3, r2, [r5]
 8000eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ece:	428b      	cmp	r3, r1
 8000ed0:	d905      	bls.n	8000ede <__udivmoddi4+0xba>
 8000ed2:	b10d      	cbz	r5, 8000ed8 <__udivmoddi4+0xb4>
 8000ed4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4608      	mov	r0, r1
 8000edc:	e7f5      	b.n	8000eca <__udivmoddi4+0xa6>
 8000ede:	fab3 f183 	clz	r1, r3
 8000ee2:	2900      	cmp	r1, #0
 8000ee4:	d146      	bne.n	8000f74 <__udivmoddi4+0x150>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d302      	bcc.n	8000ef0 <__udivmoddi4+0xcc>
 8000eea:	4290      	cmp	r0, r2
 8000eec:	f0c0 80f0 	bcc.w	80010d0 <__udivmoddi4+0x2ac>
 8000ef0:	1a86      	subs	r6, r0, r2
 8000ef2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	2d00      	cmp	r5, #0
 8000efa:	d0e6      	beq.n	8000eca <__udivmoddi4+0xa6>
 8000efc:	e9c5 6300 	strd	r6, r3, [r5]
 8000f00:	e7e3      	b.n	8000eca <__udivmoddi4+0xa6>
 8000f02:	2a00      	cmp	r2, #0
 8000f04:	f040 8090 	bne.w	8001028 <__udivmoddi4+0x204>
 8000f08:	eba1 040c 	sub.w	r4, r1, ip
 8000f0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f10:	fa1f f78c 	uxth.w	r7, ip
 8000f14:	2101      	movs	r1, #1
 8000f16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000f22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f26:	fb07 f006 	mul.w	r0, r7, r6
 8000f2a:	4298      	cmp	r0, r3
 8000f2c:	d908      	bls.n	8000f40 <__udivmoddi4+0x11c>
 8000f2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f36:	d202      	bcs.n	8000f3e <__udivmoddi4+0x11a>
 8000f38:	4298      	cmp	r0, r3
 8000f3a:	f200 80cd 	bhi.w	80010d8 <__udivmoddi4+0x2b4>
 8000f3e:	4626      	mov	r6, r4
 8000f40:	1a1c      	subs	r4, r3, r0
 8000f42:	fa1f f38e 	uxth.w	r3, lr
 8000f46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000f4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f52:	fb00 f707 	mul.w	r7, r0, r7
 8000f56:	429f      	cmp	r7, r3
 8000f58:	d908      	bls.n	8000f6c <__udivmoddi4+0x148>
 8000f5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f62:	d202      	bcs.n	8000f6a <__udivmoddi4+0x146>
 8000f64:	429f      	cmp	r7, r3
 8000f66:	f200 80b0 	bhi.w	80010ca <__udivmoddi4+0x2a6>
 8000f6a:	4620      	mov	r0, r4
 8000f6c:	1bdb      	subs	r3, r3, r7
 8000f6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f72:	e7a5      	b.n	8000ec0 <__udivmoddi4+0x9c>
 8000f74:	f1c1 0620 	rsb	r6, r1, #32
 8000f78:	408b      	lsls	r3, r1
 8000f7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000f7e:	431f      	orrs	r7, r3
 8000f80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f84:	fa04 f301 	lsl.w	r3, r4, r1
 8000f88:	ea43 030c 	orr.w	r3, r3, ip
 8000f8c:	40f4      	lsrs	r4, r6
 8000f8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f92:	0c38      	lsrs	r0, r7, #16
 8000f94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f98:	fbb4 fef0 	udiv	lr, r4, r0
 8000f9c:	fa1f fc87 	uxth.w	ip, r7
 8000fa0:	fb00 441e 	mls	r4, r0, lr, r4
 8000fa4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fa8:	fb0e f90c 	mul.w	r9, lr, ip
 8000fac:	45a1      	cmp	r9, r4
 8000fae:	fa02 f201 	lsl.w	r2, r2, r1
 8000fb2:	d90a      	bls.n	8000fca <__udivmoddi4+0x1a6>
 8000fb4:	193c      	adds	r4, r7, r4
 8000fb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000fba:	f080 8084 	bcs.w	80010c6 <__udivmoddi4+0x2a2>
 8000fbe:	45a1      	cmp	r9, r4
 8000fc0:	f240 8081 	bls.w	80010c6 <__udivmoddi4+0x2a2>
 8000fc4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fc8:	443c      	add	r4, r7
 8000fca:	eba4 0409 	sub.w	r4, r4, r9
 8000fce:	fa1f f983 	uxth.w	r9, r3
 8000fd2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fd6:	fb00 4413 	mls	r4, r0, r3, r4
 8000fda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fde:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fe2:	45a4      	cmp	ip, r4
 8000fe4:	d907      	bls.n	8000ff6 <__udivmoddi4+0x1d2>
 8000fe6:	193c      	adds	r4, r7, r4
 8000fe8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000fec:	d267      	bcs.n	80010be <__udivmoddi4+0x29a>
 8000fee:	45a4      	cmp	ip, r4
 8000ff0:	d965      	bls.n	80010be <__udivmoddi4+0x29a>
 8000ff2:	3b02      	subs	r3, #2
 8000ff4:	443c      	add	r4, r7
 8000ff6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ffa:	fba0 9302 	umull	r9, r3, r0, r2
 8000ffe:	eba4 040c 	sub.w	r4, r4, ip
 8001002:	429c      	cmp	r4, r3
 8001004:	46ce      	mov	lr, r9
 8001006:	469c      	mov	ip, r3
 8001008:	d351      	bcc.n	80010ae <__udivmoddi4+0x28a>
 800100a:	d04e      	beq.n	80010aa <__udivmoddi4+0x286>
 800100c:	b155      	cbz	r5, 8001024 <__udivmoddi4+0x200>
 800100e:	ebb8 030e 	subs.w	r3, r8, lr
 8001012:	eb64 040c 	sbc.w	r4, r4, ip
 8001016:	fa04 f606 	lsl.w	r6, r4, r6
 800101a:	40cb      	lsrs	r3, r1
 800101c:	431e      	orrs	r6, r3
 800101e:	40cc      	lsrs	r4, r1
 8001020:	e9c5 6400 	strd	r6, r4, [r5]
 8001024:	2100      	movs	r1, #0
 8001026:	e750      	b.n	8000eca <__udivmoddi4+0xa6>
 8001028:	f1c2 0320 	rsb	r3, r2, #32
 800102c:	fa20 f103 	lsr.w	r1, r0, r3
 8001030:	fa0c fc02 	lsl.w	ip, ip, r2
 8001034:	fa24 f303 	lsr.w	r3, r4, r3
 8001038:	4094      	lsls	r4, r2
 800103a:	430c      	orrs	r4, r1
 800103c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001040:	fa00 fe02 	lsl.w	lr, r0, r2
 8001044:	fa1f f78c 	uxth.w	r7, ip
 8001048:	fbb3 f0f8 	udiv	r0, r3, r8
 800104c:	fb08 3110 	mls	r1, r8, r0, r3
 8001050:	0c23      	lsrs	r3, r4, #16
 8001052:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001056:	fb00 f107 	mul.w	r1, r0, r7
 800105a:	4299      	cmp	r1, r3
 800105c:	d908      	bls.n	8001070 <__udivmoddi4+0x24c>
 800105e:	eb1c 0303 	adds.w	r3, ip, r3
 8001062:	f100 36ff 	add.w	r6, r0, #4294967295
 8001066:	d22c      	bcs.n	80010c2 <__udivmoddi4+0x29e>
 8001068:	4299      	cmp	r1, r3
 800106a:	d92a      	bls.n	80010c2 <__udivmoddi4+0x29e>
 800106c:	3802      	subs	r0, #2
 800106e:	4463      	add	r3, ip
 8001070:	1a5b      	subs	r3, r3, r1
 8001072:	b2a4      	uxth	r4, r4
 8001074:	fbb3 f1f8 	udiv	r1, r3, r8
 8001078:	fb08 3311 	mls	r3, r8, r1, r3
 800107c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001080:	fb01 f307 	mul.w	r3, r1, r7
 8001084:	42a3      	cmp	r3, r4
 8001086:	d908      	bls.n	800109a <__udivmoddi4+0x276>
 8001088:	eb1c 0404 	adds.w	r4, ip, r4
 800108c:	f101 36ff 	add.w	r6, r1, #4294967295
 8001090:	d213      	bcs.n	80010ba <__udivmoddi4+0x296>
 8001092:	42a3      	cmp	r3, r4
 8001094:	d911      	bls.n	80010ba <__udivmoddi4+0x296>
 8001096:	3902      	subs	r1, #2
 8001098:	4464      	add	r4, ip
 800109a:	1ae4      	subs	r4, r4, r3
 800109c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80010a0:	e739      	b.n	8000f16 <__udivmoddi4+0xf2>
 80010a2:	4604      	mov	r4, r0
 80010a4:	e6f0      	b.n	8000e88 <__udivmoddi4+0x64>
 80010a6:	4608      	mov	r0, r1
 80010a8:	e706      	b.n	8000eb8 <__udivmoddi4+0x94>
 80010aa:	45c8      	cmp	r8, r9
 80010ac:	d2ae      	bcs.n	800100c <__udivmoddi4+0x1e8>
 80010ae:	ebb9 0e02 	subs.w	lr, r9, r2
 80010b2:	eb63 0c07 	sbc.w	ip, r3, r7
 80010b6:	3801      	subs	r0, #1
 80010b8:	e7a8      	b.n	800100c <__udivmoddi4+0x1e8>
 80010ba:	4631      	mov	r1, r6
 80010bc:	e7ed      	b.n	800109a <__udivmoddi4+0x276>
 80010be:	4603      	mov	r3, r0
 80010c0:	e799      	b.n	8000ff6 <__udivmoddi4+0x1d2>
 80010c2:	4630      	mov	r0, r6
 80010c4:	e7d4      	b.n	8001070 <__udivmoddi4+0x24c>
 80010c6:	46d6      	mov	lr, sl
 80010c8:	e77f      	b.n	8000fca <__udivmoddi4+0x1a6>
 80010ca:	4463      	add	r3, ip
 80010cc:	3802      	subs	r0, #2
 80010ce:	e74d      	b.n	8000f6c <__udivmoddi4+0x148>
 80010d0:	4606      	mov	r6, r0
 80010d2:	4623      	mov	r3, r4
 80010d4:	4608      	mov	r0, r1
 80010d6:	e70f      	b.n	8000ef8 <__udivmoddi4+0xd4>
 80010d8:	3e02      	subs	r6, #2
 80010da:	4463      	add	r3, ip
 80010dc:	e730      	b.n	8000f40 <__udivmoddi4+0x11c>
 80010de:	bf00      	nop

080010e0 <__aeabi_idiv0>:
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop

080010e4 <_write>:
        }
    }
}

int _write(int file, char *ptr, int len)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	f04f 33ff 	mov.w	r3, #4294967295
 80010f8:	68b9      	ldr	r1, [r7, #8]
 80010fa:	4804      	ldr	r0, [pc, #16]	@ (800110c <_write+0x28>)
 80010fc:	f006 f804 	bl	8007108 <HAL_UART_Transmit>
    return len;
 8001100:	687b      	ldr	r3, [r7, #4]
}
 8001102:	4618      	mov	r0, r3
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000724 	.word	0x20000724

08001110 <perform_fft>:
    return 0;
}

#include "arm_math.h"

void perform_fft(void) {
 8001110:	b5b0      	push	{r4, r5, r7, lr}
 8001112:	b08e      	sub	sp, #56	@ 0x38
 8001114:	af02      	add	r7, sp, #8
    // Initialize RFFT instance
    arm_rfft_fast_instance_f32 S;
    if (arm_rfft_fast_init_f32(&S, FFT_SIZE) != ARM_MATH_SUCCESS) {
 8001116:	463b      	mov	r3, r7
 8001118:	2180      	movs	r1, #128	@ 0x80
 800111a:	4618      	mov	r0, r3
 800111c:	f00a fc18 	bl	800b950 <arm_rfft_fast_init_f32>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <perform_fft+0x1e>
        printf("FFT Initialization Error!\n");
 8001126:	4854      	ldr	r0, [pc, #336]	@ (8001278 <perform_fft+0x168>)
 8001128:	f00c fb7c 	bl	800d824 <puts>
 800112c:	e0a0      	b.n	8001270 <perform_fft+0x160>
        return;
    }

    // Convert ADC input to float and normalize
    for (int i = 0; i < FFT_SIZE; i++) {
 800112e:	2300      	movs	r3, #0
 8001130:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001132:	e018      	b.n	8001166 <perform_fft+0x56>
        fft_input[i] = ((float)adc_buffer[i] / 4095.0f) * 3.3f; // Scale to voltage
 8001134:	4a51      	ldr	r2, [pc, #324]	@ (800127c <perform_fft+0x16c>)
 8001136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001138:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800113c:	ee07 3a90 	vmov	s15, r3
 8001140:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001144:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8001280 <perform_fft+0x170>
 8001148:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800114c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8001284 <perform_fft+0x174>
 8001150:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001154:	4a4c      	ldr	r2, [pc, #304]	@ (8001288 <perform_fft+0x178>)
 8001156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	4413      	add	r3, r2
 800115c:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < FFT_SIZE; i++) {
 8001160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001162:	3301      	adds	r3, #1
 8001164:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001168:	2b7f      	cmp	r3, #127	@ 0x7f
 800116a:	dde3      	ble.n	8001134 <perform_fft+0x24>
    }

    // Perform FFT
    arm_rfft_fast_f32(&S, fft_input, fft_output, 0);
 800116c:	4638      	mov	r0, r7
 800116e:	2300      	movs	r3, #0
 8001170:	4a46      	ldr	r2, [pc, #280]	@ (800128c <perform_fft+0x17c>)
 8001172:	4945      	ldr	r1, [pc, #276]	@ (8001288 <perform_fft+0x178>)
 8001174:	f00a fc70 	bl	800ba58 <arm_rfft_fast_f32>

    // Compute magnitude of the FFT output
    for (int i = 0; i < FFT_SIZE / 2; i++) {
 8001178:	2300      	movs	r3, #0
 800117a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800117c:	e032      	b.n	80011e4 <perform_fft+0xd4>
        fft_output[i] = sqrtf(fft_output[2 * i] * fft_output[2 * i] +
 800117e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	4a42      	ldr	r2, [pc, #264]	@ (800128c <perform_fft+0x17c>)
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	4413      	add	r3, r2
 8001188:	ed93 7a00 	vldr	s14, [r3]
 800118c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	4a3e      	ldr	r2, [pc, #248]	@ (800128c <perform_fft+0x17c>)
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	4413      	add	r3, r2
 8001196:	edd3 7a00 	vldr	s15, [r3]
 800119a:	ee27 7a27 	vmul.f32	s14, s14, s15
                              fft_output[2 * i + 1] * fft_output[2 * i + 1]);
 800119e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	3301      	adds	r3, #1
 80011a4:	4a39      	ldr	r2, [pc, #228]	@ (800128c <perform_fft+0x17c>)
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	4413      	add	r3, r2
 80011aa:	edd3 6a00 	vldr	s13, [r3]
 80011ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	3301      	adds	r3, #1
 80011b4:	4a35      	ldr	r2, [pc, #212]	@ (800128c <perform_fft+0x17c>)
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	4413      	add	r3, r2
 80011ba:	edd3 7a00 	vldr	s15, [r3]
 80011be:	ee66 7aa7 	vmul.f32	s15, s13, s15
        fft_output[i] = sqrtf(fft_output[2 * i] * fft_output[2 * i] +
 80011c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011c6:	eeb0 0a67 	vmov.f32	s0, s15
 80011ca:	f00f ff6f 	bl	80110ac <sqrtf>
 80011ce:	eef0 7a40 	vmov.f32	s15, s0
 80011d2:	4a2e      	ldr	r2, [pc, #184]	@ (800128c <perform_fft+0x17c>)
 80011d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	4413      	add	r3, r2
 80011da:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < FFT_SIZE / 2; i++) {
 80011de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011e0:	3301      	adds	r3, #1
 80011e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80011e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011e6:	2b3f      	cmp	r3, #63	@ 0x3f
 80011e8:	ddc9      	ble.n	800117e <perform_fft+0x6e>
    }

    // Find the dominant frequency
    float max_amplitude = 0.0f;
 80011ea:	f04f 0300 	mov.w	r3, #0
 80011ee:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t max_index = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	623b      	str	r3, [r7, #32]
    for (int i = 0; i < FFT_SIZE / 2; i++) {
 80011f4:	2300      	movs	r3, #0
 80011f6:	61fb      	str	r3, [r7, #28]
 80011f8:	e017      	b.n	800122a <perform_fft+0x11a>
        if (fft_output[i] > max_amplitude) {
 80011fa:	4a24      	ldr	r2, [pc, #144]	@ (800128c <perform_fft+0x17c>)
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	4413      	add	r3, r2
 8001202:	edd3 7a00 	vldr	s15, [r3]
 8001206:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800120a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800120e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001212:	d507      	bpl.n	8001224 <perform_fft+0x114>
            max_amplitude = fft_output[i];
 8001214:	4a1d      	ldr	r2, [pc, #116]	@ (800128c <perform_fft+0x17c>)
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	627b      	str	r3, [r7, #36]	@ 0x24
            max_index = i;
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	623b      	str	r3, [r7, #32]
    for (int i = 0; i < FFT_SIZE / 2; i++) {
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	3301      	adds	r3, #1
 8001228:	61fb      	str	r3, [r7, #28]
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	2b3f      	cmp	r3, #63	@ 0x3f
 800122e:	dde4      	ble.n	80011fa <perform_fft+0xea>
        }
    }

    // Compute the dominant frequency
    float dominant_frequency = (float)max_index * SAMPLE_RATE / FFT_SIZE;
 8001230:	6a3b      	ldr	r3, [r7, #32]
 8001232:	ee07 3a90 	vmov	s15, r3
 8001236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800123a:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001290 <perform_fft+0x180>
 800123e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001242:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001294 <perform_fft+0x184>
 8001246:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800124a:	edc7 7a06 	vstr	s15, [r7, #24]

    // Print results
    printf("Dominant Frequency: %.2f Hz, Amplitude: %.3f\n", dominant_frequency, max_amplitude);
 800124e:	69b8      	ldr	r0, [r7, #24]
 8001250:	f7ff f9fa 	bl	8000648 <__aeabi_f2d>
 8001254:	4604      	mov	r4, r0
 8001256:	460d      	mov	r5, r1
 8001258:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800125a:	f7ff f9f5 	bl	8000648 <__aeabi_f2d>
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
 8001262:	e9cd 2300 	strd	r2, r3, [sp]
 8001266:	4622      	mov	r2, r4
 8001268:	462b      	mov	r3, r5
 800126a:	480b      	ldr	r0, [pc, #44]	@ (8001298 <perform_fft+0x188>)
 800126c:	f00c fa72 	bl	800d754 <iprintf>
}
 8001270:	3730      	adds	r7, #48	@ 0x30
 8001272:	46bd      	mov	sp, r7
 8001274:	bdb0      	pop	{r4, r5, r7, pc}
 8001276:	bf00      	nop
 8001278:	08011148 	.word	0x08011148
 800127c:	20000428 	.word	0x20000428
 8001280:	457ff000 	.word	0x457ff000
 8001284:	40533333 	.word	0x40533333
 8001288:	20000770 	.word	0x20000770
 800128c:	20000b70 	.word	0x20000b70
 8001290:	461c4000 	.word	0x461c4000
 8001294:	43000000 	.word	0x43000000
 8001298:	08011164 	.word	0x08011164

0800129c <toggle_pins>:



//przełączanie pomiędzy pinami
void toggle_pins(void) {
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
    static uint8_t state = 0;

    switch (state) {
 80012a0:	4b43      	ldr	r3, [pc, #268]	@ (80013b0 <toggle_pins+0x114>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b03      	cmp	r3, #3
 80012a6:	d86f      	bhi.n	8001388 <toggle_pins+0xec>
 80012a8:	a201      	add	r2, pc, #4	@ (adr r2, 80012b0 <toggle_pins+0x14>)
 80012aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ae:	bf00      	nop
 80012b0:	080012c1 	.word	0x080012c1
 80012b4:	080012f3 	.word	0x080012f3
 80012b8:	08001325 	.word	0x08001325
 80012bc:	08001357 	.word	0x08001357
        case 0:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);  // PB0 HIGH
 80012c0:	2201      	movs	r2, #1
 80012c2:	2101      	movs	r1, #1
 80012c4:	483b      	ldr	r0, [pc, #236]	@ (80013b4 <toggle_pins+0x118>)
 80012c6:	f002 fb2f 	bl	8003928 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);  // PB1 HIGH
 80012ca:	2201      	movs	r2, #1
 80012cc:	2102      	movs	r1, #2
 80012ce:	4839      	ldr	r0, [pc, #228]	@ (80013b4 <toggle_pins+0x118>)
 80012d0:	f002 fb2a 	bl	8003928 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);  // PB2 LOW
 80012d4:	2200      	movs	r2, #0
 80012d6:	2104      	movs	r1, #4
 80012d8:	4836      	ldr	r0, [pc, #216]	@ (80013b4 <toggle_pins+0x118>)
 80012da:	f002 fb25 	bl	8003928 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET); // PB10 LOW
 80012de:	2200      	movs	r2, #0
 80012e0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012e4:	4833      	ldr	r0, [pc, #204]	@ (80013b4 <toggle_pins+0x118>)
 80012e6:	f002 fb1f 	bl	8003928 <HAL_GPIO_WritePin>
            printf("0\n");
 80012ea:	4833      	ldr	r0, [pc, #204]	@ (80013b8 <toggle_pins+0x11c>)
 80012ec:	f00c fa9a 	bl	800d824 <puts>
            break;
 80012f0:	e04a      	b.n	8001388 <toggle_pins+0xec>
        case 1:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);  // PB0 LOW
 80012f2:	2200      	movs	r2, #0
 80012f4:	2101      	movs	r1, #1
 80012f6:	482f      	ldr	r0, [pc, #188]	@ (80013b4 <toggle_pins+0x118>)
 80012f8:	f002 fb16 	bl	8003928 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);    // PB1 HIGH
 80012fc:	2201      	movs	r2, #1
 80012fe:	2102      	movs	r1, #2
 8001300:	482c      	ldr	r0, [pc, #176]	@ (80013b4 <toggle_pins+0x118>)
 8001302:	f002 fb11 	bl	8003928 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);  // PB2 HIGH
 8001306:	2201      	movs	r2, #1
 8001308:	2104      	movs	r1, #4
 800130a:	482a      	ldr	r0, [pc, #168]	@ (80013b4 <toggle_pins+0x118>)
 800130c:	f002 fb0c 	bl	8003928 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET); // PB10 LOW
 8001310:	2200      	movs	r2, #0
 8001312:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001316:	4827      	ldr	r0, [pc, #156]	@ (80013b4 <toggle_pins+0x118>)
 8001318:	f002 fb06 	bl	8003928 <HAL_GPIO_WritePin>
            printf("1\n");
 800131c:	4827      	ldr	r0, [pc, #156]	@ (80013bc <toggle_pins+0x120>)
 800131e:	f00c fa81 	bl	800d824 <puts>
            break;
 8001322:	e031      	b.n	8001388 <toggle_pins+0xec>
        case 2:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);  // PB0 LOW
 8001324:	2200      	movs	r2, #0
 8001326:	2101      	movs	r1, #1
 8001328:	4822      	ldr	r0, [pc, #136]	@ (80013b4 <toggle_pins+0x118>)
 800132a:	f002 fafd 	bl	8003928 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);  // PB1 LOW
 800132e:	2200      	movs	r2, #0
 8001330:	2102      	movs	r1, #2
 8001332:	4820      	ldr	r0, [pc, #128]	@ (80013b4 <toggle_pins+0x118>)
 8001334:	f002 faf8 	bl	8003928 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);    // PB2 HIGH
 8001338:	2201      	movs	r2, #1
 800133a:	2104      	movs	r1, #4
 800133c:	481d      	ldr	r0, [pc, #116]	@ (80013b4 <toggle_pins+0x118>)
 800133e:	f002 faf3 	bl	8003928 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET); // PB10 HIGH
 8001342:	2201      	movs	r2, #1
 8001344:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001348:	481a      	ldr	r0, [pc, #104]	@ (80013b4 <toggle_pins+0x118>)
 800134a:	f002 faed 	bl	8003928 <HAL_GPIO_WritePin>
            printf("2\n");
 800134e:	481c      	ldr	r0, [pc, #112]	@ (80013c0 <toggle_pins+0x124>)
 8001350:	f00c fa68 	bl	800d824 <puts>
            break;
 8001354:	e018      	b.n	8001388 <toggle_pins+0xec>
        case 3:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);  // PB0 HIGH
 8001356:	2201      	movs	r2, #1
 8001358:	2101      	movs	r1, #1
 800135a:	4816      	ldr	r0, [pc, #88]	@ (80013b4 <toggle_pins+0x118>)
 800135c:	f002 fae4 	bl	8003928 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);  // PB1 LOW
 8001360:	2200      	movs	r2, #0
 8001362:	2102      	movs	r1, #2
 8001364:	4813      	ldr	r0, [pc, #76]	@ (80013b4 <toggle_pins+0x118>)
 8001366:	f002 fadf 	bl	8003928 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);  // PB2 LOW
 800136a:	2200      	movs	r2, #0
 800136c:	2104      	movs	r1, #4
 800136e:	4811      	ldr	r0, [pc, #68]	@ (80013b4 <toggle_pins+0x118>)
 8001370:	f002 fada 	bl	8003928 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);   // PB10 HIGH
 8001374:	2201      	movs	r2, #1
 8001376:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800137a:	480e      	ldr	r0, [pc, #56]	@ (80013b4 <toggle_pins+0x118>)
 800137c:	f002 fad4 	bl	8003928 <HAL_GPIO_WritePin>
            printf("3\n");
 8001380:	4810      	ldr	r0, [pc, #64]	@ (80013c4 <toggle_pins+0x128>)
 8001382:	f00c fa4f 	bl	800d824 <puts>
            break;
 8001386:	bf00      	nop
    }

    // Zwiększanie stanu i zapewnienie cykliczności
    state = (state + 1) % 4;
 8001388:	4b09      	ldr	r3, [pc, #36]	@ (80013b0 <toggle_pins+0x114>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	3301      	adds	r3, #1
 800138e:	425a      	negs	r2, r3
 8001390:	f003 0303 	and.w	r3, r3, #3
 8001394:	f002 0203 	and.w	r2, r2, #3
 8001398:	bf58      	it	pl
 800139a:	4253      	negpl	r3, r2
 800139c:	b2da      	uxtb	r2, r3
 800139e:	4b04      	ldr	r3, [pc, #16]	@ (80013b0 <toggle_pins+0x114>)
 80013a0:	701a      	strb	r2, [r3, #0]

    // Dodanie opóźnienia, żeby zmiany były zauważalne
    HAL_Delay(1000);  // Opóźnienie 500 ms
 80013a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013a6:	f000 fff3 	bl	8002390 <HAL_Delay>
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000c70 	.word	0x20000c70
 80013b4:	40020400 	.word	0x40020400
 80013b8:	08011194 	.word	0x08011194
 80013bc:	08011198 	.word	0x08011198
 80013c0:	0801119c 	.word	0x0801119c
 80013c4:	080111a0 	.word	0x080111a0

080013c8 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC2) {
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a05      	ldr	r2, [pc, #20]	@ (80013ec <HAL_ADC_ConvCpltCallback+0x24>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d102      	bne.n	80013e0 <HAL_ADC_ConvCpltCallback+0x18>
        adc_ready = 1;  // Set a flag to indicate data is ready for processing
 80013da:	4b05      	ldr	r3, [pc, #20]	@ (80013f0 <HAL_ADC_ConvCpltCallback+0x28>)
 80013dc:	2201      	movs	r2, #1
 80013de:	701a      	strb	r2, [r3, #0]
    }
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	40012100 	.word	0x40012100
 80013f0:	2000076c 	.word	0x2000076c

080013f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013f8:	f000 ff58 	bl	80022ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013fc:	f000 f834 	bl	8001468 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001400:	f000 fb0e 	bl	8001a20 <MX_GPIO_Init>
  MX_DMA_Init();
 8001404:	f000 faec 	bl	80019e0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001408:	f000 fac0 	bl	800198c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800140c:	f000 f89a 	bl	8001544 <MX_ADC1_Init>
  MX_DAC_Init();
 8001410:	f000 f98e 	bl	8001730 <MX_DAC_Init>
  MX_SPI2_Init();
 8001414:	f000 f9c0 	bl	8001798 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 8001418:	f009 fd30 	bl	800ae7c <MX_USB_DEVICE_Init>
  MX_ADC2_Init();
 800141c:	f000 f8e4 	bl	80015e8 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001420:	f000 f934 	bl	800168c <MX_ADC3_Init>
  MX_TIM3_Init();
 8001424:	f000 f9ee 	bl	8001804 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001428:	f000 fa4a 	bl	80018c0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc2, (uint32_t *)adc_buffer, NUM_SAMPLES);
 800142c:	2280      	movs	r2, #128	@ 0x80
 800142e:	490a      	ldr	r1, [pc, #40]	@ (8001458 <main+0x64>)
 8001430:	480a      	ldr	r0, [pc, #40]	@ (800145c <main+0x68>)
 8001432:	f001 f815 	bl	8002460 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001436:	2100      	movs	r1, #0
 8001438:	4809      	ldr	r0, [pc, #36]	@ (8001460 <main+0x6c>)
 800143a:	f004 ff67 	bl	800630c <HAL_TIM_IC_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

	 toggle_pins();
 800143e:	f7ff ff2d 	bl	800129c <toggle_pins>
	 if (adc_ready)
 8001442:	4b08      	ldr	r3, [pc, #32]	@ (8001464 <main+0x70>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	b2db      	uxtb	r3, r3
 8001448:	2b00      	cmp	r3, #0
 800144a:	d0f8      	beq.n	800143e <main+0x4a>
	 {
	     adc_ready = 0;       // Clear flag
 800144c:	4b05      	ldr	r3, [pc, #20]	@ (8001464 <main+0x70>)
 800144e:	2200      	movs	r2, #0
 8001450:	701a      	strb	r2, [r3, #0]
	     perform_fft();       // Call your FFT function
 8001452:	f7ff fe5d 	bl	8001110 <perform_fft>
	 toggle_pins();
 8001456:	e7f2      	b.n	800143e <main+0x4a>
 8001458:	20000428 	.word	0x20000428
 800145c:	20000338 	.word	0x20000338
 8001460:	20000694 	.word	0x20000694
 8001464:	2000076c 	.word	0x2000076c

08001468 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b094      	sub	sp, #80	@ 0x50
 800146c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800146e:	f107 031c 	add.w	r3, r7, #28
 8001472:	2234      	movs	r2, #52	@ 0x34
 8001474:	2100      	movs	r1, #0
 8001476:	4618      	mov	r0, r3
 8001478:	f00c fad4 	bl	800da24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800147c:	f107 0308 	add.w	r3, r7, #8
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800148c:	2300      	movs	r3, #0
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	4b2a      	ldr	r3, [pc, #168]	@ (800153c <SystemClock_Config+0xd4>)
 8001492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001494:	4a29      	ldr	r2, [pc, #164]	@ (800153c <SystemClock_Config+0xd4>)
 8001496:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800149a:	6413      	str	r3, [r2, #64]	@ 0x40
 800149c:	4b27      	ldr	r3, [pc, #156]	@ (800153c <SystemClock_Config+0xd4>)
 800149e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80014a8:	2300      	movs	r3, #0
 80014aa:	603b      	str	r3, [r7, #0]
 80014ac:	4b24      	ldr	r3, [pc, #144]	@ (8001540 <SystemClock_Config+0xd8>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80014b4:	4a22      	ldr	r2, [pc, #136]	@ (8001540 <SystemClock_Config+0xd8>)
 80014b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014ba:	6013      	str	r3, [r2, #0]
 80014bc:	4b20      	ldr	r3, [pc, #128]	@ (8001540 <SystemClock_Config+0xd8>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014c4:	603b      	str	r3, [r7, #0]
 80014c6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014c8:	2301      	movs	r3, #1
 80014ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014d2:	2302      	movs	r3, #2
 80014d4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014d6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80014da:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014dc:	2308      	movs	r3, #8
 80014de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80014e0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80014e4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80014e6:	2304      	movs	r3, #4
 80014e8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80014ea:	2307      	movs	r3, #7
 80014ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014ee:	2302      	movs	r3, #2
 80014f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014f2:	f107 031c 	add.w	r3, r7, #28
 80014f6:	4618      	mov	r0, r3
 80014f8:	f004 fb42 	bl	8005b80 <HAL_RCC_OscConfig>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001502:	f000 fb29 	bl	8001b58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001506:	230f      	movs	r3, #15
 8001508:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800150a:	2302      	movs	r3, #2
 800150c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800150e:	2300      	movs	r3, #0
 8001510:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001512:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001516:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001518:	2300      	movs	r3, #0
 800151a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800151c:	f107 0308 	add.w	r3, r7, #8
 8001520:	2102      	movs	r1, #2
 8001522:	4618      	mov	r0, r3
 8001524:	f003 fcb8 	bl	8004e98 <HAL_RCC_ClockConfig>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800152e:	f000 fb13 	bl	8001b58 <Error_Handler>
  }
}
 8001532:	bf00      	nop
 8001534:	3750      	adds	r7, #80	@ 0x50
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40023800 	.word	0x40023800
 8001540:	40007000 	.word	0x40007000

08001544 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800154a:	463b      	mov	r3, r7
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001556:	4b21      	ldr	r3, [pc, #132]	@ (80015dc <MX_ADC1_Init+0x98>)
 8001558:	4a21      	ldr	r2, [pc, #132]	@ (80015e0 <MX_ADC1_Init+0x9c>)
 800155a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800155c:	4b1f      	ldr	r3, [pc, #124]	@ (80015dc <MX_ADC1_Init+0x98>)
 800155e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001562:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001564:	4b1d      	ldr	r3, [pc, #116]	@ (80015dc <MX_ADC1_Init+0x98>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800156a:	4b1c      	ldr	r3, [pc, #112]	@ (80015dc <MX_ADC1_Init+0x98>)
 800156c:	2200      	movs	r2, #0
 800156e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001570:	4b1a      	ldr	r3, [pc, #104]	@ (80015dc <MX_ADC1_Init+0x98>)
 8001572:	2200      	movs	r2, #0
 8001574:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001576:	4b19      	ldr	r3, [pc, #100]	@ (80015dc <MX_ADC1_Init+0x98>)
 8001578:	2200      	movs	r2, #0
 800157a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800157e:	4b17      	ldr	r3, [pc, #92]	@ (80015dc <MX_ADC1_Init+0x98>)
 8001580:	2200      	movs	r2, #0
 8001582:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001584:	4b15      	ldr	r3, [pc, #84]	@ (80015dc <MX_ADC1_Init+0x98>)
 8001586:	4a17      	ldr	r2, [pc, #92]	@ (80015e4 <MX_ADC1_Init+0xa0>)
 8001588:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800158a:	4b14      	ldr	r3, [pc, #80]	@ (80015dc <MX_ADC1_Init+0x98>)
 800158c:	2200      	movs	r2, #0
 800158e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001590:	4b12      	ldr	r3, [pc, #72]	@ (80015dc <MX_ADC1_Init+0x98>)
 8001592:	2201      	movs	r2, #1
 8001594:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001596:	4b11      	ldr	r3, [pc, #68]	@ (80015dc <MX_ADC1_Init+0x98>)
 8001598:	2200      	movs	r2, #0
 800159a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800159e:	4b0f      	ldr	r3, [pc, #60]	@ (80015dc <MX_ADC1_Init+0x98>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015a4:	480d      	ldr	r0, [pc, #52]	@ (80015dc <MX_ADC1_Init+0x98>)
 80015a6:	f000 ff17 	bl	80023d8 <HAL_ADC_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80015b0:	f000 fad2 	bl	8001b58 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80015b4:	230a      	movs	r3, #10
 80015b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80015b8:	2301      	movs	r3, #1
 80015ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80015bc:	2300      	movs	r3, #0
 80015be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015c0:	463b      	mov	r3, r7
 80015c2:	4619      	mov	r1, r3
 80015c4:	4805      	ldr	r0, [pc, #20]	@ (80015dc <MX_ADC1_Init+0x98>)
 80015c6:	f001 f86f 	bl	80026a8 <HAL_ADC_ConfigChannel>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80015d0:	f000 fac2 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015d4:	bf00      	nop
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	200002f0 	.word	0x200002f0
 80015e0:	40012000 	.word	0x40012000
 80015e4:	0f000001 	.word	0x0f000001

080015e8 <MX_ADC2_Init>:
  * @retval None
  */


static void MX_ADC2_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 80015ee:	463b      	mov	r3, r7
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]

    /* ADC2 Initialization */
    hadc2.Instance = ADC2;
 80015fa:	4b21      	ldr	r3, [pc, #132]	@ (8001680 <MX_ADC2_Init+0x98>)
 80015fc:	4a21      	ldr	r2, [pc, #132]	@ (8001684 <MX_ADC2_Init+0x9c>)
 80015fe:	601a      	str	r2, [r3, #0]
    hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;  // Divide clock to balance speed and accuracy
 8001600:	4b1f      	ldr	r3, [pc, #124]	@ (8001680 <MX_ADC2_Init+0x98>)
 8001602:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001606:	605a      	str	r2, [r3, #4]
    hadc2.Init.Resolution = ADC_RESOLUTION_12B;           // 12-bit resolution
 8001608:	4b1d      	ldr	r3, [pc, #116]	@ (8001680 <MX_ADC2_Init+0x98>)
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
    hadc2.Init.ScanConvMode = DISABLE;                    // Single channel
 800160e:	4b1c      	ldr	r3, [pc, #112]	@ (8001680 <MX_ADC2_Init+0x98>)
 8001610:	2200      	movs	r2, #0
 8001612:	611a      	str	r2, [r3, #16]
    hadc2.Init.ContinuousConvMode = ENABLE;               // Continuous conversion mode
 8001614:	4b1a      	ldr	r3, [pc, #104]	@ (8001680 <MX_ADC2_Init+0x98>)
 8001616:	2201      	movs	r2, #1
 8001618:	761a      	strb	r2, [r3, #24]
    hadc2.Init.DiscontinuousConvMode = DISABLE;           // Disable discontinuous conversions
 800161a:	4b19      	ldr	r3, [pc, #100]	@ (8001680 <MX_ADC2_Init+0x98>)
 800161c:	2200      	movs	r2, #0
 800161e:	f883 2020 	strb.w	r2, [r3, #32]
    hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE; // No external trigger
 8001622:	4b17      	ldr	r3, [pc, #92]	@ (8001680 <MX_ADC2_Init+0x98>)
 8001624:	2200      	movs	r2, #0
 8001626:	62da      	str	r2, [r3, #44]	@ 0x2c
    hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;     // Software-triggered conversions
 8001628:	4b15      	ldr	r3, [pc, #84]	@ (8001680 <MX_ADC2_Init+0x98>)
 800162a:	4a17      	ldr	r2, [pc, #92]	@ (8001688 <MX_ADC2_Init+0xa0>)
 800162c:	629a      	str	r2, [r3, #40]	@ 0x28
    hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;           // Right-aligned data
 800162e:	4b14      	ldr	r3, [pc, #80]	@ (8001680 <MX_ADC2_Init+0x98>)
 8001630:	2200      	movs	r2, #0
 8001632:	60da      	str	r2, [r3, #12]
    hadc2.Init.NbrOfConversion = 1;                       // Single conversion
 8001634:	4b12      	ldr	r3, [pc, #72]	@ (8001680 <MX_ADC2_Init+0x98>)
 8001636:	2201      	movs	r2, #1
 8001638:	61da      	str	r2, [r3, #28]
    hadc2.Init.DMAContinuousRequests = ENABLE;            // Enable DMA for ADC
 800163a:	4b11      	ldr	r3, [pc, #68]	@ (8001680 <MX_ADC2_Init+0x98>)
 800163c:	2201      	movs	r2, #1
 800163e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;        // End of Conversion after each sample
 8001642:	4b0f      	ldr	r3, [pc, #60]	@ (8001680 <MX_ADC2_Init+0x98>)
 8001644:	2201      	movs	r2, #1
 8001646:	615a      	str	r2, [r3, #20]

    if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001648:	480d      	ldr	r0, [pc, #52]	@ (8001680 <MX_ADC2_Init+0x98>)
 800164a:	f000 fec5 	bl	80023d8 <HAL_ADC_Init>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_ADC2_Init+0x70>
    {
        Error_Handler();
 8001654:	f000 fa80 	bl	8001b58 <Error_Handler>
    }

    /* Configure ADC2 regular channel (PA0 -> ADC_CHANNEL_0) */
    sConfig.Channel = ADC_CHANNEL_0;                     // Use ADC Channel 0 (PA0)
 8001658:	2300      	movs	r3, #0
 800165a:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;                                    // Rank 1 in the regular group
 800165c:	2301      	movs	r3, #1
 800165e:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;      // Increase sampling time for better accuracy
 8001660:	2301      	movs	r3, #1
 8001662:	60bb      	str	r3, [r7, #8]

    if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001664:	463b      	mov	r3, r7
 8001666:	4619      	mov	r1, r3
 8001668:	4805      	ldr	r0, [pc, #20]	@ (8001680 <MX_ADC2_Init+0x98>)
 800166a:	f001 f81d 	bl	80026a8 <HAL_ADC_ConfigChannel>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_ADC2_Init+0x90>
    {
        Error_Handler();
 8001674:	f000 fa70 	bl	8001b58 <Error_Handler>
    }
}
 8001678:	bf00      	nop
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20000338 	.word	0x20000338
 8001684:	40012100 	.word	0x40012100
 8001688:	0f000001 	.word	0x0f000001

0800168c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001692:	463b      	mov	r3, r7
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800169e:	4b21      	ldr	r3, [pc, #132]	@ (8001724 <MX_ADC3_Init+0x98>)
 80016a0:	4a21      	ldr	r2, [pc, #132]	@ (8001728 <MX_ADC3_Init+0x9c>)
 80016a2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80016a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001724 <MX_ADC3_Init+0x98>)
 80016a6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80016aa:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80016ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001724 <MX_ADC3_Init+0x98>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80016b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001724 <MX_ADC3_Init+0x98>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80016b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001724 <MX_ADC3_Init+0x98>)
 80016ba:	2201      	movs	r2, #1
 80016bc:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80016be:	4b19      	ldr	r3, [pc, #100]	@ (8001724 <MX_ADC3_Init+0x98>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016c6:	4b17      	ldr	r3, [pc, #92]	@ (8001724 <MX_ADC3_Init+0x98>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016cc:	4b15      	ldr	r3, [pc, #84]	@ (8001724 <MX_ADC3_Init+0x98>)
 80016ce:	4a17      	ldr	r2, [pc, #92]	@ (800172c <MX_ADC3_Init+0xa0>)
 80016d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016d2:	4b14      	ldr	r3, [pc, #80]	@ (8001724 <MX_ADC3_Init+0x98>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80016d8:	4b12      	ldr	r3, [pc, #72]	@ (8001724 <MX_ADC3_Init+0x98>)
 80016da:	2201      	movs	r2, #1
 80016dc:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80016de:	4b11      	ldr	r3, [pc, #68]	@ (8001724 <MX_ADC3_Init+0x98>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001724 <MX_ADC3_Init+0x98>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80016ec:	480d      	ldr	r0, [pc, #52]	@ (8001724 <MX_ADC3_Init+0x98>)
 80016ee:	f000 fe73 	bl	80023d8 <HAL_ADC_Init>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80016f8:	f000 fa2e 	bl	8001b58 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80016fc:	2301      	movs	r3, #1
 80016fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001700:	2301      	movs	r3, #1
 8001702:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001704:	2300      	movs	r3, #0
 8001706:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001708:	463b      	mov	r3, r7
 800170a:	4619      	mov	r1, r3
 800170c:	4805      	ldr	r0, [pc, #20]	@ (8001724 <MX_ADC3_Init+0x98>)
 800170e:	f000 ffcb 	bl	80026a8 <HAL_ADC_ConfigChannel>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001718:	f000 fa1e 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800171c:	bf00      	nop
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20000380 	.word	0x20000380
 8001728:	40012200 	.word	0x40012200
 800172c:	0f000001 	.word	0x0f000001

08001730 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001736:	463b      	mov	r3, r7
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800173e:	4b14      	ldr	r3, [pc, #80]	@ (8001790 <MX_DAC_Init+0x60>)
 8001740:	4a14      	ldr	r2, [pc, #80]	@ (8001794 <MX_DAC_Init+0x64>)
 8001742:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001744:	4812      	ldr	r0, [pc, #72]	@ (8001790 <MX_DAC_Init+0x60>)
 8001746:	f001 fb70 	bl	8002e2a <HAL_DAC_Init>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001750:	f000 fa02 	bl	8001b58 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001754:	2300      	movs	r3, #0
 8001756:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001758:	2300      	movs	r3, #0
 800175a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800175c:	463b      	mov	r3, r7
 800175e:	2200      	movs	r2, #0
 8001760:	4619      	mov	r1, r3
 8001762:	480b      	ldr	r0, [pc, #44]	@ (8001790 <MX_DAC_Init+0x60>)
 8001764:	f001 fb83 	bl	8002e6e <HAL_DAC_ConfigChannel>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800176e:	f000 f9f3 	bl	8001b58 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001772:	463b      	mov	r3, r7
 8001774:	2210      	movs	r2, #16
 8001776:	4619      	mov	r1, r3
 8001778:	4805      	ldr	r0, [pc, #20]	@ (8001790 <MX_DAC_Init+0x60>)
 800177a:	f001 fb78 	bl	8002e6e <HAL_DAC_ConfigChannel>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8001784:	f000 f9e8 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001788:	bf00      	nop
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	20000628 	.word	0x20000628
 8001794:	40007400 	.word	0x40007400

08001798 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800179c:	4b17      	ldr	r3, [pc, #92]	@ (80017fc <MX_SPI2_Init+0x64>)
 800179e:	4a18      	ldr	r2, [pc, #96]	@ (8001800 <MX_SPI2_Init+0x68>)
 80017a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017a2:	4b16      	ldr	r3, [pc, #88]	@ (80017fc <MX_SPI2_Init+0x64>)
 80017a4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80017a8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80017aa:	4b14      	ldr	r3, [pc, #80]	@ (80017fc <MX_SPI2_Init+0x64>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80017b0:	4b12      	ldr	r3, [pc, #72]	@ (80017fc <MX_SPI2_Init+0x64>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017b6:	4b11      	ldr	r3, [pc, #68]	@ (80017fc <MX_SPI2_Init+0x64>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017bc:	4b0f      	ldr	r3, [pc, #60]	@ (80017fc <MX_SPI2_Init+0x64>)
 80017be:	2200      	movs	r2, #0
 80017c0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80017c2:	4b0e      	ldr	r3, [pc, #56]	@ (80017fc <MX_SPI2_Init+0x64>)
 80017c4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80017c8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017ca:	4b0c      	ldr	r3, [pc, #48]	@ (80017fc <MX_SPI2_Init+0x64>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017d0:	4b0a      	ldr	r3, [pc, #40]	@ (80017fc <MX_SPI2_Init+0x64>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017d6:	4b09      	ldr	r3, [pc, #36]	@ (80017fc <MX_SPI2_Init+0x64>)
 80017d8:	2200      	movs	r2, #0
 80017da:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017dc:	4b07      	ldr	r3, [pc, #28]	@ (80017fc <MX_SPI2_Init+0x64>)
 80017de:	2200      	movs	r2, #0
 80017e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80017e2:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <MX_SPI2_Init+0x64>)
 80017e4:	220a      	movs	r2, #10
 80017e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80017e8:	4804      	ldr	r0, [pc, #16]	@ (80017fc <MX_SPI2_Init+0x64>)
 80017ea:	f004 fc67 	bl	80060bc <HAL_SPI_Init>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80017f4:	f000 f9b0 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	2000063c 	.word	0x2000063c
 8001800:	40003800 	.word	0x40003800

08001804 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800180a:	f107 0310 	add.w	r3, r7, #16
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001814:	463b      	mov	r3, r7
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	605a      	str	r2, [r3, #4]
 800181c:	609a      	str	r2, [r3, #8]
 800181e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001820:	4b25      	ldr	r3, [pc, #148]	@ (80018b8 <MX_TIM3_Init+0xb4>)
 8001822:	4a26      	ldr	r2, [pc, #152]	@ (80018bc <MX_TIM3_Init+0xb8>)
 8001824:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001826:	4b24      	ldr	r3, [pc, #144]	@ (80018b8 <MX_TIM3_Init+0xb4>)
 8001828:	2200      	movs	r2, #0
 800182a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800182c:	4b22      	ldr	r3, [pc, #136]	@ (80018b8 <MX_TIM3_Init+0xb4>)
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001832:	4b21      	ldr	r3, [pc, #132]	@ (80018b8 <MX_TIM3_Init+0xb4>)
 8001834:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001838:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800183a:	4b1f      	ldr	r3, [pc, #124]	@ (80018b8 <MX_TIM3_Init+0xb4>)
 800183c:	2200      	movs	r2, #0
 800183e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001840:	4b1d      	ldr	r3, [pc, #116]	@ (80018b8 <MX_TIM3_Init+0xb4>)
 8001842:	2200      	movs	r2, #0
 8001844:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001846:	481c      	ldr	r0, [pc, #112]	@ (80018b8 <MX_TIM3_Init+0xb4>)
 8001848:	f004 fd10 	bl	800626c <HAL_TIM_IC_Init>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001852:	f000 f981 	bl	8001b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001856:	2300      	movs	r3, #0
 8001858:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800185e:	f107 0310 	add.w	r3, r7, #16
 8001862:	4619      	mov	r1, r3
 8001864:	4814      	ldr	r0, [pc, #80]	@ (80018b8 <MX_TIM3_Init+0xb4>)
 8001866:	f005 fb83 	bl	8006f70 <HAL_TIMEx_MasterConfigSynchronization>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001870:	f000 f972 	bl	8001b58 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001874:	2300      	movs	r3, #0
 8001876:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001878:	2301      	movs	r3, #1
 800187a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800187c:	2300      	movs	r3, #0
 800187e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001884:	463b      	mov	r3, r7
 8001886:	2200      	movs	r2, #0
 8001888:	4619      	mov	r1, r3
 800188a:	480b      	ldr	r0, [pc, #44]	@ (80018b8 <MX_TIM3_Init+0xb4>)
 800188c:	f004 fe66 	bl	800655c <HAL_TIM_IC_ConfigChannel>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001896:	f000 f95f 	bl	8001b58 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800189a:	463b      	mov	r3, r7
 800189c:	2204      	movs	r2, #4
 800189e:	4619      	mov	r1, r3
 80018a0:	4805      	ldr	r0, [pc, #20]	@ (80018b8 <MX_TIM3_Init+0xb4>)
 80018a2:	f004 fe5b 	bl	800655c <HAL_TIM_IC_ConfigChannel>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 80018ac:	f000 f954 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018b0:	bf00      	nop
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20000694 	.word	0x20000694
 80018bc:	40000400 	.word	0x40000400

080018c0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08a      	sub	sp, #40	@ 0x28
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c6:	f107 0320 	add.w	r3, r7, #32
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018d0:	1d3b      	adds	r3, r7, #4
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]
 80018d8:	609a      	str	r2, [r3, #8]
 80018da:	60da      	str	r2, [r3, #12]
 80018dc:	611a      	str	r2, [r3, #16]
 80018de:	615a      	str	r2, [r3, #20]
 80018e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80018e2:	4b28      	ldr	r3, [pc, #160]	@ (8001984 <MX_TIM4_Init+0xc4>)
 80018e4:	4a28      	ldr	r2, [pc, #160]	@ (8001988 <MX_TIM4_Init+0xc8>)
 80018e6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8399; // Adjust for 1ms tick
 80018e8:	4b26      	ldr	r3, [pc, #152]	@ (8001984 <MX_TIM4_Init+0xc4>)
 80018ea:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80018ee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f0:	4b24      	ldr	r3, [pc, #144]	@ (8001984 <MX_TIM4_Init+0xc4>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999; // 1-second period
 80018f6:	4b23      	ldr	r3, [pc, #140]	@ (8001984 <MX_TIM4_Init+0xc4>)
 80018f8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80018fc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018fe:	4b21      	ldr	r3, [pc, #132]	@ (8001984 <MX_TIM4_Init+0xc4>)
 8001900:	2200      	movs	r2, #0
 8001902:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001904:	4b1f      	ldr	r3, [pc, #124]	@ (8001984 <MX_TIM4_Init+0xc4>)
 8001906:	2200      	movs	r2, #0
 8001908:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800190a:	481e      	ldr	r0, [pc, #120]	@ (8001984 <MX_TIM4_Init+0xc4>)
 800190c:	f004 fc5f 	bl	80061ce <HAL_TIM_PWM_Init>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001916:	f000 f91f 	bl	8001b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800191a:	2300      	movs	r3, #0
 800191c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800191e:	2300      	movs	r3, #0
 8001920:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001922:	f107 0320 	add.w	r3, r7, #32
 8001926:	4619      	mov	r1, r3
 8001928:	4816      	ldr	r0, [pc, #88]	@ (8001984 <MX_TIM4_Init+0xc4>)
 800192a:	f005 fb21 	bl	8006f70 <HAL_TIMEx_MasterConfigSynchronization>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001934:	f000 f910 	bl	8001b58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001938:	2360      	movs	r3, #96	@ 0x60
 800193a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10000;
 800193c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001940:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001942:	2300      	movs	r3, #0
 8001944:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800194a:	1d3b      	adds	r3, r7, #4
 800194c:	2208      	movs	r2, #8
 800194e:	4619      	mov	r1, r3
 8001950:	480c      	ldr	r0, [pc, #48]	@ (8001984 <MX_TIM4_Init+0xc4>)
 8001952:	f004 fe9f 	bl	8006694 <HAL_TIM_PWM_ConfigChannel>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 800195c:	f000 f8fc 	bl	8001b58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001960:	1d3b      	adds	r3, r7, #4
 8001962:	220c      	movs	r2, #12
 8001964:	4619      	mov	r1, r3
 8001966:	4807      	ldr	r0, [pc, #28]	@ (8001984 <MX_TIM4_Init+0xc4>)
 8001968:	f004 fe94 	bl	8006694 <HAL_TIM_PWM_ConfigChannel>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8001972:	f000 f8f1 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001976:	4803      	ldr	r0, [pc, #12]	@ (8001984 <MX_TIM4_Init+0xc4>)
 8001978:	f000 faec 	bl	8001f54 <HAL_TIM_MspPostInit>

}
 800197c:	bf00      	nop
 800197e:	3728      	adds	r7, #40	@ 0x28
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	200006dc 	.word	0x200006dc
 8001988:	40000800 	.word	0x40000800

0800198c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001990:	4b11      	ldr	r3, [pc, #68]	@ (80019d8 <MX_USART2_UART_Init+0x4c>)
 8001992:	4a12      	ldr	r2, [pc, #72]	@ (80019dc <MX_USART2_UART_Init+0x50>)
 8001994:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001996:	4b10      	ldr	r3, [pc, #64]	@ (80019d8 <MX_USART2_UART_Init+0x4c>)
 8001998:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800199c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800199e:	4b0e      	ldr	r3, [pc, #56]	@ (80019d8 <MX_USART2_UART_Init+0x4c>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019a4:	4b0c      	ldr	r3, [pc, #48]	@ (80019d8 <MX_USART2_UART_Init+0x4c>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019aa:	4b0b      	ldr	r3, [pc, #44]	@ (80019d8 <MX_USART2_UART_Init+0x4c>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019b0:	4b09      	ldr	r3, [pc, #36]	@ (80019d8 <MX_USART2_UART_Init+0x4c>)
 80019b2:	220c      	movs	r2, #12
 80019b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019b6:	4b08      	ldr	r3, [pc, #32]	@ (80019d8 <MX_USART2_UART_Init+0x4c>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019bc:	4b06      	ldr	r3, [pc, #24]	@ (80019d8 <MX_USART2_UART_Init+0x4c>)
 80019be:	2200      	movs	r2, #0
 80019c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019c2:	4805      	ldr	r0, [pc, #20]	@ (80019d8 <MX_USART2_UART_Init+0x4c>)
 80019c4:	f005 fb50 	bl	8007068 <HAL_UART_Init>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80019ce:	f000 f8c3 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000724 	.word	0x20000724
 80019dc:	40004400 	.word	0x40004400

080019e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	607b      	str	r3, [r7, #4]
 80019ea:	4b0c      	ldr	r3, [pc, #48]	@ (8001a1c <MX_DMA_Init+0x3c>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ee:	4a0b      	ldr	r2, [pc, #44]	@ (8001a1c <MX_DMA_Init+0x3c>)
 80019f0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80019f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019f6:	4b09      	ldr	r3, [pc, #36]	@ (8001a1c <MX_DMA_Init+0x3c>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019fe:	607b      	str	r3, [r7, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001a02:	2200      	movs	r2, #0
 8001a04:	2100      	movs	r1, #0
 8001a06:	203a      	movs	r0, #58	@ 0x3a
 8001a08:	f001 f9d9 	bl	8002dbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001a0c:	203a      	movs	r0, #58	@ 0x3a
 8001a0e:	f001 f9f2 	bl	8002df6 <HAL_NVIC_EnableIRQ>

}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40023800 	.word	0x40023800

08001a20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08a      	sub	sp, #40	@ 0x28
 8001a24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a26:	f107 0314 	add.w	r3, r7, #20
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	605a      	str	r2, [r3, #4]
 8001a30:	609a      	str	r2, [r3, #8]
 8001a32:	60da      	str	r2, [r3, #12]
 8001a34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
 8001a3a:	4b43      	ldr	r3, [pc, #268]	@ (8001b48 <MX_GPIO_Init+0x128>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3e:	4a42      	ldr	r2, [pc, #264]	@ (8001b48 <MX_GPIO_Init+0x128>)
 8001a40:	f043 0304 	orr.w	r3, r3, #4
 8001a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a46:	4b40      	ldr	r3, [pc, #256]	@ (8001b48 <MX_GPIO_Init+0x128>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4a:	f003 0304 	and.w	r3, r3, #4
 8001a4e:	613b      	str	r3, [r7, #16]
 8001a50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	4b3c      	ldr	r3, [pc, #240]	@ (8001b48 <MX_GPIO_Init+0x128>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5a:	4a3b      	ldr	r2, [pc, #236]	@ (8001b48 <MX_GPIO_Init+0x128>)
 8001a5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a62:	4b39      	ldr	r3, [pc, #228]	@ (8001b48 <MX_GPIO_Init+0x128>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	4b35      	ldr	r3, [pc, #212]	@ (8001b48 <MX_GPIO_Init+0x128>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a76:	4a34      	ldr	r2, [pc, #208]	@ (8001b48 <MX_GPIO_Init+0x128>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a7e:	4b32      	ldr	r3, [pc, #200]	@ (8001b48 <MX_GPIO_Init+0x128>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	60bb      	str	r3, [r7, #8]
 8001a88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	607b      	str	r3, [r7, #4]
 8001a8e:	4b2e      	ldr	r3, [pc, #184]	@ (8001b48 <MX_GPIO_Init+0x128>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a92:	4a2d      	ldr	r2, [pc, #180]	@ (8001b48 <MX_GPIO_Init+0x128>)
 8001a94:	f043 0302 	orr.w	r3, r3, #2
 8001a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a9a:	4b2b      	ldr	r3, [pc, #172]	@ (8001b48 <MX_GPIO_Init+0x128>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	607b      	str	r3, [r7, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f240 4117 	movw	r1, #1047	@ 0x417
 8001aac:	4827      	ldr	r0, [pc, #156]	@ (8001b4c <MX_GPIO_Init+0x12c>)
 8001aae:	f001 ff3b 	bl	8003928 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_12, GPIO_PIN_RESET);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f44f 519c 	mov.w	r1, #4992	@ 0x1380
 8001ab8:	4825      	ldr	r0, [pc, #148]	@ (8001b50 <MX_GPIO_Init+0x130>)
 8001aba:	f001 ff35 	bl	8003928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8001ac4:	4823      	ldr	r0, [pc, #140]	@ (8001b54 <MX_GPIO_Init+0x134>)
 8001ac6:	f001 ff2f 	bl	8003928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001aca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ace:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ad0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001ad4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ada:	f107 0314 	add.w	r3, r7, #20
 8001ade:	4619      	mov	r1, r3
 8001ae0:	481b      	ldr	r0, [pc, #108]	@ (8001b50 <MX_GPIO_Init+0x130>)
 8001ae2:	f001 fd8d 	bl	8003600 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001ae6:	f240 4317 	movw	r3, #1047	@ 0x417
 8001aea:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aec:	2301      	movs	r3, #1
 8001aee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af4:	2300      	movs	r3, #0
 8001af6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	4619      	mov	r1, r3
 8001afe:	4813      	ldr	r0, [pc, #76]	@ (8001b4c <MX_GPIO_Init+0x12c>)
 8001b00:	f001 fd7e 	bl	8003600 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC8 PC9 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_12;
 8001b04:	f44f 539c 	mov.w	r3, #4992	@ 0x1380
 8001b08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b12:	2300      	movs	r3, #0
 8001b14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b16:	f107 0314 	add.w	r3, r7, #20
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	480c      	ldr	r0, [pc, #48]	@ (8001b50 <MX_GPIO_Init+0x130>)
 8001b1e:	f001 fd6f 	bl	8003600 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001b22:	f44f 63e4 	mov.w	r3, #1824	@ 0x720
 8001b26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b30:	2300      	movs	r3, #0
 8001b32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b34:	f107 0314 	add.w	r3, r7, #20
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4806      	ldr	r0, [pc, #24]	@ (8001b54 <MX_GPIO_Init+0x134>)
 8001b3c:	f001 fd60 	bl	8003600 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b40:	bf00      	nop
 8001b42:	3728      	adds	r7, #40	@ 0x28
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	40020400 	.word	0x40020400
 8001b50:	40020800 	.word	0x40020800
 8001b54:	40020000 	.word	0x40020000

08001b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b5c:	b672      	cpsid	i
}
 8001b5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b60:	bf00      	nop
 8001b62:	e7fd      	b.n	8001b60 <Error_Handler+0x8>

08001b64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	607b      	str	r3, [r7, #4]
 8001b6e:	4b10      	ldr	r3, [pc, #64]	@ (8001bb0 <HAL_MspInit+0x4c>)
 8001b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b72:	4a0f      	ldr	r2, [pc, #60]	@ (8001bb0 <HAL_MspInit+0x4c>)
 8001b74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b78:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb0 <HAL_MspInit+0x4c>)
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b82:	607b      	str	r3, [r7, #4]
 8001b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	603b      	str	r3, [r7, #0]
 8001b8a:	4b09      	ldr	r3, [pc, #36]	@ (8001bb0 <HAL_MspInit+0x4c>)
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8e:	4a08      	ldr	r2, [pc, #32]	@ (8001bb0 <HAL_MspInit+0x4c>)
 8001b90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b96:	4b06      	ldr	r3, [pc, #24]	@ (8001bb0 <HAL_MspInit+0x4c>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b9e:	603b      	str	r3, [r7, #0]
 8001ba0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ba2:	2007      	movs	r0, #7
 8001ba4:	f001 f900 	bl	8002da8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ba8:	bf00      	nop
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40023800 	.word	0x40023800

08001bb4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b08e      	sub	sp, #56	@ 0x38
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a5d      	ldr	r2, [pc, #372]	@ (8001d48 <HAL_ADC_MspInit+0x194>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d128      	bne.n	8001c28 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	623b      	str	r3, [r7, #32]
 8001bda:	4b5c      	ldr	r3, [pc, #368]	@ (8001d4c <HAL_ADC_MspInit+0x198>)
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bde:	4a5b      	ldr	r2, [pc, #364]	@ (8001d4c <HAL_ADC_MspInit+0x198>)
 8001be0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001be4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001be6:	4b59      	ldr	r3, [pc, #356]	@ (8001d4c <HAL_ADC_MspInit+0x198>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bee:	623b      	str	r3, [r7, #32]
 8001bf0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]
 8001bf6:	4b55      	ldr	r3, [pc, #340]	@ (8001d4c <HAL_ADC_MspInit+0x198>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfa:	4a54      	ldr	r2, [pc, #336]	@ (8001d4c <HAL_ADC_MspInit+0x198>)
 8001bfc:	f043 0304 	orr.w	r3, r3, #4
 8001c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c02:	4b52      	ldr	r3, [pc, #328]	@ (8001d4c <HAL_ADC_MspInit+0x198>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c06:	f003 0304 	and.w	r3, r3, #4
 8001c0a:	61fb      	str	r3, [r7, #28]
 8001c0c:	69fb      	ldr	r3, [r7, #28]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001c0e:	230f      	movs	r3, #15
 8001c10:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c12:	2303      	movs	r3, #3
 8001c14:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c1e:	4619      	mov	r1, r3
 8001c20:	484b      	ldr	r0, [pc, #300]	@ (8001d50 <HAL_ADC_MspInit+0x19c>)
 8001c22:	f001 fced 	bl	8003600 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001c26:	e08a      	b.n	8001d3e <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC2)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a49      	ldr	r2, [pc, #292]	@ (8001d54 <HAL_ADC_MspInit+0x1a0>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d158      	bne.n	8001ce4 <HAL_ADC_MspInit+0x130>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	61bb      	str	r3, [r7, #24]
 8001c36:	4b45      	ldr	r3, [pc, #276]	@ (8001d4c <HAL_ADC_MspInit+0x198>)
 8001c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c3a:	4a44      	ldr	r2, [pc, #272]	@ (8001d4c <HAL_ADC_MspInit+0x198>)
 8001c3c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c40:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c42:	4b42      	ldr	r3, [pc, #264]	@ (8001d4c <HAL_ADC_MspInit+0x198>)
 8001c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c4a:	61bb      	str	r3, [r7, #24]
 8001c4c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]
 8001c52:	4b3e      	ldr	r3, [pc, #248]	@ (8001d4c <HAL_ADC_MspInit+0x198>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c56:	4a3d      	ldr	r2, [pc, #244]	@ (8001d4c <HAL_ADC_MspInit+0x198>)
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c5e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d4c <HAL_ADC_MspInit+0x198>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	617b      	str	r3, [r7, #20]
 8001c68:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4836      	ldr	r0, [pc, #216]	@ (8001d58 <HAL_ADC_MspInit+0x1a4>)
 8001c7e:	f001 fcbf 	bl	8003600 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8001c82:	4b36      	ldr	r3, [pc, #216]	@ (8001d5c <HAL_ADC_MspInit+0x1a8>)
 8001c84:	4a36      	ldr	r2, [pc, #216]	@ (8001d60 <HAL_ADC_MspInit+0x1ac>)
 8001c86:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8001c88:	4b34      	ldr	r3, [pc, #208]	@ (8001d5c <HAL_ADC_MspInit+0x1a8>)
 8001c8a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c8e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c90:	4b32      	ldr	r3, [pc, #200]	@ (8001d5c <HAL_ADC_MspInit+0x1a8>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c96:	4b31      	ldr	r3, [pc, #196]	@ (8001d5c <HAL_ADC_MspInit+0x1a8>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001c9c:	4b2f      	ldr	r3, [pc, #188]	@ (8001d5c <HAL_ADC_MspInit+0x1a8>)
 8001c9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ca2:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ca4:	4b2d      	ldr	r3, [pc, #180]	@ (8001d5c <HAL_ADC_MspInit+0x1a8>)
 8001ca6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001caa:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cac:	4b2b      	ldr	r3, [pc, #172]	@ (8001d5c <HAL_ADC_MspInit+0x1a8>)
 8001cae:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cb2:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8001cb4:	4b29      	ldr	r3, [pc, #164]	@ (8001d5c <HAL_ADC_MspInit+0x1a8>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001cba:	4b28      	ldr	r3, [pc, #160]	@ (8001d5c <HAL_ADC_MspInit+0x1a8>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cc0:	4b26      	ldr	r3, [pc, #152]	@ (8001d5c <HAL_ADC_MspInit+0x1a8>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001cc6:	4825      	ldr	r0, [pc, #148]	@ (8001d5c <HAL_ADC_MspInit+0x1a8>)
 8001cc8:	f001 f92a 	bl	8002f20 <HAL_DMA_Init>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <HAL_ADC_MspInit+0x122>
      Error_Handler();
 8001cd2:	f7ff ff41 	bl	8001b58 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a20      	ldr	r2, [pc, #128]	@ (8001d5c <HAL_ADC_MspInit+0x1a8>)
 8001cda:	639a      	str	r2, [r3, #56]	@ 0x38
 8001cdc:	4a1f      	ldr	r2, [pc, #124]	@ (8001d5c <HAL_ADC_MspInit+0x1a8>)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001ce2:	e02c      	b.n	8001d3e <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a1e      	ldr	r2, [pc, #120]	@ (8001d64 <HAL_ADC_MspInit+0x1b0>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d127      	bne.n	8001d3e <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	613b      	str	r3, [r7, #16]
 8001cf2:	4b16      	ldr	r3, [pc, #88]	@ (8001d4c <HAL_ADC_MspInit+0x198>)
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf6:	4a15      	ldr	r2, [pc, #84]	@ (8001d4c <HAL_ADC_MspInit+0x198>)
 8001cf8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cfe:	4b13      	ldr	r3, [pc, #76]	@ (8001d4c <HAL_ADC_MspInit+0x198>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d06:	613b      	str	r3, [r7, #16]
 8001d08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d4c <HAL_ADC_MspInit+0x198>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d12:	4a0e      	ldr	r2, [pc, #56]	@ (8001d4c <HAL_ADC_MspInit+0x198>)
 8001d14:	f043 0301 	orr.w	r3, r3, #1
 8001d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d4c <HAL_ADC_MspInit+0x198>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001d26:	2302      	movs	r3, #2
 8001d28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d36:	4619      	mov	r1, r3
 8001d38:	4807      	ldr	r0, [pc, #28]	@ (8001d58 <HAL_ADC_MspInit+0x1a4>)
 8001d3a:	f001 fc61 	bl	8003600 <HAL_GPIO_Init>
}
 8001d3e:	bf00      	nop
 8001d40:	3738      	adds	r7, #56	@ 0x38
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40012000 	.word	0x40012000
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	40020800 	.word	0x40020800
 8001d54:	40012100 	.word	0x40012100
 8001d58:	40020000 	.word	0x40020000
 8001d5c:	200003c8 	.word	0x200003c8
 8001d60:	40026440 	.word	0x40026440
 8001d64:	40012200 	.word	0x40012200

08001d68 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08a      	sub	sp, #40	@ 0x28
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d70:	f107 0314 	add.w	r3, r7, #20
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
 8001d7e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a17      	ldr	r2, [pc, #92]	@ (8001de4 <HAL_DAC_MspInit+0x7c>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d127      	bne.n	8001dda <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	4b16      	ldr	r3, [pc, #88]	@ (8001de8 <HAL_DAC_MspInit+0x80>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d92:	4a15      	ldr	r2, [pc, #84]	@ (8001de8 <HAL_DAC_MspInit+0x80>)
 8001d94:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001d98:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d9a:	4b13      	ldr	r3, [pc, #76]	@ (8001de8 <HAL_DAC_MspInit+0x80>)
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001da2:	613b      	str	r3, [r7, #16]
 8001da4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	4b0f      	ldr	r3, [pc, #60]	@ (8001de8 <HAL_DAC_MspInit+0x80>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dae:	4a0e      	ldr	r2, [pc, #56]	@ (8001de8 <HAL_DAC_MspInit+0x80>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001db6:	4b0c      	ldr	r3, [pc, #48]	@ (8001de8 <HAL_DAC_MspInit+0x80>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001dc2:	2330      	movs	r3, #48	@ 0x30
 8001dc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dce:	f107 0314 	add.w	r3, r7, #20
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4805      	ldr	r0, [pc, #20]	@ (8001dec <HAL_DAC_MspInit+0x84>)
 8001dd6:	f001 fc13 	bl	8003600 <HAL_GPIO_Init>

  /* USER CODE END DAC_MspInit 1 */

  }

}
 8001dda:	bf00      	nop
 8001ddc:	3728      	adds	r7, #40	@ 0x28
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40007400 	.word	0x40007400
 8001de8:	40023800 	.word	0x40023800
 8001dec:	40020000 	.word	0x40020000

08001df0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b08a      	sub	sp, #40	@ 0x28
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df8:	f107 0314 	add.w	r3, r7, #20
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	60da      	str	r2, [r3, #12]
 8001e06:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a19      	ldr	r2, [pc, #100]	@ (8001e74 <HAL_SPI_MspInit+0x84>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d12c      	bne.n	8001e6c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	613b      	str	r3, [r7, #16]
 8001e16:	4b18      	ldr	r3, [pc, #96]	@ (8001e78 <HAL_SPI_MspInit+0x88>)
 8001e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1a:	4a17      	ldr	r2, [pc, #92]	@ (8001e78 <HAL_SPI_MspInit+0x88>)
 8001e1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e20:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e22:	4b15      	ldr	r3, [pc, #84]	@ (8001e78 <HAL_SPI_MspInit+0x88>)
 8001e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e2a:	613b      	str	r3, [r7, #16]
 8001e2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	4b11      	ldr	r3, [pc, #68]	@ (8001e78 <HAL_SPI_MspInit+0x88>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e36:	4a10      	ldr	r2, [pc, #64]	@ (8001e78 <HAL_SPI_MspInit+0x88>)
 8001e38:	f043 0302 	orr.w	r3, r3, #2
 8001e3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e78 <HAL_SPI_MspInit+0x88>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001e4a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001e4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e50:	2302      	movs	r3, #2
 8001e52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e5c:	2305      	movs	r3, #5
 8001e5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e60:	f107 0314 	add.w	r3, r7, #20
 8001e64:	4619      	mov	r1, r3
 8001e66:	4805      	ldr	r0, [pc, #20]	@ (8001e7c <HAL_SPI_MspInit+0x8c>)
 8001e68:	f001 fbca 	bl	8003600 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001e6c:	bf00      	nop
 8001e6e:	3728      	adds	r7, #40	@ 0x28
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40003800 	.word	0x40003800
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40020400 	.word	0x40020400

08001e80 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b08a      	sub	sp, #40	@ 0x28
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e88:	f107 0314 	add.w	r3, r7, #20
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	605a      	str	r2, [r3, #4]
 8001e92:	609a      	str	r2, [r3, #8]
 8001e94:	60da      	str	r2, [r3, #12]
 8001e96:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a19      	ldr	r2, [pc, #100]	@ (8001f04 <HAL_TIM_IC_MspInit+0x84>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d12b      	bne.n	8001efa <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	613b      	str	r3, [r7, #16]
 8001ea6:	4b18      	ldr	r3, [pc, #96]	@ (8001f08 <HAL_TIM_IC_MspInit+0x88>)
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eaa:	4a17      	ldr	r2, [pc, #92]	@ (8001f08 <HAL_TIM_IC_MspInit+0x88>)
 8001eac:	f043 0302 	orr.w	r3, r3, #2
 8001eb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eb2:	4b15      	ldr	r3, [pc, #84]	@ (8001f08 <HAL_TIM_IC_MspInit+0x88>)
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	613b      	str	r3, [r7, #16]
 8001ebc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	4b11      	ldr	r3, [pc, #68]	@ (8001f08 <HAL_TIM_IC_MspInit+0x88>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec6:	4a10      	ldr	r2, [pc, #64]	@ (8001f08 <HAL_TIM_IC_MspInit+0x88>)
 8001ec8:	f043 0301 	orr.w	r3, r3, #1
 8001ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ece:	4b0e      	ldr	r3, [pc, #56]	@ (8001f08 <HAL_TIM_IC_MspInit+0x88>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001eda:	23c0      	movs	r3, #192	@ 0xc0
 8001edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001eea:	2302      	movs	r3, #2
 8001eec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eee:	f107 0314 	add.w	r3, r7, #20
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4805      	ldr	r0, [pc, #20]	@ (8001f0c <HAL_TIM_IC_MspInit+0x8c>)
 8001ef6:	f001 fb83 	bl	8003600 <HAL_GPIO_Init>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001efa:	bf00      	nop
 8001efc:	3728      	adds	r7, #40	@ 0x28
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40000400 	.word	0x40000400
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	40020000 	.word	0x40020000

08001f10 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a0b      	ldr	r2, [pc, #44]	@ (8001f4c <HAL_TIM_PWM_MspInit+0x3c>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d10d      	bne.n	8001f3e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	4b0a      	ldr	r3, [pc, #40]	@ (8001f50 <HAL_TIM_PWM_MspInit+0x40>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2a:	4a09      	ldr	r2, [pc, #36]	@ (8001f50 <HAL_TIM_PWM_MspInit+0x40>)
 8001f2c:	f043 0304 	orr.w	r3, r3, #4
 8001f30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f32:	4b07      	ldr	r3, [pc, #28]	@ (8001f50 <HAL_TIM_PWM_MspInit+0x40>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f36:	f003 0304 	and.w	r3, r3, #4
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8001f3e:	bf00      	nop
 8001f40:	3714      	adds	r7, #20
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	40000800 	.word	0x40000800
 8001f50:	40023800 	.word	0x40023800

08001f54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b088      	sub	sp, #32
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5c:	f107 030c 	add.w	r3, r7, #12
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	60da      	str	r2, [r3, #12]
 8001f6a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a12      	ldr	r2, [pc, #72]	@ (8001fbc <HAL_TIM_MspPostInit+0x68>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d11e      	bne.n	8001fb4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	60bb      	str	r3, [r7, #8]
 8001f7a:	4b11      	ldr	r3, [pc, #68]	@ (8001fc0 <HAL_TIM_MspPostInit+0x6c>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7e:	4a10      	ldr	r2, [pc, #64]	@ (8001fc0 <HAL_TIM_MspPostInit+0x6c>)
 8001f80:	f043 0302 	orr.w	r3, r3, #2
 8001f84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f86:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc0 <HAL_TIM_MspPostInit+0x6c>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	60bb      	str	r3, [r7, #8]
 8001f90:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f92:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f96:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa8:	f107 030c 	add.w	r3, r7, #12
 8001fac:	4619      	mov	r1, r3
 8001fae:	4805      	ldr	r0, [pc, #20]	@ (8001fc4 <HAL_TIM_MspPostInit+0x70>)
 8001fb0:	f001 fb26 	bl	8003600 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001fb4:	bf00      	nop
 8001fb6:	3720      	adds	r7, #32
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40000800 	.word	0x40000800
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	40020400 	.word	0x40020400

08001fc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08a      	sub	sp, #40	@ 0x28
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd0:	f107 0314 	add.w	r3, r7, #20
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	605a      	str	r2, [r3, #4]
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	60da      	str	r2, [r3, #12]
 8001fde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a19      	ldr	r2, [pc, #100]	@ (800204c <HAL_UART_MspInit+0x84>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d12b      	bne.n	8002042 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	613b      	str	r3, [r7, #16]
 8001fee:	4b18      	ldr	r3, [pc, #96]	@ (8002050 <HAL_UART_MspInit+0x88>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff2:	4a17      	ldr	r2, [pc, #92]	@ (8002050 <HAL_UART_MspInit+0x88>)
 8001ff4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ff8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ffa:	4b15      	ldr	r3, [pc, #84]	@ (8002050 <HAL_UART_MspInit+0x88>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002002:	613b      	str	r3, [r7, #16]
 8002004:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	4b11      	ldr	r3, [pc, #68]	@ (8002050 <HAL_UART_MspInit+0x88>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200e:	4a10      	ldr	r2, [pc, #64]	@ (8002050 <HAL_UART_MspInit+0x88>)
 8002010:	f043 0301 	orr.w	r3, r3, #1
 8002014:	6313      	str	r3, [r2, #48]	@ 0x30
 8002016:	4b0e      	ldr	r3, [pc, #56]	@ (8002050 <HAL_UART_MspInit+0x88>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002022:	230c      	movs	r3, #12
 8002024:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002026:	2302      	movs	r3, #2
 8002028:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202e:	2303      	movs	r3, #3
 8002030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002032:	2307      	movs	r3, #7
 8002034:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002036:	f107 0314 	add.w	r3, r7, #20
 800203a:	4619      	mov	r1, r3
 800203c:	4805      	ldr	r0, [pc, #20]	@ (8002054 <HAL_UART_MspInit+0x8c>)
 800203e:	f001 fadf 	bl	8003600 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002042:	bf00      	nop
 8002044:	3728      	adds	r7, #40	@ 0x28
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40004400 	.word	0x40004400
 8002050:	40023800 	.word	0x40023800
 8002054:	40020000 	.word	0x40020000

08002058 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800205c:	bf00      	nop
 800205e:	e7fd      	b.n	800205c <NMI_Handler+0x4>

08002060 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002064:	bf00      	nop
 8002066:	e7fd      	b.n	8002064 <HardFault_Handler+0x4>

08002068 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800206c:	bf00      	nop
 800206e:	e7fd      	b.n	800206c <MemManage_Handler+0x4>

08002070 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002074:	bf00      	nop
 8002076:	e7fd      	b.n	8002074 <BusFault_Handler+0x4>

08002078 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800207c:	bf00      	nop
 800207e:	e7fd      	b.n	800207c <UsageFault_Handler+0x4>

08002080 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800208e:	b480      	push	{r7}
 8002090:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002092:	bf00      	nop
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020a0:	bf00      	nop
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020ae:	f000 f94f 	bl	8002350 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
	...

080020b8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80020bc:	4802      	ldr	r0, [pc, #8]	@ (80020c8 <DMA2_Stream2_IRQHandler+0x10>)
 80020be:	f001 f835 	bl	800312c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	200003c8 	.word	0x200003c8

080020cc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80020d0:	4802      	ldr	r0, [pc, #8]	@ (80020dc <OTG_FS_IRQHandler+0x10>)
 80020d2:	f001 fd8d 	bl	8003bf0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	2000215c 	.word	0x2000215c

080020e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  return 1;
 80020e4:	2301      	movs	r3, #1
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <_kill>:

int _kill(int pid, int sig)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020fa:	f00b fce5 	bl	800dac8 <__errno>
 80020fe:	4603      	mov	r3, r0
 8002100:	2216      	movs	r2, #22
 8002102:	601a      	str	r2, [r3, #0]
  return -1;
 8002104:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002108:	4618      	mov	r0, r3
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <_exit>:

void _exit (int status)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002118:	f04f 31ff 	mov.w	r1, #4294967295
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f7ff ffe7 	bl	80020f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002122:	bf00      	nop
 8002124:	e7fd      	b.n	8002122 <_exit+0x12>

08002126 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b086      	sub	sp, #24
 800212a:	af00      	add	r7, sp, #0
 800212c:	60f8      	str	r0, [r7, #12]
 800212e:	60b9      	str	r1, [r7, #8]
 8002130:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002132:	2300      	movs	r3, #0
 8002134:	617b      	str	r3, [r7, #20]
 8002136:	e00a      	b.n	800214e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002138:	f3af 8000 	nop.w
 800213c:	4601      	mov	r1, r0
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	1c5a      	adds	r2, r3, #1
 8002142:	60ba      	str	r2, [r7, #8]
 8002144:	b2ca      	uxtb	r2, r1
 8002146:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	3301      	adds	r3, #1
 800214c:	617b      	str	r3, [r7, #20]
 800214e:	697a      	ldr	r2, [r7, #20]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	429a      	cmp	r2, r3
 8002154:	dbf0      	blt.n	8002138 <_read+0x12>
  }

  return len;
 8002156:	687b      	ldr	r3, [r7, #4]
}
 8002158:	4618      	mov	r0, r3
 800215a:	3718      	adds	r7, #24
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002168:	f04f 33ff 	mov.w	r3, #4294967295
}
 800216c:	4618      	mov	r0, r3
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002188:	605a      	str	r2, [r3, #4]
  return 0;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <_isatty>:

int _isatty(int file)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021a0:	2301      	movs	r3, #1
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b085      	sub	sp, #20
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	60f8      	str	r0, [r7, #12]
 80021b6:	60b9      	str	r1, [r7, #8]
 80021b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021d0:	4a14      	ldr	r2, [pc, #80]	@ (8002224 <_sbrk+0x5c>)
 80021d2:	4b15      	ldr	r3, [pc, #84]	@ (8002228 <_sbrk+0x60>)
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021dc:	4b13      	ldr	r3, [pc, #76]	@ (800222c <_sbrk+0x64>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d102      	bne.n	80021ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021e4:	4b11      	ldr	r3, [pc, #68]	@ (800222c <_sbrk+0x64>)
 80021e6:	4a12      	ldr	r2, [pc, #72]	@ (8002230 <_sbrk+0x68>)
 80021e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021ea:	4b10      	ldr	r3, [pc, #64]	@ (800222c <_sbrk+0x64>)
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4413      	add	r3, r2
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d207      	bcs.n	8002208 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021f8:	f00b fc66 	bl	800dac8 <__errno>
 80021fc:	4603      	mov	r3, r0
 80021fe:	220c      	movs	r2, #12
 8002200:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002202:	f04f 33ff 	mov.w	r3, #4294967295
 8002206:	e009      	b.n	800221c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002208:	4b08      	ldr	r3, [pc, #32]	@ (800222c <_sbrk+0x64>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800220e:	4b07      	ldr	r3, [pc, #28]	@ (800222c <_sbrk+0x64>)
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4413      	add	r3, r2
 8002216:	4a05      	ldr	r2, [pc, #20]	@ (800222c <_sbrk+0x64>)
 8002218:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800221a:	68fb      	ldr	r3, [r7, #12]
}
 800221c:	4618      	mov	r0, r3
 800221e:	3718      	adds	r7, #24
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	20020000 	.word	0x20020000
 8002228:	00000400 	.word	0x00000400
 800222c:	20000c74 	.word	0x20000c74
 8002230:	200029b0 	.word	0x200029b0

08002234 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002238:	4b06      	ldr	r3, [pc, #24]	@ (8002254 <SystemInit+0x20>)
 800223a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800223e:	4a05      	ldr	r2, [pc, #20]	@ (8002254 <SystemInit+0x20>)
 8002240:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002244:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	e000ed00 	.word	0xe000ed00

08002258 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002258:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002290 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800225c:	f7ff ffea 	bl	8002234 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002260:	480c      	ldr	r0, [pc, #48]	@ (8002294 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002262:	490d      	ldr	r1, [pc, #52]	@ (8002298 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002264:	4a0d      	ldr	r2, [pc, #52]	@ (800229c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002266:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002268:	e002      	b.n	8002270 <LoopCopyDataInit>

0800226a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800226a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800226c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800226e:	3304      	adds	r3, #4

08002270 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002270:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002272:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002274:	d3f9      	bcc.n	800226a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002276:	4a0a      	ldr	r2, [pc, #40]	@ (80022a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002278:	4c0a      	ldr	r4, [pc, #40]	@ (80022a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800227a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800227c:	e001      	b.n	8002282 <LoopFillZerobss>

0800227e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800227e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002280:	3204      	adds	r2, #4

08002282 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002282:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002284:	d3fb      	bcc.n	800227e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002286:	f00b fc25 	bl	800dad4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800228a:	f7ff f8b3 	bl	80013f4 <main>
  bx  lr    
 800228e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002290:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002294:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002298:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 800229c:	08024aa0 	.word	0x08024aa0
  ldr r2, =_sbss
 80022a0:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 80022a4:	200029ac 	.word	0x200029ac

080022a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022a8:	e7fe      	b.n	80022a8 <ADC_IRQHandler>
	...

080022ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022b0:	4b0e      	ldr	r3, [pc, #56]	@ (80022ec <HAL_Init+0x40>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a0d      	ldr	r2, [pc, #52]	@ (80022ec <HAL_Init+0x40>)
 80022b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022bc:	4b0b      	ldr	r3, [pc, #44]	@ (80022ec <HAL_Init+0x40>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a0a      	ldr	r2, [pc, #40]	@ (80022ec <HAL_Init+0x40>)
 80022c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022c8:	4b08      	ldr	r3, [pc, #32]	@ (80022ec <HAL_Init+0x40>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a07      	ldr	r2, [pc, #28]	@ (80022ec <HAL_Init+0x40>)
 80022ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022d4:	2003      	movs	r0, #3
 80022d6:	f000 fd67 	bl	8002da8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022da:	2000      	movs	r0, #0
 80022dc:	f000 f808 	bl	80022f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022e0:	f7ff fc40 	bl	8001b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40023c00 	.word	0x40023c00

080022f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022f8:	4b12      	ldr	r3, [pc, #72]	@ (8002344 <HAL_InitTick+0x54>)
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	4b12      	ldr	r3, [pc, #72]	@ (8002348 <HAL_InitTick+0x58>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	4619      	mov	r1, r3
 8002302:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002306:	fbb3 f3f1 	udiv	r3, r3, r1
 800230a:	fbb2 f3f3 	udiv	r3, r2, r3
 800230e:	4618      	mov	r0, r3
 8002310:	f000 fd7f 	bl	8002e12 <HAL_SYSTICK_Config>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e00e      	b.n	800233c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2b0f      	cmp	r3, #15
 8002322:	d80a      	bhi.n	800233a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002324:	2200      	movs	r2, #0
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	f04f 30ff 	mov.w	r0, #4294967295
 800232c:	f000 fd47 	bl	8002dbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002330:	4a06      	ldr	r2, [pc, #24]	@ (800234c <HAL_InitTick+0x5c>)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002336:	2300      	movs	r3, #0
 8002338:	e000      	b.n	800233c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
}
 800233c:	4618      	mov	r0, r3
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	20000000 	.word	0x20000000
 8002348:	20000008 	.word	0x20000008
 800234c:	20000004 	.word	0x20000004

08002350 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002354:	4b06      	ldr	r3, [pc, #24]	@ (8002370 <HAL_IncTick+0x20>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	461a      	mov	r2, r3
 800235a:	4b06      	ldr	r3, [pc, #24]	@ (8002374 <HAL_IncTick+0x24>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4413      	add	r3, r2
 8002360:	4a04      	ldr	r2, [pc, #16]	@ (8002374 <HAL_IncTick+0x24>)
 8002362:	6013      	str	r3, [r2, #0]
}
 8002364:	bf00      	nop
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	20000008 	.word	0x20000008
 8002374:	20000c78 	.word	0x20000c78

08002378 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  return uwTick;
 800237c:	4b03      	ldr	r3, [pc, #12]	@ (800238c <HAL_GetTick+0x14>)
 800237e:	681b      	ldr	r3, [r3, #0]
}
 8002380:	4618      	mov	r0, r3
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	20000c78 	.word	0x20000c78

08002390 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002398:	f7ff ffee 	bl	8002378 <HAL_GetTick>
 800239c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a8:	d005      	beq.n	80023b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023aa:	4b0a      	ldr	r3, [pc, #40]	@ (80023d4 <HAL_Delay+0x44>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	461a      	mov	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	4413      	add	r3, r2
 80023b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023b6:	bf00      	nop
 80023b8:	f7ff ffde 	bl	8002378 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d8f7      	bhi.n	80023b8 <HAL_Delay+0x28>
  {
  }
}
 80023c8:	bf00      	nop
 80023ca:	bf00      	nop
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20000008 	.word	0x20000008

080023d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023e0:	2300      	movs	r3, #0
 80023e2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e033      	b.n	8002456 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d109      	bne.n	800240a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7ff fbdc 	bl	8001bb4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240e:	f003 0310 	and.w	r3, r3, #16
 8002412:	2b00      	cmp	r3, #0
 8002414:	d118      	bne.n	8002448 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800241e:	f023 0302 	bic.w	r3, r3, #2
 8002422:	f043 0202 	orr.w	r2, r3, #2
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 fa6e 	bl	800290c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243a:	f023 0303 	bic.w	r3, r3, #3
 800243e:	f043 0201 	orr.w	r2, r3, #1
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	641a      	str	r2, [r3, #64]	@ 0x40
 8002446:	e001      	b.n	800244c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002454:	7bfb      	ldrb	r3, [r7, #15]
}
 8002456:	4618      	mov	r0, r3
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
	...

08002460 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800246c:	2300      	movs	r3, #0
 800246e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002476:	2b01      	cmp	r3, #1
 8002478:	d101      	bne.n	800247e <HAL_ADC_Start_DMA+0x1e>
 800247a:	2302      	movs	r3, #2
 800247c:	e0e9      	b.n	8002652 <HAL_ADC_Start_DMA+0x1f2>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	2b01      	cmp	r3, #1
 8002492:	d018      	beq.n	80024c6 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	689a      	ldr	r2, [r3, #8]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 0201 	orr.w	r2, r2, #1
 80024a2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024a4:	4b6d      	ldr	r3, [pc, #436]	@ (800265c <HAL_ADC_Start_DMA+0x1fc>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a6d      	ldr	r2, [pc, #436]	@ (8002660 <HAL_ADC_Start_DMA+0x200>)
 80024aa:	fba2 2303 	umull	r2, r3, r2, r3
 80024ae:	0c9a      	lsrs	r2, r3, #18
 80024b0:	4613      	mov	r3, r2
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	4413      	add	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80024b8:	e002      	b.n	80024c0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	3b01      	subs	r3, #1
 80024be:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f9      	bne.n	80024ba <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024d4:	d107      	bne.n	80024e6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024e4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	f040 80a1 	bne.w	8002638 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fa:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80024fe:	f023 0301 	bic.w	r3, r3, #1
 8002502:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002514:	2b00      	cmp	r3, #0
 8002516:	d007      	beq.n	8002528 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002520:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002530:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002534:	d106      	bne.n	8002544 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800253a:	f023 0206 	bic.w	r2, r3, #6
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	645a      	str	r2, [r3, #68]	@ 0x44
 8002542:	e002      	b.n	800254a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002552:	4b44      	ldr	r3, [pc, #272]	@ (8002664 <HAL_ADC_Start_DMA+0x204>)
 8002554:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800255a:	4a43      	ldr	r2, [pc, #268]	@ (8002668 <HAL_ADC_Start_DMA+0x208>)
 800255c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002562:	4a42      	ldr	r2, [pc, #264]	@ (800266c <HAL_ADC_Start_DMA+0x20c>)
 8002564:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800256a:	4a41      	ldr	r2, [pc, #260]	@ (8002670 <HAL_ADC_Start_DMA+0x210>)
 800256c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002576:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002586:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002596:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	334c      	adds	r3, #76	@ 0x4c
 80025a2:	4619      	mov	r1, r3
 80025a4:	68ba      	ldr	r2, [r7, #8]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f000 fd68 	bl	800307c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f003 031f 	and.w	r3, r3, #31
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d12a      	bne.n	800260e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a2d      	ldr	r2, [pc, #180]	@ (8002674 <HAL_ADC_Start_DMA+0x214>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d015      	beq.n	80025ee <HAL_ADC_Start_DMA+0x18e>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a2c      	ldr	r2, [pc, #176]	@ (8002678 <HAL_ADC_Start_DMA+0x218>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d105      	bne.n	80025d8 <HAL_ADC_Start_DMA+0x178>
 80025cc:	4b25      	ldr	r3, [pc, #148]	@ (8002664 <HAL_ADC_Start_DMA+0x204>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f003 031f 	and.w	r3, r3, #31
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00a      	beq.n	80025ee <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a27      	ldr	r2, [pc, #156]	@ (800267c <HAL_ADC_Start_DMA+0x21c>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d136      	bne.n	8002650 <HAL_ADC_Start_DMA+0x1f0>
 80025e2:	4b20      	ldr	r3, [pc, #128]	@ (8002664 <HAL_ADC_Start_DMA+0x204>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f003 0310 	and.w	r3, r3, #16
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d130      	bne.n	8002650 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d129      	bne.n	8002650 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	e020      	b.n	8002650 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a18      	ldr	r2, [pc, #96]	@ (8002674 <HAL_ADC_Start_DMA+0x214>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d11b      	bne.n	8002650 <HAL_ADC_Start_DMA+0x1f0>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d114      	bne.n	8002650 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002634:	609a      	str	r2, [r3, #8]
 8002636:	e00b      	b.n	8002650 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263c:	f043 0210 	orr.w	r2, r3, #16
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002648:	f043 0201 	orr.w	r2, r3, #1
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3718      	adds	r7, #24
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	20000000 	.word	0x20000000
 8002660:	431bde83 	.word	0x431bde83
 8002664:	40012300 	.word	0x40012300
 8002668:	08002b05 	.word	0x08002b05
 800266c:	08002bbf 	.word	0x08002bbf
 8002670:	08002bdb 	.word	0x08002bdb
 8002674:	40012000 	.word	0x40012000
 8002678:	40012100 	.word	0x40012100
 800267c:	40012200 	.word	0x40012200

08002680 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80026b2:	2300      	movs	r3, #0
 80026b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d101      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x1c>
 80026c0:	2302      	movs	r3, #2
 80026c2:	e113      	b.n	80028ec <HAL_ADC_ConfigChannel+0x244>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2b09      	cmp	r3, #9
 80026d2:	d925      	bls.n	8002720 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68d9      	ldr	r1, [r3, #12]
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	b29b      	uxth	r3, r3
 80026e0:	461a      	mov	r2, r3
 80026e2:	4613      	mov	r3, r2
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	4413      	add	r3, r2
 80026e8:	3b1e      	subs	r3, #30
 80026ea:	2207      	movs	r2, #7
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	43da      	mvns	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	400a      	ands	r2, r1
 80026f8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68d9      	ldr	r1, [r3, #12]
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	b29b      	uxth	r3, r3
 800270a:	4618      	mov	r0, r3
 800270c:	4603      	mov	r3, r0
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	4403      	add	r3, r0
 8002712:	3b1e      	subs	r3, #30
 8002714:	409a      	lsls	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	60da      	str	r2, [r3, #12]
 800271e:	e022      	b.n	8002766 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6919      	ldr	r1, [r3, #16]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	b29b      	uxth	r3, r3
 800272c:	461a      	mov	r2, r3
 800272e:	4613      	mov	r3, r2
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	4413      	add	r3, r2
 8002734:	2207      	movs	r2, #7
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	43da      	mvns	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	400a      	ands	r2, r1
 8002742:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6919      	ldr	r1, [r3, #16]
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	689a      	ldr	r2, [r3, #8]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	b29b      	uxth	r3, r3
 8002754:	4618      	mov	r0, r3
 8002756:	4603      	mov	r3, r0
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	4403      	add	r3, r0
 800275c:	409a      	lsls	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	430a      	orrs	r2, r1
 8002764:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b06      	cmp	r3, #6
 800276c:	d824      	bhi.n	80027b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	4613      	mov	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4413      	add	r3, r2
 800277e:	3b05      	subs	r3, #5
 8002780:	221f      	movs	r2, #31
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43da      	mvns	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	400a      	ands	r2, r1
 800278e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	b29b      	uxth	r3, r3
 800279c:	4618      	mov	r0, r3
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685a      	ldr	r2, [r3, #4]
 80027a2:	4613      	mov	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	4413      	add	r3, r2
 80027a8:	3b05      	subs	r3, #5
 80027aa:	fa00 f203 	lsl.w	r2, r0, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80027b6:	e04c      	b.n	8002852 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	2b0c      	cmp	r3, #12
 80027be:	d824      	bhi.n	800280a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685a      	ldr	r2, [r3, #4]
 80027ca:	4613      	mov	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	4413      	add	r3, r2
 80027d0:	3b23      	subs	r3, #35	@ 0x23
 80027d2:	221f      	movs	r2, #31
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	43da      	mvns	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	400a      	ands	r2, r1
 80027e0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	4618      	mov	r0, r3
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	4613      	mov	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	3b23      	subs	r3, #35	@ 0x23
 80027fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	430a      	orrs	r2, r1
 8002806:	631a      	str	r2, [r3, #48]	@ 0x30
 8002808:	e023      	b.n	8002852 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	4613      	mov	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	3b41      	subs	r3, #65	@ 0x41
 800281c:	221f      	movs	r2, #31
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43da      	mvns	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	400a      	ands	r2, r1
 800282a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	b29b      	uxth	r3, r3
 8002838:	4618      	mov	r0, r3
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685a      	ldr	r2, [r3, #4]
 800283e:	4613      	mov	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4413      	add	r3, r2
 8002844:	3b41      	subs	r3, #65	@ 0x41
 8002846:	fa00 f203 	lsl.w	r2, r0, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	430a      	orrs	r2, r1
 8002850:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002852:	4b29      	ldr	r3, [pc, #164]	@ (80028f8 <HAL_ADC_ConfigChannel+0x250>)
 8002854:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a28      	ldr	r2, [pc, #160]	@ (80028fc <HAL_ADC_ConfigChannel+0x254>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d10f      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x1d8>
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2b12      	cmp	r3, #18
 8002866:	d10b      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a1d      	ldr	r2, [pc, #116]	@ (80028fc <HAL_ADC_ConfigChannel+0x254>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d12b      	bne.n	80028e2 <HAL_ADC_ConfigChannel+0x23a>
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a1c      	ldr	r2, [pc, #112]	@ (8002900 <HAL_ADC_ConfigChannel+0x258>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d003      	beq.n	800289c <HAL_ADC_ConfigChannel+0x1f4>
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2b11      	cmp	r3, #17
 800289a:	d122      	bne.n	80028e2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a11      	ldr	r2, [pc, #68]	@ (8002900 <HAL_ADC_ConfigChannel+0x258>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d111      	bne.n	80028e2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028be:	4b11      	ldr	r3, [pc, #68]	@ (8002904 <HAL_ADC_ConfigChannel+0x25c>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a11      	ldr	r2, [pc, #68]	@ (8002908 <HAL_ADC_ConfigChannel+0x260>)
 80028c4:	fba2 2303 	umull	r2, r3, r2, r3
 80028c8:	0c9a      	lsrs	r2, r3, #18
 80028ca:	4613      	mov	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80028d4:	e002      	b.n	80028dc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	3b01      	subs	r3, #1
 80028da:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1f9      	bne.n	80028d6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	40012300 	.word	0x40012300
 80028fc:	40012000 	.word	0x40012000
 8002900:	10000012 	.word	0x10000012
 8002904:	20000000 	.word	0x20000000
 8002908:	431bde83 	.word	0x431bde83

0800290c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002914:	4b79      	ldr	r3, [pc, #484]	@ (8002afc <ADC_Init+0x1f0>)
 8002916:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	431a      	orrs	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002940:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	6859      	ldr	r1, [r3, #4]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	021a      	lsls	r2, r3, #8
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	430a      	orrs	r2, r1
 8002954:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002964:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	6859      	ldr	r1, [r3, #4]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	430a      	orrs	r2, r1
 8002976:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002986:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6899      	ldr	r1, [r3, #8]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68da      	ldr	r2, [r3, #12]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	430a      	orrs	r2, r1
 8002998:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800299e:	4a58      	ldr	r2, [pc, #352]	@ (8002b00 <ADC_Init+0x1f4>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d022      	beq.n	80029ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689a      	ldr	r2, [r3, #8]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80029b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6899      	ldr	r1, [r3, #8]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80029d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6899      	ldr	r1, [r3, #8]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	430a      	orrs	r2, r1
 80029e6:	609a      	str	r2, [r3, #8]
 80029e8:	e00f      	b.n	8002a0a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80029f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002a08:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 0202 	bic.w	r2, r2, #2
 8002a18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6899      	ldr	r1, [r3, #8]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	7e1b      	ldrb	r3, [r3, #24]
 8002a24:	005a      	lsls	r2, r3, #1
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d01b      	beq.n	8002a70 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a46:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002a56:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6859      	ldr	r1, [r3, #4]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a62:	3b01      	subs	r3, #1
 8002a64:	035a      	lsls	r2, r3, #13
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	605a      	str	r2, [r3, #4]
 8002a6e:	e007      	b.n	8002a80 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	685a      	ldr	r2, [r3, #4]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a7e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002a8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	051a      	lsls	r2, r3, #20
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689a      	ldr	r2, [r3, #8]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002ab4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	6899      	ldr	r1, [r3, #8]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002ac2:	025a      	lsls	r2, r3, #9
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689a      	ldr	r2, [r3, #8]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ada:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6899      	ldr	r1, [r3, #8]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	029a      	lsls	r2, r3, #10
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	609a      	str	r2, [r3, #8]
}
 8002af0:	bf00      	nop
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	40012300 	.word	0x40012300
 8002b00:	0f000001 	.word	0x0f000001

08002b04 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b10:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b16:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d13c      	bne.n	8002b98 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b22:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d12b      	bne.n	8002b90 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d127      	bne.n	8002b90 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b46:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d006      	beq.n	8002b5c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d119      	bne.n	8002b90 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f022 0220 	bic.w	r2, r2, #32
 8002b6a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b70:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d105      	bne.n	8002b90 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b88:	f043 0201 	orr.w	r2, r3, #1
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f7fe fc19 	bl	80013c8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b96:	e00e      	b.n	8002bb6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9c:	f003 0310 	and.w	r3, r3, #16
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d003      	beq.n	8002bac <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f7ff fd75 	bl	8002694 <HAL_ADC_ErrorCallback>
}
 8002baa:	e004      	b.n	8002bb6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	4798      	blx	r3
}
 8002bb6:	bf00      	nop
 8002bb8:	3710      	adds	r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b084      	sub	sp, #16
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bca:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f7ff fd57 	bl	8002680 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bd2:	bf00      	nop
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b084      	sub	sp, #16
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2240      	movs	r2, #64	@ 0x40
 8002bec:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bf2:	f043 0204 	orr.w	r2, r3, #4
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f7ff fd4a 	bl	8002694 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c00:	bf00      	nop
 8002c02:	3710      	adds	r7, #16
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c18:	4b0c      	ldr	r3, [pc, #48]	@ (8002c4c <__NVIC_SetPriorityGrouping+0x44>)
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c1e:	68ba      	ldr	r2, [r7, #8]
 8002c20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c24:	4013      	ands	r3, r2
 8002c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c3a:	4a04      	ldr	r2, [pc, #16]	@ (8002c4c <__NVIC_SetPriorityGrouping+0x44>)
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	60d3      	str	r3, [r2, #12]
}
 8002c40:	bf00      	nop
 8002c42:	3714      	adds	r7, #20
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	e000ed00 	.word	0xe000ed00

08002c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c54:	4b04      	ldr	r3, [pc, #16]	@ (8002c68 <__NVIC_GetPriorityGrouping+0x18>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	0a1b      	lsrs	r3, r3, #8
 8002c5a:	f003 0307 	and.w	r3, r3, #7
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	e000ed00 	.word	0xe000ed00

08002c6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	4603      	mov	r3, r0
 8002c74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	db0b      	blt.n	8002c96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c7e:	79fb      	ldrb	r3, [r7, #7]
 8002c80:	f003 021f 	and.w	r2, r3, #31
 8002c84:	4907      	ldr	r1, [pc, #28]	@ (8002ca4 <__NVIC_EnableIRQ+0x38>)
 8002c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8a:	095b      	lsrs	r3, r3, #5
 8002c8c:	2001      	movs	r0, #1
 8002c8e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c96:	bf00      	nop
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	e000e100 	.word	0xe000e100

08002ca8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	4603      	mov	r3, r0
 8002cb0:	6039      	str	r1, [r7, #0]
 8002cb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	db0a      	blt.n	8002cd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	b2da      	uxtb	r2, r3
 8002cc0:	490c      	ldr	r1, [pc, #48]	@ (8002cf4 <__NVIC_SetPriority+0x4c>)
 8002cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc6:	0112      	lsls	r2, r2, #4
 8002cc8:	b2d2      	uxtb	r2, r2
 8002cca:	440b      	add	r3, r1
 8002ccc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cd0:	e00a      	b.n	8002ce8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	b2da      	uxtb	r2, r3
 8002cd6:	4908      	ldr	r1, [pc, #32]	@ (8002cf8 <__NVIC_SetPriority+0x50>)
 8002cd8:	79fb      	ldrb	r3, [r7, #7]
 8002cda:	f003 030f 	and.w	r3, r3, #15
 8002cde:	3b04      	subs	r3, #4
 8002ce0:	0112      	lsls	r2, r2, #4
 8002ce2:	b2d2      	uxtb	r2, r2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	761a      	strb	r2, [r3, #24]
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr
 8002cf4:	e000e100 	.word	0xe000e100
 8002cf8:	e000ed00 	.word	0xe000ed00

08002cfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b089      	sub	sp, #36	@ 0x24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f003 0307 	and.w	r3, r3, #7
 8002d0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	f1c3 0307 	rsb	r3, r3, #7
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	bf28      	it	cs
 8002d1a:	2304      	movcs	r3, #4
 8002d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	3304      	adds	r3, #4
 8002d22:	2b06      	cmp	r3, #6
 8002d24:	d902      	bls.n	8002d2c <NVIC_EncodePriority+0x30>
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	3b03      	subs	r3, #3
 8002d2a:	e000      	b.n	8002d2e <NVIC_EncodePriority+0x32>
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d30:	f04f 32ff 	mov.w	r2, #4294967295
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3a:	43da      	mvns	r2, r3
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	401a      	ands	r2, r3
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d44:	f04f 31ff 	mov.w	r1, #4294967295
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4e:	43d9      	mvns	r1, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d54:	4313      	orrs	r3, r2
         );
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3724      	adds	r7, #36	@ 0x24
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
	...

08002d64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d74:	d301      	bcc.n	8002d7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d76:	2301      	movs	r3, #1
 8002d78:	e00f      	b.n	8002d9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d7a:	4a0a      	ldr	r2, [pc, #40]	@ (8002da4 <SysTick_Config+0x40>)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d82:	210f      	movs	r1, #15
 8002d84:	f04f 30ff 	mov.w	r0, #4294967295
 8002d88:	f7ff ff8e 	bl	8002ca8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d8c:	4b05      	ldr	r3, [pc, #20]	@ (8002da4 <SysTick_Config+0x40>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d92:	4b04      	ldr	r3, [pc, #16]	@ (8002da4 <SysTick_Config+0x40>)
 8002d94:	2207      	movs	r2, #7
 8002d96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	e000e010 	.word	0xe000e010

08002da8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f7ff ff29 	bl	8002c08 <__NVIC_SetPriorityGrouping>
}
 8002db6:	bf00      	nop
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b086      	sub	sp, #24
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	60b9      	str	r1, [r7, #8]
 8002dc8:	607a      	str	r2, [r7, #4]
 8002dca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dd0:	f7ff ff3e 	bl	8002c50 <__NVIC_GetPriorityGrouping>
 8002dd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	68b9      	ldr	r1, [r7, #8]
 8002dda:	6978      	ldr	r0, [r7, #20]
 8002ddc:	f7ff ff8e 	bl	8002cfc <NVIC_EncodePriority>
 8002de0:	4602      	mov	r2, r0
 8002de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002de6:	4611      	mov	r1, r2
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff ff5d 	bl	8002ca8 <__NVIC_SetPriority>
}
 8002dee:	bf00      	nop
 8002df0:	3718      	adds	r7, #24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b082      	sub	sp, #8
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff ff31 	bl	8002c6c <__NVIC_EnableIRQ>
}
 8002e0a:	bf00      	nop
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b082      	sub	sp, #8
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7ff ffa2 	bl	8002d64 <SysTick_Config>
 8002e20:	4603      	mov	r3, r0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b082      	sub	sp, #8
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d101      	bne.n	8002e3c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e014      	b.n	8002e66 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	791b      	ldrb	r3, [r3, #4]
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d105      	bne.n	8002e52 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f7fe ff8b 	bl	8001d68 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2202      	movs	r2, #2
 8002e56:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b089      	sub	sp, #36	@ 0x24
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	60f8      	str	r0, [r7, #12]
 8002e76:	60b9      	str	r1, [r7, #8]
 8002e78:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d002      	beq.n	8002e8a <HAL_DAC_ConfigChannel+0x1c>
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e042      	b.n	8002f14 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	795b      	ldrb	r3, [r3, #5]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d101      	bne.n	8002e9a <HAL_DAC_ConfigChannel+0x2c>
 8002e96:	2302      	movs	r3, #2
 8002e98:	e03c      	b.n	8002f14 <HAL_DAC_ConfigChannel+0xa6>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f003 0310 	and.w	r3, r3, #16
 8002eb4:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f003 0310 	and.w	r3, r3, #16
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6819      	ldr	r1, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f003 0310 	and.w	r3, r3, #16
 8002ef6:	22c0      	movs	r2, #192	@ 0xc0
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	43da      	mvns	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	400a      	ands	r2, r1
 8002f04:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002f12:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3724      	adds	r7, #36	@ 0x24
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f2c:	f7ff fa24 	bl	8002378 <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e099      	b.n	8003070 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2202      	movs	r2, #2
 8002f40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 0201 	bic.w	r2, r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f5c:	e00f      	b.n	8002f7e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f5e:	f7ff fa0b 	bl	8002378 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b05      	cmp	r3, #5
 8002f6a:	d908      	bls.n	8002f7e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2220      	movs	r2, #32
 8002f70:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2203      	movs	r2, #3
 8002f76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e078      	b.n	8003070 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0301 	and.w	r3, r3, #1
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1e8      	bne.n	8002f5e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	4b38      	ldr	r3, [pc, #224]	@ (8003078 <HAL_DMA_Init+0x158>)
 8002f98:	4013      	ands	r3, r2
 8002f9a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685a      	ldr	r2, [r3, #4]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002faa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fc2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd4:	2b04      	cmp	r3, #4
 8002fd6:	d107      	bne.n	8002fe8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	f023 0307 	bic.w	r3, r3, #7
 8002ffe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	4313      	orrs	r3, r2
 8003008:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300e:	2b04      	cmp	r3, #4
 8003010:	d117      	bne.n	8003042 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	4313      	orrs	r3, r2
 800301a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00e      	beq.n	8003042 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 fa6f 	bl	8003508 <DMA_CheckFifoParam>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d008      	beq.n	8003042 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2240      	movs	r2, #64	@ 0x40
 8003034:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2201      	movs	r2, #1
 800303a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800303e:	2301      	movs	r3, #1
 8003040:	e016      	b.n	8003070 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 fa26 	bl	800349c <DMA_CalcBaseAndBitshift>
 8003050:	4603      	mov	r3, r0
 8003052:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003058:	223f      	movs	r2, #63	@ 0x3f
 800305a:	409a      	lsls	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	f010803f 	.word	0xf010803f

0800307c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
 8003088:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800308a:	2300      	movs	r3, #0
 800308c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003092:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800309a:	2b01      	cmp	r3, #1
 800309c:	d101      	bne.n	80030a2 <HAL_DMA_Start_IT+0x26>
 800309e:	2302      	movs	r3, #2
 80030a0:	e040      	b.n	8003124 <HAL_DMA_Start_IT+0xa8>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2201      	movs	r2, #1
 80030a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d12f      	bne.n	8003116 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2202      	movs	r2, #2
 80030ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	68b9      	ldr	r1, [r7, #8]
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 f9b8 	bl	8003440 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d4:	223f      	movs	r2, #63	@ 0x3f
 80030d6:	409a      	lsls	r2, r3
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f042 0216 	orr.w	r2, r2, #22
 80030ea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d007      	beq.n	8003104 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f042 0208 	orr.w	r2, r2, #8
 8003102:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f042 0201 	orr.w	r2, r2, #1
 8003112:	601a      	str	r2, [r3, #0]
 8003114:	e005      	b.n	8003122 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800311e:	2302      	movs	r3, #2
 8003120:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003122:	7dfb      	ldrb	r3, [r7, #23]
}
 8003124:	4618      	mov	r0, r3
 8003126:	3718      	adds	r7, #24
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003134:	2300      	movs	r3, #0
 8003136:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003138:	4b8e      	ldr	r3, [pc, #568]	@ (8003374 <HAL_DMA_IRQHandler+0x248>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a8e      	ldr	r2, [pc, #568]	@ (8003378 <HAL_DMA_IRQHandler+0x24c>)
 800313e:	fba2 2303 	umull	r2, r3, r2, r3
 8003142:	0a9b      	lsrs	r3, r3, #10
 8003144:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800314a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003156:	2208      	movs	r2, #8
 8003158:	409a      	lsls	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	4013      	ands	r3, r2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d01a      	beq.n	8003198 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b00      	cmp	r3, #0
 800316e:	d013      	beq.n	8003198 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f022 0204 	bic.w	r2, r2, #4
 800317e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003184:	2208      	movs	r2, #8
 8003186:	409a      	lsls	r2, r3
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003190:	f043 0201 	orr.w	r2, r3, #1
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800319c:	2201      	movs	r2, #1
 800319e:	409a      	lsls	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	4013      	ands	r3, r2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d012      	beq.n	80031ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00b      	beq.n	80031ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ba:	2201      	movs	r2, #1
 80031bc:	409a      	lsls	r2, r3
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031c6:	f043 0202 	orr.w	r2, r3, #2
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031d2:	2204      	movs	r2, #4
 80031d4:	409a      	lsls	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	4013      	ands	r3, r2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d012      	beq.n	8003204 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00b      	beq.n	8003204 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031f0:	2204      	movs	r2, #4
 80031f2:	409a      	lsls	r2, r3
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031fc:	f043 0204 	orr.w	r2, r3, #4
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003208:	2210      	movs	r2, #16
 800320a:	409a      	lsls	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	4013      	ands	r3, r2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d043      	beq.n	800329c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0308 	and.w	r3, r3, #8
 800321e:	2b00      	cmp	r3, #0
 8003220:	d03c      	beq.n	800329c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003226:	2210      	movs	r2, #16
 8003228:	409a      	lsls	r2, r3
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d018      	beq.n	800326e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d108      	bne.n	800325c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324e:	2b00      	cmp	r3, #0
 8003250:	d024      	beq.n	800329c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	4798      	blx	r3
 800325a:	e01f      	b.n	800329c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003260:	2b00      	cmp	r3, #0
 8003262:	d01b      	beq.n	800329c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	4798      	blx	r3
 800326c:	e016      	b.n	800329c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003278:	2b00      	cmp	r3, #0
 800327a:	d107      	bne.n	800328c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0208 	bic.w	r2, r2, #8
 800328a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003290:	2b00      	cmp	r3, #0
 8003292:	d003      	beq.n	800329c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032a0:	2220      	movs	r2, #32
 80032a2:	409a      	lsls	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4013      	ands	r3, r2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f000 808f 	beq.w	80033cc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0310 	and.w	r3, r3, #16
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f000 8087 	beq.w	80033cc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032c2:	2220      	movs	r2, #32
 80032c4:	409a      	lsls	r2, r3
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b05      	cmp	r3, #5
 80032d4:	d136      	bne.n	8003344 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f022 0216 	bic.w	r2, r2, #22
 80032e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	695a      	ldr	r2, [r3, #20]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d103      	bne.n	8003306 <HAL_DMA_IRQHandler+0x1da>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003302:	2b00      	cmp	r3, #0
 8003304:	d007      	beq.n	8003316 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 0208 	bic.w	r2, r2, #8
 8003314:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800331a:	223f      	movs	r2, #63	@ 0x3f
 800331c:	409a      	lsls	r2, r3
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003336:	2b00      	cmp	r3, #0
 8003338:	d07e      	beq.n	8003438 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	4798      	blx	r3
        }
        return;
 8003342:	e079      	b.n	8003438 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d01d      	beq.n	800338e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d10d      	bne.n	800337c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003364:	2b00      	cmp	r3, #0
 8003366:	d031      	beq.n	80033cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	4798      	blx	r3
 8003370:	e02c      	b.n	80033cc <HAL_DMA_IRQHandler+0x2a0>
 8003372:	bf00      	nop
 8003374:	20000000 	.word	0x20000000
 8003378:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003380:	2b00      	cmp	r3, #0
 8003382:	d023      	beq.n	80033cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	4798      	blx	r3
 800338c:	e01e      	b.n	80033cc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003398:	2b00      	cmp	r3, #0
 800339a:	d10f      	bne.n	80033bc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 0210 	bic.w	r2, r2, #16
 80033aa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d003      	beq.n	80033cc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d032      	beq.n	800343a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d022      	beq.n	8003426 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2205      	movs	r2, #5
 80033e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 0201 	bic.w	r2, r2, #1
 80033f6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	3301      	adds	r3, #1
 80033fc:	60bb      	str	r3, [r7, #8]
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	429a      	cmp	r2, r3
 8003402:	d307      	bcc.n	8003414 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1f2      	bne.n	80033f8 <HAL_DMA_IRQHandler+0x2cc>
 8003412:	e000      	b.n	8003416 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003414:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800342a:	2b00      	cmp	r3, #0
 800342c:	d005      	beq.n	800343a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	4798      	blx	r3
 8003436:	e000      	b.n	800343a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003438:	bf00      	nop
    }
  }
}
 800343a:	3718      	adds	r7, #24
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
 800344c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800345c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	2b40      	cmp	r3, #64	@ 0x40
 800346c:	d108      	bne.n	8003480 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800347e:	e007      	b.n	8003490 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68ba      	ldr	r2, [r7, #8]
 8003486:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	60da      	str	r2, [r3, #12]
}
 8003490:	bf00      	nop
 8003492:	3714      	adds	r7, #20
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	3b10      	subs	r3, #16
 80034ac:	4a14      	ldr	r2, [pc, #80]	@ (8003500 <DMA_CalcBaseAndBitshift+0x64>)
 80034ae:	fba2 2303 	umull	r2, r3, r2, r3
 80034b2:	091b      	lsrs	r3, r3, #4
 80034b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80034b6:	4a13      	ldr	r2, [pc, #76]	@ (8003504 <DMA_CalcBaseAndBitshift+0x68>)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	4413      	add	r3, r2
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	461a      	mov	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2b03      	cmp	r3, #3
 80034c8:	d909      	bls.n	80034de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80034d2:	f023 0303 	bic.w	r3, r3, #3
 80034d6:	1d1a      	adds	r2, r3, #4
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	659a      	str	r2, [r3, #88]	@ 0x58
 80034dc:	e007      	b.n	80034ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80034e6:	f023 0303 	bic.w	r3, r3, #3
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3714      	adds	r7, #20
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	aaaaaaab 	.word	0xaaaaaaab
 8003504:	08011204 	.word	0x08011204

08003508 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003510:	2300      	movs	r3, #0
 8003512:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003518:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d11f      	bne.n	8003562 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	2b03      	cmp	r3, #3
 8003526:	d856      	bhi.n	80035d6 <DMA_CheckFifoParam+0xce>
 8003528:	a201      	add	r2, pc, #4	@ (adr r2, 8003530 <DMA_CheckFifoParam+0x28>)
 800352a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352e:	bf00      	nop
 8003530:	08003541 	.word	0x08003541
 8003534:	08003553 	.word	0x08003553
 8003538:	08003541 	.word	0x08003541
 800353c:	080035d7 	.word	0x080035d7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003544:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d046      	beq.n	80035da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003550:	e043      	b.n	80035da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003556:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800355a:	d140      	bne.n	80035de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003560:	e03d      	b.n	80035de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800356a:	d121      	bne.n	80035b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	2b03      	cmp	r3, #3
 8003570:	d837      	bhi.n	80035e2 <DMA_CheckFifoParam+0xda>
 8003572:	a201      	add	r2, pc, #4	@ (adr r2, 8003578 <DMA_CheckFifoParam+0x70>)
 8003574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003578:	08003589 	.word	0x08003589
 800357c:	0800358f 	.word	0x0800358f
 8003580:	08003589 	.word	0x08003589
 8003584:	080035a1 	.word	0x080035a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	73fb      	strb	r3, [r7, #15]
      break;
 800358c:	e030      	b.n	80035f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003592:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d025      	beq.n	80035e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800359e:	e022      	b.n	80035e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80035a8:	d11f      	bne.n	80035ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80035ae:	e01c      	b.n	80035ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d903      	bls.n	80035be <DMA_CheckFifoParam+0xb6>
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	2b03      	cmp	r3, #3
 80035ba:	d003      	beq.n	80035c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80035bc:	e018      	b.n	80035f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	73fb      	strb	r3, [r7, #15]
      break;
 80035c2:	e015      	b.n	80035f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00e      	beq.n	80035ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	73fb      	strb	r3, [r7, #15]
      break;
 80035d4:	e00b      	b.n	80035ee <DMA_CheckFifoParam+0xe6>
      break;
 80035d6:	bf00      	nop
 80035d8:	e00a      	b.n	80035f0 <DMA_CheckFifoParam+0xe8>
      break;
 80035da:	bf00      	nop
 80035dc:	e008      	b.n	80035f0 <DMA_CheckFifoParam+0xe8>
      break;
 80035de:	bf00      	nop
 80035e0:	e006      	b.n	80035f0 <DMA_CheckFifoParam+0xe8>
      break;
 80035e2:	bf00      	nop
 80035e4:	e004      	b.n	80035f0 <DMA_CheckFifoParam+0xe8>
      break;
 80035e6:	bf00      	nop
 80035e8:	e002      	b.n	80035f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80035ea:	bf00      	nop
 80035ec:	e000      	b.n	80035f0 <DMA_CheckFifoParam+0xe8>
      break;
 80035ee:	bf00      	nop
    }
  } 
  
  return status; 
 80035f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3714      	adds	r7, #20
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop

08003600 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003600:	b480      	push	{r7}
 8003602:	b089      	sub	sp, #36	@ 0x24
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800360a:	2300      	movs	r3, #0
 800360c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800360e:	2300      	movs	r3, #0
 8003610:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003612:	2300      	movs	r3, #0
 8003614:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003616:	2300      	movs	r3, #0
 8003618:	61fb      	str	r3, [r7, #28]
 800361a:	e165      	b.n	80038e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800361c:	2201      	movs	r2, #1
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	fa02 f303 	lsl.w	r3, r2, r3
 8003624:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	4013      	ands	r3, r2
 800362e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	429a      	cmp	r2, r3
 8003636:	f040 8154 	bne.w	80038e2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f003 0303 	and.w	r3, r3, #3
 8003642:	2b01      	cmp	r3, #1
 8003644:	d005      	beq.n	8003652 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800364e:	2b02      	cmp	r3, #2
 8003650:	d130      	bne.n	80036b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	2203      	movs	r2, #3
 800365e:	fa02 f303 	lsl.w	r3, r2, r3
 8003662:	43db      	mvns	r3, r3
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	4013      	ands	r3, r2
 8003668:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	68da      	ldr	r2, [r3, #12]
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	fa02 f303 	lsl.w	r3, r2, r3
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	4313      	orrs	r3, r2
 800367a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003688:	2201      	movs	r2, #1
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	fa02 f303 	lsl.w	r3, r2, r3
 8003690:	43db      	mvns	r3, r3
 8003692:	69ba      	ldr	r2, [r7, #24]
 8003694:	4013      	ands	r3, r2
 8003696:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	091b      	lsrs	r3, r3, #4
 800369e:	f003 0201 	and.w	r2, r3, #1
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	fa02 f303 	lsl.w	r3, r2, r3
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f003 0303 	and.w	r3, r3, #3
 80036bc:	2b03      	cmp	r3, #3
 80036be:	d017      	beq.n	80036f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	2203      	movs	r2, #3
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	43db      	mvns	r3, r3
 80036d2:	69ba      	ldr	r2, [r7, #24]
 80036d4:	4013      	ands	r3, r2
 80036d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	fa02 f303 	lsl.w	r3, r2, r3
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f003 0303 	and.w	r3, r3, #3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d123      	bne.n	8003744 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	08da      	lsrs	r2, r3, #3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	3208      	adds	r2, #8
 8003704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003708:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	220f      	movs	r2, #15
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	43db      	mvns	r3, r3
 800371a:	69ba      	ldr	r2, [r7, #24]
 800371c:	4013      	ands	r3, r2
 800371e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	691a      	ldr	r2, [r3, #16]
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	f003 0307 	and.w	r3, r3, #7
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	4313      	orrs	r3, r2
 8003734:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	08da      	lsrs	r2, r3, #3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	3208      	adds	r2, #8
 800373e:	69b9      	ldr	r1, [r7, #24]
 8003740:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	2203      	movs	r2, #3
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	43db      	mvns	r3, r3
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	4013      	ands	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f003 0203 	and.w	r2, r3, #3
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	4313      	orrs	r3, r2
 8003770:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 80ae 	beq.w	80038e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003786:	2300      	movs	r3, #0
 8003788:	60fb      	str	r3, [r7, #12]
 800378a:	4b5d      	ldr	r3, [pc, #372]	@ (8003900 <HAL_GPIO_Init+0x300>)
 800378c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800378e:	4a5c      	ldr	r2, [pc, #368]	@ (8003900 <HAL_GPIO_Init+0x300>)
 8003790:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003794:	6453      	str	r3, [r2, #68]	@ 0x44
 8003796:	4b5a      	ldr	r3, [pc, #360]	@ (8003900 <HAL_GPIO_Init+0x300>)
 8003798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800379a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800379e:	60fb      	str	r3, [r7, #12]
 80037a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037a2:	4a58      	ldr	r2, [pc, #352]	@ (8003904 <HAL_GPIO_Init+0x304>)
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	089b      	lsrs	r3, r3, #2
 80037a8:	3302      	adds	r3, #2
 80037aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	f003 0303 	and.w	r3, r3, #3
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	220f      	movs	r2, #15
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	43db      	mvns	r3, r3
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	4013      	ands	r3, r2
 80037c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a4f      	ldr	r2, [pc, #316]	@ (8003908 <HAL_GPIO_Init+0x308>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d025      	beq.n	800381a <HAL_GPIO_Init+0x21a>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a4e      	ldr	r2, [pc, #312]	@ (800390c <HAL_GPIO_Init+0x30c>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d01f      	beq.n	8003816 <HAL_GPIO_Init+0x216>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a4d      	ldr	r2, [pc, #308]	@ (8003910 <HAL_GPIO_Init+0x310>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d019      	beq.n	8003812 <HAL_GPIO_Init+0x212>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a4c      	ldr	r2, [pc, #304]	@ (8003914 <HAL_GPIO_Init+0x314>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d013      	beq.n	800380e <HAL_GPIO_Init+0x20e>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a4b      	ldr	r2, [pc, #300]	@ (8003918 <HAL_GPIO_Init+0x318>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d00d      	beq.n	800380a <HAL_GPIO_Init+0x20a>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a4a      	ldr	r2, [pc, #296]	@ (800391c <HAL_GPIO_Init+0x31c>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d007      	beq.n	8003806 <HAL_GPIO_Init+0x206>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a49      	ldr	r2, [pc, #292]	@ (8003920 <HAL_GPIO_Init+0x320>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d101      	bne.n	8003802 <HAL_GPIO_Init+0x202>
 80037fe:	2306      	movs	r3, #6
 8003800:	e00c      	b.n	800381c <HAL_GPIO_Init+0x21c>
 8003802:	2307      	movs	r3, #7
 8003804:	e00a      	b.n	800381c <HAL_GPIO_Init+0x21c>
 8003806:	2305      	movs	r3, #5
 8003808:	e008      	b.n	800381c <HAL_GPIO_Init+0x21c>
 800380a:	2304      	movs	r3, #4
 800380c:	e006      	b.n	800381c <HAL_GPIO_Init+0x21c>
 800380e:	2303      	movs	r3, #3
 8003810:	e004      	b.n	800381c <HAL_GPIO_Init+0x21c>
 8003812:	2302      	movs	r3, #2
 8003814:	e002      	b.n	800381c <HAL_GPIO_Init+0x21c>
 8003816:	2301      	movs	r3, #1
 8003818:	e000      	b.n	800381c <HAL_GPIO_Init+0x21c>
 800381a:	2300      	movs	r3, #0
 800381c:	69fa      	ldr	r2, [r7, #28]
 800381e:	f002 0203 	and.w	r2, r2, #3
 8003822:	0092      	lsls	r2, r2, #2
 8003824:	4093      	lsls	r3, r2
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	4313      	orrs	r3, r2
 800382a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800382c:	4935      	ldr	r1, [pc, #212]	@ (8003904 <HAL_GPIO_Init+0x304>)
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	089b      	lsrs	r3, r3, #2
 8003832:	3302      	adds	r3, #2
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800383a:	4b3a      	ldr	r3, [pc, #232]	@ (8003924 <HAL_GPIO_Init+0x324>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	43db      	mvns	r3, r3
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	4013      	ands	r3, r2
 8003848:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d003      	beq.n	800385e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	4313      	orrs	r3, r2
 800385c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800385e:	4a31      	ldr	r2, [pc, #196]	@ (8003924 <HAL_GPIO_Init+0x324>)
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003864:	4b2f      	ldr	r3, [pc, #188]	@ (8003924 <HAL_GPIO_Init+0x324>)
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	43db      	mvns	r3, r3
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	4013      	ands	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d003      	beq.n	8003888 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	4313      	orrs	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003888:	4a26      	ldr	r2, [pc, #152]	@ (8003924 <HAL_GPIO_Init+0x324>)
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800388e:	4b25      	ldr	r3, [pc, #148]	@ (8003924 <HAL_GPIO_Init+0x324>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	43db      	mvns	r3, r3
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	4013      	ands	r3, r2
 800389c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038b2:	4a1c      	ldr	r2, [pc, #112]	@ (8003924 <HAL_GPIO_Init+0x324>)
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038b8:	4b1a      	ldr	r3, [pc, #104]	@ (8003924 <HAL_GPIO_Init+0x324>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	43db      	mvns	r3, r3
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	4013      	ands	r3, r2
 80038c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d003      	beq.n	80038dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	4313      	orrs	r3, r2
 80038da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038dc:	4a11      	ldr	r2, [pc, #68]	@ (8003924 <HAL_GPIO_Init+0x324>)
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	3301      	adds	r3, #1
 80038e6:	61fb      	str	r3, [r7, #28]
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	2b0f      	cmp	r3, #15
 80038ec:	f67f ae96 	bls.w	800361c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038f0:	bf00      	nop
 80038f2:	bf00      	nop
 80038f4:	3724      	adds	r7, #36	@ 0x24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	40023800 	.word	0x40023800
 8003904:	40013800 	.word	0x40013800
 8003908:	40020000 	.word	0x40020000
 800390c:	40020400 	.word	0x40020400
 8003910:	40020800 	.word	0x40020800
 8003914:	40020c00 	.word	0x40020c00
 8003918:	40021000 	.word	0x40021000
 800391c:	40021400 	.word	0x40021400
 8003920:	40021800 	.word	0x40021800
 8003924:	40013c00 	.word	0x40013c00

08003928 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	460b      	mov	r3, r1
 8003932:	807b      	strh	r3, [r7, #2]
 8003934:	4613      	mov	r3, r2
 8003936:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003938:	787b      	ldrb	r3, [r7, #1]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800393e:	887a      	ldrh	r2, [r7, #2]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003944:	e003      	b.n	800394e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003946:	887b      	ldrh	r3, [r7, #2]
 8003948:	041a      	lsls	r2, r3, #16
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	619a      	str	r2, [r3, #24]
}
 800394e:	bf00      	nop
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr

0800395a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b086      	sub	sp, #24
 800395e:	af02      	add	r7, sp, #8
 8003960:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d101      	bne.n	800396c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e108      	b.n	8003b7e <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d106      	bne.n	800398c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f007 fc6a 	bl	800b260 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2203      	movs	r2, #3
 8003990:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800399a:	d102      	bne.n	80039a2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f004 f881 	bl	8007aae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6818      	ldr	r0, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	7c1a      	ldrb	r2, [r3, #16]
 80039b4:	f88d 2000 	strb.w	r2, [sp]
 80039b8:	3304      	adds	r3, #4
 80039ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039bc:	f003 ff60 	bl	8007880 <USB_CoreInit>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d005      	beq.n	80039d2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2202      	movs	r2, #2
 80039ca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e0d5      	b.n	8003b7e <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2100      	movs	r1, #0
 80039d8:	4618      	mov	r0, r3
 80039da:	f004 f879 	bl	8007ad0 <USB_SetCurrentMode>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d005      	beq.n	80039f0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2202      	movs	r2, #2
 80039e8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e0c6      	b.n	8003b7e <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039f0:	2300      	movs	r3, #0
 80039f2:	73fb      	strb	r3, [r7, #15]
 80039f4:	e04a      	b.n	8003a8c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80039f6:	7bfa      	ldrb	r2, [r7, #15]
 80039f8:	6879      	ldr	r1, [r7, #4]
 80039fa:	4613      	mov	r3, r2
 80039fc:	00db      	lsls	r3, r3, #3
 80039fe:	4413      	add	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	440b      	add	r3, r1
 8003a04:	3315      	adds	r3, #21
 8003a06:	2201      	movs	r2, #1
 8003a08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a0a:	7bfa      	ldrb	r2, [r7, #15]
 8003a0c:	6879      	ldr	r1, [r7, #4]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	00db      	lsls	r3, r3, #3
 8003a12:	4413      	add	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	440b      	add	r3, r1
 8003a18:	3314      	adds	r3, #20
 8003a1a:	7bfa      	ldrb	r2, [r7, #15]
 8003a1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a1e:	7bfa      	ldrb	r2, [r7, #15]
 8003a20:	7bfb      	ldrb	r3, [r7, #15]
 8003a22:	b298      	uxth	r0, r3
 8003a24:	6879      	ldr	r1, [r7, #4]
 8003a26:	4613      	mov	r3, r2
 8003a28:	00db      	lsls	r3, r3, #3
 8003a2a:	4413      	add	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	440b      	add	r3, r1
 8003a30:	332e      	adds	r3, #46	@ 0x2e
 8003a32:	4602      	mov	r2, r0
 8003a34:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a36:	7bfa      	ldrb	r2, [r7, #15]
 8003a38:	6879      	ldr	r1, [r7, #4]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	4413      	add	r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	440b      	add	r3, r1
 8003a44:	3318      	adds	r3, #24
 8003a46:	2200      	movs	r2, #0
 8003a48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a4a:	7bfa      	ldrb	r2, [r7, #15]
 8003a4c:	6879      	ldr	r1, [r7, #4]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	00db      	lsls	r3, r3, #3
 8003a52:	4413      	add	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	440b      	add	r3, r1
 8003a58:	331c      	adds	r3, #28
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a5e:	7bfa      	ldrb	r2, [r7, #15]
 8003a60:	6879      	ldr	r1, [r7, #4]
 8003a62:	4613      	mov	r3, r2
 8003a64:	00db      	lsls	r3, r3, #3
 8003a66:	4413      	add	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	440b      	add	r3, r1
 8003a6c:	3320      	adds	r3, #32
 8003a6e:	2200      	movs	r2, #0
 8003a70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a72:	7bfa      	ldrb	r2, [r7, #15]
 8003a74:	6879      	ldr	r1, [r7, #4]
 8003a76:	4613      	mov	r3, r2
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	4413      	add	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	440b      	add	r3, r1
 8003a80:	3324      	adds	r3, #36	@ 0x24
 8003a82:	2200      	movs	r2, #0
 8003a84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a86:	7bfb      	ldrb	r3, [r7, #15]
 8003a88:	3301      	adds	r3, #1
 8003a8a:	73fb      	strb	r3, [r7, #15]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	791b      	ldrb	r3, [r3, #4]
 8003a90:	7bfa      	ldrb	r2, [r7, #15]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d3af      	bcc.n	80039f6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a96:	2300      	movs	r3, #0
 8003a98:	73fb      	strb	r3, [r7, #15]
 8003a9a:	e044      	b.n	8003b26 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003a9c:	7bfa      	ldrb	r2, [r7, #15]
 8003a9e:	6879      	ldr	r1, [r7, #4]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	4413      	add	r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	440b      	add	r3, r1
 8003aaa:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003aae:	2200      	movs	r2, #0
 8003ab0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ab2:	7bfa      	ldrb	r2, [r7, #15]
 8003ab4:	6879      	ldr	r1, [r7, #4]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	4413      	add	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	440b      	add	r3, r1
 8003ac0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003ac4:	7bfa      	ldrb	r2, [r7, #15]
 8003ac6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ac8:	7bfa      	ldrb	r2, [r7, #15]
 8003aca:	6879      	ldr	r1, [r7, #4]
 8003acc:	4613      	mov	r3, r2
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	4413      	add	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	440b      	add	r3, r1
 8003ad6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003ada:	2200      	movs	r2, #0
 8003adc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003ade:	7bfa      	ldrb	r2, [r7, #15]
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	00db      	lsls	r3, r3, #3
 8003ae6:	4413      	add	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	440b      	add	r3, r1
 8003aec:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003af0:	2200      	movs	r2, #0
 8003af2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003af4:	7bfa      	ldrb	r2, [r7, #15]
 8003af6:	6879      	ldr	r1, [r7, #4]
 8003af8:	4613      	mov	r3, r2
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	4413      	add	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	440b      	add	r3, r1
 8003b02:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003b06:	2200      	movs	r2, #0
 8003b08:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b0a:	7bfa      	ldrb	r2, [r7, #15]
 8003b0c:	6879      	ldr	r1, [r7, #4]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	00db      	lsls	r3, r3, #3
 8003b12:	4413      	add	r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	440b      	add	r3, r1
 8003b18:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b20:	7bfb      	ldrb	r3, [r7, #15]
 8003b22:	3301      	adds	r3, #1
 8003b24:	73fb      	strb	r3, [r7, #15]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	791b      	ldrb	r3, [r3, #4]
 8003b2a:	7bfa      	ldrb	r2, [r7, #15]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d3b5      	bcc.n	8003a9c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6818      	ldr	r0, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	7c1a      	ldrb	r2, [r3, #16]
 8003b38:	f88d 2000 	strb.w	r2, [sp]
 8003b3c:	3304      	adds	r3, #4
 8003b3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b40:	f004 f812 	bl	8007b68 <USB_DevInit>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d005      	beq.n	8003b56 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2202      	movs	r2, #2
 8003b4e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e013      	b.n	8003b7e <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	7b1b      	ldrb	r3, [r3, #12]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d102      	bne.n	8003b72 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f001 f96f 	bl	8004e50 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f005 f84f 	bl	8008c1a <USB_DevDisconnect>

  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b084      	sub	sp, #16
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d101      	bne.n	8003ba2 <HAL_PCD_Start+0x1c>
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	e022      	b.n	8003be8 <HAL_PCD_Start+0x62>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d009      	beq.n	8003bca <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d105      	bne.n	8003bca <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bc2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f003 ff5c 	bl	8007a8c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f004 fffd 	bl	8008bd8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3710      	adds	r7, #16
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003bf0:	b590      	push	{r4, r7, lr}
 8003bf2:	b08d      	sub	sp, #52	@ 0x34
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bfe:	6a3b      	ldr	r3, [r7, #32]
 8003c00:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f005 f8bb 	bl	8008d82 <USB_GetMode>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f040 84b9 	bne.w	8004586 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f005 f81f 	bl	8008c5c <USB_ReadInterrupts>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f000 84af 	beq.w	8004584 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	0a1b      	lsrs	r3, r3, #8
 8003c30:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f005 f80c 	bl	8008c5c <USB_ReadInterrupts>
 8003c44:	4603      	mov	r3, r0
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d107      	bne.n	8003c5e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	695a      	ldr	r2, [r3, #20]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f002 0202 	and.w	r2, r2, #2
 8003c5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f004 fffa 	bl	8008c5c <USB_ReadInterrupts>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	f003 0310 	and.w	r3, r3, #16
 8003c6e:	2b10      	cmp	r3, #16
 8003c70:	d161      	bne.n	8003d36 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	699a      	ldr	r2, [r3, #24]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 0210 	bic.w	r2, r2, #16
 8003c80:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003c82:	6a3b      	ldr	r3, [r7, #32]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	f003 020f 	and.w	r2, r3, #15
 8003c8e:	4613      	mov	r3, r2
 8003c90:	00db      	lsls	r3, r3, #3
 8003c92:	4413      	add	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	3304      	adds	r3, #4
 8003ca0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	0c5b      	lsrs	r3, r3, #17
 8003ca6:	f003 030f 	and.w	r3, r3, #15
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d124      	bne.n	8003cf8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003cae:	69ba      	ldr	r2, [r7, #24]
 8003cb0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d035      	beq.n	8003d26 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	091b      	lsrs	r3, r3, #4
 8003cc2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003cc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	461a      	mov	r2, r3
 8003ccc:	6a38      	ldr	r0, [r7, #32]
 8003cce:	f004 fe31 	bl	8008934 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	68da      	ldr	r2, [r3, #12]
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	091b      	lsrs	r3, r3, #4
 8003cda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cde:	441a      	add	r2, r3
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	695a      	ldr	r2, [r3, #20]
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	091b      	lsrs	r3, r3, #4
 8003cec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cf0:	441a      	add	r2, r3
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	615a      	str	r2, [r3, #20]
 8003cf6:	e016      	b.n	8003d26 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	0c5b      	lsrs	r3, r3, #17
 8003cfc:	f003 030f 	and.w	r3, r3, #15
 8003d00:	2b06      	cmp	r3, #6
 8003d02:	d110      	bne.n	8003d26 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003d0a:	2208      	movs	r2, #8
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	6a38      	ldr	r0, [r7, #32]
 8003d10:	f004 fe10 	bl	8008934 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	695a      	ldr	r2, [r3, #20]
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	091b      	lsrs	r3, r3, #4
 8003d1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d20:	441a      	add	r2, r3
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	699a      	ldr	r2, [r3, #24]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f042 0210 	orr.w	r2, r2, #16
 8003d34:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f004 ff8e 	bl	8008c5c <USB_ReadInterrupts>
 8003d40:	4603      	mov	r3, r0
 8003d42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d46:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003d4a:	f040 80a7 	bne.w	8003e9c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f004 ff93 	bl	8008c82 <USB_ReadDevAllOutEpInterrupt>
 8003d5c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003d5e:	e099      	b.n	8003e94 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f000 808e 	beq.w	8003e88 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d72:	b2d2      	uxtb	r2, r2
 8003d74:	4611      	mov	r1, r2
 8003d76:	4618      	mov	r0, r3
 8003d78:	f004 ffb7 	bl	8008cea <USB_ReadDevOutEPInterrupt>
 8003d7c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00c      	beq.n	8003da2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8a:	015a      	lsls	r2, r3, #5
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	4413      	add	r3, r2
 8003d90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d94:	461a      	mov	r2, r3
 8003d96:	2301      	movs	r3, #1
 8003d98:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003d9a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 fed1 	bl	8004b44 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	f003 0308 	and.w	r3, r3, #8
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00c      	beq.n	8003dc6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dae:	015a      	lsls	r2, r3, #5
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	4413      	add	r3, r2
 8003db4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003db8:	461a      	mov	r2, r3
 8003dba:	2308      	movs	r3, #8
 8003dbc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003dbe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 ffa7 	bl	8004d14 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	f003 0310 	and.w	r3, r3, #16
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d008      	beq.n	8003de2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd2:	015a      	lsls	r2, r3, #5
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ddc:	461a      	mov	r2, r3
 8003dde:	2310      	movs	r3, #16
 8003de0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d030      	beq.n	8003e4e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003dec:	6a3b      	ldr	r3, [r7, #32]
 8003dee:	695b      	ldr	r3, [r3, #20]
 8003df0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003df4:	2b80      	cmp	r3, #128	@ 0x80
 8003df6:	d109      	bne.n	8003e0c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	69fa      	ldr	r2, [r7, #28]
 8003e02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e06:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003e0a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003e0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e0e:	4613      	mov	r3, r2
 8003e10:	00db      	lsls	r3, r3, #3
 8003e12:	4413      	add	r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	3304      	adds	r3, #4
 8003e20:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	78db      	ldrb	r3, [r3, #3]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d108      	bne.n	8003e3c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	4619      	mov	r1, r3
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f007 fb2e 	bl	800b498 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3e:	015a      	lsls	r2, r3, #5
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	4413      	add	r3, r2
 8003e44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e48:	461a      	mov	r2, r3
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	f003 0320 	and.w	r3, r3, #32
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d008      	beq.n	8003e6a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5a:	015a      	lsls	r2, r3, #5
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	4413      	add	r3, r2
 8003e60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e64:	461a      	mov	r2, r3
 8003e66:	2320      	movs	r3, #32
 8003e68:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d009      	beq.n	8003e88 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e76:	015a      	lsls	r2, r3, #5
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e80:	461a      	mov	r2, r3
 8003e82:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003e86:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e90:	085b      	lsrs	r3, r3, #1
 8003e92:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f47f af62 	bne.w	8003d60 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f004 fedb 	bl	8008c5c <USB_ReadInterrupts>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003eac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003eb0:	f040 80db 	bne.w	800406a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f004 fefc 	bl	8008cb6 <USB_ReadDevAllInEpInterrupt>
 8003ebe:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003ec4:	e0cd      	b.n	8004062 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ec8:	f003 0301 	and.w	r3, r3, #1
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 80c2 	beq.w	8004056 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ed8:	b2d2      	uxtb	r2, r2
 8003eda:	4611      	mov	r1, r2
 8003edc:	4618      	mov	r0, r3
 8003ede:	f004 ff22 	bl	8008d26 <USB_ReadDevInEPInterrupt>
 8003ee2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d057      	beq.n	8003f9e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef0:	f003 030f 	and.w	r3, r3, #15
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8003efa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	43db      	mvns	r3, r3
 8003f08:	69f9      	ldr	r1, [r7, #28]
 8003f0a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f0e:	4013      	ands	r3, r2
 8003f10:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f14:	015a      	lsls	r2, r3, #5
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	4413      	add	r3, r2
 8003f1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f1e:	461a      	mov	r2, r3
 8003f20:	2301      	movs	r3, #1
 8003f22:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	799b      	ldrb	r3, [r3, #6]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d132      	bne.n	8003f92 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003f2c:	6879      	ldr	r1, [r7, #4]
 8003f2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f30:	4613      	mov	r3, r2
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	4413      	add	r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	440b      	add	r3, r1
 8003f3a:	3320      	adds	r3, #32
 8003f3c:	6819      	ldr	r1, [r3, #0]
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f42:	4613      	mov	r3, r2
 8003f44:	00db      	lsls	r3, r3, #3
 8003f46:	4413      	add	r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	4403      	add	r3, r0
 8003f4c:	331c      	adds	r3, #28
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4419      	add	r1, r3
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f56:	4613      	mov	r3, r2
 8003f58:	00db      	lsls	r3, r3, #3
 8003f5a:	4413      	add	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	4403      	add	r3, r0
 8003f60:	3320      	adds	r3, #32
 8003f62:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d113      	bne.n	8003f92 <HAL_PCD_IRQHandler+0x3a2>
 8003f6a:	6879      	ldr	r1, [r7, #4]
 8003f6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f6e:	4613      	mov	r3, r2
 8003f70:	00db      	lsls	r3, r3, #3
 8003f72:	4413      	add	r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	440b      	add	r3, r1
 8003f78:	3324      	adds	r3, #36	@ 0x24
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d108      	bne.n	8003f92 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6818      	ldr	r0, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	2101      	movs	r1, #1
 8003f8e:	f004 ff29 	bl	8008de4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	4619      	mov	r1, r3
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f007 f9f8 	bl	800b38e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	f003 0308 	and.w	r3, r3, #8
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d008      	beq.n	8003fba <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003faa:	015a      	lsls	r2, r3, #5
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	4413      	add	r3, r2
 8003fb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	2308      	movs	r3, #8
 8003fb8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	f003 0310 	and.w	r3, r3, #16
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d008      	beq.n	8003fd6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc6:	015a      	lsls	r2, r3, #5
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	4413      	add	r3, r2
 8003fcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	2310      	movs	r3, #16
 8003fd4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d008      	beq.n	8003ff2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe2:	015a      	lsls	r2, r3, #5
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fec:	461a      	mov	r2, r3
 8003fee:	2340      	movs	r3, #64	@ 0x40
 8003ff0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d023      	beq.n	8004044 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003ffc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ffe:	6a38      	ldr	r0, [r7, #32]
 8004000:	f003 ff10 	bl	8007e24 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004004:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004006:	4613      	mov	r3, r2
 8004008:	00db      	lsls	r3, r3, #3
 800400a:	4413      	add	r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	3310      	adds	r3, #16
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	4413      	add	r3, r2
 8004014:	3304      	adds	r3, #4
 8004016:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	78db      	ldrb	r3, [r3, #3]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d108      	bne.n	8004032 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	2200      	movs	r2, #0
 8004024:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004028:	b2db      	uxtb	r3, r3
 800402a:	4619      	mov	r1, r3
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f007 fa45 	bl	800b4bc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004034:	015a      	lsls	r2, r3, #5
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	4413      	add	r3, r2
 800403a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800403e:	461a      	mov	r2, r3
 8004040:	2302      	movs	r3, #2
 8004042:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800404a:	2b00      	cmp	r3, #0
 800404c:	d003      	beq.n	8004056 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800404e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 fcea 	bl	8004a2a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004058:	3301      	adds	r3, #1
 800405a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800405c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800405e:	085b      	lsrs	r3, r3, #1
 8004060:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004064:	2b00      	cmp	r3, #0
 8004066:	f47f af2e 	bne.w	8003ec6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4618      	mov	r0, r3
 8004070:	f004 fdf4 	bl	8008c5c <USB_ReadInterrupts>
 8004074:	4603      	mov	r3, r0
 8004076:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800407a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800407e:	d122      	bne.n	80040c6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	69fa      	ldr	r2, [r7, #28]
 800408a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800408e:	f023 0301 	bic.w	r3, r3, #1
 8004092:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800409a:	2b01      	cmp	r3, #1
 800409c:	d108      	bne.n	80040b0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80040a6:	2100      	movs	r1, #0
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f007 fbbf 	bl	800b82c <HAL_PCDEx_LPM_Callback>
 80040ae:	e002      	b.n	80040b6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f007 f9e3 	bl	800b47c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	695a      	ldr	r2, [r3, #20]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80040c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f004 fdc6 	bl	8008c5c <USB_ReadInterrupts>
 80040d0:	4603      	mov	r3, r0
 80040d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040da:	d112      	bne.n	8004102 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d102      	bne.n	80040f2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f007 f99f 	bl	800b430 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	695a      	ldr	r2, [r3, #20]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004100:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4618      	mov	r0, r3
 8004108:	f004 fda8 	bl	8008c5c <USB_ReadInterrupts>
 800410c:	4603      	mov	r3, r0
 800410e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004112:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004116:	d121      	bne.n	800415c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	695a      	ldr	r2, [r3, #20]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8004126:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800412e:	2b00      	cmp	r3, #0
 8004130:	d111      	bne.n	8004156 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004140:	089b      	lsrs	r3, r3, #2
 8004142:	f003 020f 	and.w	r2, r3, #15
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800414c:	2101      	movs	r1, #1
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f007 fb6c 	bl	800b82c <HAL_PCDEx_LPM_Callback>
 8004154:	e002      	b.n	800415c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f007 f96a 	bl	800b430 <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4618      	mov	r0, r3
 8004162:	f004 fd7b 	bl	8008c5c <USB_ReadInterrupts>
 8004166:	4603      	mov	r3, r0
 8004168:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800416c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004170:	f040 80b7 	bne.w	80042e2 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	69fa      	ldr	r2, [r7, #28]
 800417e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004182:	f023 0301 	bic.w	r3, r3, #1
 8004186:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2110      	movs	r1, #16
 800418e:	4618      	mov	r0, r3
 8004190:	f003 fe48 	bl	8007e24 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004194:	2300      	movs	r3, #0
 8004196:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004198:	e046      	b.n	8004228 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800419a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800419c:	015a      	lsls	r2, r3, #5
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	4413      	add	r3, r2
 80041a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041a6:	461a      	mov	r2, r3
 80041a8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80041ac:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80041ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041b0:	015a      	lsls	r2, r3, #5
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	4413      	add	r3, r2
 80041b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041be:	0151      	lsls	r1, r2, #5
 80041c0:	69fa      	ldr	r2, [r7, #28]
 80041c2:	440a      	add	r2, r1
 80041c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041c8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80041cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80041ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041d0:	015a      	lsls	r2, r3, #5
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	4413      	add	r3, r2
 80041d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041da:	461a      	mov	r2, r3
 80041dc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80041e0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80041e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041e4:	015a      	lsls	r2, r3, #5
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	4413      	add	r3, r2
 80041ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041f2:	0151      	lsls	r1, r2, #5
 80041f4:	69fa      	ldr	r2, [r7, #28]
 80041f6:	440a      	add	r2, r1
 80041f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80041fc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004200:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004204:	015a      	lsls	r2, r3, #5
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	4413      	add	r3, r2
 800420a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004212:	0151      	lsls	r1, r2, #5
 8004214:	69fa      	ldr	r2, [r7, #28]
 8004216:	440a      	add	r2, r1
 8004218:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800421c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004220:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004224:	3301      	adds	r3, #1
 8004226:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	791b      	ldrb	r3, [r3, #4]
 800422c:	461a      	mov	r2, r3
 800422e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004230:	4293      	cmp	r3, r2
 8004232:	d3b2      	bcc.n	800419a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800423a:	69db      	ldr	r3, [r3, #28]
 800423c:	69fa      	ldr	r2, [r7, #28]
 800423e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004242:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004246:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	7bdb      	ldrb	r3, [r3, #15]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d016      	beq.n	800427e <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004256:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800425a:	69fa      	ldr	r2, [r7, #28]
 800425c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004260:	f043 030b 	orr.w	r3, r3, #11
 8004264:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800426e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004270:	69fa      	ldr	r2, [r7, #28]
 8004272:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004276:	f043 030b 	orr.w	r3, r3, #11
 800427a:	6453      	str	r3, [r2, #68]	@ 0x44
 800427c:	e015      	b.n	80042aa <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	69fa      	ldr	r2, [r7, #28]
 8004288:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800428c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004290:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004294:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	69fa      	ldr	r2, [r7, #28]
 80042a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042a4:	f043 030b 	orr.w	r3, r3, #11
 80042a8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	69fa      	ldr	r2, [r7, #28]
 80042b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042b8:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80042bc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6818      	ldr	r0, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80042cc:	461a      	mov	r2, r3
 80042ce:	f004 fd89 	bl	8008de4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	695a      	ldr	r2, [r3, #20]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80042e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f004 fcb8 	bl	8008c5c <USB_ReadInterrupts>
 80042ec:	4603      	mov	r3, r0
 80042ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042f6:	d123      	bne.n	8004340 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f004 fd4e 	bl	8008d9e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4618      	mov	r0, r3
 8004308:	f003 fe05 	bl	8007f16 <USB_GetDevSpeed>
 800430c:	4603      	mov	r3, r0
 800430e:	461a      	mov	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681c      	ldr	r4, [r3, #0]
 8004318:	f000 fea4 	bl	8005064 <HAL_RCC_GetHCLKFreq>
 800431c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004322:	461a      	mov	r2, r3
 8004324:	4620      	mov	r0, r4
 8004326:	f003 fb0f 	bl	8007948 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f007 f857 	bl	800b3de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	695a      	ldr	r2, [r3, #20]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800433e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4618      	mov	r0, r3
 8004346:	f004 fc89 	bl	8008c5c <USB_ReadInterrupts>
 800434a:	4603      	mov	r3, r0
 800434c:	f003 0308 	and.w	r3, r3, #8
 8004350:	2b08      	cmp	r3, #8
 8004352:	d10a      	bne.n	800436a <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f007 f834 	bl	800b3c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	695a      	ldr	r2, [r3, #20]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f002 0208 	and.w	r2, r2, #8
 8004368:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4618      	mov	r0, r3
 8004370:	f004 fc74 	bl	8008c5c <USB_ReadInterrupts>
 8004374:	4603      	mov	r3, r0
 8004376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800437a:	2b80      	cmp	r3, #128	@ 0x80
 800437c:	d123      	bne.n	80043c6 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800437e:	6a3b      	ldr	r3, [r7, #32]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004386:	6a3b      	ldr	r3, [r7, #32]
 8004388:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800438a:	2301      	movs	r3, #1
 800438c:	627b      	str	r3, [r7, #36]	@ 0x24
 800438e:	e014      	b.n	80043ba <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004390:	6879      	ldr	r1, [r7, #4]
 8004392:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004394:	4613      	mov	r3, r2
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	4413      	add	r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	440b      	add	r3, r1
 800439e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d105      	bne.n	80043b4 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80043a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	4619      	mov	r1, r3
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 fb0a 	bl	80049c8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b6:	3301      	adds	r3, #1
 80043b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	791b      	ldrb	r3, [r3, #4]
 80043be:	461a      	mov	r2, r3
 80043c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d3e4      	bcc.n	8004390 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f004 fc46 	bl	8008c5c <USB_ReadInterrupts>
 80043d0:	4603      	mov	r3, r0
 80043d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043da:	d13c      	bne.n	8004456 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043dc:	2301      	movs	r3, #1
 80043de:	627b      	str	r3, [r7, #36]	@ 0x24
 80043e0:	e02b      	b.n	800443a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80043e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e4:	015a      	lsls	r2, r3, #5
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	4413      	add	r3, r2
 80043ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80043f2:	6879      	ldr	r1, [r7, #4]
 80043f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043f6:	4613      	mov	r3, r2
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	4413      	add	r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	440b      	add	r3, r1
 8004400:	3318      	adds	r3, #24
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d115      	bne.n	8004434 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004408:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800440a:	2b00      	cmp	r3, #0
 800440c:	da12      	bge.n	8004434 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800440e:	6879      	ldr	r1, [r7, #4]
 8004410:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004412:	4613      	mov	r3, r2
 8004414:	00db      	lsls	r3, r3, #3
 8004416:	4413      	add	r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	440b      	add	r3, r1
 800441c:	3317      	adds	r3, #23
 800441e:	2201      	movs	r2, #1
 8004420:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004424:	b2db      	uxtb	r3, r3
 8004426:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800442a:	b2db      	uxtb	r3, r3
 800442c:	4619      	mov	r1, r3
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 faca 	bl	80049c8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004436:	3301      	adds	r3, #1
 8004438:	627b      	str	r3, [r7, #36]	@ 0x24
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	791b      	ldrb	r3, [r3, #4]
 800443e:	461a      	mov	r2, r3
 8004440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004442:	4293      	cmp	r3, r2
 8004444:	d3cd      	bcc.n	80043e2 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	695a      	ldr	r2, [r3, #20]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004454:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4618      	mov	r0, r3
 800445c:	f004 fbfe 	bl	8008c5c <USB_ReadInterrupts>
 8004460:	4603      	mov	r3, r0
 8004462:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004466:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800446a:	d156      	bne.n	800451a <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800446c:	2301      	movs	r3, #1
 800446e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004470:	e045      	b.n	80044fe <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004474:	015a      	lsls	r2, r3, #5
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	4413      	add	r3, r2
 800447a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004482:	6879      	ldr	r1, [r7, #4]
 8004484:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004486:	4613      	mov	r3, r2
 8004488:	00db      	lsls	r3, r3, #3
 800448a:	4413      	add	r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	440b      	add	r3, r1
 8004490:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d12e      	bne.n	80044f8 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800449a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800449c:	2b00      	cmp	r3, #0
 800449e:	da2b      	bge.n	80044f8 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80044ac:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d121      	bne.n	80044f8 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80044b4:	6879      	ldr	r1, [r7, #4]
 80044b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044b8:	4613      	mov	r3, r2
 80044ba:	00db      	lsls	r3, r3, #3
 80044bc:	4413      	add	r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	440b      	add	r3, r1
 80044c2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80044c6:	2201      	movs	r2, #1
 80044c8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80044ca:	6a3b      	ldr	r3, [r7, #32]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80044d2:	6a3b      	ldr	r3, [r7, #32]
 80044d4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80044d6:	6a3b      	ldr	r3, [r7, #32]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10a      	bne.n	80044f8 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	69fa      	ldr	r2, [r7, #28]
 80044ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044f0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80044f4:	6053      	str	r3, [r2, #4]
            break;
 80044f6:	e008      	b.n	800450a <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044fa:	3301      	adds	r3, #1
 80044fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	791b      	ldrb	r3, [r3, #4]
 8004502:	461a      	mov	r2, r3
 8004504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004506:	4293      	cmp	r3, r2
 8004508:	d3b3      	bcc.n	8004472 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	695a      	ldr	r2, [r3, #20]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004518:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4618      	mov	r0, r3
 8004520:	f004 fb9c 	bl	8008c5c <USB_ReadInterrupts>
 8004524:	4603      	mov	r3, r0
 8004526:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800452a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800452e:	d10a      	bne.n	8004546 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f006 ffd5 	bl	800b4e0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	695a      	ldr	r2, [r3, #20]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004544:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4618      	mov	r0, r3
 800454c:	f004 fb86 	bl	8008c5c <USB_ReadInterrupts>
 8004550:	4603      	mov	r3, r0
 8004552:	f003 0304 	and.w	r3, r3, #4
 8004556:	2b04      	cmp	r3, #4
 8004558:	d115      	bne.n	8004586 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	f003 0304 	and.w	r3, r3, #4
 8004568:	2b00      	cmp	r3, #0
 800456a:	d002      	beq.n	8004572 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f006 ffc5 	bl	800b4fc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	6859      	ldr	r1, [r3, #4]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	69ba      	ldr	r2, [r7, #24]
 800457e:	430a      	orrs	r2, r1
 8004580:	605a      	str	r2, [r3, #4]
 8004582:	e000      	b.n	8004586 <HAL_PCD_IRQHandler+0x996>
      return;
 8004584:	bf00      	nop
    }
  }
}
 8004586:	3734      	adds	r7, #52	@ 0x34
 8004588:	46bd      	mov	sp, r7
 800458a:	bd90      	pop	{r4, r7, pc}

0800458c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	460b      	mov	r3, r1
 8004596:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d101      	bne.n	80045a6 <HAL_PCD_SetAddress+0x1a>
 80045a2:	2302      	movs	r3, #2
 80045a4:	e012      	b.n	80045cc <HAL_PCD_SetAddress+0x40>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	78fa      	ldrb	r2, [r7, #3]
 80045b2:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	78fa      	ldrb	r2, [r7, #3]
 80045ba:	4611      	mov	r1, r2
 80045bc:	4618      	mov	r0, r3
 80045be:	f004 fae5 	bl	8008b8c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3708      	adds	r7, #8
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	4608      	mov	r0, r1
 80045de:	4611      	mov	r1, r2
 80045e0:	461a      	mov	r2, r3
 80045e2:	4603      	mov	r3, r0
 80045e4:	70fb      	strb	r3, [r7, #3]
 80045e6:	460b      	mov	r3, r1
 80045e8:	803b      	strh	r3, [r7, #0]
 80045ea:	4613      	mov	r3, r2
 80045ec:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80045ee:	2300      	movs	r3, #0
 80045f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80045f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	da0f      	bge.n	800461a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045fa:	78fb      	ldrb	r3, [r7, #3]
 80045fc:	f003 020f 	and.w	r2, r3, #15
 8004600:	4613      	mov	r3, r2
 8004602:	00db      	lsls	r3, r3, #3
 8004604:	4413      	add	r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	3310      	adds	r3, #16
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	4413      	add	r3, r2
 800460e:	3304      	adds	r3, #4
 8004610:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2201      	movs	r2, #1
 8004616:	705a      	strb	r2, [r3, #1]
 8004618:	e00f      	b.n	800463a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800461a:	78fb      	ldrb	r3, [r7, #3]
 800461c:	f003 020f 	and.w	r2, r3, #15
 8004620:	4613      	mov	r3, r2
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	4413      	add	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	4413      	add	r3, r2
 8004630:	3304      	adds	r3, #4
 8004632:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800463a:	78fb      	ldrb	r3, [r7, #3]
 800463c:	f003 030f 	and.w	r3, r3, #15
 8004640:	b2da      	uxtb	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004646:	883b      	ldrh	r3, [r7, #0]
 8004648:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	78ba      	ldrb	r2, [r7, #2]
 8004654:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	785b      	ldrb	r3, [r3, #1]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d004      	beq.n	8004668 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	461a      	mov	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004668:	78bb      	ldrb	r3, [r7, #2]
 800466a:	2b02      	cmp	r3, #2
 800466c:	d102      	bne.n	8004674 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800467a:	2b01      	cmp	r3, #1
 800467c:	d101      	bne.n	8004682 <HAL_PCD_EP_Open+0xae>
 800467e:	2302      	movs	r3, #2
 8004680:	e00e      	b.n	80046a0 <HAL_PCD_EP_Open+0xcc>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68f9      	ldr	r1, [r7, #12]
 8004690:	4618      	mov	r0, r3
 8004692:	f003 fc65 	bl	8007f60 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800469e:	7afb      	ldrb	r3, [r7, #11]
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3710      	adds	r7, #16
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	460b      	mov	r3, r1
 80046b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80046b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	da0f      	bge.n	80046dc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046bc:	78fb      	ldrb	r3, [r7, #3]
 80046be:	f003 020f 	and.w	r2, r3, #15
 80046c2:	4613      	mov	r3, r2
 80046c4:	00db      	lsls	r3, r3, #3
 80046c6:	4413      	add	r3, r2
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	3310      	adds	r3, #16
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	4413      	add	r3, r2
 80046d0:	3304      	adds	r3, #4
 80046d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2201      	movs	r2, #1
 80046d8:	705a      	strb	r2, [r3, #1]
 80046da:	e00f      	b.n	80046fc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046dc:	78fb      	ldrb	r3, [r7, #3]
 80046de:	f003 020f 	and.w	r2, r3, #15
 80046e2:	4613      	mov	r3, r2
 80046e4:	00db      	lsls	r3, r3, #3
 80046e6:	4413      	add	r3, r2
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	4413      	add	r3, r2
 80046f2:	3304      	adds	r3, #4
 80046f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80046fc:	78fb      	ldrb	r3, [r7, #3]
 80046fe:	f003 030f 	and.w	r3, r3, #15
 8004702:	b2da      	uxtb	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800470e:	2b01      	cmp	r3, #1
 8004710:	d101      	bne.n	8004716 <HAL_PCD_EP_Close+0x6e>
 8004712:	2302      	movs	r3, #2
 8004714:	e00e      	b.n	8004734 <HAL_PCD_EP_Close+0x8c>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68f9      	ldr	r1, [r7, #12]
 8004724:	4618      	mov	r0, r3
 8004726:	f003 fca3 	bl	8008070 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	607a      	str	r2, [r7, #4]
 8004746:	603b      	str	r3, [r7, #0]
 8004748:	460b      	mov	r3, r1
 800474a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800474c:	7afb      	ldrb	r3, [r7, #11]
 800474e:	f003 020f 	and.w	r2, r3, #15
 8004752:	4613      	mov	r3, r2
 8004754:	00db      	lsls	r3, r3, #3
 8004756:	4413      	add	r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	4413      	add	r3, r2
 8004762:	3304      	adds	r3, #4
 8004764:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	683a      	ldr	r2, [r7, #0]
 8004770:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	2200      	movs	r2, #0
 8004776:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	2200      	movs	r2, #0
 800477c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800477e:	7afb      	ldrb	r3, [r7, #11]
 8004780:	f003 030f 	and.w	r3, r3, #15
 8004784:	b2da      	uxtb	r2, r3
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	799b      	ldrb	r3, [r3, #6]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d102      	bne.n	8004798 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6818      	ldr	r0, [r3, #0]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	799b      	ldrb	r3, [r3, #6]
 80047a0:	461a      	mov	r2, r3
 80047a2:	6979      	ldr	r1, [r7, #20]
 80047a4:	f003 fd40 	bl	8008228 <USB_EPStartXfer>

  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3718      	adds	r7, #24
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80047b2:	b480      	push	{r7}
 80047b4:	b083      	sub	sp, #12
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
 80047ba:	460b      	mov	r3, r1
 80047bc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80047be:	78fb      	ldrb	r3, [r7, #3]
 80047c0:	f003 020f 	and.w	r2, r3, #15
 80047c4:	6879      	ldr	r1, [r7, #4]
 80047c6:	4613      	mov	r3, r2
 80047c8:	00db      	lsls	r3, r3, #3
 80047ca:	4413      	add	r3, r2
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	440b      	add	r3, r1
 80047d0:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80047d4:	681b      	ldr	r3, [r3, #0]
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	370c      	adds	r7, #12
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr

080047e2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b086      	sub	sp, #24
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	60f8      	str	r0, [r7, #12]
 80047ea:	607a      	str	r2, [r7, #4]
 80047ec:	603b      	str	r3, [r7, #0]
 80047ee:	460b      	mov	r3, r1
 80047f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047f2:	7afb      	ldrb	r3, [r7, #11]
 80047f4:	f003 020f 	and.w	r2, r3, #15
 80047f8:	4613      	mov	r3, r2
 80047fa:	00db      	lsls	r3, r3, #3
 80047fc:	4413      	add	r3, r2
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	3310      	adds	r3, #16
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	4413      	add	r3, r2
 8004806:	3304      	adds	r3, #4
 8004808:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	683a      	ldr	r2, [r7, #0]
 8004814:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	2200      	movs	r2, #0
 800481a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	2201      	movs	r2, #1
 8004820:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004822:	7afb      	ldrb	r3, [r7, #11]
 8004824:	f003 030f 	and.w	r3, r3, #15
 8004828:	b2da      	uxtb	r2, r3
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	799b      	ldrb	r3, [r3, #6]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d102      	bne.n	800483c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6818      	ldr	r0, [r3, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	799b      	ldrb	r3, [r3, #6]
 8004844:	461a      	mov	r2, r3
 8004846:	6979      	ldr	r1, [r7, #20]
 8004848:	f003 fcee 	bl	8008228 <USB_EPStartXfer>

  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3718      	adds	r7, #24
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}

08004856 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004856:	b580      	push	{r7, lr}
 8004858:	b084      	sub	sp, #16
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
 800485e:	460b      	mov	r3, r1
 8004860:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004862:	78fb      	ldrb	r3, [r7, #3]
 8004864:	f003 030f 	and.w	r3, r3, #15
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	7912      	ldrb	r2, [r2, #4]
 800486c:	4293      	cmp	r3, r2
 800486e:	d901      	bls.n	8004874 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e04f      	b.n	8004914 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004874:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004878:	2b00      	cmp	r3, #0
 800487a:	da0f      	bge.n	800489c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800487c:	78fb      	ldrb	r3, [r7, #3]
 800487e:	f003 020f 	and.w	r2, r3, #15
 8004882:	4613      	mov	r3, r2
 8004884:	00db      	lsls	r3, r3, #3
 8004886:	4413      	add	r3, r2
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	3310      	adds	r3, #16
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	4413      	add	r3, r2
 8004890:	3304      	adds	r3, #4
 8004892:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2201      	movs	r2, #1
 8004898:	705a      	strb	r2, [r3, #1]
 800489a:	e00d      	b.n	80048b8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800489c:	78fa      	ldrb	r2, [r7, #3]
 800489e:	4613      	mov	r3, r2
 80048a0:	00db      	lsls	r3, r3, #3
 80048a2:	4413      	add	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	4413      	add	r3, r2
 80048ae:	3304      	adds	r3, #4
 80048b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2201      	movs	r2, #1
 80048bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048be:	78fb      	ldrb	r3, [r7, #3]
 80048c0:	f003 030f 	and.w	r3, r3, #15
 80048c4:	b2da      	uxtb	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d101      	bne.n	80048d8 <HAL_PCD_EP_SetStall+0x82>
 80048d4:	2302      	movs	r3, #2
 80048d6:	e01d      	b.n	8004914 <HAL_PCD_EP_SetStall+0xbe>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68f9      	ldr	r1, [r7, #12]
 80048e6:	4618      	mov	r0, r3
 80048e8:	f004 f87c 	bl	80089e4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80048ec:	78fb      	ldrb	r3, [r7, #3]
 80048ee:	f003 030f 	and.w	r3, r3, #15
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d109      	bne.n	800490a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6818      	ldr	r0, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	7999      	ldrb	r1, [r3, #6]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004904:	461a      	mov	r2, r3
 8004906:	f004 fa6d 	bl	8008de4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3710      	adds	r7, #16
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	460b      	mov	r3, r1
 8004926:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004928:	78fb      	ldrb	r3, [r7, #3]
 800492a:	f003 030f 	and.w	r3, r3, #15
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	7912      	ldrb	r2, [r2, #4]
 8004932:	4293      	cmp	r3, r2
 8004934:	d901      	bls.n	800493a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e042      	b.n	80049c0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800493a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800493e:	2b00      	cmp	r3, #0
 8004940:	da0f      	bge.n	8004962 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004942:	78fb      	ldrb	r3, [r7, #3]
 8004944:	f003 020f 	and.w	r2, r3, #15
 8004948:	4613      	mov	r3, r2
 800494a:	00db      	lsls	r3, r3, #3
 800494c:	4413      	add	r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	3310      	adds	r3, #16
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	4413      	add	r3, r2
 8004956:	3304      	adds	r3, #4
 8004958:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2201      	movs	r2, #1
 800495e:	705a      	strb	r2, [r3, #1]
 8004960:	e00f      	b.n	8004982 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004962:	78fb      	ldrb	r3, [r7, #3]
 8004964:	f003 020f 	and.w	r2, r3, #15
 8004968:	4613      	mov	r3, r2
 800496a:	00db      	lsls	r3, r3, #3
 800496c:	4413      	add	r3, r2
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	4413      	add	r3, r2
 8004978:	3304      	adds	r3, #4
 800497a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2200      	movs	r2, #0
 8004986:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004988:	78fb      	ldrb	r3, [r7, #3]
 800498a:	f003 030f 	and.w	r3, r3, #15
 800498e:	b2da      	uxtb	r2, r3
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800499a:	2b01      	cmp	r3, #1
 800499c:	d101      	bne.n	80049a2 <HAL_PCD_EP_ClrStall+0x86>
 800499e:	2302      	movs	r3, #2
 80049a0:	e00e      	b.n	80049c0 <HAL_PCD_EP_ClrStall+0xa4>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68f9      	ldr	r1, [r7, #12]
 80049b0:	4618      	mov	r0, r3
 80049b2:	f004 f885 	bl	8008ac0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	460b      	mov	r3, r1
 80049d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80049d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	da0c      	bge.n	80049f6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049dc:	78fb      	ldrb	r3, [r7, #3]
 80049de:	f003 020f 	and.w	r2, r3, #15
 80049e2:	4613      	mov	r3, r2
 80049e4:	00db      	lsls	r3, r3, #3
 80049e6:	4413      	add	r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	3310      	adds	r3, #16
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	4413      	add	r3, r2
 80049f0:	3304      	adds	r3, #4
 80049f2:	60fb      	str	r3, [r7, #12]
 80049f4:	e00c      	b.n	8004a10 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049f6:	78fb      	ldrb	r3, [r7, #3]
 80049f8:	f003 020f 	and.w	r2, r3, #15
 80049fc:	4613      	mov	r3, r2
 80049fe:	00db      	lsls	r3, r3, #3
 8004a00:	4413      	add	r3, r2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	3304      	adds	r3, #4
 8004a0e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68f9      	ldr	r1, [r7, #12]
 8004a16:	4618      	mov	r0, r3
 8004a18:	f003 fea4 	bl	8008764 <USB_EPStopXfer>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004a20:	7afb      	ldrb	r3, [r7, #11]
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3710      	adds	r7, #16
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b08a      	sub	sp, #40	@ 0x28
 8004a2e:	af02      	add	r7, sp, #8
 8004a30:	6078      	str	r0, [r7, #4]
 8004a32:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	4613      	mov	r3, r2
 8004a42:	00db      	lsls	r3, r3, #3
 8004a44:	4413      	add	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	3310      	adds	r3, #16
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	3304      	adds	r3, #4
 8004a50:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	695a      	ldr	r2, [r3, #20]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d901      	bls.n	8004a62 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e06b      	b.n	8004b3a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	691a      	ldr	r2, [r3, #16]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	69fa      	ldr	r2, [r7, #28]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d902      	bls.n	8004a7e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	3303      	adds	r3, #3
 8004a82:	089b      	lsrs	r3, r3, #2
 8004a84:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a86:	e02a      	b.n	8004ade <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	691a      	ldr	r2, [r3, #16]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	695b      	ldr	r3, [r3, #20]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	69fa      	ldr	r2, [r7, #28]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d902      	bls.n	8004aa4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	3303      	adds	r3, #3
 8004aa8:	089b      	lsrs	r3, r3, #2
 8004aaa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	68d9      	ldr	r1, [r3, #12]
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	b2da      	uxtb	r2, r3
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004abc:	9300      	str	r3, [sp, #0]
 8004abe:	4603      	mov	r3, r0
 8004ac0:	6978      	ldr	r0, [r7, #20]
 8004ac2:	f003 fef9 	bl	80088b8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	68da      	ldr	r2, [r3, #12]
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	441a      	add	r2, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	695a      	ldr	r2, [r3, #20]
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	441a      	add	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	015a      	lsls	r2, r3, #5
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004aee:	69ba      	ldr	r2, [r7, #24]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d809      	bhi.n	8004b08 <PCD_WriteEmptyTxFifo+0xde>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	695a      	ldr	r2, [r3, #20]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d203      	bcs.n	8004b08 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1bf      	bne.n	8004a88 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	691a      	ldr	r2, [r3, #16]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	695b      	ldr	r3, [r3, #20]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d811      	bhi.n	8004b38 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	f003 030f 	and.w	r3, r3, #15
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b20:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	43db      	mvns	r3, r3
 8004b2e:	6939      	ldr	r1, [r7, #16]
 8004b30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b34:	4013      	ands	r3, r2
 8004b36:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3720      	adds	r7, #32
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
	...

08004b44 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b088      	sub	sp, #32
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	333c      	adds	r3, #60	@ 0x3c
 8004b5c:	3304      	adds	r3, #4
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	015a      	lsls	r2, r3, #5
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	4413      	add	r3, r2
 8004b6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	799b      	ldrb	r3, [r3, #6]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d17b      	bne.n	8004c72 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	f003 0308 	and.w	r3, r3, #8
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d015      	beq.n	8004bb0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	4a61      	ldr	r2, [pc, #388]	@ (8004d0c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	f240 80b9 	bls.w	8004d00 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	f000 80b3 	beq.w	8004d00 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	015a      	lsls	r2, r3, #5
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bac:	6093      	str	r3, [r2, #8]
 8004bae:	e0a7      	b.n	8004d00 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	f003 0320 	and.w	r3, r3, #32
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d009      	beq.n	8004bce <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	015a      	lsls	r2, r3, #5
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	2320      	movs	r3, #32
 8004bca:	6093      	str	r3, [r2, #8]
 8004bcc:	e098      	b.n	8004d00 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f040 8093 	bne.w	8004d00 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	4a4b      	ldr	r2, [pc, #300]	@ (8004d0c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d90f      	bls.n	8004c02 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00a      	beq.n	8004c02 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	015a      	lsls	r2, r3, #5
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bfe:	6093      	str	r3, [r2, #8]
 8004c00:	e07e      	b.n	8004d00 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004c02:	683a      	ldr	r2, [r7, #0]
 8004c04:	4613      	mov	r3, r2
 8004c06:	00db      	lsls	r3, r3, #3
 8004c08:	4413      	add	r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	4413      	add	r3, r2
 8004c14:	3304      	adds	r3, #4
 8004c16:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6a1a      	ldr	r2, [r3, #32]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	0159      	lsls	r1, r3, #5
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	440b      	add	r3, r1
 8004c24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c2e:	1ad2      	subs	r2, r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d114      	bne.n	8004c64 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d109      	bne.n	8004c56 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6818      	ldr	r0, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	2101      	movs	r1, #1
 8004c50:	f004 f8c8 	bl	8008de4 <USB_EP0_OutStart>
 8004c54:	e006      	b.n	8004c64 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	68da      	ldr	r2, [r3, #12]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	441a      	add	r2, r3
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	4619      	mov	r1, r3
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f006 fb74 	bl	800b358 <HAL_PCD_DataOutStageCallback>
 8004c70:	e046      	b.n	8004d00 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	4a26      	ldr	r2, [pc, #152]	@ (8004d10 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d124      	bne.n	8004cc4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00a      	beq.n	8004c9a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	015a      	lsls	r2, r3, #5
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c90:	461a      	mov	r2, r3
 8004c92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c96:	6093      	str	r3, [r2, #8]
 8004c98:	e032      	b.n	8004d00 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	f003 0320 	and.w	r3, r3, #32
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d008      	beq.n	8004cb6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	015a      	lsls	r2, r3, #5
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	4413      	add	r3, r2
 8004cac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	2320      	movs	r3, #32
 8004cb4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	4619      	mov	r1, r3
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f006 fb4b 	bl	800b358 <HAL_PCD_DataOutStageCallback>
 8004cc2:	e01d      	b.n	8004d00 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d114      	bne.n	8004cf4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004cca:	6879      	ldr	r1, [r7, #4]
 8004ccc:	683a      	ldr	r2, [r7, #0]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	00db      	lsls	r3, r3, #3
 8004cd2:	4413      	add	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	440b      	add	r3, r1
 8004cd8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d108      	bne.n	8004cf4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6818      	ldr	r0, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004cec:	461a      	mov	r2, r3
 8004cee:	2100      	movs	r1, #0
 8004cf0:	f004 f878 	bl	8008de4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f006 fb2c 	bl	800b358 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3720      	adds	r7, #32
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	4f54300a 	.word	0x4f54300a
 8004d10:	4f54310a 	.word	0x4f54310a

08004d14 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b086      	sub	sp, #24
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	333c      	adds	r3, #60	@ 0x3c
 8004d2c:	3304      	adds	r3, #4
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	015a      	lsls	r2, r3, #5
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	4413      	add	r3, r2
 8004d3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	4a15      	ldr	r2, [pc, #84]	@ (8004d9c <PCD_EP_OutSetupPacket_int+0x88>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d90e      	bls.n	8004d68 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d009      	beq.n	8004d68 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	015a      	lsls	r2, r3, #5
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d60:	461a      	mov	r2, r3
 8004d62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d66:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f006 fae3 	bl	800b334 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	4a0a      	ldr	r2, [pc, #40]	@ (8004d9c <PCD_EP_OutSetupPacket_int+0x88>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d90c      	bls.n	8004d90 <PCD_EP_OutSetupPacket_int+0x7c>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	799b      	ldrb	r3, [r3, #6]
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d108      	bne.n	8004d90 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6818      	ldr	r0, [r3, #0]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004d88:	461a      	mov	r2, r3
 8004d8a:	2101      	movs	r1, #1
 8004d8c:	f004 f82a 	bl	8008de4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3718      	adds	r7, #24
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	4f54300a 	.word	0x4f54300a

08004da0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	460b      	mov	r3, r1
 8004daa:	70fb      	strb	r3, [r7, #3]
 8004dac:	4613      	mov	r3, r2
 8004dae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004db8:	78fb      	ldrb	r3, [r7, #3]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d107      	bne.n	8004dce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004dbe:	883b      	ldrh	r3, [r7, #0]
 8004dc0:	0419      	lsls	r1, r3, #16
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68ba      	ldr	r2, [r7, #8]
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	629a      	str	r2, [r3, #40]	@ 0x28
 8004dcc:	e028      	b.n	8004e20 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dd4:	0c1b      	lsrs	r3, r3, #16
 8004dd6:	68ba      	ldr	r2, [r7, #8]
 8004dd8:	4413      	add	r3, r2
 8004dda:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004ddc:	2300      	movs	r3, #0
 8004dde:	73fb      	strb	r3, [r7, #15]
 8004de0:	e00d      	b.n	8004dfe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	7bfb      	ldrb	r3, [r7, #15]
 8004de8:	3340      	adds	r3, #64	@ 0x40
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	4413      	add	r3, r2
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	0c1b      	lsrs	r3, r3, #16
 8004df2:	68ba      	ldr	r2, [r7, #8]
 8004df4:	4413      	add	r3, r2
 8004df6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004df8:	7bfb      	ldrb	r3, [r7, #15]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	73fb      	strb	r3, [r7, #15]
 8004dfe:	7bfa      	ldrb	r2, [r7, #15]
 8004e00:	78fb      	ldrb	r3, [r7, #3]
 8004e02:	3b01      	subs	r3, #1
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d3ec      	bcc.n	8004de2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004e08:	883b      	ldrh	r3, [r7, #0]
 8004e0a:	0418      	lsls	r0, r3, #16
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6819      	ldr	r1, [r3, #0]
 8004e10:	78fb      	ldrb	r3, [r7, #3]
 8004e12:	3b01      	subs	r3, #1
 8004e14:	68ba      	ldr	r2, [r7, #8]
 8004e16:	4302      	orrs	r2, r0
 8004e18:	3340      	adds	r3, #64	@ 0x40
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	440b      	add	r3, r1
 8004e1e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3714      	adds	r7, #20
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004e2e:	b480      	push	{r7}
 8004e30:	b083      	sub	sp, #12
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
 8004e36:	460b      	mov	r3, r1
 8004e38:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	887a      	ldrh	r2, [r7, #2]
 8004e40:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e82:	f043 0303 	orr.w	r3, r3, #3
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3714      	adds	r7, #20
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d101      	bne.n	8004eac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e0cc      	b.n	8005046 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004eac:	4b68      	ldr	r3, [pc, #416]	@ (8005050 <HAL_RCC_ClockConfig+0x1b8>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 030f 	and.w	r3, r3, #15
 8004eb4:	683a      	ldr	r2, [r7, #0]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d90c      	bls.n	8004ed4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eba:	4b65      	ldr	r3, [pc, #404]	@ (8005050 <HAL_RCC_ClockConfig+0x1b8>)
 8004ebc:	683a      	ldr	r2, [r7, #0]
 8004ebe:	b2d2      	uxtb	r2, r2
 8004ec0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ec2:	4b63      	ldr	r3, [pc, #396]	@ (8005050 <HAL_RCC_ClockConfig+0x1b8>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 030f 	and.w	r3, r3, #15
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d001      	beq.n	8004ed4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e0b8      	b.n	8005046 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0302 	and.w	r3, r3, #2
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d020      	beq.n	8004f22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0304 	and.w	r3, r3, #4
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d005      	beq.n	8004ef8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004eec:	4b59      	ldr	r3, [pc, #356]	@ (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	4a58      	ldr	r2, [pc, #352]	@ (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004ef2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004ef6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0308 	and.w	r3, r3, #8
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d005      	beq.n	8004f10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f04:	4b53      	ldr	r3, [pc, #332]	@ (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	4a52      	ldr	r2, [pc, #328]	@ (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004f0a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004f0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f10:	4b50      	ldr	r3, [pc, #320]	@ (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	494d      	ldr	r1, [pc, #308]	@ (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d044      	beq.n	8004fb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d107      	bne.n	8004f46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f36:	4b47      	ldr	r3, [pc, #284]	@ (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d119      	bne.n	8004f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e07f      	b.n	8005046 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d003      	beq.n	8004f56 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f52:	2b03      	cmp	r3, #3
 8004f54:	d107      	bne.n	8004f66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f56:	4b3f      	ldr	r3, [pc, #252]	@ (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d109      	bne.n	8004f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e06f      	b.n	8005046 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f66:	4b3b      	ldr	r3, [pc, #236]	@ (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d101      	bne.n	8004f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e067      	b.n	8005046 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f76:	4b37      	ldr	r3, [pc, #220]	@ (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f023 0203 	bic.w	r2, r3, #3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	4934      	ldr	r1, [pc, #208]	@ (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f88:	f7fd f9f6 	bl	8002378 <HAL_GetTick>
 8004f8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f8e:	e00a      	b.n	8004fa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f90:	f7fd f9f2 	bl	8002378 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e04f      	b.n	8005046 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fa6:	4b2b      	ldr	r3, [pc, #172]	@ (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f003 020c 	and.w	r2, r3, #12
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d1eb      	bne.n	8004f90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fb8:	4b25      	ldr	r3, [pc, #148]	@ (8005050 <HAL_RCC_ClockConfig+0x1b8>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 030f 	and.w	r3, r3, #15
 8004fc0:	683a      	ldr	r2, [r7, #0]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d20c      	bcs.n	8004fe0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fc6:	4b22      	ldr	r3, [pc, #136]	@ (8005050 <HAL_RCC_ClockConfig+0x1b8>)
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	b2d2      	uxtb	r2, r2
 8004fcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fce:	4b20      	ldr	r3, [pc, #128]	@ (8005050 <HAL_RCC_ClockConfig+0x1b8>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 030f 	and.w	r3, r3, #15
 8004fd6:	683a      	ldr	r2, [r7, #0]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d001      	beq.n	8004fe0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e032      	b.n	8005046 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0304 	and.w	r3, r3, #4
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d008      	beq.n	8004ffe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fec:	4b19      	ldr	r3, [pc, #100]	@ (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	4916      	ldr	r1, [pc, #88]	@ (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0308 	and.w	r3, r3, #8
 8005006:	2b00      	cmp	r3, #0
 8005008:	d009      	beq.n	800501e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800500a:	4b12      	ldr	r3, [pc, #72]	@ (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	00db      	lsls	r3, r3, #3
 8005018:	490e      	ldr	r1, [pc, #56]	@ (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 800501a:	4313      	orrs	r3, r2
 800501c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800501e:	f000 fb7f 	bl	8005720 <HAL_RCC_GetSysClockFreq>
 8005022:	4602      	mov	r2, r0
 8005024:	4b0b      	ldr	r3, [pc, #44]	@ (8005054 <HAL_RCC_ClockConfig+0x1bc>)
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	091b      	lsrs	r3, r3, #4
 800502a:	f003 030f 	and.w	r3, r3, #15
 800502e:	490a      	ldr	r1, [pc, #40]	@ (8005058 <HAL_RCC_ClockConfig+0x1c0>)
 8005030:	5ccb      	ldrb	r3, [r1, r3]
 8005032:	fa22 f303 	lsr.w	r3, r2, r3
 8005036:	4a09      	ldr	r2, [pc, #36]	@ (800505c <HAL_RCC_ClockConfig+0x1c4>)
 8005038:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800503a:	4b09      	ldr	r3, [pc, #36]	@ (8005060 <HAL_RCC_ClockConfig+0x1c8>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4618      	mov	r0, r3
 8005040:	f7fd f956 	bl	80022f0 <HAL_InitTick>

  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3710      	adds	r7, #16
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	40023c00 	.word	0x40023c00
 8005054:	40023800 	.word	0x40023800
 8005058:	080111ec 	.word	0x080111ec
 800505c:	20000000 	.word	0x20000000
 8005060:	20000004 	.word	0x20000004

08005064 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005064:	b480      	push	{r7}
 8005066:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005068:	4b03      	ldr	r3, [pc, #12]	@ (8005078 <HAL_RCC_GetHCLKFreq+0x14>)
 800506a:	681b      	ldr	r3, [r3, #0]
}
 800506c:	4618      	mov	r0, r3
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	20000000 	.word	0x20000000

0800507c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005080:	f7ff fff0 	bl	8005064 <HAL_RCC_GetHCLKFreq>
 8005084:	4602      	mov	r2, r0
 8005086:	4b05      	ldr	r3, [pc, #20]	@ (800509c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	0a9b      	lsrs	r3, r3, #10
 800508c:	f003 0307 	and.w	r3, r3, #7
 8005090:	4903      	ldr	r1, [pc, #12]	@ (80050a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005092:	5ccb      	ldrb	r3, [r1, r3]
 8005094:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005098:	4618      	mov	r0, r3
 800509a:	bd80      	pop	{r7, pc}
 800509c:	40023800 	.word	0x40023800
 80050a0:	080111fc 	.word	0x080111fc

080050a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80050a8:	f7ff ffdc 	bl	8005064 <HAL_RCC_GetHCLKFreq>
 80050ac:	4602      	mov	r2, r0
 80050ae:	4b05      	ldr	r3, [pc, #20]	@ (80050c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	0b5b      	lsrs	r3, r3, #13
 80050b4:	f003 0307 	and.w	r3, r3, #7
 80050b8:	4903      	ldr	r1, [pc, #12]	@ (80050c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050ba:	5ccb      	ldrb	r3, [r1, r3]
 80050bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	40023800 	.word	0x40023800
 80050c8:	080111fc 	.word	0x080111fc

080050cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b08c      	sub	sp, #48	@ 0x30
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050d4:	2300      	movs	r3, #0
 80050d6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 80050d8:	2300      	movs	r3, #0
 80050da:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80050dc:	2300      	movs	r3, #0
 80050de:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80050e0:	2300      	movs	r3, #0
 80050e2:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80050e4:	2300      	movs	r3, #0
 80050e6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80050e8:	2300      	movs	r3, #0
 80050ea:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80050ec:	2300      	movs	r3, #0
 80050ee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80050f0:	2300      	movs	r3, #0
 80050f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 80050f4:	2300      	movs	r3, #0
 80050f6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0301 	and.w	r3, r3, #1
 8005100:	2b00      	cmp	r3, #0
 8005102:	d010      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8005104:	4b6f      	ldr	r3, [pc, #444]	@ (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005106:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800510a:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005112:	496c      	ldr	r1, [pc, #432]	@ (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005114:	4313      	orrs	r3, r2
 8005116:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800511e:	2b00      	cmp	r3, #0
 8005120:	d101      	bne.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8005122:	2301      	movs	r3, #1
 8005124:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0302 	and.w	r3, r3, #2
 800512e:	2b00      	cmp	r3, #0
 8005130:	d010      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8005132:	4b64      	ldr	r3, [pc, #400]	@ (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005134:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005138:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005140:	4960      	ldr	r1, [pc, #384]	@ (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005142:	4313      	orrs	r3, r2
 8005144:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800514c:	2b00      	cmp	r3, #0
 800514e:	d101      	bne.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8005150:	2301      	movs	r3, #1
 8005152:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0304 	and.w	r3, r3, #4
 800515c:	2b00      	cmp	r3, #0
 800515e:	d017      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005160:	4b58      	ldr	r3, [pc, #352]	@ (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005162:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005166:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800516e:	4955      	ldr	r1, [pc, #340]	@ (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005170:	4313      	orrs	r3, r2
 8005172:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800517a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800517e:	d101      	bne.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8005180:	2301      	movs	r3, #1
 8005182:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005188:	2b00      	cmp	r3, #0
 800518a:	d101      	bne.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800518c:	2301      	movs	r3, #1
 800518e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0308 	and.w	r3, r3, #8
 8005198:	2b00      	cmp	r3, #0
 800519a:	d017      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800519c:	4b49      	ldr	r3, [pc, #292]	@ (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800519e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80051a2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051aa:	4946      	ldr	r1, [pc, #280]	@ (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80051ba:	d101      	bne.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80051bc:	2301      	movs	r3, #1
 80051be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d101      	bne.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80051c8:	2301      	movs	r3, #1
 80051ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0320 	and.w	r3, r3, #32
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	f000 808a 	beq.w	80052ee <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80051da:	2300      	movs	r3, #0
 80051dc:	60bb      	str	r3, [r7, #8]
 80051de:	4b39      	ldr	r3, [pc, #228]	@ (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80051e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e2:	4a38      	ldr	r2, [pc, #224]	@ (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80051e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80051ea:	4b36      	ldr	r3, [pc, #216]	@ (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80051ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051f2:	60bb      	str	r3, [r7, #8]
 80051f4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80051f6:	4b34      	ldr	r3, [pc, #208]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a33      	ldr	r2, [pc, #204]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80051fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005200:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005202:	f7fd f8b9 	bl	8002378 <HAL_GetTick>
 8005206:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005208:	e008      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800520a:	f7fd f8b5 	bl	8002378 <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	2b02      	cmp	r3, #2
 8005216:	d901      	bls.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e278      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800521c:	4b2a      	ldr	r3, [pc, #168]	@ (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005224:	2b00      	cmp	r3, #0
 8005226:	d0f0      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005228:	4b26      	ldr	r3, [pc, #152]	@ (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800522a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800522c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005230:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005232:	6a3b      	ldr	r3, [r7, #32]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d02f      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800523c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005240:	6a3a      	ldr	r2, [r7, #32]
 8005242:	429a      	cmp	r2, r3
 8005244:	d028      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005246:	4b1f      	ldr	r3, [pc, #124]	@ (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800524a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800524e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005250:	4b1e      	ldr	r3, [pc, #120]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005252:	2201      	movs	r2, #1
 8005254:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005256:	4b1d      	ldr	r3, [pc, #116]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005258:	2200      	movs	r2, #0
 800525a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800525c:	4a19      	ldr	r2, [pc, #100]	@ (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800525e:	6a3b      	ldr	r3, [r7, #32]
 8005260:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005262:	4b18      	ldr	r3, [pc, #96]	@ (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005264:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	2b01      	cmp	r3, #1
 800526c:	d114      	bne.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800526e:	f7fd f883 	bl	8002378 <HAL_GetTick>
 8005272:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005274:	e00a      	b.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005276:	f7fd f87f 	bl	8002378 <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005284:	4293      	cmp	r3, r2
 8005286:	d901      	bls.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e240      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800528c:	4b0d      	ldr	r3, [pc, #52]	@ (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800528e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005290:	f003 0302 	and.w	r3, r3, #2
 8005294:	2b00      	cmp	r3, #0
 8005296:	d0ee      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800529c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80052a4:	d114      	bne.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80052a6:	4b07      	ldr	r3, [pc, #28]	@ (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80052b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052ba:	4902      	ldr	r1, [pc, #8]	@ (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	608b      	str	r3, [r1, #8]
 80052c0:	e00c      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x210>
 80052c2:	bf00      	nop
 80052c4:	40023800 	.word	0x40023800
 80052c8:	40007000 	.word	0x40007000
 80052cc:	42470e40 	.word	0x42470e40
 80052d0:	4b4a      	ldr	r3, [pc, #296]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	4a49      	ldr	r2, [pc, #292]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80052d6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80052da:	6093      	str	r3, [r2, #8]
 80052dc:	4b47      	ldr	r3, [pc, #284]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80052de:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052e8:	4944      	ldr	r1, [pc, #272]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0310 	and.w	r3, r3, #16
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d004      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8005300:	4b3f      	ldr	r3, [pc, #252]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8005302:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00a      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8005310:	4b3a      	ldr	r3, [pc, #232]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005312:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005316:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800531e:	4937      	ldr	r1, [pc, #220]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005320:	4313      	orrs	r3, r2
 8005322:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00a      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005332:	4b32      	ldr	r3, [pc, #200]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005334:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005338:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005340:	492e      	ldr	r1, [pc, #184]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005342:	4313      	orrs	r3, r2
 8005344:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005350:	2b00      	cmp	r3, #0
 8005352:	d011      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005354:	4b29      	ldr	r3, [pc, #164]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005356:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800535a:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005362:	4926      	ldr	r1, [pc, #152]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005364:	4313      	orrs	r3, r2
 8005366:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800536e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005372:	d101      	bne.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8005374:	2301      	movs	r3, #1
 8005376:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005380:	2b00      	cmp	r3, #0
 8005382:	d00a      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005384:	4b1d      	ldr	r3, [pc, #116]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005386:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800538a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005392:	491a      	ldr	r1, [pc, #104]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005394:	4313      	orrs	r3, r2
 8005396:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d011      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80053a6:	4b15      	ldr	r3, [pc, #84]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80053a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053ac:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053b4:	4911      	ldr	r1, [pc, #68]	@ (80053fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053c4:	d101      	bne.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80053c6:	2301      	movs	r3, #1
 80053c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80053ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d005      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x310>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053d8:	f040 80ff 	bne.w	80055da <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80053dc:	4b09      	ldr	r3, [pc, #36]	@ (8005404 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053de:	2200      	movs	r2, #0
 80053e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80053e2:	f7fc ffc9 	bl	8002378 <HAL_GetTick>
 80053e6:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80053e8:	e00e      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80053ea:	f7fc ffc5 	bl	8002378 <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d907      	bls.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e188      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x642>
 80053fc:	40023800 	.word	0x40023800
 8005400:	424711e0 	.word	0x424711e0
 8005404:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005408:	4b7e      	ldr	r3, [pc, #504]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1ea      	bne.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0301 	and.w	r3, r3, #1
 800541c:	2b00      	cmp	r3, #0
 800541e:	d003      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005424:	2b00      	cmp	r3, #0
 8005426:	d009      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005430:	2b00      	cmp	r3, #0
 8005432:	d028      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005438:	2b00      	cmp	r3, #0
 800543a:	d124      	bne.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800543c:	4b71      	ldr	r3, [pc, #452]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800543e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005442:	0c1b      	lsrs	r3, r3, #16
 8005444:	f003 0303 	and.w	r3, r3, #3
 8005448:	3301      	adds	r3, #1
 800544a:	005b      	lsls	r3, r3, #1
 800544c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800544e:	4b6d      	ldr	r3, [pc, #436]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005450:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005454:	0e1b      	lsrs	r3, r3, #24
 8005456:	f003 030f 	and.w	r3, r3, #15
 800545a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685a      	ldr	r2, [r3, #4]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	019b      	lsls	r3, r3, #6
 8005466:	431a      	orrs	r2, r3
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	085b      	lsrs	r3, r3, #1
 800546c:	3b01      	subs	r3, #1
 800546e:	041b      	lsls	r3, r3, #16
 8005470:	431a      	orrs	r2, r3
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	061b      	lsls	r3, r3, #24
 8005476:	431a      	orrs	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	695b      	ldr	r3, [r3, #20]
 800547c:	071b      	lsls	r3, r3, #28
 800547e:	4961      	ldr	r1, [pc, #388]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005480:	4313      	orrs	r3, r2
 8005482:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0304 	and.w	r3, r3, #4
 800548e:	2b00      	cmp	r3, #0
 8005490:	d004      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005496:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800549a:	d00a      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d035      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80054b0:	d130      	bne.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80054b2:	4b54      	ldr	r3, [pc, #336]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80054b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054b8:	0c1b      	lsrs	r3, r3, #16
 80054ba:	f003 0303 	and.w	r3, r3, #3
 80054be:	3301      	adds	r3, #1
 80054c0:	005b      	lsls	r3, r3, #1
 80054c2:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80054c4:	4b4f      	ldr	r3, [pc, #316]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80054c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054ca:	0f1b      	lsrs	r3, r3, #28
 80054cc:	f003 0307 	and.w	r3, r3, #7
 80054d0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685a      	ldr	r2, [r3, #4]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	019b      	lsls	r3, r3, #6
 80054dc:	431a      	orrs	r2, r3
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	085b      	lsrs	r3, r3, #1
 80054e2:	3b01      	subs	r3, #1
 80054e4:	041b      	lsls	r3, r3, #16
 80054e6:	431a      	orrs	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	061b      	lsls	r3, r3, #24
 80054ee:	431a      	orrs	r2, r3
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	071b      	lsls	r3, r3, #28
 80054f4:	4943      	ldr	r1, [pc, #268]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80054fc:	4b41      	ldr	r3, [pc, #260]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80054fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005502:	f023 021f 	bic.w	r2, r3, #31
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800550a:	3b01      	subs	r3, #1
 800550c:	493d      	ldr	r1, [pc, #244]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800550e:	4313      	orrs	r3, r2
 8005510:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800551c:	2b00      	cmp	r3, #0
 800551e:	d029      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005524:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005528:	d124      	bne.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800552a:	4b36      	ldr	r3, [pc, #216]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800552c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005530:	0c1b      	lsrs	r3, r3, #16
 8005532:	f003 0303 	and.w	r3, r3, #3
 8005536:	3301      	adds	r3, #1
 8005538:	005b      	lsls	r3, r3, #1
 800553a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800553c:	4b31      	ldr	r3, [pc, #196]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800553e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005542:	0f1b      	lsrs	r3, r3, #28
 8005544:	f003 0307 	and.w	r3, r3, #7
 8005548:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685a      	ldr	r2, [r3, #4]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	019b      	lsls	r3, r3, #6
 8005554:	431a      	orrs	r2, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	085b      	lsrs	r3, r3, #1
 800555c:	3b01      	subs	r3, #1
 800555e:	041b      	lsls	r3, r3, #16
 8005560:	431a      	orrs	r2, r3
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	061b      	lsls	r3, r3, #24
 8005566:	431a      	orrs	r2, r3
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	071b      	lsls	r3, r3, #28
 800556c:	4925      	ldr	r1, [pc, #148]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800556e:	4313      	orrs	r3, r2
 8005570:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800557c:	2b00      	cmp	r3, #0
 800557e:	d016      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685a      	ldr	r2, [r3, #4]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	019b      	lsls	r3, r3, #6
 800558a:	431a      	orrs	r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	085b      	lsrs	r3, r3, #1
 8005592:	3b01      	subs	r3, #1
 8005594:	041b      	lsls	r3, r3, #16
 8005596:	431a      	orrs	r2, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	061b      	lsls	r3, r3, #24
 800559e:	431a      	orrs	r2, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	695b      	ldr	r3, [r3, #20]
 80055a4:	071b      	lsls	r3, r3, #28
 80055a6:	4917      	ldr	r1, [pc, #92]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80055ae:	4b16      	ldr	r3, [pc, #88]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80055b0:	2201      	movs	r2, #1
 80055b2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80055b4:	f7fc fee0 	bl	8002378 <HAL_GetTick>
 80055b8:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80055ba:	e008      	b.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80055bc:	f7fc fedc 	bl	8002378 <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d901      	bls.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e09f      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80055ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d0f0      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 80055da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055dc:	2b01      	cmp	r3, #1
 80055de:	f040 8095 	bne.w	800570c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80055e2:	4b0a      	ldr	r3, [pc, #40]	@ (800560c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80055e4:	2200      	movs	r2, #0
 80055e6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80055e8:	f7fc fec6 	bl	8002378 <HAL_GetTick>
 80055ec:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80055ee:	e00f      	b.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80055f0:	f7fc fec2 	bl	8002378 <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d908      	bls.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e085      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005602:	bf00      	nop
 8005604:	40023800 	.word	0x40023800
 8005608:	42470068 	.word	0x42470068
 800560c:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005610:	4b41      	ldr	r3, [pc, #260]	@ (8005718 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005618:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800561c:	d0e8      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0304 	and.w	r3, r3, #4
 8005626:	2b00      	cmp	r3, #0
 8005628:	d003      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800562e:	2b00      	cmp	r3, #0
 8005630:	d009      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800563a:	2b00      	cmp	r3, #0
 800563c:	d02b      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005642:	2b00      	cmp	r3, #0
 8005644:	d127      	bne.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8005646:	4b34      	ldr	r3, [pc, #208]	@ (8005718 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005648:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800564c:	0c1b      	lsrs	r3, r3, #16
 800564e:	f003 0303 	and.w	r3, r3, #3
 8005652:	3301      	adds	r3, #1
 8005654:	005b      	lsls	r3, r3, #1
 8005656:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	699a      	ldr	r2, [r3, #24]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	69db      	ldr	r3, [r3, #28]
 8005660:	019b      	lsls	r3, r3, #6
 8005662:	431a      	orrs	r2, r3
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	085b      	lsrs	r3, r3, #1
 8005668:	3b01      	subs	r3, #1
 800566a:	041b      	lsls	r3, r3, #16
 800566c:	431a      	orrs	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005672:	061b      	lsls	r3, r3, #24
 8005674:	4928      	ldr	r1, [pc, #160]	@ (8005718 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005676:	4313      	orrs	r3, r2
 8005678:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800567c:	4b26      	ldr	r3, [pc, #152]	@ (8005718 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800567e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005682:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800568a:	3b01      	subs	r3, #1
 800568c:	021b      	lsls	r3, r3, #8
 800568e:	4922      	ldr	r1, [pc, #136]	@ (8005718 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005690:	4313      	orrs	r3, r2
 8005692:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d01d      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056aa:	d118      	bne.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80056ac:	4b1a      	ldr	r3, [pc, #104]	@ (8005718 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80056ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056b2:	0e1b      	lsrs	r3, r3, #24
 80056b4:	f003 030f 	and.w	r3, r3, #15
 80056b8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	699a      	ldr	r2, [r3, #24]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	69db      	ldr	r3, [r3, #28]
 80056c2:	019b      	lsls	r3, r3, #6
 80056c4:	431a      	orrs	r2, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	085b      	lsrs	r3, r3, #1
 80056cc:	3b01      	subs	r3, #1
 80056ce:	041b      	lsls	r3, r3, #16
 80056d0:	431a      	orrs	r2, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	061b      	lsls	r3, r3, #24
 80056d6:	4910      	ldr	r1, [pc, #64]	@ (8005718 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80056d8:	4313      	orrs	r3, r2
 80056da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80056de:	4b0f      	ldr	r3, [pc, #60]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80056e0:	2201      	movs	r2, #1
 80056e2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80056e4:	f7fc fe48 	bl	8002378 <HAL_GetTick>
 80056e8:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80056ea:	e008      	b.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80056ec:	f7fc fe44 	bl	8002378 <HAL_GetTick>
 80056f0:	4602      	mov	r2, r0
 80056f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d901      	bls.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e007      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80056fe:	4b06      	ldr	r3, [pc, #24]	@ (8005718 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005706:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800570a:	d1ef      	bne.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3730      	adds	r7, #48	@ 0x30
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	40023800 	.word	0x40023800
 800571c:	42470070 	.word	0x42470070

08005720 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005720:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005724:	b0ae      	sub	sp, #184	@ 0xb8
 8005726:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005728:	2300      	movs	r3, #0
 800572a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800572e:	2300      	movs	r3, #0
 8005730:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8005734:	2300      	movs	r3, #0
 8005736:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800573a:	2300      	movs	r3, #0
 800573c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8005740:	2300      	movs	r3, #0
 8005742:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005746:	4bcb      	ldr	r3, [pc, #812]	@ (8005a74 <HAL_RCC_GetSysClockFreq+0x354>)
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	f003 030c 	and.w	r3, r3, #12
 800574e:	2b0c      	cmp	r3, #12
 8005750:	f200 8206 	bhi.w	8005b60 <HAL_RCC_GetSysClockFreq+0x440>
 8005754:	a201      	add	r2, pc, #4	@ (adr r2, 800575c <HAL_RCC_GetSysClockFreq+0x3c>)
 8005756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800575a:	bf00      	nop
 800575c:	08005791 	.word	0x08005791
 8005760:	08005b61 	.word	0x08005b61
 8005764:	08005b61 	.word	0x08005b61
 8005768:	08005b61 	.word	0x08005b61
 800576c:	08005799 	.word	0x08005799
 8005770:	08005b61 	.word	0x08005b61
 8005774:	08005b61 	.word	0x08005b61
 8005778:	08005b61 	.word	0x08005b61
 800577c:	080057a1 	.word	0x080057a1
 8005780:	08005b61 	.word	0x08005b61
 8005784:	08005b61 	.word	0x08005b61
 8005788:	08005b61 	.word	0x08005b61
 800578c:	08005991 	.word	0x08005991
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005790:	4bb9      	ldr	r3, [pc, #740]	@ (8005a78 <HAL_RCC_GetSysClockFreq+0x358>)
 8005792:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005796:	e1e7      	b.n	8005b68 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005798:	4bb8      	ldr	r3, [pc, #736]	@ (8005a7c <HAL_RCC_GetSysClockFreq+0x35c>)
 800579a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800579e:	e1e3      	b.n	8005b68 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057a0:	4bb4      	ldr	r3, [pc, #720]	@ (8005a74 <HAL_RCC_GetSysClockFreq+0x354>)
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80057a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80057ac:	4bb1      	ldr	r3, [pc, #708]	@ (8005a74 <HAL_RCC_GetSysClockFreq+0x354>)
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d071      	beq.n	800589c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057b8:	4bae      	ldr	r3, [pc, #696]	@ (8005a74 <HAL_RCC_GetSysClockFreq+0x354>)
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	099b      	lsrs	r3, r3, #6
 80057be:	2200      	movs	r2, #0
 80057c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80057c4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80057c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80057cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80057d4:	2300      	movs	r3, #0
 80057d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80057da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80057de:	4622      	mov	r2, r4
 80057e0:	462b      	mov	r3, r5
 80057e2:	f04f 0000 	mov.w	r0, #0
 80057e6:	f04f 0100 	mov.w	r1, #0
 80057ea:	0159      	lsls	r1, r3, #5
 80057ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057f0:	0150      	lsls	r0, r2, #5
 80057f2:	4602      	mov	r2, r0
 80057f4:	460b      	mov	r3, r1
 80057f6:	4621      	mov	r1, r4
 80057f8:	1a51      	subs	r1, r2, r1
 80057fa:	6439      	str	r1, [r7, #64]	@ 0x40
 80057fc:	4629      	mov	r1, r5
 80057fe:	eb63 0301 	sbc.w	r3, r3, r1
 8005802:	647b      	str	r3, [r7, #68]	@ 0x44
 8005804:	f04f 0200 	mov.w	r2, #0
 8005808:	f04f 0300 	mov.w	r3, #0
 800580c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8005810:	4649      	mov	r1, r9
 8005812:	018b      	lsls	r3, r1, #6
 8005814:	4641      	mov	r1, r8
 8005816:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800581a:	4641      	mov	r1, r8
 800581c:	018a      	lsls	r2, r1, #6
 800581e:	4641      	mov	r1, r8
 8005820:	1a51      	subs	r1, r2, r1
 8005822:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005824:	4649      	mov	r1, r9
 8005826:	eb63 0301 	sbc.w	r3, r3, r1
 800582a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800582c:	f04f 0200 	mov.w	r2, #0
 8005830:	f04f 0300 	mov.w	r3, #0
 8005834:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8005838:	4649      	mov	r1, r9
 800583a:	00cb      	lsls	r3, r1, #3
 800583c:	4641      	mov	r1, r8
 800583e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005842:	4641      	mov	r1, r8
 8005844:	00ca      	lsls	r2, r1, #3
 8005846:	4610      	mov	r0, r2
 8005848:	4619      	mov	r1, r3
 800584a:	4603      	mov	r3, r0
 800584c:	4622      	mov	r2, r4
 800584e:	189b      	adds	r3, r3, r2
 8005850:	633b      	str	r3, [r7, #48]	@ 0x30
 8005852:	462b      	mov	r3, r5
 8005854:	460a      	mov	r2, r1
 8005856:	eb42 0303 	adc.w	r3, r2, r3
 800585a:	637b      	str	r3, [r7, #52]	@ 0x34
 800585c:	f04f 0200 	mov.w	r2, #0
 8005860:	f04f 0300 	mov.w	r3, #0
 8005864:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005868:	4629      	mov	r1, r5
 800586a:	024b      	lsls	r3, r1, #9
 800586c:	4621      	mov	r1, r4
 800586e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005872:	4621      	mov	r1, r4
 8005874:	024a      	lsls	r2, r1, #9
 8005876:	4610      	mov	r0, r2
 8005878:	4619      	mov	r1, r3
 800587a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800587e:	2200      	movs	r2, #0
 8005880:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005884:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005888:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800588c:	f7fb fa7c 	bl	8000d88 <__aeabi_uldivmod>
 8005890:	4602      	mov	r2, r0
 8005892:	460b      	mov	r3, r1
 8005894:	4613      	mov	r3, r2
 8005896:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800589a:	e067      	b.n	800596c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800589c:	4b75      	ldr	r3, [pc, #468]	@ (8005a74 <HAL_RCC_GetSysClockFreq+0x354>)
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	099b      	lsrs	r3, r3, #6
 80058a2:	2200      	movs	r2, #0
 80058a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80058a8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80058ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80058b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80058b6:	2300      	movs	r3, #0
 80058b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80058ba:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80058be:	4622      	mov	r2, r4
 80058c0:	462b      	mov	r3, r5
 80058c2:	f04f 0000 	mov.w	r0, #0
 80058c6:	f04f 0100 	mov.w	r1, #0
 80058ca:	0159      	lsls	r1, r3, #5
 80058cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058d0:	0150      	lsls	r0, r2, #5
 80058d2:	4602      	mov	r2, r0
 80058d4:	460b      	mov	r3, r1
 80058d6:	4621      	mov	r1, r4
 80058d8:	1a51      	subs	r1, r2, r1
 80058da:	62b9      	str	r1, [r7, #40]	@ 0x28
 80058dc:	4629      	mov	r1, r5
 80058de:	eb63 0301 	sbc.w	r3, r3, r1
 80058e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058e4:	f04f 0200 	mov.w	r2, #0
 80058e8:	f04f 0300 	mov.w	r3, #0
 80058ec:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80058f0:	4649      	mov	r1, r9
 80058f2:	018b      	lsls	r3, r1, #6
 80058f4:	4641      	mov	r1, r8
 80058f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80058fa:	4641      	mov	r1, r8
 80058fc:	018a      	lsls	r2, r1, #6
 80058fe:	4641      	mov	r1, r8
 8005900:	ebb2 0a01 	subs.w	sl, r2, r1
 8005904:	4649      	mov	r1, r9
 8005906:	eb63 0b01 	sbc.w	fp, r3, r1
 800590a:	f04f 0200 	mov.w	r2, #0
 800590e:	f04f 0300 	mov.w	r3, #0
 8005912:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005916:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800591a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800591e:	4692      	mov	sl, r2
 8005920:	469b      	mov	fp, r3
 8005922:	4623      	mov	r3, r4
 8005924:	eb1a 0303 	adds.w	r3, sl, r3
 8005928:	623b      	str	r3, [r7, #32]
 800592a:	462b      	mov	r3, r5
 800592c:	eb4b 0303 	adc.w	r3, fp, r3
 8005930:	627b      	str	r3, [r7, #36]	@ 0x24
 8005932:	f04f 0200 	mov.w	r2, #0
 8005936:	f04f 0300 	mov.w	r3, #0
 800593a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800593e:	4629      	mov	r1, r5
 8005940:	028b      	lsls	r3, r1, #10
 8005942:	4621      	mov	r1, r4
 8005944:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005948:	4621      	mov	r1, r4
 800594a:	028a      	lsls	r2, r1, #10
 800594c:	4610      	mov	r0, r2
 800594e:	4619      	mov	r1, r3
 8005950:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005954:	2200      	movs	r2, #0
 8005956:	673b      	str	r3, [r7, #112]	@ 0x70
 8005958:	677a      	str	r2, [r7, #116]	@ 0x74
 800595a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800595e:	f7fb fa13 	bl	8000d88 <__aeabi_uldivmod>
 8005962:	4602      	mov	r2, r0
 8005964:	460b      	mov	r3, r1
 8005966:	4613      	mov	r3, r2
 8005968:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800596c:	4b41      	ldr	r3, [pc, #260]	@ (8005a74 <HAL_RCC_GetSysClockFreq+0x354>)
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	0c1b      	lsrs	r3, r3, #16
 8005972:	f003 0303 	and.w	r3, r3, #3
 8005976:	3301      	adds	r3, #1
 8005978:	005b      	lsls	r3, r3, #1
 800597a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800597e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005982:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005986:	fbb2 f3f3 	udiv	r3, r2, r3
 800598a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800598e:	e0eb      	b.n	8005b68 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005990:	4b38      	ldr	r3, [pc, #224]	@ (8005a74 <HAL_RCC_GetSysClockFreq+0x354>)
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005998:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800599c:	4b35      	ldr	r3, [pc, #212]	@ (8005a74 <HAL_RCC_GetSysClockFreq+0x354>)
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d06b      	beq.n	8005a80 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059a8:	4b32      	ldr	r3, [pc, #200]	@ (8005a74 <HAL_RCC_GetSysClockFreq+0x354>)
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	099b      	lsrs	r3, r3, #6
 80059ae:	2200      	movs	r2, #0
 80059b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80059b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80059b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80059b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ba:	663b      	str	r3, [r7, #96]	@ 0x60
 80059bc:	2300      	movs	r3, #0
 80059be:	667b      	str	r3, [r7, #100]	@ 0x64
 80059c0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80059c4:	4622      	mov	r2, r4
 80059c6:	462b      	mov	r3, r5
 80059c8:	f04f 0000 	mov.w	r0, #0
 80059cc:	f04f 0100 	mov.w	r1, #0
 80059d0:	0159      	lsls	r1, r3, #5
 80059d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059d6:	0150      	lsls	r0, r2, #5
 80059d8:	4602      	mov	r2, r0
 80059da:	460b      	mov	r3, r1
 80059dc:	4621      	mov	r1, r4
 80059de:	1a51      	subs	r1, r2, r1
 80059e0:	61b9      	str	r1, [r7, #24]
 80059e2:	4629      	mov	r1, r5
 80059e4:	eb63 0301 	sbc.w	r3, r3, r1
 80059e8:	61fb      	str	r3, [r7, #28]
 80059ea:	f04f 0200 	mov.w	r2, #0
 80059ee:	f04f 0300 	mov.w	r3, #0
 80059f2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80059f6:	4659      	mov	r1, fp
 80059f8:	018b      	lsls	r3, r1, #6
 80059fa:	4651      	mov	r1, sl
 80059fc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005a00:	4651      	mov	r1, sl
 8005a02:	018a      	lsls	r2, r1, #6
 8005a04:	4651      	mov	r1, sl
 8005a06:	ebb2 0801 	subs.w	r8, r2, r1
 8005a0a:	4659      	mov	r1, fp
 8005a0c:	eb63 0901 	sbc.w	r9, r3, r1
 8005a10:	f04f 0200 	mov.w	r2, #0
 8005a14:	f04f 0300 	mov.w	r3, #0
 8005a18:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a1c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a20:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a24:	4690      	mov	r8, r2
 8005a26:	4699      	mov	r9, r3
 8005a28:	4623      	mov	r3, r4
 8005a2a:	eb18 0303 	adds.w	r3, r8, r3
 8005a2e:	613b      	str	r3, [r7, #16]
 8005a30:	462b      	mov	r3, r5
 8005a32:	eb49 0303 	adc.w	r3, r9, r3
 8005a36:	617b      	str	r3, [r7, #20]
 8005a38:	f04f 0200 	mov.w	r2, #0
 8005a3c:	f04f 0300 	mov.w	r3, #0
 8005a40:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005a44:	4629      	mov	r1, r5
 8005a46:	024b      	lsls	r3, r1, #9
 8005a48:	4621      	mov	r1, r4
 8005a4a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005a4e:	4621      	mov	r1, r4
 8005a50:	024a      	lsls	r2, r1, #9
 8005a52:	4610      	mov	r0, r2
 8005a54:	4619      	mov	r1, r3
 8005a56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a5e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005a60:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005a64:	f7fb f990 	bl	8000d88 <__aeabi_uldivmod>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a72:	e065      	b.n	8005b40 <HAL_RCC_GetSysClockFreq+0x420>
 8005a74:	40023800 	.word	0x40023800
 8005a78:	00f42400 	.word	0x00f42400
 8005a7c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a80:	4b3d      	ldr	r3, [pc, #244]	@ (8005b78 <HAL_RCC_GetSysClockFreq+0x458>)
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	099b      	lsrs	r3, r3, #6
 8005a86:	2200      	movs	r2, #0
 8005a88:	4618      	mov	r0, r3
 8005a8a:	4611      	mov	r1, r2
 8005a8c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005a90:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a92:	2300      	movs	r3, #0
 8005a94:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a96:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8005a9a:	4642      	mov	r2, r8
 8005a9c:	464b      	mov	r3, r9
 8005a9e:	f04f 0000 	mov.w	r0, #0
 8005aa2:	f04f 0100 	mov.w	r1, #0
 8005aa6:	0159      	lsls	r1, r3, #5
 8005aa8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005aac:	0150      	lsls	r0, r2, #5
 8005aae:	4602      	mov	r2, r0
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	4641      	mov	r1, r8
 8005ab4:	1a51      	subs	r1, r2, r1
 8005ab6:	60b9      	str	r1, [r7, #8]
 8005ab8:	4649      	mov	r1, r9
 8005aba:	eb63 0301 	sbc.w	r3, r3, r1
 8005abe:	60fb      	str	r3, [r7, #12]
 8005ac0:	f04f 0200 	mov.w	r2, #0
 8005ac4:	f04f 0300 	mov.w	r3, #0
 8005ac8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005acc:	4659      	mov	r1, fp
 8005ace:	018b      	lsls	r3, r1, #6
 8005ad0:	4651      	mov	r1, sl
 8005ad2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005ad6:	4651      	mov	r1, sl
 8005ad8:	018a      	lsls	r2, r1, #6
 8005ada:	4651      	mov	r1, sl
 8005adc:	1a54      	subs	r4, r2, r1
 8005ade:	4659      	mov	r1, fp
 8005ae0:	eb63 0501 	sbc.w	r5, r3, r1
 8005ae4:	f04f 0200 	mov.w	r2, #0
 8005ae8:	f04f 0300 	mov.w	r3, #0
 8005aec:	00eb      	lsls	r3, r5, #3
 8005aee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005af2:	00e2      	lsls	r2, r4, #3
 8005af4:	4614      	mov	r4, r2
 8005af6:	461d      	mov	r5, r3
 8005af8:	4643      	mov	r3, r8
 8005afa:	18e3      	adds	r3, r4, r3
 8005afc:	603b      	str	r3, [r7, #0]
 8005afe:	464b      	mov	r3, r9
 8005b00:	eb45 0303 	adc.w	r3, r5, r3
 8005b04:	607b      	str	r3, [r7, #4]
 8005b06:	f04f 0200 	mov.w	r2, #0
 8005b0a:	f04f 0300 	mov.w	r3, #0
 8005b0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005b12:	4629      	mov	r1, r5
 8005b14:	028b      	lsls	r3, r1, #10
 8005b16:	4621      	mov	r1, r4
 8005b18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b1c:	4621      	mov	r1, r4
 8005b1e:	028a      	lsls	r2, r1, #10
 8005b20:	4610      	mov	r0, r2
 8005b22:	4619      	mov	r1, r3
 8005b24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005b28:	2200      	movs	r2, #0
 8005b2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b2c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005b2e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005b32:	f7fb f929 	bl	8000d88 <__aeabi_uldivmod>
 8005b36:	4602      	mov	r2, r0
 8005b38:	460b      	mov	r3, r1
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005b40:	4b0d      	ldr	r3, [pc, #52]	@ (8005b78 <HAL_RCC_GetSysClockFreq+0x458>)
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	0f1b      	lsrs	r3, r3, #28
 8005b46:	f003 0307 	and.w	r3, r3, #7
 8005b4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8005b4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005b52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005b5e:	e003      	b.n	8005b68 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b60:	4b06      	ldr	r3, [pc, #24]	@ (8005b7c <HAL_RCC_GetSysClockFreq+0x45c>)
 8005b62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005b66:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	37b8      	adds	r7, #184	@ 0xb8
 8005b70:	46bd      	mov	sp, r7
 8005b72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b76:	bf00      	nop
 8005b78:	40023800 	.word	0x40023800
 8005b7c:	00f42400 	.word	0x00f42400

08005b80 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b086      	sub	sp, #24
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d101      	bne.n	8005b92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e28d      	b.n	80060ae <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0301 	and.w	r3, r3, #1
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	f000 8083 	beq.w	8005ca6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005ba0:	4b94      	ldr	r3, [pc, #592]	@ (8005df4 <HAL_RCC_OscConfig+0x274>)
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	f003 030c 	and.w	r3, r3, #12
 8005ba8:	2b04      	cmp	r3, #4
 8005baa:	d019      	beq.n	8005be0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005bac:	4b91      	ldr	r3, [pc, #580]	@ (8005df4 <HAL_RCC_OscConfig+0x274>)
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f003 030c 	and.w	r3, r3, #12
        || \
 8005bb4:	2b08      	cmp	r3, #8
 8005bb6:	d106      	bne.n	8005bc6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005bb8:	4b8e      	ldr	r3, [pc, #568]	@ (8005df4 <HAL_RCC_OscConfig+0x274>)
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005bc0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005bc4:	d00c      	beq.n	8005be0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bc6:	4b8b      	ldr	r3, [pc, #556]	@ (8005df4 <HAL_RCC_OscConfig+0x274>)
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005bce:	2b0c      	cmp	r3, #12
 8005bd0:	d112      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bd2:	4b88      	ldr	r3, [pc, #544]	@ (8005df4 <HAL_RCC_OscConfig+0x274>)
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005bda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005bde:	d10b      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005be0:	4b84      	ldr	r3, [pc, #528]	@ (8005df4 <HAL_RCC_OscConfig+0x274>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d05b      	beq.n	8005ca4 <HAL_RCC_OscConfig+0x124>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d157      	bne.n	8005ca4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e25a      	b.n	80060ae <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c00:	d106      	bne.n	8005c10 <HAL_RCC_OscConfig+0x90>
 8005c02:	4b7c      	ldr	r3, [pc, #496]	@ (8005df4 <HAL_RCC_OscConfig+0x274>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a7b      	ldr	r2, [pc, #492]	@ (8005df4 <HAL_RCC_OscConfig+0x274>)
 8005c08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c0c:	6013      	str	r3, [r2, #0]
 8005c0e:	e01d      	b.n	8005c4c <HAL_RCC_OscConfig+0xcc>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c18:	d10c      	bne.n	8005c34 <HAL_RCC_OscConfig+0xb4>
 8005c1a:	4b76      	ldr	r3, [pc, #472]	@ (8005df4 <HAL_RCC_OscConfig+0x274>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a75      	ldr	r2, [pc, #468]	@ (8005df4 <HAL_RCC_OscConfig+0x274>)
 8005c20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c24:	6013      	str	r3, [r2, #0]
 8005c26:	4b73      	ldr	r3, [pc, #460]	@ (8005df4 <HAL_RCC_OscConfig+0x274>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a72      	ldr	r2, [pc, #456]	@ (8005df4 <HAL_RCC_OscConfig+0x274>)
 8005c2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c30:	6013      	str	r3, [r2, #0]
 8005c32:	e00b      	b.n	8005c4c <HAL_RCC_OscConfig+0xcc>
 8005c34:	4b6f      	ldr	r3, [pc, #444]	@ (8005df4 <HAL_RCC_OscConfig+0x274>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a6e      	ldr	r2, [pc, #440]	@ (8005df4 <HAL_RCC_OscConfig+0x274>)
 8005c3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c3e:	6013      	str	r3, [r2, #0]
 8005c40:	4b6c      	ldr	r3, [pc, #432]	@ (8005df4 <HAL_RCC_OscConfig+0x274>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a6b      	ldr	r2, [pc, #428]	@ (8005df4 <HAL_RCC_OscConfig+0x274>)
 8005c46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d013      	beq.n	8005c7c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c54:	f7fc fb90 	bl	8002378 <HAL_GetTick>
 8005c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c5a:	e008      	b.n	8005c6e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c5c:	f7fc fb8c 	bl	8002378 <HAL_GetTick>
 8005c60:	4602      	mov	r2, r0
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	2b64      	cmp	r3, #100	@ 0x64
 8005c68:	d901      	bls.n	8005c6e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	e21f      	b.n	80060ae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c6e:	4b61      	ldr	r3, [pc, #388]	@ (8005df4 <HAL_RCC_OscConfig+0x274>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d0f0      	beq.n	8005c5c <HAL_RCC_OscConfig+0xdc>
 8005c7a:	e014      	b.n	8005ca6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c7c:	f7fc fb7c 	bl	8002378 <HAL_GetTick>
 8005c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c82:	e008      	b.n	8005c96 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c84:	f7fc fb78 	bl	8002378 <HAL_GetTick>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	2b64      	cmp	r3, #100	@ 0x64
 8005c90:	d901      	bls.n	8005c96 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e20b      	b.n	80060ae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c96:	4b57      	ldr	r3, [pc, #348]	@ (8005df4 <HAL_RCC_OscConfig+0x274>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1f0      	bne.n	8005c84 <HAL_RCC_OscConfig+0x104>
 8005ca2:	e000      	b.n	8005ca6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ca4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 0302 	and.w	r3, r3, #2
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d06f      	beq.n	8005d92 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005cb2:	4b50      	ldr	r3, [pc, #320]	@ (8005df4 <HAL_RCC_OscConfig+0x274>)
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	f003 030c 	and.w	r3, r3, #12
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d017      	beq.n	8005cee <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005cbe:	4b4d      	ldr	r3, [pc, #308]	@ (8005df4 <HAL_RCC_OscConfig+0x274>)
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	f003 030c 	and.w	r3, r3, #12
        || \
 8005cc6:	2b08      	cmp	r3, #8
 8005cc8:	d105      	bne.n	8005cd6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005cca:	4b4a      	ldr	r3, [pc, #296]	@ (8005df4 <HAL_RCC_OscConfig+0x274>)
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00b      	beq.n	8005cee <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cd6:	4b47      	ldr	r3, [pc, #284]	@ (8005df4 <HAL_RCC_OscConfig+0x274>)
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005cde:	2b0c      	cmp	r3, #12
 8005ce0:	d11c      	bne.n	8005d1c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ce2:	4b44      	ldr	r3, [pc, #272]	@ (8005df4 <HAL_RCC_OscConfig+0x274>)
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d116      	bne.n	8005d1c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cee:	4b41      	ldr	r3, [pc, #260]	@ (8005df4 <HAL_RCC_OscConfig+0x274>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 0302 	and.w	r3, r3, #2
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d005      	beq.n	8005d06 <HAL_RCC_OscConfig+0x186>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d001      	beq.n	8005d06 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e1d3      	b.n	80060ae <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d06:	4b3b      	ldr	r3, [pc, #236]	@ (8005df4 <HAL_RCC_OscConfig+0x274>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	00db      	lsls	r3, r3, #3
 8005d14:	4937      	ldr	r1, [pc, #220]	@ (8005df4 <HAL_RCC_OscConfig+0x274>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d1a:	e03a      	b.n	8005d92 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d020      	beq.n	8005d66 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d24:	4b34      	ldr	r3, [pc, #208]	@ (8005df8 <HAL_RCC_OscConfig+0x278>)
 8005d26:	2201      	movs	r2, #1
 8005d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d2a:	f7fc fb25 	bl	8002378 <HAL_GetTick>
 8005d2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d30:	e008      	b.n	8005d44 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d32:	f7fc fb21 	bl	8002378 <HAL_GetTick>
 8005d36:	4602      	mov	r2, r0
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	d901      	bls.n	8005d44 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005d40:	2303      	movs	r3, #3
 8005d42:	e1b4      	b.n	80060ae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d44:	4b2b      	ldr	r3, [pc, #172]	@ (8005df4 <HAL_RCC_OscConfig+0x274>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0302 	and.w	r3, r3, #2
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d0f0      	beq.n	8005d32 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d50:	4b28      	ldr	r3, [pc, #160]	@ (8005df4 <HAL_RCC_OscConfig+0x274>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	00db      	lsls	r3, r3, #3
 8005d5e:	4925      	ldr	r1, [pc, #148]	@ (8005df4 <HAL_RCC_OscConfig+0x274>)
 8005d60:	4313      	orrs	r3, r2
 8005d62:	600b      	str	r3, [r1, #0]
 8005d64:	e015      	b.n	8005d92 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d66:	4b24      	ldr	r3, [pc, #144]	@ (8005df8 <HAL_RCC_OscConfig+0x278>)
 8005d68:	2200      	movs	r2, #0
 8005d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d6c:	f7fc fb04 	bl	8002378 <HAL_GetTick>
 8005d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d72:	e008      	b.n	8005d86 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d74:	f7fc fb00 	bl	8002378 <HAL_GetTick>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d901      	bls.n	8005d86 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e193      	b.n	80060ae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d86:	4b1b      	ldr	r3, [pc, #108]	@ (8005df4 <HAL_RCC_OscConfig+0x274>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 0302 	and.w	r3, r3, #2
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d1f0      	bne.n	8005d74 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 0308 	and.w	r3, r3, #8
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d036      	beq.n	8005e0c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	695b      	ldr	r3, [r3, #20]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d016      	beq.n	8005dd4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005da6:	4b15      	ldr	r3, [pc, #84]	@ (8005dfc <HAL_RCC_OscConfig+0x27c>)
 8005da8:	2201      	movs	r2, #1
 8005daa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dac:	f7fc fae4 	bl	8002378 <HAL_GetTick>
 8005db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005db2:	e008      	b.n	8005dc6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005db4:	f7fc fae0 	bl	8002378 <HAL_GetTick>
 8005db8:	4602      	mov	r2, r0
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d901      	bls.n	8005dc6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	e173      	b.n	80060ae <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8005df4 <HAL_RCC_OscConfig+0x274>)
 8005dc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dca:	f003 0302 	and.w	r3, r3, #2
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d0f0      	beq.n	8005db4 <HAL_RCC_OscConfig+0x234>
 8005dd2:	e01b      	b.n	8005e0c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005dd4:	4b09      	ldr	r3, [pc, #36]	@ (8005dfc <HAL_RCC_OscConfig+0x27c>)
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dda:	f7fc facd 	bl	8002378 <HAL_GetTick>
 8005dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005de0:	e00e      	b.n	8005e00 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005de2:	f7fc fac9 	bl	8002378 <HAL_GetTick>
 8005de6:	4602      	mov	r2, r0
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d907      	bls.n	8005e00 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e15c      	b.n	80060ae <HAL_RCC_OscConfig+0x52e>
 8005df4:	40023800 	.word	0x40023800
 8005df8:	42470000 	.word	0x42470000
 8005dfc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e00:	4b8a      	ldr	r3, [pc, #552]	@ (800602c <HAL_RCC_OscConfig+0x4ac>)
 8005e02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e04:	f003 0302 	and.w	r3, r3, #2
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1ea      	bne.n	8005de2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0304 	and.w	r3, r3, #4
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f000 8097 	beq.w	8005f48 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e1e:	4b83      	ldr	r3, [pc, #524]	@ (800602c <HAL_RCC_OscConfig+0x4ac>)
 8005e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10f      	bne.n	8005e4a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	60bb      	str	r3, [r7, #8]
 8005e2e:	4b7f      	ldr	r3, [pc, #508]	@ (800602c <HAL_RCC_OscConfig+0x4ac>)
 8005e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e32:	4a7e      	ldr	r2, [pc, #504]	@ (800602c <HAL_RCC_OscConfig+0x4ac>)
 8005e34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e38:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e3a:	4b7c      	ldr	r3, [pc, #496]	@ (800602c <HAL_RCC_OscConfig+0x4ac>)
 8005e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e42:	60bb      	str	r3, [r7, #8]
 8005e44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e46:	2301      	movs	r3, #1
 8005e48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e4a:	4b79      	ldr	r3, [pc, #484]	@ (8006030 <HAL_RCC_OscConfig+0x4b0>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d118      	bne.n	8005e88 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e56:	4b76      	ldr	r3, [pc, #472]	@ (8006030 <HAL_RCC_OscConfig+0x4b0>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a75      	ldr	r2, [pc, #468]	@ (8006030 <HAL_RCC_OscConfig+0x4b0>)
 8005e5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e62:	f7fc fa89 	bl	8002378 <HAL_GetTick>
 8005e66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e68:	e008      	b.n	8005e7c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e6a:	f7fc fa85 	bl	8002378 <HAL_GetTick>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	d901      	bls.n	8005e7c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	e118      	b.n	80060ae <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e7c:	4b6c      	ldr	r3, [pc, #432]	@ (8006030 <HAL_RCC_OscConfig+0x4b0>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d0f0      	beq.n	8005e6a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d106      	bne.n	8005e9e <HAL_RCC_OscConfig+0x31e>
 8005e90:	4b66      	ldr	r3, [pc, #408]	@ (800602c <HAL_RCC_OscConfig+0x4ac>)
 8005e92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e94:	4a65      	ldr	r2, [pc, #404]	@ (800602c <HAL_RCC_OscConfig+0x4ac>)
 8005e96:	f043 0301 	orr.w	r3, r3, #1
 8005e9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e9c:	e01c      	b.n	8005ed8 <HAL_RCC_OscConfig+0x358>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	2b05      	cmp	r3, #5
 8005ea4:	d10c      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x340>
 8005ea6:	4b61      	ldr	r3, [pc, #388]	@ (800602c <HAL_RCC_OscConfig+0x4ac>)
 8005ea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eaa:	4a60      	ldr	r2, [pc, #384]	@ (800602c <HAL_RCC_OscConfig+0x4ac>)
 8005eac:	f043 0304 	orr.w	r3, r3, #4
 8005eb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8005eb2:	4b5e      	ldr	r3, [pc, #376]	@ (800602c <HAL_RCC_OscConfig+0x4ac>)
 8005eb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eb6:	4a5d      	ldr	r2, [pc, #372]	@ (800602c <HAL_RCC_OscConfig+0x4ac>)
 8005eb8:	f043 0301 	orr.w	r3, r3, #1
 8005ebc:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ebe:	e00b      	b.n	8005ed8 <HAL_RCC_OscConfig+0x358>
 8005ec0:	4b5a      	ldr	r3, [pc, #360]	@ (800602c <HAL_RCC_OscConfig+0x4ac>)
 8005ec2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ec4:	4a59      	ldr	r2, [pc, #356]	@ (800602c <HAL_RCC_OscConfig+0x4ac>)
 8005ec6:	f023 0301 	bic.w	r3, r3, #1
 8005eca:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ecc:	4b57      	ldr	r3, [pc, #348]	@ (800602c <HAL_RCC_OscConfig+0x4ac>)
 8005ece:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ed0:	4a56      	ldr	r2, [pc, #344]	@ (800602c <HAL_RCC_OscConfig+0x4ac>)
 8005ed2:	f023 0304 	bic.w	r3, r3, #4
 8005ed6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d015      	beq.n	8005f0c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ee0:	f7fc fa4a 	bl	8002378 <HAL_GetTick>
 8005ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ee6:	e00a      	b.n	8005efe <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ee8:	f7fc fa46 	bl	8002378 <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d901      	bls.n	8005efe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e0d7      	b.n	80060ae <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005efe:	4b4b      	ldr	r3, [pc, #300]	@ (800602c <HAL_RCC_OscConfig+0x4ac>)
 8005f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f02:	f003 0302 	and.w	r3, r3, #2
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d0ee      	beq.n	8005ee8 <HAL_RCC_OscConfig+0x368>
 8005f0a:	e014      	b.n	8005f36 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f0c:	f7fc fa34 	bl	8002378 <HAL_GetTick>
 8005f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f12:	e00a      	b.n	8005f2a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f14:	f7fc fa30 	bl	8002378 <HAL_GetTick>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d901      	bls.n	8005f2a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e0c1      	b.n	80060ae <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f2a:	4b40      	ldr	r3, [pc, #256]	@ (800602c <HAL_RCC_OscConfig+0x4ac>)
 8005f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f2e:	f003 0302 	and.w	r3, r3, #2
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d1ee      	bne.n	8005f14 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005f36:	7dfb      	ldrb	r3, [r7, #23]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d105      	bne.n	8005f48 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f3c:	4b3b      	ldr	r3, [pc, #236]	@ (800602c <HAL_RCC_OscConfig+0x4ac>)
 8005f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f40:	4a3a      	ldr	r2, [pc, #232]	@ (800602c <HAL_RCC_OscConfig+0x4ac>)
 8005f42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f46:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f000 80ad 	beq.w	80060ac <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f52:	4b36      	ldr	r3, [pc, #216]	@ (800602c <HAL_RCC_OscConfig+0x4ac>)
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	f003 030c 	and.w	r3, r3, #12
 8005f5a:	2b08      	cmp	r3, #8
 8005f5c:	d060      	beq.n	8006020 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	699b      	ldr	r3, [r3, #24]
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	d145      	bne.n	8005ff2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f66:	4b33      	ldr	r3, [pc, #204]	@ (8006034 <HAL_RCC_OscConfig+0x4b4>)
 8005f68:	2200      	movs	r2, #0
 8005f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f6c:	f7fc fa04 	bl	8002378 <HAL_GetTick>
 8005f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f72:	e008      	b.n	8005f86 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f74:	f7fc fa00 	bl	8002378 <HAL_GetTick>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d901      	bls.n	8005f86 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e093      	b.n	80060ae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f86:	4b29      	ldr	r3, [pc, #164]	@ (800602c <HAL_RCC_OscConfig+0x4ac>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d1f0      	bne.n	8005f74 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	69da      	ldr	r2, [r3, #28]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a1b      	ldr	r3, [r3, #32]
 8005f9a:	431a      	orrs	r2, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa0:	019b      	lsls	r3, r3, #6
 8005fa2:	431a      	orrs	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fa8:	085b      	lsrs	r3, r3, #1
 8005faa:	3b01      	subs	r3, #1
 8005fac:	041b      	lsls	r3, r3, #16
 8005fae:	431a      	orrs	r2, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fb4:	061b      	lsls	r3, r3, #24
 8005fb6:	431a      	orrs	r2, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fbc:	071b      	lsls	r3, r3, #28
 8005fbe:	491b      	ldr	r1, [pc, #108]	@ (800602c <HAL_RCC_OscConfig+0x4ac>)
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8006034 <HAL_RCC_OscConfig+0x4b4>)
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fca:	f7fc f9d5 	bl	8002378 <HAL_GetTick>
 8005fce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fd0:	e008      	b.n	8005fe4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fd2:	f7fc f9d1 	bl	8002378 <HAL_GetTick>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	2b02      	cmp	r3, #2
 8005fde:	d901      	bls.n	8005fe4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	e064      	b.n	80060ae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fe4:	4b11      	ldr	r3, [pc, #68]	@ (800602c <HAL_RCC_OscConfig+0x4ac>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d0f0      	beq.n	8005fd2 <HAL_RCC_OscConfig+0x452>
 8005ff0:	e05c      	b.n	80060ac <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ff2:	4b10      	ldr	r3, [pc, #64]	@ (8006034 <HAL_RCC_OscConfig+0x4b4>)
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ff8:	f7fc f9be 	bl	8002378 <HAL_GetTick>
 8005ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ffe:	e008      	b.n	8006012 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006000:	f7fc f9ba 	bl	8002378 <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	2b02      	cmp	r3, #2
 800600c:	d901      	bls.n	8006012 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e04d      	b.n	80060ae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006012:	4b06      	ldr	r3, [pc, #24]	@ (800602c <HAL_RCC_OscConfig+0x4ac>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1f0      	bne.n	8006000 <HAL_RCC_OscConfig+0x480>
 800601e:	e045      	b.n	80060ac <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	2b01      	cmp	r3, #1
 8006026:	d107      	bne.n	8006038 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e040      	b.n	80060ae <HAL_RCC_OscConfig+0x52e>
 800602c:	40023800 	.word	0x40023800
 8006030:	40007000 	.word	0x40007000
 8006034:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006038:	4b1f      	ldr	r3, [pc, #124]	@ (80060b8 <HAL_RCC_OscConfig+0x538>)
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	2b01      	cmp	r3, #1
 8006044:	d030      	beq.n	80060a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006050:	429a      	cmp	r2, r3
 8006052:	d129      	bne.n	80060a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800605e:	429a      	cmp	r2, r3
 8006060:	d122      	bne.n	80060a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006068:	4013      	ands	r3, r2
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800606e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006070:	4293      	cmp	r3, r2
 8006072:	d119      	bne.n	80060a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800607e:	085b      	lsrs	r3, r3, #1
 8006080:	3b01      	subs	r3, #1
 8006082:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006084:	429a      	cmp	r2, r3
 8006086:	d10f      	bne.n	80060a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006092:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006094:	429a      	cmp	r2, r3
 8006096:	d107      	bne.n	80060a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060a2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d001      	beq.n	80060ac <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	e000      	b.n	80060ae <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3718      	adds	r7, #24
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	40023800 	.word	0x40023800

080060bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d101      	bne.n	80060ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e07b      	b.n	80061c6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d108      	bne.n	80060e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060de:	d009      	beq.n	80060f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	61da      	str	r2, [r3, #28]
 80060e6:	e005      	b.n	80060f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2b00      	cmp	r3, #0
 8006104:	d106      	bne.n	8006114 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f7fb fe6e 	bl	8001df0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2202      	movs	r2, #2
 8006118:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800612a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800613c:	431a      	orrs	r2, r3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006146:	431a      	orrs	r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	f003 0302 	and.w	r3, r3, #2
 8006150:	431a      	orrs	r2, r3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	695b      	ldr	r3, [r3, #20]
 8006156:	f003 0301 	and.w	r3, r3, #1
 800615a:	431a      	orrs	r2, r3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006164:	431a      	orrs	r2, r3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	69db      	ldr	r3, [r3, #28]
 800616a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800616e:	431a      	orrs	r2, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6a1b      	ldr	r3, [r3, #32]
 8006174:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006178:	ea42 0103 	orr.w	r1, r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006180:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	430a      	orrs	r2, r1
 800618a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	699b      	ldr	r3, [r3, #24]
 8006190:	0c1b      	lsrs	r3, r3, #16
 8006192:	f003 0104 	and.w	r1, r3, #4
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800619a:	f003 0210 	and.w	r2, r3, #16
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	430a      	orrs	r2, r1
 80061a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	69da      	ldr	r2, [r3, #28]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80061b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3708      	adds	r7, #8
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b082      	sub	sp, #8
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d101      	bne.n	80061e0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e041      	b.n	8006264 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d106      	bne.n	80061fa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f7fb fe8b 	bl	8001f10 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2202      	movs	r2, #2
 80061fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	3304      	adds	r3, #4
 800620a:	4619      	mov	r1, r3
 800620c:	4610      	mov	r0, r2
 800620e:	f000 fb03 	bl	8006818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2201      	movs	r2, #1
 8006216:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2201      	movs	r2, #1
 800621e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2201      	movs	r2, #1
 8006226:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2201      	movs	r2, #1
 800622e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2201      	movs	r2, #1
 8006236:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2201      	movs	r2, #1
 800623e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2201      	movs	r2, #1
 8006246:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2201      	movs	r2, #1
 800624e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2201      	movs	r2, #1
 8006256:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2201      	movs	r2, #1
 800625e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006262:	2300      	movs	r3, #0
}
 8006264:	4618      	mov	r0, r3
 8006266:	3708      	adds	r7, #8
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d101      	bne.n	800627e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e041      	b.n	8006302 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006284:	b2db      	uxtb	r3, r3
 8006286:	2b00      	cmp	r3, #0
 8006288:	d106      	bne.n	8006298 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f7fb fdf4 	bl	8001e80 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2202      	movs	r2, #2
 800629c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	3304      	adds	r3, #4
 80062a8:	4619      	mov	r1, r3
 80062aa:	4610      	mov	r0, r2
 80062ac:	f000 fab4 	bl	8006818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3708      	adds	r7, #8
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
	...

0800630c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006316:	2300      	movs	r3, #0
 8006318:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d104      	bne.n	800632a <HAL_TIM_IC_Start_IT+0x1e>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006326:	b2db      	uxtb	r3, r3
 8006328:	e013      	b.n	8006352 <HAL_TIM_IC_Start_IT+0x46>
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	2b04      	cmp	r3, #4
 800632e:	d104      	bne.n	800633a <HAL_TIM_IC_Start_IT+0x2e>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006336:	b2db      	uxtb	r3, r3
 8006338:	e00b      	b.n	8006352 <HAL_TIM_IC_Start_IT+0x46>
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	2b08      	cmp	r3, #8
 800633e:	d104      	bne.n	800634a <HAL_TIM_IC_Start_IT+0x3e>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006346:	b2db      	uxtb	r3, r3
 8006348:	e003      	b.n	8006352 <HAL_TIM_IC_Start_IT+0x46>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006350:	b2db      	uxtb	r3, r3
 8006352:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d104      	bne.n	8006364 <HAL_TIM_IC_Start_IT+0x58>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006360:	b2db      	uxtb	r3, r3
 8006362:	e013      	b.n	800638c <HAL_TIM_IC_Start_IT+0x80>
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	2b04      	cmp	r3, #4
 8006368:	d104      	bne.n	8006374 <HAL_TIM_IC_Start_IT+0x68>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006370:	b2db      	uxtb	r3, r3
 8006372:	e00b      	b.n	800638c <HAL_TIM_IC_Start_IT+0x80>
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	2b08      	cmp	r3, #8
 8006378:	d104      	bne.n	8006384 <HAL_TIM_IC_Start_IT+0x78>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006380:	b2db      	uxtb	r3, r3
 8006382:	e003      	b.n	800638c <HAL_TIM_IC_Start_IT+0x80>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800638a:	b2db      	uxtb	r3, r3
 800638c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800638e:	7bbb      	ldrb	r3, [r7, #14]
 8006390:	2b01      	cmp	r3, #1
 8006392:	d102      	bne.n	800639a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006394:	7b7b      	ldrb	r3, [r7, #13]
 8006396:	2b01      	cmp	r3, #1
 8006398:	d001      	beq.n	800639e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e0cc      	b.n	8006538 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d104      	bne.n	80063ae <HAL_TIM_IC_Start_IT+0xa2>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2202      	movs	r2, #2
 80063a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063ac:	e013      	b.n	80063d6 <HAL_TIM_IC_Start_IT+0xca>
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	2b04      	cmp	r3, #4
 80063b2:	d104      	bne.n	80063be <HAL_TIM_IC_Start_IT+0xb2>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2202      	movs	r2, #2
 80063b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063bc:	e00b      	b.n	80063d6 <HAL_TIM_IC_Start_IT+0xca>
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	2b08      	cmp	r3, #8
 80063c2:	d104      	bne.n	80063ce <HAL_TIM_IC_Start_IT+0xc2>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2202      	movs	r2, #2
 80063c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063cc:	e003      	b.n	80063d6 <HAL_TIM_IC_Start_IT+0xca>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2202      	movs	r2, #2
 80063d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d104      	bne.n	80063e6 <HAL_TIM_IC_Start_IT+0xda>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2202      	movs	r2, #2
 80063e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063e4:	e013      	b.n	800640e <HAL_TIM_IC_Start_IT+0x102>
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	2b04      	cmp	r3, #4
 80063ea:	d104      	bne.n	80063f6 <HAL_TIM_IC_Start_IT+0xea>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2202      	movs	r2, #2
 80063f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80063f4:	e00b      	b.n	800640e <HAL_TIM_IC_Start_IT+0x102>
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	2b08      	cmp	r3, #8
 80063fa:	d104      	bne.n	8006406 <HAL_TIM_IC_Start_IT+0xfa>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2202      	movs	r2, #2
 8006400:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006404:	e003      	b.n	800640e <HAL_TIM_IC_Start_IT+0x102>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2202      	movs	r2, #2
 800640a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	2b0c      	cmp	r3, #12
 8006412:	d841      	bhi.n	8006498 <HAL_TIM_IC_Start_IT+0x18c>
 8006414:	a201      	add	r2, pc, #4	@ (adr r2, 800641c <HAL_TIM_IC_Start_IT+0x110>)
 8006416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800641a:	bf00      	nop
 800641c:	08006451 	.word	0x08006451
 8006420:	08006499 	.word	0x08006499
 8006424:	08006499 	.word	0x08006499
 8006428:	08006499 	.word	0x08006499
 800642c:	08006463 	.word	0x08006463
 8006430:	08006499 	.word	0x08006499
 8006434:	08006499 	.word	0x08006499
 8006438:	08006499 	.word	0x08006499
 800643c:	08006475 	.word	0x08006475
 8006440:	08006499 	.word	0x08006499
 8006444:	08006499 	.word	0x08006499
 8006448:	08006499 	.word	0x08006499
 800644c:	08006487 	.word	0x08006487
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68da      	ldr	r2, [r3, #12]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f042 0202 	orr.w	r2, r2, #2
 800645e:	60da      	str	r2, [r3, #12]
      break;
 8006460:	e01d      	b.n	800649e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68da      	ldr	r2, [r3, #12]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f042 0204 	orr.w	r2, r2, #4
 8006470:	60da      	str	r2, [r3, #12]
      break;
 8006472:	e014      	b.n	800649e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68da      	ldr	r2, [r3, #12]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f042 0208 	orr.w	r2, r2, #8
 8006482:	60da      	str	r2, [r3, #12]
      break;
 8006484:	e00b      	b.n	800649e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68da      	ldr	r2, [r3, #12]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f042 0210 	orr.w	r2, r2, #16
 8006494:	60da      	str	r2, [r3, #12]
      break;
 8006496:	e002      	b.n	800649e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	73fb      	strb	r3, [r7, #15]
      break;
 800649c:	bf00      	nop
  }

  if (status == HAL_OK)
 800649e:	7bfb      	ldrb	r3, [r7, #15]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d148      	bne.n	8006536 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2201      	movs	r2, #1
 80064aa:	6839      	ldr	r1, [r7, #0]
 80064ac:	4618      	mov	r0, r3
 80064ae:	f000 fd39 	bl	8006f24 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a22      	ldr	r2, [pc, #136]	@ (8006540 <HAL_TIM_IC_Start_IT+0x234>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d022      	beq.n	8006502 <HAL_TIM_IC_Start_IT+0x1f6>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064c4:	d01d      	beq.n	8006502 <HAL_TIM_IC_Start_IT+0x1f6>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a1e      	ldr	r2, [pc, #120]	@ (8006544 <HAL_TIM_IC_Start_IT+0x238>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d018      	beq.n	8006502 <HAL_TIM_IC_Start_IT+0x1f6>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a1c      	ldr	r2, [pc, #112]	@ (8006548 <HAL_TIM_IC_Start_IT+0x23c>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d013      	beq.n	8006502 <HAL_TIM_IC_Start_IT+0x1f6>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a1b      	ldr	r2, [pc, #108]	@ (800654c <HAL_TIM_IC_Start_IT+0x240>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d00e      	beq.n	8006502 <HAL_TIM_IC_Start_IT+0x1f6>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a19      	ldr	r2, [pc, #100]	@ (8006550 <HAL_TIM_IC_Start_IT+0x244>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d009      	beq.n	8006502 <HAL_TIM_IC_Start_IT+0x1f6>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a18      	ldr	r2, [pc, #96]	@ (8006554 <HAL_TIM_IC_Start_IT+0x248>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d004      	beq.n	8006502 <HAL_TIM_IC_Start_IT+0x1f6>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a16      	ldr	r2, [pc, #88]	@ (8006558 <HAL_TIM_IC_Start_IT+0x24c>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d111      	bne.n	8006526 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	f003 0307 	and.w	r3, r3, #7
 800650c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	2b06      	cmp	r3, #6
 8006512:	d010      	beq.n	8006536 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f042 0201 	orr.w	r2, r2, #1
 8006522:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006524:	e007      	b.n	8006536 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f042 0201 	orr.w	r2, r2, #1
 8006534:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006536:	7bfb      	ldrb	r3, [r7, #15]
}
 8006538:	4618      	mov	r0, r3
 800653a:	3710      	adds	r7, #16
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	40010000 	.word	0x40010000
 8006544:	40000400 	.word	0x40000400
 8006548:	40000800 	.word	0x40000800
 800654c:	40000c00 	.word	0x40000c00
 8006550:	40010400 	.word	0x40010400
 8006554:	40014000 	.word	0x40014000
 8006558:	40001800 	.word	0x40001800

0800655c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b086      	sub	sp, #24
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006568:	2300      	movs	r3, #0
 800656a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006572:	2b01      	cmp	r3, #1
 8006574:	d101      	bne.n	800657a <HAL_TIM_IC_ConfigChannel+0x1e>
 8006576:	2302      	movs	r3, #2
 8006578:	e088      	b.n	800668c <HAL_TIM_IC_ConfigChannel+0x130>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2201      	movs	r2, #1
 800657e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d11b      	bne.n	80065c0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006598:	f000 fb9a 	bl	8006cd0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	699a      	ldr	r2, [r3, #24]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f022 020c 	bic.w	r2, r2, #12
 80065aa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	6999      	ldr	r1, [r3, #24]
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	689a      	ldr	r2, [r3, #8]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	430a      	orrs	r2, r1
 80065bc:	619a      	str	r2, [r3, #24]
 80065be:	e060      	b.n	8006682 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2b04      	cmp	r3, #4
 80065c4:	d11c      	bne.n	8006600 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80065d6:	f000 fbef 	bl	8006db8 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	699a      	ldr	r2, [r3, #24]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80065e8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	6999      	ldr	r1, [r3, #24]
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	021a      	lsls	r2, r3, #8
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	430a      	orrs	r2, r1
 80065fc:	619a      	str	r2, [r3, #24]
 80065fe:	e040      	b.n	8006682 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2b08      	cmp	r3, #8
 8006604:	d11b      	bne.n	800663e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006616:	f000 fc0c 	bl	8006e32 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	69da      	ldr	r2, [r3, #28]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f022 020c 	bic.w	r2, r2, #12
 8006628:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	69d9      	ldr	r1, [r3, #28]
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	689a      	ldr	r2, [r3, #8]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	430a      	orrs	r2, r1
 800663a:	61da      	str	r2, [r3, #28]
 800663c:	e021      	b.n	8006682 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2b0c      	cmp	r3, #12
 8006642:	d11c      	bne.n	800667e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006654:	f000 fc29 	bl	8006eaa <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	69da      	ldr	r2, [r3, #28]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006666:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	69d9      	ldr	r1, [r3, #28]
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	021a      	lsls	r2, r3, #8
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	430a      	orrs	r2, r1
 800667a:	61da      	str	r2, [r3, #28]
 800667c:	e001      	b.n	8006682 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800668a:	7dfb      	ldrb	r3, [r7, #23]
}
 800668c:	4618      	mov	r0, r3
 800668e:	3718      	adds	r7, #24
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b086      	sub	sp, #24
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066a0:	2300      	movs	r3, #0
 80066a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d101      	bne.n	80066b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80066ae:	2302      	movs	r3, #2
 80066b0:	e0ae      	b.n	8006810 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2201      	movs	r2, #1
 80066b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2b0c      	cmp	r3, #12
 80066be:	f200 809f 	bhi.w	8006800 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80066c2:	a201      	add	r2, pc, #4	@ (adr r2, 80066c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80066c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c8:	080066fd 	.word	0x080066fd
 80066cc:	08006801 	.word	0x08006801
 80066d0:	08006801 	.word	0x08006801
 80066d4:	08006801 	.word	0x08006801
 80066d8:	0800673d 	.word	0x0800673d
 80066dc:	08006801 	.word	0x08006801
 80066e0:	08006801 	.word	0x08006801
 80066e4:	08006801 	.word	0x08006801
 80066e8:	0800677f 	.word	0x0800677f
 80066ec:	08006801 	.word	0x08006801
 80066f0:	08006801 	.word	0x08006801
 80066f4:	08006801 	.word	0x08006801
 80066f8:	080067bf 	.word	0x080067bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68b9      	ldr	r1, [r7, #8]
 8006702:	4618      	mov	r0, r3
 8006704:	f000 f934 	bl	8006970 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	699a      	ldr	r2, [r3, #24]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f042 0208 	orr.w	r2, r2, #8
 8006716:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	699a      	ldr	r2, [r3, #24]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f022 0204 	bic.w	r2, r2, #4
 8006726:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	6999      	ldr	r1, [r3, #24]
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	691a      	ldr	r2, [r3, #16]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	430a      	orrs	r2, r1
 8006738:	619a      	str	r2, [r3, #24]
      break;
 800673a:	e064      	b.n	8006806 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	68b9      	ldr	r1, [r7, #8]
 8006742:	4618      	mov	r0, r3
 8006744:	f000 f984 	bl	8006a50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	699a      	ldr	r2, [r3, #24]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006756:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	699a      	ldr	r2, [r3, #24]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006766:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	6999      	ldr	r1, [r3, #24]
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	021a      	lsls	r2, r3, #8
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	430a      	orrs	r2, r1
 800677a:	619a      	str	r2, [r3, #24]
      break;
 800677c:	e043      	b.n	8006806 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68b9      	ldr	r1, [r7, #8]
 8006784:	4618      	mov	r0, r3
 8006786:	f000 f9d9 	bl	8006b3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	69da      	ldr	r2, [r3, #28]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f042 0208 	orr.w	r2, r2, #8
 8006798:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	69da      	ldr	r2, [r3, #28]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f022 0204 	bic.w	r2, r2, #4
 80067a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	69d9      	ldr	r1, [r3, #28]
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	691a      	ldr	r2, [r3, #16]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	430a      	orrs	r2, r1
 80067ba:	61da      	str	r2, [r3, #28]
      break;
 80067bc:	e023      	b.n	8006806 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	68b9      	ldr	r1, [r7, #8]
 80067c4:	4618      	mov	r0, r3
 80067c6:	f000 fa2d 	bl	8006c24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	69da      	ldr	r2, [r3, #28]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80067d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	69da      	ldr	r2, [r3, #28]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	69d9      	ldr	r1, [r3, #28]
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	691b      	ldr	r3, [r3, #16]
 80067f4:	021a      	lsls	r2, r3, #8
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	430a      	orrs	r2, r1
 80067fc:	61da      	str	r2, [r3, #28]
      break;
 80067fe:	e002      	b.n	8006806 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	75fb      	strb	r3, [r7, #23]
      break;
 8006804:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800680e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006810:	4618      	mov	r0, r3
 8006812:	3718      	adds	r7, #24
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006818:	b480      	push	{r7}
 800681a:	b085      	sub	sp, #20
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	4a46      	ldr	r2, [pc, #280]	@ (8006944 <TIM_Base_SetConfig+0x12c>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d013      	beq.n	8006858 <TIM_Base_SetConfig+0x40>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006836:	d00f      	beq.n	8006858 <TIM_Base_SetConfig+0x40>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	4a43      	ldr	r2, [pc, #268]	@ (8006948 <TIM_Base_SetConfig+0x130>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d00b      	beq.n	8006858 <TIM_Base_SetConfig+0x40>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4a42      	ldr	r2, [pc, #264]	@ (800694c <TIM_Base_SetConfig+0x134>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d007      	beq.n	8006858 <TIM_Base_SetConfig+0x40>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a41      	ldr	r2, [pc, #260]	@ (8006950 <TIM_Base_SetConfig+0x138>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d003      	beq.n	8006858 <TIM_Base_SetConfig+0x40>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a40      	ldr	r2, [pc, #256]	@ (8006954 <TIM_Base_SetConfig+0x13c>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d108      	bne.n	800686a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800685e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	4313      	orrs	r3, r2
 8006868:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4a35      	ldr	r2, [pc, #212]	@ (8006944 <TIM_Base_SetConfig+0x12c>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d02b      	beq.n	80068ca <TIM_Base_SetConfig+0xb2>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006878:	d027      	beq.n	80068ca <TIM_Base_SetConfig+0xb2>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4a32      	ldr	r2, [pc, #200]	@ (8006948 <TIM_Base_SetConfig+0x130>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d023      	beq.n	80068ca <TIM_Base_SetConfig+0xb2>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4a31      	ldr	r2, [pc, #196]	@ (800694c <TIM_Base_SetConfig+0x134>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d01f      	beq.n	80068ca <TIM_Base_SetConfig+0xb2>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a30      	ldr	r2, [pc, #192]	@ (8006950 <TIM_Base_SetConfig+0x138>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d01b      	beq.n	80068ca <TIM_Base_SetConfig+0xb2>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a2f      	ldr	r2, [pc, #188]	@ (8006954 <TIM_Base_SetConfig+0x13c>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d017      	beq.n	80068ca <TIM_Base_SetConfig+0xb2>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a2e      	ldr	r2, [pc, #184]	@ (8006958 <TIM_Base_SetConfig+0x140>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d013      	beq.n	80068ca <TIM_Base_SetConfig+0xb2>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a2d      	ldr	r2, [pc, #180]	@ (800695c <TIM_Base_SetConfig+0x144>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d00f      	beq.n	80068ca <TIM_Base_SetConfig+0xb2>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a2c      	ldr	r2, [pc, #176]	@ (8006960 <TIM_Base_SetConfig+0x148>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d00b      	beq.n	80068ca <TIM_Base_SetConfig+0xb2>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a2b      	ldr	r2, [pc, #172]	@ (8006964 <TIM_Base_SetConfig+0x14c>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d007      	beq.n	80068ca <TIM_Base_SetConfig+0xb2>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a2a      	ldr	r2, [pc, #168]	@ (8006968 <TIM_Base_SetConfig+0x150>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d003      	beq.n	80068ca <TIM_Base_SetConfig+0xb2>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a29      	ldr	r2, [pc, #164]	@ (800696c <TIM_Base_SetConfig+0x154>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d108      	bne.n	80068dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	4313      	orrs	r3, r2
 80068da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	695b      	ldr	r3, [r3, #20]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	689a      	ldr	r2, [r3, #8]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a10      	ldr	r2, [pc, #64]	@ (8006944 <TIM_Base_SetConfig+0x12c>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d003      	beq.n	8006910 <TIM_Base_SetConfig+0xf8>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4a12      	ldr	r2, [pc, #72]	@ (8006954 <TIM_Base_SetConfig+0x13c>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d103      	bne.n	8006918 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	691a      	ldr	r2, [r3, #16]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	f003 0301 	and.w	r3, r3, #1
 8006926:	2b01      	cmp	r3, #1
 8006928:	d105      	bne.n	8006936 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	f023 0201 	bic.w	r2, r3, #1
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	611a      	str	r2, [r3, #16]
  }
}
 8006936:	bf00      	nop
 8006938:	3714      	adds	r7, #20
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	40010000 	.word	0x40010000
 8006948:	40000400 	.word	0x40000400
 800694c:	40000800 	.word	0x40000800
 8006950:	40000c00 	.word	0x40000c00
 8006954:	40010400 	.word	0x40010400
 8006958:	40014000 	.word	0x40014000
 800695c:	40014400 	.word	0x40014400
 8006960:	40014800 	.word	0x40014800
 8006964:	40001800 	.word	0x40001800
 8006968:	40001c00 	.word	0x40001c00
 800696c:	40002000 	.word	0x40002000

08006970 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006970:	b480      	push	{r7}
 8006972:	b087      	sub	sp, #28
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a1b      	ldr	r3, [r3, #32]
 800697e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a1b      	ldr	r3, [r3, #32]
 8006984:	f023 0201 	bic.w	r2, r3, #1
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	699b      	ldr	r3, [r3, #24]
 8006996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800699e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f023 0303 	bic.w	r3, r3, #3
 80069a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	f023 0302 	bic.w	r3, r3, #2
 80069b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	697a      	ldr	r2, [r7, #20]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a20      	ldr	r2, [pc, #128]	@ (8006a48 <TIM_OC1_SetConfig+0xd8>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d003      	beq.n	80069d4 <TIM_OC1_SetConfig+0x64>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a1f      	ldr	r2, [pc, #124]	@ (8006a4c <TIM_OC1_SetConfig+0xdc>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d10c      	bne.n	80069ee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	f023 0308 	bic.w	r3, r3, #8
 80069da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	697a      	ldr	r2, [r7, #20]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	f023 0304 	bic.w	r3, r3, #4
 80069ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a15      	ldr	r2, [pc, #84]	@ (8006a48 <TIM_OC1_SetConfig+0xd8>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d003      	beq.n	80069fe <TIM_OC1_SetConfig+0x8e>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a14      	ldr	r2, [pc, #80]	@ (8006a4c <TIM_OC1_SetConfig+0xdc>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d111      	bne.n	8006a22 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006a0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	695b      	ldr	r3, [r3, #20]
 8006a12:	693a      	ldr	r2, [r7, #16]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	699b      	ldr	r3, [r3, #24]
 8006a1c:	693a      	ldr	r2, [r7, #16]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	693a      	ldr	r2, [r7, #16]
 8006a26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	68fa      	ldr	r2, [r7, #12]
 8006a2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	685a      	ldr	r2, [r3, #4]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	697a      	ldr	r2, [r7, #20]
 8006a3a:	621a      	str	r2, [r3, #32]
}
 8006a3c:	bf00      	nop
 8006a3e:	371c      	adds	r7, #28
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr
 8006a48:	40010000 	.word	0x40010000
 8006a4c:	40010400 	.word	0x40010400

08006a50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b087      	sub	sp, #28
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a1b      	ldr	r3, [r3, #32]
 8006a5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a1b      	ldr	r3, [r3, #32]
 8006a64:	f023 0210 	bic.w	r2, r3, #16
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	699b      	ldr	r3, [r3, #24]
 8006a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	021b      	lsls	r3, r3, #8
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	4313      	orrs	r3, r2
 8006a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	f023 0320 	bic.w	r3, r3, #32
 8006a9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	011b      	lsls	r3, r3, #4
 8006aa2:	697a      	ldr	r2, [r7, #20]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	4a22      	ldr	r2, [pc, #136]	@ (8006b34 <TIM_OC2_SetConfig+0xe4>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d003      	beq.n	8006ab8 <TIM_OC2_SetConfig+0x68>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4a21      	ldr	r2, [pc, #132]	@ (8006b38 <TIM_OC2_SetConfig+0xe8>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d10d      	bne.n	8006ad4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006abe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	011b      	lsls	r3, r3, #4
 8006ac6:	697a      	ldr	r2, [r7, #20]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ad2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a17      	ldr	r2, [pc, #92]	@ (8006b34 <TIM_OC2_SetConfig+0xe4>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d003      	beq.n	8006ae4 <TIM_OC2_SetConfig+0x94>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a16      	ldr	r2, [pc, #88]	@ (8006b38 <TIM_OC2_SetConfig+0xe8>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d113      	bne.n	8006b0c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006aea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006af2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	695b      	ldr	r3, [r3, #20]
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	693a      	ldr	r2, [r7, #16]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	699b      	ldr	r3, [r3, #24]
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	693a      	ldr	r2, [r7, #16]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	693a      	ldr	r2, [r7, #16]
 8006b10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	685a      	ldr	r2, [r3, #4]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	697a      	ldr	r2, [r7, #20]
 8006b24:	621a      	str	r2, [r3, #32]
}
 8006b26:	bf00      	nop
 8006b28:	371c      	adds	r7, #28
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr
 8006b32:	bf00      	nop
 8006b34:	40010000 	.word	0x40010000
 8006b38:	40010400 	.word	0x40010400

08006b3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b087      	sub	sp, #28
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a1b      	ldr	r3, [r3, #32]
 8006b4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6a1b      	ldr	r3, [r3, #32]
 8006b50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	69db      	ldr	r3, [r3, #28]
 8006b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f023 0303 	bic.w	r3, r3, #3
 8006b72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	68fa      	ldr	r2, [r7, #12]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006b84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	021b      	lsls	r3, r3, #8
 8006b8c:	697a      	ldr	r2, [r7, #20]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a21      	ldr	r2, [pc, #132]	@ (8006c1c <TIM_OC3_SetConfig+0xe0>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d003      	beq.n	8006ba2 <TIM_OC3_SetConfig+0x66>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a20      	ldr	r2, [pc, #128]	@ (8006c20 <TIM_OC3_SetConfig+0xe4>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d10d      	bne.n	8006bbe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006ba8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	021b      	lsls	r3, r3, #8
 8006bb0:	697a      	ldr	r2, [r7, #20]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006bbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a16      	ldr	r2, [pc, #88]	@ (8006c1c <TIM_OC3_SetConfig+0xe0>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d003      	beq.n	8006bce <TIM_OC3_SetConfig+0x92>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a15      	ldr	r2, [pc, #84]	@ (8006c20 <TIM_OC3_SetConfig+0xe4>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d113      	bne.n	8006bf6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006bd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006bdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	695b      	ldr	r3, [r3, #20]
 8006be2:	011b      	lsls	r3, r3, #4
 8006be4:	693a      	ldr	r2, [r7, #16]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	699b      	ldr	r3, [r3, #24]
 8006bee:	011b      	lsls	r3, r3, #4
 8006bf0:	693a      	ldr	r2, [r7, #16]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	693a      	ldr	r2, [r7, #16]
 8006bfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	68fa      	ldr	r2, [r7, #12]
 8006c00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	685a      	ldr	r2, [r3, #4]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	697a      	ldr	r2, [r7, #20]
 8006c0e:	621a      	str	r2, [r3, #32]
}
 8006c10:	bf00      	nop
 8006c12:	371c      	adds	r7, #28
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr
 8006c1c:	40010000 	.word	0x40010000
 8006c20:	40010400 	.word	0x40010400

08006c24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b087      	sub	sp, #28
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a1b      	ldr	r3, [r3, #32]
 8006c32:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6a1b      	ldr	r3, [r3, #32]
 8006c38:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	69db      	ldr	r3, [r3, #28]
 8006c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	021b      	lsls	r3, r3, #8
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006c6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	031b      	lsls	r3, r3, #12
 8006c76:	693a      	ldr	r2, [r7, #16]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4a12      	ldr	r2, [pc, #72]	@ (8006cc8 <TIM_OC4_SetConfig+0xa4>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d003      	beq.n	8006c8c <TIM_OC4_SetConfig+0x68>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4a11      	ldr	r2, [pc, #68]	@ (8006ccc <TIM_OC4_SetConfig+0xa8>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d109      	bne.n	8006ca0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	695b      	ldr	r3, [r3, #20]
 8006c98:	019b      	lsls	r3, r3, #6
 8006c9a:	697a      	ldr	r2, [r7, #20]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	697a      	ldr	r2, [r7, #20]
 8006ca4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	685a      	ldr	r2, [r3, #4]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	693a      	ldr	r2, [r7, #16]
 8006cb8:	621a      	str	r2, [r3, #32]
}
 8006cba:	bf00      	nop
 8006cbc:	371c      	adds	r7, #28
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr
 8006cc6:	bf00      	nop
 8006cc8:	40010000 	.word	0x40010000
 8006ccc:	40010400 	.word	0x40010400

08006cd0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b087      	sub	sp, #28
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	607a      	str	r2, [r7, #4]
 8006cdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6a1b      	ldr	r3, [r3, #32]
 8006ce2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6a1b      	ldr	r3, [r3, #32]
 8006ce8:	f023 0201 	bic.w	r2, r3, #1
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	699b      	ldr	r3, [r3, #24]
 8006cf4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	4a28      	ldr	r2, [pc, #160]	@ (8006d9c <TIM_TI1_SetConfig+0xcc>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d01b      	beq.n	8006d36 <TIM_TI1_SetConfig+0x66>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d04:	d017      	beq.n	8006d36 <TIM_TI1_SetConfig+0x66>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	4a25      	ldr	r2, [pc, #148]	@ (8006da0 <TIM_TI1_SetConfig+0xd0>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d013      	beq.n	8006d36 <TIM_TI1_SetConfig+0x66>
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	4a24      	ldr	r2, [pc, #144]	@ (8006da4 <TIM_TI1_SetConfig+0xd4>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d00f      	beq.n	8006d36 <TIM_TI1_SetConfig+0x66>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	4a23      	ldr	r2, [pc, #140]	@ (8006da8 <TIM_TI1_SetConfig+0xd8>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d00b      	beq.n	8006d36 <TIM_TI1_SetConfig+0x66>
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	4a22      	ldr	r2, [pc, #136]	@ (8006dac <TIM_TI1_SetConfig+0xdc>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d007      	beq.n	8006d36 <TIM_TI1_SetConfig+0x66>
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	4a21      	ldr	r2, [pc, #132]	@ (8006db0 <TIM_TI1_SetConfig+0xe0>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d003      	beq.n	8006d36 <TIM_TI1_SetConfig+0x66>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	4a20      	ldr	r2, [pc, #128]	@ (8006db4 <TIM_TI1_SetConfig+0xe4>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d101      	bne.n	8006d3a <TIM_TI1_SetConfig+0x6a>
 8006d36:	2301      	movs	r3, #1
 8006d38:	e000      	b.n	8006d3c <TIM_TI1_SetConfig+0x6c>
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d008      	beq.n	8006d52 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	f023 0303 	bic.w	r3, r3, #3
 8006d46:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006d48:	697a      	ldr	r2, [r7, #20]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	617b      	str	r3, [r7, #20]
 8006d50:	e003      	b.n	8006d5a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	f043 0301 	orr.w	r3, r3, #1
 8006d58:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	011b      	lsls	r3, r3, #4
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	697a      	ldr	r2, [r7, #20]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	f023 030a 	bic.w	r3, r3, #10
 8006d74:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	f003 030a 	and.w	r3, r3, #10
 8006d7c:	693a      	ldr	r2, [r7, #16]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	697a      	ldr	r2, [r7, #20]
 8006d86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	693a      	ldr	r2, [r7, #16]
 8006d8c:	621a      	str	r2, [r3, #32]
}
 8006d8e:	bf00      	nop
 8006d90:	371c      	adds	r7, #28
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	40010000 	.word	0x40010000
 8006da0:	40000400 	.word	0x40000400
 8006da4:	40000800 	.word	0x40000800
 8006da8:	40000c00 	.word	0x40000c00
 8006dac:	40010400 	.word	0x40010400
 8006db0:	40014000 	.word	0x40014000
 8006db4:	40001800 	.word	0x40001800

08006db8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b087      	sub	sp, #28
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	607a      	str	r2, [r7, #4]
 8006dc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	6a1b      	ldr	r3, [r3, #32]
 8006dca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6a1b      	ldr	r3, [r3, #32]
 8006dd0:	f023 0210 	bic.w	r2, r3, #16
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	699b      	ldr	r3, [r3, #24]
 8006ddc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006de4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	021b      	lsls	r3, r3, #8
 8006dea:	693a      	ldr	r2, [r7, #16]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006df6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	031b      	lsls	r3, r3, #12
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	693a      	ldr	r2, [r7, #16]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006e0a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	011b      	lsls	r3, r3, #4
 8006e10:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006e14:	697a      	ldr	r2, [r7, #20]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	693a      	ldr	r2, [r7, #16]
 8006e1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	697a      	ldr	r2, [r7, #20]
 8006e24:	621a      	str	r2, [r3, #32]
}
 8006e26:	bf00      	nop
 8006e28:	371c      	adds	r7, #28
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr

08006e32 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006e32:	b480      	push	{r7}
 8006e34:	b087      	sub	sp, #28
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	60f8      	str	r0, [r7, #12]
 8006e3a:	60b9      	str	r1, [r7, #8]
 8006e3c:	607a      	str	r2, [r7, #4]
 8006e3e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6a1b      	ldr	r3, [r3, #32]
 8006e44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6a1b      	ldr	r3, [r3, #32]
 8006e4a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	69db      	ldr	r3, [r3, #28]
 8006e56:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	f023 0303 	bic.w	r3, r3, #3
 8006e5e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006e60:	693a      	ldr	r2, [r7, #16]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006e6e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	011b      	lsls	r3, r3, #4
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	693a      	ldr	r2, [r7, #16]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006e82:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	021b      	lsls	r3, r3, #8
 8006e88:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006e8c:	697a      	ldr	r2, [r7, #20]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	693a      	ldr	r2, [r7, #16]
 8006e96:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	697a      	ldr	r2, [r7, #20]
 8006e9c:	621a      	str	r2, [r3, #32]
}
 8006e9e:	bf00      	nop
 8006ea0:	371c      	adds	r7, #28
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr

08006eaa <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006eaa:	b480      	push	{r7}
 8006eac:	b087      	sub	sp, #28
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	60f8      	str	r0, [r7, #12]
 8006eb2:	60b9      	str	r1, [r7, #8]
 8006eb4:	607a      	str	r2, [r7, #4]
 8006eb6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6a1b      	ldr	r3, [r3, #32]
 8006ebc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	6a1b      	ldr	r3, [r3, #32]
 8006ec2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	69db      	ldr	r3, [r3, #28]
 8006ece:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ed6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	021b      	lsls	r3, r3, #8
 8006edc:	693a      	ldr	r2, [r7, #16]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006ee8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	031b      	lsls	r3, r3, #12
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	693a      	ldr	r2, [r7, #16]
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006efc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	031b      	lsls	r3, r3, #12
 8006f02:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006f06:	697a      	ldr	r2, [r7, #20]
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	693a      	ldr	r2, [r7, #16]
 8006f10:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	697a      	ldr	r2, [r7, #20]
 8006f16:	621a      	str	r2, [r3, #32]
}
 8006f18:	bf00      	nop
 8006f1a:	371c      	adds	r7, #28
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b087      	sub	sp, #28
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	f003 031f 	and.w	r3, r3, #31
 8006f36:	2201      	movs	r2, #1
 8006f38:	fa02 f303 	lsl.w	r3, r2, r3
 8006f3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	6a1a      	ldr	r2, [r3, #32]
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	43db      	mvns	r3, r3
 8006f46:	401a      	ands	r2, r3
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6a1a      	ldr	r2, [r3, #32]
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	f003 031f 	and.w	r3, r3, #31
 8006f56:	6879      	ldr	r1, [r7, #4]
 8006f58:	fa01 f303 	lsl.w	r3, r1, r3
 8006f5c:	431a      	orrs	r2, r3
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	621a      	str	r2, [r3, #32]
}
 8006f62:	bf00      	nop
 8006f64:	371c      	adds	r7, #28
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr
	...

08006f70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b085      	sub	sp, #20
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d101      	bne.n	8006f88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f84:	2302      	movs	r3, #2
 8006f86:	e05a      	b.n	800703e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2202      	movs	r2, #2
 8006f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68fa      	ldr	r2, [r7, #12]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a21      	ldr	r2, [pc, #132]	@ (800704c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d022      	beq.n	8007012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fd4:	d01d      	beq.n	8007012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a1d      	ldr	r2, [pc, #116]	@ (8007050 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d018      	beq.n	8007012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a1b      	ldr	r2, [pc, #108]	@ (8007054 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d013      	beq.n	8007012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a1a      	ldr	r2, [pc, #104]	@ (8007058 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d00e      	beq.n	8007012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a18      	ldr	r2, [pc, #96]	@ (800705c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d009      	beq.n	8007012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a17      	ldr	r2, [pc, #92]	@ (8007060 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d004      	beq.n	8007012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a15      	ldr	r2, [pc, #84]	@ (8007064 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d10c      	bne.n	800702c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007018:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	68ba      	ldr	r2, [r7, #8]
 8007020:	4313      	orrs	r3, r2
 8007022:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	68ba      	ldr	r2, [r7, #8]
 800702a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3714      	adds	r7, #20
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr
 800704a:	bf00      	nop
 800704c:	40010000 	.word	0x40010000
 8007050:	40000400 	.word	0x40000400
 8007054:	40000800 	.word	0x40000800
 8007058:	40000c00 	.word	0x40000c00
 800705c:	40010400 	.word	0x40010400
 8007060:	40014000 	.word	0x40014000
 8007064:	40001800 	.word	0x40001800

08007068 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d101      	bne.n	800707a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	e042      	b.n	8007100 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007080:	b2db      	uxtb	r3, r3
 8007082:	2b00      	cmp	r3, #0
 8007084:	d106      	bne.n	8007094 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f7fa ff9a 	bl	8001fc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2224      	movs	r2, #36	@ 0x24
 8007098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	68da      	ldr	r2, [r3, #12]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80070aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 f973 	bl	8007398 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	691a      	ldr	r2, [r3, #16]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80070c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	695a      	ldr	r2, [r3, #20]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80070d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	68da      	ldr	r2, [r3, #12]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80070e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2220      	movs	r2, #32
 80070ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2220      	movs	r2, #32
 80070f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80070fe:	2300      	movs	r3, #0
}
 8007100:	4618      	mov	r0, r3
 8007102:	3708      	adds	r7, #8
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b08a      	sub	sp, #40	@ 0x28
 800710c:	af02      	add	r7, sp, #8
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	603b      	str	r3, [r7, #0]
 8007114:	4613      	mov	r3, r2
 8007116:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007118:	2300      	movs	r3, #0
 800711a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007122:	b2db      	uxtb	r3, r3
 8007124:	2b20      	cmp	r3, #32
 8007126:	d175      	bne.n	8007214 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d002      	beq.n	8007134 <HAL_UART_Transmit+0x2c>
 800712e:	88fb      	ldrh	r3, [r7, #6]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d101      	bne.n	8007138 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	e06e      	b.n	8007216 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2200      	movs	r2, #0
 800713c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2221      	movs	r2, #33	@ 0x21
 8007142:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007146:	f7fb f917 	bl	8002378 <HAL_GetTick>
 800714a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	88fa      	ldrh	r2, [r7, #6]
 8007150:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	88fa      	ldrh	r2, [r7, #6]
 8007156:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007160:	d108      	bne.n	8007174 <HAL_UART_Transmit+0x6c>
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d104      	bne.n	8007174 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800716a:	2300      	movs	r3, #0
 800716c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	61bb      	str	r3, [r7, #24]
 8007172:	e003      	b.n	800717c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007178:	2300      	movs	r3, #0
 800717a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800717c:	e02e      	b.n	80071dc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	9300      	str	r3, [sp, #0]
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	2200      	movs	r2, #0
 8007186:	2180      	movs	r1, #128	@ 0x80
 8007188:	68f8      	ldr	r0, [r7, #12]
 800718a:	f000 f848 	bl	800721e <UART_WaitOnFlagUntilTimeout>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d005      	beq.n	80071a0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2220      	movs	r2, #32
 8007198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800719c:	2303      	movs	r3, #3
 800719e:	e03a      	b.n	8007216 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d10b      	bne.n	80071be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	881b      	ldrh	r3, [r3, #0]
 80071aa:	461a      	mov	r2, r3
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80071b6:	69bb      	ldr	r3, [r7, #24]
 80071b8:	3302      	adds	r3, #2
 80071ba:	61bb      	str	r3, [r7, #24]
 80071bc:	e007      	b.n	80071ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	781a      	ldrb	r2, [r3, #0]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80071c8:	69fb      	ldr	r3, [r7, #28]
 80071ca:	3301      	adds	r3, #1
 80071cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	3b01      	subs	r3, #1
 80071d6:	b29a      	uxth	r2, r3
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d1cb      	bne.n	800717e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	9300      	str	r3, [sp, #0]
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	2200      	movs	r2, #0
 80071ee:	2140      	movs	r1, #64	@ 0x40
 80071f0:	68f8      	ldr	r0, [r7, #12]
 80071f2:	f000 f814 	bl	800721e <UART_WaitOnFlagUntilTimeout>
 80071f6:	4603      	mov	r3, r0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d005      	beq.n	8007208 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2220      	movs	r2, #32
 8007200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007204:	2303      	movs	r3, #3
 8007206:	e006      	b.n	8007216 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2220      	movs	r2, #32
 800720c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007210:	2300      	movs	r3, #0
 8007212:	e000      	b.n	8007216 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007214:	2302      	movs	r3, #2
  }
}
 8007216:	4618      	mov	r0, r3
 8007218:	3720      	adds	r7, #32
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800721e:	b580      	push	{r7, lr}
 8007220:	b086      	sub	sp, #24
 8007222:	af00      	add	r7, sp, #0
 8007224:	60f8      	str	r0, [r7, #12]
 8007226:	60b9      	str	r1, [r7, #8]
 8007228:	603b      	str	r3, [r7, #0]
 800722a:	4613      	mov	r3, r2
 800722c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800722e:	e03b      	b.n	80072a8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007230:	6a3b      	ldr	r3, [r7, #32]
 8007232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007236:	d037      	beq.n	80072a8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007238:	f7fb f89e 	bl	8002378 <HAL_GetTick>
 800723c:	4602      	mov	r2, r0
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	1ad3      	subs	r3, r2, r3
 8007242:	6a3a      	ldr	r2, [r7, #32]
 8007244:	429a      	cmp	r2, r3
 8007246:	d302      	bcc.n	800724e <UART_WaitOnFlagUntilTimeout+0x30>
 8007248:	6a3b      	ldr	r3, [r7, #32]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d101      	bne.n	8007252 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800724e:	2303      	movs	r3, #3
 8007250:	e03a      	b.n	80072c8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	f003 0304 	and.w	r3, r3, #4
 800725c:	2b00      	cmp	r3, #0
 800725e:	d023      	beq.n	80072a8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	2b80      	cmp	r3, #128	@ 0x80
 8007264:	d020      	beq.n	80072a8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	2b40      	cmp	r3, #64	@ 0x40
 800726a:	d01d      	beq.n	80072a8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 0308 	and.w	r3, r3, #8
 8007276:	2b08      	cmp	r3, #8
 8007278:	d116      	bne.n	80072a8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800727a:	2300      	movs	r3, #0
 800727c:	617b      	str	r3, [r7, #20]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	617b      	str	r3, [r7, #20]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	617b      	str	r3, [r7, #20]
 800728e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007290:	68f8      	ldr	r0, [r7, #12]
 8007292:	f000 f81d 	bl	80072d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2208      	movs	r2, #8
 800729a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2200      	movs	r2, #0
 80072a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80072a4:	2301      	movs	r3, #1
 80072a6:	e00f      	b.n	80072c8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	4013      	ands	r3, r2
 80072b2:	68ba      	ldr	r2, [r7, #8]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	bf0c      	ite	eq
 80072b8:	2301      	moveq	r3, #1
 80072ba:	2300      	movne	r3, #0
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	461a      	mov	r2, r3
 80072c0:	79fb      	ldrb	r3, [r7, #7]
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d0b4      	beq.n	8007230 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3718      	adds	r7, #24
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b095      	sub	sp, #84	@ 0x54
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	330c      	adds	r3, #12
 80072de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072e2:	e853 3f00 	ldrex	r3, [r3]
 80072e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80072e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	330c      	adds	r3, #12
 80072f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80072f8:	643a      	str	r2, [r7, #64]	@ 0x40
 80072fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80072fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007300:	e841 2300 	strex	r3, r2, [r1]
 8007304:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007308:	2b00      	cmp	r3, #0
 800730a:	d1e5      	bne.n	80072d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	3314      	adds	r3, #20
 8007312:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007314:	6a3b      	ldr	r3, [r7, #32]
 8007316:	e853 3f00 	ldrex	r3, [r3]
 800731a:	61fb      	str	r3, [r7, #28]
   return(result);
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	f023 0301 	bic.w	r3, r3, #1
 8007322:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	3314      	adds	r3, #20
 800732a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800732c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800732e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007330:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007332:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007334:	e841 2300 	strex	r3, r2, [r1]
 8007338:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800733a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800733c:	2b00      	cmp	r3, #0
 800733e:	d1e5      	bne.n	800730c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007344:	2b01      	cmp	r3, #1
 8007346:	d119      	bne.n	800737c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	330c      	adds	r3, #12
 800734e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	e853 3f00 	ldrex	r3, [r3]
 8007356:	60bb      	str	r3, [r7, #8]
   return(result);
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	f023 0310 	bic.w	r3, r3, #16
 800735e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	330c      	adds	r3, #12
 8007366:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007368:	61ba      	str	r2, [r7, #24]
 800736a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736c:	6979      	ldr	r1, [r7, #20]
 800736e:	69ba      	ldr	r2, [r7, #24]
 8007370:	e841 2300 	strex	r3, r2, [r1]
 8007374:	613b      	str	r3, [r7, #16]
   return(result);
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d1e5      	bne.n	8007348 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2220      	movs	r2, #32
 8007380:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800738a:	bf00      	nop
 800738c:	3754      	adds	r7, #84	@ 0x54
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr
	...

08007398 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007398:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800739c:	b0c0      	sub	sp, #256	@ 0x100
 800739e:	af00      	add	r7, sp, #0
 80073a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	691b      	ldr	r3, [r3, #16]
 80073ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80073b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073b4:	68d9      	ldr	r1, [r3, #12]
 80073b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	ea40 0301 	orr.w	r3, r0, r1
 80073c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80073c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073c6:	689a      	ldr	r2, [r3, #8]
 80073c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	431a      	orrs	r2, r3
 80073d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073d4:	695b      	ldr	r3, [r3, #20]
 80073d6:	431a      	orrs	r2, r3
 80073d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073dc:	69db      	ldr	r3, [r3, #28]
 80073de:	4313      	orrs	r3, r2
 80073e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80073e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	68db      	ldr	r3, [r3, #12]
 80073ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80073f0:	f021 010c 	bic.w	r1, r1, #12
 80073f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80073fe:	430b      	orrs	r3, r1
 8007400:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	695b      	ldr	r3, [r3, #20]
 800740a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800740e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007412:	6999      	ldr	r1, [r3, #24]
 8007414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	ea40 0301 	orr.w	r3, r0, r1
 800741e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	4b8f      	ldr	r3, [pc, #572]	@ (8007664 <UART_SetConfig+0x2cc>)
 8007428:	429a      	cmp	r2, r3
 800742a:	d005      	beq.n	8007438 <UART_SetConfig+0xa0>
 800742c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	4b8d      	ldr	r3, [pc, #564]	@ (8007668 <UART_SetConfig+0x2d0>)
 8007434:	429a      	cmp	r2, r3
 8007436:	d104      	bne.n	8007442 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007438:	f7fd fe34 	bl	80050a4 <HAL_RCC_GetPCLK2Freq>
 800743c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007440:	e003      	b.n	800744a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007442:	f7fd fe1b 	bl	800507c <HAL_RCC_GetPCLK1Freq>
 8007446:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800744a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800744e:	69db      	ldr	r3, [r3, #28]
 8007450:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007454:	f040 810c 	bne.w	8007670 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007458:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800745c:	2200      	movs	r2, #0
 800745e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007462:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007466:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800746a:	4622      	mov	r2, r4
 800746c:	462b      	mov	r3, r5
 800746e:	1891      	adds	r1, r2, r2
 8007470:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007472:	415b      	adcs	r3, r3
 8007474:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007476:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800747a:	4621      	mov	r1, r4
 800747c:	eb12 0801 	adds.w	r8, r2, r1
 8007480:	4629      	mov	r1, r5
 8007482:	eb43 0901 	adc.w	r9, r3, r1
 8007486:	f04f 0200 	mov.w	r2, #0
 800748a:	f04f 0300 	mov.w	r3, #0
 800748e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007492:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007496:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800749a:	4690      	mov	r8, r2
 800749c:	4699      	mov	r9, r3
 800749e:	4623      	mov	r3, r4
 80074a0:	eb18 0303 	adds.w	r3, r8, r3
 80074a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80074a8:	462b      	mov	r3, r5
 80074aa:	eb49 0303 	adc.w	r3, r9, r3
 80074ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80074b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80074be:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80074c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80074c6:	460b      	mov	r3, r1
 80074c8:	18db      	adds	r3, r3, r3
 80074ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80074cc:	4613      	mov	r3, r2
 80074ce:	eb42 0303 	adc.w	r3, r2, r3
 80074d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80074d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80074d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80074dc:	f7f9 fc54 	bl	8000d88 <__aeabi_uldivmod>
 80074e0:	4602      	mov	r2, r0
 80074e2:	460b      	mov	r3, r1
 80074e4:	4b61      	ldr	r3, [pc, #388]	@ (800766c <UART_SetConfig+0x2d4>)
 80074e6:	fba3 2302 	umull	r2, r3, r3, r2
 80074ea:	095b      	lsrs	r3, r3, #5
 80074ec:	011c      	lsls	r4, r3, #4
 80074ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074f2:	2200      	movs	r2, #0
 80074f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80074f8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80074fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007500:	4642      	mov	r2, r8
 8007502:	464b      	mov	r3, r9
 8007504:	1891      	adds	r1, r2, r2
 8007506:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007508:	415b      	adcs	r3, r3
 800750a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800750c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007510:	4641      	mov	r1, r8
 8007512:	eb12 0a01 	adds.w	sl, r2, r1
 8007516:	4649      	mov	r1, r9
 8007518:	eb43 0b01 	adc.w	fp, r3, r1
 800751c:	f04f 0200 	mov.w	r2, #0
 8007520:	f04f 0300 	mov.w	r3, #0
 8007524:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007528:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800752c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007530:	4692      	mov	sl, r2
 8007532:	469b      	mov	fp, r3
 8007534:	4643      	mov	r3, r8
 8007536:	eb1a 0303 	adds.w	r3, sl, r3
 800753a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800753e:	464b      	mov	r3, r9
 8007540:	eb4b 0303 	adc.w	r3, fp, r3
 8007544:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007554:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007558:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800755c:	460b      	mov	r3, r1
 800755e:	18db      	adds	r3, r3, r3
 8007560:	643b      	str	r3, [r7, #64]	@ 0x40
 8007562:	4613      	mov	r3, r2
 8007564:	eb42 0303 	adc.w	r3, r2, r3
 8007568:	647b      	str	r3, [r7, #68]	@ 0x44
 800756a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800756e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007572:	f7f9 fc09 	bl	8000d88 <__aeabi_uldivmod>
 8007576:	4602      	mov	r2, r0
 8007578:	460b      	mov	r3, r1
 800757a:	4611      	mov	r1, r2
 800757c:	4b3b      	ldr	r3, [pc, #236]	@ (800766c <UART_SetConfig+0x2d4>)
 800757e:	fba3 2301 	umull	r2, r3, r3, r1
 8007582:	095b      	lsrs	r3, r3, #5
 8007584:	2264      	movs	r2, #100	@ 0x64
 8007586:	fb02 f303 	mul.w	r3, r2, r3
 800758a:	1acb      	subs	r3, r1, r3
 800758c:	00db      	lsls	r3, r3, #3
 800758e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007592:	4b36      	ldr	r3, [pc, #216]	@ (800766c <UART_SetConfig+0x2d4>)
 8007594:	fba3 2302 	umull	r2, r3, r3, r2
 8007598:	095b      	lsrs	r3, r3, #5
 800759a:	005b      	lsls	r3, r3, #1
 800759c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80075a0:	441c      	add	r4, r3
 80075a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075a6:	2200      	movs	r2, #0
 80075a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80075ac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80075b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80075b4:	4642      	mov	r2, r8
 80075b6:	464b      	mov	r3, r9
 80075b8:	1891      	adds	r1, r2, r2
 80075ba:	63b9      	str	r1, [r7, #56]	@ 0x38
 80075bc:	415b      	adcs	r3, r3
 80075be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80075c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80075c4:	4641      	mov	r1, r8
 80075c6:	1851      	adds	r1, r2, r1
 80075c8:	6339      	str	r1, [r7, #48]	@ 0x30
 80075ca:	4649      	mov	r1, r9
 80075cc:	414b      	adcs	r3, r1
 80075ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80075d0:	f04f 0200 	mov.w	r2, #0
 80075d4:	f04f 0300 	mov.w	r3, #0
 80075d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80075dc:	4659      	mov	r1, fp
 80075de:	00cb      	lsls	r3, r1, #3
 80075e0:	4651      	mov	r1, sl
 80075e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075e6:	4651      	mov	r1, sl
 80075e8:	00ca      	lsls	r2, r1, #3
 80075ea:	4610      	mov	r0, r2
 80075ec:	4619      	mov	r1, r3
 80075ee:	4603      	mov	r3, r0
 80075f0:	4642      	mov	r2, r8
 80075f2:	189b      	adds	r3, r3, r2
 80075f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80075f8:	464b      	mov	r3, r9
 80075fa:	460a      	mov	r2, r1
 80075fc:	eb42 0303 	adc.w	r3, r2, r3
 8007600:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007610:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007614:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007618:	460b      	mov	r3, r1
 800761a:	18db      	adds	r3, r3, r3
 800761c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800761e:	4613      	mov	r3, r2
 8007620:	eb42 0303 	adc.w	r3, r2, r3
 8007624:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007626:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800762a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800762e:	f7f9 fbab 	bl	8000d88 <__aeabi_uldivmod>
 8007632:	4602      	mov	r2, r0
 8007634:	460b      	mov	r3, r1
 8007636:	4b0d      	ldr	r3, [pc, #52]	@ (800766c <UART_SetConfig+0x2d4>)
 8007638:	fba3 1302 	umull	r1, r3, r3, r2
 800763c:	095b      	lsrs	r3, r3, #5
 800763e:	2164      	movs	r1, #100	@ 0x64
 8007640:	fb01 f303 	mul.w	r3, r1, r3
 8007644:	1ad3      	subs	r3, r2, r3
 8007646:	00db      	lsls	r3, r3, #3
 8007648:	3332      	adds	r3, #50	@ 0x32
 800764a:	4a08      	ldr	r2, [pc, #32]	@ (800766c <UART_SetConfig+0x2d4>)
 800764c:	fba2 2303 	umull	r2, r3, r2, r3
 8007650:	095b      	lsrs	r3, r3, #5
 8007652:	f003 0207 	and.w	r2, r3, #7
 8007656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4422      	add	r2, r4
 800765e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007660:	e106      	b.n	8007870 <UART_SetConfig+0x4d8>
 8007662:	bf00      	nop
 8007664:	40011000 	.word	0x40011000
 8007668:	40011400 	.word	0x40011400
 800766c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007670:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007674:	2200      	movs	r2, #0
 8007676:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800767a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800767e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007682:	4642      	mov	r2, r8
 8007684:	464b      	mov	r3, r9
 8007686:	1891      	adds	r1, r2, r2
 8007688:	6239      	str	r1, [r7, #32]
 800768a:	415b      	adcs	r3, r3
 800768c:	627b      	str	r3, [r7, #36]	@ 0x24
 800768e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007692:	4641      	mov	r1, r8
 8007694:	1854      	adds	r4, r2, r1
 8007696:	4649      	mov	r1, r9
 8007698:	eb43 0501 	adc.w	r5, r3, r1
 800769c:	f04f 0200 	mov.w	r2, #0
 80076a0:	f04f 0300 	mov.w	r3, #0
 80076a4:	00eb      	lsls	r3, r5, #3
 80076a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80076aa:	00e2      	lsls	r2, r4, #3
 80076ac:	4614      	mov	r4, r2
 80076ae:	461d      	mov	r5, r3
 80076b0:	4643      	mov	r3, r8
 80076b2:	18e3      	adds	r3, r4, r3
 80076b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80076b8:	464b      	mov	r3, r9
 80076ba:	eb45 0303 	adc.w	r3, r5, r3
 80076be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80076c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80076ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80076d2:	f04f 0200 	mov.w	r2, #0
 80076d6:	f04f 0300 	mov.w	r3, #0
 80076da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80076de:	4629      	mov	r1, r5
 80076e0:	008b      	lsls	r3, r1, #2
 80076e2:	4621      	mov	r1, r4
 80076e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076e8:	4621      	mov	r1, r4
 80076ea:	008a      	lsls	r2, r1, #2
 80076ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80076f0:	f7f9 fb4a 	bl	8000d88 <__aeabi_uldivmod>
 80076f4:	4602      	mov	r2, r0
 80076f6:	460b      	mov	r3, r1
 80076f8:	4b60      	ldr	r3, [pc, #384]	@ (800787c <UART_SetConfig+0x4e4>)
 80076fa:	fba3 2302 	umull	r2, r3, r3, r2
 80076fe:	095b      	lsrs	r3, r3, #5
 8007700:	011c      	lsls	r4, r3, #4
 8007702:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007706:	2200      	movs	r2, #0
 8007708:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800770c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007710:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007714:	4642      	mov	r2, r8
 8007716:	464b      	mov	r3, r9
 8007718:	1891      	adds	r1, r2, r2
 800771a:	61b9      	str	r1, [r7, #24]
 800771c:	415b      	adcs	r3, r3
 800771e:	61fb      	str	r3, [r7, #28]
 8007720:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007724:	4641      	mov	r1, r8
 8007726:	1851      	adds	r1, r2, r1
 8007728:	6139      	str	r1, [r7, #16]
 800772a:	4649      	mov	r1, r9
 800772c:	414b      	adcs	r3, r1
 800772e:	617b      	str	r3, [r7, #20]
 8007730:	f04f 0200 	mov.w	r2, #0
 8007734:	f04f 0300 	mov.w	r3, #0
 8007738:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800773c:	4659      	mov	r1, fp
 800773e:	00cb      	lsls	r3, r1, #3
 8007740:	4651      	mov	r1, sl
 8007742:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007746:	4651      	mov	r1, sl
 8007748:	00ca      	lsls	r2, r1, #3
 800774a:	4610      	mov	r0, r2
 800774c:	4619      	mov	r1, r3
 800774e:	4603      	mov	r3, r0
 8007750:	4642      	mov	r2, r8
 8007752:	189b      	adds	r3, r3, r2
 8007754:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007758:	464b      	mov	r3, r9
 800775a:	460a      	mov	r2, r1
 800775c:	eb42 0303 	adc.w	r3, r2, r3
 8007760:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800776e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007770:	f04f 0200 	mov.w	r2, #0
 8007774:	f04f 0300 	mov.w	r3, #0
 8007778:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800777c:	4649      	mov	r1, r9
 800777e:	008b      	lsls	r3, r1, #2
 8007780:	4641      	mov	r1, r8
 8007782:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007786:	4641      	mov	r1, r8
 8007788:	008a      	lsls	r2, r1, #2
 800778a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800778e:	f7f9 fafb 	bl	8000d88 <__aeabi_uldivmod>
 8007792:	4602      	mov	r2, r0
 8007794:	460b      	mov	r3, r1
 8007796:	4611      	mov	r1, r2
 8007798:	4b38      	ldr	r3, [pc, #224]	@ (800787c <UART_SetConfig+0x4e4>)
 800779a:	fba3 2301 	umull	r2, r3, r3, r1
 800779e:	095b      	lsrs	r3, r3, #5
 80077a0:	2264      	movs	r2, #100	@ 0x64
 80077a2:	fb02 f303 	mul.w	r3, r2, r3
 80077a6:	1acb      	subs	r3, r1, r3
 80077a8:	011b      	lsls	r3, r3, #4
 80077aa:	3332      	adds	r3, #50	@ 0x32
 80077ac:	4a33      	ldr	r2, [pc, #204]	@ (800787c <UART_SetConfig+0x4e4>)
 80077ae:	fba2 2303 	umull	r2, r3, r2, r3
 80077b2:	095b      	lsrs	r3, r3, #5
 80077b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80077b8:	441c      	add	r4, r3
 80077ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077be:	2200      	movs	r2, #0
 80077c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80077c2:	677a      	str	r2, [r7, #116]	@ 0x74
 80077c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80077c8:	4642      	mov	r2, r8
 80077ca:	464b      	mov	r3, r9
 80077cc:	1891      	adds	r1, r2, r2
 80077ce:	60b9      	str	r1, [r7, #8]
 80077d0:	415b      	adcs	r3, r3
 80077d2:	60fb      	str	r3, [r7, #12]
 80077d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80077d8:	4641      	mov	r1, r8
 80077da:	1851      	adds	r1, r2, r1
 80077dc:	6039      	str	r1, [r7, #0]
 80077de:	4649      	mov	r1, r9
 80077e0:	414b      	adcs	r3, r1
 80077e2:	607b      	str	r3, [r7, #4]
 80077e4:	f04f 0200 	mov.w	r2, #0
 80077e8:	f04f 0300 	mov.w	r3, #0
 80077ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80077f0:	4659      	mov	r1, fp
 80077f2:	00cb      	lsls	r3, r1, #3
 80077f4:	4651      	mov	r1, sl
 80077f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80077fa:	4651      	mov	r1, sl
 80077fc:	00ca      	lsls	r2, r1, #3
 80077fe:	4610      	mov	r0, r2
 8007800:	4619      	mov	r1, r3
 8007802:	4603      	mov	r3, r0
 8007804:	4642      	mov	r2, r8
 8007806:	189b      	adds	r3, r3, r2
 8007808:	66bb      	str	r3, [r7, #104]	@ 0x68
 800780a:	464b      	mov	r3, r9
 800780c:	460a      	mov	r2, r1
 800780e:	eb42 0303 	adc.w	r3, r2, r3
 8007812:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	663b      	str	r3, [r7, #96]	@ 0x60
 800781e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007820:	f04f 0200 	mov.w	r2, #0
 8007824:	f04f 0300 	mov.w	r3, #0
 8007828:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800782c:	4649      	mov	r1, r9
 800782e:	008b      	lsls	r3, r1, #2
 8007830:	4641      	mov	r1, r8
 8007832:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007836:	4641      	mov	r1, r8
 8007838:	008a      	lsls	r2, r1, #2
 800783a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800783e:	f7f9 faa3 	bl	8000d88 <__aeabi_uldivmod>
 8007842:	4602      	mov	r2, r0
 8007844:	460b      	mov	r3, r1
 8007846:	4b0d      	ldr	r3, [pc, #52]	@ (800787c <UART_SetConfig+0x4e4>)
 8007848:	fba3 1302 	umull	r1, r3, r3, r2
 800784c:	095b      	lsrs	r3, r3, #5
 800784e:	2164      	movs	r1, #100	@ 0x64
 8007850:	fb01 f303 	mul.w	r3, r1, r3
 8007854:	1ad3      	subs	r3, r2, r3
 8007856:	011b      	lsls	r3, r3, #4
 8007858:	3332      	adds	r3, #50	@ 0x32
 800785a:	4a08      	ldr	r2, [pc, #32]	@ (800787c <UART_SetConfig+0x4e4>)
 800785c:	fba2 2303 	umull	r2, r3, r2, r3
 8007860:	095b      	lsrs	r3, r3, #5
 8007862:	f003 020f 	and.w	r2, r3, #15
 8007866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4422      	add	r2, r4
 800786e:	609a      	str	r2, [r3, #8]
}
 8007870:	bf00      	nop
 8007872:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007876:	46bd      	mov	sp, r7
 8007878:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800787c:	51eb851f 	.word	0x51eb851f

08007880 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007880:	b084      	sub	sp, #16
 8007882:	b580      	push	{r7, lr}
 8007884:	b084      	sub	sp, #16
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
 800788a:	f107 001c 	add.w	r0, r7, #28
 800788e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007892:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007896:	2b01      	cmp	r3, #1
 8007898:	d123      	bne.n	80078e2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800789e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80078ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80078c2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d105      	bne.n	80078d6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f001 fae2 	bl	8008ea0 <USB_CoreReset>
 80078dc:	4603      	mov	r3, r0
 80078de:	73fb      	strb	r3, [r7, #15]
 80078e0:	e01b      	b.n	800791a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	68db      	ldr	r3, [r3, #12]
 80078e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f001 fad6 	bl	8008ea0 <USB_CoreReset>
 80078f4:	4603      	mov	r3, r0
 80078f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80078f8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d106      	bne.n	800790e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007904:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	639a      	str	r2, [r3, #56]	@ 0x38
 800790c:	e005      	b.n	800791a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007912:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800791a:	7fbb      	ldrb	r3, [r7, #30]
 800791c:	2b01      	cmp	r3, #1
 800791e:	d10b      	bne.n	8007938 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	f043 0206 	orr.w	r2, r3, #6
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	f043 0220 	orr.w	r2, r3, #32
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007938:	7bfb      	ldrb	r3, [r7, #15]
}
 800793a:	4618      	mov	r0, r3
 800793c:	3710      	adds	r7, #16
 800793e:	46bd      	mov	sp, r7
 8007940:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007944:	b004      	add	sp, #16
 8007946:	4770      	bx	lr

08007948 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007948:	b480      	push	{r7}
 800794a:	b087      	sub	sp, #28
 800794c:	af00      	add	r7, sp, #0
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	60b9      	str	r1, [r7, #8]
 8007952:	4613      	mov	r3, r2
 8007954:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007956:	79fb      	ldrb	r3, [r7, #7]
 8007958:	2b02      	cmp	r3, #2
 800795a:	d165      	bne.n	8007a28 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	4a41      	ldr	r2, [pc, #260]	@ (8007a64 <USB_SetTurnaroundTime+0x11c>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d906      	bls.n	8007972 <USB_SetTurnaroundTime+0x2a>
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	4a40      	ldr	r2, [pc, #256]	@ (8007a68 <USB_SetTurnaroundTime+0x120>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d202      	bcs.n	8007972 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800796c:	230f      	movs	r3, #15
 800796e:	617b      	str	r3, [r7, #20]
 8007970:	e062      	b.n	8007a38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	4a3c      	ldr	r2, [pc, #240]	@ (8007a68 <USB_SetTurnaroundTime+0x120>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d306      	bcc.n	8007988 <USB_SetTurnaroundTime+0x40>
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	4a3b      	ldr	r2, [pc, #236]	@ (8007a6c <USB_SetTurnaroundTime+0x124>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d202      	bcs.n	8007988 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007982:	230e      	movs	r3, #14
 8007984:	617b      	str	r3, [r7, #20]
 8007986:	e057      	b.n	8007a38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	4a38      	ldr	r2, [pc, #224]	@ (8007a6c <USB_SetTurnaroundTime+0x124>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d306      	bcc.n	800799e <USB_SetTurnaroundTime+0x56>
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	4a37      	ldr	r2, [pc, #220]	@ (8007a70 <USB_SetTurnaroundTime+0x128>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d202      	bcs.n	800799e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007998:	230d      	movs	r3, #13
 800799a:	617b      	str	r3, [r7, #20]
 800799c:	e04c      	b.n	8007a38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	4a33      	ldr	r2, [pc, #204]	@ (8007a70 <USB_SetTurnaroundTime+0x128>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d306      	bcc.n	80079b4 <USB_SetTurnaroundTime+0x6c>
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	4a32      	ldr	r2, [pc, #200]	@ (8007a74 <USB_SetTurnaroundTime+0x12c>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d802      	bhi.n	80079b4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80079ae:	230c      	movs	r3, #12
 80079b0:	617b      	str	r3, [r7, #20]
 80079b2:	e041      	b.n	8007a38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	4a2f      	ldr	r2, [pc, #188]	@ (8007a74 <USB_SetTurnaroundTime+0x12c>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d906      	bls.n	80079ca <USB_SetTurnaroundTime+0x82>
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	4a2e      	ldr	r2, [pc, #184]	@ (8007a78 <USB_SetTurnaroundTime+0x130>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d802      	bhi.n	80079ca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80079c4:	230b      	movs	r3, #11
 80079c6:	617b      	str	r3, [r7, #20]
 80079c8:	e036      	b.n	8007a38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	4a2a      	ldr	r2, [pc, #168]	@ (8007a78 <USB_SetTurnaroundTime+0x130>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d906      	bls.n	80079e0 <USB_SetTurnaroundTime+0x98>
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	4a29      	ldr	r2, [pc, #164]	@ (8007a7c <USB_SetTurnaroundTime+0x134>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d802      	bhi.n	80079e0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80079da:	230a      	movs	r3, #10
 80079dc:	617b      	str	r3, [r7, #20]
 80079de:	e02b      	b.n	8007a38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	4a26      	ldr	r2, [pc, #152]	@ (8007a7c <USB_SetTurnaroundTime+0x134>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d906      	bls.n	80079f6 <USB_SetTurnaroundTime+0xae>
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	4a25      	ldr	r2, [pc, #148]	@ (8007a80 <USB_SetTurnaroundTime+0x138>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d202      	bcs.n	80079f6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80079f0:	2309      	movs	r3, #9
 80079f2:	617b      	str	r3, [r7, #20]
 80079f4:	e020      	b.n	8007a38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	4a21      	ldr	r2, [pc, #132]	@ (8007a80 <USB_SetTurnaroundTime+0x138>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d306      	bcc.n	8007a0c <USB_SetTurnaroundTime+0xc4>
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	4a20      	ldr	r2, [pc, #128]	@ (8007a84 <USB_SetTurnaroundTime+0x13c>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d802      	bhi.n	8007a0c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007a06:	2308      	movs	r3, #8
 8007a08:	617b      	str	r3, [r7, #20]
 8007a0a:	e015      	b.n	8007a38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	4a1d      	ldr	r2, [pc, #116]	@ (8007a84 <USB_SetTurnaroundTime+0x13c>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d906      	bls.n	8007a22 <USB_SetTurnaroundTime+0xda>
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	4a1c      	ldr	r2, [pc, #112]	@ (8007a88 <USB_SetTurnaroundTime+0x140>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d202      	bcs.n	8007a22 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007a1c:	2307      	movs	r3, #7
 8007a1e:	617b      	str	r3, [r7, #20]
 8007a20:	e00a      	b.n	8007a38 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007a22:	2306      	movs	r3, #6
 8007a24:	617b      	str	r3, [r7, #20]
 8007a26:	e007      	b.n	8007a38 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007a28:	79fb      	ldrb	r3, [r7, #7]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d102      	bne.n	8007a34 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007a2e:	2309      	movs	r3, #9
 8007a30:	617b      	str	r3, [r7, #20]
 8007a32:	e001      	b.n	8007a38 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007a34:	2309      	movs	r3, #9
 8007a36:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	68db      	ldr	r3, [r3, #12]
 8007a3c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	68da      	ldr	r2, [r3, #12]
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	029b      	lsls	r3, r3, #10
 8007a4c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007a50:	431a      	orrs	r2, r3
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	371c      	adds	r7, #28
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr
 8007a64:	00d8acbf 	.word	0x00d8acbf
 8007a68:	00e4e1c0 	.word	0x00e4e1c0
 8007a6c:	00f42400 	.word	0x00f42400
 8007a70:	01067380 	.word	0x01067380
 8007a74:	011a499f 	.word	0x011a499f
 8007a78:	01312cff 	.word	0x01312cff
 8007a7c:	014ca43f 	.word	0x014ca43f
 8007a80:	016e3600 	.word	0x016e3600
 8007a84:	01a6ab1f 	.word	0x01a6ab1f
 8007a88:	01e84800 	.word	0x01e84800

08007a8c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	f043 0201 	orr.w	r2, r3, #1
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	370c      	adds	r7, #12
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr

08007aae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007aae:	b480      	push	{r7}
 8007ab0:	b083      	sub	sp, #12
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	f023 0201 	bic.w	r2, r3, #1
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ac2:	2300      	movs	r3, #0
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	370c      	adds	r7, #12
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr

08007ad0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b084      	sub	sp, #16
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	460b      	mov	r3, r1
 8007ada:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007adc:	2300      	movs	r3, #0
 8007ade:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007aec:	78fb      	ldrb	r3, [r7, #3]
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d115      	bne.n	8007b1e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007afe:	200a      	movs	r0, #10
 8007b00:	f7fa fc46 	bl	8002390 <HAL_Delay>
      ms += 10U;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	330a      	adds	r3, #10
 8007b08:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f001 f939 	bl	8008d82 <USB_GetMode>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d01e      	beq.n	8007b54 <USB_SetCurrentMode+0x84>
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2bc7      	cmp	r3, #199	@ 0xc7
 8007b1a:	d9f0      	bls.n	8007afe <USB_SetCurrentMode+0x2e>
 8007b1c:	e01a      	b.n	8007b54 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007b1e:	78fb      	ldrb	r3, [r7, #3]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d115      	bne.n	8007b50 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007b30:	200a      	movs	r0, #10
 8007b32:	f7fa fc2d 	bl	8002390 <HAL_Delay>
      ms += 10U;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	330a      	adds	r3, #10
 8007b3a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f001 f920 	bl	8008d82 <USB_GetMode>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d005      	beq.n	8007b54 <USB_SetCurrentMode+0x84>
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2bc7      	cmp	r3, #199	@ 0xc7
 8007b4c:	d9f0      	bls.n	8007b30 <USB_SetCurrentMode+0x60>
 8007b4e:	e001      	b.n	8007b54 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007b50:	2301      	movs	r3, #1
 8007b52:	e005      	b.n	8007b60 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2bc8      	cmp	r3, #200	@ 0xc8
 8007b58:	d101      	bne.n	8007b5e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	e000      	b.n	8007b60 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007b5e:	2300      	movs	r3, #0
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3710      	adds	r7, #16
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b68:	b084      	sub	sp, #16
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b086      	sub	sp, #24
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
 8007b72:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007b76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007b82:	2300      	movs	r3, #0
 8007b84:	613b      	str	r3, [r7, #16]
 8007b86:	e009      	b.n	8007b9c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	3340      	adds	r3, #64	@ 0x40
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	4413      	add	r3, r2
 8007b92:	2200      	movs	r2, #0
 8007b94:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	3301      	adds	r3, #1
 8007b9a:	613b      	str	r3, [r7, #16]
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	2b0e      	cmp	r3, #14
 8007ba0:	d9f2      	bls.n	8007b88 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007ba2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d11c      	bne.n	8007be4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	68fa      	ldr	r2, [r7, #12]
 8007bb4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007bb8:	f043 0302 	orr.w	r3, r3, #2
 8007bbc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bc2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	601a      	str	r2, [r3, #0]
 8007be2:	e005      	b.n	8007bf0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007be8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007bfc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d10d      	bne.n	8007c20 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007c04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d104      	bne.n	8007c16 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007c0c:	2100      	movs	r1, #0
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 f968 	bl	8007ee4 <USB_SetDevSpeed>
 8007c14:	e008      	b.n	8007c28 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007c16:	2101      	movs	r1, #1
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 f963 	bl	8007ee4 <USB_SetDevSpeed>
 8007c1e:	e003      	b.n	8007c28 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007c20:	2103      	movs	r1, #3
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 f95e 	bl	8007ee4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007c28:	2110      	movs	r1, #16
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 f8fa 	bl	8007e24 <USB_FlushTxFifo>
 8007c30:	4603      	mov	r3, r0
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d001      	beq.n	8007c3a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 f924 	bl	8007e88 <USB_FlushRxFifo>
 8007c40:	4603      	mov	r3, r0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d001      	beq.n	8007c4a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c50:	461a      	mov	r2, r3
 8007c52:	2300      	movs	r3, #0
 8007c54:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	2300      	movs	r3, #0
 8007c60:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c68:	461a      	mov	r2, r3
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c6e:	2300      	movs	r3, #0
 8007c70:	613b      	str	r3, [r7, #16]
 8007c72:	e043      	b.n	8007cfc <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	015a      	lsls	r2, r3, #5
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007c86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c8a:	d118      	bne.n	8007cbe <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d10a      	bne.n	8007ca8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	015a      	lsls	r2, r3, #5
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	4413      	add	r3, r2
 8007c9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007ca4:	6013      	str	r3, [r2, #0]
 8007ca6:	e013      	b.n	8007cd0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	015a      	lsls	r2, r3, #5
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	4413      	add	r3, r2
 8007cb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007cba:	6013      	str	r3, [r2, #0]
 8007cbc:	e008      	b.n	8007cd0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	015a      	lsls	r2, r3, #5
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	4413      	add	r3, r2
 8007cc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cca:	461a      	mov	r2, r3
 8007ccc:	2300      	movs	r3, #0
 8007cce:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	015a      	lsls	r2, r3, #5
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	4413      	add	r3, r2
 8007cd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cdc:	461a      	mov	r2, r3
 8007cde:	2300      	movs	r3, #0
 8007ce0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	015a      	lsls	r2, r3, #5
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	4413      	add	r3, r2
 8007cea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cee:	461a      	mov	r2, r3
 8007cf0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007cf4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	3301      	adds	r3, #1
 8007cfa:	613b      	str	r3, [r7, #16]
 8007cfc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007d00:	461a      	mov	r2, r3
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d3b5      	bcc.n	8007c74 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d08:	2300      	movs	r3, #0
 8007d0a:	613b      	str	r3, [r7, #16]
 8007d0c:	e043      	b.n	8007d96 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	015a      	lsls	r2, r3, #5
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	4413      	add	r3, r2
 8007d16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007d20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d24:	d118      	bne.n	8007d58 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d10a      	bne.n	8007d42 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	015a      	lsls	r2, r3, #5
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	4413      	add	r3, r2
 8007d34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d38:	461a      	mov	r2, r3
 8007d3a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007d3e:	6013      	str	r3, [r2, #0]
 8007d40:	e013      	b.n	8007d6a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	015a      	lsls	r2, r3, #5
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	4413      	add	r3, r2
 8007d4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d4e:	461a      	mov	r2, r3
 8007d50:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007d54:	6013      	str	r3, [r2, #0]
 8007d56:	e008      	b.n	8007d6a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	015a      	lsls	r2, r3, #5
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	4413      	add	r3, r2
 8007d60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d64:	461a      	mov	r2, r3
 8007d66:	2300      	movs	r3, #0
 8007d68:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	015a      	lsls	r2, r3, #5
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	4413      	add	r3, r2
 8007d72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d76:	461a      	mov	r2, r3
 8007d78:	2300      	movs	r3, #0
 8007d7a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	015a      	lsls	r2, r3, #5
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	4413      	add	r3, r2
 8007d84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d88:	461a      	mov	r2, r3
 8007d8a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007d8e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	3301      	adds	r3, #1
 8007d94:	613b      	str	r3, [r7, #16]
 8007d96:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d3b5      	bcc.n	8007d0e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007da8:	691b      	ldr	r3, [r3, #16]
 8007daa:	68fa      	ldr	r2, [r7, #12]
 8007dac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007db0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007db4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2200      	movs	r2, #0
 8007dba:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007dc2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007dc4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d105      	bne.n	8007dd8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	699b      	ldr	r3, [r3, #24]
 8007dd0:	f043 0210 	orr.w	r2, r3, #16
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	699a      	ldr	r2, [r3, #24]
 8007ddc:	4b10      	ldr	r3, [pc, #64]	@ (8007e20 <USB_DevInit+0x2b8>)
 8007dde:	4313      	orrs	r3, r2
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007de4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d005      	beq.n	8007df8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	699b      	ldr	r3, [r3, #24]
 8007df0:	f043 0208 	orr.w	r2, r3, #8
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007df8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d107      	bne.n	8007e10 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	699b      	ldr	r3, [r3, #24]
 8007e04:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007e08:	f043 0304 	orr.w	r3, r3, #4
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3718      	adds	r7, #24
 8007e16:	46bd      	mov	sp, r7
 8007e18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e1c:	b004      	add	sp, #16
 8007e1e:	4770      	bx	lr
 8007e20:	803c3800 	.word	0x803c3800

08007e24 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b085      	sub	sp, #20
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	3301      	adds	r3, #1
 8007e36:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e3e:	d901      	bls.n	8007e44 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007e40:	2303      	movs	r3, #3
 8007e42:	e01b      	b.n	8007e7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	691b      	ldr	r3, [r3, #16]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	daf2      	bge.n	8007e32 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	019b      	lsls	r3, r3, #6
 8007e54:	f043 0220 	orr.w	r2, r3, #32
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	3301      	adds	r3, #1
 8007e60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e68:	d901      	bls.n	8007e6e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007e6a:	2303      	movs	r3, #3
 8007e6c:	e006      	b.n	8007e7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	691b      	ldr	r3, [r3, #16]
 8007e72:	f003 0320 	and.w	r3, r3, #32
 8007e76:	2b20      	cmp	r3, #32
 8007e78:	d0f0      	beq.n	8007e5c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007e7a:	2300      	movs	r3, #0
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3714      	adds	r7, #20
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b085      	sub	sp, #20
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e90:	2300      	movs	r3, #0
 8007e92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	3301      	adds	r3, #1
 8007e98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ea0:	d901      	bls.n	8007ea6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007ea2:	2303      	movs	r3, #3
 8007ea4:	e018      	b.n	8007ed8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	daf2      	bge.n	8007e94 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2210      	movs	r2, #16
 8007eb6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	3301      	adds	r3, #1
 8007ebc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ec4:	d901      	bls.n	8007eca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	e006      	b.n	8007ed8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	f003 0310 	and.w	r3, r3, #16
 8007ed2:	2b10      	cmp	r3, #16
 8007ed4:	d0f0      	beq.n	8007eb8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3714      	adds	r7, #20
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b085      	sub	sp, #20
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	460b      	mov	r3, r1
 8007eee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	78fb      	ldrb	r3, [r7, #3]
 8007efe:	68f9      	ldr	r1, [r7, #12]
 8007f00:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007f04:	4313      	orrs	r3, r2
 8007f06:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007f08:	2300      	movs	r3, #0
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3714      	adds	r7, #20
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr

08007f16 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007f16:	b480      	push	{r7}
 8007f18:	b087      	sub	sp, #28
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	f003 0306 	and.w	r3, r3, #6
 8007f2e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d102      	bne.n	8007f3c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007f36:	2300      	movs	r3, #0
 8007f38:	75fb      	strb	r3, [r7, #23]
 8007f3a:	e00a      	b.n	8007f52 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2b02      	cmp	r3, #2
 8007f40:	d002      	beq.n	8007f48 <USB_GetDevSpeed+0x32>
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2b06      	cmp	r3, #6
 8007f46:	d102      	bne.n	8007f4e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007f48:	2302      	movs	r3, #2
 8007f4a:	75fb      	strb	r3, [r7, #23]
 8007f4c:	e001      	b.n	8007f52 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007f4e:	230f      	movs	r3, #15
 8007f50:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007f52:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	371c      	adds	r7, #28
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b085      	sub	sp, #20
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	785b      	ldrb	r3, [r3, #1]
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d13a      	bne.n	8007ff2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f82:	69da      	ldr	r2, [r3, #28]
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	f003 030f 	and.w	r3, r3, #15
 8007f8c:	2101      	movs	r1, #1
 8007f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	68f9      	ldr	r1, [r7, #12]
 8007f96:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	015a      	lsls	r2, r3, #5
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	4413      	add	r3, r2
 8007fa6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d155      	bne.n	8008060 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	015a      	lsls	r2, r3, #5
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	4413      	add	r3, r2
 8007fbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	791b      	ldrb	r3, [r3, #4]
 8007fce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007fd0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	059b      	lsls	r3, r3, #22
 8007fd6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	68ba      	ldr	r2, [r7, #8]
 8007fdc:	0151      	lsls	r1, r2, #5
 8007fde:	68fa      	ldr	r2, [r7, #12]
 8007fe0:	440a      	add	r2, r1
 8007fe2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007fe6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007fea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fee:	6013      	str	r3, [r2, #0]
 8007ff0:	e036      	b.n	8008060 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ff8:	69da      	ldr	r2, [r3, #28]
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	f003 030f 	and.w	r3, r3, #15
 8008002:	2101      	movs	r1, #1
 8008004:	fa01 f303 	lsl.w	r3, r1, r3
 8008008:	041b      	lsls	r3, r3, #16
 800800a:	68f9      	ldr	r1, [r7, #12]
 800800c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008010:	4313      	orrs	r3, r2
 8008012:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	015a      	lsls	r2, r3, #5
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	4413      	add	r3, r2
 800801c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008026:	2b00      	cmp	r3, #0
 8008028:	d11a      	bne.n	8008060 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	015a      	lsls	r2, r3, #5
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	4413      	add	r3, r2
 8008032:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	791b      	ldrb	r3, [r3, #4]
 8008044:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008046:	430b      	orrs	r3, r1
 8008048:	4313      	orrs	r3, r2
 800804a:	68ba      	ldr	r2, [r7, #8]
 800804c:	0151      	lsls	r1, r2, #5
 800804e:	68fa      	ldr	r2, [r7, #12]
 8008050:	440a      	add	r2, r1
 8008052:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008056:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800805a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800805e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3714      	adds	r7, #20
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr
	...

08008070 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008070:	b480      	push	{r7}
 8008072:	b085      	sub	sp, #20
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	785b      	ldrb	r3, [r3, #1]
 8008088:	2b01      	cmp	r3, #1
 800808a:	d161      	bne.n	8008150 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	015a      	lsls	r2, r3, #5
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	4413      	add	r3, r2
 8008094:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800809e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80080a2:	d11f      	bne.n	80080e4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	015a      	lsls	r2, r3, #5
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	4413      	add	r3, r2
 80080ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	68ba      	ldr	r2, [r7, #8]
 80080b4:	0151      	lsls	r1, r2, #5
 80080b6:	68fa      	ldr	r2, [r7, #12]
 80080b8:	440a      	add	r2, r1
 80080ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080be:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80080c2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	015a      	lsls	r2, r3, #5
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	4413      	add	r3, r2
 80080cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	68ba      	ldr	r2, [r7, #8]
 80080d4:	0151      	lsls	r1, r2, #5
 80080d6:	68fa      	ldr	r2, [r7, #12]
 80080d8:	440a      	add	r2, r1
 80080da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080de:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80080e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	f003 030f 	and.w	r3, r3, #15
 80080f4:	2101      	movs	r1, #1
 80080f6:	fa01 f303 	lsl.w	r3, r1, r3
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	43db      	mvns	r3, r3
 80080fe:	68f9      	ldr	r1, [r7, #12]
 8008100:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008104:	4013      	ands	r3, r2
 8008106:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800810e:	69da      	ldr	r2, [r3, #28]
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	f003 030f 	and.w	r3, r3, #15
 8008118:	2101      	movs	r1, #1
 800811a:	fa01 f303 	lsl.w	r3, r1, r3
 800811e:	b29b      	uxth	r3, r3
 8008120:	43db      	mvns	r3, r3
 8008122:	68f9      	ldr	r1, [r7, #12]
 8008124:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008128:	4013      	ands	r3, r2
 800812a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	015a      	lsls	r2, r3, #5
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	4413      	add	r3, r2
 8008134:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	0159      	lsls	r1, r3, #5
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	440b      	add	r3, r1
 8008142:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008146:	4619      	mov	r1, r3
 8008148:	4b35      	ldr	r3, [pc, #212]	@ (8008220 <USB_DeactivateEndpoint+0x1b0>)
 800814a:	4013      	ands	r3, r2
 800814c:	600b      	str	r3, [r1, #0]
 800814e:	e060      	b.n	8008212 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	015a      	lsls	r2, r3, #5
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	4413      	add	r3, r2
 8008158:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008162:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008166:	d11f      	bne.n	80081a8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	015a      	lsls	r2, r3, #5
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	4413      	add	r3, r2
 8008170:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	68ba      	ldr	r2, [r7, #8]
 8008178:	0151      	lsls	r1, r2, #5
 800817a:	68fa      	ldr	r2, [r7, #12]
 800817c:	440a      	add	r2, r1
 800817e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008182:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008186:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	015a      	lsls	r2, r3, #5
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	4413      	add	r3, r2
 8008190:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	68ba      	ldr	r2, [r7, #8]
 8008198:	0151      	lsls	r1, r2, #5
 800819a:	68fa      	ldr	r2, [r7, #12]
 800819c:	440a      	add	r2, r1
 800819e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80081a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80081a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	f003 030f 	and.w	r3, r3, #15
 80081b8:	2101      	movs	r1, #1
 80081ba:	fa01 f303 	lsl.w	r3, r1, r3
 80081be:	041b      	lsls	r3, r3, #16
 80081c0:	43db      	mvns	r3, r3
 80081c2:	68f9      	ldr	r1, [r7, #12]
 80081c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80081c8:	4013      	ands	r3, r2
 80081ca:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081d2:	69da      	ldr	r2, [r3, #28]
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	f003 030f 	and.w	r3, r3, #15
 80081dc:	2101      	movs	r1, #1
 80081de:	fa01 f303 	lsl.w	r3, r1, r3
 80081e2:	041b      	lsls	r3, r3, #16
 80081e4:	43db      	mvns	r3, r3
 80081e6:	68f9      	ldr	r1, [r7, #12]
 80081e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80081ec:	4013      	ands	r3, r2
 80081ee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	015a      	lsls	r2, r3, #5
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	4413      	add	r3, r2
 80081f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	0159      	lsls	r1, r3, #5
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	440b      	add	r3, r1
 8008206:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800820a:	4619      	mov	r1, r3
 800820c:	4b05      	ldr	r3, [pc, #20]	@ (8008224 <USB_DeactivateEndpoint+0x1b4>)
 800820e:	4013      	ands	r3, r2
 8008210:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008212:	2300      	movs	r3, #0
}
 8008214:	4618      	mov	r0, r3
 8008216:	3714      	adds	r7, #20
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr
 8008220:	ec337800 	.word	0xec337800
 8008224:	eff37800 	.word	0xeff37800

08008228 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b08a      	sub	sp, #40	@ 0x28
 800822c:	af02      	add	r7, sp, #8
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	4613      	mov	r3, r2
 8008234:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	785b      	ldrb	r3, [r3, #1]
 8008244:	2b01      	cmp	r3, #1
 8008246:	f040 817f 	bne.w	8008548 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	691b      	ldr	r3, [r3, #16]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d132      	bne.n	80082b8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008252:	69bb      	ldr	r3, [r7, #24]
 8008254:	015a      	lsls	r2, r3, #5
 8008256:	69fb      	ldr	r3, [r7, #28]
 8008258:	4413      	add	r3, r2
 800825a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800825e:	691b      	ldr	r3, [r3, #16]
 8008260:	69ba      	ldr	r2, [r7, #24]
 8008262:	0151      	lsls	r1, r2, #5
 8008264:	69fa      	ldr	r2, [r7, #28]
 8008266:	440a      	add	r2, r1
 8008268:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800826c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008270:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008274:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	015a      	lsls	r2, r3, #5
 800827a:	69fb      	ldr	r3, [r7, #28]
 800827c:	4413      	add	r3, r2
 800827e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008282:	691b      	ldr	r3, [r3, #16]
 8008284:	69ba      	ldr	r2, [r7, #24]
 8008286:	0151      	lsls	r1, r2, #5
 8008288:	69fa      	ldr	r2, [r7, #28]
 800828a:	440a      	add	r2, r1
 800828c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008290:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008294:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008296:	69bb      	ldr	r3, [r7, #24]
 8008298:	015a      	lsls	r2, r3, #5
 800829a:	69fb      	ldr	r3, [r7, #28]
 800829c:	4413      	add	r3, r2
 800829e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082a2:	691b      	ldr	r3, [r3, #16]
 80082a4:	69ba      	ldr	r2, [r7, #24]
 80082a6:	0151      	lsls	r1, r2, #5
 80082a8:	69fa      	ldr	r2, [r7, #28]
 80082aa:	440a      	add	r2, r1
 80082ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082b0:	0cdb      	lsrs	r3, r3, #19
 80082b2:	04db      	lsls	r3, r3, #19
 80082b4:	6113      	str	r3, [r2, #16]
 80082b6:	e097      	b.n	80083e8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80082b8:	69bb      	ldr	r3, [r7, #24]
 80082ba:	015a      	lsls	r2, r3, #5
 80082bc:	69fb      	ldr	r3, [r7, #28]
 80082be:	4413      	add	r3, r2
 80082c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082c4:	691b      	ldr	r3, [r3, #16]
 80082c6:	69ba      	ldr	r2, [r7, #24]
 80082c8:	0151      	lsls	r1, r2, #5
 80082ca:	69fa      	ldr	r2, [r7, #28]
 80082cc:	440a      	add	r2, r1
 80082ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082d2:	0cdb      	lsrs	r3, r3, #19
 80082d4:	04db      	lsls	r3, r3, #19
 80082d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80082d8:	69bb      	ldr	r3, [r7, #24]
 80082da:	015a      	lsls	r2, r3, #5
 80082dc:	69fb      	ldr	r3, [r7, #28]
 80082de:	4413      	add	r3, r2
 80082e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082e4:	691b      	ldr	r3, [r3, #16]
 80082e6:	69ba      	ldr	r2, [r7, #24]
 80082e8:	0151      	lsls	r1, r2, #5
 80082ea:	69fa      	ldr	r2, [r7, #28]
 80082ec:	440a      	add	r2, r1
 80082ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082f2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80082f6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80082fa:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80082fc:	69bb      	ldr	r3, [r7, #24]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d11a      	bne.n	8008338 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	691a      	ldr	r2, [r3, #16]
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	429a      	cmp	r2, r3
 800830c:	d903      	bls.n	8008316 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	689a      	ldr	r2, [r3, #8]
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	015a      	lsls	r2, r3, #5
 800831a:	69fb      	ldr	r3, [r7, #28]
 800831c:	4413      	add	r3, r2
 800831e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008322:	691b      	ldr	r3, [r3, #16]
 8008324:	69ba      	ldr	r2, [r7, #24]
 8008326:	0151      	lsls	r1, r2, #5
 8008328:	69fa      	ldr	r2, [r7, #28]
 800832a:	440a      	add	r2, r1
 800832c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008330:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008334:	6113      	str	r3, [r2, #16]
 8008336:	e044      	b.n	80083c2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	691a      	ldr	r2, [r3, #16]
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	4413      	add	r3, r2
 8008342:	1e5a      	subs	r2, r3, #1
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	fbb2 f3f3 	udiv	r3, r2, r3
 800834c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800834e:	69bb      	ldr	r3, [r7, #24]
 8008350:	015a      	lsls	r2, r3, #5
 8008352:	69fb      	ldr	r3, [r7, #28]
 8008354:	4413      	add	r3, r2
 8008356:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800835a:	691a      	ldr	r2, [r3, #16]
 800835c:	8afb      	ldrh	r3, [r7, #22]
 800835e:	04d9      	lsls	r1, r3, #19
 8008360:	4ba4      	ldr	r3, [pc, #656]	@ (80085f4 <USB_EPStartXfer+0x3cc>)
 8008362:	400b      	ands	r3, r1
 8008364:	69b9      	ldr	r1, [r7, #24]
 8008366:	0148      	lsls	r0, r1, #5
 8008368:	69f9      	ldr	r1, [r7, #28]
 800836a:	4401      	add	r1, r0
 800836c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008370:	4313      	orrs	r3, r2
 8008372:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	791b      	ldrb	r3, [r3, #4]
 8008378:	2b01      	cmp	r3, #1
 800837a:	d122      	bne.n	80083c2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800837c:	69bb      	ldr	r3, [r7, #24]
 800837e:	015a      	lsls	r2, r3, #5
 8008380:	69fb      	ldr	r3, [r7, #28]
 8008382:	4413      	add	r3, r2
 8008384:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008388:	691b      	ldr	r3, [r3, #16]
 800838a:	69ba      	ldr	r2, [r7, #24]
 800838c:	0151      	lsls	r1, r2, #5
 800838e:	69fa      	ldr	r2, [r7, #28]
 8008390:	440a      	add	r2, r1
 8008392:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008396:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800839a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800839c:	69bb      	ldr	r3, [r7, #24]
 800839e:	015a      	lsls	r2, r3, #5
 80083a0:	69fb      	ldr	r3, [r7, #28]
 80083a2:	4413      	add	r3, r2
 80083a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083a8:	691a      	ldr	r2, [r3, #16]
 80083aa:	8afb      	ldrh	r3, [r7, #22]
 80083ac:	075b      	lsls	r3, r3, #29
 80083ae:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80083b2:	69b9      	ldr	r1, [r7, #24]
 80083b4:	0148      	lsls	r0, r1, #5
 80083b6:	69f9      	ldr	r1, [r7, #28]
 80083b8:	4401      	add	r1, r0
 80083ba:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80083be:	4313      	orrs	r3, r2
 80083c0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	015a      	lsls	r2, r3, #5
 80083c6:	69fb      	ldr	r3, [r7, #28]
 80083c8:	4413      	add	r3, r2
 80083ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083ce:	691a      	ldr	r2, [r3, #16]
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	691b      	ldr	r3, [r3, #16]
 80083d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083d8:	69b9      	ldr	r1, [r7, #24]
 80083da:	0148      	lsls	r0, r1, #5
 80083dc:	69f9      	ldr	r1, [r7, #28]
 80083de:	4401      	add	r1, r0
 80083e0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80083e4:	4313      	orrs	r3, r2
 80083e6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80083e8:	79fb      	ldrb	r3, [r7, #7]
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d14b      	bne.n	8008486 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	69db      	ldr	r3, [r3, #28]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d009      	beq.n	800840a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80083f6:	69bb      	ldr	r3, [r7, #24]
 80083f8:	015a      	lsls	r2, r3, #5
 80083fa:	69fb      	ldr	r3, [r7, #28]
 80083fc:	4413      	add	r3, r2
 80083fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008402:	461a      	mov	r2, r3
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	69db      	ldr	r3, [r3, #28]
 8008408:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	791b      	ldrb	r3, [r3, #4]
 800840e:	2b01      	cmp	r3, #1
 8008410:	d128      	bne.n	8008464 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008412:	69fb      	ldr	r3, [r7, #28]
 8008414:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008418:	689b      	ldr	r3, [r3, #8]
 800841a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800841e:	2b00      	cmp	r3, #0
 8008420:	d110      	bne.n	8008444 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008422:	69bb      	ldr	r3, [r7, #24]
 8008424:	015a      	lsls	r2, r3, #5
 8008426:	69fb      	ldr	r3, [r7, #28]
 8008428:	4413      	add	r3, r2
 800842a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	69ba      	ldr	r2, [r7, #24]
 8008432:	0151      	lsls	r1, r2, #5
 8008434:	69fa      	ldr	r2, [r7, #28]
 8008436:	440a      	add	r2, r1
 8008438:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800843c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008440:	6013      	str	r3, [r2, #0]
 8008442:	e00f      	b.n	8008464 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008444:	69bb      	ldr	r3, [r7, #24]
 8008446:	015a      	lsls	r2, r3, #5
 8008448:	69fb      	ldr	r3, [r7, #28]
 800844a:	4413      	add	r3, r2
 800844c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	69ba      	ldr	r2, [r7, #24]
 8008454:	0151      	lsls	r1, r2, #5
 8008456:	69fa      	ldr	r2, [r7, #28]
 8008458:	440a      	add	r2, r1
 800845a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800845e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008462:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008464:	69bb      	ldr	r3, [r7, #24]
 8008466:	015a      	lsls	r2, r3, #5
 8008468:	69fb      	ldr	r3, [r7, #28]
 800846a:	4413      	add	r3, r2
 800846c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	69ba      	ldr	r2, [r7, #24]
 8008474:	0151      	lsls	r1, r2, #5
 8008476:	69fa      	ldr	r2, [r7, #28]
 8008478:	440a      	add	r2, r1
 800847a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800847e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008482:	6013      	str	r3, [r2, #0]
 8008484:	e166      	b.n	8008754 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008486:	69bb      	ldr	r3, [r7, #24]
 8008488:	015a      	lsls	r2, r3, #5
 800848a:	69fb      	ldr	r3, [r7, #28]
 800848c:	4413      	add	r3, r2
 800848e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	69ba      	ldr	r2, [r7, #24]
 8008496:	0151      	lsls	r1, r2, #5
 8008498:	69fa      	ldr	r2, [r7, #28]
 800849a:	440a      	add	r2, r1
 800849c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084a0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80084a4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	791b      	ldrb	r3, [r3, #4]
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d015      	beq.n	80084da <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	691b      	ldr	r3, [r3, #16]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	f000 814e 	beq.w	8008754 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80084b8:	69fb      	ldr	r3, [r7, #28]
 80084ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	f003 030f 	and.w	r3, r3, #15
 80084c8:	2101      	movs	r1, #1
 80084ca:	fa01 f303 	lsl.w	r3, r1, r3
 80084ce:	69f9      	ldr	r1, [r7, #28]
 80084d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80084d4:	4313      	orrs	r3, r2
 80084d6:	634b      	str	r3, [r1, #52]	@ 0x34
 80084d8:	e13c      	b.n	8008754 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80084da:	69fb      	ldr	r3, [r7, #28]
 80084dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d110      	bne.n	800850c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80084ea:	69bb      	ldr	r3, [r7, #24]
 80084ec:	015a      	lsls	r2, r3, #5
 80084ee:	69fb      	ldr	r3, [r7, #28]
 80084f0:	4413      	add	r3, r2
 80084f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	69ba      	ldr	r2, [r7, #24]
 80084fa:	0151      	lsls	r1, r2, #5
 80084fc:	69fa      	ldr	r2, [r7, #28]
 80084fe:	440a      	add	r2, r1
 8008500:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008504:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008508:	6013      	str	r3, [r2, #0]
 800850a:	e00f      	b.n	800852c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800850c:	69bb      	ldr	r3, [r7, #24]
 800850e:	015a      	lsls	r2, r3, #5
 8008510:	69fb      	ldr	r3, [r7, #28]
 8008512:	4413      	add	r3, r2
 8008514:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	69ba      	ldr	r2, [r7, #24]
 800851c:	0151      	lsls	r1, r2, #5
 800851e:	69fa      	ldr	r2, [r7, #28]
 8008520:	440a      	add	r2, r1
 8008522:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008526:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800852a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	68d9      	ldr	r1, [r3, #12]
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	781a      	ldrb	r2, [r3, #0]
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	691b      	ldr	r3, [r3, #16]
 8008538:	b298      	uxth	r0, r3
 800853a:	79fb      	ldrb	r3, [r7, #7]
 800853c:	9300      	str	r3, [sp, #0]
 800853e:	4603      	mov	r3, r0
 8008540:	68f8      	ldr	r0, [r7, #12]
 8008542:	f000 f9b9 	bl	80088b8 <USB_WritePacket>
 8008546:	e105      	b.n	8008754 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008548:	69bb      	ldr	r3, [r7, #24]
 800854a:	015a      	lsls	r2, r3, #5
 800854c:	69fb      	ldr	r3, [r7, #28]
 800854e:	4413      	add	r3, r2
 8008550:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008554:	691b      	ldr	r3, [r3, #16]
 8008556:	69ba      	ldr	r2, [r7, #24]
 8008558:	0151      	lsls	r1, r2, #5
 800855a:	69fa      	ldr	r2, [r7, #28]
 800855c:	440a      	add	r2, r1
 800855e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008562:	0cdb      	lsrs	r3, r3, #19
 8008564:	04db      	lsls	r3, r3, #19
 8008566:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008568:	69bb      	ldr	r3, [r7, #24]
 800856a:	015a      	lsls	r2, r3, #5
 800856c:	69fb      	ldr	r3, [r7, #28]
 800856e:	4413      	add	r3, r2
 8008570:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008574:	691b      	ldr	r3, [r3, #16]
 8008576:	69ba      	ldr	r2, [r7, #24]
 8008578:	0151      	lsls	r1, r2, #5
 800857a:	69fa      	ldr	r2, [r7, #28]
 800857c:	440a      	add	r2, r1
 800857e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008582:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008586:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800858a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800858c:	69bb      	ldr	r3, [r7, #24]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d132      	bne.n	80085f8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	691b      	ldr	r3, [r3, #16]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d003      	beq.n	80085a2 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	689a      	ldr	r2, [r3, #8]
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	689a      	ldr	r2, [r3, #8]
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80085aa:	69bb      	ldr	r3, [r7, #24]
 80085ac:	015a      	lsls	r2, r3, #5
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	4413      	add	r3, r2
 80085b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085b6:	691a      	ldr	r2, [r3, #16]
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	6a1b      	ldr	r3, [r3, #32]
 80085bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085c0:	69b9      	ldr	r1, [r7, #24]
 80085c2:	0148      	lsls	r0, r1, #5
 80085c4:	69f9      	ldr	r1, [r7, #28]
 80085c6:	4401      	add	r1, r0
 80085c8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80085cc:	4313      	orrs	r3, r2
 80085ce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80085d0:	69bb      	ldr	r3, [r7, #24]
 80085d2:	015a      	lsls	r2, r3, #5
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	4413      	add	r3, r2
 80085d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085dc:	691b      	ldr	r3, [r3, #16]
 80085de:	69ba      	ldr	r2, [r7, #24]
 80085e0:	0151      	lsls	r1, r2, #5
 80085e2:	69fa      	ldr	r2, [r7, #28]
 80085e4:	440a      	add	r2, r1
 80085e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085ea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80085ee:	6113      	str	r3, [r2, #16]
 80085f0:	e062      	b.n	80086b8 <USB_EPStartXfer+0x490>
 80085f2:	bf00      	nop
 80085f4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	691b      	ldr	r3, [r3, #16]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d123      	bne.n	8008648 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	015a      	lsls	r2, r3, #5
 8008604:	69fb      	ldr	r3, [r7, #28]
 8008606:	4413      	add	r3, r2
 8008608:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800860c:	691a      	ldr	r2, [r3, #16]
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	689b      	ldr	r3, [r3, #8]
 8008612:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008616:	69b9      	ldr	r1, [r7, #24]
 8008618:	0148      	lsls	r0, r1, #5
 800861a:	69f9      	ldr	r1, [r7, #28]
 800861c:	4401      	add	r1, r0
 800861e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008622:	4313      	orrs	r3, r2
 8008624:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008626:	69bb      	ldr	r3, [r7, #24]
 8008628:	015a      	lsls	r2, r3, #5
 800862a:	69fb      	ldr	r3, [r7, #28]
 800862c:	4413      	add	r3, r2
 800862e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008632:	691b      	ldr	r3, [r3, #16]
 8008634:	69ba      	ldr	r2, [r7, #24]
 8008636:	0151      	lsls	r1, r2, #5
 8008638:	69fa      	ldr	r2, [r7, #28]
 800863a:	440a      	add	r2, r1
 800863c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008640:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008644:	6113      	str	r3, [r2, #16]
 8008646:	e037      	b.n	80086b8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	691a      	ldr	r2, [r3, #16]
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	4413      	add	r3, r2
 8008652:	1e5a      	subs	r2, r3, #1
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	689b      	ldr	r3, [r3, #8]
 8008658:	fbb2 f3f3 	udiv	r3, r2, r3
 800865c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	689b      	ldr	r3, [r3, #8]
 8008662:	8afa      	ldrh	r2, [r7, #22]
 8008664:	fb03 f202 	mul.w	r2, r3, r2
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800866c:	69bb      	ldr	r3, [r7, #24]
 800866e:	015a      	lsls	r2, r3, #5
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	4413      	add	r3, r2
 8008674:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008678:	691a      	ldr	r2, [r3, #16]
 800867a:	8afb      	ldrh	r3, [r7, #22]
 800867c:	04d9      	lsls	r1, r3, #19
 800867e:	4b38      	ldr	r3, [pc, #224]	@ (8008760 <USB_EPStartXfer+0x538>)
 8008680:	400b      	ands	r3, r1
 8008682:	69b9      	ldr	r1, [r7, #24]
 8008684:	0148      	lsls	r0, r1, #5
 8008686:	69f9      	ldr	r1, [r7, #28]
 8008688:	4401      	add	r1, r0
 800868a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800868e:	4313      	orrs	r3, r2
 8008690:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008692:	69bb      	ldr	r3, [r7, #24]
 8008694:	015a      	lsls	r2, r3, #5
 8008696:	69fb      	ldr	r3, [r7, #28]
 8008698:	4413      	add	r3, r2
 800869a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800869e:	691a      	ldr	r2, [r3, #16]
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	6a1b      	ldr	r3, [r3, #32]
 80086a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80086a8:	69b9      	ldr	r1, [r7, #24]
 80086aa:	0148      	lsls	r0, r1, #5
 80086ac:	69f9      	ldr	r1, [r7, #28]
 80086ae:	4401      	add	r1, r0
 80086b0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80086b4:	4313      	orrs	r3, r2
 80086b6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80086b8:	79fb      	ldrb	r3, [r7, #7]
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d10d      	bne.n	80086da <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	68db      	ldr	r3, [r3, #12]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d009      	beq.n	80086da <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	68d9      	ldr	r1, [r3, #12]
 80086ca:	69bb      	ldr	r3, [r7, #24]
 80086cc:	015a      	lsls	r2, r3, #5
 80086ce:	69fb      	ldr	r3, [r7, #28]
 80086d0:	4413      	add	r3, r2
 80086d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086d6:	460a      	mov	r2, r1
 80086d8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	791b      	ldrb	r3, [r3, #4]
 80086de:	2b01      	cmp	r3, #1
 80086e0:	d128      	bne.n	8008734 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80086e2:	69fb      	ldr	r3, [r7, #28]
 80086e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d110      	bne.n	8008714 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80086f2:	69bb      	ldr	r3, [r7, #24]
 80086f4:	015a      	lsls	r2, r3, #5
 80086f6:	69fb      	ldr	r3, [r7, #28]
 80086f8:	4413      	add	r3, r2
 80086fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	69ba      	ldr	r2, [r7, #24]
 8008702:	0151      	lsls	r1, r2, #5
 8008704:	69fa      	ldr	r2, [r7, #28]
 8008706:	440a      	add	r2, r1
 8008708:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800870c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008710:	6013      	str	r3, [r2, #0]
 8008712:	e00f      	b.n	8008734 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008714:	69bb      	ldr	r3, [r7, #24]
 8008716:	015a      	lsls	r2, r3, #5
 8008718:	69fb      	ldr	r3, [r7, #28]
 800871a:	4413      	add	r3, r2
 800871c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	69ba      	ldr	r2, [r7, #24]
 8008724:	0151      	lsls	r1, r2, #5
 8008726:	69fa      	ldr	r2, [r7, #28]
 8008728:	440a      	add	r2, r1
 800872a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800872e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008732:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008734:	69bb      	ldr	r3, [r7, #24]
 8008736:	015a      	lsls	r2, r3, #5
 8008738:	69fb      	ldr	r3, [r7, #28]
 800873a:	4413      	add	r3, r2
 800873c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	69ba      	ldr	r2, [r7, #24]
 8008744:	0151      	lsls	r1, r2, #5
 8008746:	69fa      	ldr	r2, [r7, #28]
 8008748:	440a      	add	r2, r1
 800874a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800874e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008752:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008754:	2300      	movs	r3, #0
}
 8008756:	4618      	mov	r0, r3
 8008758:	3720      	adds	r7, #32
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
 800875e:	bf00      	nop
 8008760:	1ff80000 	.word	0x1ff80000

08008764 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008764:	b480      	push	{r7}
 8008766:	b087      	sub	sp, #28
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800876e:	2300      	movs	r3, #0
 8008770:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008772:	2300      	movs	r3, #0
 8008774:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	785b      	ldrb	r3, [r3, #1]
 800877e:	2b01      	cmp	r3, #1
 8008780:	d14a      	bne.n	8008818 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	015a      	lsls	r2, r3, #5
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	4413      	add	r3, r2
 800878c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008796:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800879a:	f040 8086 	bne.w	80088aa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	015a      	lsls	r2, r3, #5
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	4413      	add	r3, r2
 80087a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	683a      	ldr	r2, [r7, #0]
 80087b0:	7812      	ldrb	r2, [r2, #0]
 80087b2:	0151      	lsls	r1, r2, #5
 80087b4:	693a      	ldr	r2, [r7, #16]
 80087b6:	440a      	add	r2, r1
 80087b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087bc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80087c0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	015a      	lsls	r2, r3, #5
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	4413      	add	r3, r2
 80087cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	683a      	ldr	r2, [r7, #0]
 80087d4:	7812      	ldrb	r2, [r2, #0]
 80087d6:	0151      	lsls	r1, r2, #5
 80087d8:	693a      	ldr	r2, [r7, #16]
 80087da:	440a      	add	r2, r1
 80087dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80087e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	3301      	adds	r3, #1
 80087ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f242 7210 	movw	r2, #10000	@ 0x2710
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d902      	bls.n	80087fc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80087f6:	2301      	movs	r3, #1
 80087f8:	75fb      	strb	r3, [r7, #23]
          break;
 80087fa:	e056      	b.n	80088aa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	015a      	lsls	r2, r3, #5
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	4413      	add	r3, r2
 8008806:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008810:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008814:	d0e7      	beq.n	80087e6 <USB_EPStopXfer+0x82>
 8008816:	e048      	b.n	80088aa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	015a      	lsls	r2, r3, #5
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	4413      	add	r3, r2
 8008822:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800882c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008830:	d13b      	bne.n	80088aa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	015a      	lsls	r2, r3, #5
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	4413      	add	r3, r2
 800883c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	683a      	ldr	r2, [r7, #0]
 8008844:	7812      	ldrb	r2, [r2, #0]
 8008846:	0151      	lsls	r1, r2, #5
 8008848:	693a      	ldr	r2, [r7, #16]
 800884a:	440a      	add	r2, r1
 800884c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008850:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008854:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	015a      	lsls	r2, r3, #5
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	4413      	add	r3, r2
 8008860:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	683a      	ldr	r2, [r7, #0]
 8008868:	7812      	ldrb	r2, [r2, #0]
 800886a:	0151      	lsls	r1, r2, #5
 800886c:	693a      	ldr	r2, [r7, #16]
 800886e:	440a      	add	r2, r1
 8008870:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008874:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008878:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	3301      	adds	r3, #1
 800887e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008886:	4293      	cmp	r3, r2
 8008888:	d902      	bls.n	8008890 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800888a:	2301      	movs	r3, #1
 800888c:	75fb      	strb	r3, [r7, #23]
          break;
 800888e:	e00c      	b.n	80088aa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	781b      	ldrb	r3, [r3, #0]
 8008894:	015a      	lsls	r2, r3, #5
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	4413      	add	r3, r2
 800889a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80088a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80088a8:	d0e7      	beq.n	800887a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80088aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	371c      	adds	r7, #28
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b089      	sub	sp, #36	@ 0x24
 80088bc:	af00      	add	r7, sp, #0
 80088be:	60f8      	str	r0, [r7, #12]
 80088c0:	60b9      	str	r1, [r7, #8]
 80088c2:	4611      	mov	r1, r2
 80088c4:	461a      	mov	r2, r3
 80088c6:	460b      	mov	r3, r1
 80088c8:	71fb      	strb	r3, [r7, #7]
 80088ca:	4613      	mov	r3, r2
 80088cc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80088d6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d123      	bne.n	8008926 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80088de:	88bb      	ldrh	r3, [r7, #4]
 80088e0:	3303      	adds	r3, #3
 80088e2:	089b      	lsrs	r3, r3, #2
 80088e4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80088e6:	2300      	movs	r3, #0
 80088e8:	61bb      	str	r3, [r7, #24]
 80088ea:	e018      	b.n	800891e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80088ec:	79fb      	ldrb	r3, [r7, #7]
 80088ee:	031a      	lsls	r2, r3, #12
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	4413      	add	r3, r2
 80088f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80088f8:	461a      	mov	r2, r3
 80088fa:	69fb      	ldr	r3, [r7, #28]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	3301      	adds	r3, #1
 8008904:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008906:	69fb      	ldr	r3, [r7, #28]
 8008908:	3301      	adds	r3, #1
 800890a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800890c:	69fb      	ldr	r3, [r7, #28]
 800890e:	3301      	adds	r3, #1
 8008910:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008912:	69fb      	ldr	r3, [r7, #28]
 8008914:	3301      	adds	r3, #1
 8008916:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008918:	69bb      	ldr	r3, [r7, #24]
 800891a:	3301      	adds	r3, #1
 800891c:	61bb      	str	r3, [r7, #24]
 800891e:	69ba      	ldr	r2, [r7, #24]
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	429a      	cmp	r2, r3
 8008924:	d3e2      	bcc.n	80088ec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008926:	2300      	movs	r3, #0
}
 8008928:	4618      	mov	r0, r3
 800892a:	3724      	adds	r7, #36	@ 0x24
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr

08008934 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008934:	b480      	push	{r7}
 8008936:	b08b      	sub	sp, #44	@ 0x2c
 8008938:	af00      	add	r7, sp, #0
 800893a:	60f8      	str	r0, [r7, #12]
 800893c:	60b9      	str	r1, [r7, #8]
 800893e:	4613      	mov	r3, r2
 8008940:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800894a:	88fb      	ldrh	r3, [r7, #6]
 800894c:	089b      	lsrs	r3, r3, #2
 800894e:	b29b      	uxth	r3, r3
 8008950:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008952:	88fb      	ldrh	r3, [r7, #6]
 8008954:	f003 0303 	and.w	r3, r3, #3
 8008958:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800895a:	2300      	movs	r3, #0
 800895c:	623b      	str	r3, [r7, #32]
 800895e:	e014      	b.n	800898a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008960:	69bb      	ldr	r3, [r7, #24]
 8008962:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800896a:	601a      	str	r2, [r3, #0]
    pDest++;
 800896c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800896e:	3301      	adds	r3, #1
 8008970:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008974:	3301      	adds	r3, #1
 8008976:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800897a:	3301      	adds	r3, #1
 800897c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800897e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008980:	3301      	adds	r3, #1
 8008982:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008984:	6a3b      	ldr	r3, [r7, #32]
 8008986:	3301      	adds	r3, #1
 8008988:	623b      	str	r3, [r7, #32]
 800898a:	6a3a      	ldr	r2, [r7, #32]
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	429a      	cmp	r2, r3
 8008990:	d3e6      	bcc.n	8008960 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008992:	8bfb      	ldrh	r3, [r7, #30]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d01e      	beq.n	80089d6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008998:	2300      	movs	r3, #0
 800899a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800899c:	69bb      	ldr	r3, [r7, #24]
 800899e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80089a2:	461a      	mov	r2, r3
 80089a4:	f107 0310 	add.w	r3, r7, #16
 80089a8:	6812      	ldr	r2, [r2, #0]
 80089aa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80089ac:	693a      	ldr	r2, [r7, #16]
 80089ae:	6a3b      	ldr	r3, [r7, #32]
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	00db      	lsls	r3, r3, #3
 80089b4:	fa22 f303 	lsr.w	r3, r2, r3
 80089b8:	b2da      	uxtb	r2, r3
 80089ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089bc:	701a      	strb	r2, [r3, #0]
      i++;
 80089be:	6a3b      	ldr	r3, [r7, #32]
 80089c0:	3301      	adds	r3, #1
 80089c2:	623b      	str	r3, [r7, #32]
      pDest++;
 80089c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089c6:	3301      	adds	r3, #1
 80089c8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80089ca:	8bfb      	ldrh	r3, [r7, #30]
 80089cc:	3b01      	subs	r3, #1
 80089ce:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80089d0:	8bfb      	ldrh	r3, [r7, #30]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d1ea      	bne.n	80089ac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80089d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80089d8:	4618      	mov	r0, r3
 80089da:	372c      	adds	r7, #44	@ 0x2c
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b085      	sub	sp, #20
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	785b      	ldrb	r3, [r3, #1]
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	d12c      	bne.n	8008a5a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	015a      	lsls	r2, r3, #5
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	4413      	add	r3, r2
 8008a08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	db12      	blt.n	8008a38 <USB_EPSetStall+0x54>
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d00f      	beq.n	8008a38 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	015a      	lsls	r2, r3, #5
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	4413      	add	r3, r2
 8008a20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	68ba      	ldr	r2, [r7, #8]
 8008a28:	0151      	lsls	r1, r2, #5
 8008a2a:	68fa      	ldr	r2, [r7, #12]
 8008a2c:	440a      	add	r2, r1
 8008a2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a32:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008a36:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	015a      	lsls	r2, r3, #5
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	4413      	add	r3, r2
 8008a40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	68ba      	ldr	r2, [r7, #8]
 8008a48:	0151      	lsls	r1, r2, #5
 8008a4a:	68fa      	ldr	r2, [r7, #12]
 8008a4c:	440a      	add	r2, r1
 8008a4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a52:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008a56:	6013      	str	r3, [r2, #0]
 8008a58:	e02b      	b.n	8008ab2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	015a      	lsls	r2, r3, #5
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	4413      	add	r3, r2
 8008a62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	db12      	blt.n	8008a92 <USB_EPSetStall+0xae>
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d00f      	beq.n	8008a92 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	015a      	lsls	r2, r3, #5
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	4413      	add	r3, r2
 8008a7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	68ba      	ldr	r2, [r7, #8]
 8008a82:	0151      	lsls	r1, r2, #5
 8008a84:	68fa      	ldr	r2, [r7, #12]
 8008a86:	440a      	add	r2, r1
 8008a88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a8c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008a90:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	015a      	lsls	r2, r3, #5
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	4413      	add	r3, r2
 8008a9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	68ba      	ldr	r2, [r7, #8]
 8008aa2:	0151      	lsls	r1, r2, #5
 8008aa4:	68fa      	ldr	r2, [r7, #12]
 8008aa6:	440a      	add	r2, r1
 8008aa8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008aac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008ab0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008ab2:	2300      	movs	r3, #0
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3714      	adds	r7, #20
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr

08008ac0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b085      	sub	sp, #20
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	785b      	ldrb	r3, [r3, #1]
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	d128      	bne.n	8008b2e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	015a      	lsls	r2, r3, #5
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	4413      	add	r3, r2
 8008ae4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	68ba      	ldr	r2, [r7, #8]
 8008aec:	0151      	lsls	r1, r2, #5
 8008aee:	68fa      	ldr	r2, [r7, #12]
 8008af0:	440a      	add	r2, r1
 8008af2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008af6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008afa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	791b      	ldrb	r3, [r3, #4]
 8008b00:	2b03      	cmp	r3, #3
 8008b02:	d003      	beq.n	8008b0c <USB_EPClearStall+0x4c>
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	791b      	ldrb	r3, [r3, #4]
 8008b08:	2b02      	cmp	r3, #2
 8008b0a:	d138      	bne.n	8008b7e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	015a      	lsls	r2, r3, #5
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	4413      	add	r3, r2
 8008b14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	68ba      	ldr	r2, [r7, #8]
 8008b1c:	0151      	lsls	r1, r2, #5
 8008b1e:	68fa      	ldr	r2, [r7, #12]
 8008b20:	440a      	add	r2, r1
 8008b22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b2a:	6013      	str	r3, [r2, #0]
 8008b2c:	e027      	b.n	8008b7e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	015a      	lsls	r2, r3, #5
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	4413      	add	r3, r2
 8008b36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	68ba      	ldr	r2, [r7, #8]
 8008b3e:	0151      	lsls	r1, r2, #5
 8008b40:	68fa      	ldr	r2, [r7, #12]
 8008b42:	440a      	add	r2, r1
 8008b44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b48:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008b4c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	791b      	ldrb	r3, [r3, #4]
 8008b52:	2b03      	cmp	r3, #3
 8008b54:	d003      	beq.n	8008b5e <USB_EPClearStall+0x9e>
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	791b      	ldrb	r3, [r3, #4]
 8008b5a:	2b02      	cmp	r3, #2
 8008b5c:	d10f      	bne.n	8008b7e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	015a      	lsls	r2, r3, #5
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	4413      	add	r3, r2
 8008b66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	68ba      	ldr	r2, [r7, #8]
 8008b6e:	0151      	lsls	r1, r2, #5
 8008b70:	68fa      	ldr	r2, [r7, #12]
 8008b72:	440a      	add	r2, r1
 8008b74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b7c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008b7e:	2300      	movs	r3, #0
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3714      	adds	r7, #20
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr

08008b8c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b085      	sub	sp, #20
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	460b      	mov	r3, r1
 8008b96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	68fa      	ldr	r2, [r7, #12]
 8008ba6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008baa:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008bae:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	78fb      	ldrb	r3, [r7, #3]
 8008bba:	011b      	lsls	r3, r3, #4
 8008bbc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008bc0:	68f9      	ldr	r1, [r7, #12]
 8008bc2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008bca:	2300      	movs	r3, #0
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3714      	adds	r7, #20
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr

08008bd8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b085      	sub	sp, #20
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	68fa      	ldr	r2, [r7, #12]
 8008bee:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008bf2:	f023 0303 	bic.w	r3, r3, #3
 8008bf6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	68fa      	ldr	r2, [r7, #12]
 8008c02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008c06:	f023 0302 	bic.w	r3, r3, #2
 8008c0a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008c0c:	2300      	movs	r3, #0
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3714      	adds	r7, #20
 8008c12:	46bd      	mov	sp, r7
 8008c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c18:	4770      	bx	lr

08008c1a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008c1a:	b480      	push	{r7}
 8008c1c:	b085      	sub	sp, #20
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	68fa      	ldr	r2, [r7, #12]
 8008c30:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008c34:	f023 0303 	bic.w	r3, r3, #3
 8008c38:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	68fa      	ldr	r2, [r7, #12]
 8008c44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008c48:	f043 0302 	orr.w	r3, r3, #2
 8008c4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008c4e:	2300      	movs	r3, #0
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3714      	adds	r7, #20
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr

08008c5c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b085      	sub	sp, #20
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	695b      	ldr	r3, [r3, #20]
 8008c68:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	699b      	ldr	r3, [r3, #24]
 8008c6e:	68fa      	ldr	r2, [r7, #12]
 8008c70:	4013      	ands	r3, r2
 8008c72:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008c74:	68fb      	ldr	r3, [r7, #12]
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3714      	adds	r7, #20
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c80:	4770      	bx	lr

08008c82 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008c82:	b480      	push	{r7}
 8008c84:	b085      	sub	sp, #20
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c94:	699b      	ldr	r3, [r3, #24]
 8008c96:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c9e:	69db      	ldr	r3, [r3, #28]
 8008ca0:	68ba      	ldr	r2, [r7, #8]
 8008ca2:	4013      	ands	r3, r2
 8008ca4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	0c1b      	lsrs	r3, r3, #16
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3714      	adds	r7, #20
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr

08008cb6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008cb6:	b480      	push	{r7}
 8008cb8:	b085      	sub	sp, #20
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008cc8:	699b      	ldr	r3, [r3, #24]
 8008cca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008cd2:	69db      	ldr	r3, [r3, #28]
 8008cd4:	68ba      	ldr	r2, [r7, #8]
 8008cd6:	4013      	ands	r3, r2
 8008cd8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	b29b      	uxth	r3, r3
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3714      	adds	r7, #20
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr

08008cea <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008cea:	b480      	push	{r7}
 8008cec:	b085      	sub	sp, #20
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
 8008cf2:	460b      	mov	r3, r1
 8008cf4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008cfa:	78fb      	ldrb	r3, [r7, #3]
 8008cfc:	015a      	lsls	r2, r3, #5
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	4413      	add	r3, r2
 8008d02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d06:	689b      	ldr	r3, [r3, #8]
 8008d08:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d10:	695b      	ldr	r3, [r3, #20]
 8008d12:	68ba      	ldr	r2, [r7, #8]
 8008d14:	4013      	ands	r3, r2
 8008d16:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008d18:	68bb      	ldr	r3, [r7, #8]
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3714      	adds	r7, #20
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d24:	4770      	bx	lr

08008d26 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008d26:	b480      	push	{r7}
 8008d28:	b087      	sub	sp, #28
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	6078      	str	r0, [r7, #4]
 8008d2e:	460b      	mov	r3, r1
 8008d30:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d3c:	691b      	ldr	r3, [r3, #16]
 8008d3e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d48:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008d4a:	78fb      	ldrb	r3, [r7, #3]
 8008d4c:	f003 030f 	and.w	r3, r3, #15
 8008d50:	68fa      	ldr	r2, [r7, #12]
 8008d52:	fa22 f303 	lsr.w	r3, r2, r3
 8008d56:	01db      	lsls	r3, r3, #7
 8008d58:	b2db      	uxtb	r3, r3
 8008d5a:	693a      	ldr	r2, [r7, #16]
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008d60:	78fb      	ldrb	r3, [r7, #3]
 8008d62:	015a      	lsls	r2, r3, #5
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	4413      	add	r3, r2
 8008d68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d6c:	689b      	ldr	r3, [r3, #8]
 8008d6e:	693a      	ldr	r2, [r7, #16]
 8008d70:	4013      	ands	r3, r2
 8008d72:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008d74:	68bb      	ldr	r3, [r7, #8]
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	371c      	adds	r7, #28
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d80:	4770      	bx	lr

08008d82 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008d82:	b480      	push	{r7}
 8008d84:	b083      	sub	sp, #12
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	695b      	ldr	r3, [r3, #20]
 8008d8e:	f003 0301 	and.w	r3, r3, #1
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	370c      	adds	r7, #12
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr

08008d9e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008d9e:	b480      	push	{r7}
 8008da0:	b085      	sub	sp, #20
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	68fa      	ldr	r2, [r7, #12]
 8008db4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008db8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008dbc:	f023 0307 	bic.w	r3, r3, #7
 8008dc0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	68fa      	ldr	r2, [r7, #12]
 8008dcc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008dd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008dd4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008dd6:	2300      	movs	r3, #0
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3714      	adds	r7, #20
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b087      	sub	sp, #28
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	460b      	mov	r3, r1
 8008dee:	607a      	str	r2, [r7, #4]
 8008df0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	333c      	adds	r3, #60	@ 0x3c
 8008dfa:	3304      	adds	r3, #4
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	4a26      	ldr	r2, [pc, #152]	@ (8008e9c <USB_EP0_OutStart+0xb8>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d90a      	bls.n	8008e1e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008e14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e18:	d101      	bne.n	8008e1e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	e037      	b.n	8008e8e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e24:	461a      	mov	r2, r3
 8008e26:	2300      	movs	r3, #0
 8008e28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e30:	691b      	ldr	r3, [r3, #16]
 8008e32:	697a      	ldr	r2, [r7, #20]
 8008e34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e38:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008e3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e44:	691b      	ldr	r3, [r3, #16]
 8008e46:	697a      	ldr	r2, [r7, #20]
 8008e48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e4c:	f043 0318 	orr.w	r3, r3, #24
 8008e50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e58:	691b      	ldr	r3, [r3, #16]
 8008e5a:	697a      	ldr	r2, [r7, #20]
 8008e5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e60:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008e64:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008e66:	7afb      	ldrb	r3, [r7, #11]
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d10f      	bne.n	8008e8c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e72:	461a      	mov	r2, r3
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	697a      	ldr	r2, [r7, #20]
 8008e82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e86:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008e8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008e8c:	2300      	movs	r3, #0
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	371c      	adds	r7, #28
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr
 8008e9a:	bf00      	nop
 8008e9c:	4f54300a 	.word	0x4f54300a

08008ea0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b085      	sub	sp, #20
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	3301      	adds	r3, #1
 8008eb0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008eb8:	d901      	bls.n	8008ebe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008eba:	2303      	movs	r3, #3
 8008ebc:	e01b      	b.n	8008ef6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	691b      	ldr	r3, [r3, #16]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	daf2      	bge.n	8008eac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	691b      	ldr	r3, [r3, #16]
 8008ece:	f043 0201 	orr.w	r2, r3, #1
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	3301      	adds	r3, #1
 8008eda:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008ee2:	d901      	bls.n	8008ee8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008ee4:	2303      	movs	r3, #3
 8008ee6:	e006      	b.n	8008ef6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	691b      	ldr	r3, [r3, #16]
 8008eec:	f003 0301 	and.w	r3, r3, #1
 8008ef0:	2b01      	cmp	r3, #1
 8008ef2:	d0f0      	beq.n	8008ed6 <USB_CoreReset+0x36>

  return HAL_OK;
 8008ef4:	2300      	movs	r3, #0
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3714      	adds	r7, #20
 8008efa:	46bd      	mov	sp, r7
 8008efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f00:	4770      	bx	lr
	...

08008f04 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b084      	sub	sp, #16
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	460b      	mov	r3, r1
 8008f0e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008f10:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008f14:	f002 fcd8 	bl	800b8c8 <USBD_static_malloc>
 8008f18:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d109      	bne.n	8008f34 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	32b0      	adds	r2, #176	@ 0xb0
 8008f2a:	2100      	movs	r1, #0
 8008f2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008f30:	2302      	movs	r3, #2
 8008f32:	e0d4      	b.n	80090de <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008f34:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008f38:	2100      	movs	r1, #0
 8008f3a:	68f8      	ldr	r0, [r7, #12]
 8008f3c:	f004 fd72 	bl	800da24 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	32b0      	adds	r2, #176	@ 0xb0
 8008f4a:	68f9      	ldr	r1, [r7, #12]
 8008f4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	32b0      	adds	r2, #176	@ 0xb0
 8008f5a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	7c1b      	ldrb	r3, [r3, #16]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d138      	bne.n	8008fde <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008f6c:	4b5e      	ldr	r3, [pc, #376]	@ (80090e8 <USBD_CDC_Init+0x1e4>)
 8008f6e:	7819      	ldrb	r1, [r3, #0]
 8008f70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008f74:	2202      	movs	r2, #2
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f002 fb35 	bl	800b5e6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008f7c:	4b5a      	ldr	r3, [pc, #360]	@ (80090e8 <USBD_CDC_Init+0x1e4>)
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	f003 020f 	and.w	r2, r3, #15
 8008f84:	6879      	ldr	r1, [r7, #4]
 8008f86:	4613      	mov	r3, r2
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	4413      	add	r3, r2
 8008f8c:	009b      	lsls	r3, r3, #2
 8008f8e:	440b      	add	r3, r1
 8008f90:	3324      	adds	r3, #36	@ 0x24
 8008f92:	2201      	movs	r2, #1
 8008f94:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008f96:	4b55      	ldr	r3, [pc, #340]	@ (80090ec <USBD_CDC_Init+0x1e8>)
 8008f98:	7819      	ldrb	r1, [r3, #0]
 8008f9a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008f9e:	2202      	movs	r2, #2
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f002 fb20 	bl	800b5e6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008fa6:	4b51      	ldr	r3, [pc, #324]	@ (80090ec <USBD_CDC_Init+0x1e8>)
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	f003 020f 	and.w	r2, r3, #15
 8008fae:	6879      	ldr	r1, [r7, #4]
 8008fb0:	4613      	mov	r3, r2
 8008fb2:	009b      	lsls	r3, r3, #2
 8008fb4:	4413      	add	r3, r2
 8008fb6:	009b      	lsls	r3, r3, #2
 8008fb8:	440b      	add	r3, r1
 8008fba:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008fc2:	4b4b      	ldr	r3, [pc, #300]	@ (80090f0 <USBD_CDC_Init+0x1ec>)
 8008fc4:	781b      	ldrb	r3, [r3, #0]
 8008fc6:	f003 020f 	and.w	r2, r3, #15
 8008fca:	6879      	ldr	r1, [r7, #4]
 8008fcc:	4613      	mov	r3, r2
 8008fce:	009b      	lsls	r3, r3, #2
 8008fd0:	4413      	add	r3, r2
 8008fd2:	009b      	lsls	r3, r3, #2
 8008fd4:	440b      	add	r3, r1
 8008fd6:	3326      	adds	r3, #38	@ 0x26
 8008fd8:	2210      	movs	r2, #16
 8008fda:	801a      	strh	r2, [r3, #0]
 8008fdc:	e035      	b.n	800904a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008fde:	4b42      	ldr	r3, [pc, #264]	@ (80090e8 <USBD_CDC_Init+0x1e4>)
 8008fe0:	7819      	ldrb	r1, [r3, #0]
 8008fe2:	2340      	movs	r3, #64	@ 0x40
 8008fe4:	2202      	movs	r2, #2
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f002 fafd 	bl	800b5e6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008fec:	4b3e      	ldr	r3, [pc, #248]	@ (80090e8 <USBD_CDC_Init+0x1e4>)
 8008fee:	781b      	ldrb	r3, [r3, #0]
 8008ff0:	f003 020f 	and.w	r2, r3, #15
 8008ff4:	6879      	ldr	r1, [r7, #4]
 8008ff6:	4613      	mov	r3, r2
 8008ff8:	009b      	lsls	r3, r3, #2
 8008ffa:	4413      	add	r3, r2
 8008ffc:	009b      	lsls	r3, r3, #2
 8008ffe:	440b      	add	r3, r1
 8009000:	3324      	adds	r3, #36	@ 0x24
 8009002:	2201      	movs	r2, #1
 8009004:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009006:	4b39      	ldr	r3, [pc, #228]	@ (80090ec <USBD_CDC_Init+0x1e8>)
 8009008:	7819      	ldrb	r1, [r3, #0]
 800900a:	2340      	movs	r3, #64	@ 0x40
 800900c:	2202      	movs	r2, #2
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f002 fae9 	bl	800b5e6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009014:	4b35      	ldr	r3, [pc, #212]	@ (80090ec <USBD_CDC_Init+0x1e8>)
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	f003 020f 	and.w	r2, r3, #15
 800901c:	6879      	ldr	r1, [r7, #4]
 800901e:	4613      	mov	r3, r2
 8009020:	009b      	lsls	r3, r3, #2
 8009022:	4413      	add	r3, r2
 8009024:	009b      	lsls	r3, r3, #2
 8009026:	440b      	add	r3, r1
 8009028:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800902c:	2201      	movs	r2, #1
 800902e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009030:	4b2f      	ldr	r3, [pc, #188]	@ (80090f0 <USBD_CDC_Init+0x1ec>)
 8009032:	781b      	ldrb	r3, [r3, #0]
 8009034:	f003 020f 	and.w	r2, r3, #15
 8009038:	6879      	ldr	r1, [r7, #4]
 800903a:	4613      	mov	r3, r2
 800903c:	009b      	lsls	r3, r3, #2
 800903e:	4413      	add	r3, r2
 8009040:	009b      	lsls	r3, r3, #2
 8009042:	440b      	add	r3, r1
 8009044:	3326      	adds	r3, #38	@ 0x26
 8009046:	2210      	movs	r2, #16
 8009048:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800904a:	4b29      	ldr	r3, [pc, #164]	@ (80090f0 <USBD_CDC_Init+0x1ec>)
 800904c:	7819      	ldrb	r1, [r3, #0]
 800904e:	2308      	movs	r3, #8
 8009050:	2203      	movs	r2, #3
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f002 fac7 	bl	800b5e6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009058:	4b25      	ldr	r3, [pc, #148]	@ (80090f0 <USBD_CDC_Init+0x1ec>)
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	f003 020f 	and.w	r2, r3, #15
 8009060:	6879      	ldr	r1, [r7, #4]
 8009062:	4613      	mov	r3, r2
 8009064:	009b      	lsls	r3, r3, #2
 8009066:	4413      	add	r3, r2
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	440b      	add	r3, r1
 800906c:	3324      	adds	r3, #36	@ 0x24
 800906e:	2201      	movs	r2, #1
 8009070:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	2200      	movs	r2, #0
 8009076:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009080:	687a      	ldr	r2, [r7, #4]
 8009082:	33b0      	adds	r3, #176	@ 0xb0
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	4413      	add	r3, r2
 8009088:	685b      	ldr	r3, [r3, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2200      	movs	r2, #0
 8009092:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2200      	movs	r2, #0
 800909a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d101      	bne.n	80090ac <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80090a8:	2302      	movs	r3, #2
 80090aa:	e018      	b.n	80090de <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	7c1b      	ldrb	r3, [r3, #16]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d10a      	bne.n	80090ca <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80090b4:	4b0d      	ldr	r3, [pc, #52]	@ (80090ec <USBD_CDC_Init+0x1e8>)
 80090b6:	7819      	ldrb	r1, [r3, #0]
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80090be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f002 fb7e 	bl	800b7c4 <USBD_LL_PrepareReceive>
 80090c8:	e008      	b.n	80090dc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80090ca:	4b08      	ldr	r3, [pc, #32]	@ (80090ec <USBD_CDC_Init+0x1e8>)
 80090cc:	7819      	ldrb	r1, [r3, #0]
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80090d4:	2340      	movs	r3, #64	@ 0x40
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f002 fb74 	bl	800b7c4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80090dc:	2300      	movs	r3, #0
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3710      	adds	r7, #16
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
 80090e6:	bf00      	nop
 80090e8:	20000093 	.word	0x20000093
 80090ec:	20000094 	.word	0x20000094
 80090f0:	20000095 	.word	0x20000095

080090f4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	460b      	mov	r3, r1
 80090fe:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009100:	4b3a      	ldr	r3, [pc, #232]	@ (80091ec <USBD_CDC_DeInit+0xf8>)
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	4619      	mov	r1, r3
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f002 fa93 	bl	800b632 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800910c:	4b37      	ldr	r3, [pc, #220]	@ (80091ec <USBD_CDC_DeInit+0xf8>)
 800910e:	781b      	ldrb	r3, [r3, #0]
 8009110:	f003 020f 	and.w	r2, r3, #15
 8009114:	6879      	ldr	r1, [r7, #4]
 8009116:	4613      	mov	r3, r2
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	4413      	add	r3, r2
 800911c:	009b      	lsls	r3, r3, #2
 800911e:	440b      	add	r3, r1
 8009120:	3324      	adds	r3, #36	@ 0x24
 8009122:	2200      	movs	r2, #0
 8009124:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009126:	4b32      	ldr	r3, [pc, #200]	@ (80091f0 <USBD_CDC_DeInit+0xfc>)
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	4619      	mov	r1, r3
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f002 fa80 	bl	800b632 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009132:	4b2f      	ldr	r3, [pc, #188]	@ (80091f0 <USBD_CDC_DeInit+0xfc>)
 8009134:	781b      	ldrb	r3, [r3, #0]
 8009136:	f003 020f 	and.w	r2, r3, #15
 800913a:	6879      	ldr	r1, [r7, #4]
 800913c:	4613      	mov	r3, r2
 800913e:	009b      	lsls	r3, r3, #2
 8009140:	4413      	add	r3, r2
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	440b      	add	r3, r1
 8009146:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800914a:	2200      	movs	r2, #0
 800914c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800914e:	4b29      	ldr	r3, [pc, #164]	@ (80091f4 <USBD_CDC_DeInit+0x100>)
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	4619      	mov	r1, r3
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f002 fa6c 	bl	800b632 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800915a:	4b26      	ldr	r3, [pc, #152]	@ (80091f4 <USBD_CDC_DeInit+0x100>)
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	f003 020f 	and.w	r2, r3, #15
 8009162:	6879      	ldr	r1, [r7, #4]
 8009164:	4613      	mov	r3, r2
 8009166:	009b      	lsls	r3, r3, #2
 8009168:	4413      	add	r3, r2
 800916a:	009b      	lsls	r3, r3, #2
 800916c:	440b      	add	r3, r1
 800916e:	3324      	adds	r3, #36	@ 0x24
 8009170:	2200      	movs	r2, #0
 8009172:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009174:	4b1f      	ldr	r3, [pc, #124]	@ (80091f4 <USBD_CDC_DeInit+0x100>)
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	f003 020f 	and.w	r2, r3, #15
 800917c:	6879      	ldr	r1, [r7, #4]
 800917e:	4613      	mov	r3, r2
 8009180:	009b      	lsls	r3, r3, #2
 8009182:	4413      	add	r3, r2
 8009184:	009b      	lsls	r3, r3, #2
 8009186:	440b      	add	r3, r1
 8009188:	3326      	adds	r3, #38	@ 0x26
 800918a:	2200      	movs	r2, #0
 800918c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	32b0      	adds	r2, #176	@ 0xb0
 8009198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d01f      	beq.n	80091e0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80091a6:	687a      	ldr	r2, [r7, #4]
 80091a8:	33b0      	adds	r3, #176	@ 0xb0
 80091aa:	009b      	lsls	r3, r3, #2
 80091ac:	4413      	add	r3, r2
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	32b0      	adds	r2, #176	@ 0xb0
 80091be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091c2:	4618      	mov	r0, r3
 80091c4:	f002 fb8e 	bl	800b8e4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	32b0      	adds	r2, #176	@ 0xb0
 80091d2:	2100      	movs	r1, #0
 80091d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2200      	movs	r2, #0
 80091dc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80091e0:	2300      	movs	r3, #0
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3708      	adds	r7, #8
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
 80091ea:	bf00      	nop
 80091ec:	20000093 	.word	0x20000093
 80091f0:	20000094 	.word	0x20000094
 80091f4:	20000095 	.word	0x20000095

080091f8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b086      	sub	sp, #24
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	32b0      	adds	r2, #176	@ 0xb0
 800920c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009210:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009212:	2300      	movs	r3, #0
 8009214:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009216:	2300      	movs	r3, #0
 8009218:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800921a:	2300      	movs	r3, #0
 800921c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d101      	bne.n	8009228 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009224:	2303      	movs	r3, #3
 8009226:	e0bf      	b.n	80093a8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009230:	2b00      	cmp	r3, #0
 8009232:	d050      	beq.n	80092d6 <USBD_CDC_Setup+0xde>
 8009234:	2b20      	cmp	r3, #32
 8009236:	f040 80af 	bne.w	8009398 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	88db      	ldrh	r3, [r3, #6]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d03a      	beq.n	80092b8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	b25b      	sxtb	r3, r3
 8009248:	2b00      	cmp	r3, #0
 800924a:	da1b      	bge.n	8009284 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009252:	687a      	ldr	r2, [r7, #4]
 8009254:	33b0      	adds	r3, #176	@ 0xb0
 8009256:	009b      	lsls	r3, r3, #2
 8009258:	4413      	add	r3, r2
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	689b      	ldr	r3, [r3, #8]
 800925e:	683a      	ldr	r2, [r7, #0]
 8009260:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009262:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009264:	683a      	ldr	r2, [r7, #0]
 8009266:	88d2      	ldrh	r2, [r2, #6]
 8009268:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	88db      	ldrh	r3, [r3, #6]
 800926e:	2b07      	cmp	r3, #7
 8009270:	bf28      	it	cs
 8009272:	2307      	movcs	r3, #7
 8009274:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	89fa      	ldrh	r2, [r7, #14]
 800927a:	4619      	mov	r1, r3
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f001 fd7d 	bl	800ad7c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009282:	e090      	b.n	80093a6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	785a      	ldrb	r2, [r3, #1]
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	88db      	ldrh	r3, [r3, #6]
 8009292:	2b3f      	cmp	r3, #63	@ 0x3f
 8009294:	d803      	bhi.n	800929e <USBD_CDC_Setup+0xa6>
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	88db      	ldrh	r3, [r3, #6]
 800929a:	b2da      	uxtb	r2, r3
 800929c:	e000      	b.n	80092a0 <USBD_CDC_Setup+0xa8>
 800929e:	2240      	movs	r2, #64	@ 0x40
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80092a6:	6939      	ldr	r1, [r7, #16]
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80092ae:	461a      	mov	r2, r3
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f001 fd8f 	bl	800add4 <USBD_CtlPrepareRx>
      break;
 80092b6:	e076      	b.n	80093a6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	33b0      	adds	r3, #176	@ 0xb0
 80092c2:	009b      	lsls	r3, r3, #2
 80092c4:	4413      	add	r3, r2
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	683a      	ldr	r2, [r7, #0]
 80092cc:	7850      	ldrb	r0, [r2, #1]
 80092ce:	2200      	movs	r2, #0
 80092d0:	6839      	ldr	r1, [r7, #0]
 80092d2:	4798      	blx	r3
      break;
 80092d4:	e067      	b.n	80093a6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	785b      	ldrb	r3, [r3, #1]
 80092da:	2b0b      	cmp	r3, #11
 80092dc:	d851      	bhi.n	8009382 <USBD_CDC_Setup+0x18a>
 80092de:	a201      	add	r2, pc, #4	@ (adr r2, 80092e4 <USBD_CDC_Setup+0xec>)
 80092e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092e4:	08009315 	.word	0x08009315
 80092e8:	08009391 	.word	0x08009391
 80092ec:	08009383 	.word	0x08009383
 80092f0:	08009383 	.word	0x08009383
 80092f4:	08009383 	.word	0x08009383
 80092f8:	08009383 	.word	0x08009383
 80092fc:	08009383 	.word	0x08009383
 8009300:	08009383 	.word	0x08009383
 8009304:	08009383 	.word	0x08009383
 8009308:	08009383 	.word	0x08009383
 800930c:	0800933f 	.word	0x0800933f
 8009310:	08009369 	.word	0x08009369
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800931a:	b2db      	uxtb	r3, r3
 800931c:	2b03      	cmp	r3, #3
 800931e:	d107      	bne.n	8009330 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009320:	f107 030a 	add.w	r3, r7, #10
 8009324:	2202      	movs	r2, #2
 8009326:	4619      	mov	r1, r3
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f001 fd27 	bl	800ad7c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800932e:	e032      	b.n	8009396 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009330:	6839      	ldr	r1, [r7, #0]
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f001 fca5 	bl	800ac82 <USBD_CtlError>
            ret = USBD_FAIL;
 8009338:	2303      	movs	r3, #3
 800933a:	75fb      	strb	r3, [r7, #23]
          break;
 800933c:	e02b      	b.n	8009396 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009344:	b2db      	uxtb	r3, r3
 8009346:	2b03      	cmp	r3, #3
 8009348:	d107      	bne.n	800935a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800934a:	f107 030d 	add.w	r3, r7, #13
 800934e:	2201      	movs	r2, #1
 8009350:	4619      	mov	r1, r3
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f001 fd12 	bl	800ad7c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009358:	e01d      	b.n	8009396 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800935a:	6839      	ldr	r1, [r7, #0]
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f001 fc90 	bl	800ac82 <USBD_CtlError>
            ret = USBD_FAIL;
 8009362:	2303      	movs	r3, #3
 8009364:	75fb      	strb	r3, [r7, #23]
          break;
 8009366:	e016      	b.n	8009396 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800936e:	b2db      	uxtb	r3, r3
 8009370:	2b03      	cmp	r3, #3
 8009372:	d00f      	beq.n	8009394 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009374:	6839      	ldr	r1, [r7, #0]
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f001 fc83 	bl	800ac82 <USBD_CtlError>
            ret = USBD_FAIL;
 800937c:	2303      	movs	r3, #3
 800937e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009380:	e008      	b.n	8009394 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009382:	6839      	ldr	r1, [r7, #0]
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f001 fc7c 	bl	800ac82 <USBD_CtlError>
          ret = USBD_FAIL;
 800938a:	2303      	movs	r3, #3
 800938c:	75fb      	strb	r3, [r7, #23]
          break;
 800938e:	e002      	b.n	8009396 <USBD_CDC_Setup+0x19e>
          break;
 8009390:	bf00      	nop
 8009392:	e008      	b.n	80093a6 <USBD_CDC_Setup+0x1ae>
          break;
 8009394:	bf00      	nop
      }
      break;
 8009396:	e006      	b.n	80093a6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009398:	6839      	ldr	r1, [r7, #0]
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f001 fc71 	bl	800ac82 <USBD_CtlError>
      ret = USBD_FAIL;
 80093a0:	2303      	movs	r3, #3
 80093a2:	75fb      	strb	r3, [r7, #23]
      break;
 80093a4:	bf00      	nop
  }

  return (uint8_t)ret;
 80093a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3718      	adds	r7, #24
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b084      	sub	sp, #16
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	460b      	mov	r3, r1
 80093ba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80093c2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	32b0      	adds	r2, #176	@ 0xb0
 80093ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d101      	bne.n	80093da <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80093d6:	2303      	movs	r3, #3
 80093d8:	e065      	b.n	80094a6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	32b0      	adds	r2, #176	@ 0xb0
 80093e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093e8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80093ea:	78fb      	ldrb	r3, [r7, #3]
 80093ec:	f003 020f 	and.w	r2, r3, #15
 80093f0:	6879      	ldr	r1, [r7, #4]
 80093f2:	4613      	mov	r3, r2
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	4413      	add	r3, r2
 80093f8:	009b      	lsls	r3, r3, #2
 80093fa:	440b      	add	r3, r1
 80093fc:	3318      	adds	r3, #24
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d02f      	beq.n	8009464 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009404:	78fb      	ldrb	r3, [r7, #3]
 8009406:	f003 020f 	and.w	r2, r3, #15
 800940a:	6879      	ldr	r1, [r7, #4]
 800940c:	4613      	mov	r3, r2
 800940e:	009b      	lsls	r3, r3, #2
 8009410:	4413      	add	r3, r2
 8009412:	009b      	lsls	r3, r3, #2
 8009414:	440b      	add	r3, r1
 8009416:	3318      	adds	r3, #24
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	78fb      	ldrb	r3, [r7, #3]
 800941c:	f003 010f 	and.w	r1, r3, #15
 8009420:	68f8      	ldr	r0, [r7, #12]
 8009422:	460b      	mov	r3, r1
 8009424:	00db      	lsls	r3, r3, #3
 8009426:	440b      	add	r3, r1
 8009428:	009b      	lsls	r3, r3, #2
 800942a:	4403      	add	r3, r0
 800942c:	331c      	adds	r3, #28
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	fbb2 f1f3 	udiv	r1, r2, r3
 8009434:	fb01 f303 	mul.w	r3, r1, r3
 8009438:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800943a:	2b00      	cmp	r3, #0
 800943c:	d112      	bne.n	8009464 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800943e:	78fb      	ldrb	r3, [r7, #3]
 8009440:	f003 020f 	and.w	r2, r3, #15
 8009444:	6879      	ldr	r1, [r7, #4]
 8009446:	4613      	mov	r3, r2
 8009448:	009b      	lsls	r3, r3, #2
 800944a:	4413      	add	r3, r2
 800944c:	009b      	lsls	r3, r3, #2
 800944e:	440b      	add	r3, r1
 8009450:	3318      	adds	r3, #24
 8009452:	2200      	movs	r2, #0
 8009454:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009456:	78f9      	ldrb	r1, [r7, #3]
 8009458:	2300      	movs	r3, #0
 800945a:	2200      	movs	r2, #0
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f002 f990 	bl	800b782 <USBD_LL_Transmit>
 8009462:	e01f      	b.n	80094a4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	2200      	movs	r2, #0
 8009468:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009472:	687a      	ldr	r2, [r7, #4]
 8009474:	33b0      	adds	r3, #176	@ 0xb0
 8009476:	009b      	lsls	r3, r3, #2
 8009478:	4413      	add	r3, r2
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	691b      	ldr	r3, [r3, #16]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d010      	beq.n	80094a4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009488:	687a      	ldr	r2, [r7, #4]
 800948a:	33b0      	adds	r3, #176	@ 0xb0
 800948c:	009b      	lsls	r3, r3, #2
 800948e:	4413      	add	r3, r2
 8009490:	685b      	ldr	r3, [r3, #4]
 8009492:	691b      	ldr	r3, [r3, #16]
 8009494:	68ba      	ldr	r2, [r7, #8]
 8009496:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800949a:	68ba      	ldr	r2, [r7, #8]
 800949c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80094a0:	78fa      	ldrb	r2, [r7, #3]
 80094a2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80094a4:	2300      	movs	r3, #0
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3710      	adds	r7, #16
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}

080094ae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80094ae:	b580      	push	{r7, lr}
 80094b0:	b084      	sub	sp, #16
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]
 80094b6:	460b      	mov	r3, r1
 80094b8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	32b0      	adds	r2, #176	@ 0xb0
 80094c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094c8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	32b0      	adds	r2, #176	@ 0xb0
 80094d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d101      	bne.n	80094e0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80094dc:	2303      	movs	r3, #3
 80094de:	e01a      	b.n	8009516 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80094e0:	78fb      	ldrb	r3, [r7, #3]
 80094e2:	4619      	mov	r1, r3
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f002 f98e 	bl	800b806 <USBD_LL_GetRxDataSize>
 80094ea:	4602      	mov	r2, r0
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	33b0      	adds	r3, #176	@ 0xb0
 80094fc:	009b      	lsls	r3, r3, #2
 80094fe:	4413      	add	r3, r2
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	68db      	ldr	r3, [r3, #12]
 8009504:	68fa      	ldr	r2, [r7, #12]
 8009506:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800950a:	68fa      	ldr	r2, [r7, #12]
 800950c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009510:	4611      	mov	r1, r2
 8009512:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009514:	2300      	movs	r3, #0
}
 8009516:	4618      	mov	r0, r3
 8009518:	3710      	adds	r7, #16
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}

0800951e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800951e:	b580      	push	{r7, lr}
 8009520:	b084      	sub	sp, #16
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	32b0      	adds	r2, #176	@ 0xb0
 8009530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009534:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d101      	bne.n	8009540 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800953c:	2303      	movs	r3, #3
 800953e:	e024      	b.n	800958a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009546:	687a      	ldr	r2, [r7, #4]
 8009548:	33b0      	adds	r3, #176	@ 0xb0
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	4413      	add	r3, r2
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d019      	beq.n	8009588 <USBD_CDC_EP0_RxReady+0x6a>
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800955a:	2bff      	cmp	r3, #255	@ 0xff
 800955c:	d014      	beq.n	8009588 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009564:	687a      	ldr	r2, [r7, #4]
 8009566:	33b0      	adds	r3, #176	@ 0xb0
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	4413      	add	r3, r2
 800956c:	685b      	ldr	r3, [r3, #4]
 800956e:	689b      	ldr	r3, [r3, #8]
 8009570:	68fa      	ldr	r2, [r7, #12]
 8009572:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8009576:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009578:	68fa      	ldr	r2, [r7, #12]
 800957a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800957e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	22ff      	movs	r2, #255	@ 0xff
 8009584:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009588:	2300      	movs	r3, #0
}
 800958a:	4618      	mov	r0, r3
 800958c:	3710      	adds	r7, #16
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}
	...

08009594 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b086      	sub	sp, #24
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800959c:	2182      	movs	r1, #130	@ 0x82
 800959e:	4818      	ldr	r0, [pc, #96]	@ (8009600 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80095a0:	f000 fd0f 	bl	8009fc2 <USBD_GetEpDesc>
 80095a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80095a6:	2101      	movs	r1, #1
 80095a8:	4815      	ldr	r0, [pc, #84]	@ (8009600 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80095aa:	f000 fd0a 	bl	8009fc2 <USBD_GetEpDesc>
 80095ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80095b0:	2181      	movs	r1, #129	@ 0x81
 80095b2:	4813      	ldr	r0, [pc, #76]	@ (8009600 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80095b4:	f000 fd05 	bl	8009fc2 <USBD_GetEpDesc>
 80095b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d002      	beq.n	80095c6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	2210      	movs	r2, #16
 80095c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d006      	beq.n	80095da <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	2200      	movs	r2, #0
 80095d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80095d4:	711a      	strb	r2, [r3, #4]
 80095d6:	2200      	movs	r2, #0
 80095d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d006      	beq.n	80095ee <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	2200      	movs	r2, #0
 80095e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80095e8:	711a      	strb	r2, [r3, #4]
 80095ea:	2200      	movs	r2, #0
 80095ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2243      	movs	r2, #67	@ 0x43
 80095f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80095f4:	4b02      	ldr	r3, [pc, #8]	@ (8009600 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3718      	adds	r7, #24
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}
 80095fe:	bf00      	nop
 8009600:	20000050 	.word	0x20000050

08009604 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b086      	sub	sp, #24
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800960c:	2182      	movs	r1, #130	@ 0x82
 800960e:	4818      	ldr	r0, [pc, #96]	@ (8009670 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009610:	f000 fcd7 	bl	8009fc2 <USBD_GetEpDesc>
 8009614:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009616:	2101      	movs	r1, #1
 8009618:	4815      	ldr	r0, [pc, #84]	@ (8009670 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800961a:	f000 fcd2 	bl	8009fc2 <USBD_GetEpDesc>
 800961e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009620:	2181      	movs	r1, #129	@ 0x81
 8009622:	4813      	ldr	r0, [pc, #76]	@ (8009670 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009624:	f000 fccd 	bl	8009fc2 <USBD_GetEpDesc>
 8009628:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d002      	beq.n	8009636 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	2210      	movs	r2, #16
 8009634:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d006      	beq.n	800964a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	2200      	movs	r2, #0
 8009640:	711a      	strb	r2, [r3, #4]
 8009642:	2200      	movs	r2, #0
 8009644:	f042 0202 	orr.w	r2, r2, #2
 8009648:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d006      	beq.n	800965e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	2200      	movs	r2, #0
 8009654:	711a      	strb	r2, [r3, #4]
 8009656:	2200      	movs	r2, #0
 8009658:	f042 0202 	orr.w	r2, r2, #2
 800965c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2243      	movs	r2, #67	@ 0x43
 8009662:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009664:	4b02      	ldr	r3, [pc, #8]	@ (8009670 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009666:	4618      	mov	r0, r3
 8009668:	3718      	adds	r7, #24
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	20000050 	.word	0x20000050

08009674 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b086      	sub	sp, #24
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800967c:	2182      	movs	r1, #130	@ 0x82
 800967e:	4818      	ldr	r0, [pc, #96]	@ (80096e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009680:	f000 fc9f 	bl	8009fc2 <USBD_GetEpDesc>
 8009684:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009686:	2101      	movs	r1, #1
 8009688:	4815      	ldr	r0, [pc, #84]	@ (80096e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800968a:	f000 fc9a 	bl	8009fc2 <USBD_GetEpDesc>
 800968e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009690:	2181      	movs	r1, #129	@ 0x81
 8009692:	4813      	ldr	r0, [pc, #76]	@ (80096e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009694:	f000 fc95 	bl	8009fc2 <USBD_GetEpDesc>
 8009698:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d002      	beq.n	80096a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	2210      	movs	r2, #16
 80096a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d006      	beq.n	80096ba <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	2200      	movs	r2, #0
 80096b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80096b4:	711a      	strb	r2, [r3, #4]
 80096b6:	2200      	movs	r2, #0
 80096b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d006      	beq.n	80096ce <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2200      	movs	r2, #0
 80096c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80096c8:	711a      	strb	r2, [r3, #4]
 80096ca:	2200      	movs	r2, #0
 80096cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2243      	movs	r2, #67	@ 0x43
 80096d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80096d4:	4b02      	ldr	r3, [pc, #8]	@ (80096e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3718      	adds	r7, #24
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
 80096de:	bf00      	nop
 80096e0:	20000050 	.word	0x20000050

080096e4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	220a      	movs	r2, #10
 80096f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80096f2:	4b03      	ldr	r3, [pc, #12]	@ (8009700 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	370c      	adds	r7, #12
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr
 8009700:	2000000c 	.word	0x2000000c

08009704 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009704:	b480      	push	{r7}
 8009706:	b083      	sub	sp, #12
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d101      	bne.n	8009718 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009714:	2303      	movs	r3, #3
 8009716:	e009      	b.n	800972c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800971e:	687a      	ldr	r2, [r7, #4]
 8009720:	33b0      	adds	r3, #176	@ 0xb0
 8009722:	009b      	lsls	r3, r3, #2
 8009724:	4413      	add	r3, r2
 8009726:	683a      	ldr	r2, [r7, #0]
 8009728:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800972a:	2300      	movs	r3, #0
}
 800972c:	4618      	mov	r0, r3
 800972e:	370c      	adds	r7, #12
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr

08009738 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009738:	b480      	push	{r7}
 800973a:	b087      	sub	sp, #28
 800973c:	af00      	add	r7, sp, #0
 800973e:	60f8      	str	r0, [r7, #12]
 8009740:	60b9      	str	r1, [r7, #8]
 8009742:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	32b0      	adds	r2, #176	@ 0xb0
 800974e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009752:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d101      	bne.n	800975e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800975a:	2303      	movs	r3, #3
 800975c:	e008      	b.n	8009770 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	68ba      	ldr	r2, [r7, #8]
 8009762:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	687a      	ldr	r2, [r7, #4]
 800976a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800976e:	2300      	movs	r3, #0
}
 8009770:	4618      	mov	r0, r3
 8009772:	371c      	adds	r7, #28
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr

0800977c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800977c:	b480      	push	{r7}
 800977e:	b085      	sub	sp, #20
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	32b0      	adds	r2, #176	@ 0xb0
 8009790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009794:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d101      	bne.n	80097a0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800979c:	2303      	movs	r3, #3
 800979e:	e004      	b.n	80097aa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	683a      	ldr	r2, [r7, #0]
 80097a4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80097a8:	2300      	movs	r3, #0
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3714      	adds	r7, #20
 80097ae:	46bd      	mov	sp, r7
 80097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b4:	4770      	bx	lr
	...

080097b8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b084      	sub	sp, #16
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	32b0      	adds	r2, #176	@ 0xb0
 80097ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097ce:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	32b0      	adds	r2, #176	@ 0xb0
 80097da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d101      	bne.n	80097e6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80097e2:	2303      	movs	r3, #3
 80097e4:	e018      	b.n	8009818 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	7c1b      	ldrb	r3, [r3, #16]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d10a      	bne.n	8009804 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80097ee:	4b0c      	ldr	r3, [pc, #48]	@ (8009820 <USBD_CDC_ReceivePacket+0x68>)
 80097f0:	7819      	ldrb	r1, [r3, #0]
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80097f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f001 ffe1 	bl	800b7c4 <USBD_LL_PrepareReceive>
 8009802:	e008      	b.n	8009816 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009804:	4b06      	ldr	r3, [pc, #24]	@ (8009820 <USBD_CDC_ReceivePacket+0x68>)
 8009806:	7819      	ldrb	r1, [r3, #0]
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800980e:	2340      	movs	r3, #64	@ 0x40
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f001 ffd7 	bl	800b7c4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009816:	2300      	movs	r3, #0
}
 8009818:	4618      	mov	r0, r3
 800981a:	3710      	adds	r7, #16
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}
 8009820:	20000094 	.word	0x20000094

08009824 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b086      	sub	sp, #24
 8009828:	af00      	add	r7, sp, #0
 800982a:	60f8      	str	r0, [r7, #12]
 800982c:	60b9      	str	r1, [r7, #8]
 800982e:	4613      	mov	r3, r2
 8009830:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d101      	bne.n	800983c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009838:	2303      	movs	r3, #3
 800983a:	e01f      	b.n	800987c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	2200      	movs	r2, #0
 8009840:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2200      	movs	r2, #0
 8009848:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2200      	movs	r2, #0
 8009850:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d003      	beq.n	8009862 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	68ba      	ldr	r2, [r7, #8]
 800985e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	2201      	movs	r2, #1
 8009866:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	79fa      	ldrb	r2, [r7, #7]
 800986e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009870:	68f8      	ldr	r0, [r7, #12]
 8009872:	f001 fe51 	bl	800b518 <USBD_LL_Init>
 8009876:	4603      	mov	r3, r0
 8009878:	75fb      	strb	r3, [r7, #23]

  return ret;
 800987a:	7dfb      	ldrb	r3, [r7, #23]
}
 800987c:	4618      	mov	r0, r3
 800987e:	3718      	adds	r7, #24
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800988e:	2300      	movs	r3, #0
 8009890:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d101      	bne.n	800989c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009898:	2303      	movs	r3, #3
 800989a:	e025      	b.n	80098e8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	683a      	ldr	r2, [r7, #0]
 80098a0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	32ae      	adds	r2, #174	@ 0xae
 80098ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d00f      	beq.n	80098d8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	32ae      	adds	r2, #174	@ 0xae
 80098c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098c8:	f107 020e 	add.w	r2, r7, #14
 80098cc:	4610      	mov	r0, r2
 80098ce:	4798      	blx	r3
 80098d0:	4602      	mov	r2, r0
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80098de:	1c5a      	adds	r2, r3, #1
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80098e6:	2300      	movs	r3, #0
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3710      	adds	r7, #16
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b082      	sub	sp, #8
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f001 fe59 	bl	800b5b0 <USBD_LL_Start>
 80098fe:	4603      	mov	r3, r0
}
 8009900:	4618      	mov	r0, r3
 8009902:	3708      	adds	r7, #8
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}

08009908 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009908:	b480      	push	{r7}
 800990a:	b083      	sub	sp, #12
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009910:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009912:	4618      	mov	r0, r3
 8009914:	370c      	adds	r7, #12
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr

0800991e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800991e:	b580      	push	{r7, lr}
 8009920:	b084      	sub	sp, #16
 8009922:	af00      	add	r7, sp, #0
 8009924:	6078      	str	r0, [r7, #4]
 8009926:	460b      	mov	r3, r1
 8009928:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800992a:	2300      	movs	r3, #0
 800992c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009934:	2b00      	cmp	r3, #0
 8009936:	d009      	beq.n	800994c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	78fa      	ldrb	r2, [r7, #3]
 8009942:	4611      	mov	r1, r2
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	4798      	blx	r3
 8009948:	4603      	mov	r3, r0
 800994a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800994c:	7bfb      	ldrb	r3, [r7, #15]
}
 800994e:	4618      	mov	r0, r3
 8009950:	3710      	adds	r7, #16
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}

08009956 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009956:	b580      	push	{r7, lr}
 8009958:	b084      	sub	sp, #16
 800995a:	af00      	add	r7, sp, #0
 800995c:	6078      	str	r0, [r7, #4]
 800995e:	460b      	mov	r3, r1
 8009960:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009962:	2300      	movs	r3, #0
 8009964:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	78fa      	ldrb	r2, [r7, #3]
 8009970:	4611      	mov	r1, r2
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	4798      	blx	r3
 8009976:	4603      	mov	r3, r0
 8009978:	2b00      	cmp	r3, #0
 800997a:	d001      	beq.n	8009980 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800997c:	2303      	movs	r3, #3
 800997e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009980:	7bfb      	ldrb	r3, [r7, #15]
}
 8009982:	4618      	mov	r0, r3
 8009984:	3710      	adds	r7, #16
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}

0800998a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800998a:	b580      	push	{r7, lr}
 800998c:	b084      	sub	sp, #16
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]
 8009992:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800999a:	6839      	ldr	r1, [r7, #0]
 800999c:	4618      	mov	r0, r3
 800999e:	f001 f936 	bl	800ac0e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2201      	movs	r2, #1
 80099a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80099b0:	461a      	mov	r2, r3
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80099be:	f003 031f 	and.w	r3, r3, #31
 80099c2:	2b02      	cmp	r3, #2
 80099c4:	d01a      	beq.n	80099fc <USBD_LL_SetupStage+0x72>
 80099c6:	2b02      	cmp	r3, #2
 80099c8:	d822      	bhi.n	8009a10 <USBD_LL_SetupStage+0x86>
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d002      	beq.n	80099d4 <USBD_LL_SetupStage+0x4a>
 80099ce:	2b01      	cmp	r3, #1
 80099d0:	d00a      	beq.n	80099e8 <USBD_LL_SetupStage+0x5e>
 80099d2:	e01d      	b.n	8009a10 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80099da:	4619      	mov	r1, r3
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f000 fb63 	bl	800a0a8 <USBD_StdDevReq>
 80099e2:	4603      	mov	r3, r0
 80099e4:	73fb      	strb	r3, [r7, #15]
      break;
 80099e6:	e020      	b.n	8009a2a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80099ee:	4619      	mov	r1, r3
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f000 fbcb 	bl	800a18c <USBD_StdItfReq>
 80099f6:	4603      	mov	r3, r0
 80099f8:	73fb      	strb	r3, [r7, #15]
      break;
 80099fa:	e016      	b.n	8009a2a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009a02:	4619      	mov	r1, r3
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f000 fc2d 	bl	800a264 <USBD_StdEPReq>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	73fb      	strb	r3, [r7, #15]
      break;
 8009a0e:	e00c      	b.n	8009a2a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009a16:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009a1a:	b2db      	uxtb	r3, r3
 8009a1c:	4619      	mov	r1, r3
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f001 fe26 	bl	800b670 <USBD_LL_StallEP>
 8009a24:	4603      	mov	r3, r0
 8009a26:	73fb      	strb	r3, [r7, #15]
      break;
 8009a28:	bf00      	nop
  }

  return ret;
 8009a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3710      	adds	r7, #16
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}

08009a34 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b086      	sub	sp, #24
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	60f8      	str	r0, [r7, #12]
 8009a3c:	460b      	mov	r3, r1
 8009a3e:	607a      	str	r2, [r7, #4]
 8009a40:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009a42:	2300      	movs	r3, #0
 8009a44:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009a46:	7afb      	ldrb	r3, [r7, #11]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d16e      	bne.n	8009b2a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009a52:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009a5a:	2b03      	cmp	r3, #3
 8009a5c:	f040 8098 	bne.w	8009b90 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	689a      	ldr	r2, [r3, #8]
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	68db      	ldr	r3, [r3, #12]
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d913      	bls.n	8009a94 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	689a      	ldr	r2, [r3, #8]
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	68db      	ldr	r3, [r3, #12]
 8009a74:	1ad2      	subs	r2, r2, r3
 8009a76:	693b      	ldr	r3, [r7, #16]
 8009a78:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	68da      	ldr	r2, [r3, #12]
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	689b      	ldr	r3, [r3, #8]
 8009a82:	4293      	cmp	r3, r2
 8009a84:	bf28      	it	cs
 8009a86:	4613      	movcs	r3, r2
 8009a88:	461a      	mov	r2, r3
 8009a8a:	6879      	ldr	r1, [r7, #4]
 8009a8c:	68f8      	ldr	r0, [r7, #12]
 8009a8e:	f001 f9be 	bl	800ae0e <USBD_CtlContinueRx>
 8009a92:	e07d      	b.n	8009b90 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009a9a:	f003 031f 	and.w	r3, r3, #31
 8009a9e:	2b02      	cmp	r3, #2
 8009aa0:	d014      	beq.n	8009acc <USBD_LL_DataOutStage+0x98>
 8009aa2:	2b02      	cmp	r3, #2
 8009aa4:	d81d      	bhi.n	8009ae2 <USBD_LL_DataOutStage+0xae>
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d002      	beq.n	8009ab0 <USBD_LL_DataOutStage+0x7c>
 8009aaa:	2b01      	cmp	r3, #1
 8009aac:	d003      	beq.n	8009ab6 <USBD_LL_DataOutStage+0x82>
 8009aae:	e018      	b.n	8009ae2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	75bb      	strb	r3, [r7, #22]
            break;
 8009ab4:	e018      	b.n	8009ae8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009abc:	b2db      	uxtb	r3, r3
 8009abe:	4619      	mov	r1, r3
 8009ac0:	68f8      	ldr	r0, [r7, #12]
 8009ac2:	f000 fa64 	bl	8009f8e <USBD_CoreFindIF>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	75bb      	strb	r3, [r7, #22]
            break;
 8009aca:	e00d      	b.n	8009ae8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	68f8      	ldr	r0, [r7, #12]
 8009ad8:	f000 fa66 	bl	8009fa8 <USBD_CoreFindEP>
 8009adc:	4603      	mov	r3, r0
 8009ade:	75bb      	strb	r3, [r7, #22]
            break;
 8009ae0:	e002      	b.n	8009ae8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	75bb      	strb	r3, [r7, #22]
            break;
 8009ae6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009ae8:	7dbb      	ldrb	r3, [r7, #22]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d119      	bne.n	8009b22 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009af4:	b2db      	uxtb	r3, r3
 8009af6:	2b03      	cmp	r3, #3
 8009af8:	d113      	bne.n	8009b22 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009afa:	7dba      	ldrb	r2, [r7, #22]
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	32ae      	adds	r2, #174	@ 0xae
 8009b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b04:	691b      	ldr	r3, [r3, #16]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d00b      	beq.n	8009b22 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009b0a:	7dba      	ldrb	r2, [r7, #22]
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009b12:	7dba      	ldrb	r2, [r7, #22]
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	32ae      	adds	r2, #174	@ 0xae
 8009b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b1c:	691b      	ldr	r3, [r3, #16]
 8009b1e:	68f8      	ldr	r0, [r7, #12]
 8009b20:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009b22:	68f8      	ldr	r0, [r7, #12]
 8009b24:	f001 f984 	bl	800ae30 <USBD_CtlSendStatus>
 8009b28:	e032      	b.n	8009b90 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009b2a:	7afb      	ldrb	r3, [r7, #11]
 8009b2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b30:	b2db      	uxtb	r3, r3
 8009b32:	4619      	mov	r1, r3
 8009b34:	68f8      	ldr	r0, [r7, #12]
 8009b36:	f000 fa37 	bl	8009fa8 <USBD_CoreFindEP>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009b3e:	7dbb      	ldrb	r3, [r7, #22]
 8009b40:	2bff      	cmp	r3, #255	@ 0xff
 8009b42:	d025      	beq.n	8009b90 <USBD_LL_DataOutStage+0x15c>
 8009b44:	7dbb      	ldrb	r3, [r7, #22]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d122      	bne.n	8009b90 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b50:	b2db      	uxtb	r3, r3
 8009b52:	2b03      	cmp	r3, #3
 8009b54:	d117      	bne.n	8009b86 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009b56:	7dba      	ldrb	r2, [r7, #22]
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	32ae      	adds	r2, #174	@ 0xae
 8009b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b60:	699b      	ldr	r3, [r3, #24]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d00f      	beq.n	8009b86 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009b66:	7dba      	ldrb	r2, [r7, #22]
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009b6e:	7dba      	ldrb	r2, [r7, #22]
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	32ae      	adds	r2, #174	@ 0xae
 8009b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b78:	699b      	ldr	r3, [r3, #24]
 8009b7a:	7afa      	ldrb	r2, [r7, #11]
 8009b7c:	4611      	mov	r1, r2
 8009b7e:	68f8      	ldr	r0, [r7, #12]
 8009b80:	4798      	blx	r3
 8009b82:	4603      	mov	r3, r0
 8009b84:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009b86:	7dfb      	ldrb	r3, [r7, #23]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d001      	beq.n	8009b90 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009b8c:	7dfb      	ldrb	r3, [r7, #23]
 8009b8e:	e000      	b.n	8009b92 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009b90:	2300      	movs	r3, #0
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3718      	adds	r7, #24
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}

08009b9a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009b9a:	b580      	push	{r7, lr}
 8009b9c:	b086      	sub	sp, #24
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	60f8      	str	r0, [r7, #12]
 8009ba2:	460b      	mov	r3, r1
 8009ba4:	607a      	str	r2, [r7, #4]
 8009ba6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009ba8:	7afb      	ldrb	r3, [r7, #11]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d16f      	bne.n	8009c8e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	3314      	adds	r3, #20
 8009bb2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009bba:	2b02      	cmp	r3, #2
 8009bbc:	d15a      	bne.n	8009c74 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	689a      	ldr	r2, [r3, #8]
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	68db      	ldr	r3, [r3, #12]
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	d914      	bls.n	8009bf4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	689a      	ldr	r2, [r3, #8]
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	68db      	ldr	r3, [r3, #12]
 8009bd2:	1ad2      	subs	r2, r2, r3
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	689b      	ldr	r3, [r3, #8]
 8009bdc:	461a      	mov	r2, r3
 8009bde:	6879      	ldr	r1, [r7, #4]
 8009be0:	68f8      	ldr	r0, [r7, #12]
 8009be2:	f001 f8e6 	bl	800adb2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009be6:	2300      	movs	r3, #0
 8009be8:	2200      	movs	r2, #0
 8009bea:	2100      	movs	r1, #0
 8009bec:	68f8      	ldr	r0, [r7, #12]
 8009bee:	f001 fde9 	bl	800b7c4 <USBD_LL_PrepareReceive>
 8009bf2:	e03f      	b.n	8009c74 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	68da      	ldr	r2, [r3, #12]
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	689b      	ldr	r3, [r3, #8]
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d11c      	bne.n	8009c3a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009c00:	693b      	ldr	r3, [r7, #16]
 8009c02:	685a      	ldr	r2, [r3, #4]
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	d316      	bcc.n	8009c3a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009c0c:	693b      	ldr	r3, [r7, #16]
 8009c0e:	685a      	ldr	r2, [r3, #4]
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009c16:	429a      	cmp	r2, r3
 8009c18:	d20f      	bcs.n	8009c3a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	2100      	movs	r1, #0
 8009c1e:	68f8      	ldr	r0, [r7, #12]
 8009c20:	f001 f8c7 	bl	800adb2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2200      	movs	r2, #0
 8009c28:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	2200      	movs	r2, #0
 8009c30:	2100      	movs	r1, #0
 8009c32:	68f8      	ldr	r0, [r7, #12]
 8009c34:	f001 fdc6 	bl	800b7c4 <USBD_LL_PrepareReceive>
 8009c38:	e01c      	b.n	8009c74 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c40:	b2db      	uxtb	r3, r3
 8009c42:	2b03      	cmp	r3, #3
 8009c44:	d10f      	bne.n	8009c66 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c4c:	68db      	ldr	r3, [r3, #12]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d009      	beq.n	8009c66 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2200      	movs	r2, #0
 8009c56:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c60:	68db      	ldr	r3, [r3, #12]
 8009c62:	68f8      	ldr	r0, [r7, #12]
 8009c64:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c66:	2180      	movs	r1, #128	@ 0x80
 8009c68:	68f8      	ldr	r0, [r7, #12]
 8009c6a:	f001 fd01 	bl	800b670 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009c6e:	68f8      	ldr	r0, [r7, #12]
 8009c70:	f001 f8f1 	bl	800ae56 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d03a      	beq.n	8009cf4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009c7e:	68f8      	ldr	r0, [r7, #12]
 8009c80:	f7ff fe42 	bl	8009908 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2200      	movs	r2, #0
 8009c88:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009c8c:	e032      	b.n	8009cf4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009c8e:	7afb      	ldrb	r3, [r7, #11]
 8009c90:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009c94:	b2db      	uxtb	r3, r3
 8009c96:	4619      	mov	r1, r3
 8009c98:	68f8      	ldr	r0, [r7, #12]
 8009c9a:	f000 f985 	bl	8009fa8 <USBD_CoreFindEP>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009ca2:	7dfb      	ldrb	r3, [r7, #23]
 8009ca4:	2bff      	cmp	r3, #255	@ 0xff
 8009ca6:	d025      	beq.n	8009cf4 <USBD_LL_DataInStage+0x15a>
 8009ca8:	7dfb      	ldrb	r3, [r7, #23]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d122      	bne.n	8009cf4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cb4:	b2db      	uxtb	r3, r3
 8009cb6:	2b03      	cmp	r3, #3
 8009cb8:	d11c      	bne.n	8009cf4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009cba:	7dfa      	ldrb	r2, [r7, #23]
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	32ae      	adds	r2, #174	@ 0xae
 8009cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cc4:	695b      	ldr	r3, [r3, #20]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d014      	beq.n	8009cf4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009cca:	7dfa      	ldrb	r2, [r7, #23]
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009cd2:	7dfa      	ldrb	r2, [r7, #23]
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	32ae      	adds	r2, #174	@ 0xae
 8009cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cdc:	695b      	ldr	r3, [r3, #20]
 8009cde:	7afa      	ldrb	r2, [r7, #11]
 8009ce0:	4611      	mov	r1, r2
 8009ce2:	68f8      	ldr	r0, [r7, #12]
 8009ce4:	4798      	blx	r3
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009cea:	7dbb      	ldrb	r3, [r7, #22]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d001      	beq.n	8009cf4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009cf0:	7dbb      	ldrb	r3, [r7, #22]
 8009cf2:	e000      	b.n	8009cf6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009cf4:	2300      	movs	r3, #0
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3718      	adds	r7, #24
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}

08009cfe <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009cfe:	b580      	push	{r7, lr}
 8009d00:	b084      	sub	sp, #16
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d06:	2300      	movs	r3, #0
 8009d08:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2200      	movs	r2, #0
 8009d16:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2200      	movs	r2, #0
 8009d24:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d014      	beq.n	8009d64 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d00e      	beq.n	8009d64 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d4c:	685b      	ldr	r3, [r3, #4]
 8009d4e:	687a      	ldr	r2, [r7, #4]
 8009d50:	6852      	ldr	r2, [r2, #4]
 8009d52:	b2d2      	uxtb	r2, r2
 8009d54:	4611      	mov	r1, r2
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	4798      	blx	r3
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d001      	beq.n	8009d64 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009d60:	2303      	movs	r3, #3
 8009d62:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009d64:	2340      	movs	r3, #64	@ 0x40
 8009d66:	2200      	movs	r2, #0
 8009d68:	2100      	movs	r1, #0
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f001 fc3b 	bl	800b5e6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2201      	movs	r2, #1
 8009d74:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2240      	movs	r2, #64	@ 0x40
 8009d7c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009d80:	2340      	movs	r3, #64	@ 0x40
 8009d82:	2200      	movs	r2, #0
 8009d84:	2180      	movs	r1, #128	@ 0x80
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f001 fc2d 	bl	800b5e6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2201      	movs	r2, #1
 8009d90:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2240      	movs	r2, #64	@ 0x40
 8009d96:	621a      	str	r2, [r3, #32]

  return ret;
 8009d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3710      	adds	r7, #16
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}

08009da2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009da2:	b480      	push	{r7}
 8009da4:	b083      	sub	sp, #12
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	6078      	str	r0, [r7, #4]
 8009daa:	460b      	mov	r3, r1
 8009dac:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	78fa      	ldrb	r2, [r7, #3]
 8009db2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009db4:	2300      	movs	r3, #0
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	370c      	adds	r7, #12
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc0:	4770      	bx	lr

08009dc2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009dc2:	b480      	push	{r7}
 8009dc4:	b083      	sub	sp, #12
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009dd0:	b2db      	uxtb	r3, r3
 8009dd2:	2b04      	cmp	r3, #4
 8009dd4:	d006      	beq.n	8009de4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ddc:	b2da      	uxtb	r2, r3
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2204      	movs	r2, #4
 8009de8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009dec:	2300      	movs	r3, #0
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	370c      	adds	r7, #12
 8009df2:	46bd      	mov	sp, r7
 8009df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df8:	4770      	bx	lr

08009dfa <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009dfa:	b480      	push	{r7}
 8009dfc:	b083      	sub	sp, #12
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e08:	b2db      	uxtb	r3, r3
 8009e0a:	2b04      	cmp	r3, #4
 8009e0c:	d106      	bne.n	8009e1c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009e14:	b2da      	uxtb	r2, r3
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009e1c:	2300      	movs	r3, #0
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	370c      	adds	r7, #12
 8009e22:	46bd      	mov	sp, r7
 8009e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e28:	4770      	bx	lr

08009e2a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009e2a:	b580      	push	{r7, lr}
 8009e2c:	b082      	sub	sp, #8
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e38:	b2db      	uxtb	r3, r3
 8009e3a:	2b03      	cmp	r3, #3
 8009e3c:	d110      	bne.n	8009e60 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d00b      	beq.n	8009e60 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e4e:	69db      	ldr	r3, [r3, #28]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d005      	beq.n	8009e60 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e5a:	69db      	ldr	r3, [r3, #28]
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009e60:	2300      	movs	r3, #0
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3708      	adds	r7, #8
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}

08009e6a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009e6a:	b580      	push	{r7, lr}
 8009e6c:	b082      	sub	sp, #8
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	6078      	str	r0, [r7, #4]
 8009e72:	460b      	mov	r3, r1
 8009e74:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	32ae      	adds	r2, #174	@ 0xae
 8009e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d101      	bne.n	8009e8c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009e88:	2303      	movs	r3, #3
 8009e8a:	e01c      	b.n	8009ec6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e92:	b2db      	uxtb	r3, r3
 8009e94:	2b03      	cmp	r3, #3
 8009e96:	d115      	bne.n	8009ec4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	32ae      	adds	r2, #174	@ 0xae
 8009ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ea6:	6a1b      	ldr	r3, [r3, #32]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d00b      	beq.n	8009ec4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	32ae      	adds	r2, #174	@ 0xae
 8009eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eba:	6a1b      	ldr	r3, [r3, #32]
 8009ebc:	78fa      	ldrb	r2, [r7, #3]
 8009ebe:	4611      	mov	r1, r2
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009ec4:	2300      	movs	r3, #0
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3708      	adds	r7, #8
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}

08009ece <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009ece:	b580      	push	{r7, lr}
 8009ed0:	b082      	sub	sp, #8
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	6078      	str	r0, [r7, #4]
 8009ed6:	460b      	mov	r3, r1
 8009ed8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	32ae      	adds	r2, #174	@ 0xae
 8009ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d101      	bne.n	8009ef0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009eec:	2303      	movs	r3, #3
 8009eee:	e01c      	b.n	8009f2a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ef6:	b2db      	uxtb	r3, r3
 8009ef8:	2b03      	cmp	r3, #3
 8009efa:	d115      	bne.n	8009f28 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	32ae      	adds	r2, #174	@ 0xae
 8009f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d00b      	beq.n	8009f28 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	32ae      	adds	r2, #174	@ 0xae
 8009f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f20:	78fa      	ldrb	r2, [r7, #3]
 8009f22:	4611      	mov	r1, r2
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009f28:	2300      	movs	r3, #0
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3708      	adds	r7, #8
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}

08009f32 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009f32:	b480      	push	{r7}
 8009f34:	b083      	sub	sp, #12
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009f3a:	2300      	movs	r3, #0
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	370c      	adds	r7, #12
 8009f40:	46bd      	mov	sp, r7
 8009f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f46:	4770      	bx	lr

08009f48 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b084      	sub	sp, #16
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009f50:	2300      	movs	r3, #0
 8009f52:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2201      	movs	r2, #1
 8009f58:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d00e      	beq.n	8009f84 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	687a      	ldr	r2, [r7, #4]
 8009f70:	6852      	ldr	r2, [r2, #4]
 8009f72:	b2d2      	uxtb	r2, r2
 8009f74:	4611      	mov	r1, r2
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	4798      	blx	r3
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d001      	beq.n	8009f84 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009f80:	2303      	movs	r3, #3
 8009f82:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3710      	adds	r7, #16
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}

08009f8e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009f8e:	b480      	push	{r7}
 8009f90:	b083      	sub	sp, #12
 8009f92:	af00      	add	r7, sp, #0
 8009f94:	6078      	str	r0, [r7, #4]
 8009f96:	460b      	mov	r3, r1
 8009f98:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009f9a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	370c      	adds	r7, #12
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr

08009fa8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b083      	sub	sp, #12
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	460b      	mov	r3, r1
 8009fb2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009fb4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	370c      	adds	r7, #12
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr

08009fc2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009fc2:	b580      	push	{r7, lr}
 8009fc4:	b086      	sub	sp, #24
 8009fc6:	af00      	add	r7, sp, #0
 8009fc8:	6078      	str	r0, [r7, #4]
 8009fca:	460b      	mov	r3, r1
 8009fcc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	885b      	ldrh	r3, [r3, #2]
 8009fde:	b29b      	uxth	r3, r3
 8009fe0:	68fa      	ldr	r2, [r7, #12]
 8009fe2:	7812      	ldrb	r2, [r2, #0]
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d91f      	bls.n	800a028 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	781b      	ldrb	r3, [r3, #0]
 8009fec:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009fee:	e013      	b.n	800a018 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009ff0:	f107 030a 	add.w	r3, r7, #10
 8009ff4:	4619      	mov	r1, r3
 8009ff6:	6978      	ldr	r0, [r7, #20]
 8009ff8:	f000 f81b 	bl	800a032 <USBD_GetNextDesc>
 8009ffc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	785b      	ldrb	r3, [r3, #1]
 800a002:	2b05      	cmp	r3, #5
 800a004:	d108      	bne.n	800a018 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	789b      	ldrb	r3, [r3, #2]
 800a00e:	78fa      	ldrb	r2, [r7, #3]
 800a010:	429a      	cmp	r2, r3
 800a012:	d008      	beq.n	800a026 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a014:	2300      	movs	r3, #0
 800a016:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	885b      	ldrh	r3, [r3, #2]
 800a01c:	b29a      	uxth	r2, r3
 800a01e:	897b      	ldrh	r3, [r7, #10]
 800a020:	429a      	cmp	r2, r3
 800a022:	d8e5      	bhi.n	8009ff0 <USBD_GetEpDesc+0x2e>
 800a024:	e000      	b.n	800a028 <USBD_GetEpDesc+0x66>
          break;
 800a026:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a028:	693b      	ldr	r3, [r7, #16]
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3718      	adds	r7, #24
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}

0800a032 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a032:	b480      	push	{r7}
 800a034:	b085      	sub	sp, #20
 800a036:	af00      	add	r7, sp, #0
 800a038:	6078      	str	r0, [r7, #4]
 800a03a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	881b      	ldrh	r3, [r3, #0]
 800a044:	68fa      	ldr	r2, [r7, #12]
 800a046:	7812      	ldrb	r2, [r2, #0]
 800a048:	4413      	add	r3, r2
 800a04a:	b29a      	uxth	r2, r3
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	781b      	ldrb	r3, [r3, #0]
 800a054:	461a      	mov	r2, r3
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	4413      	add	r3, r2
 800a05a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a05c:	68fb      	ldr	r3, [r7, #12]
}
 800a05e:	4618      	mov	r0, r3
 800a060:	3714      	adds	r7, #20
 800a062:	46bd      	mov	sp, r7
 800a064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a068:	4770      	bx	lr

0800a06a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a06a:	b480      	push	{r7}
 800a06c:	b087      	sub	sp, #28
 800a06e:	af00      	add	r7, sp, #0
 800a070:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	781b      	ldrb	r3, [r3, #0]
 800a07a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	3301      	adds	r3, #1
 800a080:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	781b      	ldrb	r3, [r3, #0]
 800a086:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a088:	8a3b      	ldrh	r3, [r7, #16]
 800a08a:	021b      	lsls	r3, r3, #8
 800a08c:	b21a      	sxth	r2, r3
 800a08e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a092:	4313      	orrs	r3, r2
 800a094:	b21b      	sxth	r3, r3
 800a096:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a098:	89fb      	ldrh	r3, [r7, #14]
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	371c      	adds	r7, #28
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a4:	4770      	bx	lr
	...

0800a0a8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b084      	sub	sp, #16
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	781b      	ldrb	r3, [r3, #0]
 800a0ba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a0be:	2b40      	cmp	r3, #64	@ 0x40
 800a0c0:	d005      	beq.n	800a0ce <USBD_StdDevReq+0x26>
 800a0c2:	2b40      	cmp	r3, #64	@ 0x40
 800a0c4:	d857      	bhi.n	800a176 <USBD_StdDevReq+0xce>
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d00f      	beq.n	800a0ea <USBD_StdDevReq+0x42>
 800a0ca:	2b20      	cmp	r3, #32
 800a0cc:	d153      	bne.n	800a176 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	32ae      	adds	r2, #174	@ 0xae
 800a0d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0dc:	689b      	ldr	r3, [r3, #8]
 800a0de:	6839      	ldr	r1, [r7, #0]
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	4798      	blx	r3
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	73fb      	strb	r3, [r7, #15]
      break;
 800a0e8:	e04a      	b.n	800a180 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	785b      	ldrb	r3, [r3, #1]
 800a0ee:	2b09      	cmp	r3, #9
 800a0f0:	d83b      	bhi.n	800a16a <USBD_StdDevReq+0xc2>
 800a0f2:	a201      	add	r2, pc, #4	@ (adr r2, 800a0f8 <USBD_StdDevReq+0x50>)
 800a0f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0f8:	0800a14d 	.word	0x0800a14d
 800a0fc:	0800a161 	.word	0x0800a161
 800a100:	0800a16b 	.word	0x0800a16b
 800a104:	0800a157 	.word	0x0800a157
 800a108:	0800a16b 	.word	0x0800a16b
 800a10c:	0800a12b 	.word	0x0800a12b
 800a110:	0800a121 	.word	0x0800a121
 800a114:	0800a16b 	.word	0x0800a16b
 800a118:	0800a143 	.word	0x0800a143
 800a11c:	0800a135 	.word	0x0800a135
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a120:	6839      	ldr	r1, [r7, #0]
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f000 fa3c 	bl	800a5a0 <USBD_GetDescriptor>
          break;
 800a128:	e024      	b.n	800a174 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a12a:	6839      	ldr	r1, [r7, #0]
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f000 fbcb 	bl	800a8c8 <USBD_SetAddress>
          break;
 800a132:	e01f      	b.n	800a174 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a134:	6839      	ldr	r1, [r7, #0]
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f000 fc0a 	bl	800a950 <USBD_SetConfig>
 800a13c:	4603      	mov	r3, r0
 800a13e:	73fb      	strb	r3, [r7, #15]
          break;
 800a140:	e018      	b.n	800a174 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a142:	6839      	ldr	r1, [r7, #0]
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f000 fcad 	bl	800aaa4 <USBD_GetConfig>
          break;
 800a14a:	e013      	b.n	800a174 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a14c:	6839      	ldr	r1, [r7, #0]
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f000 fcde 	bl	800ab10 <USBD_GetStatus>
          break;
 800a154:	e00e      	b.n	800a174 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a156:	6839      	ldr	r1, [r7, #0]
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f000 fd0d 	bl	800ab78 <USBD_SetFeature>
          break;
 800a15e:	e009      	b.n	800a174 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a160:	6839      	ldr	r1, [r7, #0]
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 fd31 	bl	800abca <USBD_ClrFeature>
          break;
 800a168:	e004      	b.n	800a174 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a16a:	6839      	ldr	r1, [r7, #0]
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f000 fd88 	bl	800ac82 <USBD_CtlError>
          break;
 800a172:	bf00      	nop
      }
      break;
 800a174:	e004      	b.n	800a180 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a176:	6839      	ldr	r1, [r7, #0]
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f000 fd82 	bl	800ac82 <USBD_CtlError>
      break;
 800a17e:	bf00      	nop
  }

  return ret;
 800a180:	7bfb      	ldrb	r3, [r7, #15]
}
 800a182:	4618      	mov	r0, r3
 800a184:	3710      	adds	r7, #16
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
 800a18a:	bf00      	nop

0800a18c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b084      	sub	sp, #16
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a196:	2300      	movs	r3, #0
 800a198:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	781b      	ldrb	r3, [r3, #0]
 800a19e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a1a2:	2b40      	cmp	r3, #64	@ 0x40
 800a1a4:	d005      	beq.n	800a1b2 <USBD_StdItfReq+0x26>
 800a1a6:	2b40      	cmp	r3, #64	@ 0x40
 800a1a8:	d852      	bhi.n	800a250 <USBD_StdItfReq+0xc4>
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d001      	beq.n	800a1b2 <USBD_StdItfReq+0x26>
 800a1ae:	2b20      	cmp	r3, #32
 800a1b0:	d14e      	bne.n	800a250 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1b8:	b2db      	uxtb	r3, r3
 800a1ba:	3b01      	subs	r3, #1
 800a1bc:	2b02      	cmp	r3, #2
 800a1be:	d840      	bhi.n	800a242 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	889b      	ldrh	r3, [r3, #4]
 800a1c4:	b2db      	uxtb	r3, r3
 800a1c6:	2b01      	cmp	r3, #1
 800a1c8:	d836      	bhi.n	800a238 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	889b      	ldrh	r3, [r3, #4]
 800a1ce:	b2db      	uxtb	r3, r3
 800a1d0:	4619      	mov	r1, r3
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f7ff fedb 	bl	8009f8e <USBD_CoreFindIF>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a1dc:	7bbb      	ldrb	r3, [r7, #14]
 800a1de:	2bff      	cmp	r3, #255	@ 0xff
 800a1e0:	d01d      	beq.n	800a21e <USBD_StdItfReq+0x92>
 800a1e2:	7bbb      	ldrb	r3, [r7, #14]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d11a      	bne.n	800a21e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a1e8:	7bba      	ldrb	r2, [r7, #14]
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	32ae      	adds	r2, #174	@ 0xae
 800a1ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1f2:	689b      	ldr	r3, [r3, #8]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d00f      	beq.n	800a218 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a1f8:	7bba      	ldrb	r2, [r7, #14]
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a200:	7bba      	ldrb	r2, [r7, #14]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	32ae      	adds	r2, #174	@ 0xae
 800a206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a20a:	689b      	ldr	r3, [r3, #8]
 800a20c:	6839      	ldr	r1, [r7, #0]
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	4798      	blx	r3
 800a212:	4603      	mov	r3, r0
 800a214:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a216:	e004      	b.n	800a222 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a218:	2303      	movs	r3, #3
 800a21a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a21c:	e001      	b.n	800a222 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a21e:	2303      	movs	r3, #3
 800a220:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	88db      	ldrh	r3, [r3, #6]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d110      	bne.n	800a24c <USBD_StdItfReq+0xc0>
 800a22a:	7bfb      	ldrb	r3, [r7, #15]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d10d      	bne.n	800a24c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f000 fdfd 	bl	800ae30 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a236:	e009      	b.n	800a24c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a238:	6839      	ldr	r1, [r7, #0]
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f000 fd21 	bl	800ac82 <USBD_CtlError>
          break;
 800a240:	e004      	b.n	800a24c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a242:	6839      	ldr	r1, [r7, #0]
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f000 fd1c 	bl	800ac82 <USBD_CtlError>
          break;
 800a24a:	e000      	b.n	800a24e <USBD_StdItfReq+0xc2>
          break;
 800a24c:	bf00      	nop
      }
      break;
 800a24e:	e004      	b.n	800a25a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a250:	6839      	ldr	r1, [r7, #0]
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f000 fd15 	bl	800ac82 <USBD_CtlError>
      break;
 800a258:	bf00      	nop
  }

  return ret;
 800a25a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	3710      	adds	r7, #16
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}

0800a264 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b084      	sub	sp, #16
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
 800a26c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a26e:	2300      	movs	r3, #0
 800a270:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	889b      	ldrh	r3, [r3, #4]
 800a276:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a280:	2b40      	cmp	r3, #64	@ 0x40
 800a282:	d007      	beq.n	800a294 <USBD_StdEPReq+0x30>
 800a284:	2b40      	cmp	r3, #64	@ 0x40
 800a286:	f200 817f 	bhi.w	800a588 <USBD_StdEPReq+0x324>
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d02a      	beq.n	800a2e4 <USBD_StdEPReq+0x80>
 800a28e:	2b20      	cmp	r3, #32
 800a290:	f040 817a 	bne.w	800a588 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a294:	7bbb      	ldrb	r3, [r7, #14]
 800a296:	4619      	mov	r1, r3
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f7ff fe85 	bl	8009fa8 <USBD_CoreFindEP>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a2a2:	7b7b      	ldrb	r3, [r7, #13]
 800a2a4:	2bff      	cmp	r3, #255	@ 0xff
 800a2a6:	f000 8174 	beq.w	800a592 <USBD_StdEPReq+0x32e>
 800a2aa:	7b7b      	ldrb	r3, [r7, #13]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	f040 8170 	bne.w	800a592 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a2b2:	7b7a      	ldrb	r2, [r7, #13]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a2ba:	7b7a      	ldrb	r2, [r7, #13]
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	32ae      	adds	r2, #174	@ 0xae
 800a2c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2c4:	689b      	ldr	r3, [r3, #8]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	f000 8163 	beq.w	800a592 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a2cc:	7b7a      	ldrb	r2, [r7, #13]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	32ae      	adds	r2, #174	@ 0xae
 800a2d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2d6:	689b      	ldr	r3, [r3, #8]
 800a2d8:	6839      	ldr	r1, [r7, #0]
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	4798      	blx	r3
 800a2de:	4603      	mov	r3, r0
 800a2e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a2e2:	e156      	b.n	800a592 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	785b      	ldrb	r3, [r3, #1]
 800a2e8:	2b03      	cmp	r3, #3
 800a2ea:	d008      	beq.n	800a2fe <USBD_StdEPReq+0x9a>
 800a2ec:	2b03      	cmp	r3, #3
 800a2ee:	f300 8145 	bgt.w	800a57c <USBD_StdEPReq+0x318>
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	f000 809b 	beq.w	800a42e <USBD_StdEPReq+0x1ca>
 800a2f8:	2b01      	cmp	r3, #1
 800a2fa:	d03c      	beq.n	800a376 <USBD_StdEPReq+0x112>
 800a2fc:	e13e      	b.n	800a57c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a304:	b2db      	uxtb	r3, r3
 800a306:	2b02      	cmp	r3, #2
 800a308:	d002      	beq.n	800a310 <USBD_StdEPReq+0xac>
 800a30a:	2b03      	cmp	r3, #3
 800a30c:	d016      	beq.n	800a33c <USBD_StdEPReq+0xd8>
 800a30e:	e02c      	b.n	800a36a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a310:	7bbb      	ldrb	r3, [r7, #14]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d00d      	beq.n	800a332 <USBD_StdEPReq+0xce>
 800a316:	7bbb      	ldrb	r3, [r7, #14]
 800a318:	2b80      	cmp	r3, #128	@ 0x80
 800a31a:	d00a      	beq.n	800a332 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a31c:	7bbb      	ldrb	r3, [r7, #14]
 800a31e:	4619      	mov	r1, r3
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f001 f9a5 	bl	800b670 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a326:	2180      	movs	r1, #128	@ 0x80
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f001 f9a1 	bl	800b670 <USBD_LL_StallEP>
 800a32e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a330:	e020      	b.n	800a374 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a332:	6839      	ldr	r1, [r7, #0]
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f000 fca4 	bl	800ac82 <USBD_CtlError>
              break;
 800a33a:	e01b      	b.n	800a374 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	885b      	ldrh	r3, [r3, #2]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d10e      	bne.n	800a362 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a344:	7bbb      	ldrb	r3, [r7, #14]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d00b      	beq.n	800a362 <USBD_StdEPReq+0xfe>
 800a34a:	7bbb      	ldrb	r3, [r7, #14]
 800a34c:	2b80      	cmp	r3, #128	@ 0x80
 800a34e:	d008      	beq.n	800a362 <USBD_StdEPReq+0xfe>
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	88db      	ldrh	r3, [r3, #6]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d104      	bne.n	800a362 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a358:	7bbb      	ldrb	r3, [r7, #14]
 800a35a:	4619      	mov	r1, r3
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f001 f987 	bl	800b670 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f000 fd64 	bl	800ae30 <USBD_CtlSendStatus>

              break;
 800a368:	e004      	b.n	800a374 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a36a:	6839      	ldr	r1, [r7, #0]
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f000 fc88 	bl	800ac82 <USBD_CtlError>
              break;
 800a372:	bf00      	nop
          }
          break;
 800a374:	e107      	b.n	800a586 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a37c:	b2db      	uxtb	r3, r3
 800a37e:	2b02      	cmp	r3, #2
 800a380:	d002      	beq.n	800a388 <USBD_StdEPReq+0x124>
 800a382:	2b03      	cmp	r3, #3
 800a384:	d016      	beq.n	800a3b4 <USBD_StdEPReq+0x150>
 800a386:	e04b      	b.n	800a420 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a388:	7bbb      	ldrb	r3, [r7, #14]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d00d      	beq.n	800a3aa <USBD_StdEPReq+0x146>
 800a38e:	7bbb      	ldrb	r3, [r7, #14]
 800a390:	2b80      	cmp	r3, #128	@ 0x80
 800a392:	d00a      	beq.n	800a3aa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a394:	7bbb      	ldrb	r3, [r7, #14]
 800a396:	4619      	mov	r1, r3
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f001 f969 	bl	800b670 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a39e:	2180      	movs	r1, #128	@ 0x80
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f001 f965 	bl	800b670 <USBD_LL_StallEP>
 800a3a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a3a8:	e040      	b.n	800a42c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a3aa:	6839      	ldr	r1, [r7, #0]
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f000 fc68 	bl	800ac82 <USBD_CtlError>
              break;
 800a3b2:	e03b      	b.n	800a42c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	885b      	ldrh	r3, [r3, #2]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d136      	bne.n	800a42a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a3bc:	7bbb      	ldrb	r3, [r7, #14]
 800a3be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d004      	beq.n	800a3d0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a3c6:	7bbb      	ldrb	r3, [r7, #14]
 800a3c8:	4619      	mov	r1, r3
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f001 f96f 	bl	800b6ae <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f000 fd2d 	bl	800ae30 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a3d6:	7bbb      	ldrb	r3, [r7, #14]
 800a3d8:	4619      	mov	r1, r3
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f7ff fde4 	bl	8009fa8 <USBD_CoreFindEP>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a3e4:	7b7b      	ldrb	r3, [r7, #13]
 800a3e6:	2bff      	cmp	r3, #255	@ 0xff
 800a3e8:	d01f      	beq.n	800a42a <USBD_StdEPReq+0x1c6>
 800a3ea:	7b7b      	ldrb	r3, [r7, #13]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d11c      	bne.n	800a42a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a3f0:	7b7a      	ldrb	r2, [r7, #13]
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a3f8:	7b7a      	ldrb	r2, [r7, #13]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	32ae      	adds	r2, #174	@ 0xae
 800a3fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a402:	689b      	ldr	r3, [r3, #8]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d010      	beq.n	800a42a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a408:	7b7a      	ldrb	r2, [r7, #13]
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	32ae      	adds	r2, #174	@ 0xae
 800a40e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a412:	689b      	ldr	r3, [r3, #8]
 800a414:	6839      	ldr	r1, [r7, #0]
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	4798      	blx	r3
 800a41a:	4603      	mov	r3, r0
 800a41c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a41e:	e004      	b.n	800a42a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a420:	6839      	ldr	r1, [r7, #0]
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f000 fc2d 	bl	800ac82 <USBD_CtlError>
              break;
 800a428:	e000      	b.n	800a42c <USBD_StdEPReq+0x1c8>
              break;
 800a42a:	bf00      	nop
          }
          break;
 800a42c:	e0ab      	b.n	800a586 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a434:	b2db      	uxtb	r3, r3
 800a436:	2b02      	cmp	r3, #2
 800a438:	d002      	beq.n	800a440 <USBD_StdEPReq+0x1dc>
 800a43a:	2b03      	cmp	r3, #3
 800a43c:	d032      	beq.n	800a4a4 <USBD_StdEPReq+0x240>
 800a43e:	e097      	b.n	800a570 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a440:	7bbb      	ldrb	r3, [r7, #14]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d007      	beq.n	800a456 <USBD_StdEPReq+0x1f2>
 800a446:	7bbb      	ldrb	r3, [r7, #14]
 800a448:	2b80      	cmp	r3, #128	@ 0x80
 800a44a:	d004      	beq.n	800a456 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a44c:	6839      	ldr	r1, [r7, #0]
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f000 fc17 	bl	800ac82 <USBD_CtlError>
                break;
 800a454:	e091      	b.n	800a57a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a456:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	da0b      	bge.n	800a476 <USBD_StdEPReq+0x212>
 800a45e:	7bbb      	ldrb	r3, [r7, #14]
 800a460:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a464:	4613      	mov	r3, r2
 800a466:	009b      	lsls	r3, r3, #2
 800a468:	4413      	add	r3, r2
 800a46a:	009b      	lsls	r3, r3, #2
 800a46c:	3310      	adds	r3, #16
 800a46e:	687a      	ldr	r2, [r7, #4]
 800a470:	4413      	add	r3, r2
 800a472:	3304      	adds	r3, #4
 800a474:	e00b      	b.n	800a48e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a476:	7bbb      	ldrb	r3, [r7, #14]
 800a478:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a47c:	4613      	mov	r3, r2
 800a47e:	009b      	lsls	r3, r3, #2
 800a480:	4413      	add	r3, r2
 800a482:	009b      	lsls	r3, r3, #2
 800a484:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a488:	687a      	ldr	r2, [r7, #4]
 800a48a:	4413      	add	r3, r2
 800a48c:	3304      	adds	r3, #4
 800a48e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	2200      	movs	r2, #0
 800a494:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	2202      	movs	r2, #2
 800a49a:	4619      	mov	r1, r3
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f000 fc6d 	bl	800ad7c <USBD_CtlSendData>
              break;
 800a4a2:	e06a      	b.n	800a57a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a4a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	da11      	bge.n	800a4d0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a4ac:	7bbb      	ldrb	r3, [r7, #14]
 800a4ae:	f003 020f 	and.w	r2, r3, #15
 800a4b2:	6879      	ldr	r1, [r7, #4]
 800a4b4:	4613      	mov	r3, r2
 800a4b6:	009b      	lsls	r3, r3, #2
 800a4b8:	4413      	add	r3, r2
 800a4ba:	009b      	lsls	r3, r3, #2
 800a4bc:	440b      	add	r3, r1
 800a4be:	3324      	adds	r3, #36	@ 0x24
 800a4c0:	881b      	ldrh	r3, [r3, #0]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d117      	bne.n	800a4f6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a4c6:	6839      	ldr	r1, [r7, #0]
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f000 fbda 	bl	800ac82 <USBD_CtlError>
                  break;
 800a4ce:	e054      	b.n	800a57a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a4d0:	7bbb      	ldrb	r3, [r7, #14]
 800a4d2:	f003 020f 	and.w	r2, r3, #15
 800a4d6:	6879      	ldr	r1, [r7, #4]
 800a4d8:	4613      	mov	r3, r2
 800a4da:	009b      	lsls	r3, r3, #2
 800a4dc:	4413      	add	r3, r2
 800a4de:	009b      	lsls	r3, r3, #2
 800a4e0:	440b      	add	r3, r1
 800a4e2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a4e6:	881b      	ldrh	r3, [r3, #0]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d104      	bne.n	800a4f6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a4ec:	6839      	ldr	r1, [r7, #0]
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 fbc7 	bl	800ac82 <USBD_CtlError>
                  break;
 800a4f4:	e041      	b.n	800a57a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a4f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	da0b      	bge.n	800a516 <USBD_StdEPReq+0x2b2>
 800a4fe:	7bbb      	ldrb	r3, [r7, #14]
 800a500:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a504:	4613      	mov	r3, r2
 800a506:	009b      	lsls	r3, r3, #2
 800a508:	4413      	add	r3, r2
 800a50a:	009b      	lsls	r3, r3, #2
 800a50c:	3310      	adds	r3, #16
 800a50e:	687a      	ldr	r2, [r7, #4]
 800a510:	4413      	add	r3, r2
 800a512:	3304      	adds	r3, #4
 800a514:	e00b      	b.n	800a52e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a516:	7bbb      	ldrb	r3, [r7, #14]
 800a518:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a51c:	4613      	mov	r3, r2
 800a51e:	009b      	lsls	r3, r3, #2
 800a520:	4413      	add	r3, r2
 800a522:	009b      	lsls	r3, r3, #2
 800a524:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a528:	687a      	ldr	r2, [r7, #4]
 800a52a:	4413      	add	r3, r2
 800a52c:	3304      	adds	r3, #4
 800a52e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a530:	7bbb      	ldrb	r3, [r7, #14]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d002      	beq.n	800a53c <USBD_StdEPReq+0x2d8>
 800a536:	7bbb      	ldrb	r3, [r7, #14]
 800a538:	2b80      	cmp	r3, #128	@ 0x80
 800a53a:	d103      	bne.n	800a544 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	2200      	movs	r2, #0
 800a540:	601a      	str	r2, [r3, #0]
 800a542:	e00e      	b.n	800a562 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a544:	7bbb      	ldrb	r3, [r7, #14]
 800a546:	4619      	mov	r1, r3
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f001 f8cf 	bl	800b6ec <USBD_LL_IsStallEP>
 800a54e:	4603      	mov	r3, r0
 800a550:	2b00      	cmp	r3, #0
 800a552:	d003      	beq.n	800a55c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	2201      	movs	r2, #1
 800a558:	601a      	str	r2, [r3, #0]
 800a55a:	e002      	b.n	800a562 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	2200      	movs	r2, #0
 800a560:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	2202      	movs	r2, #2
 800a566:	4619      	mov	r1, r3
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f000 fc07 	bl	800ad7c <USBD_CtlSendData>
              break;
 800a56e:	e004      	b.n	800a57a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a570:	6839      	ldr	r1, [r7, #0]
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f000 fb85 	bl	800ac82 <USBD_CtlError>
              break;
 800a578:	bf00      	nop
          }
          break;
 800a57a:	e004      	b.n	800a586 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a57c:	6839      	ldr	r1, [r7, #0]
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f000 fb7f 	bl	800ac82 <USBD_CtlError>
          break;
 800a584:	bf00      	nop
      }
      break;
 800a586:	e005      	b.n	800a594 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a588:	6839      	ldr	r1, [r7, #0]
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f000 fb79 	bl	800ac82 <USBD_CtlError>
      break;
 800a590:	e000      	b.n	800a594 <USBD_StdEPReq+0x330>
      break;
 800a592:	bf00      	nop
  }

  return ret;
 800a594:	7bfb      	ldrb	r3, [r7, #15]
}
 800a596:	4618      	mov	r0, r3
 800a598:	3710      	adds	r7, #16
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}
	...

0800a5a0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b084      	sub	sp, #16
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
 800a5a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	885b      	ldrh	r3, [r3, #2]
 800a5ba:	0a1b      	lsrs	r3, r3, #8
 800a5bc:	b29b      	uxth	r3, r3
 800a5be:	3b01      	subs	r3, #1
 800a5c0:	2b0e      	cmp	r3, #14
 800a5c2:	f200 8152 	bhi.w	800a86a <USBD_GetDescriptor+0x2ca>
 800a5c6:	a201      	add	r2, pc, #4	@ (adr r2, 800a5cc <USBD_GetDescriptor+0x2c>)
 800a5c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5cc:	0800a63d 	.word	0x0800a63d
 800a5d0:	0800a655 	.word	0x0800a655
 800a5d4:	0800a695 	.word	0x0800a695
 800a5d8:	0800a86b 	.word	0x0800a86b
 800a5dc:	0800a86b 	.word	0x0800a86b
 800a5e0:	0800a80b 	.word	0x0800a80b
 800a5e4:	0800a837 	.word	0x0800a837
 800a5e8:	0800a86b 	.word	0x0800a86b
 800a5ec:	0800a86b 	.word	0x0800a86b
 800a5f0:	0800a86b 	.word	0x0800a86b
 800a5f4:	0800a86b 	.word	0x0800a86b
 800a5f8:	0800a86b 	.word	0x0800a86b
 800a5fc:	0800a86b 	.word	0x0800a86b
 800a600:	0800a86b 	.word	0x0800a86b
 800a604:	0800a609 	.word	0x0800a609
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a60e:	69db      	ldr	r3, [r3, #28]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d00b      	beq.n	800a62c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a61a:	69db      	ldr	r3, [r3, #28]
 800a61c:	687a      	ldr	r2, [r7, #4]
 800a61e:	7c12      	ldrb	r2, [r2, #16]
 800a620:	f107 0108 	add.w	r1, r7, #8
 800a624:	4610      	mov	r0, r2
 800a626:	4798      	blx	r3
 800a628:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a62a:	e126      	b.n	800a87a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a62c:	6839      	ldr	r1, [r7, #0]
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f000 fb27 	bl	800ac82 <USBD_CtlError>
        err++;
 800a634:	7afb      	ldrb	r3, [r7, #11]
 800a636:	3301      	adds	r3, #1
 800a638:	72fb      	strb	r3, [r7, #11]
      break;
 800a63a:	e11e      	b.n	800a87a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	687a      	ldr	r2, [r7, #4]
 800a646:	7c12      	ldrb	r2, [r2, #16]
 800a648:	f107 0108 	add.w	r1, r7, #8
 800a64c:	4610      	mov	r0, r2
 800a64e:	4798      	blx	r3
 800a650:	60f8      	str	r0, [r7, #12]
      break;
 800a652:	e112      	b.n	800a87a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	7c1b      	ldrb	r3, [r3, #16]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d10d      	bne.n	800a678 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a664:	f107 0208 	add.w	r2, r7, #8
 800a668:	4610      	mov	r0, r2
 800a66a:	4798      	blx	r3
 800a66c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	3301      	adds	r3, #1
 800a672:	2202      	movs	r2, #2
 800a674:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a676:	e100      	b.n	800a87a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a67e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a680:	f107 0208 	add.w	r2, r7, #8
 800a684:	4610      	mov	r0, r2
 800a686:	4798      	blx	r3
 800a688:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	3301      	adds	r3, #1
 800a68e:	2202      	movs	r2, #2
 800a690:	701a      	strb	r2, [r3, #0]
      break;
 800a692:	e0f2      	b.n	800a87a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	885b      	ldrh	r3, [r3, #2]
 800a698:	b2db      	uxtb	r3, r3
 800a69a:	2b05      	cmp	r3, #5
 800a69c:	f200 80ac 	bhi.w	800a7f8 <USBD_GetDescriptor+0x258>
 800a6a0:	a201      	add	r2, pc, #4	@ (adr r2, 800a6a8 <USBD_GetDescriptor+0x108>)
 800a6a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6a6:	bf00      	nop
 800a6a8:	0800a6c1 	.word	0x0800a6c1
 800a6ac:	0800a6f5 	.word	0x0800a6f5
 800a6b0:	0800a729 	.word	0x0800a729
 800a6b4:	0800a75d 	.word	0x0800a75d
 800a6b8:	0800a791 	.word	0x0800a791
 800a6bc:	0800a7c5 	.word	0x0800a7c5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a6c6:	685b      	ldr	r3, [r3, #4]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d00b      	beq.n	800a6e4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	687a      	ldr	r2, [r7, #4]
 800a6d6:	7c12      	ldrb	r2, [r2, #16]
 800a6d8:	f107 0108 	add.w	r1, r7, #8
 800a6dc:	4610      	mov	r0, r2
 800a6de:	4798      	blx	r3
 800a6e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a6e2:	e091      	b.n	800a808 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a6e4:	6839      	ldr	r1, [r7, #0]
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f000 facb 	bl	800ac82 <USBD_CtlError>
            err++;
 800a6ec:	7afb      	ldrb	r3, [r7, #11]
 800a6ee:	3301      	adds	r3, #1
 800a6f0:	72fb      	strb	r3, [r7, #11]
          break;
 800a6f2:	e089      	b.n	800a808 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a6fa:	689b      	ldr	r3, [r3, #8]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d00b      	beq.n	800a718 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a706:	689b      	ldr	r3, [r3, #8]
 800a708:	687a      	ldr	r2, [r7, #4]
 800a70a:	7c12      	ldrb	r2, [r2, #16]
 800a70c:	f107 0108 	add.w	r1, r7, #8
 800a710:	4610      	mov	r0, r2
 800a712:	4798      	blx	r3
 800a714:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a716:	e077      	b.n	800a808 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a718:	6839      	ldr	r1, [r7, #0]
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f000 fab1 	bl	800ac82 <USBD_CtlError>
            err++;
 800a720:	7afb      	ldrb	r3, [r7, #11]
 800a722:	3301      	adds	r3, #1
 800a724:	72fb      	strb	r3, [r7, #11]
          break;
 800a726:	e06f      	b.n	800a808 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a72e:	68db      	ldr	r3, [r3, #12]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d00b      	beq.n	800a74c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a73a:	68db      	ldr	r3, [r3, #12]
 800a73c:	687a      	ldr	r2, [r7, #4]
 800a73e:	7c12      	ldrb	r2, [r2, #16]
 800a740:	f107 0108 	add.w	r1, r7, #8
 800a744:	4610      	mov	r0, r2
 800a746:	4798      	blx	r3
 800a748:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a74a:	e05d      	b.n	800a808 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a74c:	6839      	ldr	r1, [r7, #0]
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f000 fa97 	bl	800ac82 <USBD_CtlError>
            err++;
 800a754:	7afb      	ldrb	r3, [r7, #11]
 800a756:	3301      	adds	r3, #1
 800a758:	72fb      	strb	r3, [r7, #11]
          break;
 800a75a:	e055      	b.n	800a808 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a762:	691b      	ldr	r3, [r3, #16]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d00b      	beq.n	800a780 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a76e:	691b      	ldr	r3, [r3, #16]
 800a770:	687a      	ldr	r2, [r7, #4]
 800a772:	7c12      	ldrb	r2, [r2, #16]
 800a774:	f107 0108 	add.w	r1, r7, #8
 800a778:	4610      	mov	r0, r2
 800a77a:	4798      	blx	r3
 800a77c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a77e:	e043      	b.n	800a808 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a780:	6839      	ldr	r1, [r7, #0]
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f000 fa7d 	bl	800ac82 <USBD_CtlError>
            err++;
 800a788:	7afb      	ldrb	r3, [r7, #11]
 800a78a:	3301      	adds	r3, #1
 800a78c:	72fb      	strb	r3, [r7, #11]
          break;
 800a78e:	e03b      	b.n	800a808 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a796:	695b      	ldr	r3, [r3, #20]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d00b      	beq.n	800a7b4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a7a2:	695b      	ldr	r3, [r3, #20]
 800a7a4:	687a      	ldr	r2, [r7, #4]
 800a7a6:	7c12      	ldrb	r2, [r2, #16]
 800a7a8:	f107 0108 	add.w	r1, r7, #8
 800a7ac:	4610      	mov	r0, r2
 800a7ae:	4798      	blx	r3
 800a7b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7b2:	e029      	b.n	800a808 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a7b4:	6839      	ldr	r1, [r7, #0]
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f000 fa63 	bl	800ac82 <USBD_CtlError>
            err++;
 800a7bc:	7afb      	ldrb	r3, [r7, #11]
 800a7be:	3301      	adds	r3, #1
 800a7c0:	72fb      	strb	r3, [r7, #11]
          break;
 800a7c2:	e021      	b.n	800a808 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a7ca:	699b      	ldr	r3, [r3, #24]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d00b      	beq.n	800a7e8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a7d6:	699b      	ldr	r3, [r3, #24]
 800a7d8:	687a      	ldr	r2, [r7, #4]
 800a7da:	7c12      	ldrb	r2, [r2, #16]
 800a7dc:	f107 0108 	add.w	r1, r7, #8
 800a7e0:	4610      	mov	r0, r2
 800a7e2:	4798      	blx	r3
 800a7e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7e6:	e00f      	b.n	800a808 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a7e8:	6839      	ldr	r1, [r7, #0]
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f000 fa49 	bl	800ac82 <USBD_CtlError>
            err++;
 800a7f0:	7afb      	ldrb	r3, [r7, #11]
 800a7f2:	3301      	adds	r3, #1
 800a7f4:	72fb      	strb	r3, [r7, #11]
          break;
 800a7f6:	e007      	b.n	800a808 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a7f8:	6839      	ldr	r1, [r7, #0]
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f000 fa41 	bl	800ac82 <USBD_CtlError>
          err++;
 800a800:	7afb      	ldrb	r3, [r7, #11]
 800a802:	3301      	adds	r3, #1
 800a804:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a806:	bf00      	nop
      }
      break;
 800a808:	e037      	b.n	800a87a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	7c1b      	ldrb	r3, [r3, #16]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d109      	bne.n	800a826 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a818:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a81a:	f107 0208 	add.w	r2, r7, #8
 800a81e:	4610      	mov	r0, r2
 800a820:	4798      	blx	r3
 800a822:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a824:	e029      	b.n	800a87a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a826:	6839      	ldr	r1, [r7, #0]
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f000 fa2a 	bl	800ac82 <USBD_CtlError>
        err++;
 800a82e:	7afb      	ldrb	r3, [r7, #11]
 800a830:	3301      	adds	r3, #1
 800a832:	72fb      	strb	r3, [r7, #11]
      break;
 800a834:	e021      	b.n	800a87a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	7c1b      	ldrb	r3, [r3, #16]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d10d      	bne.n	800a85a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a846:	f107 0208 	add.w	r2, r7, #8
 800a84a:	4610      	mov	r0, r2
 800a84c:	4798      	blx	r3
 800a84e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	3301      	adds	r3, #1
 800a854:	2207      	movs	r2, #7
 800a856:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a858:	e00f      	b.n	800a87a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a85a:	6839      	ldr	r1, [r7, #0]
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f000 fa10 	bl	800ac82 <USBD_CtlError>
        err++;
 800a862:	7afb      	ldrb	r3, [r7, #11]
 800a864:	3301      	adds	r3, #1
 800a866:	72fb      	strb	r3, [r7, #11]
      break;
 800a868:	e007      	b.n	800a87a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a86a:	6839      	ldr	r1, [r7, #0]
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f000 fa08 	bl	800ac82 <USBD_CtlError>
      err++;
 800a872:	7afb      	ldrb	r3, [r7, #11]
 800a874:	3301      	adds	r3, #1
 800a876:	72fb      	strb	r3, [r7, #11]
      break;
 800a878:	bf00      	nop
  }

  if (err != 0U)
 800a87a:	7afb      	ldrb	r3, [r7, #11]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d11e      	bne.n	800a8be <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	88db      	ldrh	r3, [r3, #6]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d016      	beq.n	800a8b6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a888:	893b      	ldrh	r3, [r7, #8]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d00e      	beq.n	800a8ac <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	88da      	ldrh	r2, [r3, #6]
 800a892:	893b      	ldrh	r3, [r7, #8]
 800a894:	4293      	cmp	r3, r2
 800a896:	bf28      	it	cs
 800a898:	4613      	movcs	r3, r2
 800a89a:	b29b      	uxth	r3, r3
 800a89c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a89e:	893b      	ldrh	r3, [r7, #8]
 800a8a0:	461a      	mov	r2, r3
 800a8a2:	68f9      	ldr	r1, [r7, #12]
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f000 fa69 	bl	800ad7c <USBD_CtlSendData>
 800a8aa:	e009      	b.n	800a8c0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a8ac:	6839      	ldr	r1, [r7, #0]
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f000 f9e7 	bl	800ac82 <USBD_CtlError>
 800a8b4:	e004      	b.n	800a8c0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f000 faba 	bl	800ae30 <USBD_CtlSendStatus>
 800a8bc:	e000      	b.n	800a8c0 <USBD_GetDescriptor+0x320>
    return;
 800a8be:	bf00      	nop
  }
}
 800a8c0:	3710      	adds	r7, #16
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
 800a8c6:	bf00      	nop

0800a8c8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b084      	sub	sp, #16
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
 800a8d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	889b      	ldrh	r3, [r3, #4]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d131      	bne.n	800a93e <USBD_SetAddress+0x76>
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	88db      	ldrh	r3, [r3, #6]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d12d      	bne.n	800a93e <USBD_SetAddress+0x76>
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	885b      	ldrh	r3, [r3, #2]
 800a8e6:	2b7f      	cmp	r3, #127	@ 0x7f
 800a8e8:	d829      	bhi.n	800a93e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	885b      	ldrh	r3, [r3, #2]
 800a8ee:	b2db      	uxtb	r3, r3
 800a8f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a8f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8fc:	b2db      	uxtb	r3, r3
 800a8fe:	2b03      	cmp	r3, #3
 800a900:	d104      	bne.n	800a90c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a902:	6839      	ldr	r1, [r7, #0]
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f000 f9bc 	bl	800ac82 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a90a:	e01d      	b.n	800a948 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	7bfa      	ldrb	r2, [r7, #15]
 800a910:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a914:	7bfb      	ldrb	r3, [r7, #15]
 800a916:	4619      	mov	r1, r3
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f000 ff13 	bl	800b744 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f000 fa86 	bl	800ae30 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a924:	7bfb      	ldrb	r3, [r7, #15]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d004      	beq.n	800a934 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2202      	movs	r2, #2
 800a92e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a932:	e009      	b.n	800a948 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2201      	movs	r2, #1
 800a938:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a93c:	e004      	b.n	800a948 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a93e:	6839      	ldr	r1, [r7, #0]
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f000 f99e 	bl	800ac82 <USBD_CtlError>
  }
}
 800a946:	bf00      	nop
 800a948:	bf00      	nop
 800a94a:	3710      	adds	r7, #16
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}

0800a950 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b084      	sub	sp, #16
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
 800a958:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a95a:	2300      	movs	r3, #0
 800a95c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	885b      	ldrh	r3, [r3, #2]
 800a962:	b2da      	uxtb	r2, r3
 800a964:	4b4e      	ldr	r3, [pc, #312]	@ (800aaa0 <USBD_SetConfig+0x150>)
 800a966:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a968:	4b4d      	ldr	r3, [pc, #308]	@ (800aaa0 <USBD_SetConfig+0x150>)
 800a96a:	781b      	ldrb	r3, [r3, #0]
 800a96c:	2b01      	cmp	r3, #1
 800a96e:	d905      	bls.n	800a97c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a970:	6839      	ldr	r1, [r7, #0]
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f000 f985 	bl	800ac82 <USBD_CtlError>
    return USBD_FAIL;
 800a978:	2303      	movs	r3, #3
 800a97a:	e08c      	b.n	800aa96 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a982:	b2db      	uxtb	r3, r3
 800a984:	2b02      	cmp	r3, #2
 800a986:	d002      	beq.n	800a98e <USBD_SetConfig+0x3e>
 800a988:	2b03      	cmp	r3, #3
 800a98a:	d029      	beq.n	800a9e0 <USBD_SetConfig+0x90>
 800a98c:	e075      	b.n	800aa7a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a98e:	4b44      	ldr	r3, [pc, #272]	@ (800aaa0 <USBD_SetConfig+0x150>)
 800a990:	781b      	ldrb	r3, [r3, #0]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d020      	beq.n	800a9d8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a996:	4b42      	ldr	r3, [pc, #264]	@ (800aaa0 <USBD_SetConfig+0x150>)
 800a998:	781b      	ldrb	r3, [r3, #0]
 800a99a:	461a      	mov	r2, r3
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a9a0:	4b3f      	ldr	r3, [pc, #252]	@ (800aaa0 <USBD_SetConfig+0x150>)
 800a9a2:	781b      	ldrb	r3, [r3, #0]
 800a9a4:	4619      	mov	r1, r3
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f7fe ffb9 	bl	800991e <USBD_SetClassConfig>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a9b0:	7bfb      	ldrb	r3, [r7, #15]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d008      	beq.n	800a9c8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a9b6:	6839      	ldr	r1, [r7, #0]
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f000 f962 	bl	800ac82 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2202      	movs	r2, #2
 800a9c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a9c6:	e065      	b.n	800aa94 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f000 fa31 	bl	800ae30 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2203      	movs	r2, #3
 800a9d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a9d6:	e05d      	b.n	800aa94 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f000 fa29 	bl	800ae30 <USBD_CtlSendStatus>
      break;
 800a9de:	e059      	b.n	800aa94 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a9e0:	4b2f      	ldr	r3, [pc, #188]	@ (800aaa0 <USBD_SetConfig+0x150>)
 800a9e2:	781b      	ldrb	r3, [r3, #0]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d112      	bne.n	800aa0e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2202      	movs	r2, #2
 800a9ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a9f0:	4b2b      	ldr	r3, [pc, #172]	@ (800aaa0 <USBD_SetConfig+0x150>)
 800a9f2:	781b      	ldrb	r3, [r3, #0]
 800a9f4:	461a      	mov	r2, r3
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a9fa:	4b29      	ldr	r3, [pc, #164]	@ (800aaa0 <USBD_SetConfig+0x150>)
 800a9fc:	781b      	ldrb	r3, [r3, #0]
 800a9fe:	4619      	mov	r1, r3
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f7fe ffa8 	bl	8009956 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f000 fa12 	bl	800ae30 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aa0c:	e042      	b.n	800aa94 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800aa0e:	4b24      	ldr	r3, [pc, #144]	@ (800aaa0 <USBD_SetConfig+0x150>)
 800aa10:	781b      	ldrb	r3, [r3, #0]
 800aa12:	461a      	mov	r2, r3
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	d02a      	beq.n	800aa72 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	685b      	ldr	r3, [r3, #4]
 800aa20:	b2db      	uxtb	r3, r3
 800aa22:	4619      	mov	r1, r3
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f7fe ff96 	bl	8009956 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800aa2a:	4b1d      	ldr	r3, [pc, #116]	@ (800aaa0 <USBD_SetConfig+0x150>)
 800aa2c:	781b      	ldrb	r3, [r3, #0]
 800aa2e:	461a      	mov	r2, r3
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aa34:	4b1a      	ldr	r3, [pc, #104]	@ (800aaa0 <USBD_SetConfig+0x150>)
 800aa36:	781b      	ldrb	r3, [r3, #0]
 800aa38:	4619      	mov	r1, r3
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f7fe ff6f 	bl	800991e <USBD_SetClassConfig>
 800aa40:	4603      	mov	r3, r0
 800aa42:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800aa44:	7bfb      	ldrb	r3, [r7, #15]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d00f      	beq.n	800aa6a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800aa4a:	6839      	ldr	r1, [r7, #0]
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f000 f918 	bl	800ac82 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	685b      	ldr	r3, [r3, #4]
 800aa56:	b2db      	uxtb	r3, r3
 800aa58:	4619      	mov	r1, r3
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f7fe ff7b 	bl	8009956 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2202      	movs	r2, #2
 800aa64:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800aa68:	e014      	b.n	800aa94 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f000 f9e0 	bl	800ae30 <USBD_CtlSendStatus>
      break;
 800aa70:	e010      	b.n	800aa94 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f000 f9dc 	bl	800ae30 <USBD_CtlSendStatus>
      break;
 800aa78:	e00c      	b.n	800aa94 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800aa7a:	6839      	ldr	r1, [r7, #0]
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f000 f900 	bl	800ac82 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aa82:	4b07      	ldr	r3, [pc, #28]	@ (800aaa0 <USBD_SetConfig+0x150>)
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	4619      	mov	r1, r3
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f7fe ff64 	bl	8009956 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800aa8e:	2303      	movs	r3, #3
 800aa90:	73fb      	strb	r3, [r7, #15]
      break;
 800aa92:	bf00      	nop
  }

  return ret;
 800aa94:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3710      	adds	r7, #16
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}
 800aa9e:	bf00      	nop
 800aaa0:	20000c7c 	.word	0x20000c7c

0800aaa4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b082      	sub	sp, #8
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	88db      	ldrh	r3, [r3, #6]
 800aab2:	2b01      	cmp	r3, #1
 800aab4:	d004      	beq.n	800aac0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800aab6:	6839      	ldr	r1, [r7, #0]
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f000 f8e2 	bl	800ac82 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800aabe:	e023      	b.n	800ab08 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aac6:	b2db      	uxtb	r3, r3
 800aac8:	2b02      	cmp	r3, #2
 800aaca:	dc02      	bgt.n	800aad2 <USBD_GetConfig+0x2e>
 800aacc:	2b00      	cmp	r3, #0
 800aace:	dc03      	bgt.n	800aad8 <USBD_GetConfig+0x34>
 800aad0:	e015      	b.n	800aafe <USBD_GetConfig+0x5a>
 800aad2:	2b03      	cmp	r3, #3
 800aad4:	d00b      	beq.n	800aaee <USBD_GetConfig+0x4a>
 800aad6:	e012      	b.n	800aafe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2200      	movs	r2, #0
 800aadc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	3308      	adds	r3, #8
 800aae2:	2201      	movs	r2, #1
 800aae4:	4619      	mov	r1, r3
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f000 f948 	bl	800ad7c <USBD_CtlSendData>
        break;
 800aaec:	e00c      	b.n	800ab08 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	3304      	adds	r3, #4
 800aaf2:	2201      	movs	r2, #1
 800aaf4:	4619      	mov	r1, r3
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f000 f940 	bl	800ad7c <USBD_CtlSendData>
        break;
 800aafc:	e004      	b.n	800ab08 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800aafe:	6839      	ldr	r1, [r7, #0]
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f000 f8be 	bl	800ac82 <USBD_CtlError>
        break;
 800ab06:	bf00      	nop
}
 800ab08:	bf00      	nop
 800ab0a:	3708      	adds	r7, #8
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}

0800ab10 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b082      	sub	sp, #8
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
 800ab18:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab20:	b2db      	uxtb	r3, r3
 800ab22:	3b01      	subs	r3, #1
 800ab24:	2b02      	cmp	r3, #2
 800ab26:	d81e      	bhi.n	800ab66 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	88db      	ldrh	r3, [r3, #6]
 800ab2c:	2b02      	cmp	r3, #2
 800ab2e:	d004      	beq.n	800ab3a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ab30:	6839      	ldr	r1, [r7, #0]
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f000 f8a5 	bl	800ac82 <USBD_CtlError>
        break;
 800ab38:	e01a      	b.n	800ab70 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2201      	movs	r2, #1
 800ab3e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d005      	beq.n	800ab56 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	68db      	ldr	r3, [r3, #12]
 800ab4e:	f043 0202 	orr.w	r2, r3, #2
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	330c      	adds	r3, #12
 800ab5a:	2202      	movs	r2, #2
 800ab5c:	4619      	mov	r1, r3
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f000 f90c 	bl	800ad7c <USBD_CtlSendData>
      break;
 800ab64:	e004      	b.n	800ab70 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ab66:	6839      	ldr	r1, [r7, #0]
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f000 f88a 	bl	800ac82 <USBD_CtlError>
      break;
 800ab6e:	bf00      	nop
  }
}
 800ab70:	bf00      	nop
 800ab72:	3708      	adds	r7, #8
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}

0800ab78 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b082      	sub	sp, #8
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	885b      	ldrh	r3, [r3, #2]
 800ab86:	2b01      	cmp	r3, #1
 800ab88:	d107      	bne.n	800ab9a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2201      	movs	r2, #1
 800ab8e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f000 f94c 	bl	800ae30 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ab98:	e013      	b.n	800abc2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	885b      	ldrh	r3, [r3, #2]
 800ab9e:	2b02      	cmp	r3, #2
 800aba0:	d10b      	bne.n	800abba <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	889b      	ldrh	r3, [r3, #4]
 800aba6:	0a1b      	lsrs	r3, r3, #8
 800aba8:	b29b      	uxth	r3, r3
 800abaa:	b2da      	uxtb	r2, r3
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f000 f93c 	bl	800ae30 <USBD_CtlSendStatus>
}
 800abb8:	e003      	b.n	800abc2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800abba:	6839      	ldr	r1, [r7, #0]
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f000 f860 	bl	800ac82 <USBD_CtlError>
}
 800abc2:	bf00      	nop
 800abc4:	3708      	adds	r7, #8
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}

0800abca <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abca:	b580      	push	{r7, lr}
 800abcc:	b082      	sub	sp, #8
 800abce:	af00      	add	r7, sp, #0
 800abd0:	6078      	str	r0, [r7, #4]
 800abd2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800abda:	b2db      	uxtb	r3, r3
 800abdc:	3b01      	subs	r3, #1
 800abde:	2b02      	cmp	r3, #2
 800abe0:	d80b      	bhi.n	800abfa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	885b      	ldrh	r3, [r3, #2]
 800abe6:	2b01      	cmp	r3, #1
 800abe8:	d10c      	bne.n	800ac04 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2200      	movs	r2, #0
 800abee:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f000 f91c 	bl	800ae30 <USBD_CtlSendStatus>
      }
      break;
 800abf8:	e004      	b.n	800ac04 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800abfa:	6839      	ldr	r1, [r7, #0]
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f000 f840 	bl	800ac82 <USBD_CtlError>
      break;
 800ac02:	e000      	b.n	800ac06 <USBD_ClrFeature+0x3c>
      break;
 800ac04:	bf00      	nop
  }
}
 800ac06:	bf00      	nop
 800ac08:	3708      	adds	r7, #8
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}

0800ac0e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ac0e:	b580      	push	{r7, lr}
 800ac10:	b084      	sub	sp, #16
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	6078      	str	r0, [r7, #4]
 800ac16:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	781a      	ldrb	r2, [r3, #0]
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	3301      	adds	r3, #1
 800ac28:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	781a      	ldrb	r2, [r3, #0]
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	3301      	adds	r3, #1
 800ac36:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ac38:	68f8      	ldr	r0, [r7, #12]
 800ac3a:	f7ff fa16 	bl	800a06a <SWAPBYTE>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	461a      	mov	r2, r3
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	3301      	adds	r3, #1
 800ac4a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	3301      	adds	r3, #1
 800ac50:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ac52:	68f8      	ldr	r0, [r7, #12]
 800ac54:	f7ff fa09 	bl	800a06a <SWAPBYTE>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	461a      	mov	r2, r3
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	3301      	adds	r3, #1
 800ac64:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	3301      	adds	r3, #1
 800ac6a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ac6c:	68f8      	ldr	r0, [r7, #12]
 800ac6e:	f7ff f9fc 	bl	800a06a <SWAPBYTE>
 800ac72:	4603      	mov	r3, r0
 800ac74:	461a      	mov	r2, r3
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	80da      	strh	r2, [r3, #6]
}
 800ac7a:	bf00      	nop
 800ac7c:	3710      	adds	r7, #16
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}

0800ac82 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac82:	b580      	push	{r7, lr}
 800ac84:	b082      	sub	sp, #8
 800ac86:	af00      	add	r7, sp, #0
 800ac88:	6078      	str	r0, [r7, #4]
 800ac8a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac8c:	2180      	movs	r1, #128	@ 0x80
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f000 fcee 	bl	800b670 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ac94:	2100      	movs	r1, #0
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f000 fcea 	bl	800b670 <USBD_LL_StallEP>
}
 800ac9c:	bf00      	nop
 800ac9e:	3708      	adds	r7, #8
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}

0800aca4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b086      	sub	sp, #24
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	60f8      	str	r0, [r7, #12]
 800acac:	60b9      	str	r1, [r7, #8]
 800acae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800acb0:	2300      	movs	r3, #0
 800acb2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d042      	beq.n	800ad40 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800acbe:	6938      	ldr	r0, [r7, #16]
 800acc0:	f000 f842 	bl	800ad48 <USBD_GetLen>
 800acc4:	4603      	mov	r3, r0
 800acc6:	3301      	adds	r3, #1
 800acc8:	005b      	lsls	r3, r3, #1
 800acca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800acce:	d808      	bhi.n	800ace2 <USBD_GetString+0x3e>
 800acd0:	6938      	ldr	r0, [r7, #16]
 800acd2:	f000 f839 	bl	800ad48 <USBD_GetLen>
 800acd6:	4603      	mov	r3, r0
 800acd8:	3301      	adds	r3, #1
 800acda:	b29b      	uxth	r3, r3
 800acdc:	005b      	lsls	r3, r3, #1
 800acde:	b29a      	uxth	r2, r3
 800ace0:	e001      	b.n	800ace6 <USBD_GetString+0x42>
 800ace2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800acea:	7dfb      	ldrb	r3, [r7, #23]
 800acec:	68ba      	ldr	r2, [r7, #8]
 800acee:	4413      	add	r3, r2
 800acf0:	687a      	ldr	r2, [r7, #4]
 800acf2:	7812      	ldrb	r2, [r2, #0]
 800acf4:	701a      	strb	r2, [r3, #0]
  idx++;
 800acf6:	7dfb      	ldrb	r3, [r7, #23]
 800acf8:	3301      	adds	r3, #1
 800acfa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800acfc:	7dfb      	ldrb	r3, [r7, #23]
 800acfe:	68ba      	ldr	r2, [r7, #8]
 800ad00:	4413      	add	r3, r2
 800ad02:	2203      	movs	r2, #3
 800ad04:	701a      	strb	r2, [r3, #0]
  idx++;
 800ad06:	7dfb      	ldrb	r3, [r7, #23]
 800ad08:	3301      	adds	r3, #1
 800ad0a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ad0c:	e013      	b.n	800ad36 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800ad0e:	7dfb      	ldrb	r3, [r7, #23]
 800ad10:	68ba      	ldr	r2, [r7, #8]
 800ad12:	4413      	add	r3, r2
 800ad14:	693a      	ldr	r2, [r7, #16]
 800ad16:	7812      	ldrb	r2, [r2, #0]
 800ad18:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	3301      	adds	r3, #1
 800ad1e:	613b      	str	r3, [r7, #16]
    idx++;
 800ad20:	7dfb      	ldrb	r3, [r7, #23]
 800ad22:	3301      	adds	r3, #1
 800ad24:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ad26:	7dfb      	ldrb	r3, [r7, #23]
 800ad28:	68ba      	ldr	r2, [r7, #8]
 800ad2a:	4413      	add	r3, r2
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	701a      	strb	r2, [r3, #0]
    idx++;
 800ad30:	7dfb      	ldrb	r3, [r7, #23]
 800ad32:	3301      	adds	r3, #1
 800ad34:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	781b      	ldrb	r3, [r3, #0]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d1e7      	bne.n	800ad0e <USBD_GetString+0x6a>
 800ad3e:	e000      	b.n	800ad42 <USBD_GetString+0x9e>
    return;
 800ad40:	bf00      	nop
  }
}
 800ad42:	3718      	adds	r7, #24
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}

0800ad48 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b085      	sub	sp, #20
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ad50:	2300      	movs	r3, #0
 800ad52:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ad58:	e005      	b.n	800ad66 <USBD_GetLen+0x1e>
  {
    len++;
 800ad5a:	7bfb      	ldrb	r3, [r7, #15]
 800ad5c:	3301      	adds	r3, #1
 800ad5e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	3301      	adds	r3, #1
 800ad64:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	781b      	ldrb	r3, [r3, #0]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d1f5      	bne.n	800ad5a <USBD_GetLen+0x12>
  }

  return len;
 800ad6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	3714      	adds	r7, #20
 800ad74:	46bd      	mov	sp, r7
 800ad76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7a:	4770      	bx	lr

0800ad7c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b084      	sub	sp, #16
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	60f8      	str	r0, [r7, #12]
 800ad84:	60b9      	str	r1, [r7, #8]
 800ad86:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	2202      	movs	r2, #2
 800ad8c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	687a      	ldr	r2, [r7, #4]
 800ad94:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	687a      	ldr	r2, [r7, #4]
 800ad9a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	68ba      	ldr	r2, [r7, #8]
 800ada0:	2100      	movs	r1, #0
 800ada2:	68f8      	ldr	r0, [r7, #12]
 800ada4:	f000 fced 	bl	800b782 <USBD_LL_Transmit>

  return USBD_OK;
 800ada8:	2300      	movs	r3, #0
}
 800adaa:	4618      	mov	r0, r3
 800adac:	3710      	adds	r7, #16
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}

0800adb2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800adb2:	b580      	push	{r7, lr}
 800adb4:	b084      	sub	sp, #16
 800adb6:	af00      	add	r7, sp, #0
 800adb8:	60f8      	str	r0, [r7, #12]
 800adba:	60b9      	str	r1, [r7, #8]
 800adbc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	68ba      	ldr	r2, [r7, #8]
 800adc2:	2100      	movs	r1, #0
 800adc4:	68f8      	ldr	r0, [r7, #12]
 800adc6:	f000 fcdc 	bl	800b782 <USBD_LL_Transmit>

  return USBD_OK;
 800adca:	2300      	movs	r3, #0
}
 800adcc:	4618      	mov	r0, r3
 800adce:	3710      	adds	r7, #16
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}

0800add4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b084      	sub	sp, #16
 800add8:	af00      	add	r7, sp, #0
 800adda:	60f8      	str	r0, [r7, #12]
 800addc:	60b9      	str	r1, [r7, #8]
 800adde:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	2203      	movs	r2, #3
 800ade4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	687a      	ldr	r2, [r7, #4]
 800adec:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	687a      	ldr	r2, [r7, #4]
 800adf4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	68ba      	ldr	r2, [r7, #8]
 800adfc:	2100      	movs	r1, #0
 800adfe:	68f8      	ldr	r0, [r7, #12]
 800ae00:	f000 fce0 	bl	800b7c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ae04:	2300      	movs	r3, #0
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	3710      	adds	r7, #16
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}

0800ae0e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ae0e:	b580      	push	{r7, lr}
 800ae10:	b084      	sub	sp, #16
 800ae12:	af00      	add	r7, sp, #0
 800ae14:	60f8      	str	r0, [r7, #12]
 800ae16:	60b9      	str	r1, [r7, #8]
 800ae18:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	68ba      	ldr	r2, [r7, #8]
 800ae1e:	2100      	movs	r1, #0
 800ae20:	68f8      	ldr	r0, [r7, #12]
 800ae22:	f000 fccf 	bl	800b7c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ae26:	2300      	movs	r3, #0
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	3710      	adds	r7, #16
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}

0800ae30 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b082      	sub	sp, #8
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2204      	movs	r2, #4
 800ae3c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ae40:	2300      	movs	r3, #0
 800ae42:	2200      	movs	r2, #0
 800ae44:	2100      	movs	r1, #0
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f000 fc9b 	bl	800b782 <USBD_LL_Transmit>

  return USBD_OK;
 800ae4c:	2300      	movs	r3, #0
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3708      	adds	r7, #8
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}

0800ae56 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ae56:	b580      	push	{r7, lr}
 800ae58:	b082      	sub	sp, #8
 800ae5a:	af00      	add	r7, sp, #0
 800ae5c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2205      	movs	r2, #5
 800ae62:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ae66:	2300      	movs	r3, #0
 800ae68:	2200      	movs	r2, #0
 800ae6a:	2100      	movs	r1, #0
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f000 fca9 	bl	800b7c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ae72:	2300      	movs	r3, #0
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3708      	adds	r7, #8
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}

0800ae7c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ae80:	2200      	movs	r2, #0
 800ae82:	4912      	ldr	r1, [pc, #72]	@ (800aecc <MX_USB_DEVICE_Init+0x50>)
 800ae84:	4812      	ldr	r0, [pc, #72]	@ (800aed0 <MX_USB_DEVICE_Init+0x54>)
 800ae86:	f7fe fccd 	bl	8009824 <USBD_Init>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d001      	beq.n	800ae94 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ae90:	f7f6 fe62 	bl	8001b58 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ae94:	490f      	ldr	r1, [pc, #60]	@ (800aed4 <MX_USB_DEVICE_Init+0x58>)
 800ae96:	480e      	ldr	r0, [pc, #56]	@ (800aed0 <MX_USB_DEVICE_Init+0x54>)
 800ae98:	f7fe fcf4 	bl	8009884 <USBD_RegisterClass>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d001      	beq.n	800aea6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800aea2:	f7f6 fe59 	bl	8001b58 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800aea6:	490c      	ldr	r1, [pc, #48]	@ (800aed8 <MX_USB_DEVICE_Init+0x5c>)
 800aea8:	4809      	ldr	r0, [pc, #36]	@ (800aed0 <MX_USB_DEVICE_Init+0x54>)
 800aeaa:	f7fe fc2b 	bl	8009704 <USBD_CDC_RegisterInterface>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d001      	beq.n	800aeb8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800aeb4:	f7f6 fe50 	bl	8001b58 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800aeb8:	4805      	ldr	r0, [pc, #20]	@ (800aed0 <MX_USB_DEVICE_Init+0x54>)
 800aeba:	f7fe fd19 	bl	80098f0 <USBD_Start>
 800aebe:	4603      	mov	r3, r0
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d001      	beq.n	800aec8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800aec4:	f7f6 fe48 	bl	8001b58 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800aec8:	bf00      	nop
 800aeca:	bd80      	pop	{r7, pc}
 800aecc:	200000ac 	.word	0x200000ac
 800aed0:	20000c80 	.word	0x20000c80
 800aed4:	20000018 	.word	0x20000018
 800aed8:	20000098 	.word	0x20000098

0800aedc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800aee0:	2200      	movs	r2, #0
 800aee2:	4905      	ldr	r1, [pc, #20]	@ (800aef8 <CDC_Init_FS+0x1c>)
 800aee4:	4805      	ldr	r0, [pc, #20]	@ (800aefc <CDC_Init_FS+0x20>)
 800aee6:	f7fe fc27 	bl	8009738 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800aeea:	4905      	ldr	r1, [pc, #20]	@ (800af00 <CDC_Init_FS+0x24>)
 800aeec:	4803      	ldr	r0, [pc, #12]	@ (800aefc <CDC_Init_FS+0x20>)
 800aeee:	f7fe fc45 	bl	800977c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800aef2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	bd80      	pop	{r7, pc}
 800aef8:	2000175c 	.word	0x2000175c
 800aefc:	20000c80 	.word	0x20000c80
 800af00:	20000f5c 	.word	0x20000f5c

0800af04 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800af04:	b480      	push	{r7}
 800af06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800af08:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	46bd      	mov	sp, r7
 800af0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af12:	4770      	bx	lr

0800af14 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800af14:	b480      	push	{r7}
 800af16:	b083      	sub	sp, #12
 800af18:	af00      	add	r7, sp, #0
 800af1a:	4603      	mov	r3, r0
 800af1c:	6039      	str	r1, [r7, #0]
 800af1e:	71fb      	strb	r3, [r7, #7]
 800af20:	4613      	mov	r3, r2
 800af22:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800af24:	79fb      	ldrb	r3, [r7, #7]
 800af26:	2b23      	cmp	r3, #35	@ 0x23
 800af28:	d84a      	bhi.n	800afc0 <CDC_Control_FS+0xac>
 800af2a:	a201      	add	r2, pc, #4	@ (adr r2, 800af30 <CDC_Control_FS+0x1c>)
 800af2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af30:	0800afc1 	.word	0x0800afc1
 800af34:	0800afc1 	.word	0x0800afc1
 800af38:	0800afc1 	.word	0x0800afc1
 800af3c:	0800afc1 	.word	0x0800afc1
 800af40:	0800afc1 	.word	0x0800afc1
 800af44:	0800afc1 	.word	0x0800afc1
 800af48:	0800afc1 	.word	0x0800afc1
 800af4c:	0800afc1 	.word	0x0800afc1
 800af50:	0800afc1 	.word	0x0800afc1
 800af54:	0800afc1 	.word	0x0800afc1
 800af58:	0800afc1 	.word	0x0800afc1
 800af5c:	0800afc1 	.word	0x0800afc1
 800af60:	0800afc1 	.word	0x0800afc1
 800af64:	0800afc1 	.word	0x0800afc1
 800af68:	0800afc1 	.word	0x0800afc1
 800af6c:	0800afc1 	.word	0x0800afc1
 800af70:	0800afc1 	.word	0x0800afc1
 800af74:	0800afc1 	.word	0x0800afc1
 800af78:	0800afc1 	.word	0x0800afc1
 800af7c:	0800afc1 	.word	0x0800afc1
 800af80:	0800afc1 	.word	0x0800afc1
 800af84:	0800afc1 	.word	0x0800afc1
 800af88:	0800afc1 	.word	0x0800afc1
 800af8c:	0800afc1 	.word	0x0800afc1
 800af90:	0800afc1 	.word	0x0800afc1
 800af94:	0800afc1 	.word	0x0800afc1
 800af98:	0800afc1 	.word	0x0800afc1
 800af9c:	0800afc1 	.word	0x0800afc1
 800afa0:	0800afc1 	.word	0x0800afc1
 800afa4:	0800afc1 	.word	0x0800afc1
 800afa8:	0800afc1 	.word	0x0800afc1
 800afac:	0800afc1 	.word	0x0800afc1
 800afb0:	0800afc1 	.word	0x0800afc1
 800afb4:	0800afc1 	.word	0x0800afc1
 800afb8:	0800afc1 	.word	0x0800afc1
 800afbc:	0800afc1 	.word	0x0800afc1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800afc0:	bf00      	nop
  }

  return (USBD_OK);
 800afc2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	370c      	adds	r7, #12
 800afc8:	46bd      	mov	sp, r7
 800afca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afce:	4770      	bx	lr

0800afd0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b082      	sub	sp, #8
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
 800afd8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800afda:	6879      	ldr	r1, [r7, #4]
 800afdc:	4805      	ldr	r0, [pc, #20]	@ (800aff4 <CDC_Receive_FS+0x24>)
 800afde:	f7fe fbcd 	bl	800977c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800afe2:	4804      	ldr	r0, [pc, #16]	@ (800aff4 <CDC_Receive_FS+0x24>)
 800afe4:	f7fe fbe8 	bl	80097b8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800afe8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800afea:	4618      	mov	r0, r3
 800afec:	3708      	adds	r7, #8
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}
 800aff2:	bf00      	nop
 800aff4:	20000c80 	.word	0x20000c80

0800aff8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800aff8:	b480      	push	{r7}
 800affa:	b087      	sub	sp, #28
 800affc:	af00      	add	r7, sp, #0
 800affe:	60f8      	str	r0, [r7, #12]
 800b000:	60b9      	str	r1, [r7, #8]
 800b002:	4613      	mov	r3, r2
 800b004:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b006:	2300      	movs	r3, #0
 800b008:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b00a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b00e:	4618      	mov	r0, r3
 800b010:	371c      	adds	r7, #28
 800b012:	46bd      	mov	sp, r7
 800b014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b018:	4770      	bx	lr
	...

0800b01c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b01c:	b480      	push	{r7}
 800b01e:	b083      	sub	sp, #12
 800b020:	af00      	add	r7, sp, #0
 800b022:	4603      	mov	r3, r0
 800b024:	6039      	str	r1, [r7, #0]
 800b026:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	2212      	movs	r2, #18
 800b02c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b02e:	4b03      	ldr	r3, [pc, #12]	@ (800b03c <USBD_FS_DeviceDescriptor+0x20>)
}
 800b030:	4618      	mov	r0, r3
 800b032:	370c      	adds	r7, #12
 800b034:	46bd      	mov	sp, r7
 800b036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03a:	4770      	bx	lr
 800b03c:	200000cc 	.word	0x200000cc

0800b040 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b040:	b480      	push	{r7}
 800b042:	b083      	sub	sp, #12
 800b044:	af00      	add	r7, sp, #0
 800b046:	4603      	mov	r3, r0
 800b048:	6039      	str	r1, [r7, #0]
 800b04a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	2204      	movs	r2, #4
 800b050:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b052:	4b03      	ldr	r3, [pc, #12]	@ (800b060 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b054:	4618      	mov	r0, r3
 800b056:	370c      	adds	r7, #12
 800b058:	46bd      	mov	sp, r7
 800b05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05e:	4770      	bx	lr
 800b060:	200000ec 	.word	0x200000ec

0800b064 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b082      	sub	sp, #8
 800b068:	af00      	add	r7, sp, #0
 800b06a:	4603      	mov	r3, r0
 800b06c:	6039      	str	r1, [r7, #0]
 800b06e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b070:	79fb      	ldrb	r3, [r7, #7]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d105      	bne.n	800b082 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b076:	683a      	ldr	r2, [r7, #0]
 800b078:	4907      	ldr	r1, [pc, #28]	@ (800b098 <USBD_FS_ProductStrDescriptor+0x34>)
 800b07a:	4808      	ldr	r0, [pc, #32]	@ (800b09c <USBD_FS_ProductStrDescriptor+0x38>)
 800b07c:	f7ff fe12 	bl	800aca4 <USBD_GetString>
 800b080:	e004      	b.n	800b08c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b082:	683a      	ldr	r2, [r7, #0]
 800b084:	4904      	ldr	r1, [pc, #16]	@ (800b098 <USBD_FS_ProductStrDescriptor+0x34>)
 800b086:	4805      	ldr	r0, [pc, #20]	@ (800b09c <USBD_FS_ProductStrDescriptor+0x38>)
 800b088:	f7ff fe0c 	bl	800aca4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b08c:	4b02      	ldr	r3, [pc, #8]	@ (800b098 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b08e:	4618      	mov	r0, r3
 800b090:	3708      	adds	r7, #8
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}
 800b096:	bf00      	nop
 800b098:	20001f5c 	.word	0x20001f5c
 800b09c:	080111a4 	.word	0x080111a4

0800b0a0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b082      	sub	sp, #8
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	6039      	str	r1, [r7, #0]
 800b0aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b0ac:	683a      	ldr	r2, [r7, #0]
 800b0ae:	4904      	ldr	r1, [pc, #16]	@ (800b0c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b0b0:	4804      	ldr	r0, [pc, #16]	@ (800b0c4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b0b2:	f7ff fdf7 	bl	800aca4 <USBD_GetString>
  return USBD_StrDesc;
 800b0b6:	4b02      	ldr	r3, [pc, #8]	@ (800b0c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	3708      	adds	r7, #8
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}
 800b0c0:	20001f5c 	.word	0x20001f5c
 800b0c4:	080111bc 	.word	0x080111bc

0800b0c8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b082      	sub	sp, #8
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	6039      	str	r1, [r7, #0]
 800b0d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	221a      	movs	r2, #26
 800b0d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b0da:	f000 f855 	bl	800b188 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b0de:	4b02      	ldr	r3, [pc, #8]	@ (800b0e8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	3708      	adds	r7, #8
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}
 800b0e8:	200000f0 	.word	0x200000f0

0800b0ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b082      	sub	sp, #8
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	6039      	str	r1, [r7, #0]
 800b0f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b0f8:	79fb      	ldrb	r3, [r7, #7]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d105      	bne.n	800b10a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b0fe:	683a      	ldr	r2, [r7, #0]
 800b100:	4907      	ldr	r1, [pc, #28]	@ (800b120 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b102:	4808      	ldr	r0, [pc, #32]	@ (800b124 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b104:	f7ff fdce 	bl	800aca4 <USBD_GetString>
 800b108:	e004      	b.n	800b114 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b10a:	683a      	ldr	r2, [r7, #0]
 800b10c:	4904      	ldr	r1, [pc, #16]	@ (800b120 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b10e:	4805      	ldr	r0, [pc, #20]	@ (800b124 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b110:	f7ff fdc8 	bl	800aca4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b114:	4b02      	ldr	r3, [pc, #8]	@ (800b120 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b116:	4618      	mov	r0, r3
 800b118:	3708      	adds	r7, #8
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}
 800b11e:	bf00      	nop
 800b120:	20001f5c 	.word	0x20001f5c
 800b124:	080111d0 	.word	0x080111d0

0800b128 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b082      	sub	sp, #8
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	4603      	mov	r3, r0
 800b130:	6039      	str	r1, [r7, #0]
 800b132:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b134:	79fb      	ldrb	r3, [r7, #7]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d105      	bne.n	800b146 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b13a:	683a      	ldr	r2, [r7, #0]
 800b13c:	4907      	ldr	r1, [pc, #28]	@ (800b15c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b13e:	4808      	ldr	r0, [pc, #32]	@ (800b160 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b140:	f7ff fdb0 	bl	800aca4 <USBD_GetString>
 800b144:	e004      	b.n	800b150 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b146:	683a      	ldr	r2, [r7, #0]
 800b148:	4904      	ldr	r1, [pc, #16]	@ (800b15c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b14a:	4805      	ldr	r0, [pc, #20]	@ (800b160 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b14c:	f7ff fdaa 	bl	800aca4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b150:	4b02      	ldr	r3, [pc, #8]	@ (800b15c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b152:	4618      	mov	r0, r3
 800b154:	3708      	adds	r7, #8
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	bf00      	nop
 800b15c:	20001f5c 	.word	0x20001f5c
 800b160:	080111dc 	.word	0x080111dc

0800b164 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b164:	b480      	push	{r7}
 800b166:	b083      	sub	sp, #12
 800b168:	af00      	add	r7, sp, #0
 800b16a:	4603      	mov	r3, r0
 800b16c:	6039      	str	r1, [r7, #0]
 800b16e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	220c      	movs	r2, #12
 800b174:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b176:	4b03      	ldr	r3, [pc, #12]	@ (800b184 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b178:	4618      	mov	r0, r3
 800b17a:	370c      	adds	r7, #12
 800b17c:	46bd      	mov	sp, r7
 800b17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b182:	4770      	bx	lr
 800b184:	200000e0 	.word	0x200000e0

0800b188 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b084      	sub	sp, #16
 800b18c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b18e:	4b0f      	ldr	r3, [pc, #60]	@ (800b1cc <Get_SerialNum+0x44>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b194:	4b0e      	ldr	r3, [pc, #56]	@ (800b1d0 <Get_SerialNum+0x48>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b19a:	4b0e      	ldr	r3, [pc, #56]	@ (800b1d4 <Get_SerialNum+0x4c>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b1a0:	68fa      	ldr	r2, [r7, #12]
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	4413      	add	r3, r2
 800b1a6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d009      	beq.n	800b1c2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b1ae:	2208      	movs	r2, #8
 800b1b0:	4909      	ldr	r1, [pc, #36]	@ (800b1d8 <Get_SerialNum+0x50>)
 800b1b2:	68f8      	ldr	r0, [r7, #12]
 800b1b4:	f000 f814 	bl	800b1e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b1b8:	2204      	movs	r2, #4
 800b1ba:	4908      	ldr	r1, [pc, #32]	@ (800b1dc <Get_SerialNum+0x54>)
 800b1bc:	68b8      	ldr	r0, [r7, #8]
 800b1be:	f000 f80f 	bl	800b1e0 <IntToUnicode>
  }
}
 800b1c2:	bf00      	nop
 800b1c4:	3710      	adds	r7, #16
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}
 800b1ca:	bf00      	nop
 800b1cc:	1fff7a10 	.word	0x1fff7a10
 800b1d0:	1fff7a14 	.word	0x1fff7a14
 800b1d4:	1fff7a18 	.word	0x1fff7a18
 800b1d8:	200000f2 	.word	0x200000f2
 800b1dc:	20000102 	.word	0x20000102

0800b1e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b087      	sub	sp, #28
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	60f8      	str	r0, [r7, #12]
 800b1e8:	60b9      	str	r1, [r7, #8]
 800b1ea:	4613      	mov	r3, r2
 800b1ec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	75fb      	strb	r3, [r7, #23]
 800b1f6:	e027      	b.n	800b248 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	0f1b      	lsrs	r3, r3, #28
 800b1fc:	2b09      	cmp	r3, #9
 800b1fe:	d80b      	bhi.n	800b218 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	0f1b      	lsrs	r3, r3, #28
 800b204:	b2da      	uxtb	r2, r3
 800b206:	7dfb      	ldrb	r3, [r7, #23]
 800b208:	005b      	lsls	r3, r3, #1
 800b20a:	4619      	mov	r1, r3
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	440b      	add	r3, r1
 800b210:	3230      	adds	r2, #48	@ 0x30
 800b212:	b2d2      	uxtb	r2, r2
 800b214:	701a      	strb	r2, [r3, #0]
 800b216:	e00a      	b.n	800b22e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	0f1b      	lsrs	r3, r3, #28
 800b21c:	b2da      	uxtb	r2, r3
 800b21e:	7dfb      	ldrb	r3, [r7, #23]
 800b220:	005b      	lsls	r3, r3, #1
 800b222:	4619      	mov	r1, r3
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	440b      	add	r3, r1
 800b228:	3237      	adds	r2, #55	@ 0x37
 800b22a:	b2d2      	uxtb	r2, r2
 800b22c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	011b      	lsls	r3, r3, #4
 800b232:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b234:	7dfb      	ldrb	r3, [r7, #23]
 800b236:	005b      	lsls	r3, r3, #1
 800b238:	3301      	adds	r3, #1
 800b23a:	68ba      	ldr	r2, [r7, #8]
 800b23c:	4413      	add	r3, r2
 800b23e:	2200      	movs	r2, #0
 800b240:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b242:	7dfb      	ldrb	r3, [r7, #23]
 800b244:	3301      	adds	r3, #1
 800b246:	75fb      	strb	r3, [r7, #23]
 800b248:	7dfa      	ldrb	r2, [r7, #23]
 800b24a:	79fb      	ldrb	r3, [r7, #7]
 800b24c:	429a      	cmp	r2, r3
 800b24e:	d3d3      	bcc.n	800b1f8 <IntToUnicode+0x18>
  }
}
 800b250:	bf00      	nop
 800b252:	bf00      	nop
 800b254:	371c      	adds	r7, #28
 800b256:	46bd      	mov	sp, r7
 800b258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25c:	4770      	bx	lr
	...

0800b260 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b0a0      	sub	sp, #128	@ 0x80
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b268:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800b26c:	2200      	movs	r2, #0
 800b26e:	601a      	str	r2, [r3, #0]
 800b270:	605a      	str	r2, [r3, #4]
 800b272:	609a      	str	r2, [r3, #8]
 800b274:	60da      	str	r2, [r3, #12]
 800b276:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b278:	f107 0310 	add.w	r3, r7, #16
 800b27c:	225c      	movs	r2, #92	@ 0x5c
 800b27e:	2100      	movs	r1, #0
 800b280:	4618      	mov	r0, r3
 800b282:	f002 fbcf 	bl	800da24 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b28e:	d149      	bne.n	800b324 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800b290:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b294:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800b296:	2300      	movs	r3, #0
 800b298:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b29a:	f107 0310 	add.w	r3, r7, #16
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f7f9 ff14 	bl	80050cc <HAL_RCCEx_PeriphCLKConfig>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d001      	beq.n	800b2ae <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800b2aa:	f7f6 fc55 	bl	8001b58 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	60fb      	str	r3, [r7, #12]
 800b2b2:	4b1e      	ldr	r3, [pc, #120]	@ (800b32c <HAL_PCD_MspInit+0xcc>)
 800b2b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2b6:	4a1d      	ldr	r2, [pc, #116]	@ (800b32c <HAL_PCD_MspInit+0xcc>)
 800b2b8:	f043 0301 	orr.w	r3, r3, #1
 800b2bc:	6313      	str	r3, [r2, #48]	@ 0x30
 800b2be:	4b1b      	ldr	r3, [pc, #108]	@ (800b32c <HAL_PCD_MspInit+0xcc>)
 800b2c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2c2:	f003 0301 	and.w	r3, r3, #1
 800b2c6:	60fb      	str	r3, [r7, #12]
 800b2c8:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b2ca:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800b2ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2d0:	2302      	movs	r3, #2
 800b2d2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b2d8:	2303      	movs	r3, #3
 800b2da:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b2dc:	230a      	movs	r3, #10
 800b2de:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b2e0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800b2e4:	4619      	mov	r1, r3
 800b2e6:	4812      	ldr	r0, [pc, #72]	@ (800b330 <HAL_PCD_MspInit+0xd0>)
 800b2e8:	f7f8 f98a 	bl	8003600 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b2ec:	4b0f      	ldr	r3, [pc, #60]	@ (800b32c <HAL_PCD_MspInit+0xcc>)
 800b2ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2f0:	4a0e      	ldr	r2, [pc, #56]	@ (800b32c <HAL_PCD_MspInit+0xcc>)
 800b2f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b2f6:	6353      	str	r3, [r2, #52]	@ 0x34
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	60bb      	str	r3, [r7, #8]
 800b2fc:	4b0b      	ldr	r3, [pc, #44]	@ (800b32c <HAL_PCD_MspInit+0xcc>)
 800b2fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b300:	4a0a      	ldr	r2, [pc, #40]	@ (800b32c <HAL_PCD_MspInit+0xcc>)
 800b302:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b306:	6453      	str	r3, [r2, #68]	@ 0x44
 800b308:	4b08      	ldr	r3, [pc, #32]	@ (800b32c <HAL_PCD_MspInit+0xcc>)
 800b30a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b30c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b310:	60bb      	str	r3, [r7, #8]
 800b312:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b314:	2200      	movs	r2, #0
 800b316:	2100      	movs	r1, #0
 800b318:	2043      	movs	r0, #67	@ 0x43
 800b31a:	f7f7 fd50 	bl	8002dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b31e:	2043      	movs	r0, #67	@ 0x43
 800b320:	f7f7 fd69 	bl	8002df6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b324:	bf00      	nop
 800b326:	3780      	adds	r7, #128	@ 0x80
 800b328:	46bd      	mov	sp, r7
 800b32a:	bd80      	pop	{r7, pc}
 800b32c:	40023800 	.word	0x40023800
 800b330:	40020000 	.word	0x40020000

0800b334 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b082      	sub	sp, #8
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b348:	4619      	mov	r1, r3
 800b34a:	4610      	mov	r0, r2
 800b34c:	f7fe fb1d 	bl	800998a <USBD_LL_SetupStage>
}
 800b350:	bf00      	nop
 800b352:	3708      	adds	r7, #8
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}

0800b358 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b082      	sub	sp, #8
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
 800b360:	460b      	mov	r3, r1
 800b362:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b36a:	78fa      	ldrb	r2, [r7, #3]
 800b36c:	6879      	ldr	r1, [r7, #4]
 800b36e:	4613      	mov	r3, r2
 800b370:	00db      	lsls	r3, r3, #3
 800b372:	4413      	add	r3, r2
 800b374:	009b      	lsls	r3, r3, #2
 800b376:	440b      	add	r3, r1
 800b378:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b37c:	681a      	ldr	r2, [r3, #0]
 800b37e:	78fb      	ldrb	r3, [r7, #3]
 800b380:	4619      	mov	r1, r3
 800b382:	f7fe fb57 	bl	8009a34 <USBD_LL_DataOutStage>
}
 800b386:	bf00      	nop
 800b388:	3708      	adds	r7, #8
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}

0800b38e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b38e:	b580      	push	{r7, lr}
 800b390:	b082      	sub	sp, #8
 800b392:	af00      	add	r7, sp, #0
 800b394:	6078      	str	r0, [r7, #4]
 800b396:	460b      	mov	r3, r1
 800b398:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b3a0:	78fa      	ldrb	r2, [r7, #3]
 800b3a2:	6879      	ldr	r1, [r7, #4]
 800b3a4:	4613      	mov	r3, r2
 800b3a6:	00db      	lsls	r3, r3, #3
 800b3a8:	4413      	add	r3, r2
 800b3aa:	009b      	lsls	r3, r3, #2
 800b3ac:	440b      	add	r3, r1
 800b3ae:	3320      	adds	r3, #32
 800b3b0:	681a      	ldr	r2, [r3, #0]
 800b3b2:	78fb      	ldrb	r3, [r7, #3]
 800b3b4:	4619      	mov	r1, r3
 800b3b6:	f7fe fbf0 	bl	8009b9a <USBD_LL_DataInStage>
}
 800b3ba:	bf00      	nop
 800b3bc:	3708      	adds	r7, #8
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}

0800b3c2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3c2:	b580      	push	{r7, lr}
 800b3c4:	b082      	sub	sp, #8
 800b3c6:	af00      	add	r7, sp, #0
 800b3c8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f7fe fd2a 	bl	8009e2a <USBD_LL_SOF>
}
 800b3d6:	bf00      	nop
 800b3d8:	3708      	adds	r7, #8
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}

0800b3de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3de:	b580      	push	{r7, lr}
 800b3e0:	b084      	sub	sp, #16
 800b3e2:	af00      	add	r7, sp, #0
 800b3e4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	79db      	ldrb	r3, [r3, #7]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d102      	bne.n	800b3f8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	73fb      	strb	r3, [r7, #15]
 800b3f6:	e008      	b.n	800b40a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	79db      	ldrb	r3, [r3, #7]
 800b3fc:	2b02      	cmp	r3, #2
 800b3fe:	d102      	bne.n	800b406 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b400:	2301      	movs	r3, #1
 800b402:	73fb      	strb	r3, [r7, #15]
 800b404:	e001      	b.n	800b40a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b406:	f7f6 fba7 	bl	8001b58 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b410:	7bfa      	ldrb	r2, [r7, #15]
 800b412:	4611      	mov	r1, r2
 800b414:	4618      	mov	r0, r3
 800b416:	f7fe fcc4 	bl	8009da2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b420:	4618      	mov	r0, r3
 800b422:	f7fe fc6c 	bl	8009cfe <USBD_LL_Reset>
}
 800b426:	bf00      	nop
 800b428:	3710      	adds	r7, #16
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}
	...

0800b430 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b082      	sub	sp, #8
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b43e:	4618      	mov	r0, r3
 800b440:	f7fe fcbf 	bl	8009dc2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	687a      	ldr	r2, [r7, #4]
 800b450:	6812      	ldr	r2, [r2, #0]
 800b452:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b456:	f043 0301 	orr.w	r3, r3, #1
 800b45a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	7adb      	ldrb	r3, [r3, #11]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d005      	beq.n	800b470 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b464:	4b04      	ldr	r3, [pc, #16]	@ (800b478 <HAL_PCD_SuspendCallback+0x48>)
 800b466:	691b      	ldr	r3, [r3, #16]
 800b468:	4a03      	ldr	r2, [pc, #12]	@ (800b478 <HAL_PCD_SuspendCallback+0x48>)
 800b46a:	f043 0306 	orr.w	r3, r3, #6
 800b46e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b470:	bf00      	nop
 800b472:	3708      	adds	r7, #8
 800b474:	46bd      	mov	sp, r7
 800b476:	bd80      	pop	{r7, pc}
 800b478:	e000ed00 	.word	0xe000ed00

0800b47c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b082      	sub	sp, #8
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b48a:	4618      	mov	r0, r3
 800b48c:	f7fe fcb5 	bl	8009dfa <USBD_LL_Resume>
}
 800b490:	bf00      	nop
 800b492:	3708      	adds	r7, #8
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}

0800b498 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b082      	sub	sp, #8
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
 800b4a0:	460b      	mov	r3, r1
 800b4a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b4aa:	78fa      	ldrb	r2, [r7, #3]
 800b4ac:	4611      	mov	r1, r2
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f7fe fd0d 	bl	8009ece <USBD_LL_IsoOUTIncomplete>
}
 800b4b4:	bf00      	nop
 800b4b6:	3708      	adds	r7, #8
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}

0800b4bc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b082      	sub	sp, #8
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
 800b4c4:	460b      	mov	r3, r1
 800b4c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b4ce:	78fa      	ldrb	r2, [r7, #3]
 800b4d0:	4611      	mov	r1, r2
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f7fe fcc9 	bl	8009e6a <USBD_LL_IsoINIncomplete>
}
 800b4d8:	bf00      	nop
 800b4da:	3708      	adds	r7, #8
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}

0800b4e0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b082      	sub	sp, #8
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	f7fe fd1f 	bl	8009f32 <USBD_LL_DevConnected>
}
 800b4f4:	bf00      	nop
 800b4f6:	3708      	adds	r7, #8
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bd80      	pop	{r7, pc}

0800b4fc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b082      	sub	sp, #8
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b50a:	4618      	mov	r0, r3
 800b50c:	f7fe fd1c 	bl	8009f48 <USBD_LL_DevDisconnected>
}
 800b510:	bf00      	nop
 800b512:	3708      	adds	r7, #8
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}

0800b518 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b082      	sub	sp, #8
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	781b      	ldrb	r3, [r3, #0]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d13c      	bne.n	800b5a2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b528:	4a20      	ldr	r2, [pc, #128]	@ (800b5ac <USBD_LL_Init+0x94>)
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	4a1e      	ldr	r2, [pc, #120]	@ (800b5ac <USBD_LL_Init+0x94>)
 800b534:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b538:	4b1c      	ldr	r3, [pc, #112]	@ (800b5ac <USBD_LL_Init+0x94>)
 800b53a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b53e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800b540:	4b1a      	ldr	r3, [pc, #104]	@ (800b5ac <USBD_LL_Init+0x94>)
 800b542:	2206      	movs	r2, #6
 800b544:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b546:	4b19      	ldr	r3, [pc, #100]	@ (800b5ac <USBD_LL_Init+0x94>)
 800b548:	2202      	movs	r2, #2
 800b54a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b54c:	4b17      	ldr	r3, [pc, #92]	@ (800b5ac <USBD_LL_Init+0x94>)
 800b54e:	2200      	movs	r2, #0
 800b550:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b552:	4b16      	ldr	r3, [pc, #88]	@ (800b5ac <USBD_LL_Init+0x94>)
 800b554:	2202      	movs	r2, #2
 800b556:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b558:	4b14      	ldr	r3, [pc, #80]	@ (800b5ac <USBD_LL_Init+0x94>)
 800b55a:	2200      	movs	r2, #0
 800b55c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b55e:	4b13      	ldr	r3, [pc, #76]	@ (800b5ac <USBD_LL_Init+0x94>)
 800b560:	2200      	movs	r2, #0
 800b562:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b564:	4b11      	ldr	r3, [pc, #68]	@ (800b5ac <USBD_LL_Init+0x94>)
 800b566:	2200      	movs	r2, #0
 800b568:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b56a:	4b10      	ldr	r3, [pc, #64]	@ (800b5ac <USBD_LL_Init+0x94>)
 800b56c:	2200      	movs	r2, #0
 800b56e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b570:	4b0e      	ldr	r3, [pc, #56]	@ (800b5ac <USBD_LL_Init+0x94>)
 800b572:	2200      	movs	r2, #0
 800b574:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b576:	480d      	ldr	r0, [pc, #52]	@ (800b5ac <USBD_LL_Init+0x94>)
 800b578:	f7f8 f9ef 	bl	800395a <HAL_PCD_Init>
 800b57c:	4603      	mov	r3, r0
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d001      	beq.n	800b586 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b582:	f7f6 fae9 	bl	8001b58 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b586:	2180      	movs	r1, #128	@ 0x80
 800b588:	4808      	ldr	r0, [pc, #32]	@ (800b5ac <USBD_LL_Init+0x94>)
 800b58a:	f7f9 fc50 	bl	8004e2e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b58e:	2240      	movs	r2, #64	@ 0x40
 800b590:	2100      	movs	r1, #0
 800b592:	4806      	ldr	r0, [pc, #24]	@ (800b5ac <USBD_LL_Init+0x94>)
 800b594:	f7f9 fc04 	bl	8004da0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b598:	2280      	movs	r2, #128	@ 0x80
 800b59a:	2101      	movs	r1, #1
 800b59c:	4803      	ldr	r0, [pc, #12]	@ (800b5ac <USBD_LL_Init+0x94>)
 800b59e:	f7f9 fbff 	bl	8004da0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b5a2:	2300      	movs	r3, #0
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	3708      	adds	r7, #8
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd80      	pop	{r7, pc}
 800b5ac:	2000215c 	.word	0x2000215c

0800b5b0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b084      	sub	sp, #16
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f7f8 fadd 	bl	8003b86 <HAL_PCD_Start>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5d0:	7bfb      	ldrb	r3, [r7, #15]
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f000 f990 	bl	800b8f8 <USBD_Get_USB_Status>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	3710      	adds	r7, #16
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}

0800b5e6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b5e6:	b580      	push	{r7, lr}
 800b5e8:	b084      	sub	sp, #16
 800b5ea:	af00      	add	r7, sp, #0
 800b5ec:	6078      	str	r0, [r7, #4]
 800b5ee:	4608      	mov	r0, r1
 800b5f0:	4611      	mov	r1, r2
 800b5f2:	461a      	mov	r2, r3
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	70fb      	strb	r3, [r7, #3]
 800b5f8:	460b      	mov	r3, r1
 800b5fa:	70bb      	strb	r3, [r7, #2]
 800b5fc:	4613      	mov	r3, r2
 800b5fe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b600:	2300      	movs	r3, #0
 800b602:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b604:	2300      	movs	r3, #0
 800b606:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b60e:	78bb      	ldrb	r3, [r7, #2]
 800b610:	883a      	ldrh	r2, [r7, #0]
 800b612:	78f9      	ldrb	r1, [r7, #3]
 800b614:	f7f8 ffde 	bl	80045d4 <HAL_PCD_EP_Open>
 800b618:	4603      	mov	r3, r0
 800b61a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b61c:	7bfb      	ldrb	r3, [r7, #15]
 800b61e:	4618      	mov	r0, r3
 800b620:	f000 f96a 	bl	800b8f8 <USBD_Get_USB_Status>
 800b624:	4603      	mov	r3, r0
 800b626:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b628:	7bbb      	ldrb	r3, [r7, #14]
}
 800b62a:	4618      	mov	r0, r3
 800b62c:	3710      	adds	r7, #16
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd80      	pop	{r7, pc}

0800b632 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b632:	b580      	push	{r7, lr}
 800b634:	b084      	sub	sp, #16
 800b636:	af00      	add	r7, sp, #0
 800b638:	6078      	str	r0, [r7, #4]
 800b63a:	460b      	mov	r3, r1
 800b63c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b63e:	2300      	movs	r3, #0
 800b640:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b642:	2300      	movs	r3, #0
 800b644:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b64c:	78fa      	ldrb	r2, [r7, #3]
 800b64e:	4611      	mov	r1, r2
 800b650:	4618      	mov	r0, r3
 800b652:	f7f9 f829 	bl	80046a8 <HAL_PCD_EP_Close>
 800b656:	4603      	mov	r3, r0
 800b658:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b65a:	7bfb      	ldrb	r3, [r7, #15]
 800b65c:	4618      	mov	r0, r3
 800b65e:	f000 f94b 	bl	800b8f8 <USBD_Get_USB_Status>
 800b662:	4603      	mov	r3, r0
 800b664:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b666:	7bbb      	ldrb	r3, [r7, #14]
}
 800b668:	4618      	mov	r0, r3
 800b66a:	3710      	adds	r7, #16
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}

0800b670 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b084      	sub	sp, #16
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
 800b678:	460b      	mov	r3, r1
 800b67a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b67c:	2300      	movs	r3, #0
 800b67e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b680:	2300      	movs	r3, #0
 800b682:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b68a:	78fa      	ldrb	r2, [r7, #3]
 800b68c:	4611      	mov	r1, r2
 800b68e:	4618      	mov	r0, r3
 800b690:	f7f9 f8e1 	bl	8004856 <HAL_PCD_EP_SetStall>
 800b694:	4603      	mov	r3, r0
 800b696:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b698:	7bfb      	ldrb	r3, [r7, #15]
 800b69a:	4618      	mov	r0, r3
 800b69c:	f000 f92c 	bl	800b8f8 <USBD_Get_USB_Status>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b6a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3710      	adds	r7, #16
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}

0800b6ae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b6ae:	b580      	push	{r7, lr}
 800b6b0:	b084      	sub	sp, #16
 800b6b2:	af00      	add	r7, sp, #0
 800b6b4:	6078      	str	r0, [r7, #4]
 800b6b6:	460b      	mov	r3, r1
 800b6b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6be:	2300      	movs	r3, #0
 800b6c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b6c8:	78fa      	ldrb	r2, [r7, #3]
 800b6ca:	4611      	mov	r1, r2
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f7f9 f925 	bl	800491c <HAL_PCD_EP_ClrStall>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b6d6:	7bfb      	ldrb	r3, [r7, #15]
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f000 f90d 	bl	800b8f8 <USBD_Get_USB_Status>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b6e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3710      	adds	r7, #16
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}

0800b6ec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b085      	sub	sp, #20
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
 800b6f4:	460b      	mov	r3, r1
 800b6f6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b6fe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b700:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b704:	2b00      	cmp	r3, #0
 800b706:	da0b      	bge.n	800b720 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b708:	78fb      	ldrb	r3, [r7, #3]
 800b70a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b70e:	68f9      	ldr	r1, [r7, #12]
 800b710:	4613      	mov	r3, r2
 800b712:	00db      	lsls	r3, r3, #3
 800b714:	4413      	add	r3, r2
 800b716:	009b      	lsls	r3, r3, #2
 800b718:	440b      	add	r3, r1
 800b71a:	3316      	adds	r3, #22
 800b71c:	781b      	ldrb	r3, [r3, #0]
 800b71e:	e00b      	b.n	800b738 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b720:	78fb      	ldrb	r3, [r7, #3]
 800b722:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b726:	68f9      	ldr	r1, [r7, #12]
 800b728:	4613      	mov	r3, r2
 800b72a:	00db      	lsls	r3, r3, #3
 800b72c:	4413      	add	r3, r2
 800b72e:	009b      	lsls	r3, r3, #2
 800b730:	440b      	add	r3, r1
 800b732:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800b736:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b738:	4618      	mov	r0, r3
 800b73a:	3714      	adds	r7, #20
 800b73c:	46bd      	mov	sp, r7
 800b73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b742:	4770      	bx	lr

0800b744 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b084      	sub	sp, #16
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
 800b74c:	460b      	mov	r3, r1
 800b74e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b750:	2300      	movs	r3, #0
 800b752:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b754:	2300      	movs	r3, #0
 800b756:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b75e:	78fa      	ldrb	r2, [r7, #3]
 800b760:	4611      	mov	r1, r2
 800b762:	4618      	mov	r0, r3
 800b764:	f7f8 ff12 	bl	800458c <HAL_PCD_SetAddress>
 800b768:	4603      	mov	r3, r0
 800b76a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b76c:	7bfb      	ldrb	r3, [r7, #15]
 800b76e:	4618      	mov	r0, r3
 800b770:	f000 f8c2 	bl	800b8f8 <USBD_Get_USB_Status>
 800b774:	4603      	mov	r3, r0
 800b776:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b778:	7bbb      	ldrb	r3, [r7, #14]
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3710      	adds	r7, #16
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}

0800b782 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b782:	b580      	push	{r7, lr}
 800b784:	b086      	sub	sp, #24
 800b786:	af00      	add	r7, sp, #0
 800b788:	60f8      	str	r0, [r7, #12]
 800b78a:	607a      	str	r2, [r7, #4]
 800b78c:	603b      	str	r3, [r7, #0]
 800b78e:	460b      	mov	r3, r1
 800b790:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b792:	2300      	movs	r3, #0
 800b794:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b796:	2300      	movs	r3, #0
 800b798:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b7a0:	7af9      	ldrb	r1, [r7, #11]
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	687a      	ldr	r2, [r7, #4]
 800b7a6:	f7f9 f81c 	bl	80047e2 <HAL_PCD_EP_Transmit>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7ae:	7dfb      	ldrb	r3, [r7, #23]
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f000 f8a1 	bl	800b8f8 <USBD_Get_USB_Status>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b7ba:	7dbb      	ldrb	r3, [r7, #22]
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	3718      	adds	r7, #24
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}

0800b7c4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b086      	sub	sp, #24
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	60f8      	str	r0, [r7, #12]
 800b7cc:	607a      	str	r2, [r7, #4]
 800b7ce:	603b      	str	r3, [r7, #0]
 800b7d0:	460b      	mov	r3, r1
 800b7d2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b7e2:	7af9      	ldrb	r1, [r7, #11]
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	687a      	ldr	r2, [r7, #4]
 800b7e8:	f7f8 ffa8 	bl	800473c <HAL_PCD_EP_Receive>
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7f0:	7dfb      	ldrb	r3, [r7, #23]
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f000 f880 	bl	800b8f8 <USBD_Get_USB_Status>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b7fc:	7dbb      	ldrb	r3, [r7, #22]
}
 800b7fe:	4618      	mov	r0, r3
 800b800:	3718      	adds	r7, #24
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}

0800b806 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b806:	b580      	push	{r7, lr}
 800b808:	b082      	sub	sp, #8
 800b80a:	af00      	add	r7, sp, #0
 800b80c:	6078      	str	r0, [r7, #4]
 800b80e:	460b      	mov	r3, r1
 800b810:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b818:	78fa      	ldrb	r2, [r7, #3]
 800b81a:	4611      	mov	r1, r2
 800b81c:	4618      	mov	r0, r3
 800b81e:	f7f8 ffc8 	bl	80047b2 <HAL_PCD_EP_GetRxCount>
 800b822:	4603      	mov	r3, r0
}
 800b824:	4618      	mov	r0, r3
 800b826:	3708      	adds	r7, #8
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}

0800b82c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b082      	sub	sp, #8
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
 800b834:	460b      	mov	r3, r1
 800b836:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800b838:	78fb      	ldrb	r3, [r7, #3]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d002      	beq.n	800b844 <HAL_PCDEx_LPM_Callback+0x18>
 800b83e:	2b01      	cmp	r3, #1
 800b840:	d01f      	beq.n	800b882 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800b842:	e03b      	b.n	800b8bc <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	7adb      	ldrb	r3, [r3, #11]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d007      	beq.n	800b85c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800b84c:	f7f5 fe0c 	bl	8001468 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b850:	4b1c      	ldr	r3, [pc, #112]	@ (800b8c4 <HAL_PCDEx_LPM_Callback+0x98>)
 800b852:	691b      	ldr	r3, [r3, #16]
 800b854:	4a1b      	ldr	r2, [pc, #108]	@ (800b8c4 <HAL_PCDEx_LPM_Callback+0x98>)
 800b856:	f023 0306 	bic.w	r3, r3, #6
 800b85a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	687a      	ldr	r2, [r7, #4]
 800b868:	6812      	ldr	r2, [r2, #0]
 800b86a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b86e:	f023 0301 	bic.w	r3, r3, #1
 800b872:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b87a:	4618      	mov	r0, r3
 800b87c:	f7fe fabd 	bl	8009dfa <USBD_LL_Resume>
    break;
 800b880:	e01c      	b.n	800b8bc <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	687a      	ldr	r2, [r7, #4]
 800b88e:	6812      	ldr	r2, [r2, #0]
 800b890:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b894:	f043 0301 	orr.w	r3, r3, #1
 800b898:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	f7fe fa8e 	bl	8009dc2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	7adb      	ldrb	r3, [r3, #11]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d005      	beq.n	800b8ba <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b8ae:	4b05      	ldr	r3, [pc, #20]	@ (800b8c4 <HAL_PCDEx_LPM_Callback+0x98>)
 800b8b0:	691b      	ldr	r3, [r3, #16]
 800b8b2:	4a04      	ldr	r2, [pc, #16]	@ (800b8c4 <HAL_PCDEx_LPM_Callback+0x98>)
 800b8b4:	f043 0306 	orr.w	r3, r3, #6
 800b8b8:	6113      	str	r3, [r2, #16]
    break;
 800b8ba:	bf00      	nop
}
 800b8bc:	bf00      	nop
 800b8be:	3708      	adds	r7, #8
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}
 800b8c4:	e000ed00 	.word	0xe000ed00

0800b8c8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b083      	sub	sp, #12
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b8d0:	4b03      	ldr	r3, [pc, #12]	@ (800b8e0 <USBD_static_malloc+0x18>)
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	370c      	adds	r7, #12
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8dc:	4770      	bx	lr
 800b8de:	bf00      	nop
 800b8e0:	20002640 	.word	0x20002640

0800b8e4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b083      	sub	sp, #12
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]

}
 800b8ec:	bf00      	nop
 800b8ee:	370c      	adds	r7, #12
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f6:	4770      	bx	lr

0800b8f8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b085      	sub	sp, #20
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	4603      	mov	r3, r0
 800b900:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b902:	2300      	movs	r3, #0
 800b904:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b906:	79fb      	ldrb	r3, [r7, #7]
 800b908:	2b03      	cmp	r3, #3
 800b90a:	d817      	bhi.n	800b93c <USBD_Get_USB_Status+0x44>
 800b90c:	a201      	add	r2, pc, #4	@ (adr r2, 800b914 <USBD_Get_USB_Status+0x1c>)
 800b90e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b912:	bf00      	nop
 800b914:	0800b925 	.word	0x0800b925
 800b918:	0800b92b 	.word	0x0800b92b
 800b91c:	0800b931 	.word	0x0800b931
 800b920:	0800b937 	.word	0x0800b937
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b924:	2300      	movs	r3, #0
 800b926:	73fb      	strb	r3, [r7, #15]
    break;
 800b928:	e00b      	b.n	800b942 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b92a:	2303      	movs	r3, #3
 800b92c:	73fb      	strb	r3, [r7, #15]
    break;
 800b92e:	e008      	b.n	800b942 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b930:	2301      	movs	r3, #1
 800b932:	73fb      	strb	r3, [r7, #15]
    break;
 800b934:	e005      	b.n	800b942 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b936:	2303      	movs	r3, #3
 800b938:	73fb      	strb	r3, [r7, #15]
    break;
 800b93a:	e002      	b.n	800b942 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b93c:	2303      	movs	r3, #3
 800b93e:	73fb      	strb	r3, [r7, #15]
    break;
 800b940:	bf00      	nop
  }
  return usb_status;
 800b942:	7bfb      	ldrb	r3, [r7, #15]
}
 800b944:	4618      	mov	r0, r3
 800b946:	3714      	adds	r7, #20
 800b948:	46bd      	mov	sp, r7
 800b94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94e:	4770      	bx	lr

0800b950 <arm_rfft_fast_init_f32>:
 800b950:	084b      	lsrs	r3, r1, #1
 800b952:	2b80      	cmp	r3, #128	@ 0x80
 800b954:	b410      	push	{r4}
 800b956:	8201      	strh	r1, [r0, #16]
 800b958:	8003      	strh	r3, [r0, #0]
 800b95a:	d047      	beq.n	800b9ec <arm_rfft_fast_init_f32+0x9c>
 800b95c:	d917      	bls.n	800b98e <arm_rfft_fast_init_f32+0x3e>
 800b95e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b962:	d03d      	beq.n	800b9e0 <arm_rfft_fast_init_f32+0x90>
 800b964:	d929      	bls.n	800b9ba <arm_rfft_fast_init_f32+0x6a>
 800b966:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b96a:	d020      	beq.n	800b9ae <arm_rfft_fast_init_f32+0x5e>
 800b96c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b970:	d113      	bne.n	800b99a <arm_rfft_fast_init_f32+0x4a>
 800b972:	4921      	ldr	r1, [pc, #132]	@ (800b9f8 <arm_rfft_fast_init_f32+0xa8>)
 800b974:	4a21      	ldr	r2, [pc, #132]	@ (800b9fc <arm_rfft_fast_init_f32+0xac>)
 800b976:	4b22      	ldr	r3, [pc, #136]	@ (800ba00 <arm_rfft_fast_init_f32+0xb0>)
 800b978:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 800b97c:	8184      	strh	r4, [r0, #12]
 800b97e:	6081      	str	r1, [r0, #8]
 800b980:	6042      	str	r2, [r0, #4]
 800b982:	6143      	str	r3, [r0, #20]
 800b984:	2000      	movs	r0, #0
 800b986:	b240      	sxtb	r0, r0
 800b988:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b98c:	4770      	bx	lr
 800b98e:	2b20      	cmp	r3, #32
 800b990:	d01c      	beq.n	800b9cc <arm_rfft_fast_init_f32+0x7c>
 800b992:	2b40      	cmp	r3, #64	@ 0x40
 800b994:	d006      	beq.n	800b9a4 <arm_rfft_fast_init_f32+0x54>
 800b996:	2b10      	cmp	r3, #16
 800b998:	d01d      	beq.n	800b9d6 <arm_rfft_fast_init_f32+0x86>
 800b99a:	20ff      	movs	r0, #255	@ 0xff
 800b99c:	b240      	sxtb	r0, r0
 800b99e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9a2:	4770      	bx	lr
 800b9a4:	2438      	movs	r4, #56	@ 0x38
 800b9a6:	4917      	ldr	r1, [pc, #92]	@ (800ba04 <arm_rfft_fast_init_f32+0xb4>)
 800b9a8:	4a17      	ldr	r2, [pc, #92]	@ (800ba08 <arm_rfft_fast_init_f32+0xb8>)
 800b9aa:	4b18      	ldr	r3, [pc, #96]	@ (800ba0c <arm_rfft_fast_init_f32+0xbc>)
 800b9ac:	e7e6      	b.n	800b97c <arm_rfft_fast_init_f32+0x2c>
 800b9ae:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 800b9b2:	4917      	ldr	r1, [pc, #92]	@ (800ba10 <arm_rfft_fast_init_f32+0xc0>)
 800b9b4:	4a17      	ldr	r2, [pc, #92]	@ (800ba14 <arm_rfft_fast_init_f32+0xc4>)
 800b9b6:	4b18      	ldr	r3, [pc, #96]	@ (800ba18 <arm_rfft_fast_init_f32+0xc8>)
 800b9b8:	e7e0      	b.n	800b97c <arm_rfft_fast_init_f32+0x2c>
 800b9ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b9be:	d1ec      	bne.n	800b99a <arm_rfft_fast_init_f32+0x4a>
 800b9c0:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 800b9c4:	4915      	ldr	r1, [pc, #84]	@ (800ba1c <arm_rfft_fast_init_f32+0xcc>)
 800b9c6:	4a16      	ldr	r2, [pc, #88]	@ (800ba20 <arm_rfft_fast_init_f32+0xd0>)
 800b9c8:	4b16      	ldr	r3, [pc, #88]	@ (800ba24 <arm_rfft_fast_init_f32+0xd4>)
 800b9ca:	e7d7      	b.n	800b97c <arm_rfft_fast_init_f32+0x2c>
 800b9cc:	2430      	movs	r4, #48	@ 0x30
 800b9ce:	4916      	ldr	r1, [pc, #88]	@ (800ba28 <arm_rfft_fast_init_f32+0xd8>)
 800b9d0:	4a16      	ldr	r2, [pc, #88]	@ (800ba2c <arm_rfft_fast_init_f32+0xdc>)
 800b9d2:	4b17      	ldr	r3, [pc, #92]	@ (800ba30 <arm_rfft_fast_init_f32+0xe0>)
 800b9d4:	e7d2      	b.n	800b97c <arm_rfft_fast_init_f32+0x2c>
 800b9d6:	2414      	movs	r4, #20
 800b9d8:	4916      	ldr	r1, [pc, #88]	@ (800ba34 <arm_rfft_fast_init_f32+0xe4>)
 800b9da:	4a17      	ldr	r2, [pc, #92]	@ (800ba38 <arm_rfft_fast_init_f32+0xe8>)
 800b9dc:	4b17      	ldr	r3, [pc, #92]	@ (800ba3c <arm_rfft_fast_init_f32+0xec>)
 800b9de:	e7cd      	b.n	800b97c <arm_rfft_fast_init_f32+0x2c>
 800b9e0:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 800b9e4:	4916      	ldr	r1, [pc, #88]	@ (800ba40 <arm_rfft_fast_init_f32+0xf0>)
 800b9e6:	4a17      	ldr	r2, [pc, #92]	@ (800ba44 <arm_rfft_fast_init_f32+0xf4>)
 800b9e8:	4b17      	ldr	r3, [pc, #92]	@ (800ba48 <arm_rfft_fast_init_f32+0xf8>)
 800b9ea:	e7c7      	b.n	800b97c <arm_rfft_fast_init_f32+0x2c>
 800b9ec:	24d0      	movs	r4, #208	@ 0xd0
 800b9ee:	4917      	ldr	r1, [pc, #92]	@ (800ba4c <arm_rfft_fast_init_f32+0xfc>)
 800b9f0:	4a17      	ldr	r2, [pc, #92]	@ (800ba50 <arm_rfft_fast_init_f32+0x100>)
 800b9f2:	4b18      	ldr	r3, [pc, #96]	@ (800ba54 <arm_rfft_fast_init_f32+0x104>)
 800b9f4:	e7c2      	b.n	800b97c <arm_rfft_fast_init_f32+0x2c>
 800b9f6:	bf00      	nop
 800b9f8:	08020014 	.word	0x08020014
 800b9fc:	0801120c 	.word	0x0801120c
 800ba00:	0801737c 	.word	0x0801737c
 800ba04:	0801530c 	.word	0x0801530c
 800ba08:	08021dd4 	.word	0x08021dd4
 800ba0c:	080242c4 	.word	0x080242c4
 800ba10:	0801dcfc 	.word	0x0801dcfc
 800ba14:	0801bbfc 	.word	0x0801bbfc
 800ba18:	0801537c 	.word	0x0801537c
 800ba1c:	08023f54 	.word	0x08023f54
 800ba20:	0801b37c 	.word	0x0801b37c
 800ba24:	08021fd4 	.word	0x08021fd4
 800ba28:	0801ebb4 	.word	0x0801ebb4
 800ba2c:	0801dbfc 	.word	0x0801dbfc
 800ba30:	0801520c 	.word	0x0801520c
 800ba34:	0801eb0c 	.word	0x0801eb0c
 800ba38:	0801bb7c 	.word	0x0801bb7c
 800ba3c:	0801eb34 	.word	0x0801eb34
 800ba40:	080227d4 	.word	0x080227d4
 800ba44:	0801f014 	.word	0x0801f014
 800ba48:	08022b54 	.word	0x08022b54
 800ba4c:	080244c4 	.word	0x080244c4
 800ba50:	0801ec14 	.word	0x0801ec14
 800ba54:	08023b54 	.word	0x08023b54

0800ba58 <arm_rfft_fast_f32>:
 800ba58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba5c:	8a06      	ldrh	r6, [r0, #16]
 800ba5e:	0876      	lsrs	r6, r6, #1
 800ba60:	4607      	mov	r7, r0
 800ba62:	4615      	mov	r5, r2
 800ba64:	8006      	strh	r6, [r0, #0]
 800ba66:	460c      	mov	r4, r1
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d15c      	bne.n	800bb26 <arm_rfft_fast_f32+0xce>
 800ba6c:	461a      	mov	r2, r3
 800ba6e:	2301      	movs	r3, #1
 800ba70:	f000 fbe6 	bl	800c240 <arm_cfft_f32>
 800ba74:	edd4 7a00 	vldr	s15, [r4]
 800ba78:	ed94 7a01 	vldr	s14, [r4, #4]
 800ba7c:	883e      	ldrh	r6, [r7, #0]
 800ba7e:	6978      	ldr	r0, [r7, #20]
 800ba80:	ee37 7a07 	vadd.f32	s14, s14, s14
 800ba84:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ba88:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 800ba8c:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ba90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ba94:	3e01      	subs	r6, #1
 800ba96:	ee26 7aa3 	vmul.f32	s14, s13, s7
 800ba9a:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800ba9e:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800baa2:	ed85 7a00 	vstr	s14, [r5]
 800baa6:	edc5 7a01 	vstr	s15, [r5, #4]
 800baaa:	3010      	adds	r0, #16
 800baac:	f105 0210 	add.w	r2, r5, #16
 800bab0:	3b08      	subs	r3, #8
 800bab2:	f104 0110 	add.w	r1, r4, #16
 800bab6:	ed51 4a02 	vldr	s9, [r1, #-8]
 800baba:	ed93 5a02 	vldr	s10, [r3, #8]
 800babe:	ed11 7a01 	vldr	s14, [r1, #-4]
 800bac2:	ed10 6a02 	vldr	s12, [r0, #-8]
 800bac6:	edd3 5a03 	vldr	s11, [r3, #12]
 800baca:	ed50 6a01 	vldr	s13, [r0, #-4]
 800bace:	ee75 7a64 	vsub.f32	s15, s10, s9
 800bad2:	ee35 4a87 	vadd.f32	s8, s11, s14
 800bad6:	ee35 5a24 	vadd.f32	s10, s10, s9
 800bada:	ee77 5a65 	vsub.f32	s11, s14, s11
 800bade:	ee66 4a27 	vmul.f32	s9, s12, s15
 800bae2:	ee26 7aa7 	vmul.f32	s14, s13, s15
 800bae6:	ee34 5a85 	vadd.f32	s10, s9, s10
 800baea:	ee26 6a04 	vmul.f32	s12, s12, s8
 800baee:	ee66 6a84 	vmul.f32	s13, s13, s8
 800baf2:	ee77 7a25 	vadd.f32	s15, s14, s11
 800baf6:	ee76 6a85 	vadd.f32	s13, s13, s10
 800bafa:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800bafe:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800bb02:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800bb06:	3e01      	subs	r6, #1
 800bb08:	ed42 6a02 	vstr	s13, [r2, #-8]
 800bb0c:	ed42 7a01 	vstr	s15, [r2, #-4]
 800bb10:	f1a3 0308 	sub.w	r3, r3, #8
 800bb14:	f101 0108 	add.w	r1, r1, #8
 800bb18:	f100 0008 	add.w	r0, r0, #8
 800bb1c:	f102 0208 	add.w	r2, r2, #8
 800bb20:	d1c9      	bne.n	800bab6 <arm_rfft_fast_f32+0x5e>
 800bb22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb26:	edd1 7a00 	vldr	s15, [r1]
 800bb2a:	edd1 6a01 	vldr	s13, [r1, #4]
 800bb2e:	6941      	ldr	r1, [r0, #20]
 800bb30:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bb34:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bb38:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 800bb3c:	ee27 7a23 	vmul.f32	s14, s14, s7
 800bb40:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800bb44:	3e01      	subs	r6, #1
 800bb46:	ed82 7a00 	vstr	s14, [r2]
 800bb4a:	edc2 7a01 	vstr	s15, [r2, #4]
 800bb4e:	00f0      	lsls	r0, r6, #3
 800bb50:	b3ee      	cbz	r6, 800bbce <arm_rfft_fast_f32+0x176>
 800bb52:	3808      	subs	r0, #8
 800bb54:	f101 0e10 	add.w	lr, r1, #16
 800bb58:	4420      	add	r0, r4
 800bb5a:	f104 0110 	add.w	r1, r4, #16
 800bb5e:	f102 0c10 	add.w	ip, r2, #16
 800bb62:	ed90 7a02 	vldr	s14, [r0, #8]
 800bb66:	ed51 6a02 	vldr	s13, [r1, #-8]
 800bb6a:	ed1e 6a02 	vldr	s12, [lr, #-8]
 800bb6e:	ed90 4a03 	vldr	s8, [r0, #12]
 800bb72:	ed11 5a01 	vldr	s10, [r1, #-4]
 800bb76:	ed5e 5a01 	vldr	s11, [lr, #-4]
 800bb7a:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800bb7e:	ee74 4a05 	vadd.f32	s9, s8, s10
 800bb82:	ee26 3a27 	vmul.f32	s6, s12, s15
 800bb86:	ee77 6a26 	vadd.f32	s13, s14, s13
 800bb8a:	ee35 5a44 	vsub.f32	s10, s10, s8
 800bb8e:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800bb92:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800bb96:	ee77 7a05 	vadd.f32	s15, s14, s10
 800bb9a:	ee26 6a24 	vmul.f32	s12, s12, s9
 800bb9e:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800bba2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800bba6:	ee36 7ae5 	vsub.f32	s14, s13, s11
 800bbaa:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800bbae:	ee27 7a23 	vmul.f32	s14, s14, s7
 800bbb2:	3e01      	subs	r6, #1
 800bbb4:	ed0c 7a02 	vstr	s14, [ip, #-8]
 800bbb8:	ed4c 7a01 	vstr	s15, [ip, #-4]
 800bbbc:	f1a0 0008 	sub.w	r0, r0, #8
 800bbc0:	f101 0108 	add.w	r1, r1, #8
 800bbc4:	f10e 0e08 	add.w	lr, lr, #8
 800bbc8:	f10c 0c08 	add.w	ip, ip, #8
 800bbcc:	d1c9      	bne.n	800bb62 <arm_rfft_fast_f32+0x10a>
 800bbce:	4638      	mov	r0, r7
 800bbd0:	4629      	mov	r1, r5
 800bbd2:	461a      	mov	r2, r3
 800bbd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbd8:	2301      	movs	r3, #1
 800bbda:	f000 bb31 	b.w	800c240 <arm_cfft_f32>
 800bbde:	bf00      	nop

0800bbe0 <arm_cfft_radix8by2_f32>:
 800bbe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbe4:	ed2d 8b08 	vpush	{d8-d11}
 800bbe8:	f8b0 e000 	ldrh.w	lr, [r0]
 800bbec:	6842      	ldr	r2, [r0, #4]
 800bbee:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 800bbf2:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 800bbf6:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800bbfa:	4607      	mov	r7, r0
 800bbfc:	ea4f 038c 	mov.w	r3, ip, lsl #2
 800bc00:	f000 80af 	beq.w	800bd62 <arm_cfft_radix8by2_f32+0x182>
 800bc04:	3310      	adds	r3, #16
 800bc06:	18ce      	adds	r6, r1, r3
 800bc08:	3210      	adds	r2, #16
 800bc0a:	4443      	add	r3, r8
 800bc0c:	f101 0510 	add.w	r5, r1, #16
 800bc10:	f108 0410 	add.w	r4, r8, #16
 800bc14:	ed54 1a04 	vldr	s3, [r4, #-16]
 800bc18:	ed13 4a04 	vldr	s8, [r3, #-16]
 800bc1c:	ed53 3a03 	vldr	s7, [r3, #-12]
 800bc20:	ed53 5a02 	vldr	s11, [r3, #-8]
 800bc24:	ed13 5a01 	vldr	s10, [r3, #-4]
 800bc28:	ed54 6a03 	vldr	s13, [r4, #-12]
 800bc2c:	ed14 0a02 	vldr	s0, [r4, #-8]
 800bc30:	ed16 2a04 	vldr	s4, [r6, #-16]
 800bc34:	ed56 2a03 	vldr	s5, [r6, #-12]
 800bc38:	ed15 6a03 	vldr	s12, [r5, #-12]
 800bc3c:	ed15 7a01 	vldr	s14, [r5, #-4]
 800bc40:	ed15 3a04 	vldr	s6, [r5, #-16]
 800bc44:	ed54 7a01 	vldr	s15, [r4, #-4]
 800bc48:	ed56 0a02 	vldr	s1, [r6, #-8]
 800bc4c:	ed16 1a01 	vldr	s2, [r6, #-4]
 800bc50:	ed55 4a02 	vldr	s9, [r5, #-8]
 800bc54:	ee73 ba21 	vadd.f32	s23, s6, s3
 800bc58:	ee36 ba26 	vadd.f32	s22, s12, s13
 800bc5c:	ee37 aa27 	vadd.f32	s20, s14, s15
 800bc60:	ee72 9a04 	vadd.f32	s19, s4, s8
 800bc64:	ee32 9aa3 	vadd.f32	s18, s5, s7
 800bc68:	ee31 8a05 	vadd.f32	s16, s2, s10
 800bc6c:	ee74 aa80 	vadd.f32	s21, s9, s0
 800bc70:	ee70 8aa5 	vadd.f32	s17, s1, s11
 800bc74:	ed45 ba04 	vstr	s23, [r5, #-16]
 800bc78:	ed05 ba03 	vstr	s22, [r5, #-12]
 800bc7c:	ed45 aa02 	vstr	s21, [r5, #-8]
 800bc80:	ed05 aa01 	vstr	s20, [r5, #-4]
 800bc84:	ed06 8a01 	vstr	s16, [r6, #-4]
 800bc88:	ed46 9a04 	vstr	s19, [r6, #-16]
 800bc8c:	ed06 9a03 	vstr	s18, [r6, #-12]
 800bc90:	ed46 8a02 	vstr	s17, [r6, #-8]
 800bc94:	ee76 6a66 	vsub.f32	s13, s12, s13
 800bc98:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800bc9c:	ed12 6a03 	vldr	s12, [r2, #-12]
 800bca0:	ed52 2a04 	vldr	s5, [r2, #-16]
 800bca4:	ee33 3a61 	vsub.f32	s6, s6, s3
 800bca8:	ee34 4a42 	vsub.f32	s8, s8, s4
 800bcac:	ee26 8a86 	vmul.f32	s16, s13, s12
 800bcb0:	ee24 2a06 	vmul.f32	s4, s8, s12
 800bcb4:	ee63 1a22 	vmul.f32	s3, s6, s5
 800bcb8:	ee24 4a22 	vmul.f32	s8, s8, s5
 800bcbc:	ee23 3a06 	vmul.f32	s6, s6, s12
 800bcc0:	ee66 6aa2 	vmul.f32	s13, s13, s5
 800bcc4:	ee23 6a86 	vmul.f32	s12, s7, s12
 800bcc8:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800bccc:	ee36 6a04 	vadd.f32	s12, s12, s8
 800bcd0:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800bcd4:	ee72 3a63 	vsub.f32	s7, s4, s7
 800bcd8:	ee71 2a88 	vadd.f32	s5, s3, s16
 800bcdc:	ed44 6a03 	vstr	s13, [r4, #-12]
 800bce0:	ed44 2a04 	vstr	s5, [r4, #-16]
 800bce4:	ed43 3a04 	vstr	s7, [r3, #-16]
 800bce8:	ed03 6a03 	vstr	s12, [r3, #-12]
 800bcec:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bcf0:	ee75 6ae0 	vsub.f32	s13, s11, s1
 800bcf4:	ed12 7a01 	vldr	s14, [r2, #-4]
 800bcf8:	ed52 5a02 	vldr	s11, [r2, #-8]
 800bcfc:	ee35 6a41 	vsub.f32	s12, s10, s2
 800bd00:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800bd04:	ee67 3a87 	vmul.f32	s7, s15, s14
 800bd08:	ee26 5a87 	vmul.f32	s10, s13, s14
 800bd0c:	ee24 4aa5 	vmul.f32	s8, s9, s11
 800bd10:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800bd14:	ee64 4a87 	vmul.f32	s9, s9, s14
 800bd18:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800bd1c:	ee26 7a07 	vmul.f32	s14, s12, s14
 800bd20:	ee26 6a25 	vmul.f32	s12, s12, s11
 800bd24:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800bd28:	ee74 5a23 	vadd.f32	s11, s8, s7
 800bd2c:	ee35 6a46 	vsub.f32	s12, s10, s12
 800bd30:	ee37 7a26 	vadd.f32	s14, s14, s13
 800bd34:	f1be 0e01 	subs.w	lr, lr, #1
 800bd38:	ed44 5a02 	vstr	s11, [r4, #-8]
 800bd3c:	f105 0510 	add.w	r5, r5, #16
 800bd40:	ed44 7a01 	vstr	s15, [r4, #-4]
 800bd44:	f106 0610 	add.w	r6, r6, #16
 800bd48:	ed03 6a02 	vstr	s12, [r3, #-8]
 800bd4c:	ed03 7a01 	vstr	s14, [r3, #-4]
 800bd50:	f102 0210 	add.w	r2, r2, #16
 800bd54:	f104 0410 	add.w	r4, r4, #16
 800bd58:	f103 0310 	add.w	r3, r3, #16
 800bd5c:	f47f af5a 	bne.w	800bc14 <arm_cfft_radix8by2_f32+0x34>
 800bd60:	687a      	ldr	r2, [r7, #4]
 800bd62:	fa1f f48c 	uxth.w	r4, ip
 800bd66:	4608      	mov	r0, r1
 800bd68:	2302      	movs	r3, #2
 800bd6a:	4621      	mov	r1, r4
 800bd6c:	f000 fae2 	bl	800c334 <arm_radix8_butterfly_f32>
 800bd70:	ecbd 8b08 	vpop	{d8-d11}
 800bd74:	4640      	mov	r0, r8
 800bd76:	4621      	mov	r1, r4
 800bd78:	687a      	ldr	r2, [r7, #4]
 800bd7a:	2302      	movs	r3, #2
 800bd7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd80:	f000 bad8 	b.w	800c334 <arm_radix8_butterfly_f32>

0800bd84 <arm_cfft_radix8by4_f32>:
 800bd84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd88:	ed2d 8b0a 	vpush	{d8-d12}
 800bd8c:	8802      	ldrh	r2, [r0, #0]
 800bd8e:	ed91 6a00 	vldr	s12, [r1]
 800bd92:	b08f      	sub	sp, #60	@ 0x3c
 800bd94:	460f      	mov	r7, r1
 800bd96:	0852      	lsrs	r2, r2, #1
 800bd98:	0093      	lsls	r3, r2, #2
 800bd9a:	900c      	str	r0, [sp, #48]	@ 0x30
 800bd9c:	9103      	str	r1, [sp, #12]
 800bd9e:	6841      	ldr	r1, [r0, #4]
 800bda0:	ed97 7a01 	vldr	s14, [r7, #4]
 800bda4:	4638      	mov	r0, r7
 800bda6:	4418      	add	r0, r3
 800bda8:	4606      	mov	r6, r0
 800bdaa:	9009      	str	r0, [sp, #36]	@ 0x24
 800bdac:	4418      	add	r0, r3
 800bdae:	edd0 6a00 	vldr	s13, [r0]
 800bdb2:	edd6 3a00 	vldr	s7, [r6]
 800bdb6:	edd6 2a01 	vldr	s5, [r6, #4]
 800bdba:	edd0 7a01 	vldr	s15, [r0, #4]
 800bdbe:	900a      	str	r0, [sp, #40]	@ 0x28
 800bdc0:	ee76 5a26 	vadd.f32	s11, s12, s13
 800bdc4:	4604      	mov	r4, r0
 800bdc6:	4625      	mov	r5, r4
 800bdc8:	441c      	add	r4, r3
 800bdca:	ed94 4a00 	vldr	s8, [r4]
 800bdce:	ed94 5a01 	vldr	s10, [r4, #4]
 800bdd2:	9401      	str	r4, [sp, #4]
 800bdd4:	ee75 4aa3 	vadd.f32	s9, s11, s7
 800bdd8:	4630      	mov	r0, r6
 800bdda:	ee74 4a24 	vadd.f32	s9, s8, s9
 800bdde:	463e      	mov	r6, r7
 800bde0:	ee14 ea90 	vmov	lr, s9
 800bde4:	ee76 6a66 	vsub.f32	s13, s12, s13
 800bde8:	f846 eb08 	str.w	lr, [r6], #8
 800bdec:	ee37 6a27 	vadd.f32	s12, s14, s15
 800bdf0:	edd0 4a01 	vldr	s9, [r0, #4]
 800bdf4:	9604      	str	r6, [sp, #16]
 800bdf6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bdfa:	9e01      	ldr	r6, [sp, #4]
 800bdfc:	ee32 3aa6 	vadd.f32	s6, s5, s13
 800be00:	ed96 2a01 	vldr	s4, [r6, #4]
 800be04:	ee36 7a24 	vadd.f32	s14, s12, s9
 800be08:	ee75 5ae3 	vsub.f32	s11, s11, s7
 800be0c:	ee77 4ae3 	vsub.f32	s9, s15, s7
 800be10:	ee36 6a62 	vsub.f32	s12, s12, s5
 800be14:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800be18:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800be1c:	ee73 3a45 	vsub.f32	s7, s6, s10
 800be20:	4604      	mov	r4, r0
 800be22:	ee36 6a45 	vsub.f32	s12, s12, s10
 800be26:	ee75 6a26 	vadd.f32	s13, s10, s13
 800be2a:	46a3      	mov	fp, r4
 800be2c:	ee37 7a02 	vadd.f32	s14, s14, s4
 800be30:	ee34 5a84 	vadd.f32	s10, s9, s8
 800be34:	ee13 8a90 	vmov	r8, s7
 800be38:	46a4      	mov	ip, r4
 800be3a:	ee75 5ac4 	vsub.f32	s11, s11, s8
 800be3e:	ed87 7a01 	vstr	s14, [r7, #4]
 800be42:	f84b 8b08 	str.w	r8, [fp], #8
 800be46:	f1ac 0704 	sub.w	r7, ip, #4
 800be4a:	ed8c 5a01 	vstr	s10, [ip, #4]
 800be4e:	f101 0c08 	add.w	ip, r1, #8
 800be52:	462c      	mov	r4, r5
 800be54:	f8cd c014 	str.w	ip, [sp, #20]
 800be58:	ee15 ca90 	vmov	ip, s11
 800be5c:	f844 cb08 	str.w	ip, [r4], #8
 800be60:	9407      	str	r4, [sp, #28]
 800be62:	f101 0410 	add.w	r4, r1, #16
 800be66:	ed85 6a01 	vstr	s12, [r5, #4]
 800be6a:	0852      	lsrs	r2, r2, #1
 800be6c:	9402      	str	r4, [sp, #8]
 800be6e:	462c      	mov	r4, r5
 800be70:	f101 0518 	add.w	r5, r1, #24
 800be74:	920b      	str	r2, [sp, #44]	@ 0x2c
 800be76:	46b2      	mov	sl, r6
 800be78:	9506      	str	r5, [sp, #24]
 800be7a:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800be7e:	3a02      	subs	r2, #2
 800be80:	ee16 5a90 	vmov	r5, s13
 800be84:	46b6      	mov	lr, r6
 800be86:	4630      	mov	r0, r6
 800be88:	0852      	lsrs	r2, r2, #1
 800be8a:	f84a 5b08 	str.w	r5, [sl], #8
 800be8e:	f1a0 0604 	sub.w	r6, r0, #4
 800be92:	edce 7a01 	vstr	s15, [lr, #4]
 800be96:	9208      	str	r2, [sp, #32]
 800be98:	f000 8130 	beq.w	800c0fc <arm_cfft_radix8by4_f32+0x378>
 800be9c:	4691      	mov	r9, r2
 800be9e:	9a03      	ldr	r2, [sp, #12]
 800bea0:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800bea4:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 800bea8:	3b08      	subs	r3, #8
 800beaa:	f102 0510 	add.w	r5, r2, #16
 800beae:	f101 0c20 	add.w	ip, r1, #32
 800beb2:	f1a4 020c 	sub.w	r2, r4, #12
 800beb6:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 800beba:	4433      	add	r3, r6
 800bebc:	3410      	adds	r4, #16
 800bebe:	4650      	mov	r0, sl
 800bec0:	4659      	mov	r1, fp
 800bec2:	ed55 3a02 	vldr	s7, [r5, #-8]
 800bec6:	ed14 5a02 	vldr	s10, [r4, #-8]
 800beca:	ed91 7a00 	vldr	s14, [r1]
 800bece:	edd0 7a00 	vldr	s15, [r0]
 800bed2:	ed15 4a01 	vldr	s8, [r5, #-4]
 800bed6:	ed54 5a01 	vldr	s11, [r4, #-4]
 800beda:	edd0 6a01 	vldr	s13, [r0, #4]
 800bede:	ed91 6a01 	vldr	s12, [r1, #4]
 800bee2:	ee33 8a85 	vadd.f32	s16, s7, s10
 800bee6:	ee34 0a25 	vadd.f32	s0, s8, s11
 800beea:	ee78 4a07 	vadd.f32	s9, s16, s14
 800beee:	ee74 5a65 	vsub.f32	s11, s8, s11
 800bef2:	ee77 4aa4 	vadd.f32	s9, s15, s9
 800bef6:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800befa:	ed45 4a02 	vstr	s9, [r5, #-8]
 800befe:	edd1 4a01 	vldr	s9, [r1, #4]
 800bf02:	ed90 4a01 	vldr	s8, [r0, #4]
 800bf06:	ee70 4a24 	vadd.f32	s9, s0, s9
 800bf0a:	ee76 aa05 	vadd.f32	s21, s12, s10
 800bf0e:	ee74 4a84 	vadd.f32	s9, s9, s8
 800bf12:	ee35 aac7 	vsub.f32	s20, s11, s14
 800bf16:	ed45 4a01 	vstr	s9, [r5, #-4]
 800bf1a:	edd6 1a00 	vldr	s3, [r6]
 800bf1e:	edd7 0a00 	vldr	s1, [r7]
 800bf22:	ed92 4a02 	vldr	s8, [r2, #8]
 800bf26:	edd3 3a02 	vldr	s7, [r3, #8]
 800bf2a:	ed93 2a01 	vldr	s4, [r3, #4]
 800bf2e:	ed16 1a01 	vldr	s2, [r6, #-4]
 800bf32:	edd2 2a01 	vldr	s5, [r2, #4]
 800bf36:	ed57 9a01 	vldr	s19, [r7, #-4]
 800bf3a:	ee70 4aa1 	vadd.f32	s9, s1, s3
 800bf3e:	ee39 3a81 	vadd.f32	s6, s19, s2
 800bf42:	ee74 8a84 	vadd.f32	s17, s9, s8
 800bf46:	ee70 1ae1 	vsub.f32	s3, s1, s3
 800bf4a:	ee73 8aa8 	vadd.f32	s17, s7, s17
 800bf4e:	ee7a aae6 	vsub.f32	s21, s21, s13
 800bf52:	ee18 aa90 	vmov	sl, s17
 800bf56:	f847 a908 	str.w	sl, [r7], #-8
 800bf5a:	edd2 8a01 	vldr	s17, [r2, #4]
 800bf5e:	ed93 9a01 	vldr	s18, [r3, #4]
 800bf62:	ee73 8a28 	vadd.f32	s17, s6, s17
 800bf66:	ee3a aa27 	vadd.f32	s20, s20, s15
 800bf6a:	ee78 8a89 	vadd.f32	s17, s17, s18
 800bf6e:	ee74 0a63 	vsub.f32	s1, s8, s7
 800bf72:	edc7 8a01 	vstr	s17, [r7, #4]
 800bf76:	ed18 ba02 	vldr	s22, [r8, #-8]
 800bf7a:	ed58 8a01 	vldr	s17, [r8, #-4]
 800bf7e:	ee39 1ac1 	vsub.f32	s2, s19, s2
 800bf82:	ee6a ba28 	vmul.f32	s23, s20, s17
 800bf86:	ee2a ca8b 	vmul.f32	s24, s21, s22
 800bf8a:	ee71 9ae2 	vsub.f32	s19, s3, s5
 800bf8e:	ee30 9a81 	vadd.f32	s18, s1, s2
 800bf92:	ee79 9a82 	vadd.f32	s19, s19, s4
 800bf96:	ee3c ca2b 	vadd.f32	s24, s24, s23
 800bf9a:	ee6a aaa8 	vmul.f32	s21, s21, s17
 800bf9e:	ee69 baa8 	vmul.f32	s23, s19, s17
 800bfa2:	ee2a aa0b 	vmul.f32	s20, s20, s22
 800bfa6:	ee69 9a8b 	vmul.f32	s19, s19, s22
 800bfaa:	ee69 8a28 	vmul.f32	s17, s18, s17
 800bfae:	ee29 ba0b 	vmul.f32	s22, s18, s22
 800bfb2:	ee1c aa10 	vmov	sl, s24
 800bfb6:	ee78 8aa9 	vadd.f32	s17, s17, s19
 800bfba:	f841 ab08 	str.w	sl, [r1], #8
 800bfbe:	ee3a aa6a 	vsub.f32	s20, s20, s21
 800bfc2:	ee3b bacb 	vsub.f32	s22, s23, s22
 800bfc6:	ee34 4ac4 	vsub.f32	s8, s9, s8
 800bfca:	ee33 3a62 	vsub.f32	s6, s6, s5
 800bfce:	ed01 aa01 	vstr	s20, [r1, #-4]
 800bfd2:	edc2 8a01 	vstr	s17, [r2, #4]
 800bfd6:	ed82 ba02 	vstr	s22, [r2, #8]
 800bfda:	ed5c 4a04 	vldr	s9, [ip, #-16]
 800bfde:	ee74 3a63 	vsub.f32	s7, s8, s7
 800bfe2:	ee38 8a47 	vsub.f32	s16, s16, s14
 800bfe6:	ed1c 4a03 	vldr	s8, [ip, #-12]
 800bfea:	ee30 0a46 	vsub.f32	s0, s0, s12
 800bfee:	ee33 3a42 	vsub.f32	s6, s6, s4
 800bff2:	ee38 8a67 	vsub.f32	s16, s16, s15
 800bff6:	ee30 0a66 	vsub.f32	s0, s0, s13
 800bffa:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 800bffe:	ee63 8a04 	vmul.f32	s17, s6, s8
 800c002:	ee28 aa24 	vmul.f32	s20, s16, s9
 800c006:	ee60 9a04 	vmul.f32	s19, s0, s8
 800c00a:	ee28 8a04 	vmul.f32	s16, s16, s8
 800c00e:	ee20 0a24 	vmul.f32	s0, s0, s9
 800c012:	ee63 3a84 	vmul.f32	s7, s7, s8
 800c016:	ee39 4a68 	vsub.f32	s8, s18, s17
 800c01a:	ee7a 9a29 	vadd.f32	s19, s20, s19
 800c01e:	ee14 aa10 	vmov	sl, s8
 800c022:	ee30 0a48 	vsub.f32	s0, s0, s16
 800c026:	ee63 4a24 	vmul.f32	s9, s6, s9
 800c02a:	ed44 9a02 	vstr	s19, [r4, #-8]
 800c02e:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800c032:	ed04 0a01 	vstr	s0, [r4, #-4]
 800c036:	f846 a908 	str.w	sl, [r6], #-8
 800c03a:	ee35 6a46 	vsub.f32	s12, s10, s12
 800c03e:	ee35 7a87 	vadd.f32	s14, s11, s14
 800c042:	edc6 3a01 	vstr	s7, [r6, #4]
 800c046:	ee76 6a86 	vadd.f32	s13, s13, s12
 800c04a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c04e:	ed1e 6a05 	vldr	s12, [lr, #-20]	@ 0xffffffec
 800c052:	ed1e 7a06 	vldr	s14, [lr, #-24]	@ 0xffffffe8
 800c056:	ee67 5a86 	vmul.f32	s11, s15, s12
 800c05a:	ee26 5a87 	vmul.f32	s10, s13, s14
 800c05e:	ee72 2a62 	vsub.f32	s5, s4, s5
 800c062:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800c066:	ee72 2ae1 	vsub.f32	s5, s5, s3
 800c06a:	ee75 5a25 	vadd.f32	s11, s10, s11
 800c06e:	ee62 0a86 	vmul.f32	s1, s5, s12
 800c072:	ee66 6a86 	vmul.f32	s13, s13, s12
 800c076:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c07a:	ee21 6a06 	vmul.f32	s12, s2, s12
 800c07e:	ee62 2a87 	vmul.f32	s5, s5, s14
 800c082:	ee21 1a07 	vmul.f32	s2, s2, s14
 800c086:	ee15 aa90 	vmov	sl, s11
 800c08a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c08e:	f840 ab08 	str.w	sl, [r0], #8
 800c092:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800c096:	ee76 2a22 	vadd.f32	s5, s12, s5
 800c09a:	f1b9 0901 	subs.w	r9, r9, #1
 800c09e:	ed40 7a01 	vstr	s15, [r0, #-4]
 800c0a2:	f105 0508 	add.w	r5, r5, #8
 800c0a6:	ed83 1a02 	vstr	s2, [r3, #8]
 800c0aa:	edc3 2a01 	vstr	s5, [r3, #4]
 800c0ae:	f108 0808 	add.w	r8, r8, #8
 800c0b2:	f1a2 0208 	sub.w	r2, r2, #8
 800c0b6:	f10c 0c10 	add.w	ip, ip, #16
 800c0ba:	f104 0408 	add.w	r4, r4, #8
 800c0be:	f10e 0e18 	add.w	lr, lr, #24
 800c0c2:	f1a3 0308 	sub.w	r3, r3, #8
 800c0c6:	f47f aefc 	bne.w	800bec2 <arm_cfft_radix8by4_f32+0x13e>
 800c0ca:	9908      	ldr	r1, [sp, #32]
 800c0cc:	9802      	ldr	r0, [sp, #8]
 800c0ce:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 800c0d2:	00cb      	lsls	r3, r1, #3
 800c0d4:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800c0d8:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800c0dc:	9102      	str	r1, [sp, #8]
 800c0de:	9904      	ldr	r1, [sp, #16]
 800c0e0:	4419      	add	r1, r3
 800c0e2:	9104      	str	r1, [sp, #16]
 800c0e4:	9905      	ldr	r1, [sp, #20]
 800c0e6:	4419      	add	r1, r3
 800c0e8:	9105      	str	r1, [sp, #20]
 800c0ea:	9907      	ldr	r1, [sp, #28]
 800c0ec:	449b      	add	fp, r3
 800c0ee:	4419      	add	r1, r3
 800c0f0:	449a      	add	sl, r3
 800c0f2:	9b06      	ldr	r3, [sp, #24]
 800c0f4:	9107      	str	r1, [sp, #28]
 800c0f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c0fa:	9306      	str	r3, [sp, #24]
 800c0fc:	9a04      	ldr	r2, [sp, #16]
 800c0fe:	9807      	ldr	r0, [sp, #28]
 800c100:	edd2 3a00 	vldr	s7, [r2]
 800c104:	ed90 4a00 	vldr	s8, [r0]
 800c108:	eddb 7a00 	vldr	s15, [fp]
 800c10c:	ed9a 3a00 	vldr	s6, [sl]
 800c110:	edd2 4a01 	vldr	s9, [r2, #4]
 800c114:	ed90 7a01 	vldr	s14, [r0, #4]
 800c118:	ed9b 2a01 	vldr	s4, [fp, #4]
 800c11c:	edda 5a01 	vldr	s11, [sl, #4]
 800c120:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 800c124:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c126:	ee73 6a84 	vadd.f32	s13, s7, s8
 800c12a:	ee34 6a87 	vadd.f32	s12, s9, s14
 800c12e:	ee36 5aa7 	vadd.f32	s10, s13, s15
 800c132:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800c136:	ee33 5a05 	vadd.f32	s10, s6, s10
 800c13a:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800c13e:	ed82 5a00 	vstr	s10, [r2]
 800c142:	ed9b 5a01 	vldr	s10, [fp, #4]
 800c146:	edda 4a01 	vldr	s9, [sl, #4]
 800c14a:	ee36 5a05 	vadd.f32	s10, s12, s10
 800c14e:	ee72 3a04 	vadd.f32	s7, s4, s8
 800c152:	ee35 5a24 	vadd.f32	s10, s10, s9
 800c156:	ee77 4a67 	vsub.f32	s9, s14, s15
 800c15a:	ed82 5a01 	vstr	s10, [r2, #4]
 800c15e:	9a05      	ldr	r2, [sp, #20]
 800c160:	ee34 5a83 	vadd.f32	s10, s9, s6
 800c164:	edd2 1a00 	vldr	s3, [r2]
 800c168:	edd2 2a01 	vldr	s5, [r2, #4]
 800c16c:	9a02      	ldr	r2, [sp, #8]
 800c16e:	ee73 3ae5 	vsub.f32	s7, s7, s11
 800c172:	ee36 6a42 	vsub.f32	s12, s12, s4
 800c176:	ee63 4aa1 	vmul.f32	s9, s7, s3
 800c17a:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800c17e:	ee65 2a22 	vmul.f32	s5, s10, s5
 800c182:	ee25 5a21 	vmul.f32	s10, s10, s3
 800c186:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800c18a:	ee35 5a63 	vsub.f32	s10, s10, s7
 800c18e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800c192:	edcb 2a00 	vstr	s5, [fp]
 800c196:	ed8b 5a01 	vstr	s10, [fp, #4]
 800c19a:	edd2 3a01 	vldr	s7, [r2, #4]
 800c19e:	ed92 5a00 	vldr	s10, [r2]
 800c1a2:	9a06      	ldr	r2, [sp, #24]
 800c1a4:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800c1a8:	ee36 6a65 	vsub.f32	s12, s12, s11
 800c1ac:	ee66 4a85 	vmul.f32	s9, s13, s10
 800c1b0:	ee26 5a05 	vmul.f32	s10, s12, s10
 800c1b4:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800c1b8:	ee26 6a23 	vmul.f32	s12, s12, s7
 800c1bc:	ee75 6a66 	vsub.f32	s13, s10, s13
 800c1c0:	ee34 6a86 	vadd.f32	s12, s9, s12
 800c1c4:	ee34 4a42 	vsub.f32	s8, s8, s4
 800c1c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c1cc:	edc0 6a01 	vstr	s13, [r0, #4]
 800c1d0:	ed80 6a00 	vstr	s12, [r0]
 800c1d4:	ed92 6a01 	vldr	s12, [r2, #4]
 800c1d8:	9803      	ldr	r0, [sp, #12]
 800c1da:	ee77 7a43 	vsub.f32	s15, s14, s6
 800c1de:	ee75 5a84 	vadd.f32	s11, s11, s8
 800c1e2:	ed92 7a00 	vldr	s14, [r2]
 800c1e6:	ee65 6a87 	vmul.f32	s13, s11, s14
 800c1ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c1ee:	ee65 5a86 	vmul.f32	s11, s11, s12
 800c1f2:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c1f6:	ee77 5a65 	vsub.f32	s11, s14, s11
 800c1fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1fe:	edca 5a01 	vstr	s11, [sl, #4]
 800c202:	edca 7a00 	vstr	s15, [sl]
 800c206:	6872      	ldr	r2, [r6, #4]
 800c208:	4621      	mov	r1, r4
 800c20a:	2304      	movs	r3, #4
 800c20c:	f000 f892 	bl	800c334 <arm_radix8_butterfly_f32>
 800c210:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c212:	6872      	ldr	r2, [r6, #4]
 800c214:	4621      	mov	r1, r4
 800c216:	2304      	movs	r3, #4
 800c218:	f000 f88c 	bl	800c334 <arm_radix8_butterfly_f32>
 800c21c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c21e:	6872      	ldr	r2, [r6, #4]
 800c220:	4621      	mov	r1, r4
 800c222:	2304      	movs	r3, #4
 800c224:	f000 f886 	bl	800c334 <arm_radix8_butterfly_f32>
 800c228:	9801      	ldr	r0, [sp, #4]
 800c22a:	6872      	ldr	r2, [r6, #4]
 800c22c:	4621      	mov	r1, r4
 800c22e:	2304      	movs	r3, #4
 800c230:	b00f      	add	sp, #60	@ 0x3c
 800c232:	ecbd 8b0a 	vpop	{d8-d12}
 800c236:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c23a:	f000 b87b 	b.w	800c334 <arm_radix8_butterfly_f32>
 800c23e:	bf00      	nop

0800c240 <arm_cfft_f32>:
 800c240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c244:	2a01      	cmp	r2, #1
 800c246:	4606      	mov	r6, r0
 800c248:	4617      	mov	r7, r2
 800c24a:	460c      	mov	r4, r1
 800c24c:	4698      	mov	r8, r3
 800c24e:	8805      	ldrh	r5, [r0, #0]
 800c250:	d054      	beq.n	800c2fc <arm_cfft_f32+0xbc>
 800c252:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800c256:	d04c      	beq.n	800c2f2 <arm_cfft_f32+0xb2>
 800c258:	d916      	bls.n	800c288 <arm_cfft_f32+0x48>
 800c25a:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800c25e:	d01a      	beq.n	800c296 <arm_cfft_f32+0x56>
 800c260:	d95c      	bls.n	800c31c <arm_cfft_f32+0xdc>
 800c262:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800c266:	d044      	beq.n	800c2f2 <arm_cfft_f32+0xb2>
 800c268:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800c26c:	d105      	bne.n	800c27a <arm_cfft_f32+0x3a>
 800c26e:	4620      	mov	r0, r4
 800c270:	4629      	mov	r1, r5
 800c272:	6872      	ldr	r2, [r6, #4]
 800c274:	2301      	movs	r3, #1
 800c276:	f000 f85d 	bl	800c334 <arm_radix8_butterfly_f32>
 800c27a:	f1b8 0f00 	cmp.w	r8, #0
 800c27e:	d111      	bne.n	800c2a4 <arm_cfft_f32+0x64>
 800c280:	2f01      	cmp	r7, #1
 800c282:	d016      	beq.n	800c2b2 <arm_cfft_f32+0x72>
 800c284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c288:	2d20      	cmp	r5, #32
 800c28a:	d032      	beq.n	800c2f2 <arm_cfft_f32+0xb2>
 800c28c:	d94a      	bls.n	800c324 <arm_cfft_f32+0xe4>
 800c28e:	2d40      	cmp	r5, #64	@ 0x40
 800c290:	d0ed      	beq.n	800c26e <arm_cfft_f32+0x2e>
 800c292:	2d80      	cmp	r5, #128	@ 0x80
 800c294:	d1f1      	bne.n	800c27a <arm_cfft_f32+0x3a>
 800c296:	4630      	mov	r0, r6
 800c298:	4621      	mov	r1, r4
 800c29a:	f7ff fca1 	bl	800bbe0 <arm_cfft_radix8by2_f32>
 800c29e:	f1b8 0f00 	cmp.w	r8, #0
 800c2a2:	d0ed      	beq.n	800c280 <arm_cfft_f32+0x40>
 800c2a4:	4620      	mov	r0, r4
 800c2a6:	89b1      	ldrh	r1, [r6, #12]
 800c2a8:	68b2      	ldr	r2, [r6, #8]
 800c2aa:	f7f3 ffb1 	bl	8000210 <arm_bitreversal_32>
 800c2ae:	2f01      	cmp	r7, #1
 800c2b0:	d1e8      	bne.n	800c284 <arm_cfft_f32+0x44>
 800c2b2:	ee07 5a90 	vmov	s15, r5
 800c2b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2ba:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800c2be:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800c2c2:	2d00      	cmp	r5, #0
 800c2c4:	d0de      	beq.n	800c284 <arm_cfft_f32+0x44>
 800c2c6:	f104 0108 	add.w	r1, r4, #8
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	3301      	adds	r3, #1
 800c2ce:	429d      	cmp	r5, r3
 800c2d0:	f101 0108 	add.w	r1, r1, #8
 800c2d4:	ed11 7a04 	vldr	s14, [r1, #-16]
 800c2d8:	ed51 7a03 	vldr	s15, [r1, #-12]
 800c2dc:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c2e0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800c2e4:	ed01 7a04 	vstr	s14, [r1, #-16]
 800c2e8:	ed41 7a03 	vstr	s15, [r1, #-12]
 800c2ec:	d1ee      	bne.n	800c2cc <arm_cfft_f32+0x8c>
 800c2ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2f2:	4630      	mov	r0, r6
 800c2f4:	4621      	mov	r1, r4
 800c2f6:	f7ff fd45 	bl	800bd84 <arm_cfft_radix8by4_f32>
 800c2fa:	e7be      	b.n	800c27a <arm_cfft_f32+0x3a>
 800c2fc:	b1ad      	cbz	r5, 800c32a <arm_cfft_f32+0xea>
 800c2fe:	f101 030c 	add.w	r3, r1, #12
 800c302:	2200      	movs	r2, #0
 800c304:	ed53 7a02 	vldr	s15, [r3, #-8]
 800c308:	3201      	adds	r2, #1
 800c30a:	eef1 7a67 	vneg.f32	s15, s15
 800c30e:	4295      	cmp	r5, r2
 800c310:	ed43 7a02 	vstr	s15, [r3, #-8]
 800c314:	f103 0308 	add.w	r3, r3, #8
 800c318:	d1f4      	bne.n	800c304 <arm_cfft_f32+0xc4>
 800c31a:	e79a      	b.n	800c252 <arm_cfft_f32+0x12>
 800c31c:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 800c320:	d0a5      	beq.n	800c26e <arm_cfft_f32+0x2e>
 800c322:	e7aa      	b.n	800c27a <arm_cfft_f32+0x3a>
 800c324:	2d10      	cmp	r5, #16
 800c326:	d0b6      	beq.n	800c296 <arm_cfft_f32+0x56>
 800c328:	e7a7      	b.n	800c27a <arm_cfft_f32+0x3a>
 800c32a:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800c32e:	d894      	bhi.n	800c25a <arm_cfft_f32+0x1a>
 800c330:	e7aa      	b.n	800c288 <arm_cfft_f32+0x48>
 800c332:	bf00      	nop

0800c334 <arm_radix8_butterfly_f32>:
 800c334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c338:	ed2d 8b10 	vpush	{d8-d15}
 800c33c:	b09d      	sub	sp, #116	@ 0x74
 800c33e:	461c      	mov	r4, r3
 800c340:	ed9f bac8 	vldr	s22, [pc, #800]	@ 800c664 <arm_radix8_butterfly_f32+0x330>
 800c344:	921a      	str	r2, [sp, #104]	@ 0x68
 800c346:	1d03      	adds	r3, r0, #4
 800c348:	4682      	mov	sl, r0
 800c34a:	4689      	mov	r9, r1
 800c34c:	468b      	mov	fp, r1
 800c34e:	931b      	str	r3, [sp, #108]	@ 0x6c
 800c350:	9400      	str	r4, [sp, #0]
 800c352:	469e      	mov	lr, r3
 800c354:	ea4f 03db 	mov.w	r3, fp, lsr #3
 800c358:	005a      	lsls	r2, r3, #1
 800c35a:	18d6      	adds	r6, r2, r3
 800c35c:	18f5      	adds	r5, r6, r3
 800c35e:	9203      	str	r2, [sp, #12]
 800c360:	195a      	adds	r2, r3, r5
 800c362:	18d0      	adds	r0, r2, r3
 800c364:	00df      	lsls	r7, r3, #3
 800c366:	1819      	adds	r1, r3, r0
 800c368:	463c      	mov	r4, r7
 800c36a:	9701      	str	r7, [sp, #4]
 800c36c:	4457      	add	r7, sl
 800c36e:	930c      	str	r3, [sp, #48]	@ 0x30
 800c370:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 800c374:	011b      	lsls	r3, r3, #4
 800c376:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 800c37a:	eb07 0c04 	add.w	ip, r7, r4
 800c37e:	9c00      	ldr	r4, [sp, #0]
 800c380:	9302      	str	r3, [sp, #8]
 800c382:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 800c386:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 800c38a:	3204      	adds	r2, #4
 800c38c:	3104      	adds	r1, #4
 800c38e:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 800c392:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c396:	f04f 0800 	mov.w	r8, #0
 800c39a:	eddc 7a00 	vldr	s15, [ip]
 800c39e:	edd7 6a00 	vldr	s13, [r7]
 800c3a2:	edd6 3a00 	vldr	s7, [r6]
 800c3a6:	ed5e aa01 	vldr	s21, [lr, #-4]
 800c3aa:	edd5 4a00 	vldr	s9, [r5]
 800c3ae:	ed90 2a00 	vldr	s4, [r0]
 800c3b2:	ed12 7a01 	vldr	s14, [r2, #-4]
 800c3b6:	ed51 0a01 	vldr	s1, [r1, #-4]
 800c3ba:	ee77 8a82 	vadd.f32	s17, s15, s4
 800c3be:	ee33 4aa0 	vadd.f32	s8, s7, s1
 800c3c2:	ee76 1a87 	vadd.f32	s3, s13, s14
 800c3c6:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 800c3ca:	ee31 6a84 	vadd.f32	s12, s3, s8
 800c3ce:	ee33 5a28 	vadd.f32	s10, s6, s17
 800c3d2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800c3d6:	ee75 6a06 	vadd.f32	s13, s10, s12
 800c3da:	ee35 5a46 	vsub.f32	s10, s10, s12
 800c3de:	ed4e 6a01 	vstr	s13, [lr, #-4]
 800c3e2:	ed85 5a00 	vstr	s10, [r5]
 800c3e6:	ed96 1a01 	vldr	s2, [r6, #4]
 800c3ea:	edd7 5a01 	vldr	s11, [r7, #4]
 800c3ee:	ed92 aa00 	vldr	s20, [r2]
 800c3f2:	ed91 6a00 	vldr	s12, [r1]
 800c3f6:	ed9e 9a00 	vldr	s18, [lr]
 800c3fa:	ed95 5a01 	vldr	s10, [r5, #4]
 800c3fe:	eddc 6a01 	vldr	s13, [ip, #4]
 800c402:	edd0 9a01 	vldr	s19, [r0, #4]
 800c406:	ee73 0ae0 	vsub.f32	s1, s7, s1
 800c40a:	ee71 2a46 	vsub.f32	s5, s2, s12
 800c40e:	ee75 3aca 	vsub.f32	s7, s11, s20
 800c412:	ee37 0a60 	vsub.f32	s0, s14, s1
 800c416:	ee33 8aa2 	vadd.f32	s16, s7, s5
 800c41a:	ee37 7a20 	vadd.f32	s14, s14, s1
 800c41e:	ee73 2ae2 	vsub.f32	s5, s7, s5
 800c422:	ee37 2ac2 	vsub.f32	s4, s15, s4
 800c426:	ee79 3a05 	vadd.f32	s7, s18, s10
 800c42a:	ee60 0a0b 	vmul.f32	s1, s0, s22
 800c42e:	ee39 5a45 	vsub.f32	s10, s18, s10
 800c432:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 800c436:	ee36 9aa9 	vadd.f32	s18, s13, s19
 800c43a:	ee75 5a8a 	vadd.f32	s11, s11, s20
 800c43e:	ee31 6a06 	vadd.f32	s12, s2, s12
 800c442:	ee76 6ae9 	vsub.f32	s13, s13, s19
 800c446:	ee28 8a0b 	vmul.f32	s16, s16, s22
 800c44a:	ee62 2a8b 	vmul.f32	s5, s5, s22
 800c44e:	ee67 7a0b 	vmul.f32	s15, s14, s22
 800c452:	ee33 3a68 	vsub.f32	s6, s6, s17
 800c456:	ee36 0a88 	vadd.f32	s0, s13, s16
 800c45a:	ee75 8a86 	vadd.f32	s17, s11, s12
 800c45e:	ee36 7ac8 	vsub.f32	s14, s13, s16
 800c462:	ee71 1ac4 	vsub.f32	s3, s3, s8
 800c466:	ee75 6a62 	vsub.f32	s13, s10, s5
 800c46a:	ee33 4ac9 	vsub.f32	s8, s7, s18
 800c46e:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800c472:	ee33 1a89 	vadd.f32	s2, s7, s18
 800c476:	ee74 5ae0 	vsub.f32	s11, s9, s1
 800c47a:	ee74 3aa0 	vadd.f32	s7, s9, s1
 800c47e:	ee75 4a22 	vadd.f32	s9, s10, s5
 800c482:	ee32 5a27 	vadd.f32	s10, s4, s15
 800c486:	ee72 7a67 	vsub.f32	s15, s4, s15
 800c48a:	ee33 8a06 	vadd.f32	s16, s6, s12
 800c48e:	ee75 2a87 	vadd.f32	s5, s11, s14
 800c492:	ee31 9a28 	vadd.f32	s18, s2, s17
 800c496:	ee33 6a46 	vsub.f32	s12, s6, s12
 800c49a:	ee74 0a61 	vsub.f32	s1, s8, s3
 800c49e:	ee33 2a80 	vadd.f32	s4, s7, s0
 800c4a2:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800c4a6:	ee34 3ac5 	vsub.f32	s6, s9, s10
 800c4aa:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800c4ae:	ee31 1a68 	vsub.f32	s2, s2, s17
 800c4b2:	ee34 4a21 	vadd.f32	s8, s8, s3
 800c4b6:	ee73 3ac0 	vsub.f32	s7, s7, s0
 800c4ba:	ee74 4a85 	vadd.f32	s9, s9, s10
 800c4be:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800c4c2:	44d8      	add	r8, fp
 800c4c4:	45c1      	cmp	r9, r8
 800c4c6:	ed8e 9a00 	vstr	s18, [lr]
 800c4ca:	ed85 1a01 	vstr	s2, [r5, #4]
 800c4ce:	449e      	add	lr, r3
 800c4d0:	ed8c 8a00 	vstr	s16, [ip]
 800c4d4:	441d      	add	r5, r3
 800c4d6:	ed80 6a00 	vstr	s12, [r0]
 800c4da:	edcc 0a01 	vstr	s1, [ip, #4]
 800c4de:	ed80 4a01 	vstr	s8, [r0, #4]
 800c4e2:	449c      	add	ip, r3
 800c4e4:	ed87 2a00 	vstr	s4, [r7]
 800c4e8:	4418      	add	r0, r3
 800c4ea:	ed41 3a01 	vstr	s7, [r1, #-4]
 800c4ee:	ed42 2a01 	vstr	s5, [r2, #-4]
 800c4f2:	ed86 7a00 	vstr	s14, [r6]
 800c4f6:	ed87 3a01 	vstr	s6, [r7, #4]
 800c4fa:	edc1 4a00 	vstr	s9, [r1]
 800c4fe:	441f      	add	r7, r3
 800c500:	edc2 5a00 	vstr	s11, [r2]
 800c504:	4419      	add	r1, r3
 800c506:	edc6 6a01 	vstr	s13, [r6, #4]
 800c50a:	441a      	add	r2, r3
 800c50c:	441e      	add	r6, r3
 800c50e:	f63f af44 	bhi.w	800c39a <arm_radix8_butterfly_f32+0x66>
 800c512:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c514:	2907      	cmp	r1, #7
 800c516:	4620      	mov	r0, r4
 800c518:	f240 81e9 	bls.w	800c8ee <arm_radix8_butterfly_f32+0x5ba>
 800c51c:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 800c520:	193e      	adds	r6, r7, r4
 800c522:	1935      	adds	r5, r6, r4
 800c524:	9c03      	ldr	r4, [sp, #12]
 800c526:	9000      	str	r0, [sp, #0]
 800c528:	4622      	mov	r2, r4
 800c52a:	3201      	adds	r2, #1
 800c52c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800c530:	9900      	ldr	r1, [sp, #0]
 800c532:	1828      	adds	r0, r5, r0
 800c534:	eb00 0e01 	add.w	lr, r0, r1
 800c538:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c53a:	440a      	add	r2, r1
 800c53c:	eb04 0c01 	add.w	ip, r4, r1
 800c540:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 800c544:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 800c548:	9a00      	ldr	r2, [sp, #0]
 800c54a:	940f      	str	r4, [sp, #60]	@ 0x3c
 800c54c:	00ed      	lsls	r5, r5, #3
 800c54e:	9511      	str	r5, [sp, #68]	@ 0x44
 800c550:	00d5      	lsls	r5, r2, #3
 800c552:	950d      	str	r5, [sp, #52]	@ 0x34
 800c554:	9d01      	ldr	r5, [sp, #4]
 800c556:	3508      	adds	r5, #8
 800c558:	9516      	str	r5, [sp, #88]	@ 0x58
 800c55a:	9d02      	ldr	r5, [sp, #8]
 800c55c:	3508      	adds	r5, #8
 800c55e:	0114      	lsls	r4, r2, #4
 800c560:	9517      	str	r5, [sp, #92]	@ 0x5c
 800c562:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c564:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 800c566:	940e      	str	r4, [sp, #56]	@ 0x38
 800c568:	00c0      	lsls	r0, r0, #3
 800c56a:	9010      	str	r0, [sp, #64]	@ 0x40
 800c56c:	18aa      	adds	r2, r5, r2
 800c56e:	9207      	str	r2, [sp, #28]
 800c570:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800c572:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800c574:	18aa      	adds	r2, r5, r2
 800c576:	9208      	str	r2, [sp, #32]
 800c578:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c57a:	18aa      	adds	r2, r5, r2
 800c57c:	9209      	str	r2, [sp, #36]	@ 0x24
 800c57e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800c582:	f10e 0204 	add.w	r2, lr, #4
 800c586:	920a      	str	r2, [sp, #40]	@ 0x28
 800c588:	00c9      	lsls	r1, r1, #3
 800c58a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c58c:	310c      	adds	r1, #12
 800c58e:	00f6      	lsls	r6, r6, #3
 800c590:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 800c594:	9114      	str	r1, [sp, #80]	@ 0x50
 800c596:	18a9      	adds	r1, r5, r2
 800c598:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c59a:	9612      	str	r6, [sp, #72]	@ 0x48
 800c59c:	00ff      	lsls	r7, r7, #3
 800c59e:	19ae      	adds	r6, r5, r6
 800c5a0:	3008      	adds	r0, #8
 800c5a2:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 800c5a6:	9606      	str	r6, [sp, #24]
 800c5a8:	9019      	str	r0, [sp, #100]	@ 0x64
 800c5aa:	18aa      	adds	r2, r5, r2
 800c5ac:	0164      	lsls	r4, r4, #5
 800c5ae:	19ee      	adds	r6, r5, r7
 800c5b0:	f10c 000c 	add.w	r0, ip, #12
 800c5b4:	9713      	str	r7, [sp, #76]	@ 0x4c
 800c5b6:	9604      	str	r6, [sp, #16]
 800c5b8:	9015      	str	r0, [sp, #84]	@ 0x54
 800c5ba:	9103      	str	r1, [sp, #12]
 800c5bc:	9205      	str	r2, [sp, #20]
 800c5be:	f104 0208 	add.w	r2, r4, #8
 800c5c2:	9218      	str	r2, [sp, #96]	@ 0x60
 800c5c4:	f04f 0801 	mov.w	r8, #1
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	f102 0108 	add.w	r1, r2, #8
 800c5ce:	460f      	mov	r7, r1
 800c5d0:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c5d2:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800c5d4:	188e      	adds	r6, r1, r2
 800c5d6:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800c5d8:	188d      	adds	r5, r1, r2
 800c5da:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800c5dc:	188c      	adds	r4, r1, r2
 800c5de:	9919      	ldr	r1, [sp, #100]	@ 0x64
 800c5e0:	1888      	adds	r0, r1, r2
 800c5e2:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800c5e4:	eb01 0c02 	add.w	ip, r1, r2
 800c5e8:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800c5ea:	440a      	add	r2, r1
 800c5ec:	9903      	ldr	r1, [sp, #12]
 800c5ee:	edd1 fa00 	vldr	s31, [r1]
 800c5f2:	9905      	ldr	r1, [sp, #20]
 800c5f4:	ed91 fa00 	vldr	s30, [r1]
 800c5f8:	9904      	ldr	r1, [sp, #16]
 800c5fa:	edd1 ea00 	vldr	s29, [r1]
 800c5fe:	9906      	ldr	r1, [sp, #24]
 800c600:	ed91 ea00 	vldr	s28, [r1]
 800c604:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c606:	edd1 da00 	vldr	s27, [r1]
 800c60a:	9908      	ldr	r1, [sp, #32]
 800c60c:	ed91 da00 	vldr	s26, [r1]
 800c610:	9907      	ldr	r1, [sp, #28]
 800c612:	edd1 ca00 	vldr	s25, [r1]
 800c616:	9903      	ldr	r1, [sp, #12]
 800c618:	ed91 ca01 	vldr	s24, [r1, #4]
 800c61c:	9905      	ldr	r1, [sp, #20]
 800c61e:	edd1 ba01 	vldr	s23, [r1, #4]
 800c622:	9904      	ldr	r1, [sp, #16]
 800c624:	edd1 aa01 	vldr	s21, [r1, #4]
 800c628:	9906      	ldr	r1, [sp, #24]
 800c62a:	ed91 aa01 	vldr	s20, [r1, #4]
 800c62e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c630:	edd1 7a01 	vldr	s15, [r1, #4]
 800c634:	9908      	ldr	r1, [sp, #32]
 800c636:	edcd 7a00 	vstr	s15, [sp]
 800c63a:	edd1 7a01 	vldr	s15, [r1, #4]
 800c63e:	9907      	ldr	r1, [sp, #28]
 800c640:	edcd 7a01 	vstr	s15, [sp, #4]
 800c644:	edd1 7a01 	vldr	s15, [r1, #4]
 800c648:	eb0a 0e07 	add.w	lr, sl, r7
 800c64c:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800c64e:	edcd 7a02 	vstr	s15, [sp, #8]
 800c652:	eb0c 010a 	add.w	r1, ip, sl
 800c656:	4456      	add	r6, sl
 800c658:	4455      	add	r5, sl
 800c65a:	4454      	add	r4, sl
 800c65c:	4450      	add	r0, sl
 800c65e:	4452      	add	r2, sl
 800c660:	46c4      	mov	ip, r8
 800c662:	e001      	b.n	800c668 <arm_radix8_butterfly_f32+0x334>
 800c664:	3f3504f3 	.word	0x3f3504f3
 800c668:	ed96 5a00 	vldr	s10, [r6]
 800c66c:	ed52 9a01 	vldr	s19, [r2, #-4]
 800c670:	ed11 6a01 	vldr	s12, [r1, #-4]
 800c674:	edd0 7a00 	vldr	s15, [r0]
 800c678:	ed17 7a01 	vldr	s14, [r7, #-4]
 800c67c:	edde 3a00 	vldr	s7, [lr]
 800c680:	ed94 3a00 	vldr	s6, [r4]
 800c684:	ed95 2a00 	vldr	s4, [r5]
 800c688:	ed9e 0a01 	vldr	s0, [lr, #4]
 800c68c:	ee33 8a85 	vadd.f32	s16, s7, s10
 800c690:	ee32 1a06 	vadd.f32	s2, s4, s12
 800c694:	ee33 4a29 	vadd.f32	s8, s6, s19
 800c698:	ee77 4a87 	vadd.f32	s9, s15, s14
 800c69c:	ee78 1a04 	vadd.f32	s3, s16, s8
 800c6a0:	ee71 6a24 	vadd.f32	s13, s2, s9
 800c6a4:	ee32 2a46 	vsub.f32	s4, s4, s12
 800c6a8:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800c6ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c6b0:	ed8e 6a00 	vstr	s12, [lr]
 800c6b4:	edd0 8a01 	vldr	s17, [r0, #4]
 800c6b8:	ed95 9a01 	vldr	s18, [r5, #4]
 800c6bc:	edd1 2a00 	vldr	s5, [r1]
 800c6c0:	ed97 7a00 	vldr	s14, [r7]
 800c6c4:	edd4 0a01 	vldr	s1, [r4, #4]
 800c6c8:	ed96 6a01 	vldr	s12, [r6, #4]
 800c6cc:	edd2 5a00 	vldr	s11, [r2]
 800c6d0:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800c6d4:	ee33 3a69 	vsub.f32	s6, s6, s19
 800c6d8:	ee39 5a62 	vsub.f32	s10, s18, s5
 800c6dc:	ee78 9ac7 	vsub.f32	s19, s17, s14
 800c6e0:	ee38 4a44 	vsub.f32	s8, s16, s8
 800c6e4:	ee38 7a87 	vadd.f32	s14, s17, s14
 800c6e8:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800c6ec:	ee79 2a22 	vadd.f32	s5, s18, s5
 800c6f0:	ee75 8a69 	vsub.f32	s17, s10, s19
 800c6f4:	ee32 9a27 	vadd.f32	s18, s4, s15
 800c6f8:	ee35 5a29 	vadd.f32	s10, s10, s19
 800c6fc:	ee72 7a67 	vsub.f32	s15, s4, s15
 800c700:	ee30 2a06 	vadd.f32	s4, s0, s12
 800c704:	ee69 9a0b 	vmul.f32	s19, s18, s22
 800c708:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800c70c:	ee32 9a08 	vadd.f32	s18, s4, s16
 800c710:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800c714:	ee32 2a48 	vsub.f32	s4, s4, s16
 800c718:	ee71 4a64 	vsub.f32	s9, s2, s9
 800c71c:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800c720:	ee32 1a87 	vadd.f32	s2, s5, s14
 800c724:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800c728:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800c72c:	ee30 6a46 	vsub.f32	s12, s0, s12
 800c730:	ee73 0a29 	vadd.f32	s1, s6, s19
 800c734:	ee36 0a28 	vadd.f32	s0, s12, s17
 800c738:	ee33 3a69 	vsub.f32	s6, s6, s19
 800c73c:	ee32 7a64 	vsub.f32	s14, s4, s9
 800c740:	ee73 9aa7 	vadd.f32	s19, s7, s15
 800c744:	ee36 6a68 	vsub.f32	s12, s12, s17
 800c748:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800c74c:	ee75 8a85 	vadd.f32	s17, s11, s10
 800c750:	ee74 3a22 	vadd.f32	s7, s8, s5
 800c754:	ee35 5ac5 	vsub.f32	s10, s11, s10
 800c758:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800c75c:	ee79 1a41 	vsub.f32	s3, s18, s2
 800c760:	ee39 8aa8 	vadd.f32	s16, s19, s17
 800c764:	ee76 5a43 	vsub.f32	s11, s12, s6
 800c768:	ee74 2a62 	vsub.f32	s5, s8, s5
 800c76c:	ee72 4a24 	vadd.f32	s9, s4, s9
 800c770:	ee30 4a60 	vsub.f32	s8, s0, s1
 800c774:	ee79 8ae8 	vsub.f32	s17, s19, s17
 800c778:	ee30 0a20 	vadd.f32	s0, s0, s1
 800c77c:	ee77 9a85 	vadd.f32	s19, s15, s10
 800c780:	ee36 6a03 	vadd.f32	s12, s12, s6
 800c784:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800c788:	ee2e 2a21 	vmul.f32	s4, s28, s3
 800c78c:	ee2e 5a26 	vmul.f32	s10, s28, s13
 800c790:	ee6f 0a23 	vmul.f32	s1, s30, s7
 800c794:	ee2a 3a21 	vmul.f32	s6, s20, s3
 800c798:	ee39 1a01 	vadd.f32	s2, s18, s2
 800c79c:	ee6a 6a26 	vmul.f32	s13, s20, s13
 800c7a0:	ee2b 9a87 	vmul.f32	s18, s23, s14
 800c7a4:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 800c7a8:	ee2f 7a07 	vmul.f32	s14, s30, s14
 800c7ac:	ee6f 1a84 	vmul.f32	s3, s31, s8
 800c7b0:	ee35 3a03 	vadd.f32	s6, s10, s6
 800c7b4:	ee72 6a66 	vsub.f32	s13, s4, s13
 800c7b8:	ee2c 5a04 	vmul.f32	s10, s24, s8
 800c7bc:	ee2f 2a88 	vmul.f32	s4, s31, s16
 800c7c0:	ed9d 4a02 	vldr	s8, [sp, #8]
 800c7c4:	ed8e 1a01 	vstr	s2, [lr, #4]
 800c7c8:	ee77 3a63 	vsub.f32	s7, s14, s7
 800c7cc:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800c7d0:	ed9d 7a01 	vldr	s14, [sp, #4]
 800c7d4:	ed86 3a00 	vstr	s6, [r6]
 800c7d8:	ee30 9a89 	vadd.f32	s18, s1, s18
 800c7dc:	ee32 2a05 	vadd.f32	s4, s4, s10
 800c7e0:	ee6d 0a22 	vmul.f32	s1, s26, s5
 800c7e4:	ee31 8ac8 	vsub.f32	s16, s3, s16
 800c7e8:	ee67 2a22 	vmul.f32	s5, s14, s5
 800c7ec:	ee64 1a00 	vmul.f32	s3, s8, s0
 800c7f0:	ee27 7a24 	vmul.f32	s14, s14, s9
 800c7f4:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 800c7f8:	ee6d 4a24 	vmul.f32	s9, s26, s9
 800c7fc:	ee64 8a28 	vmul.f32	s17, s8, s17
 800c800:	ed9d 4a00 	vldr	s8, [sp]
 800c804:	edc6 6a01 	vstr	s13, [r6, #4]
 800c808:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800c80c:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 800c810:	ee64 9a29 	vmul.f32	s19, s8, s19
 800c814:	ee24 4a25 	vmul.f32	s8, s8, s11
 800c818:	ee30 7a87 	vadd.f32	s14, s1, s14
 800c81c:	ee74 4a84 	vadd.f32	s9, s9, s8
 800c820:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 800c824:	ee2a 4a86 	vmul.f32	s8, s21, s12
 800c828:	ee2c 0a80 	vmul.f32	s0, s25, s0
 800c82c:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 800c830:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 800c834:	ee2e 6a86 	vmul.f32	s12, s29, s12
 800c838:	ee75 1a21 	vadd.f32	s3, s10, s3
 800c83c:	ee30 0a68 	vsub.f32	s0, s0, s17
 800c840:	ee75 9ae9 	vsub.f32	s19, s11, s19
 800c844:	ee70 0a84 	vadd.f32	s1, s1, s8
 800c848:	ee36 6a67 	vsub.f32	s12, s12, s15
 800c84c:	44dc      	add	ip, fp
 800c84e:	45e1      	cmp	r9, ip
 800c850:	ed84 9a00 	vstr	s18, [r4]
 800c854:	edc4 3a01 	vstr	s7, [r4, #4]
 800c858:	449e      	add	lr, r3
 800c85a:	ed02 7a01 	vstr	s14, [r2, #-4]
 800c85e:	edc2 2a00 	vstr	s5, [r2]
 800c862:	441e      	add	r6, r3
 800c864:	ed85 2a00 	vstr	s4, [r5]
 800c868:	ed85 8a01 	vstr	s16, [r5, #4]
 800c86c:	441c      	add	r4, r3
 800c86e:	ed47 1a01 	vstr	s3, [r7, #-4]
 800c872:	ed87 0a00 	vstr	s0, [r7]
 800c876:	441a      	add	r2, r3
 800c878:	ed41 4a01 	vstr	s9, [r1, #-4]
 800c87c:	edc1 9a00 	vstr	s19, [r1]
 800c880:	441d      	add	r5, r3
 800c882:	edc0 0a00 	vstr	s1, [r0]
 800c886:	441f      	add	r7, r3
 800c888:	ed80 6a01 	vstr	s12, [r0, #4]
 800c88c:	4419      	add	r1, r3
 800c88e:	4418      	add	r0, r3
 800c890:	f63f aeea 	bhi.w	800c668 <arm_radix8_butterfly_f32+0x334>
 800c894:	9a03      	ldr	r2, [sp, #12]
 800c896:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800c898:	440a      	add	r2, r1
 800c89a:	9203      	str	r2, [sp, #12]
 800c89c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c89e:	9a05      	ldr	r2, [sp, #20]
 800c8a0:	440a      	add	r2, r1
 800c8a2:	9205      	str	r2, [sp, #20]
 800c8a4:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800c8a6:	9a04      	ldr	r2, [sp, #16]
 800c8a8:	440a      	add	r2, r1
 800c8aa:	9204      	str	r2, [sp, #16]
 800c8ac:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c8ae:	9a06      	ldr	r2, [sp, #24]
 800c8b0:	440a      	add	r2, r1
 800c8b2:	9206      	str	r2, [sp, #24]
 800c8b4:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800c8b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c8b8:	440a      	add	r2, r1
 800c8ba:	9209      	str	r2, [sp, #36]	@ 0x24
 800c8bc:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800c8be:	9a08      	ldr	r2, [sp, #32]
 800c8c0:	440a      	add	r2, r1
 800c8c2:	9208      	str	r2, [sp, #32]
 800c8c4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c8c6:	9a07      	ldr	r2, [sp, #28]
 800c8c8:	440a      	add	r2, r1
 800c8ca:	9207      	str	r2, [sp, #28]
 800c8cc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c8ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c8d0:	f108 0801 	add.w	r8, r8, #1
 800c8d4:	3208      	adds	r2, #8
 800c8d6:	4588      	cmp	r8, r1
 800c8d8:	920a      	str	r2, [sp, #40]	@ 0x28
 800c8da:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c8dc:	f47f ae75 	bne.w	800c5ca <arm_radix8_butterfly_f32+0x296>
 800c8e0:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 800c8e4:	9300      	str	r3, [sp, #0]
 800c8e6:	46c3      	mov	fp, r8
 800c8e8:	f8dd e06c 	ldr.w	lr, [sp, #108]	@ 0x6c
 800c8ec:	e532      	b.n	800c354 <arm_radix8_butterfly_f32+0x20>
 800c8ee:	b01d      	add	sp, #116	@ 0x74
 800c8f0:	ecbd 8b10 	vpop	{d8-d15}
 800c8f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c8f8 <__cvt>:
 800c8f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c8fc:	ec57 6b10 	vmov	r6, r7, d0
 800c900:	2f00      	cmp	r7, #0
 800c902:	460c      	mov	r4, r1
 800c904:	4619      	mov	r1, r3
 800c906:	463b      	mov	r3, r7
 800c908:	bfbb      	ittet	lt
 800c90a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c90e:	461f      	movlt	r7, r3
 800c910:	2300      	movge	r3, #0
 800c912:	232d      	movlt	r3, #45	@ 0x2d
 800c914:	700b      	strb	r3, [r1, #0]
 800c916:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c918:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c91c:	4691      	mov	r9, r2
 800c91e:	f023 0820 	bic.w	r8, r3, #32
 800c922:	bfbc      	itt	lt
 800c924:	4632      	movlt	r2, r6
 800c926:	4616      	movlt	r6, r2
 800c928:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c92c:	d005      	beq.n	800c93a <__cvt+0x42>
 800c92e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c932:	d100      	bne.n	800c936 <__cvt+0x3e>
 800c934:	3401      	adds	r4, #1
 800c936:	2102      	movs	r1, #2
 800c938:	e000      	b.n	800c93c <__cvt+0x44>
 800c93a:	2103      	movs	r1, #3
 800c93c:	ab03      	add	r3, sp, #12
 800c93e:	9301      	str	r3, [sp, #4]
 800c940:	ab02      	add	r3, sp, #8
 800c942:	9300      	str	r3, [sp, #0]
 800c944:	ec47 6b10 	vmov	d0, r6, r7
 800c948:	4653      	mov	r3, sl
 800c94a:	4622      	mov	r2, r4
 800c94c:	f001 f978 	bl	800dc40 <_dtoa_r>
 800c950:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c954:	4605      	mov	r5, r0
 800c956:	d119      	bne.n	800c98c <__cvt+0x94>
 800c958:	f019 0f01 	tst.w	r9, #1
 800c95c:	d00e      	beq.n	800c97c <__cvt+0x84>
 800c95e:	eb00 0904 	add.w	r9, r0, r4
 800c962:	2200      	movs	r2, #0
 800c964:	2300      	movs	r3, #0
 800c966:	4630      	mov	r0, r6
 800c968:	4639      	mov	r1, r7
 800c96a:	f7f4 f92d 	bl	8000bc8 <__aeabi_dcmpeq>
 800c96e:	b108      	cbz	r0, 800c974 <__cvt+0x7c>
 800c970:	f8cd 900c 	str.w	r9, [sp, #12]
 800c974:	2230      	movs	r2, #48	@ 0x30
 800c976:	9b03      	ldr	r3, [sp, #12]
 800c978:	454b      	cmp	r3, r9
 800c97a:	d31e      	bcc.n	800c9ba <__cvt+0xc2>
 800c97c:	9b03      	ldr	r3, [sp, #12]
 800c97e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c980:	1b5b      	subs	r3, r3, r5
 800c982:	4628      	mov	r0, r5
 800c984:	6013      	str	r3, [r2, #0]
 800c986:	b004      	add	sp, #16
 800c988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c98c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c990:	eb00 0904 	add.w	r9, r0, r4
 800c994:	d1e5      	bne.n	800c962 <__cvt+0x6a>
 800c996:	7803      	ldrb	r3, [r0, #0]
 800c998:	2b30      	cmp	r3, #48	@ 0x30
 800c99a:	d10a      	bne.n	800c9b2 <__cvt+0xba>
 800c99c:	2200      	movs	r2, #0
 800c99e:	2300      	movs	r3, #0
 800c9a0:	4630      	mov	r0, r6
 800c9a2:	4639      	mov	r1, r7
 800c9a4:	f7f4 f910 	bl	8000bc8 <__aeabi_dcmpeq>
 800c9a8:	b918      	cbnz	r0, 800c9b2 <__cvt+0xba>
 800c9aa:	f1c4 0401 	rsb	r4, r4, #1
 800c9ae:	f8ca 4000 	str.w	r4, [sl]
 800c9b2:	f8da 3000 	ldr.w	r3, [sl]
 800c9b6:	4499      	add	r9, r3
 800c9b8:	e7d3      	b.n	800c962 <__cvt+0x6a>
 800c9ba:	1c59      	adds	r1, r3, #1
 800c9bc:	9103      	str	r1, [sp, #12]
 800c9be:	701a      	strb	r2, [r3, #0]
 800c9c0:	e7d9      	b.n	800c976 <__cvt+0x7e>

0800c9c2 <__exponent>:
 800c9c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c9c4:	2900      	cmp	r1, #0
 800c9c6:	bfba      	itte	lt
 800c9c8:	4249      	neglt	r1, r1
 800c9ca:	232d      	movlt	r3, #45	@ 0x2d
 800c9cc:	232b      	movge	r3, #43	@ 0x2b
 800c9ce:	2909      	cmp	r1, #9
 800c9d0:	7002      	strb	r2, [r0, #0]
 800c9d2:	7043      	strb	r3, [r0, #1]
 800c9d4:	dd29      	ble.n	800ca2a <__exponent+0x68>
 800c9d6:	f10d 0307 	add.w	r3, sp, #7
 800c9da:	461d      	mov	r5, r3
 800c9dc:	270a      	movs	r7, #10
 800c9de:	461a      	mov	r2, r3
 800c9e0:	fbb1 f6f7 	udiv	r6, r1, r7
 800c9e4:	fb07 1416 	mls	r4, r7, r6, r1
 800c9e8:	3430      	adds	r4, #48	@ 0x30
 800c9ea:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c9ee:	460c      	mov	r4, r1
 800c9f0:	2c63      	cmp	r4, #99	@ 0x63
 800c9f2:	f103 33ff 	add.w	r3, r3, #4294967295
 800c9f6:	4631      	mov	r1, r6
 800c9f8:	dcf1      	bgt.n	800c9de <__exponent+0x1c>
 800c9fa:	3130      	adds	r1, #48	@ 0x30
 800c9fc:	1e94      	subs	r4, r2, #2
 800c9fe:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ca02:	1c41      	adds	r1, r0, #1
 800ca04:	4623      	mov	r3, r4
 800ca06:	42ab      	cmp	r3, r5
 800ca08:	d30a      	bcc.n	800ca20 <__exponent+0x5e>
 800ca0a:	f10d 0309 	add.w	r3, sp, #9
 800ca0e:	1a9b      	subs	r3, r3, r2
 800ca10:	42ac      	cmp	r4, r5
 800ca12:	bf88      	it	hi
 800ca14:	2300      	movhi	r3, #0
 800ca16:	3302      	adds	r3, #2
 800ca18:	4403      	add	r3, r0
 800ca1a:	1a18      	subs	r0, r3, r0
 800ca1c:	b003      	add	sp, #12
 800ca1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca20:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ca24:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ca28:	e7ed      	b.n	800ca06 <__exponent+0x44>
 800ca2a:	2330      	movs	r3, #48	@ 0x30
 800ca2c:	3130      	adds	r1, #48	@ 0x30
 800ca2e:	7083      	strb	r3, [r0, #2]
 800ca30:	70c1      	strb	r1, [r0, #3]
 800ca32:	1d03      	adds	r3, r0, #4
 800ca34:	e7f1      	b.n	800ca1a <__exponent+0x58>
	...

0800ca38 <_printf_float>:
 800ca38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca3c:	b08d      	sub	sp, #52	@ 0x34
 800ca3e:	460c      	mov	r4, r1
 800ca40:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ca44:	4616      	mov	r6, r2
 800ca46:	461f      	mov	r7, r3
 800ca48:	4605      	mov	r5, r0
 800ca4a:	f000 fff3 	bl	800da34 <_localeconv_r>
 800ca4e:	6803      	ldr	r3, [r0, #0]
 800ca50:	9304      	str	r3, [sp, #16]
 800ca52:	4618      	mov	r0, r3
 800ca54:	f7f3 fc8c 	bl	8000370 <strlen>
 800ca58:	2300      	movs	r3, #0
 800ca5a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ca5c:	f8d8 3000 	ldr.w	r3, [r8]
 800ca60:	9005      	str	r0, [sp, #20]
 800ca62:	3307      	adds	r3, #7
 800ca64:	f023 0307 	bic.w	r3, r3, #7
 800ca68:	f103 0208 	add.w	r2, r3, #8
 800ca6c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ca70:	f8d4 b000 	ldr.w	fp, [r4]
 800ca74:	f8c8 2000 	str.w	r2, [r8]
 800ca78:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ca7c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ca80:	9307      	str	r3, [sp, #28]
 800ca82:	f8cd 8018 	str.w	r8, [sp, #24]
 800ca86:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ca8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ca8e:	4b9c      	ldr	r3, [pc, #624]	@ (800cd00 <_printf_float+0x2c8>)
 800ca90:	f04f 32ff 	mov.w	r2, #4294967295
 800ca94:	f7f4 f8ca 	bl	8000c2c <__aeabi_dcmpun>
 800ca98:	bb70      	cbnz	r0, 800caf8 <_printf_float+0xc0>
 800ca9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ca9e:	4b98      	ldr	r3, [pc, #608]	@ (800cd00 <_printf_float+0x2c8>)
 800caa0:	f04f 32ff 	mov.w	r2, #4294967295
 800caa4:	f7f4 f8a4 	bl	8000bf0 <__aeabi_dcmple>
 800caa8:	bb30      	cbnz	r0, 800caf8 <_printf_float+0xc0>
 800caaa:	2200      	movs	r2, #0
 800caac:	2300      	movs	r3, #0
 800caae:	4640      	mov	r0, r8
 800cab0:	4649      	mov	r1, r9
 800cab2:	f7f4 f893 	bl	8000bdc <__aeabi_dcmplt>
 800cab6:	b110      	cbz	r0, 800cabe <_printf_float+0x86>
 800cab8:	232d      	movs	r3, #45	@ 0x2d
 800caba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cabe:	4a91      	ldr	r2, [pc, #580]	@ (800cd04 <_printf_float+0x2cc>)
 800cac0:	4b91      	ldr	r3, [pc, #580]	@ (800cd08 <_printf_float+0x2d0>)
 800cac2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800cac6:	bf94      	ite	ls
 800cac8:	4690      	movls	r8, r2
 800caca:	4698      	movhi	r8, r3
 800cacc:	2303      	movs	r3, #3
 800cace:	6123      	str	r3, [r4, #16]
 800cad0:	f02b 0304 	bic.w	r3, fp, #4
 800cad4:	6023      	str	r3, [r4, #0]
 800cad6:	f04f 0900 	mov.w	r9, #0
 800cada:	9700      	str	r7, [sp, #0]
 800cadc:	4633      	mov	r3, r6
 800cade:	aa0b      	add	r2, sp, #44	@ 0x2c
 800cae0:	4621      	mov	r1, r4
 800cae2:	4628      	mov	r0, r5
 800cae4:	f000 f9d2 	bl	800ce8c <_printf_common>
 800cae8:	3001      	adds	r0, #1
 800caea:	f040 808d 	bne.w	800cc08 <_printf_float+0x1d0>
 800caee:	f04f 30ff 	mov.w	r0, #4294967295
 800caf2:	b00d      	add	sp, #52	@ 0x34
 800caf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caf8:	4642      	mov	r2, r8
 800cafa:	464b      	mov	r3, r9
 800cafc:	4640      	mov	r0, r8
 800cafe:	4649      	mov	r1, r9
 800cb00:	f7f4 f894 	bl	8000c2c <__aeabi_dcmpun>
 800cb04:	b140      	cbz	r0, 800cb18 <_printf_float+0xe0>
 800cb06:	464b      	mov	r3, r9
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	bfbc      	itt	lt
 800cb0c:	232d      	movlt	r3, #45	@ 0x2d
 800cb0e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800cb12:	4a7e      	ldr	r2, [pc, #504]	@ (800cd0c <_printf_float+0x2d4>)
 800cb14:	4b7e      	ldr	r3, [pc, #504]	@ (800cd10 <_printf_float+0x2d8>)
 800cb16:	e7d4      	b.n	800cac2 <_printf_float+0x8a>
 800cb18:	6863      	ldr	r3, [r4, #4]
 800cb1a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800cb1e:	9206      	str	r2, [sp, #24]
 800cb20:	1c5a      	adds	r2, r3, #1
 800cb22:	d13b      	bne.n	800cb9c <_printf_float+0x164>
 800cb24:	2306      	movs	r3, #6
 800cb26:	6063      	str	r3, [r4, #4]
 800cb28:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	6022      	str	r2, [r4, #0]
 800cb30:	9303      	str	r3, [sp, #12]
 800cb32:	ab0a      	add	r3, sp, #40	@ 0x28
 800cb34:	e9cd a301 	strd	sl, r3, [sp, #4]
 800cb38:	ab09      	add	r3, sp, #36	@ 0x24
 800cb3a:	9300      	str	r3, [sp, #0]
 800cb3c:	6861      	ldr	r1, [r4, #4]
 800cb3e:	ec49 8b10 	vmov	d0, r8, r9
 800cb42:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800cb46:	4628      	mov	r0, r5
 800cb48:	f7ff fed6 	bl	800c8f8 <__cvt>
 800cb4c:	9b06      	ldr	r3, [sp, #24]
 800cb4e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cb50:	2b47      	cmp	r3, #71	@ 0x47
 800cb52:	4680      	mov	r8, r0
 800cb54:	d129      	bne.n	800cbaa <_printf_float+0x172>
 800cb56:	1cc8      	adds	r0, r1, #3
 800cb58:	db02      	blt.n	800cb60 <_printf_float+0x128>
 800cb5a:	6863      	ldr	r3, [r4, #4]
 800cb5c:	4299      	cmp	r1, r3
 800cb5e:	dd41      	ble.n	800cbe4 <_printf_float+0x1ac>
 800cb60:	f1aa 0a02 	sub.w	sl, sl, #2
 800cb64:	fa5f fa8a 	uxtb.w	sl, sl
 800cb68:	3901      	subs	r1, #1
 800cb6a:	4652      	mov	r2, sl
 800cb6c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800cb70:	9109      	str	r1, [sp, #36]	@ 0x24
 800cb72:	f7ff ff26 	bl	800c9c2 <__exponent>
 800cb76:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cb78:	1813      	adds	r3, r2, r0
 800cb7a:	2a01      	cmp	r2, #1
 800cb7c:	4681      	mov	r9, r0
 800cb7e:	6123      	str	r3, [r4, #16]
 800cb80:	dc02      	bgt.n	800cb88 <_printf_float+0x150>
 800cb82:	6822      	ldr	r2, [r4, #0]
 800cb84:	07d2      	lsls	r2, r2, #31
 800cb86:	d501      	bpl.n	800cb8c <_printf_float+0x154>
 800cb88:	3301      	adds	r3, #1
 800cb8a:	6123      	str	r3, [r4, #16]
 800cb8c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d0a2      	beq.n	800cada <_printf_float+0xa2>
 800cb94:	232d      	movs	r3, #45	@ 0x2d
 800cb96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cb9a:	e79e      	b.n	800cada <_printf_float+0xa2>
 800cb9c:	9a06      	ldr	r2, [sp, #24]
 800cb9e:	2a47      	cmp	r2, #71	@ 0x47
 800cba0:	d1c2      	bne.n	800cb28 <_printf_float+0xf0>
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d1c0      	bne.n	800cb28 <_printf_float+0xf0>
 800cba6:	2301      	movs	r3, #1
 800cba8:	e7bd      	b.n	800cb26 <_printf_float+0xee>
 800cbaa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cbae:	d9db      	bls.n	800cb68 <_printf_float+0x130>
 800cbb0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800cbb4:	d118      	bne.n	800cbe8 <_printf_float+0x1b0>
 800cbb6:	2900      	cmp	r1, #0
 800cbb8:	6863      	ldr	r3, [r4, #4]
 800cbba:	dd0b      	ble.n	800cbd4 <_printf_float+0x19c>
 800cbbc:	6121      	str	r1, [r4, #16]
 800cbbe:	b913      	cbnz	r3, 800cbc6 <_printf_float+0x18e>
 800cbc0:	6822      	ldr	r2, [r4, #0]
 800cbc2:	07d0      	lsls	r0, r2, #31
 800cbc4:	d502      	bpl.n	800cbcc <_printf_float+0x194>
 800cbc6:	3301      	adds	r3, #1
 800cbc8:	440b      	add	r3, r1
 800cbca:	6123      	str	r3, [r4, #16]
 800cbcc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800cbce:	f04f 0900 	mov.w	r9, #0
 800cbd2:	e7db      	b.n	800cb8c <_printf_float+0x154>
 800cbd4:	b913      	cbnz	r3, 800cbdc <_printf_float+0x1a4>
 800cbd6:	6822      	ldr	r2, [r4, #0]
 800cbd8:	07d2      	lsls	r2, r2, #31
 800cbda:	d501      	bpl.n	800cbe0 <_printf_float+0x1a8>
 800cbdc:	3302      	adds	r3, #2
 800cbde:	e7f4      	b.n	800cbca <_printf_float+0x192>
 800cbe0:	2301      	movs	r3, #1
 800cbe2:	e7f2      	b.n	800cbca <_printf_float+0x192>
 800cbe4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800cbe8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cbea:	4299      	cmp	r1, r3
 800cbec:	db05      	blt.n	800cbfa <_printf_float+0x1c2>
 800cbee:	6823      	ldr	r3, [r4, #0]
 800cbf0:	6121      	str	r1, [r4, #16]
 800cbf2:	07d8      	lsls	r0, r3, #31
 800cbf4:	d5ea      	bpl.n	800cbcc <_printf_float+0x194>
 800cbf6:	1c4b      	adds	r3, r1, #1
 800cbf8:	e7e7      	b.n	800cbca <_printf_float+0x192>
 800cbfa:	2900      	cmp	r1, #0
 800cbfc:	bfd4      	ite	le
 800cbfe:	f1c1 0202 	rsble	r2, r1, #2
 800cc02:	2201      	movgt	r2, #1
 800cc04:	4413      	add	r3, r2
 800cc06:	e7e0      	b.n	800cbca <_printf_float+0x192>
 800cc08:	6823      	ldr	r3, [r4, #0]
 800cc0a:	055a      	lsls	r2, r3, #21
 800cc0c:	d407      	bmi.n	800cc1e <_printf_float+0x1e6>
 800cc0e:	6923      	ldr	r3, [r4, #16]
 800cc10:	4642      	mov	r2, r8
 800cc12:	4631      	mov	r1, r6
 800cc14:	4628      	mov	r0, r5
 800cc16:	47b8      	blx	r7
 800cc18:	3001      	adds	r0, #1
 800cc1a:	d12b      	bne.n	800cc74 <_printf_float+0x23c>
 800cc1c:	e767      	b.n	800caee <_printf_float+0xb6>
 800cc1e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cc22:	f240 80dd 	bls.w	800cde0 <_printf_float+0x3a8>
 800cc26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	f7f3 ffcb 	bl	8000bc8 <__aeabi_dcmpeq>
 800cc32:	2800      	cmp	r0, #0
 800cc34:	d033      	beq.n	800cc9e <_printf_float+0x266>
 800cc36:	4a37      	ldr	r2, [pc, #220]	@ (800cd14 <_printf_float+0x2dc>)
 800cc38:	2301      	movs	r3, #1
 800cc3a:	4631      	mov	r1, r6
 800cc3c:	4628      	mov	r0, r5
 800cc3e:	47b8      	blx	r7
 800cc40:	3001      	adds	r0, #1
 800cc42:	f43f af54 	beq.w	800caee <_printf_float+0xb6>
 800cc46:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800cc4a:	4543      	cmp	r3, r8
 800cc4c:	db02      	blt.n	800cc54 <_printf_float+0x21c>
 800cc4e:	6823      	ldr	r3, [r4, #0]
 800cc50:	07d8      	lsls	r0, r3, #31
 800cc52:	d50f      	bpl.n	800cc74 <_printf_float+0x23c>
 800cc54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cc58:	4631      	mov	r1, r6
 800cc5a:	4628      	mov	r0, r5
 800cc5c:	47b8      	blx	r7
 800cc5e:	3001      	adds	r0, #1
 800cc60:	f43f af45 	beq.w	800caee <_printf_float+0xb6>
 800cc64:	f04f 0900 	mov.w	r9, #0
 800cc68:	f108 38ff 	add.w	r8, r8, #4294967295
 800cc6c:	f104 0a1a 	add.w	sl, r4, #26
 800cc70:	45c8      	cmp	r8, r9
 800cc72:	dc09      	bgt.n	800cc88 <_printf_float+0x250>
 800cc74:	6823      	ldr	r3, [r4, #0]
 800cc76:	079b      	lsls	r3, r3, #30
 800cc78:	f100 8103 	bmi.w	800ce82 <_printf_float+0x44a>
 800cc7c:	68e0      	ldr	r0, [r4, #12]
 800cc7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cc80:	4298      	cmp	r0, r3
 800cc82:	bfb8      	it	lt
 800cc84:	4618      	movlt	r0, r3
 800cc86:	e734      	b.n	800caf2 <_printf_float+0xba>
 800cc88:	2301      	movs	r3, #1
 800cc8a:	4652      	mov	r2, sl
 800cc8c:	4631      	mov	r1, r6
 800cc8e:	4628      	mov	r0, r5
 800cc90:	47b8      	blx	r7
 800cc92:	3001      	adds	r0, #1
 800cc94:	f43f af2b 	beq.w	800caee <_printf_float+0xb6>
 800cc98:	f109 0901 	add.w	r9, r9, #1
 800cc9c:	e7e8      	b.n	800cc70 <_printf_float+0x238>
 800cc9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	dc39      	bgt.n	800cd18 <_printf_float+0x2e0>
 800cca4:	4a1b      	ldr	r2, [pc, #108]	@ (800cd14 <_printf_float+0x2dc>)
 800cca6:	2301      	movs	r3, #1
 800cca8:	4631      	mov	r1, r6
 800ccaa:	4628      	mov	r0, r5
 800ccac:	47b8      	blx	r7
 800ccae:	3001      	adds	r0, #1
 800ccb0:	f43f af1d 	beq.w	800caee <_printf_float+0xb6>
 800ccb4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ccb8:	ea59 0303 	orrs.w	r3, r9, r3
 800ccbc:	d102      	bne.n	800ccc4 <_printf_float+0x28c>
 800ccbe:	6823      	ldr	r3, [r4, #0]
 800ccc0:	07d9      	lsls	r1, r3, #31
 800ccc2:	d5d7      	bpl.n	800cc74 <_printf_float+0x23c>
 800ccc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ccc8:	4631      	mov	r1, r6
 800ccca:	4628      	mov	r0, r5
 800cccc:	47b8      	blx	r7
 800ccce:	3001      	adds	r0, #1
 800ccd0:	f43f af0d 	beq.w	800caee <_printf_float+0xb6>
 800ccd4:	f04f 0a00 	mov.w	sl, #0
 800ccd8:	f104 0b1a 	add.w	fp, r4, #26
 800ccdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccde:	425b      	negs	r3, r3
 800cce0:	4553      	cmp	r3, sl
 800cce2:	dc01      	bgt.n	800cce8 <_printf_float+0x2b0>
 800cce4:	464b      	mov	r3, r9
 800cce6:	e793      	b.n	800cc10 <_printf_float+0x1d8>
 800cce8:	2301      	movs	r3, #1
 800ccea:	465a      	mov	r2, fp
 800ccec:	4631      	mov	r1, r6
 800ccee:	4628      	mov	r0, r5
 800ccf0:	47b8      	blx	r7
 800ccf2:	3001      	adds	r0, #1
 800ccf4:	f43f aefb 	beq.w	800caee <_printf_float+0xb6>
 800ccf8:	f10a 0a01 	add.w	sl, sl, #1
 800ccfc:	e7ee      	b.n	800ccdc <_printf_float+0x2a4>
 800ccfe:	bf00      	nop
 800cd00:	7fefffff 	.word	0x7fefffff
 800cd04:	08024664 	.word	0x08024664
 800cd08:	08024668 	.word	0x08024668
 800cd0c:	0802466c 	.word	0x0802466c
 800cd10:	08024670 	.word	0x08024670
 800cd14:	08024674 	.word	0x08024674
 800cd18:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cd1a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cd1e:	4553      	cmp	r3, sl
 800cd20:	bfa8      	it	ge
 800cd22:	4653      	movge	r3, sl
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	4699      	mov	r9, r3
 800cd28:	dc36      	bgt.n	800cd98 <_printf_float+0x360>
 800cd2a:	f04f 0b00 	mov.w	fp, #0
 800cd2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cd32:	f104 021a 	add.w	r2, r4, #26
 800cd36:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cd38:	9306      	str	r3, [sp, #24]
 800cd3a:	eba3 0309 	sub.w	r3, r3, r9
 800cd3e:	455b      	cmp	r3, fp
 800cd40:	dc31      	bgt.n	800cda6 <_printf_float+0x36e>
 800cd42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd44:	459a      	cmp	sl, r3
 800cd46:	dc3a      	bgt.n	800cdbe <_printf_float+0x386>
 800cd48:	6823      	ldr	r3, [r4, #0]
 800cd4a:	07da      	lsls	r2, r3, #31
 800cd4c:	d437      	bmi.n	800cdbe <_printf_float+0x386>
 800cd4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd50:	ebaa 0903 	sub.w	r9, sl, r3
 800cd54:	9b06      	ldr	r3, [sp, #24]
 800cd56:	ebaa 0303 	sub.w	r3, sl, r3
 800cd5a:	4599      	cmp	r9, r3
 800cd5c:	bfa8      	it	ge
 800cd5e:	4699      	movge	r9, r3
 800cd60:	f1b9 0f00 	cmp.w	r9, #0
 800cd64:	dc33      	bgt.n	800cdce <_printf_float+0x396>
 800cd66:	f04f 0800 	mov.w	r8, #0
 800cd6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cd6e:	f104 0b1a 	add.w	fp, r4, #26
 800cd72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd74:	ebaa 0303 	sub.w	r3, sl, r3
 800cd78:	eba3 0309 	sub.w	r3, r3, r9
 800cd7c:	4543      	cmp	r3, r8
 800cd7e:	f77f af79 	ble.w	800cc74 <_printf_float+0x23c>
 800cd82:	2301      	movs	r3, #1
 800cd84:	465a      	mov	r2, fp
 800cd86:	4631      	mov	r1, r6
 800cd88:	4628      	mov	r0, r5
 800cd8a:	47b8      	blx	r7
 800cd8c:	3001      	adds	r0, #1
 800cd8e:	f43f aeae 	beq.w	800caee <_printf_float+0xb6>
 800cd92:	f108 0801 	add.w	r8, r8, #1
 800cd96:	e7ec      	b.n	800cd72 <_printf_float+0x33a>
 800cd98:	4642      	mov	r2, r8
 800cd9a:	4631      	mov	r1, r6
 800cd9c:	4628      	mov	r0, r5
 800cd9e:	47b8      	blx	r7
 800cda0:	3001      	adds	r0, #1
 800cda2:	d1c2      	bne.n	800cd2a <_printf_float+0x2f2>
 800cda4:	e6a3      	b.n	800caee <_printf_float+0xb6>
 800cda6:	2301      	movs	r3, #1
 800cda8:	4631      	mov	r1, r6
 800cdaa:	4628      	mov	r0, r5
 800cdac:	9206      	str	r2, [sp, #24]
 800cdae:	47b8      	blx	r7
 800cdb0:	3001      	adds	r0, #1
 800cdb2:	f43f ae9c 	beq.w	800caee <_printf_float+0xb6>
 800cdb6:	9a06      	ldr	r2, [sp, #24]
 800cdb8:	f10b 0b01 	add.w	fp, fp, #1
 800cdbc:	e7bb      	b.n	800cd36 <_printf_float+0x2fe>
 800cdbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cdc2:	4631      	mov	r1, r6
 800cdc4:	4628      	mov	r0, r5
 800cdc6:	47b8      	blx	r7
 800cdc8:	3001      	adds	r0, #1
 800cdca:	d1c0      	bne.n	800cd4e <_printf_float+0x316>
 800cdcc:	e68f      	b.n	800caee <_printf_float+0xb6>
 800cdce:	9a06      	ldr	r2, [sp, #24]
 800cdd0:	464b      	mov	r3, r9
 800cdd2:	4442      	add	r2, r8
 800cdd4:	4631      	mov	r1, r6
 800cdd6:	4628      	mov	r0, r5
 800cdd8:	47b8      	blx	r7
 800cdda:	3001      	adds	r0, #1
 800cddc:	d1c3      	bne.n	800cd66 <_printf_float+0x32e>
 800cdde:	e686      	b.n	800caee <_printf_float+0xb6>
 800cde0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cde4:	f1ba 0f01 	cmp.w	sl, #1
 800cde8:	dc01      	bgt.n	800cdee <_printf_float+0x3b6>
 800cdea:	07db      	lsls	r3, r3, #31
 800cdec:	d536      	bpl.n	800ce5c <_printf_float+0x424>
 800cdee:	2301      	movs	r3, #1
 800cdf0:	4642      	mov	r2, r8
 800cdf2:	4631      	mov	r1, r6
 800cdf4:	4628      	mov	r0, r5
 800cdf6:	47b8      	blx	r7
 800cdf8:	3001      	adds	r0, #1
 800cdfa:	f43f ae78 	beq.w	800caee <_printf_float+0xb6>
 800cdfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce02:	4631      	mov	r1, r6
 800ce04:	4628      	mov	r0, r5
 800ce06:	47b8      	blx	r7
 800ce08:	3001      	adds	r0, #1
 800ce0a:	f43f ae70 	beq.w	800caee <_printf_float+0xb6>
 800ce0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ce12:	2200      	movs	r2, #0
 800ce14:	2300      	movs	r3, #0
 800ce16:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ce1a:	f7f3 fed5 	bl	8000bc8 <__aeabi_dcmpeq>
 800ce1e:	b9c0      	cbnz	r0, 800ce52 <_printf_float+0x41a>
 800ce20:	4653      	mov	r3, sl
 800ce22:	f108 0201 	add.w	r2, r8, #1
 800ce26:	4631      	mov	r1, r6
 800ce28:	4628      	mov	r0, r5
 800ce2a:	47b8      	blx	r7
 800ce2c:	3001      	adds	r0, #1
 800ce2e:	d10c      	bne.n	800ce4a <_printf_float+0x412>
 800ce30:	e65d      	b.n	800caee <_printf_float+0xb6>
 800ce32:	2301      	movs	r3, #1
 800ce34:	465a      	mov	r2, fp
 800ce36:	4631      	mov	r1, r6
 800ce38:	4628      	mov	r0, r5
 800ce3a:	47b8      	blx	r7
 800ce3c:	3001      	adds	r0, #1
 800ce3e:	f43f ae56 	beq.w	800caee <_printf_float+0xb6>
 800ce42:	f108 0801 	add.w	r8, r8, #1
 800ce46:	45d0      	cmp	r8, sl
 800ce48:	dbf3      	blt.n	800ce32 <_printf_float+0x3fa>
 800ce4a:	464b      	mov	r3, r9
 800ce4c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ce50:	e6df      	b.n	800cc12 <_printf_float+0x1da>
 800ce52:	f04f 0800 	mov.w	r8, #0
 800ce56:	f104 0b1a 	add.w	fp, r4, #26
 800ce5a:	e7f4      	b.n	800ce46 <_printf_float+0x40e>
 800ce5c:	2301      	movs	r3, #1
 800ce5e:	4642      	mov	r2, r8
 800ce60:	e7e1      	b.n	800ce26 <_printf_float+0x3ee>
 800ce62:	2301      	movs	r3, #1
 800ce64:	464a      	mov	r2, r9
 800ce66:	4631      	mov	r1, r6
 800ce68:	4628      	mov	r0, r5
 800ce6a:	47b8      	blx	r7
 800ce6c:	3001      	adds	r0, #1
 800ce6e:	f43f ae3e 	beq.w	800caee <_printf_float+0xb6>
 800ce72:	f108 0801 	add.w	r8, r8, #1
 800ce76:	68e3      	ldr	r3, [r4, #12]
 800ce78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ce7a:	1a5b      	subs	r3, r3, r1
 800ce7c:	4543      	cmp	r3, r8
 800ce7e:	dcf0      	bgt.n	800ce62 <_printf_float+0x42a>
 800ce80:	e6fc      	b.n	800cc7c <_printf_float+0x244>
 800ce82:	f04f 0800 	mov.w	r8, #0
 800ce86:	f104 0919 	add.w	r9, r4, #25
 800ce8a:	e7f4      	b.n	800ce76 <_printf_float+0x43e>

0800ce8c <_printf_common>:
 800ce8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce90:	4616      	mov	r6, r2
 800ce92:	4698      	mov	r8, r3
 800ce94:	688a      	ldr	r2, [r1, #8]
 800ce96:	690b      	ldr	r3, [r1, #16]
 800ce98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ce9c:	4293      	cmp	r3, r2
 800ce9e:	bfb8      	it	lt
 800cea0:	4613      	movlt	r3, r2
 800cea2:	6033      	str	r3, [r6, #0]
 800cea4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cea8:	4607      	mov	r7, r0
 800ceaa:	460c      	mov	r4, r1
 800ceac:	b10a      	cbz	r2, 800ceb2 <_printf_common+0x26>
 800ceae:	3301      	adds	r3, #1
 800ceb0:	6033      	str	r3, [r6, #0]
 800ceb2:	6823      	ldr	r3, [r4, #0]
 800ceb4:	0699      	lsls	r1, r3, #26
 800ceb6:	bf42      	ittt	mi
 800ceb8:	6833      	ldrmi	r3, [r6, #0]
 800ceba:	3302      	addmi	r3, #2
 800cebc:	6033      	strmi	r3, [r6, #0]
 800cebe:	6825      	ldr	r5, [r4, #0]
 800cec0:	f015 0506 	ands.w	r5, r5, #6
 800cec4:	d106      	bne.n	800ced4 <_printf_common+0x48>
 800cec6:	f104 0a19 	add.w	sl, r4, #25
 800ceca:	68e3      	ldr	r3, [r4, #12]
 800cecc:	6832      	ldr	r2, [r6, #0]
 800cece:	1a9b      	subs	r3, r3, r2
 800ced0:	42ab      	cmp	r3, r5
 800ced2:	dc26      	bgt.n	800cf22 <_printf_common+0x96>
 800ced4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ced8:	6822      	ldr	r2, [r4, #0]
 800ceda:	3b00      	subs	r3, #0
 800cedc:	bf18      	it	ne
 800cede:	2301      	movne	r3, #1
 800cee0:	0692      	lsls	r2, r2, #26
 800cee2:	d42b      	bmi.n	800cf3c <_printf_common+0xb0>
 800cee4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cee8:	4641      	mov	r1, r8
 800ceea:	4638      	mov	r0, r7
 800ceec:	47c8      	blx	r9
 800ceee:	3001      	adds	r0, #1
 800cef0:	d01e      	beq.n	800cf30 <_printf_common+0xa4>
 800cef2:	6823      	ldr	r3, [r4, #0]
 800cef4:	6922      	ldr	r2, [r4, #16]
 800cef6:	f003 0306 	and.w	r3, r3, #6
 800cefa:	2b04      	cmp	r3, #4
 800cefc:	bf02      	ittt	eq
 800cefe:	68e5      	ldreq	r5, [r4, #12]
 800cf00:	6833      	ldreq	r3, [r6, #0]
 800cf02:	1aed      	subeq	r5, r5, r3
 800cf04:	68a3      	ldr	r3, [r4, #8]
 800cf06:	bf0c      	ite	eq
 800cf08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cf0c:	2500      	movne	r5, #0
 800cf0e:	4293      	cmp	r3, r2
 800cf10:	bfc4      	itt	gt
 800cf12:	1a9b      	subgt	r3, r3, r2
 800cf14:	18ed      	addgt	r5, r5, r3
 800cf16:	2600      	movs	r6, #0
 800cf18:	341a      	adds	r4, #26
 800cf1a:	42b5      	cmp	r5, r6
 800cf1c:	d11a      	bne.n	800cf54 <_printf_common+0xc8>
 800cf1e:	2000      	movs	r0, #0
 800cf20:	e008      	b.n	800cf34 <_printf_common+0xa8>
 800cf22:	2301      	movs	r3, #1
 800cf24:	4652      	mov	r2, sl
 800cf26:	4641      	mov	r1, r8
 800cf28:	4638      	mov	r0, r7
 800cf2a:	47c8      	blx	r9
 800cf2c:	3001      	adds	r0, #1
 800cf2e:	d103      	bne.n	800cf38 <_printf_common+0xac>
 800cf30:	f04f 30ff 	mov.w	r0, #4294967295
 800cf34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf38:	3501      	adds	r5, #1
 800cf3a:	e7c6      	b.n	800ceca <_printf_common+0x3e>
 800cf3c:	18e1      	adds	r1, r4, r3
 800cf3e:	1c5a      	adds	r2, r3, #1
 800cf40:	2030      	movs	r0, #48	@ 0x30
 800cf42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cf46:	4422      	add	r2, r4
 800cf48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cf4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cf50:	3302      	adds	r3, #2
 800cf52:	e7c7      	b.n	800cee4 <_printf_common+0x58>
 800cf54:	2301      	movs	r3, #1
 800cf56:	4622      	mov	r2, r4
 800cf58:	4641      	mov	r1, r8
 800cf5a:	4638      	mov	r0, r7
 800cf5c:	47c8      	blx	r9
 800cf5e:	3001      	adds	r0, #1
 800cf60:	d0e6      	beq.n	800cf30 <_printf_common+0xa4>
 800cf62:	3601      	adds	r6, #1
 800cf64:	e7d9      	b.n	800cf1a <_printf_common+0x8e>
	...

0800cf68 <_printf_i>:
 800cf68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cf6c:	7e0f      	ldrb	r7, [r1, #24]
 800cf6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cf70:	2f78      	cmp	r7, #120	@ 0x78
 800cf72:	4691      	mov	r9, r2
 800cf74:	4680      	mov	r8, r0
 800cf76:	460c      	mov	r4, r1
 800cf78:	469a      	mov	sl, r3
 800cf7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cf7e:	d807      	bhi.n	800cf90 <_printf_i+0x28>
 800cf80:	2f62      	cmp	r7, #98	@ 0x62
 800cf82:	d80a      	bhi.n	800cf9a <_printf_i+0x32>
 800cf84:	2f00      	cmp	r7, #0
 800cf86:	f000 80d2 	beq.w	800d12e <_printf_i+0x1c6>
 800cf8a:	2f58      	cmp	r7, #88	@ 0x58
 800cf8c:	f000 80b9 	beq.w	800d102 <_printf_i+0x19a>
 800cf90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cf94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cf98:	e03a      	b.n	800d010 <_printf_i+0xa8>
 800cf9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cf9e:	2b15      	cmp	r3, #21
 800cfa0:	d8f6      	bhi.n	800cf90 <_printf_i+0x28>
 800cfa2:	a101      	add	r1, pc, #4	@ (adr r1, 800cfa8 <_printf_i+0x40>)
 800cfa4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cfa8:	0800d001 	.word	0x0800d001
 800cfac:	0800d015 	.word	0x0800d015
 800cfb0:	0800cf91 	.word	0x0800cf91
 800cfb4:	0800cf91 	.word	0x0800cf91
 800cfb8:	0800cf91 	.word	0x0800cf91
 800cfbc:	0800cf91 	.word	0x0800cf91
 800cfc0:	0800d015 	.word	0x0800d015
 800cfc4:	0800cf91 	.word	0x0800cf91
 800cfc8:	0800cf91 	.word	0x0800cf91
 800cfcc:	0800cf91 	.word	0x0800cf91
 800cfd0:	0800cf91 	.word	0x0800cf91
 800cfd4:	0800d115 	.word	0x0800d115
 800cfd8:	0800d03f 	.word	0x0800d03f
 800cfdc:	0800d0cf 	.word	0x0800d0cf
 800cfe0:	0800cf91 	.word	0x0800cf91
 800cfe4:	0800cf91 	.word	0x0800cf91
 800cfe8:	0800d137 	.word	0x0800d137
 800cfec:	0800cf91 	.word	0x0800cf91
 800cff0:	0800d03f 	.word	0x0800d03f
 800cff4:	0800cf91 	.word	0x0800cf91
 800cff8:	0800cf91 	.word	0x0800cf91
 800cffc:	0800d0d7 	.word	0x0800d0d7
 800d000:	6833      	ldr	r3, [r6, #0]
 800d002:	1d1a      	adds	r2, r3, #4
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	6032      	str	r2, [r6, #0]
 800d008:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d00c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d010:	2301      	movs	r3, #1
 800d012:	e09d      	b.n	800d150 <_printf_i+0x1e8>
 800d014:	6833      	ldr	r3, [r6, #0]
 800d016:	6820      	ldr	r0, [r4, #0]
 800d018:	1d19      	adds	r1, r3, #4
 800d01a:	6031      	str	r1, [r6, #0]
 800d01c:	0606      	lsls	r6, r0, #24
 800d01e:	d501      	bpl.n	800d024 <_printf_i+0xbc>
 800d020:	681d      	ldr	r5, [r3, #0]
 800d022:	e003      	b.n	800d02c <_printf_i+0xc4>
 800d024:	0645      	lsls	r5, r0, #25
 800d026:	d5fb      	bpl.n	800d020 <_printf_i+0xb8>
 800d028:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d02c:	2d00      	cmp	r5, #0
 800d02e:	da03      	bge.n	800d038 <_printf_i+0xd0>
 800d030:	232d      	movs	r3, #45	@ 0x2d
 800d032:	426d      	negs	r5, r5
 800d034:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d038:	4859      	ldr	r0, [pc, #356]	@ (800d1a0 <_printf_i+0x238>)
 800d03a:	230a      	movs	r3, #10
 800d03c:	e011      	b.n	800d062 <_printf_i+0xfa>
 800d03e:	6821      	ldr	r1, [r4, #0]
 800d040:	6833      	ldr	r3, [r6, #0]
 800d042:	0608      	lsls	r0, r1, #24
 800d044:	f853 5b04 	ldr.w	r5, [r3], #4
 800d048:	d402      	bmi.n	800d050 <_printf_i+0xe8>
 800d04a:	0649      	lsls	r1, r1, #25
 800d04c:	bf48      	it	mi
 800d04e:	b2ad      	uxthmi	r5, r5
 800d050:	2f6f      	cmp	r7, #111	@ 0x6f
 800d052:	4853      	ldr	r0, [pc, #332]	@ (800d1a0 <_printf_i+0x238>)
 800d054:	6033      	str	r3, [r6, #0]
 800d056:	bf14      	ite	ne
 800d058:	230a      	movne	r3, #10
 800d05a:	2308      	moveq	r3, #8
 800d05c:	2100      	movs	r1, #0
 800d05e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d062:	6866      	ldr	r6, [r4, #4]
 800d064:	60a6      	str	r6, [r4, #8]
 800d066:	2e00      	cmp	r6, #0
 800d068:	bfa2      	ittt	ge
 800d06a:	6821      	ldrge	r1, [r4, #0]
 800d06c:	f021 0104 	bicge.w	r1, r1, #4
 800d070:	6021      	strge	r1, [r4, #0]
 800d072:	b90d      	cbnz	r5, 800d078 <_printf_i+0x110>
 800d074:	2e00      	cmp	r6, #0
 800d076:	d04b      	beq.n	800d110 <_printf_i+0x1a8>
 800d078:	4616      	mov	r6, r2
 800d07a:	fbb5 f1f3 	udiv	r1, r5, r3
 800d07e:	fb03 5711 	mls	r7, r3, r1, r5
 800d082:	5dc7      	ldrb	r7, [r0, r7]
 800d084:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d088:	462f      	mov	r7, r5
 800d08a:	42bb      	cmp	r3, r7
 800d08c:	460d      	mov	r5, r1
 800d08e:	d9f4      	bls.n	800d07a <_printf_i+0x112>
 800d090:	2b08      	cmp	r3, #8
 800d092:	d10b      	bne.n	800d0ac <_printf_i+0x144>
 800d094:	6823      	ldr	r3, [r4, #0]
 800d096:	07df      	lsls	r7, r3, #31
 800d098:	d508      	bpl.n	800d0ac <_printf_i+0x144>
 800d09a:	6923      	ldr	r3, [r4, #16]
 800d09c:	6861      	ldr	r1, [r4, #4]
 800d09e:	4299      	cmp	r1, r3
 800d0a0:	bfde      	ittt	le
 800d0a2:	2330      	movle	r3, #48	@ 0x30
 800d0a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d0a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d0ac:	1b92      	subs	r2, r2, r6
 800d0ae:	6122      	str	r2, [r4, #16]
 800d0b0:	f8cd a000 	str.w	sl, [sp]
 800d0b4:	464b      	mov	r3, r9
 800d0b6:	aa03      	add	r2, sp, #12
 800d0b8:	4621      	mov	r1, r4
 800d0ba:	4640      	mov	r0, r8
 800d0bc:	f7ff fee6 	bl	800ce8c <_printf_common>
 800d0c0:	3001      	adds	r0, #1
 800d0c2:	d14a      	bne.n	800d15a <_printf_i+0x1f2>
 800d0c4:	f04f 30ff 	mov.w	r0, #4294967295
 800d0c8:	b004      	add	sp, #16
 800d0ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0ce:	6823      	ldr	r3, [r4, #0]
 800d0d0:	f043 0320 	orr.w	r3, r3, #32
 800d0d4:	6023      	str	r3, [r4, #0]
 800d0d6:	4833      	ldr	r0, [pc, #204]	@ (800d1a4 <_printf_i+0x23c>)
 800d0d8:	2778      	movs	r7, #120	@ 0x78
 800d0da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d0de:	6823      	ldr	r3, [r4, #0]
 800d0e0:	6831      	ldr	r1, [r6, #0]
 800d0e2:	061f      	lsls	r7, r3, #24
 800d0e4:	f851 5b04 	ldr.w	r5, [r1], #4
 800d0e8:	d402      	bmi.n	800d0f0 <_printf_i+0x188>
 800d0ea:	065f      	lsls	r7, r3, #25
 800d0ec:	bf48      	it	mi
 800d0ee:	b2ad      	uxthmi	r5, r5
 800d0f0:	6031      	str	r1, [r6, #0]
 800d0f2:	07d9      	lsls	r1, r3, #31
 800d0f4:	bf44      	itt	mi
 800d0f6:	f043 0320 	orrmi.w	r3, r3, #32
 800d0fa:	6023      	strmi	r3, [r4, #0]
 800d0fc:	b11d      	cbz	r5, 800d106 <_printf_i+0x19e>
 800d0fe:	2310      	movs	r3, #16
 800d100:	e7ac      	b.n	800d05c <_printf_i+0xf4>
 800d102:	4827      	ldr	r0, [pc, #156]	@ (800d1a0 <_printf_i+0x238>)
 800d104:	e7e9      	b.n	800d0da <_printf_i+0x172>
 800d106:	6823      	ldr	r3, [r4, #0]
 800d108:	f023 0320 	bic.w	r3, r3, #32
 800d10c:	6023      	str	r3, [r4, #0]
 800d10e:	e7f6      	b.n	800d0fe <_printf_i+0x196>
 800d110:	4616      	mov	r6, r2
 800d112:	e7bd      	b.n	800d090 <_printf_i+0x128>
 800d114:	6833      	ldr	r3, [r6, #0]
 800d116:	6825      	ldr	r5, [r4, #0]
 800d118:	6961      	ldr	r1, [r4, #20]
 800d11a:	1d18      	adds	r0, r3, #4
 800d11c:	6030      	str	r0, [r6, #0]
 800d11e:	062e      	lsls	r6, r5, #24
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	d501      	bpl.n	800d128 <_printf_i+0x1c0>
 800d124:	6019      	str	r1, [r3, #0]
 800d126:	e002      	b.n	800d12e <_printf_i+0x1c6>
 800d128:	0668      	lsls	r0, r5, #25
 800d12a:	d5fb      	bpl.n	800d124 <_printf_i+0x1bc>
 800d12c:	8019      	strh	r1, [r3, #0]
 800d12e:	2300      	movs	r3, #0
 800d130:	6123      	str	r3, [r4, #16]
 800d132:	4616      	mov	r6, r2
 800d134:	e7bc      	b.n	800d0b0 <_printf_i+0x148>
 800d136:	6833      	ldr	r3, [r6, #0]
 800d138:	1d1a      	adds	r2, r3, #4
 800d13a:	6032      	str	r2, [r6, #0]
 800d13c:	681e      	ldr	r6, [r3, #0]
 800d13e:	6862      	ldr	r2, [r4, #4]
 800d140:	2100      	movs	r1, #0
 800d142:	4630      	mov	r0, r6
 800d144:	f7f3 f8c4 	bl	80002d0 <memchr>
 800d148:	b108      	cbz	r0, 800d14e <_printf_i+0x1e6>
 800d14a:	1b80      	subs	r0, r0, r6
 800d14c:	6060      	str	r0, [r4, #4]
 800d14e:	6863      	ldr	r3, [r4, #4]
 800d150:	6123      	str	r3, [r4, #16]
 800d152:	2300      	movs	r3, #0
 800d154:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d158:	e7aa      	b.n	800d0b0 <_printf_i+0x148>
 800d15a:	6923      	ldr	r3, [r4, #16]
 800d15c:	4632      	mov	r2, r6
 800d15e:	4649      	mov	r1, r9
 800d160:	4640      	mov	r0, r8
 800d162:	47d0      	blx	sl
 800d164:	3001      	adds	r0, #1
 800d166:	d0ad      	beq.n	800d0c4 <_printf_i+0x15c>
 800d168:	6823      	ldr	r3, [r4, #0]
 800d16a:	079b      	lsls	r3, r3, #30
 800d16c:	d413      	bmi.n	800d196 <_printf_i+0x22e>
 800d16e:	68e0      	ldr	r0, [r4, #12]
 800d170:	9b03      	ldr	r3, [sp, #12]
 800d172:	4298      	cmp	r0, r3
 800d174:	bfb8      	it	lt
 800d176:	4618      	movlt	r0, r3
 800d178:	e7a6      	b.n	800d0c8 <_printf_i+0x160>
 800d17a:	2301      	movs	r3, #1
 800d17c:	4632      	mov	r2, r6
 800d17e:	4649      	mov	r1, r9
 800d180:	4640      	mov	r0, r8
 800d182:	47d0      	blx	sl
 800d184:	3001      	adds	r0, #1
 800d186:	d09d      	beq.n	800d0c4 <_printf_i+0x15c>
 800d188:	3501      	adds	r5, #1
 800d18a:	68e3      	ldr	r3, [r4, #12]
 800d18c:	9903      	ldr	r1, [sp, #12]
 800d18e:	1a5b      	subs	r3, r3, r1
 800d190:	42ab      	cmp	r3, r5
 800d192:	dcf2      	bgt.n	800d17a <_printf_i+0x212>
 800d194:	e7eb      	b.n	800d16e <_printf_i+0x206>
 800d196:	2500      	movs	r5, #0
 800d198:	f104 0619 	add.w	r6, r4, #25
 800d19c:	e7f5      	b.n	800d18a <_printf_i+0x222>
 800d19e:	bf00      	nop
 800d1a0:	08024676 	.word	0x08024676
 800d1a4:	08024687 	.word	0x08024687

0800d1a8 <_scanf_float>:
 800d1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1ac:	b087      	sub	sp, #28
 800d1ae:	4617      	mov	r7, r2
 800d1b0:	9303      	str	r3, [sp, #12]
 800d1b2:	688b      	ldr	r3, [r1, #8]
 800d1b4:	1e5a      	subs	r2, r3, #1
 800d1b6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800d1ba:	bf81      	itttt	hi
 800d1bc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800d1c0:	eb03 0b05 	addhi.w	fp, r3, r5
 800d1c4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800d1c8:	608b      	strhi	r3, [r1, #8]
 800d1ca:	680b      	ldr	r3, [r1, #0]
 800d1cc:	460a      	mov	r2, r1
 800d1ce:	f04f 0500 	mov.w	r5, #0
 800d1d2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800d1d6:	f842 3b1c 	str.w	r3, [r2], #28
 800d1da:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d1de:	4680      	mov	r8, r0
 800d1e0:	460c      	mov	r4, r1
 800d1e2:	bf98      	it	ls
 800d1e4:	f04f 0b00 	movls.w	fp, #0
 800d1e8:	9201      	str	r2, [sp, #4]
 800d1ea:	4616      	mov	r6, r2
 800d1ec:	46aa      	mov	sl, r5
 800d1ee:	46a9      	mov	r9, r5
 800d1f0:	9502      	str	r5, [sp, #8]
 800d1f2:	68a2      	ldr	r2, [r4, #8]
 800d1f4:	b152      	cbz	r2, 800d20c <_scanf_float+0x64>
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	781b      	ldrb	r3, [r3, #0]
 800d1fa:	2b4e      	cmp	r3, #78	@ 0x4e
 800d1fc:	d864      	bhi.n	800d2c8 <_scanf_float+0x120>
 800d1fe:	2b40      	cmp	r3, #64	@ 0x40
 800d200:	d83c      	bhi.n	800d27c <_scanf_float+0xd4>
 800d202:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800d206:	b2c8      	uxtb	r0, r1
 800d208:	280e      	cmp	r0, #14
 800d20a:	d93a      	bls.n	800d282 <_scanf_float+0xda>
 800d20c:	f1b9 0f00 	cmp.w	r9, #0
 800d210:	d003      	beq.n	800d21a <_scanf_float+0x72>
 800d212:	6823      	ldr	r3, [r4, #0]
 800d214:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d218:	6023      	str	r3, [r4, #0]
 800d21a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d21e:	f1ba 0f01 	cmp.w	sl, #1
 800d222:	f200 8117 	bhi.w	800d454 <_scanf_float+0x2ac>
 800d226:	9b01      	ldr	r3, [sp, #4]
 800d228:	429e      	cmp	r6, r3
 800d22a:	f200 8108 	bhi.w	800d43e <_scanf_float+0x296>
 800d22e:	2001      	movs	r0, #1
 800d230:	b007      	add	sp, #28
 800d232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d236:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800d23a:	2a0d      	cmp	r2, #13
 800d23c:	d8e6      	bhi.n	800d20c <_scanf_float+0x64>
 800d23e:	a101      	add	r1, pc, #4	@ (adr r1, 800d244 <_scanf_float+0x9c>)
 800d240:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d244:	0800d38b 	.word	0x0800d38b
 800d248:	0800d20d 	.word	0x0800d20d
 800d24c:	0800d20d 	.word	0x0800d20d
 800d250:	0800d20d 	.word	0x0800d20d
 800d254:	0800d3eb 	.word	0x0800d3eb
 800d258:	0800d3c3 	.word	0x0800d3c3
 800d25c:	0800d20d 	.word	0x0800d20d
 800d260:	0800d20d 	.word	0x0800d20d
 800d264:	0800d399 	.word	0x0800d399
 800d268:	0800d20d 	.word	0x0800d20d
 800d26c:	0800d20d 	.word	0x0800d20d
 800d270:	0800d20d 	.word	0x0800d20d
 800d274:	0800d20d 	.word	0x0800d20d
 800d278:	0800d351 	.word	0x0800d351
 800d27c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800d280:	e7db      	b.n	800d23a <_scanf_float+0x92>
 800d282:	290e      	cmp	r1, #14
 800d284:	d8c2      	bhi.n	800d20c <_scanf_float+0x64>
 800d286:	a001      	add	r0, pc, #4	@ (adr r0, 800d28c <_scanf_float+0xe4>)
 800d288:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d28c:	0800d341 	.word	0x0800d341
 800d290:	0800d20d 	.word	0x0800d20d
 800d294:	0800d341 	.word	0x0800d341
 800d298:	0800d3d7 	.word	0x0800d3d7
 800d29c:	0800d20d 	.word	0x0800d20d
 800d2a0:	0800d2e9 	.word	0x0800d2e9
 800d2a4:	0800d327 	.word	0x0800d327
 800d2a8:	0800d327 	.word	0x0800d327
 800d2ac:	0800d327 	.word	0x0800d327
 800d2b0:	0800d327 	.word	0x0800d327
 800d2b4:	0800d327 	.word	0x0800d327
 800d2b8:	0800d327 	.word	0x0800d327
 800d2bc:	0800d327 	.word	0x0800d327
 800d2c0:	0800d327 	.word	0x0800d327
 800d2c4:	0800d327 	.word	0x0800d327
 800d2c8:	2b6e      	cmp	r3, #110	@ 0x6e
 800d2ca:	d809      	bhi.n	800d2e0 <_scanf_float+0x138>
 800d2cc:	2b60      	cmp	r3, #96	@ 0x60
 800d2ce:	d8b2      	bhi.n	800d236 <_scanf_float+0x8e>
 800d2d0:	2b54      	cmp	r3, #84	@ 0x54
 800d2d2:	d07b      	beq.n	800d3cc <_scanf_float+0x224>
 800d2d4:	2b59      	cmp	r3, #89	@ 0x59
 800d2d6:	d199      	bne.n	800d20c <_scanf_float+0x64>
 800d2d8:	2d07      	cmp	r5, #7
 800d2da:	d197      	bne.n	800d20c <_scanf_float+0x64>
 800d2dc:	2508      	movs	r5, #8
 800d2de:	e02c      	b.n	800d33a <_scanf_float+0x192>
 800d2e0:	2b74      	cmp	r3, #116	@ 0x74
 800d2e2:	d073      	beq.n	800d3cc <_scanf_float+0x224>
 800d2e4:	2b79      	cmp	r3, #121	@ 0x79
 800d2e6:	e7f6      	b.n	800d2d6 <_scanf_float+0x12e>
 800d2e8:	6821      	ldr	r1, [r4, #0]
 800d2ea:	05c8      	lsls	r0, r1, #23
 800d2ec:	d51b      	bpl.n	800d326 <_scanf_float+0x17e>
 800d2ee:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800d2f2:	6021      	str	r1, [r4, #0]
 800d2f4:	f109 0901 	add.w	r9, r9, #1
 800d2f8:	f1bb 0f00 	cmp.w	fp, #0
 800d2fc:	d003      	beq.n	800d306 <_scanf_float+0x15e>
 800d2fe:	3201      	adds	r2, #1
 800d300:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d304:	60a2      	str	r2, [r4, #8]
 800d306:	68a3      	ldr	r3, [r4, #8]
 800d308:	3b01      	subs	r3, #1
 800d30a:	60a3      	str	r3, [r4, #8]
 800d30c:	6923      	ldr	r3, [r4, #16]
 800d30e:	3301      	adds	r3, #1
 800d310:	6123      	str	r3, [r4, #16]
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	3b01      	subs	r3, #1
 800d316:	2b00      	cmp	r3, #0
 800d318:	607b      	str	r3, [r7, #4]
 800d31a:	f340 8087 	ble.w	800d42c <_scanf_float+0x284>
 800d31e:	683b      	ldr	r3, [r7, #0]
 800d320:	3301      	adds	r3, #1
 800d322:	603b      	str	r3, [r7, #0]
 800d324:	e765      	b.n	800d1f2 <_scanf_float+0x4a>
 800d326:	eb1a 0105 	adds.w	r1, sl, r5
 800d32a:	f47f af6f 	bne.w	800d20c <_scanf_float+0x64>
 800d32e:	6822      	ldr	r2, [r4, #0]
 800d330:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800d334:	6022      	str	r2, [r4, #0]
 800d336:	460d      	mov	r5, r1
 800d338:	468a      	mov	sl, r1
 800d33a:	f806 3b01 	strb.w	r3, [r6], #1
 800d33e:	e7e2      	b.n	800d306 <_scanf_float+0x15e>
 800d340:	6822      	ldr	r2, [r4, #0]
 800d342:	0610      	lsls	r0, r2, #24
 800d344:	f57f af62 	bpl.w	800d20c <_scanf_float+0x64>
 800d348:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d34c:	6022      	str	r2, [r4, #0]
 800d34e:	e7f4      	b.n	800d33a <_scanf_float+0x192>
 800d350:	f1ba 0f00 	cmp.w	sl, #0
 800d354:	d10e      	bne.n	800d374 <_scanf_float+0x1cc>
 800d356:	f1b9 0f00 	cmp.w	r9, #0
 800d35a:	d10e      	bne.n	800d37a <_scanf_float+0x1d2>
 800d35c:	6822      	ldr	r2, [r4, #0]
 800d35e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d362:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d366:	d108      	bne.n	800d37a <_scanf_float+0x1d2>
 800d368:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d36c:	6022      	str	r2, [r4, #0]
 800d36e:	f04f 0a01 	mov.w	sl, #1
 800d372:	e7e2      	b.n	800d33a <_scanf_float+0x192>
 800d374:	f1ba 0f02 	cmp.w	sl, #2
 800d378:	d055      	beq.n	800d426 <_scanf_float+0x27e>
 800d37a:	2d01      	cmp	r5, #1
 800d37c:	d002      	beq.n	800d384 <_scanf_float+0x1dc>
 800d37e:	2d04      	cmp	r5, #4
 800d380:	f47f af44 	bne.w	800d20c <_scanf_float+0x64>
 800d384:	3501      	adds	r5, #1
 800d386:	b2ed      	uxtb	r5, r5
 800d388:	e7d7      	b.n	800d33a <_scanf_float+0x192>
 800d38a:	f1ba 0f01 	cmp.w	sl, #1
 800d38e:	f47f af3d 	bne.w	800d20c <_scanf_float+0x64>
 800d392:	f04f 0a02 	mov.w	sl, #2
 800d396:	e7d0      	b.n	800d33a <_scanf_float+0x192>
 800d398:	b97d      	cbnz	r5, 800d3ba <_scanf_float+0x212>
 800d39a:	f1b9 0f00 	cmp.w	r9, #0
 800d39e:	f47f af38 	bne.w	800d212 <_scanf_float+0x6a>
 800d3a2:	6822      	ldr	r2, [r4, #0]
 800d3a4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d3a8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d3ac:	f040 8108 	bne.w	800d5c0 <_scanf_float+0x418>
 800d3b0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d3b4:	6022      	str	r2, [r4, #0]
 800d3b6:	2501      	movs	r5, #1
 800d3b8:	e7bf      	b.n	800d33a <_scanf_float+0x192>
 800d3ba:	2d03      	cmp	r5, #3
 800d3bc:	d0e2      	beq.n	800d384 <_scanf_float+0x1dc>
 800d3be:	2d05      	cmp	r5, #5
 800d3c0:	e7de      	b.n	800d380 <_scanf_float+0x1d8>
 800d3c2:	2d02      	cmp	r5, #2
 800d3c4:	f47f af22 	bne.w	800d20c <_scanf_float+0x64>
 800d3c8:	2503      	movs	r5, #3
 800d3ca:	e7b6      	b.n	800d33a <_scanf_float+0x192>
 800d3cc:	2d06      	cmp	r5, #6
 800d3ce:	f47f af1d 	bne.w	800d20c <_scanf_float+0x64>
 800d3d2:	2507      	movs	r5, #7
 800d3d4:	e7b1      	b.n	800d33a <_scanf_float+0x192>
 800d3d6:	6822      	ldr	r2, [r4, #0]
 800d3d8:	0591      	lsls	r1, r2, #22
 800d3da:	f57f af17 	bpl.w	800d20c <_scanf_float+0x64>
 800d3de:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800d3e2:	6022      	str	r2, [r4, #0]
 800d3e4:	f8cd 9008 	str.w	r9, [sp, #8]
 800d3e8:	e7a7      	b.n	800d33a <_scanf_float+0x192>
 800d3ea:	6822      	ldr	r2, [r4, #0]
 800d3ec:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800d3f0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800d3f4:	d006      	beq.n	800d404 <_scanf_float+0x25c>
 800d3f6:	0550      	lsls	r0, r2, #21
 800d3f8:	f57f af08 	bpl.w	800d20c <_scanf_float+0x64>
 800d3fc:	f1b9 0f00 	cmp.w	r9, #0
 800d400:	f000 80de 	beq.w	800d5c0 <_scanf_float+0x418>
 800d404:	0591      	lsls	r1, r2, #22
 800d406:	bf58      	it	pl
 800d408:	9902      	ldrpl	r1, [sp, #8]
 800d40a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d40e:	bf58      	it	pl
 800d410:	eba9 0101 	subpl.w	r1, r9, r1
 800d414:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800d418:	bf58      	it	pl
 800d41a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d41e:	6022      	str	r2, [r4, #0]
 800d420:	f04f 0900 	mov.w	r9, #0
 800d424:	e789      	b.n	800d33a <_scanf_float+0x192>
 800d426:	f04f 0a03 	mov.w	sl, #3
 800d42a:	e786      	b.n	800d33a <_scanf_float+0x192>
 800d42c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d430:	4639      	mov	r1, r7
 800d432:	4640      	mov	r0, r8
 800d434:	4798      	blx	r3
 800d436:	2800      	cmp	r0, #0
 800d438:	f43f aedb 	beq.w	800d1f2 <_scanf_float+0x4a>
 800d43c:	e6e6      	b.n	800d20c <_scanf_float+0x64>
 800d43e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d442:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d446:	463a      	mov	r2, r7
 800d448:	4640      	mov	r0, r8
 800d44a:	4798      	blx	r3
 800d44c:	6923      	ldr	r3, [r4, #16]
 800d44e:	3b01      	subs	r3, #1
 800d450:	6123      	str	r3, [r4, #16]
 800d452:	e6e8      	b.n	800d226 <_scanf_float+0x7e>
 800d454:	1e6b      	subs	r3, r5, #1
 800d456:	2b06      	cmp	r3, #6
 800d458:	d824      	bhi.n	800d4a4 <_scanf_float+0x2fc>
 800d45a:	2d02      	cmp	r5, #2
 800d45c:	d836      	bhi.n	800d4cc <_scanf_float+0x324>
 800d45e:	9b01      	ldr	r3, [sp, #4]
 800d460:	429e      	cmp	r6, r3
 800d462:	f67f aee4 	bls.w	800d22e <_scanf_float+0x86>
 800d466:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d46a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d46e:	463a      	mov	r2, r7
 800d470:	4640      	mov	r0, r8
 800d472:	4798      	blx	r3
 800d474:	6923      	ldr	r3, [r4, #16]
 800d476:	3b01      	subs	r3, #1
 800d478:	6123      	str	r3, [r4, #16]
 800d47a:	e7f0      	b.n	800d45e <_scanf_float+0x2b6>
 800d47c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d480:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800d484:	463a      	mov	r2, r7
 800d486:	4640      	mov	r0, r8
 800d488:	4798      	blx	r3
 800d48a:	6923      	ldr	r3, [r4, #16]
 800d48c:	3b01      	subs	r3, #1
 800d48e:	6123      	str	r3, [r4, #16]
 800d490:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d494:	fa5f fa8a 	uxtb.w	sl, sl
 800d498:	f1ba 0f02 	cmp.w	sl, #2
 800d49c:	d1ee      	bne.n	800d47c <_scanf_float+0x2d4>
 800d49e:	3d03      	subs	r5, #3
 800d4a0:	b2ed      	uxtb	r5, r5
 800d4a2:	1b76      	subs	r6, r6, r5
 800d4a4:	6823      	ldr	r3, [r4, #0]
 800d4a6:	05da      	lsls	r2, r3, #23
 800d4a8:	d530      	bpl.n	800d50c <_scanf_float+0x364>
 800d4aa:	055b      	lsls	r3, r3, #21
 800d4ac:	d511      	bpl.n	800d4d2 <_scanf_float+0x32a>
 800d4ae:	9b01      	ldr	r3, [sp, #4]
 800d4b0:	429e      	cmp	r6, r3
 800d4b2:	f67f aebc 	bls.w	800d22e <_scanf_float+0x86>
 800d4b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d4ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d4be:	463a      	mov	r2, r7
 800d4c0:	4640      	mov	r0, r8
 800d4c2:	4798      	blx	r3
 800d4c4:	6923      	ldr	r3, [r4, #16]
 800d4c6:	3b01      	subs	r3, #1
 800d4c8:	6123      	str	r3, [r4, #16]
 800d4ca:	e7f0      	b.n	800d4ae <_scanf_float+0x306>
 800d4cc:	46aa      	mov	sl, r5
 800d4ce:	46b3      	mov	fp, r6
 800d4d0:	e7de      	b.n	800d490 <_scanf_float+0x2e8>
 800d4d2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d4d6:	6923      	ldr	r3, [r4, #16]
 800d4d8:	2965      	cmp	r1, #101	@ 0x65
 800d4da:	f103 33ff 	add.w	r3, r3, #4294967295
 800d4de:	f106 35ff 	add.w	r5, r6, #4294967295
 800d4e2:	6123      	str	r3, [r4, #16]
 800d4e4:	d00c      	beq.n	800d500 <_scanf_float+0x358>
 800d4e6:	2945      	cmp	r1, #69	@ 0x45
 800d4e8:	d00a      	beq.n	800d500 <_scanf_float+0x358>
 800d4ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d4ee:	463a      	mov	r2, r7
 800d4f0:	4640      	mov	r0, r8
 800d4f2:	4798      	blx	r3
 800d4f4:	6923      	ldr	r3, [r4, #16]
 800d4f6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d4fa:	3b01      	subs	r3, #1
 800d4fc:	1eb5      	subs	r5, r6, #2
 800d4fe:	6123      	str	r3, [r4, #16]
 800d500:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d504:	463a      	mov	r2, r7
 800d506:	4640      	mov	r0, r8
 800d508:	4798      	blx	r3
 800d50a:	462e      	mov	r6, r5
 800d50c:	6822      	ldr	r2, [r4, #0]
 800d50e:	f012 0210 	ands.w	r2, r2, #16
 800d512:	d001      	beq.n	800d518 <_scanf_float+0x370>
 800d514:	2000      	movs	r0, #0
 800d516:	e68b      	b.n	800d230 <_scanf_float+0x88>
 800d518:	7032      	strb	r2, [r6, #0]
 800d51a:	6823      	ldr	r3, [r4, #0]
 800d51c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800d520:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d524:	d11c      	bne.n	800d560 <_scanf_float+0x3b8>
 800d526:	9b02      	ldr	r3, [sp, #8]
 800d528:	454b      	cmp	r3, r9
 800d52a:	eba3 0209 	sub.w	r2, r3, r9
 800d52e:	d123      	bne.n	800d578 <_scanf_float+0x3d0>
 800d530:	9901      	ldr	r1, [sp, #4]
 800d532:	2200      	movs	r2, #0
 800d534:	4640      	mov	r0, r8
 800d536:	f002 fcfb 	bl	800ff30 <_strtod_r>
 800d53a:	9b03      	ldr	r3, [sp, #12]
 800d53c:	6821      	ldr	r1, [r4, #0]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	f011 0f02 	tst.w	r1, #2
 800d544:	ec57 6b10 	vmov	r6, r7, d0
 800d548:	f103 0204 	add.w	r2, r3, #4
 800d54c:	d01f      	beq.n	800d58e <_scanf_float+0x3e6>
 800d54e:	9903      	ldr	r1, [sp, #12]
 800d550:	600a      	str	r2, [r1, #0]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	e9c3 6700 	strd	r6, r7, [r3]
 800d558:	68e3      	ldr	r3, [r4, #12]
 800d55a:	3301      	adds	r3, #1
 800d55c:	60e3      	str	r3, [r4, #12]
 800d55e:	e7d9      	b.n	800d514 <_scanf_float+0x36c>
 800d560:	9b04      	ldr	r3, [sp, #16]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d0e4      	beq.n	800d530 <_scanf_float+0x388>
 800d566:	9905      	ldr	r1, [sp, #20]
 800d568:	230a      	movs	r3, #10
 800d56a:	3101      	adds	r1, #1
 800d56c:	4640      	mov	r0, r8
 800d56e:	f002 fd5f 	bl	8010030 <_strtol_r>
 800d572:	9b04      	ldr	r3, [sp, #16]
 800d574:	9e05      	ldr	r6, [sp, #20]
 800d576:	1ac2      	subs	r2, r0, r3
 800d578:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800d57c:	429e      	cmp	r6, r3
 800d57e:	bf28      	it	cs
 800d580:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800d584:	4910      	ldr	r1, [pc, #64]	@ (800d5c8 <_scanf_float+0x420>)
 800d586:	4630      	mov	r0, r6
 800d588:	f000 f954 	bl	800d834 <siprintf>
 800d58c:	e7d0      	b.n	800d530 <_scanf_float+0x388>
 800d58e:	f011 0f04 	tst.w	r1, #4
 800d592:	9903      	ldr	r1, [sp, #12]
 800d594:	600a      	str	r2, [r1, #0]
 800d596:	d1dc      	bne.n	800d552 <_scanf_float+0x3aa>
 800d598:	681d      	ldr	r5, [r3, #0]
 800d59a:	4632      	mov	r2, r6
 800d59c:	463b      	mov	r3, r7
 800d59e:	4630      	mov	r0, r6
 800d5a0:	4639      	mov	r1, r7
 800d5a2:	f7f3 fb43 	bl	8000c2c <__aeabi_dcmpun>
 800d5a6:	b128      	cbz	r0, 800d5b4 <_scanf_float+0x40c>
 800d5a8:	4808      	ldr	r0, [pc, #32]	@ (800d5cc <_scanf_float+0x424>)
 800d5aa:	f000 fabb 	bl	800db24 <nanf>
 800d5ae:	ed85 0a00 	vstr	s0, [r5]
 800d5b2:	e7d1      	b.n	800d558 <_scanf_float+0x3b0>
 800d5b4:	4630      	mov	r0, r6
 800d5b6:	4639      	mov	r1, r7
 800d5b8:	f7f3 fb96 	bl	8000ce8 <__aeabi_d2f>
 800d5bc:	6028      	str	r0, [r5, #0]
 800d5be:	e7cb      	b.n	800d558 <_scanf_float+0x3b0>
 800d5c0:	f04f 0900 	mov.w	r9, #0
 800d5c4:	e629      	b.n	800d21a <_scanf_float+0x72>
 800d5c6:	bf00      	nop
 800d5c8:	08024698 	.word	0x08024698
 800d5cc:	08024a2d 	.word	0x08024a2d

0800d5d0 <std>:
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	b510      	push	{r4, lr}
 800d5d4:	4604      	mov	r4, r0
 800d5d6:	e9c0 3300 	strd	r3, r3, [r0]
 800d5da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d5de:	6083      	str	r3, [r0, #8]
 800d5e0:	8181      	strh	r1, [r0, #12]
 800d5e2:	6643      	str	r3, [r0, #100]	@ 0x64
 800d5e4:	81c2      	strh	r2, [r0, #14]
 800d5e6:	6183      	str	r3, [r0, #24]
 800d5e8:	4619      	mov	r1, r3
 800d5ea:	2208      	movs	r2, #8
 800d5ec:	305c      	adds	r0, #92	@ 0x5c
 800d5ee:	f000 fa19 	bl	800da24 <memset>
 800d5f2:	4b0d      	ldr	r3, [pc, #52]	@ (800d628 <std+0x58>)
 800d5f4:	6263      	str	r3, [r4, #36]	@ 0x24
 800d5f6:	4b0d      	ldr	r3, [pc, #52]	@ (800d62c <std+0x5c>)
 800d5f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d5fa:	4b0d      	ldr	r3, [pc, #52]	@ (800d630 <std+0x60>)
 800d5fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d5fe:	4b0d      	ldr	r3, [pc, #52]	@ (800d634 <std+0x64>)
 800d600:	6323      	str	r3, [r4, #48]	@ 0x30
 800d602:	4b0d      	ldr	r3, [pc, #52]	@ (800d638 <std+0x68>)
 800d604:	6224      	str	r4, [r4, #32]
 800d606:	429c      	cmp	r4, r3
 800d608:	d006      	beq.n	800d618 <std+0x48>
 800d60a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d60e:	4294      	cmp	r4, r2
 800d610:	d002      	beq.n	800d618 <std+0x48>
 800d612:	33d0      	adds	r3, #208	@ 0xd0
 800d614:	429c      	cmp	r4, r3
 800d616:	d105      	bne.n	800d624 <std+0x54>
 800d618:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d61c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d620:	f000 ba7c 	b.w	800db1c <__retarget_lock_init_recursive>
 800d624:	bd10      	pop	{r4, pc}
 800d626:	bf00      	nop
 800d628:	0800d875 	.word	0x0800d875
 800d62c:	0800d897 	.word	0x0800d897
 800d630:	0800d8cf 	.word	0x0800d8cf
 800d634:	0800d8f3 	.word	0x0800d8f3
 800d638:	20002860 	.word	0x20002860

0800d63c <stdio_exit_handler>:
 800d63c:	4a02      	ldr	r2, [pc, #8]	@ (800d648 <stdio_exit_handler+0xc>)
 800d63e:	4903      	ldr	r1, [pc, #12]	@ (800d64c <stdio_exit_handler+0x10>)
 800d640:	4803      	ldr	r0, [pc, #12]	@ (800d650 <stdio_exit_handler+0x14>)
 800d642:	f000 b869 	b.w	800d718 <_fwalk_sglue>
 800d646:	bf00      	nop
 800d648:	2000010c 	.word	0x2000010c
 800d64c:	08010671 	.word	0x08010671
 800d650:	2000011c 	.word	0x2000011c

0800d654 <cleanup_stdio>:
 800d654:	6841      	ldr	r1, [r0, #4]
 800d656:	4b0c      	ldr	r3, [pc, #48]	@ (800d688 <cleanup_stdio+0x34>)
 800d658:	4299      	cmp	r1, r3
 800d65a:	b510      	push	{r4, lr}
 800d65c:	4604      	mov	r4, r0
 800d65e:	d001      	beq.n	800d664 <cleanup_stdio+0x10>
 800d660:	f003 f806 	bl	8010670 <_fflush_r>
 800d664:	68a1      	ldr	r1, [r4, #8]
 800d666:	4b09      	ldr	r3, [pc, #36]	@ (800d68c <cleanup_stdio+0x38>)
 800d668:	4299      	cmp	r1, r3
 800d66a:	d002      	beq.n	800d672 <cleanup_stdio+0x1e>
 800d66c:	4620      	mov	r0, r4
 800d66e:	f002 ffff 	bl	8010670 <_fflush_r>
 800d672:	68e1      	ldr	r1, [r4, #12]
 800d674:	4b06      	ldr	r3, [pc, #24]	@ (800d690 <cleanup_stdio+0x3c>)
 800d676:	4299      	cmp	r1, r3
 800d678:	d004      	beq.n	800d684 <cleanup_stdio+0x30>
 800d67a:	4620      	mov	r0, r4
 800d67c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d680:	f002 bff6 	b.w	8010670 <_fflush_r>
 800d684:	bd10      	pop	{r4, pc}
 800d686:	bf00      	nop
 800d688:	20002860 	.word	0x20002860
 800d68c:	200028c8 	.word	0x200028c8
 800d690:	20002930 	.word	0x20002930

0800d694 <global_stdio_init.part.0>:
 800d694:	b510      	push	{r4, lr}
 800d696:	4b0b      	ldr	r3, [pc, #44]	@ (800d6c4 <global_stdio_init.part.0+0x30>)
 800d698:	4c0b      	ldr	r4, [pc, #44]	@ (800d6c8 <global_stdio_init.part.0+0x34>)
 800d69a:	4a0c      	ldr	r2, [pc, #48]	@ (800d6cc <global_stdio_init.part.0+0x38>)
 800d69c:	601a      	str	r2, [r3, #0]
 800d69e:	4620      	mov	r0, r4
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	2104      	movs	r1, #4
 800d6a4:	f7ff ff94 	bl	800d5d0 <std>
 800d6a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d6ac:	2201      	movs	r2, #1
 800d6ae:	2109      	movs	r1, #9
 800d6b0:	f7ff ff8e 	bl	800d5d0 <std>
 800d6b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d6b8:	2202      	movs	r2, #2
 800d6ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d6be:	2112      	movs	r1, #18
 800d6c0:	f7ff bf86 	b.w	800d5d0 <std>
 800d6c4:	20002998 	.word	0x20002998
 800d6c8:	20002860 	.word	0x20002860
 800d6cc:	0800d63d 	.word	0x0800d63d

0800d6d0 <__sfp_lock_acquire>:
 800d6d0:	4801      	ldr	r0, [pc, #4]	@ (800d6d8 <__sfp_lock_acquire+0x8>)
 800d6d2:	f000 ba24 	b.w	800db1e <__retarget_lock_acquire_recursive>
 800d6d6:	bf00      	nop
 800d6d8:	200029a1 	.word	0x200029a1

0800d6dc <__sfp_lock_release>:
 800d6dc:	4801      	ldr	r0, [pc, #4]	@ (800d6e4 <__sfp_lock_release+0x8>)
 800d6de:	f000 ba1f 	b.w	800db20 <__retarget_lock_release_recursive>
 800d6e2:	bf00      	nop
 800d6e4:	200029a1 	.word	0x200029a1

0800d6e8 <__sinit>:
 800d6e8:	b510      	push	{r4, lr}
 800d6ea:	4604      	mov	r4, r0
 800d6ec:	f7ff fff0 	bl	800d6d0 <__sfp_lock_acquire>
 800d6f0:	6a23      	ldr	r3, [r4, #32]
 800d6f2:	b11b      	cbz	r3, 800d6fc <__sinit+0x14>
 800d6f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d6f8:	f7ff bff0 	b.w	800d6dc <__sfp_lock_release>
 800d6fc:	4b04      	ldr	r3, [pc, #16]	@ (800d710 <__sinit+0x28>)
 800d6fe:	6223      	str	r3, [r4, #32]
 800d700:	4b04      	ldr	r3, [pc, #16]	@ (800d714 <__sinit+0x2c>)
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d1f5      	bne.n	800d6f4 <__sinit+0xc>
 800d708:	f7ff ffc4 	bl	800d694 <global_stdio_init.part.0>
 800d70c:	e7f2      	b.n	800d6f4 <__sinit+0xc>
 800d70e:	bf00      	nop
 800d710:	0800d655 	.word	0x0800d655
 800d714:	20002998 	.word	0x20002998

0800d718 <_fwalk_sglue>:
 800d718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d71c:	4607      	mov	r7, r0
 800d71e:	4688      	mov	r8, r1
 800d720:	4614      	mov	r4, r2
 800d722:	2600      	movs	r6, #0
 800d724:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d728:	f1b9 0901 	subs.w	r9, r9, #1
 800d72c:	d505      	bpl.n	800d73a <_fwalk_sglue+0x22>
 800d72e:	6824      	ldr	r4, [r4, #0]
 800d730:	2c00      	cmp	r4, #0
 800d732:	d1f7      	bne.n	800d724 <_fwalk_sglue+0xc>
 800d734:	4630      	mov	r0, r6
 800d736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d73a:	89ab      	ldrh	r3, [r5, #12]
 800d73c:	2b01      	cmp	r3, #1
 800d73e:	d907      	bls.n	800d750 <_fwalk_sglue+0x38>
 800d740:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d744:	3301      	adds	r3, #1
 800d746:	d003      	beq.n	800d750 <_fwalk_sglue+0x38>
 800d748:	4629      	mov	r1, r5
 800d74a:	4638      	mov	r0, r7
 800d74c:	47c0      	blx	r8
 800d74e:	4306      	orrs	r6, r0
 800d750:	3568      	adds	r5, #104	@ 0x68
 800d752:	e7e9      	b.n	800d728 <_fwalk_sglue+0x10>

0800d754 <iprintf>:
 800d754:	b40f      	push	{r0, r1, r2, r3}
 800d756:	b507      	push	{r0, r1, r2, lr}
 800d758:	4906      	ldr	r1, [pc, #24]	@ (800d774 <iprintf+0x20>)
 800d75a:	ab04      	add	r3, sp, #16
 800d75c:	6808      	ldr	r0, [r1, #0]
 800d75e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d762:	6881      	ldr	r1, [r0, #8]
 800d764:	9301      	str	r3, [sp, #4]
 800d766:	f002 fde7 	bl	8010338 <_vfiprintf_r>
 800d76a:	b003      	add	sp, #12
 800d76c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d770:	b004      	add	sp, #16
 800d772:	4770      	bx	lr
 800d774:	20000118 	.word	0x20000118

0800d778 <_puts_r>:
 800d778:	6a03      	ldr	r3, [r0, #32]
 800d77a:	b570      	push	{r4, r5, r6, lr}
 800d77c:	6884      	ldr	r4, [r0, #8]
 800d77e:	4605      	mov	r5, r0
 800d780:	460e      	mov	r6, r1
 800d782:	b90b      	cbnz	r3, 800d788 <_puts_r+0x10>
 800d784:	f7ff ffb0 	bl	800d6e8 <__sinit>
 800d788:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d78a:	07db      	lsls	r3, r3, #31
 800d78c:	d405      	bmi.n	800d79a <_puts_r+0x22>
 800d78e:	89a3      	ldrh	r3, [r4, #12]
 800d790:	0598      	lsls	r0, r3, #22
 800d792:	d402      	bmi.n	800d79a <_puts_r+0x22>
 800d794:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d796:	f000 f9c2 	bl	800db1e <__retarget_lock_acquire_recursive>
 800d79a:	89a3      	ldrh	r3, [r4, #12]
 800d79c:	0719      	lsls	r1, r3, #28
 800d79e:	d502      	bpl.n	800d7a6 <_puts_r+0x2e>
 800d7a0:	6923      	ldr	r3, [r4, #16]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d135      	bne.n	800d812 <_puts_r+0x9a>
 800d7a6:	4621      	mov	r1, r4
 800d7a8:	4628      	mov	r0, r5
 800d7aa:	f000 f8e5 	bl	800d978 <__swsetup_r>
 800d7ae:	b380      	cbz	r0, 800d812 <_puts_r+0x9a>
 800d7b0:	f04f 35ff 	mov.w	r5, #4294967295
 800d7b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d7b6:	07da      	lsls	r2, r3, #31
 800d7b8:	d405      	bmi.n	800d7c6 <_puts_r+0x4e>
 800d7ba:	89a3      	ldrh	r3, [r4, #12]
 800d7bc:	059b      	lsls	r3, r3, #22
 800d7be:	d402      	bmi.n	800d7c6 <_puts_r+0x4e>
 800d7c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d7c2:	f000 f9ad 	bl	800db20 <__retarget_lock_release_recursive>
 800d7c6:	4628      	mov	r0, r5
 800d7c8:	bd70      	pop	{r4, r5, r6, pc}
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	da04      	bge.n	800d7d8 <_puts_r+0x60>
 800d7ce:	69a2      	ldr	r2, [r4, #24]
 800d7d0:	429a      	cmp	r2, r3
 800d7d2:	dc17      	bgt.n	800d804 <_puts_r+0x8c>
 800d7d4:	290a      	cmp	r1, #10
 800d7d6:	d015      	beq.n	800d804 <_puts_r+0x8c>
 800d7d8:	6823      	ldr	r3, [r4, #0]
 800d7da:	1c5a      	adds	r2, r3, #1
 800d7dc:	6022      	str	r2, [r4, #0]
 800d7de:	7019      	strb	r1, [r3, #0]
 800d7e0:	68a3      	ldr	r3, [r4, #8]
 800d7e2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d7e6:	3b01      	subs	r3, #1
 800d7e8:	60a3      	str	r3, [r4, #8]
 800d7ea:	2900      	cmp	r1, #0
 800d7ec:	d1ed      	bne.n	800d7ca <_puts_r+0x52>
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	da11      	bge.n	800d816 <_puts_r+0x9e>
 800d7f2:	4622      	mov	r2, r4
 800d7f4:	210a      	movs	r1, #10
 800d7f6:	4628      	mov	r0, r5
 800d7f8:	f000 f87f 	bl	800d8fa <__swbuf_r>
 800d7fc:	3001      	adds	r0, #1
 800d7fe:	d0d7      	beq.n	800d7b0 <_puts_r+0x38>
 800d800:	250a      	movs	r5, #10
 800d802:	e7d7      	b.n	800d7b4 <_puts_r+0x3c>
 800d804:	4622      	mov	r2, r4
 800d806:	4628      	mov	r0, r5
 800d808:	f000 f877 	bl	800d8fa <__swbuf_r>
 800d80c:	3001      	adds	r0, #1
 800d80e:	d1e7      	bne.n	800d7e0 <_puts_r+0x68>
 800d810:	e7ce      	b.n	800d7b0 <_puts_r+0x38>
 800d812:	3e01      	subs	r6, #1
 800d814:	e7e4      	b.n	800d7e0 <_puts_r+0x68>
 800d816:	6823      	ldr	r3, [r4, #0]
 800d818:	1c5a      	adds	r2, r3, #1
 800d81a:	6022      	str	r2, [r4, #0]
 800d81c:	220a      	movs	r2, #10
 800d81e:	701a      	strb	r2, [r3, #0]
 800d820:	e7ee      	b.n	800d800 <_puts_r+0x88>
	...

0800d824 <puts>:
 800d824:	4b02      	ldr	r3, [pc, #8]	@ (800d830 <puts+0xc>)
 800d826:	4601      	mov	r1, r0
 800d828:	6818      	ldr	r0, [r3, #0]
 800d82a:	f7ff bfa5 	b.w	800d778 <_puts_r>
 800d82e:	bf00      	nop
 800d830:	20000118 	.word	0x20000118

0800d834 <siprintf>:
 800d834:	b40e      	push	{r1, r2, r3}
 800d836:	b500      	push	{lr}
 800d838:	b09c      	sub	sp, #112	@ 0x70
 800d83a:	ab1d      	add	r3, sp, #116	@ 0x74
 800d83c:	9002      	str	r0, [sp, #8]
 800d83e:	9006      	str	r0, [sp, #24]
 800d840:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d844:	4809      	ldr	r0, [pc, #36]	@ (800d86c <siprintf+0x38>)
 800d846:	9107      	str	r1, [sp, #28]
 800d848:	9104      	str	r1, [sp, #16]
 800d84a:	4909      	ldr	r1, [pc, #36]	@ (800d870 <siprintf+0x3c>)
 800d84c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d850:	9105      	str	r1, [sp, #20]
 800d852:	6800      	ldr	r0, [r0, #0]
 800d854:	9301      	str	r3, [sp, #4]
 800d856:	a902      	add	r1, sp, #8
 800d858:	f002 fc48 	bl	80100ec <_svfiprintf_r>
 800d85c:	9b02      	ldr	r3, [sp, #8]
 800d85e:	2200      	movs	r2, #0
 800d860:	701a      	strb	r2, [r3, #0]
 800d862:	b01c      	add	sp, #112	@ 0x70
 800d864:	f85d eb04 	ldr.w	lr, [sp], #4
 800d868:	b003      	add	sp, #12
 800d86a:	4770      	bx	lr
 800d86c:	20000118 	.word	0x20000118
 800d870:	ffff0208 	.word	0xffff0208

0800d874 <__sread>:
 800d874:	b510      	push	{r4, lr}
 800d876:	460c      	mov	r4, r1
 800d878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d87c:	f000 f900 	bl	800da80 <_read_r>
 800d880:	2800      	cmp	r0, #0
 800d882:	bfab      	itete	ge
 800d884:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d886:	89a3      	ldrhlt	r3, [r4, #12]
 800d888:	181b      	addge	r3, r3, r0
 800d88a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d88e:	bfac      	ite	ge
 800d890:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d892:	81a3      	strhlt	r3, [r4, #12]
 800d894:	bd10      	pop	{r4, pc}

0800d896 <__swrite>:
 800d896:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d89a:	461f      	mov	r7, r3
 800d89c:	898b      	ldrh	r3, [r1, #12]
 800d89e:	05db      	lsls	r3, r3, #23
 800d8a0:	4605      	mov	r5, r0
 800d8a2:	460c      	mov	r4, r1
 800d8a4:	4616      	mov	r6, r2
 800d8a6:	d505      	bpl.n	800d8b4 <__swrite+0x1e>
 800d8a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8ac:	2302      	movs	r3, #2
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	f000 f8d4 	bl	800da5c <_lseek_r>
 800d8b4:	89a3      	ldrh	r3, [r4, #12]
 800d8b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d8ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d8be:	81a3      	strh	r3, [r4, #12]
 800d8c0:	4632      	mov	r2, r6
 800d8c2:	463b      	mov	r3, r7
 800d8c4:	4628      	mov	r0, r5
 800d8c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d8ca:	f000 b8eb 	b.w	800daa4 <_write_r>

0800d8ce <__sseek>:
 800d8ce:	b510      	push	{r4, lr}
 800d8d0:	460c      	mov	r4, r1
 800d8d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8d6:	f000 f8c1 	bl	800da5c <_lseek_r>
 800d8da:	1c43      	adds	r3, r0, #1
 800d8dc:	89a3      	ldrh	r3, [r4, #12]
 800d8de:	bf15      	itete	ne
 800d8e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d8e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d8e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d8ea:	81a3      	strheq	r3, [r4, #12]
 800d8ec:	bf18      	it	ne
 800d8ee:	81a3      	strhne	r3, [r4, #12]
 800d8f0:	bd10      	pop	{r4, pc}

0800d8f2 <__sclose>:
 800d8f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8f6:	f000 b8a1 	b.w	800da3c <_close_r>

0800d8fa <__swbuf_r>:
 800d8fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8fc:	460e      	mov	r6, r1
 800d8fe:	4614      	mov	r4, r2
 800d900:	4605      	mov	r5, r0
 800d902:	b118      	cbz	r0, 800d90c <__swbuf_r+0x12>
 800d904:	6a03      	ldr	r3, [r0, #32]
 800d906:	b90b      	cbnz	r3, 800d90c <__swbuf_r+0x12>
 800d908:	f7ff feee 	bl	800d6e8 <__sinit>
 800d90c:	69a3      	ldr	r3, [r4, #24]
 800d90e:	60a3      	str	r3, [r4, #8]
 800d910:	89a3      	ldrh	r3, [r4, #12]
 800d912:	071a      	lsls	r2, r3, #28
 800d914:	d501      	bpl.n	800d91a <__swbuf_r+0x20>
 800d916:	6923      	ldr	r3, [r4, #16]
 800d918:	b943      	cbnz	r3, 800d92c <__swbuf_r+0x32>
 800d91a:	4621      	mov	r1, r4
 800d91c:	4628      	mov	r0, r5
 800d91e:	f000 f82b 	bl	800d978 <__swsetup_r>
 800d922:	b118      	cbz	r0, 800d92c <__swbuf_r+0x32>
 800d924:	f04f 37ff 	mov.w	r7, #4294967295
 800d928:	4638      	mov	r0, r7
 800d92a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d92c:	6823      	ldr	r3, [r4, #0]
 800d92e:	6922      	ldr	r2, [r4, #16]
 800d930:	1a98      	subs	r0, r3, r2
 800d932:	6963      	ldr	r3, [r4, #20]
 800d934:	b2f6      	uxtb	r6, r6
 800d936:	4283      	cmp	r3, r0
 800d938:	4637      	mov	r7, r6
 800d93a:	dc05      	bgt.n	800d948 <__swbuf_r+0x4e>
 800d93c:	4621      	mov	r1, r4
 800d93e:	4628      	mov	r0, r5
 800d940:	f002 fe96 	bl	8010670 <_fflush_r>
 800d944:	2800      	cmp	r0, #0
 800d946:	d1ed      	bne.n	800d924 <__swbuf_r+0x2a>
 800d948:	68a3      	ldr	r3, [r4, #8]
 800d94a:	3b01      	subs	r3, #1
 800d94c:	60a3      	str	r3, [r4, #8]
 800d94e:	6823      	ldr	r3, [r4, #0]
 800d950:	1c5a      	adds	r2, r3, #1
 800d952:	6022      	str	r2, [r4, #0]
 800d954:	701e      	strb	r6, [r3, #0]
 800d956:	6962      	ldr	r2, [r4, #20]
 800d958:	1c43      	adds	r3, r0, #1
 800d95a:	429a      	cmp	r2, r3
 800d95c:	d004      	beq.n	800d968 <__swbuf_r+0x6e>
 800d95e:	89a3      	ldrh	r3, [r4, #12]
 800d960:	07db      	lsls	r3, r3, #31
 800d962:	d5e1      	bpl.n	800d928 <__swbuf_r+0x2e>
 800d964:	2e0a      	cmp	r6, #10
 800d966:	d1df      	bne.n	800d928 <__swbuf_r+0x2e>
 800d968:	4621      	mov	r1, r4
 800d96a:	4628      	mov	r0, r5
 800d96c:	f002 fe80 	bl	8010670 <_fflush_r>
 800d970:	2800      	cmp	r0, #0
 800d972:	d0d9      	beq.n	800d928 <__swbuf_r+0x2e>
 800d974:	e7d6      	b.n	800d924 <__swbuf_r+0x2a>
	...

0800d978 <__swsetup_r>:
 800d978:	b538      	push	{r3, r4, r5, lr}
 800d97a:	4b29      	ldr	r3, [pc, #164]	@ (800da20 <__swsetup_r+0xa8>)
 800d97c:	4605      	mov	r5, r0
 800d97e:	6818      	ldr	r0, [r3, #0]
 800d980:	460c      	mov	r4, r1
 800d982:	b118      	cbz	r0, 800d98c <__swsetup_r+0x14>
 800d984:	6a03      	ldr	r3, [r0, #32]
 800d986:	b90b      	cbnz	r3, 800d98c <__swsetup_r+0x14>
 800d988:	f7ff feae 	bl	800d6e8 <__sinit>
 800d98c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d990:	0719      	lsls	r1, r3, #28
 800d992:	d422      	bmi.n	800d9da <__swsetup_r+0x62>
 800d994:	06da      	lsls	r2, r3, #27
 800d996:	d407      	bmi.n	800d9a8 <__swsetup_r+0x30>
 800d998:	2209      	movs	r2, #9
 800d99a:	602a      	str	r2, [r5, #0]
 800d99c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d9a0:	81a3      	strh	r3, [r4, #12]
 800d9a2:	f04f 30ff 	mov.w	r0, #4294967295
 800d9a6:	e033      	b.n	800da10 <__swsetup_r+0x98>
 800d9a8:	0758      	lsls	r0, r3, #29
 800d9aa:	d512      	bpl.n	800d9d2 <__swsetup_r+0x5a>
 800d9ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d9ae:	b141      	cbz	r1, 800d9c2 <__swsetup_r+0x4a>
 800d9b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d9b4:	4299      	cmp	r1, r3
 800d9b6:	d002      	beq.n	800d9be <__swsetup_r+0x46>
 800d9b8:	4628      	mov	r0, r5
 800d9ba:	f000 ff05 	bl	800e7c8 <_free_r>
 800d9be:	2300      	movs	r3, #0
 800d9c0:	6363      	str	r3, [r4, #52]	@ 0x34
 800d9c2:	89a3      	ldrh	r3, [r4, #12]
 800d9c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d9c8:	81a3      	strh	r3, [r4, #12]
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	6063      	str	r3, [r4, #4]
 800d9ce:	6923      	ldr	r3, [r4, #16]
 800d9d0:	6023      	str	r3, [r4, #0]
 800d9d2:	89a3      	ldrh	r3, [r4, #12]
 800d9d4:	f043 0308 	orr.w	r3, r3, #8
 800d9d8:	81a3      	strh	r3, [r4, #12]
 800d9da:	6923      	ldr	r3, [r4, #16]
 800d9dc:	b94b      	cbnz	r3, 800d9f2 <__swsetup_r+0x7a>
 800d9de:	89a3      	ldrh	r3, [r4, #12]
 800d9e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d9e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d9e8:	d003      	beq.n	800d9f2 <__swsetup_r+0x7a>
 800d9ea:	4621      	mov	r1, r4
 800d9ec:	4628      	mov	r0, r5
 800d9ee:	f002 fe8d 	bl	801070c <__smakebuf_r>
 800d9f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9f6:	f013 0201 	ands.w	r2, r3, #1
 800d9fa:	d00a      	beq.n	800da12 <__swsetup_r+0x9a>
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	60a2      	str	r2, [r4, #8]
 800da00:	6962      	ldr	r2, [r4, #20]
 800da02:	4252      	negs	r2, r2
 800da04:	61a2      	str	r2, [r4, #24]
 800da06:	6922      	ldr	r2, [r4, #16]
 800da08:	b942      	cbnz	r2, 800da1c <__swsetup_r+0xa4>
 800da0a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800da0e:	d1c5      	bne.n	800d99c <__swsetup_r+0x24>
 800da10:	bd38      	pop	{r3, r4, r5, pc}
 800da12:	0799      	lsls	r1, r3, #30
 800da14:	bf58      	it	pl
 800da16:	6962      	ldrpl	r2, [r4, #20]
 800da18:	60a2      	str	r2, [r4, #8]
 800da1a:	e7f4      	b.n	800da06 <__swsetup_r+0x8e>
 800da1c:	2000      	movs	r0, #0
 800da1e:	e7f7      	b.n	800da10 <__swsetup_r+0x98>
 800da20:	20000118 	.word	0x20000118

0800da24 <memset>:
 800da24:	4402      	add	r2, r0
 800da26:	4603      	mov	r3, r0
 800da28:	4293      	cmp	r3, r2
 800da2a:	d100      	bne.n	800da2e <memset+0xa>
 800da2c:	4770      	bx	lr
 800da2e:	f803 1b01 	strb.w	r1, [r3], #1
 800da32:	e7f9      	b.n	800da28 <memset+0x4>

0800da34 <_localeconv_r>:
 800da34:	4800      	ldr	r0, [pc, #0]	@ (800da38 <_localeconv_r+0x4>)
 800da36:	4770      	bx	lr
 800da38:	20000258 	.word	0x20000258

0800da3c <_close_r>:
 800da3c:	b538      	push	{r3, r4, r5, lr}
 800da3e:	4d06      	ldr	r5, [pc, #24]	@ (800da58 <_close_r+0x1c>)
 800da40:	2300      	movs	r3, #0
 800da42:	4604      	mov	r4, r0
 800da44:	4608      	mov	r0, r1
 800da46:	602b      	str	r3, [r5, #0]
 800da48:	f7f4 fb8a 	bl	8002160 <_close>
 800da4c:	1c43      	adds	r3, r0, #1
 800da4e:	d102      	bne.n	800da56 <_close_r+0x1a>
 800da50:	682b      	ldr	r3, [r5, #0]
 800da52:	b103      	cbz	r3, 800da56 <_close_r+0x1a>
 800da54:	6023      	str	r3, [r4, #0]
 800da56:	bd38      	pop	{r3, r4, r5, pc}
 800da58:	2000299c 	.word	0x2000299c

0800da5c <_lseek_r>:
 800da5c:	b538      	push	{r3, r4, r5, lr}
 800da5e:	4d07      	ldr	r5, [pc, #28]	@ (800da7c <_lseek_r+0x20>)
 800da60:	4604      	mov	r4, r0
 800da62:	4608      	mov	r0, r1
 800da64:	4611      	mov	r1, r2
 800da66:	2200      	movs	r2, #0
 800da68:	602a      	str	r2, [r5, #0]
 800da6a:	461a      	mov	r2, r3
 800da6c:	f7f4 fb9f 	bl	80021ae <_lseek>
 800da70:	1c43      	adds	r3, r0, #1
 800da72:	d102      	bne.n	800da7a <_lseek_r+0x1e>
 800da74:	682b      	ldr	r3, [r5, #0]
 800da76:	b103      	cbz	r3, 800da7a <_lseek_r+0x1e>
 800da78:	6023      	str	r3, [r4, #0]
 800da7a:	bd38      	pop	{r3, r4, r5, pc}
 800da7c:	2000299c 	.word	0x2000299c

0800da80 <_read_r>:
 800da80:	b538      	push	{r3, r4, r5, lr}
 800da82:	4d07      	ldr	r5, [pc, #28]	@ (800daa0 <_read_r+0x20>)
 800da84:	4604      	mov	r4, r0
 800da86:	4608      	mov	r0, r1
 800da88:	4611      	mov	r1, r2
 800da8a:	2200      	movs	r2, #0
 800da8c:	602a      	str	r2, [r5, #0]
 800da8e:	461a      	mov	r2, r3
 800da90:	f7f4 fb49 	bl	8002126 <_read>
 800da94:	1c43      	adds	r3, r0, #1
 800da96:	d102      	bne.n	800da9e <_read_r+0x1e>
 800da98:	682b      	ldr	r3, [r5, #0]
 800da9a:	b103      	cbz	r3, 800da9e <_read_r+0x1e>
 800da9c:	6023      	str	r3, [r4, #0]
 800da9e:	bd38      	pop	{r3, r4, r5, pc}
 800daa0:	2000299c 	.word	0x2000299c

0800daa4 <_write_r>:
 800daa4:	b538      	push	{r3, r4, r5, lr}
 800daa6:	4d07      	ldr	r5, [pc, #28]	@ (800dac4 <_write_r+0x20>)
 800daa8:	4604      	mov	r4, r0
 800daaa:	4608      	mov	r0, r1
 800daac:	4611      	mov	r1, r2
 800daae:	2200      	movs	r2, #0
 800dab0:	602a      	str	r2, [r5, #0]
 800dab2:	461a      	mov	r2, r3
 800dab4:	f7f3 fb16 	bl	80010e4 <_write>
 800dab8:	1c43      	adds	r3, r0, #1
 800daba:	d102      	bne.n	800dac2 <_write_r+0x1e>
 800dabc:	682b      	ldr	r3, [r5, #0]
 800dabe:	b103      	cbz	r3, 800dac2 <_write_r+0x1e>
 800dac0:	6023      	str	r3, [r4, #0]
 800dac2:	bd38      	pop	{r3, r4, r5, pc}
 800dac4:	2000299c 	.word	0x2000299c

0800dac8 <__errno>:
 800dac8:	4b01      	ldr	r3, [pc, #4]	@ (800dad0 <__errno+0x8>)
 800daca:	6818      	ldr	r0, [r3, #0]
 800dacc:	4770      	bx	lr
 800dace:	bf00      	nop
 800dad0:	20000118 	.word	0x20000118

0800dad4 <__libc_init_array>:
 800dad4:	b570      	push	{r4, r5, r6, lr}
 800dad6:	4d0d      	ldr	r5, [pc, #52]	@ (800db0c <__libc_init_array+0x38>)
 800dad8:	4c0d      	ldr	r4, [pc, #52]	@ (800db10 <__libc_init_array+0x3c>)
 800dada:	1b64      	subs	r4, r4, r5
 800dadc:	10a4      	asrs	r4, r4, #2
 800dade:	2600      	movs	r6, #0
 800dae0:	42a6      	cmp	r6, r4
 800dae2:	d109      	bne.n	800daf8 <__libc_init_array+0x24>
 800dae4:	4d0b      	ldr	r5, [pc, #44]	@ (800db14 <__libc_init_array+0x40>)
 800dae6:	4c0c      	ldr	r4, [pc, #48]	@ (800db18 <__libc_init_array+0x44>)
 800dae8:	f003 fb02 	bl	80110f0 <_init>
 800daec:	1b64      	subs	r4, r4, r5
 800daee:	10a4      	asrs	r4, r4, #2
 800daf0:	2600      	movs	r6, #0
 800daf2:	42a6      	cmp	r6, r4
 800daf4:	d105      	bne.n	800db02 <__libc_init_array+0x2e>
 800daf6:	bd70      	pop	{r4, r5, r6, pc}
 800daf8:	f855 3b04 	ldr.w	r3, [r5], #4
 800dafc:	4798      	blx	r3
 800dafe:	3601      	adds	r6, #1
 800db00:	e7ee      	b.n	800dae0 <__libc_init_array+0xc>
 800db02:	f855 3b04 	ldr.w	r3, [r5], #4
 800db06:	4798      	blx	r3
 800db08:	3601      	adds	r6, #1
 800db0a:	e7f2      	b.n	800daf2 <__libc_init_array+0x1e>
 800db0c:	08024a98 	.word	0x08024a98
 800db10:	08024a98 	.word	0x08024a98
 800db14:	08024a98 	.word	0x08024a98
 800db18:	08024a9c 	.word	0x08024a9c

0800db1c <__retarget_lock_init_recursive>:
 800db1c:	4770      	bx	lr

0800db1e <__retarget_lock_acquire_recursive>:
 800db1e:	4770      	bx	lr

0800db20 <__retarget_lock_release_recursive>:
 800db20:	4770      	bx	lr
	...

0800db24 <nanf>:
 800db24:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800db2c <nanf+0x8>
 800db28:	4770      	bx	lr
 800db2a:	bf00      	nop
 800db2c:	7fc00000 	.word	0x7fc00000

0800db30 <quorem>:
 800db30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db34:	6903      	ldr	r3, [r0, #16]
 800db36:	690c      	ldr	r4, [r1, #16]
 800db38:	42a3      	cmp	r3, r4
 800db3a:	4607      	mov	r7, r0
 800db3c:	db7e      	blt.n	800dc3c <quorem+0x10c>
 800db3e:	3c01      	subs	r4, #1
 800db40:	f101 0814 	add.w	r8, r1, #20
 800db44:	00a3      	lsls	r3, r4, #2
 800db46:	f100 0514 	add.w	r5, r0, #20
 800db4a:	9300      	str	r3, [sp, #0]
 800db4c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800db50:	9301      	str	r3, [sp, #4]
 800db52:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800db56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800db5a:	3301      	adds	r3, #1
 800db5c:	429a      	cmp	r2, r3
 800db5e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800db62:	fbb2 f6f3 	udiv	r6, r2, r3
 800db66:	d32e      	bcc.n	800dbc6 <quorem+0x96>
 800db68:	f04f 0a00 	mov.w	sl, #0
 800db6c:	46c4      	mov	ip, r8
 800db6e:	46ae      	mov	lr, r5
 800db70:	46d3      	mov	fp, sl
 800db72:	f85c 3b04 	ldr.w	r3, [ip], #4
 800db76:	b298      	uxth	r0, r3
 800db78:	fb06 a000 	mla	r0, r6, r0, sl
 800db7c:	0c02      	lsrs	r2, r0, #16
 800db7e:	0c1b      	lsrs	r3, r3, #16
 800db80:	fb06 2303 	mla	r3, r6, r3, r2
 800db84:	f8de 2000 	ldr.w	r2, [lr]
 800db88:	b280      	uxth	r0, r0
 800db8a:	b292      	uxth	r2, r2
 800db8c:	1a12      	subs	r2, r2, r0
 800db8e:	445a      	add	r2, fp
 800db90:	f8de 0000 	ldr.w	r0, [lr]
 800db94:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800db98:	b29b      	uxth	r3, r3
 800db9a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800db9e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800dba2:	b292      	uxth	r2, r2
 800dba4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800dba8:	45e1      	cmp	r9, ip
 800dbaa:	f84e 2b04 	str.w	r2, [lr], #4
 800dbae:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800dbb2:	d2de      	bcs.n	800db72 <quorem+0x42>
 800dbb4:	9b00      	ldr	r3, [sp, #0]
 800dbb6:	58eb      	ldr	r3, [r5, r3]
 800dbb8:	b92b      	cbnz	r3, 800dbc6 <quorem+0x96>
 800dbba:	9b01      	ldr	r3, [sp, #4]
 800dbbc:	3b04      	subs	r3, #4
 800dbbe:	429d      	cmp	r5, r3
 800dbc0:	461a      	mov	r2, r3
 800dbc2:	d32f      	bcc.n	800dc24 <quorem+0xf4>
 800dbc4:	613c      	str	r4, [r7, #16]
 800dbc6:	4638      	mov	r0, r7
 800dbc8:	f001 f9c2 	bl	800ef50 <__mcmp>
 800dbcc:	2800      	cmp	r0, #0
 800dbce:	db25      	blt.n	800dc1c <quorem+0xec>
 800dbd0:	4629      	mov	r1, r5
 800dbd2:	2000      	movs	r0, #0
 800dbd4:	f858 2b04 	ldr.w	r2, [r8], #4
 800dbd8:	f8d1 c000 	ldr.w	ip, [r1]
 800dbdc:	fa1f fe82 	uxth.w	lr, r2
 800dbe0:	fa1f f38c 	uxth.w	r3, ip
 800dbe4:	eba3 030e 	sub.w	r3, r3, lr
 800dbe8:	4403      	add	r3, r0
 800dbea:	0c12      	lsrs	r2, r2, #16
 800dbec:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800dbf0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800dbf4:	b29b      	uxth	r3, r3
 800dbf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dbfa:	45c1      	cmp	r9, r8
 800dbfc:	f841 3b04 	str.w	r3, [r1], #4
 800dc00:	ea4f 4022 	mov.w	r0, r2, asr #16
 800dc04:	d2e6      	bcs.n	800dbd4 <quorem+0xa4>
 800dc06:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dc0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dc0e:	b922      	cbnz	r2, 800dc1a <quorem+0xea>
 800dc10:	3b04      	subs	r3, #4
 800dc12:	429d      	cmp	r5, r3
 800dc14:	461a      	mov	r2, r3
 800dc16:	d30b      	bcc.n	800dc30 <quorem+0x100>
 800dc18:	613c      	str	r4, [r7, #16]
 800dc1a:	3601      	adds	r6, #1
 800dc1c:	4630      	mov	r0, r6
 800dc1e:	b003      	add	sp, #12
 800dc20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc24:	6812      	ldr	r2, [r2, #0]
 800dc26:	3b04      	subs	r3, #4
 800dc28:	2a00      	cmp	r2, #0
 800dc2a:	d1cb      	bne.n	800dbc4 <quorem+0x94>
 800dc2c:	3c01      	subs	r4, #1
 800dc2e:	e7c6      	b.n	800dbbe <quorem+0x8e>
 800dc30:	6812      	ldr	r2, [r2, #0]
 800dc32:	3b04      	subs	r3, #4
 800dc34:	2a00      	cmp	r2, #0
 800dc36:	d1ef      	bne.n	800dc18 <quorem+0xe8>
 800dc38:	3c01      	subs	r4, #1
 800dc3a:	e7ea      	b.n	800dc12 <quorem+0xe2>
 800dc3c:	2000      	movs	r0, #0
 800dc3e:	e7ee      	b.n	800dc1e <quorem+0xee>

0800dc40 <_dtoa_r>:
 800dc40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc44:	69c7      	ldr	r7, [r0, #28]
 800dc46:	b099      	sub	sp, #100	@ 0x64
 800dc48:	ed8d 0b02 	vstr	d0, [sp, #8]
 800dc4c:	ec55 4b10 	vmov	r4, r5, d0
 800dc50:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800dc52:	9109      	str	r1, [sp, #36]	@ 0x24
 800dc54:	4683      	mov	fp, r0
 800dc56:	920e      	str	r2, [sp, #56]	@ 0x38
 800dc58:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dc5a:	b97f      	cbnz	r7, 800dc7c <_dtoa_r+0x3c>
 800dc5c:	2010      	movs	r0, #16
 800dc5e:	f000 fdfd 	bl	800e85c <malloc>
 800dc62:	4602      	mov	r2, r0
 800dc64:	f8cb 001c 	str.w	r0, [fp, #28]
 800dc68:	b920      	cbnz	r0, 800dc74 <_dtoa_r+0x34>
 800dc6a:	4ba7      	ldr	r3, [pc, #668]	@ (800df08 <_dtoa_r+0x2c8>)
 800dc6c:	21ef      	movs	r1, #239	@ 0xef
 800dc6e:	48a7      	ldr	r0, [pc, #668]	@ (800df0c <_dtoa_r+0x2cc>)
 800dc70:	f002 fdfe 	bl	8010870 <__assert_func>
 800dc74:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800dc78:	6007      	str	r7, [r0, #0]
 800dc7a:	60c7      	str	r7, [r0, #12]
 800dc7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dc80:	6819      	ldr	r1, [r3, #0]
 800dc82:	b159      	cbz	r1, 800dc9c <_dtoa_r+0x5c>
 800dc84:	685a      	ldr	r2, [r3, #4]
 800dc86:	604a      	str	r2, [r1, #4]
 800dc88:	2301      	movs	r3, #1
 800dc8a:	4093      	lsls	r3, r2
 800dc8c:	608b      	str	r3, [r1, #8]
 800dc8e:	4658      	mov	r0, fp
 800dc90:	f000 feda 	bl	800ea48 <_Bfree>
 800dc94:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dc98:	2200      	movs	r2, #0
 800dc9a:	601a      	str	r2, [r3, #0]
 800dc9c:	1e2b      	subs	r3, r5, #0
 800dc9e:	bfb9      	ittee	lt
 800dca0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800dca4:	9303      	strlt	r3, [sp, #12]
 800dca6:	2300      	movge	r3, #0
 800dca8:	6033      	strge	r3, [r6, #0]
 800dcaa:	9f03      	ldr	r7, [sp, #12]
 800dcac:	4b98      	ldr	r3, [pc, #608]	@ (800df10 <_dtoa_r+0x2d0>)
 800dcae:	bfbc      	itt	lt
 800dcb0:	2201      	movlt	r2, #1
 800dcb2:	6032      	strlt	r2, [r6, #0]
 800dcb4:	43bb      	bics	r3, r7
 800dcb6:	d112      	bne.n	800dcde <_dtoa_r+0x9e>
 800dcb8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800dcba:	f242 730f 	movw	r3, #9999	@ 0x270f
 800dcbe:	6013      	str	r3, [r2, #0]
 800dcc0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dcc4:	4323      	orrs	r3, r4
 800dcc6:	f000 854d 	beq.w	800e764 <_dtoa_r+0xb24>
 800dcca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dccc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800df24 <_dtoa_r+0x2e4>
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	f000 854f 	beq.w	800e774 <_dtoa_r+0xb34>
 800dcd6:	f10a 0303 	add.w	r3, sl, #3
 800dcda:	f000 bd49 	b.w	800e770 <_dtoa_r+0xb30>
 800dcde:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dce2:	2200      	movs	r2, #0
 800dce4:	ec51 0b17 	vmov	r0, r1, d7
 800dce8:	2300      	movs	r3, #0
 800dcea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800dcee:	f7f2 ff6b 	bl	8000bc8 <__aeabi_dcmpeq>
 800dcf2:	4680      	mov	r8, r0
 800dcf4:	b158      	cbz	r0, 800dd0e <_dtoa_r+0xce>
 800dcf6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800dcf8:	2301      	movs	r3, #1
 800dcfa:	6013      	str	r3, [r2, #0]
 800dcfc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dcfe:	b113      	cbz	r3, 800dd06 <_dtoa_r+0xc6>
 800dd00:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dd02:	4b84      	ldr	r3, [pc, #528]	@ (800df14 <_dtoa_r+0x2d4>)
 800dd04:	6013      	str	r3, [r2, #0]
 800dd06:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800df28 <_dtoa_r+0x2e8>
 800dd0a:	f000 bd33 	b.w	800e774 <_dtoa_r+0xb34>
 800dd0e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800dd12:	aa16      	add	r2, sp, #88	@ 0x58
 800dd14:	a917      	add	r1, sp, #92	@ 0x5c
 800dd16:	4658      	mov	r0, fp
 800dd18:	f001 fa3a 	bl	800f190 <__d2b>
 800dd1c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800dd20:	4681      	mov	r9, r0
 800dd22:	2e00      	cmp	r6, #0
 800dd24:	d077      	beq.n	800de16 <_dtoa_r+0x1d6>
 800dd26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dd28:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800dd2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dd30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dd34:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800dd38:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800dd3c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800dd40:	4619      	mov	r1, r3
 800dd42:	2200      	movs	r2, #0
 800dd44:	4b74      	ldr	r3, [pc, #464]	@ (800df18 <_dtoa_r+0x2d8>)
 800dd46:	f7f2 fb1f 	bl	8000388 <__aeabi_dsub>
 800dd4a:	a369      	add	r3, pc, #420	@ (adr r3, 800def0 <_dtoa_r+0x2b0>)
 800dd4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd50:	f7f2 fcd2 	bl	80006f8 <__aeabi_dmul>
 800dd54:	a368      	add	r3, pc, #416	@ (adr r3, 800def8 <_dtoa_r+0x2b8>)
 800dd56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd5a:	f7f2 fb17 	bl	800038c <__adddf3>
 800dd5e:	4604      	mov	r4, r0
 800dd60:	4630      	mov	r0, r6
 800dd62:	460d      	mov	r5, r1
 800dd64:	f7f2 fc5e 	bl	8000624 <__aeabi_i2d>
 800dd68:	a365      	add	r3, pc, #404	@ (adr r3, 800df00 <_dtoa_r+0x2c0>)
 800dd6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd6e:	f7f2 fcc3 	bl	80006f8 <__aeabi_dmul>
 800dd72:	4602      	mov	r2, r0
 800dd74:	460b      	mov	r3, r1
 800dd76:	4620      	mov	r0, r4
 800dd78:	4629      	mov	r1, r5
 800dd7a:	f7f2 fb07 	bl	800038c <__adddf3>
 800dd7e:	4604      	mov	r4, r0
 800dd80:	460d      	mov	r5, r1
 800dd82:	f7f2 ff69 	bl	8000c58 <__aeabi_d2iz>
 800dd86:	2200      	movs	r2, #0
 800dd88:	4607      	mov	r7, r0
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	4620      	mov	r0, r4
 800dd8e:	4629      	mov	r1, r5
 800dd90:	f7f2 ff24 	bl	8000bdc <__aeabi_dcmplt>
 800dd94:	b140      	cbz	r0, 800dda8 <_dtoa_r+0x168>
 800dd96:	4638      	mov	r0, r7
 800dd98:	f7f2 fc44 	bl	8000624 <__aeabi_i2d>
 800dd9c:	4622      	mov	r2, r4
 800dd9e:	462b      	mov	r3, r5
 800dda0:	f7f2 ff12 	bl	8000bc8 <__aeabi_dcmpeq>
 800dda4:	b900      	cbnz	r0, 800dda8 <_dtoa_r+0x168>
 800dda6:	3f01      	subs	r7, #1
 800dda8:	2f16      	cmp	r7, #22
 800ddaa:	d851      	bhi.n	800de50 <_dtoa_r+0x210>
 800ddac:	4b5b      	ldr	r3, [pc, #364]	@ (800df1c <_dtoa_r+0x2dc>)
 800ddae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ddb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ddba:	f7f2 ff0f 	bl	8000bdc <__aeabi_dcmplt>
 800ddbe:	2800      	cmp	r0, #0
 800ddc0:	d048      	beq.n	800de54 <_dtoa_r+0x214>
 800ddc2:	3f01      	subs	r7, #1
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	9312      	str	r3, [sp, #72]	@ 0x48
 800ddc8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ddca:	1b9b      	subs	r3, r3, r6
 800ddcc:	1e5a      	subs	r2, r3, #1
 800ddce:	bf44      	itt	mi
 800ddd0:	f1c3 0801 	rsbmi	r8, r3, #1
 800ddd4:	2300      	movmi	r3, #0
 800ddd6:	9208      	str	r2, [sp, #32]
 800ddd8:	bf54      	ite	pl
 800ddda:	f04f 0800 	movpl.w	r8, #0
 800ddde:	9308      	strmi	r3, [sp, #32]
 800dde0:	2f00      	cmp	r7, #0
 800dde2:	db39      	blt.n	800de58 <_dtoa_r+0x218>
 800dde4:	9b08      	ldr	r3, [sp, #32]
 800dde6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800dde8:	443b      	add	r3, r7
 800ddea:	9308      	str	r3, [sp, #32]
 800ddec:	2300      	movs	r3, #0
 800ddee:	930a      	str	r3, [sp, #40]	@ 0x28
 800ddf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ddf2:	2b09      	cmp	r3, #9
 800ddf4:	d864      	bhi.n	800dec0 <_dtoa_r+0x280>
 800ddf6:	2b05      	cmp	r3, #5
 800ddf8:	bfc4      	itt	gt
 800ddfa:	3b04      	subgt	r3, #4
 800ddfc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ddfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de00:	f1a3 0302 	sub.w	r3, r3, #2
 800de04:	bfcc      	ite	gt
 800de06:	2400      	movgt	r4, #0
 800de08:	2401      	movle	r4, #1
 800de0a:	2b03      	cmp	r3, #3
 800de0c:	d863      	bhi.n	800ded6 <_dtoa_r+0x296>
 800de0e:	e8df f003 	tbb	[pc, r3]
 800de12:	372a      	.short	0x372a
 800de14:	5535      	.short	0x5535
 800de16:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800de1a:	441e      	add	r6, r3
 800de1c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800de20:	2b20      	cmp	r3, #32
 800de22:	bfc1      	itttt	gt
 800de24:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800de28:	409f      	lslgt	r7, r3
 800de2a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800de2e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800de32:	bfd6      	itet	le
 800de34:	f1c3 0320 	rsble	r3, r3, #32
 800de38:	ea47 0003 	orrgt.w	r0, r7, r3
 800de3c:	fa04 f003 	lslle.w	r0, r4, r3
 800de40:	f7f2 fbe0 	bl	8000604 <__aeabi_ui2d>
 800de44:	2201      	movs	r2, #1
 800de46:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800de4a:	3e01      	subs	r6, #1
 800de4c:	9214      	str	r2, [sp, #80]	@ 0x50
 800de4e:	e777      	b.n	800dd40 <_dtoa_r+0x100>
 800de50:	2301      	movs	r3, #1
 800de52:	e7b8      	b.n	800ddc6 <_dtoa_r+0x186>
 800de54:	9012      	str	r0, [sp, #72]	@ 0x48
 800de56:	e7b7      	b.n	800ddc8 <_dtoa_r+0x188>
 800de58:	427b      	negs	r3, r7
 800de5a:	930a      	str	r3, [sp, #40]	@ 0x28
 800de5c:	2300      	movs	r3, #0
 800de5e:	eba8 0807 	sub.w	r8, r8, r7
 800de62:	930f      	str	r3, [sp, #60]	@ 0x3c
 800de64:	e7c4      	b.n	800ddf0 <_dtoa_r+0x1b0>
 800de66:	2300      	movs	r3, #0
 800de68:	930b      	str	r3, [sp, #44]	@ 0x2c
 800de6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	dc35      	bgt.n	800dedc <_dtoa_r+0x29c>
 800de70:	2301      	movs	r3, #1
 800de72:	9300      	str	r3, [sp, #0]
 800de74:	9307      	str	r3, [sp, #28]
 800de76:	461a      	mov	r2, r3
 800de78:	920e      	str	r2, [sp, #56]	@ 0x38
 800de7a:	e00b      	b.n	800de94 <_dtoa_r+0x254>
 800de7c:	2301      	movs	r3, #1
 800de7e:	e7f3      	b.n	800de68 <_dtoa_r+0x228>
 800de80:	2300      	movs	r3, #0
 800de82:	930b      	str	r3, [sp, #44]	@ 0x2c
 800de84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de86:	18fb      	adds	r3, r7, r3
 800de88:	9300      	str	r3, [sp, #0]
 800de8a:	3301      	adds	r3, #1
 800de8c:	2b01      	cmp	r3, #1
 800de8e:	9307      	str	r3, [sp, #28]
 800de90:	bfb8      	it	lt
 800de92:	2301      	movlt	r3, #1
 800de94:	f8db 001c 	ldr.w	r0, [fp, #28]
 800de98:	2100      	movs	r1, #0
 800de9a:	2204      	movs	r2, #4
 800de9c:	f102 0514 	add.w	r5, r2, #20
 800dea0:	429d      	cmp	r5, r3
 800dea2:	d91f      	bls.n	800dee4 <_dtoa_r+0x2a4>
 800dea4:	6041      	str	r1, [r0, #4]
 800dea6:	4658      	mov	r0, fp
 800dea8:	f000 fd8e 	bl	800e9c8 <_Balloc>
 800deac:	4682      	mov	sl, r0
 800deae:	2800      	cmp	r0, #0
 800deb0:	d13c      	bne.n	800df2c <_dtoa_r+0x2ec>
 800deb2:	4b1b      	ldr	r3, [pc, #108]	@ (800df20 <_dtoa_r+0x2e0>)
 800deb4:	4602      	mov	r2, r0
 800deb6:	f240 11af 	movw	r1, #431	@ 0x1af
 800deba:	e6d8      	b.n	800dc6e <_dtoa_r+0x2e>
 800debc:	2301      	movs	r3, #1
 800debe:	e7e0      	b.n	800de82 <_dtoa_r+0x242>
 800dec0:	2401      	movs	r4, #1
 800dec2:	2300      	movs	r3, #0
 800dec4:	9309      	str	r3, [sp, #36]	@ 0x24
 800dec6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800dec8:	f04f 33ff 	mov.w	r3, #4294967295
 800decc:	9300      	str	r3, [sp, #0]
 800dece:	9307      	str	r3, [sp, #28]
 800ded0:	2200      	movs	r2, #0
 800ded2:	2312      	movs	r3, #18
 800ded4:	e7d0      	b.n	800de78 <_dtoa_r+0x238>
 800ded6:	2301      	movs	r3, #1
 800ded8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800deda:	e7f5      	b.n	800dec8 <_dtoa_r+0x288>
 800dedc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dede:	9300      	str	r3, [sp, #0]
 800dee0:	9307      	str	r3, [sp, #28]
 800dee2:	e7d7      	b.n	800de94 <_dtoa_r+0x254>
 800dee4:	3101      	adds	r1, #1
 800dee6:	0052      	lsls	r2, r2, #1
 800dee8:	e7d8      	b.n	800de9c <_dtoa_r+0x25c>
 800deea:	bf00      	nop
 800deec:	f3af 8000 	nop.w
 800def0:	636f4361 	.word	0x636f4361
 800def4:	3fd287a7 	.word	0x3fd287a7
 800def8:	8b60c8b3 	.word	0x8b60c8b3
 800defc:	3fc68a28 	.word	0x3fc68a28
 800df00:	509f79fb 	.word	0x509f79fb
 800df04:	3fd34413 	.word	0x3fd34413
 800df08:	080246aa 	.word	0x080246aa
 800df0c:	080246c1 	.word	0x080246c1
 800df10:	7ff00000 	.word	0x7ff00000
 800df14:	08024675 	.word	0x08024675
 800df18:	3ff80000 	.word	0x3ff80000
 800df1c:	080247b8 	.word	0x080247b8
 800df20:	08024719 	.word	0x08024719
 800df24:	080246a6 	.word	0x080246a6
 800df28:	08024674 	.word	0x08024674
 800df2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800df30:	6018      	str	r0, [r3, #0]
 800df32:	9b07      	ldr	r3, [sp, #28]
 800df34:	2b0e      	cmp	r3, #14
 800df36:	f200 80a4 	bhi.w	800e082 <_dtoa_r+0x442>
 800df3a:	2c00      	cmp	r4, #0
 800df3c:	f000 80a1 	beq.w	800e082 <_dtoa_r+0x442>
 800df40:	2f00      	cmp	r7, #0
 800df42:	dd33      	ble.n	800dfac <_dtoa_r+0x36c>
 800df44:	4bad      	ldr	r3, [pc, #692]	@ (800e1fc <_dtoa_r+0x5bc>)
 800df46:	f007 020f 	and.w	r2, r7, #15
 800df4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800df4e:	ed93 7b00 	vldr	d7, [r3]
 800df52:	05f8      	lsls	r0, r7, #23
 800df54:	ed8d 7b04 	vstr	d7, [sp, #16]
 800df58:	ea4f 1427 	mov.w	r4, r7, asr #4
 800df5c:	d516      	bpl.n	800df8c <_dtoa_r+0x34c>
 800df5e:	4ba8      	ldr	r3, [pc, #672]	@ (800e200 <_dtoa_r+0x5c0>)
 800df60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800df64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800df68:	f7f2 fcf0 	bl	800094c <__aeabi_ddiv>
 800df6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df70:	f004 040f 	and.w	r4, r4, #15
 800df74:	2603      	movs	r6, #3
 800df76:	4da2      	ldr	r5, [pc, #648]	@ (800e200 <_dtoa_r+0x5c0>)
 800df78:	b954      	cbnz	r4, 800df90 <_dtoa_r+0x350>
 800df7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800df7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df82:	f7f2 fce3 	bl	800094c <__aeabi_ddiv>
 800df86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df8a:	e028      	b.n	800dfde <_dtoa_r+0x39e>
 800df8c:	2602      	movs	r6, #2
 800df8e:	e7f2      	b.n	800df76 <_dtoa_r+0x336>
 800df90:	07e1      	lsls	r1, r4, #31
 800df92:	d508      	bpl.n	800dfa6 <_dtoa_r+0x366>
 800df94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800df98:	e9d5 2300 	ldrd	r2, r3, [r5]
 800df9c:	f7f2 fbac 	bl	80006f8 <__aeabi_dmul>
 800dfa0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dfa4:	3601      	adds	r6, #1
 800dfa6:	1064      	asrs	r4, r4, #1
 800dfa8:	3508      	adds	r5, #8
 800dfaa:	e7e5      	b.n	800df78 <_dtoa_r+0x338>
 800dfac:	f000 80d2 	beq.w	800e154 <_dtoa_r+0x514>
 800dfb0:	427c      	negs	r4, r7
 800dfb2:	4b92      	ldr	r3, [pc, #584]	@ (800e1fc <_dtoa_r+0x5bc>)
 800dfb4:	4d92      	ldr	r5, [pc, #584]	@ (800e200 <_dtoa_r+0x5c0>)
 800dfb6:	f004 020f 	and.w	r2, r4, #15
 800dfba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dfbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfc2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dfc6:	f7f2 fb97 	bl	80006f8 <__aeabi_dmul>
 800dfca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dfce:	1124      	asrs	r4, r4, #4
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	2602      	movs	r6, #2
 800dfd4:	2c00      	cmp	r4, #0
 800dfd6:	f040 80b2 	bne.w	800e13e <_dtoa_r+0x4fe>
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d1d3      	bne.n	800df86 <_dtoa_r+0x346>
 800dfde:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dfe0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	f000 80b7 	beq.w	800e158 <_dtoa_r+0x518>
 800dfea:	4b86      	ldr	r3, [pc, #536]	@ (800e204 <_dtoa_r+0x5c4>)
 800dfec:	2200      	movs	r2, #0
 800dfee:	4620      	mov	r0, r4
 800dff0:	4629      	mov	r1, r5
 800dff2:	f7f2 fdf3 	bl	8000bdc <__aeabi_dcmplt>
 800dff6:	2800      	cmp	r0, #0
 800dff8:	f000 80ae 	beq.w	800e158 <_dtoa_r+0x518>
 800dffc:	9b07      	ldr	r3, [sp, #28]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	f000 80aa 	beq.w	800e158 <_dtoa_r+0x518>
 800e004:	9b00      	ldr	r3, [sp, #0]
 800e006:	2b00      	cmp	r3, #0
 800e008:	dd37      	ble.n	800e07a <_dtoa_r+0x43a>
 800e00a:	1e7b      	subs	r3, r7, #1
 800e00c:	9304      	str	r3, [sp, #16]
 800e00e:	4620      	mov	r0, r4
 800e010:	4b7d      	ldr	r3, [pc, #500]	@ (800e208 <_dtoa_r+0x5c8>)
 800e012:	2200      	movs	r2, #0
 800e014:	4629      	mov	r1, r5
 800e016:	f7f2 fb6f 	bl	80006f8 <__aeabi_dmul>
 800e01a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e01e:	9c00      	ldr	r4, [sp, #0]
 800e020:	3601      	adds	r6, #1
 800e022:	4630      	mov	r0, r6
 800e024:	f7f2 fafe 	bl	8000624 <__aeabi_i2d>
 800e028:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e02c:	f7f2 fb64 	bl	80006f8 <__aeabi_dmul>
 800e030:	4b76      	ldr	r3, [pc, #472]	@ (800e20c <_dtoa_r+0x5cc>)
 800e032:	2200      	movs	r2, #0
 800e034:	f7f2 f9aa 	bl	800038c <__adddf3>
 800e038:	4605      	mov	r5, r0
 800e03a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e03e:	2c00      	cmp	r4, #0
 800e040:	f040 808d 	bne.w	800e15e <_dtoa_r+0x51e>
 800e044:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e048:	4b71      	ldr	r3, [pc, #452]	@ (800e210 <_dtoa_r+0x5d0>)
 800e04a:	2200      	movs	r2, #0
 800e04c:	f7f2 f99c 	bl	8000388 <__aeabi_dsub>
 800e050:	4602      	mov	r2, r0
 800e052:	460b      	mov	r3, r1
 800e054:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e058:	462a      	mov	r2, r5
 800e05a:	4633      	mov	r3, r6
 800e05c:	f7f2 fddc 	bl	8000c18 <__aeabi_dcmpgt>
 800e060:	2800      	cmp	r0, #0
 800e062:	f040 828b 	bne.w	800e57c <_dtoa_r+0x93c>
 800e066:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e06a:	462a      	mov	r2, r5
 800e06c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e070:	f7f2 fdb4 	bl	8000bdc <__aeabi_dcmplt>
 800e074:	2800      	cmp	r0, #0
 800e076:	f040 8128 	bne.w	800e2ca <_dtoa_r+0x68a>
 800e07a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e07e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e082:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e084:	2b00      	cmp	r3, #0
 800e086:	f2c0 815a 	blt.w	800e33e <_dtoa_r+0x6fe>
 800e08a:	2f0e      	cmp	r7, #14
 800e08c:	f300 8157 	bgt.w	800e33e <_dtoa_r+0x6fe>
 800e090:	4b5a      	ldr	r3, [pc, #360]	@ (800e1fc <_dtoa_r+0x5bc>)
 800e092:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e096:	ed93 7b00 	vldr	d7, [r3]
 800e09a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	ed8d 7b00 	vstr	d7, [sp]
 800e0a2:	da03      	bge.n	800e0ac <_dtoa_r+0x46c>
 800e0a4:	9b07      	ldr	r3, [sp, #28]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	f340 8101 	ble.w	800e2ae <_dtoa_r+0x66e>
 800e0ac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e0b0:	4656      	mov	r6, sl
 800e0b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e0b6:	4620      	mov	r0, r4
 800e0b8:	4629      	mov	r1, r5
 800e0ba:	f7f2 fc47 	bl	800094c <__aeabi_ddiv>
 800e0be:	f7f2 fdcb 	bl	8000c58 <__aeabi_d2iz>
 800e0c2:	4680      	mov	r8, r0
 800e0c4:	f7f2 faae 	bl	8000624 <__aeabi_i2d>
 800e0c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e0cc:	f7f2 fb14 	bl	80006f8 <__aeabi_dmul>
 800e0d0:	4602      	mov	r2, r0
 800e0d2:	460b      	mov	r3, r1
 800e0d4:	4620      	mov	r0, r4
 800e0d6:	4629      	mov	r1, r5
 800e0d8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e0dc:	f7f2 f954 	bl	8000388 <__aeabi_dsub>
 800e0e0:	f806 4b01 	strb.w	r4, [r6], #1
 800e0e4:	9d07      	ldr	r5, [sp, #28]
 800e0e6:	eba6 040a 	sub.w	r4, r6, sl
 800e0ea:	42a5      	cmp	r5, r4
 800e0ec:	4602      	mov	r2, r0
 800e0ee:	460b      	mov	r3, r1
 800e0f0:	f040 8117 	bne.w	800e322 <_dtoa_r+0x6e2>
 800e0f4:	f7f2 f94a 	bl	800038c <__adddf3>
 800e0f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e0fc:	4604      	mov	r4, r0
 800e0fe:	460d      	mov	r5, r1
 800e100:	f7f2 fd8a 	bl	8000c18 <__aeabi_dcmpgt>
 800e104:	2800      	cmp	r0, #0
 800e106:	f040 80f9 	bne.w	800e2fc <_dtoa_r+0x6bc>
 800e10a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e10e:	4620      	mov	r0, r4
 800e110:	4629      	mov	r1, r5
 800e112:	f7f2 fd59 	bl	8000bc8 <__aeabi_dcmpeq>
 800e116:	b118      	cbz	r0, 800e120 <_dtoa_r+0x4e0>
 800e118:	f018 0f01 	tst.w	r8, #1
 800e11c:	f040 80ee 	bne.w	800e2fc <_dtoa_r+0x6bc>
 800e120:	4649      	mov	r1, r9
 800e122:	4658      	mov	r0, fp
 800e124:	f000 fc90 	bl	800ea48 <_Bfree>
 800e128:	2300      	movs	r3, #0
 800e12a:	7033      	strb	r3, [r6, #0]
 800e12c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e12e:	3701      	adds	r7, #1
 800e130:	601f      	str	r7, [r3, #0]
 800e132:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e134:	2b00      	cmp	r3, #0
 800e136:	f000 831d 	beq.w	800e774 <_dtoa_r+0xb34>
 800e13a:	601e      	str	r6, [r3, #0]
 800e13c:	e31a      	b.n	800e774 <_dtoa_r+0xb34>
 800e13e:	07e2      	lsls	r2, r4, #31
 800e140:	d505      	bpl.n	800e14e <_dtoa_r+0x50e>
 800e142:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e146:	f7f2 fad7 	bl	80006f8 <__aeabi_dmul>
 800e14a:	3601      	adds	r6, #1
 800e14c:	2301      	movs	r3, #1
 800e14e:	1064      	asrs	r4, r4, #1
 800e150:	3508      	adds	r5, #8
 800e152:	e73f      	b.n	800dfd4 <_dtoa_r+0x394>
 800e154:	2602      	movs	r6, #2
 800e156:	e742      	b.n	800dfde <_dtoa_r+0x39e>
 800e158:	9c07      	ldr	r4, [sp, #28]
 800e15a:	9704      	str	r7, [sp, #16]
 800e15c:	e761      	b.n	800e022 <_dtoa_r+0x3e2>
 800e15e:	4b27      	ldr	r3, [pc, #156]	@ (800e1fc <_dtoa_r+0x5bc>)
 800e160:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e162:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e166:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e16a:	4454      	add	r4, sl
 800e16c:	2900      	cmp	r1, #0
 800e16e:	d053      	beq.n	800e218 <_dtoa_r+0x5d8>
 800e170:	4928      	ldr	r1, [pc, #160]	@ (800e214 <_dtoa_r+0x5d4>)
 800e172:	2000      	movs	r0, #0
 800e174:	f7f2 fbea 	bl	800094c <__aeabi_ddiv>
 800e178:	4633      	mov	r3, r6
 800e17a:	462a      	mov	r2, r5
 800e17c:	f7f2 f904 	bl	8000388 <__aeabi_dsub>
 800e180:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e184:	4656      	mov	r6, sl
 800e186:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e18a:	f7f2 fd65 	bl	8000c58 <__aeabi_d2iz>
 800e18e:	4605      	mov	r5, r0
 800e190:	f7f2 fa48 	bl	8000624 <__aeabi_i2d>
 800e194:	4602      	mov	r2, r0
 800e196:	460b      	mov	r3, r1
 800e198:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e19c:	f7f2 f8f4 	bl	8000388 <__aeabi_dsub>
 800e1a0:	3530      	adds	r5, #48	@ 0x30
 800e1a2:	4602      	mov	r2, r0
 800e1a4:	460b      	mov	r3, r1
 800e1a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e1aa:	f806 5b01 	strb.w	r5, [r6], #1
 800e1ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e1b2:	f7f2 fd13 	bl	8000bdc <__aeabi_dcmplt>
 800e1b6:	2800      	cmp	r0, #0
 800e1b8:	d171      	bne.n	800e29e <_dtoa_r+0x65e>
 800e1ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e1be:	4911      	ldr	r1, [pc, #68]	@ (800e204 <_dtoa_r+0x5c4>)
 800e1c0:	2000      	movs	r0, #0
 800e1c2:	f7f2 f8e1 	bl	8000388 <__aeabi_dsub>
 800e1c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e1ca:	f7f2 fd07 	bl	8000bdc <__aeabi_dcmplt>
 800e1ce:	2800      	cmp	r0, #0
 800e1d0:	f040 8095 	bne.w	800e2fe <_dtoa_r+0x6be>
 800e1d4:	42a6      	cmp	r6, r4
 800e1d6:	f43f af50 	beq.w	800e07a <_dtoa_r+0x43a>
 800e1da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e1de:	4b0a      	ldr	r3, [pc, #40]	@ (800e208 <_dtoa_r+0x5c8>)
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	f7f2 fa89 	bl	80006f8 <__aeabi_dmul>
 800e1e6:	4b08      	ldr	r3, [pc, #32]	@ (800e208 <_dtoa_r+0x5c8>)
 800e1e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e1f2:	f7f2 fa81 	bl	80006f8 <__aeabi_dmul>
 800e1f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e1fa:	e7c4      	b.n	800e186 <_dtoa_r+0x546>
 800e1fc:	080247b8 	.word	0x080247b8
 800e200:	08024790 	.word	0x08024790
 800e204:	3ff00000 	.word	0x3ff00000
 800e208:	40240000 	.word	0x40240000
 800e20c:	401c0000 	.word	0x401c0000
 800e210:	40140000 	.word	0x40140000
 800e214:	3fe00000 	.word	0x3fe00000
 800e218:	4631      	mov	r1, r6
 800e21a:	4628      	mov	r0, r5
 800e21c:	f7f2 fa6c 	bl	80006f8 <__aeabi_dmul>
 800e220:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e224:	9415      	str	r4, [sp, #84]	@ 0x54
 800e226:	4656      	mov	r6, sl
 800e228:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e22c:	f7f2 fd14 	bl	8000c58 <__aeabi_d2iz>
 800e230:	4605      	mov	r5, r0
 800e232:	f7f2 f9f7 	bl	8000624 <__aeabi_i2d>
 800e236:	4602      	mov	r2, r0
 800e238:	460b      	mov	r3, r1
 800e23a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e23e:	f7f2 f8a3 	bl	8000388 <__aeabi_dsub>
 800e242:	3530      	adds	r5, #48	@ 0x30
 800e244:	f806 5b01 	strb.w	r5, [r6], #1
 800e248:	4602      	mov	r2, r0
 800e24a:	460b      	mov	r3, r1
 800e24c:	42a6      	cmp	r6, r4
 800e24e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e252:	f04f 0200 	mov.w	r2, #0
 800e256:	d124      	bne.n	800e2a2 <_dtoa_r+0x662>
 800e258:	4bac      	ldr	r3, [pc, #688]	@ (800e50c <_dtoa_r+0x8cc>)
 800e25a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e25e:	f7f2 f895 	bl	800038c <__adddf3>
 800e262:	4602      	mov	r2, r0
 800e264:	460b      	mov	r3, r1
 800e266:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e26a:	f7f2 fcd5 	bl	8000c18 <__aeabi_dcmpgt>
 800e26e:	2800      	cmp	r0, #0
 800e270:	d145      	bne.n	800e2fe <_dtoa_r+0x6be>
 800e272:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e276:	49a5      	ldr	r1, [pc, #660]	@ (800e50c <_dtoa_r+0x8cc>)
 800e278:	2000      	movs	r0, #0
 800e27a:	f7f2 f885 	bl	8000388 <__aeabi_dsub>
 800e27e:	4602      	mov	r2, r0
 800e280:	460b      	mov	r3, r1
 800e282:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e286:	f7f2 fca9 	bl	8000bdc <__aeabi_dcmplt>
 800e28a:	2800      	cmp	r0, #0
 800e28c:	f43f aef5 	beq.w	800e07a <_dtoa_r+0x43a>
 800e290:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e292:	1e73      	subs	r3, r6, #1
 800e294:	9315      	str	r3, [sp, #84]	@ 0x54
 800e296:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e29a:	2b30      	cmp	r3, #48	@ 0x30
 800e29c:	d0f8      	beq.n	800e290 <_dtoa_r+0x650>
 800e29e:	9f04      	ldr	r7, [sp, #16]
 800e2a0:	e73e      	b.n	800e120 <_dtoa_r+0x4e0>
 800e2a2:	4b9b      	ldr	r3, [pc, #620]	@ (800e510 <_dtoa_r+0x8d0>)
 800e2a4:	f7f2 fa28 	bl	80006f8 <__aeabi_dmul>
 800e2a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e2ac:	e7bc      	b.n	800e228 <_dtoa_r+0x5e8>
 800e2ae:	d10c      	bne.n	800e2ca <_dtoa_r+0x68a>
 800e2b0:	4b98      	ldr	r3, [pc, #608]	@ (800e514 <_dtoa_r+0x8d4>)
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e2b8:	f7f2 fa1e 	bl	80006f8 <__aeabi_dmul>
 800e2bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e2c0:	f7f2 fca0 	bl	8000c04 <__aeabi_dcmpge>
 800e2c4:	2800      	cmp	r0, #0
 800e2c6:	f000 8157 	beq.w	800e578 <_dtoa_r+0x938>
 800e2ca:	2400      	movs	r4, #0
 800e2cc:	4625      	mov	r5, r4
 800e2ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e2d0:	43db      	mvns	r3, r3
 800e2d2:	9304      	str	r3, [sp, #16]
 800e2d4:	4656      	mov	r6, sl
 800e2d6:	2700      	movs	r7, #0
 800e2d8:	4621      	mov	r1, r4
 800e2da:	4658      	mov	r0, fp
 800e2dc:	f000 fbb4 	bl	800ea48 <_Bfree>
 800e2e0:	2d00      	cmp	r5, #0
 800e2e2:	d0dc      	beq.n	800e29e <_dtoa_r+0x65e>
 800e2e4:	b12f      	cbz	r7, 800e2f2 <_dtoa_r+0x6b2>
 800e2e6:	42af      	cmp	r7, r5
 800e2e8:	d003      	beq.n	800e2f2 <_dtoa_r+0x6b2>
 800e2ea:	4639      	mov	r1, r7
 800e2ec:	4658      	mov	r0, fp
 800e2ee:	f000 fbab 	bl	800ea48 <_Bfree>
 800e2f2:	4629      	mov	r1, r5
 800e2f4:	4658      	mov	r0, fp
 800e2f6:	f000 fba7 	bl	800ea48 <_Bfree>
 800e2fa:	e7d0      	b.n	800e29e <_dtoa_r+0x65e>
 800e2fc:	9704      	str	r7, [sp, #16]
 800e2fe:	4633      	mov	r3, r6
 800e300:	461e      	mov	r6, r3
 800e302:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e306:	2a39      	cmp	r2, #57	@ 0x39
 800e308:	d107      	bne.n	800e31a <_dtoa_r+0x6da>
 800e30a:	459a      	cmp	sl, r3
 800e30c:	d1f8      	bne.n	800e300 <_dtoa_r+0x6c0>
 800e30e:	9a04      	ldr	r2, [sp, #16]
 800e310:	3201      	adds	r2, #1
 800e312:	9204      	str	r2, [sp, #16]
 800e314:	2230      	movs	r2, #48	@ 0x30
 800e316:	f88a 2000 	strb.w	r2, [sl]
 800e31a:	781a      	ldrb	r2, [r3, #0]
 800e31c:	3201      	adds	r2, #1
 800e31e:	701a      	strb	r2, [r3, #0]
 800e320:	e7bd      	b.n	800e29e <_dtoa_r+0x65e>
 800e322:	4b7b      	ldr	r3, [pc, #492]	@ (800e510 <_dtoa_r+0x8d0>)
 800e324:	2200      	movs	r2, #0
 800e326:	f7f2 f9e7 	bl	80006f8 <__aeabi_dmul>
 800e32a:	2200      	movs	r2, #0
 800e32c:	2300      	movs	r3, #0
 800e32e:	4604      	mov	r4, r0
 800e330:	460d      	mov	r5, r1
 800e332:	f7f2 fc49 	bl	8000bc8 <__aeabi_dcmpeq>
 800e336:	2800      	cmp	r0, #0
 800e338:	f43f aebb 	beq.w	800e0b2 <_dtoa_r+0x472>
 800e33c:	e6f0      	b.n	800e120 <_dtoa_r+0x4e0>
 800e33e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e340:	2a00      	cmp	r2, #0
 800e342:	f000 80db 	beq.w	800e4fc <_dtoa_r+0x8bc>
 800e346:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e348:	2a01      	cmp	r2, #1
 800e34a:	f300 80bf 	bgt.w	800e4cc <_dtoa_r+0x88c>
 800e34e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e350:	2a00      	cmp	r2, #0
 800e352:	f000 80b7 	beq.w	800e4c4 <_dtoa_r+0x884>
 800e356:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e35a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e35c:	4646      	mov	r6, r8
 800e35e:	9a08      	ldr	r2, [sp, #32]
 800e360:	2101      	movs	r1, #1
 800e362:	441a      	add	r2, r3
 800e364:	4658      	mov	r0, fp
 800e366:	4498      	add	r8, r3
 800e368:	9208      	str	r2, [sp, #32]
 800e36a:	f000 fc6b 	bl	800ec44 <__i2b>
 800e36e:	4605      	mov	r5, r0
 800e370:	b15e      	cbz	r6, 800e38a <_dtoa_r+0x74a>
 800e372:	9b08      	ldr	r3, [sp, #32]
 800e374:	2b00      	cmp	r3, #0
 800e376:	dd08      	ble.n	800e38a <_dtoa_r+0x74a>
 800e378:	42b3      	cmp	r3, r6
 800e37a:	9a08      	ldr	r2, [sp, #32]
 800e37c:	bfa8      	it	ge
 800e37e:	4633      	movge	r3, r6
 800e380:	eba8 0803 	sub.w	r8, r8, r3
 800e384:	1af6      	subs	r6, r6, r3
 800e386:	1ad3      	subs	r3, r2, r3
 800e388:	9308      	str	r3, [sp, #32]
 800e38a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e38c:	b1f3      	cbz	r3, 800e3cc <_dtoa_r+0x78c>
 800e38e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e390:	2b00      	cmp	r3, #0
 800e392:	f000 80b7 	beq.w	800e504 <_dtoa_r+0x8c4>
 800e396:	b18c      	cbz	r4, 800e3bc <_dtoa_r+0x77c>
 800e398:	4629      	mov	r1, r5
 800e39a:	4622      	mov	r2, r4
 800e39c:	4658      	mov	r0, fp
 800e39e:	f000 fd11 	bl	800edc4 <__pow5mult>
 800e3a2:	464a      	mov	r2, r9
 800e3a4:	4601      	mov	r1, r0
 800e3a6:	4605      	mov	r5, r0
 800e3a8:	4658      	mov	r0, fp
 800e3aa:	f000 fc61 	bl	800ec70 <__multiply>
 800e3ae:	4649      	mov	r1, r9
 800e3b0:	9004      	str	r0, [sp, #16]
 800e3b2:	4658      	mov	r0, fp
 800e3b4:	f000 fb48 	bl	800ea48 <_Bfree>
 800e3b8:	9b04      	ldr	r3, [sp, #16]
 800e3ba:	4699      	mov	r9, r3
 800e3bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e3be:	1b1a      	subs	r2, r3, r4
 800e3c0:	d004      	beq.n	800e3cc <_dtoa_r+0x78c>
 800e3c2:	4649      	mov	r1, r9
 800e3c4:	4658      	mov	r0, fp
 800e3c6:	f000 fcfd 	bl	800edc4 <__pow5mult>
 800e3ca:	4681      	mov	r9, r0
 800e3cc:	2101      	movs	r1, #1
 800e3ce:	4658      	mov	r0, fp
 800e3d0:	f000 fc38 	bl	800ec44 <__i2b>
 800e3d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e3d6:	4604      	mov	r4, r0
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	f000 81cf 	beq.w	800e77c <_dtoa_r+0xb3c>
 800e3de:	461a      	mov	r2, r3
 800e3e0:	4601      	mov	r1, r0
 800e3e2:	4658      	mov	r0, fp
 800e3e4:	f000 fcee 	bl	800edc4 <__pow5mult>
 800e3e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3ea:	2b01      	cmp	r3, #1
 800e3ec:	4604      	mov	r4, r0
 800e3ee:	f300 8095 	bgt.w	800e51c <_dtoa_r+0x8dc>
 800e3f2:	9b02      	ldr	r3, [sp, #8]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	f040 8087 	bne.w	800e508 <_dtoa_r+0x8c8>
 800e3fa:	9b03      	ldr	r3, [sp, #12]
 800e3fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e400:	2b00      	cmp	r3, #0
 800e402:	f040 8089 	bne.w	800e518 <_dtoa_r+0x8d8>
 800e406:	9b03      	ldr	r3, [sp, #12]
 800e408:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e40c:	0d1b      	lsrs	r3, r3, #20
 800e40e:	051b      	lsls	r3, r3, #20
 800e410:	b12b      	cbz	r3, 800e41e <_dtoa_r+0x7de>
 800e412:	9b08      	ldr	r3, [sp, #32]
 800e414:	3301      	adds	r3, #1
 800e416:	9308      	str	r3, [sp, #32]
 800e418:	f108 0801 	add.w	r8, r8, #1
 800e41c:	2301      	movs	r3, #1
 800e41e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e420:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e422:	2b00      	cmp	r3, #0
 800e424:	f000 81b0 	beq.w	800e788 <_dtoa_r+0xb48>
 800e428:	6923      	ldr	r3, [r4, #16]
 800e42a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e42e:	6918      	ldr	r0, [r3, #16]
 800e430:	f000 fbbc 	bl	800ebac <__hi0bits>
 800e434:	f1c0 0020 	rsb	r0, r0, #32
 800e438:	9b08      	ldr	r3, [sp, #32]
 800e43a:	4418      	add	r0, r3
 800e43c:	f010 001f 	ands.w	r0, r0, #31
 800e440:	d077      	beq.n	800e532 <_dtoa_r+0x8f2>
 800e442:	f1c0 0320 	rsb	r3, r0, #32
 800e446:	2b04      	cmp	r3, #4
 800e448:	dd6b      	ble.n	800e522 <_dtoa_r+0x8e2>
 800e44a:	9b08      	ldr	r3, [sp, #32]
 800e44c:	f1c0 001c 	rsb	r0, r0, #28
 800e450:	4403      	add	r3, r0
 800e452:	4480      	add	r8, r0
 800e454:	4406      	add	r6, r0
 800e456:	9308      	str	r3, [sp, #32]
 800e458:	f1b8 0f00 	cmp.w	r8, #0
 800e45c:	dd05      	ble.n	800e46a <_dtoa_r+0x82a>
 800e45e:	4649      	mov	r1, r9
 800e460:	4642      	mov	r2, r8
 800e462:	4658      	mov	r0, fp
 800e464:	f000 fd08 	bl	800ee78 <__lshift>
 800e468:	4681      	mov	r9, r0
 800e46a:	9b08      	ldr	r3, [sp, #32]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	dd05      	ble.n	800e47c <_dtoa_r+0x83c>
 800e470:	4621      	mov	r1, r4
 800e472:	461a      	mov	r2, r3
 800e474:	4658      	mov	r0, fp
 800e476:	f000 fcff 	bl	800ee78 <__lshift>
 800e47a:	4604      	mov	r4, r0
 800e47c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d059      	beq.n	800e536 <_dtoa_r+0x8f6>
 800e482:	4621      	mov	r1, r4
 800e484:	4648      	mov	r0, r9
 800e486:	f000 fd63 	bl	800ef50 <__mcmp>
 800e48a:	2800      	cmp	r0, #0
 800e48c:	da53      	bge.n	800e536 <_dtoa_r+0x8f6>
 800e48e:	1e7b      	subs	r3, r7, #1
 800e490:	9304      	str	r3, [sp, #16]
 800e492:	4649      	mov	r1, r9
 800e494:	2300      	movs	r3, #0
 800e496:	220a      	movs	r2, #10
 800e498:	4658      	mov	r0, fp
 800e49a:	f000 faf7 	bl	800ea8c <__multadd>
 800e49e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e4a0:	4681      	mov	r9, r0
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	f000 8172 	beq.w	800e78c <_dtoa_r+0xb4c>
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	4629      	mov	r1, r5
 800e4ac:	220a      	movs	r2, #10
 800e4ae:	4658      	mov	r0, fp
 800e4b0:	f000 faec 	bl	800ea8c <__multadd>
 800e4b4:	9b00      	ldr	r3, [sp, #0]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	4605      	mov	r5, r0
 800e4ba:	dc67      	bgt.n	800e58c <_dtoa_r+0x94c>
 800e4bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4be:	2b02      	cmp	r3, #2
 800e4c0:	dc41      	bgt.n	800e546 <_dtoa_r+0x906>
 800e4c2:	e063      	b.n	800e58c <_dtoa_r+0x94c>
 800e4c4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e4c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e4ca:	e746      	b.n	800e35a <_dtoa_r+0x71a>
 800e4cc:	9b07      	ldr	r3, [sp, #28]
 800e4ce:	1e5c      	subs	r4, r3, #1
 800e4d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e4d2:	42a3      	cmp	r3, r4
 800e4d4:	bfbf      	itttt	lt
 800e4d6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e4d8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800e4da:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e4dc:	1ae3      	sublt	r3, r4, r3
 800e4de:	bfb4      	ite	lt
 800e4e0:	18d2      	addlt	r2, r2, r3
 800e4e2:	1b1c      	subge	r4, r3, r4
 800e4e4:	9b07      	ldr	r3, [sp, #28]
 800e4e6:	bfbc      	itt	lt
 800e4e8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800e4ea:	2400      	movlt	r4, #0
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	bfb5      	itete	lt
 800e4f0:	eba8 0603 	sublt.w	r6, r8, r3
 800e4f4:	9b07      	ldrge	r3, [sp, #28]
 800e4f6:	2300      	movlt	r3, #0
 800e4f8:	4646      	movge	r6, r8
 800e4fa:	e730      	b.n	800e35e <_dtoa_r+0x71e>
 800e4fc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e4fe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e500:	4646      	mov	r6, r8
 800e502:	e735      	b.n	800e370 <_dtoa_r+0x730>
 800e504:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e506:	e75c      	b.n	800e3c2 <_dtoa_r+0x782>
 800e508:	2300      	movs	r3, #0
 800e50a:	e788      	b.n	800e41e <_dtoa_r+0x7de>
 800e50c:	3fe00000 	.word	0x3fe00000
 800e510:	40240000 	.word	0x40240000
 800e514:	40140000 	.word	0x40140000
 800e518:	9b02      	ldr	r3, [sp, #8]
 800e51a:	e780      	b.n	800e41e <_dtoa_r+0x7de>
 800e51c:	2300      	movs	r3, #0
 800e51e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e520:	e782      	b.n	800e428 <_dtoa_r+0x7e8>
 800e522:	d099      	beq.n	800e458 <_dtoa_r+0x818>
 800e524:	9a08      	ldr	r2, [sp, #32]
 800e526:	331c      	adds	r3, #28
 800e528:	441a      	add	r2, r3
 800e52a:	4498      	add	r8, r3
 800e52c:	441e      	add	r6, r3
 800e52e:	9208      	str	r2, [sp, #32]
 800e530:	e792      	b.n	800e458 <_dtoa_r+0x818>
 800e532:	4603      	mov	r3, r0
 800e534:	e7f6      	b.n	800e524 <_dtoa_r+0x8e4>
 800e536:	9b07      	ldr	r3, [sp, #28]
 800e538:	9704      	str	r7, [sp, #16]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	dc20      	bgt.n	800e580 <_dtoa_r+0x940>
 800e53e:	9300      	str	r3, [sp, #0]
 800e540:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e542:	2b02      	cmp	r3, #2
 800e544:	dd1e      	ble.n	800e584 <_dtoa_r+0x944>
 800e546:	9b00      	ldr	r3, [sp, #0]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	f47f aec0 	bne.w	800e2ce <_dtoa_r+0x68e>
 800e54e:	4621      	mov	r1, r4
 800e550:	2205      	movs	r2, #5
 800e552:	4658      	mov	r0, fp
 800e554:	f000 fa9a 	bl	800ea8c <__multadd>
 800e558:	4601      	mov	r1, r0
 800e55a:	4604      	mov	r4, r0
 800e55c:	4648      	mov	r0, r9
 800e55e:	f000 fcf7 	bl	800ef50 <__mcmp>
 800e562:	2800      	cmp	r0, #0
 800e564:	f77f aeb3 	ble.w	800e2ce <_dtoa_r+0x68e>
 800e568:	4656      	mov	r6, sl
 800e56a:	2331      	movs	r3, #49	@ 0x31
 800e56c:	f806 3b01 	strb.w	r3, [r6], #1
 800e570:	9b04      	ldr	r3, [sp, #16]
 800e572:	3301      	adds	r3, #1
 800e574:	9304      	str	r3, [sp, #16]
 800e576:	e6ae      	b.n	800e2d6 <_dtoa_r+0x696>
 800e578:	9c07      	ldr	r4, [sp, #28]
 800e57a:	9704      	str	r7, [sp, #16]
 800e57c:	4625      	mov	r5, r4
 800e57e:	e7f3      	b.n	800e568 <_dtoa_r+0x928>
 800e580:	9b07      	ldr	r3, [sp, #28]
 800e582:	9300      	str	r3, [sp, #0]
 800e584:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e586:	2b00      	cmp	r3, #0
 800e588:	f000 8104 	beq.w	800e794 <_dtoa_r+0xb54>
 800e58c:	2e00      	cmp	r6, #0
 800e58e:	dd05      	ble.n	800e59c <_dtoa_r+0x95c>
 800e590:	4629      	mov	r1, r5
 800e592:	4632      	mov	r2, r6
 800e594:	4658      	mov	r0, fp
 800e596:	f000 fc6f 	bl	800ee78 <__lshift>
 800e59a:	4605      	mov	r5, r0
 800e59c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d05a      	beq.n	800e658 <_dtoa_r+0xa18>
 800e5a2:	6869      	ldr	r1, [r5, #4]
 800e5a4:	4658      	mov	r0, fp
 800e5a6:	f000 fa0f 	bl	800e9c8 <_Balloc>
 800e5aa:	4606      	mov	r6, r0
 800e5ac:	b928      	cbnz	r0, 800e5ba <_dtoa_r+0x97a>
 800e5ae:	4b84      	ldr	r3, [pc, #528]	@ (800e7c0 <_dtoa_r+0xb80>)
 800e5b0:	4602      	mov	r2, r0
 800e5b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e5b6:	f7ff bb5a 	b.w	800dc6e <_dtoa_r+0x2e>
 800e5ba:	692a      	ldr	r2, [r5, #16]
 800e5bc:	3202      	adds	r2, #2
 800e5be:	0092      	lsls	r2, r2, #2
 800e5c0:	f105 010c 	add.w	r1, r5, #12
 800e5c4:	300c      	adds	r0, #12
 800e5c6:	f002 f93b 	bl	8010840 <memcpy>
 800e5ca:	2201      	movs	r2, #1
 800e5cc:	4631      	mov	r1, r6
 800e5ce:	4658      	mov	r0, fp
 800e5d0:	f000 fc52 	bl	800ee78 <__lshift>
 800e5d4:	f10a 0301 	add.w	r3, sl, #1
 800e5d8:	9307      	str	r3, [sp, #28]
 800e5da:	9b00      	ldr	r3, [sp, #0]
 800e5dc:	4453      	add	r3, sl
 800e5de:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e5e0:	9b02      	ldr	r3, [sp, #8]
 800e5e2:	f003 0301 	and.w	r3, r3, #1
 800e5e6:	462f      	mov	r7, r5
 800e5e8:	930a      	str	r3, [sp, #40]	@ 0x28
 800e5ea:	4605      	mov	r5, r0
 800e5ec:	9b07      	ldr	r3, [sp, #28]
 800e5ee:	4621      	mov	r1, r4
 800e5f0:	3b01      	subs	r3, #1
 800e5f2:	4648      	mov	r0, r9
 800e5f4:	9300      	str	r3, [sp, #0]
 800e5f6:	f7ff fa9b 	bl	800db30 <quorem>
 800e5fa:	4639      	mov	r1, r7
 800e5fc:	9002      	str	r0, [sp, #8]
 800e5fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e602:	4648      	mov	r0, r9
 800e604:	f000 fca4 	bl	800ef50 <__mcmp>
 800e608:	462a      	mov	r2, r5
 800e60a:	9008      	str	r0, [sp, #32]
 800e60c:	4621      	mov	r1, r4
 800e60e:	4658      	mov	r0, fp
 800e610:	f000 fcba 	bl	800ef88 <__mdiff>
 800e614:	68c2      	ldr	r2, [r0, #12]
 800e616:	4606      	mov	r6, r0
 800e618:	bb02      	cbnz	r2, 800e65c <_dtoa_r+0xa1c>
 800e61a:	4601      	mov	r1, r0
 800e61c:	4648      	mov	r0, r9
 800e61e:	f000 fc97 	bl	800ef50 <__mcmp>
 800e622:	4602      	mov	r2, r0
 800e624:	4631      	mov	r1, r6
 800e626:	4658      	mov	r0, fp
 800e628:	920e      	str	r2, [sp, #56]	@ 0x38
 800e62a:	f000 fa0d 	bl	800ea48 <_Bfree>
 800e62e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e630:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e632:	9e07      	ldr	r6, [sp, #28]
 800e634:	ea43 0102 	orr.w	r1, r3, r2
 800e638:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e63a:	4319      	orrs	r1, r3
 800e63c:	d110      	bne.n	800e660 <_dtoa_r+0xa20>
 800e63e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e642:	d029      	beq.n	800e698 <_dtoa_r+0xa58>
 800e644:	9b08      	ldr	r3, [sp, #32]
 800e646:	2b00      	cmp	r3, #0
 800e648:	dd02      	ble.n	800e650 <_dtoa_r+0xa10>
 800e64a:	9b02      	ldr	r3, [sp, #8]
 800e64c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800e650:	9b00      	ldr	r3, [sp, #0]
 800e652:	f883 8000 	strb.w	r8, [r3]
 800e656:	e63f      	b.n	800e2d8 <_dtoa_r+0x698>
 800e658:	4628      	mov	r0, r5
 800e65a:	e7bb      	b.n	800e5d4 <_dtoa_r+0x994>
 800e65c:	2201      	movs	r2, #1
 800e65e:	e7e1      	b.n	800e624 <_dtoa_r+0x9e4>
 800e660:	9b08      	ldr	r3, [sp, #32]
 800e662:	2b00      	cmp	r3, #0
 800e664:	db04      	blt.n	800e670 <_dtoa_r+0xa30>
 800e666:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e668:	430b      	orrs	r3, r1
 800e66a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e66c:	430b      	orrs	r3, r1
 800e66e:	d120      	bne.n	800e6b2 <_dtoa_r+0xa72>
 800e670:	2a00      	cmp	r2, #0
 800e672:	dded      	ble.n	800e650 <_dtoa_r+0xa10>
 800e674:	4649      	mov	r1, r9
 800e676:	2201      	movs	r2, #1
 800e678:	4658      	mov	r0, fp
 800e67a:	f000 fbfd 	bl	800ee78 <__lshift>
 800e67e:	4621      	mov	r1, r4
 800e680:	4681      	mov	r9, r0
 800e682:	f000 fc65 	bl	800ef50 <__mcmp>
 800e686:	2800      	cmp	r0, #0
 800e688:	dc03      	bgt.n	800e692 <_dtoa_r+0xa52>
 800e68a:	d1e1      	bne.n	800e650 <_dtoa_r+0xa10>
 800e68c:	f018 0f01 	tst.w	r8, #1
 800e690:	d0de      	beq.n	800e650 <_dtoa_r+0xa10>
 800e692:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e696:	d1d8      	bne.n	800e64a <_dtoa_r+0xa0a>
 800e698:	9a00      	ldr	r2, [sp, #0]
 800e69a:	2339      	movs	r3, #57	@ 0x39
 800e69c:	7013      	strb	r3, [r2, #0]
 800e69e:	4633      	mov	r3, r6
 800e6a0:	461e      	mov	r6, r3
 800e6a2:	3b01      	subs	r3, #1
 800e6a4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e6a8:	2a39      	cmp	r2, #57	@ 0x39
 800e6aa:	d052      	beq.n	800e752 <_dtoa_r+0xb12>
 800e6ac:	3201      	adds	r2, #1
 800e6ae:	701a      	strb	r2, [r3, #0]
 800e6b0:	e612      	b.n	800e2d8 <_dtoa_r+0x698>
 800e6b2:	2a00      	cmp	r2, #0
 800e6b4:	dd07      	ble.n	800e6c6 <_dtoa_r+0xa86>
 800e6b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e6ba:	d0ed      	beq.n	800e698 <_dtoa_r+0xa58>
 800e6bc:	9a00      	ldr	r2, [sp, #0]
 800e6be:	f108 0301 	add.w	r3, r8, #1
 800e6c2:	7013      	strb	r3, [r2, #0]
 800e6c4:	e608      	b.n	800e2d8 <_dtoa_r+0x698>
 800e6c6:	9b07      	ldr	r3, [sp, #28]
 800e6c8:	9a07      	ldr	r2, [sp, #28]
 800e6ca:	f803 8c01 	strb.w	r8, [r3, #-1]
 800e6ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e6d0:	4293      	cmp	r3, r2
 800e6d2:	d028      	beq.n	800e726 <_dtoa_r+0xae6>
 800e6d4:	4649      	mov	r1, r9
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	220a      	movs	r2, #10
 800e6da:	4658      	mov	r0, fp
 800e6dc:	f000 f9d6 	bl	800ea8c <__multadd>
 800e6e0:	42af      	cmp	r7, r5
 800e6e2:	4681      	mov	r9, r0
 800e6e4:	f04f 0300 	mov.w	r3, #0
 800e6e8:	f04f 020a 	mov.w	r2, #10
 800e6ec:	4639      	mov	r1, r7
 800e6ee:	4658      	mov	r0, fp
 800e6f0:	d107      	bne.n	800e702 <_dtoa_r+0xac2>
 800e6f2:	f000 f9cb 	bl	800ea8c <__multadd>
 800e6f6:	4607      	mov	r7, r0
 800e6f8:	4605      	mov	r5, r0
 800e6fa:	9b07      	ldr	r3, [sp, #28]
 800e6fc:	3301      	adds	r3, #1
 800e6fe:	9307      	str	r3, [sp, #28]
 800e700:	e774      	b.n	800e5ec <_dtoa_r+0x9ac>
 800e702:	f000 f9c3 	bl	800ea8c <__multadd>
 800e706:	4629      	mov	r1, r5
 800e708:	4607      	mov	r7, r0
 800e70a:	2300      	movs	r3, #0
 800e70c:	220a      	movs	r2, #10
 800e70e:	4658      	mov	r0, fp
 800e710:	f000 f9bc 	bl	800ea8c <__multadd>
 800e714:	4605      	mov	r5, r0
 800e716:	e7f0      	b.n	800e6fa <_dtoa_r+0xaba>
 800e718:	9b00      	ldr	r3, [sp, #0]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	bfcc      	ite	gt
 800e71e:	461e      	movgt	r6, r3
 800e720:	2601      	movle	r6, #1
 800e722:	4456      	add	r6, sl
 800e724:	2700      	movs	r7, #0
 800e726:	4649      	mov	r1, r9
 800e728:	2201      	movs	r2, #1
 800e72a:	4658      	mov	r0, fp
 800e72c:	f000 fba4 	bl	800ee78 <__lshift>
 800e730:	4621      	mov	r1, r4
 800e732:	4681      	mov	r9, r0
 800e734:	f000 fc0c 	bl	800ef50 <__mcmp>
 800e738:	2800      	cmp	r0, #0
 800e73a:	dcb0      	bgt.n	800e69e <_dtoa_r+0xa5e>
 800e73c:	d102      	bne.n	800e744 <_dtoa_r+0xb04>
 800e73e:	f018 0f01 	tst.w	r8, #1
 800e742:	d1ac      	bne.n	800e69e <_dtoa_r+0xa5e>
 800e744:	4633      	mov	r3, r6
 800e746:	461e      	mov	r6, r3
 800e748:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e74c:	2a30      	cmp	r2, #48	@ 0x30
 800e74e:	d0fa      	beq.n	800e746 <_dtoa_r+0xb06>
 800e750:	e5c2      	b.n	800e2d8 <_dtoa_r+0x698>
 800e752:	459a      	cmp	sl, r3
 800e754:	d1a4      	bne.n	800e6a0 <_dtoa_r+0xa60>
 800e756:	9b04      	ldr	r3, [sp, #16]
 800e758:	3301      	adds	r3, #1
 800e75a:	9304      	str	r3, [sp, #16]
 800e75c:	2331      	movs	r3, #49	@ 0x31
 800e75e:	f88a 3000 	strb.w	r3, [sl]
 800e762:	e5b9      	b.n	800e2d8 <_dtoa_r+0x698>
 800e764:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e766:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800e7c4 <_dtoa_r+0xb84>
 800e76a:	b11b      	cbz	r3, 800e774 <_dtoa_r+0xb34>
 800e76c:	f10a 0308 	add.w	r3, sl, #8
 800e770:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e772:	6013      	str	r3, [r2, #0]
 800e774:	4650      	mov	r0, sl
 800e776:	b019      	add	sp, #100	@ 0x64
 800e778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e77c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e77e:	2b01      	cmp	r3, #1
 800e780:	f77f ae37 	ble.w	800e3f2 <_dtoa_r+0x7b2>
 800e784:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e786:	930a      	str	r3, [sp, #40]	@ 0x28
 800e788:	2001      	movs	r0, #1
 800e78a:	e655      	b.n	800e438 <_dtoa_r+0x7f8>
 800e78c:	9b00      	ldr	r3, [sp, #0]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	f77f aed6 	ble.w	800e540 <_dtoa_r+0x900>
 800e794:	4656      	mov	r6, sl
 800e796:	4621      	mov	r1, r4
 800e798:	4648      	mov	r0, r9
 800e79a:	f7ff f9c9 	bl	800db30 <quorem>
 800e79e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e7a2:	f806 8b01 	strb.w	r8, [r6], #1
 800e7a6:	9b00      	ldr	r3, [sp, #0]
 800e7a8:	eba6 020a 	sub.w	r2, r6, sl
 800e7ac:	4293      	cmp	r3, r2
 800e7ae:	ddb3      	ble.n	800e718 <_dtoa_r+0xad8>
 800e7b0:	4649      	mov	r1, r9
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	220a      	movs	r2, #10
 800e7b6:	4658      	mov	r0, fp
 800e7b8:	f000 f968 	bl	800ea8c <__multadd>
 800e7bc:	4681      	mov	r9, r0
 800e7be:	e7ea      	b.n	800e796 <_dtoa_r+0xb56>
 800e7c0:	08024719 	.word	0x08024719
 800e7c4:	0802469d 	.word	0x0802469d

0800e7c8 <_free_r>:
 800e7c8:	b538      	push	{r3, r4, r5, lr}
 800e7ca:	4605      	mov	r5, r0
 800e7cc:	2900      	cmp	r1, #0
 800e7ce:	d041      	beq.n	800e854 <_free_r+0x8c>
 800e7d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e7d4:	1f0c      	subs	r4, r1, #4
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	bfb8      	it	lt
 800e7da:	18e4      	addlt	r4, r4, r3
 800e7dc:	f000 f8e8 	bl	800e9b0 <__malloc_lock>
 800e7e0:	4a1d      	ldr	r2, [pc, #116]	@ (800e858 <_free_r+0x90>)
 800e7e2:	6813      	ldr	r3, [r2, #0]
 800e7e4:	b933      	cbnz	r3, 800e7f4 <_free_r+0x2c>
 800e7e6:	6063      	str	r3, [r4, #4]
 800e7e8:	6014      	str	r4, [r2, #0]
 800e7ea:	4628      	mov	r0, r5
 800e7ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e7f0:	f000 b8e4 	b.w	800e9bc <__malloc_unlock>
 800e7f4:	42a3      	cmp	r3, r4
 800e7f6:	d908      	bls.n	800e80a <_free_r+0x42>
 800e7f8:	6820      	ldr	r0, [r4, #0]
 800e7fa:	1821      	adds	r1, r4, r0
 800e7fc:	428b      	cmp	r3, r1
 800e7fe:	bf01      	itttt	eq
 800e800:	6819      	ldreq	r1, [r3, #0]
 800e802:	685b      	ldreq	r3, [r3, #4]
 800e804:	1809      	addeq	r1, r1, r0
 800e806:	6021      	streq	r1, [r4, #0]
 800e808:	e7ed      	b.n	800e7e6 <_free_r+0x1e>
 800e80a:	461a      	mov	r2, r3
 800e80c:	685b      	ldr	r3, [r3, #4]
 800e80e:	b10b      	cbz	r3, 800e814 <_free_r+0x4c>
 800e810:	42a3      	cmp	r3, r4
 800e812:	d9fa      	bls.n	800e80a <_free_r+0x42>
 800e814:	6811      	ldr	r1, [r2, #0]
 800e816:	1850      	adds	r0, r2, r1
 800e818:	42a0      	cmp	r0, r4
 800e81a:	d10b      	bne.n	800e834 <_free_r+0x6c>
 800e81c:	6820      	ldr	r0, [r4, #0]
 800e81e:	4401      	add	r1, r0
 800e820:	1850      	adds	r0, r2, r1
 800e822:	4283      	cmp	r3, r0
 800e824:	6011      	str	r1, [r2, #0]
 800e826:	d1e0      	bne.n	800e7ea <_free_r+0x22>
 800e828:	6818      	ldr	r0, [r3, #0]
 800e82a:	685b      	ldr	r3, [r3, #4]
 800e82c:	6053      	str	r3, [r2, #4]
 800e82e:	4408      	add	r0, r1
 800e830:	6010      	str	r0, [r2, #0]
 800e832:	e7da      	b.n	800e7ea <_free_r+0x22>
 800e834:	d902      	bls.n	800e83c <_free_r+0x74>
 800e836:	230c      	movs	r3, #12
 800e838:	602b      	str	r3, [r5, #0]
 800e83a:	e7d6      	b.n	800e7ea <_free_r+0x22>
 800e83c:	6820      	ldr	r0, [r4, #0]
 800e83e:	1821      	adds	r1, r4, r0
 800e840:	428b      	cmp	r3, r1
 800e842:	bf04      	itt	eq
 800e844:	6819      	ldreq	r1, [r3, #0]
 800e846:	685b      	ldreq	r3, [r3, #4]
 800e848:	6063      	str	r3, [r4, #4]
 800e84a:	bf04      	itt	eq
 800e84c:	1809      	addeq	r1, r1, r0
 800e84e:	6021      	streq	r1, [r4, #0]
 800e850:	6054      	str	r4, [r2, #4]
 800e852:	e7ca      	b.n	800e7ea <_free_r+0x22>
 800e854:	bd38      	pop	{r3, r4, r5, pc}
 800e856:	bf00      	nop
 800e858:	200029a8 	.word	0x200029a8

0800e85c <malloc>:
 800e85c:	4b02      	ldr	r3, [pc, #8]	@ (800e868 <malloc+0xc>)
 800e85e:	4601      	mov	r1, r0
 800e860:	6818      	ldr	r0, [r3, #0]
 800e862:	f000 b825 	b.w	800e8b0 <_malloc_r>
 800e866:	bf00      	nop
 800e868:	20000118 	.word	0x20000118

0800e86c <sbrk_aligned>:
 800e86c:	b570      	push	{r4, r5, r6, lr}
 800e86e:	4e0f      	ldr	r6, [pc, #60]	@ (800e8ac <sbrk_aligned+0x40>)
 800e870:	460c      	mov	r4, r1
 800e872:	6831      	ldr	r1, [r6, #0]
 800e874:	4605      	mov	r5, r0
 800e876:	b911      	cbnz	r1, 800e87e <sbrk_aligned+0x12>
 800e878:	f001 ffd2 	bl	8010820 <_sbrk_r>
 800e87c:	6030      	str	r0, [r6, #0]
 800e87e:	4621      	mov	r1, r4
 800e880:	4628      	mov	r0, r5
 800e882:	f001 ffcd 	bl	8010820 <_sbrk_r>
 800e886:	1c43      	adds	r3, r0, #1
 800e888:	d103      	bne.n	800e892 <sbrk_aligned+0x26>
 800e88a:	f04f 34ff 	mov.w	r4, #4294967295
 800e88e:	4620      	mov	r0, r4
 800e890:	bd70      	pop	{r4, r5, r6, pc}
 800e892:	1cc4      	adds	r4, r0, #3
 800e894:	f024 0403 	bic.w	r4, r4, #3
 800e898:	42a0      	cmp	r0, r4
 800e89a:	d0f8      	beq.n	800e88e <sbrk_aligned+0x22>
 800e89c:	1a21      	subs	r1, r4, r0
 800e89e:	4628      	mov	r0, r5
 800e8a0:	f001 ffbe 	bl	8010820 <_sbrk_r>
 800e8a4:	3001      	adds	r0, #1
 800e8a6:	d1f2      	bne.n	800e88e <sbrk_aligned+0x22>
 800e8a8:	e7ef      	b.n	800e88a <sbrk_aligned+0x1e>
 800e8aa:	bf00      	nop
 800e8ac:	200029a4 	.word	0x200029a4

0800e8b0 <_malloc_r>:
 800e8b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8b4:	1ccd      	adds	r5, r1, #3
 800e8b6:	f025 0503 	bic.w	r5, r5, #3
 800e8ba:	3508      	adds	r5, #8
 800e8bc:	2d0c      	cmp	r5, #12
 800e8be:	bf38      	it	cc
 800e8c0:	250c      	movcc	r5, #12
 800e8c2:	2d00      	cmp	r5, #0
 800e8c4:	4606      	mov	r6, r0
 800e8c6:	db01      	blt.n	800e8cc <_malloc_r+0x1c>
 800e8c8:	42a9      	cmp	r1, r5
 800e8ca:	d904      	bls.n	800e8d6 <_malloc_r+0x26>
 800e8cc:	230c      	movs	r3, #12
 800e8ce:	6033      	str	r3, [r6, #0]
 800e8d0:	2000      	movs	r0, #0
 800e8d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e9ac <_malloc_r+0xfc>
 800e8da:	f000 f869 	bl	800e9b0 <__malloc_lock>
 800e8de:	f8d8 3000 	ldr.w	r3, [r8]
 800e8e2:	461c      	mov	r4, r3
 800e8e4:	bb44      	cbnz	r4, 800e938 <_malloc_r+0x88>
 800e8e6:	4629      	mov	r1, r5
 800e8e8:	4630      	mov	r0, r6
 800e8ea:	f7ff ffbf 	bl	800e86c <sbrk_aligned>
 800e8ee:	1c43      	adds	r3, r0, #1
 800e8f0:	4604      	mov	r4, r0
 800e8f2:	d158      	bne.n	800e9a6 <_malloc_r+0xf6>
 800e8f4:	f8d8 4000 	ldr.w	r4, [r8]
 800e8f8:	4627      	mov	r7, r4
 800e8fa:	2f00      	cmp	r7, #0
 800e8fc:	d143      	bne.n	800e986 <_malloc_r+0xd6>
 800e8fe:	2c00      	cmp	r4, #0
 800e900:	d04b      	beq.n	800e99a <_malloc_r+0xea>
 800e902:	6823      	ldr	r3, [r4, #0]
 800e904:	4639      	mov	r1, r7
 800e906:	4630      	mov	r0, r6
 800e908:	eb04 0903 	add.w	r9, r4, r3
 800e90c:	f001 ff88 	bl	8010820 <_sbrk_r>
 800e910:	4581      	cmp	r9, r0
 800e912:	d142      	bne.n	800e99a <_malloc_r+0xea>
 800e914:	6821      	ldr	r1, [r4, #0]
 800e916:	1a6d      	subs	r5, r5, r1
 800e918:	4629      	mov	r1, r5
 800e91a:	4630      	mov	r0, r6
 800e91c:	f7ff ffa6 	bl	800e86c <sbrk_aligned>
 800e920:	3001      	adds	r0, #1
 800e922:	d03a      	beq.n	800e99a <_malloc_r+0xea>
 800e924:	6823      	ldr	r3, [r4, #0]
 800e926:	442b      	add	r3, r5
 800e928:	6023      	str	r3, [r4, #0]
 800e92a:	f8d8 3000 	ldr.w	r3, [r8]
 800e92e:	685a      	ldr	r2, [r3, #4]
 800e930:	bb62      	cbnz	r2, 800e98c <_malloc_r+0xdc>
 800e932:	f8c8 7000 	str.w	r7, [r8]
 800e936:	e00f      	b.n	800e958 <_malloc_r+0xa8>
 800e938:	6822      	ldr	r2, [r4, #0]
 800e93a:	1b52      	subs	r2, r2, r5
 800e93c:	d420      	bmi.n	800e980 <_malloc_r+0xd0>
 800e93e:	2a0b      	cmp	r2, #11
 800e940:	d917      	bls.n	800e972 <_malloc_r+0xc2>
 800e942:	1961      	adds	r1, r4, r5
 800e944:	42a3      	cmp	r3, r4
 800e946:	6025      	str	r5, [r4, #0]
 800e948:	bf18      	it	ne
 800e94a:	6059      	strne	r1, [r3, #4]
 800e94c:	6863      	ldr	r3, [r4, #4]
 800e94e:	bf08      	it	eq
 800e950:	f8c8 1000 	streq.w	r1, [r8]
 800e954:	5162      	str	r2, [r4, r5]
 800e956:	604b      	str	r3, [r1, #4]
 800e958:	4630      	mov	r0, r6
 800e95a:	f000 f82f 	bl	800e9bc <__malloc_unlock>
 800e95e:	f104 000b 	add.w	r0, r4, #11
 800e962:	1d23      	adds	r3, r4, #4
 800e964:	f020 0007 	bic.w	r0, r0, #7
 800e968:	1ac2      	subs	r2, r0, r3
 800e96a:	bf1c      	itt	ne
 800e96c:	1a1b      	subne	r3, r3, r0
 800e96e:	50a3      	strne	r3, [r4, r2]
 800e970:	e7af      	b.n	800e8d2 <_malloc_r+0x22>
 800e972:	6862      	ldr	r2, [r4, #4]
 800e974:	42a3      	cmp	r3, r4
 800e976:	bf0c      	ite	eq
 800e978:	f8c8 2000 	streq.w	r2, [r8]
 800e97c:	605a      	strne	r2, [r3, #4]
 800e97e:	e7eb      	b.n	800e958 <_malloc_r+0xa8>
 800e980:	4623      	mov	r3, r4
 800e982:	6864      	ldr	r4, [r4, #4]
 800e984:	e7ae      	b.n	800e8e4 <_malloc_r+0x34>
 800e986:	463c      	mov	r4, r7
 800e988:	687f      	ldr	r7, [r7, #4]
 800e98a:	e7b6      	b.n	800e8fa <_malloc_r+0x4a>
 800e98c:	461a      	mov	r2, r3
 800e98e:	685b      	ldr	r3, [r3, #4]
 800e990:	42a3      	cmp	r3, r4
 800e992:	d1fb      	bne.n	800e98c <_malloc_r+0xdc>
 800e994:	2300      	movs	r3, #0
 800e996:	6053      	str	r3, [r2, #4]
 800e998:	e7de      	b.n	800e958 <_malloc_r+0xa8>
 800e99a:	230c      	movs	r3, #12
 800e99c:	6033      	str	r3, [r6, #0]
 800e99e:	4630      	mov	r0, r6
 800e9a0:	f000 f80c 	bl	800e9bc <__malloc_unlock>
 800e9a4:	e794      	b.n	800e8d0 <_malloc_r+0x20>
 800e9a6:	6005      	str	r5, [r0, #0]
 800e9a8:	e7d6      	b.n	800e958 <_malloc_r+0xa8>
 800e9aa:	bf00      	nop
 800e9ac:	200029a8 	.word	0x200029a8

0800e9b0 <__malloc_lock>:
 800e9b0:	4801      	ldr	r0, [pc, #4]	@ (800e9b8 <__malloc_lock+0x8>)
 800e9b2:	f7ff b8b4 	b.w	800db1e <__retarget_lock_acquire_recursive>
 800e9b6:	bf00      	nop
 800e9b8:	200029a0 	.word	0x200029a0

0800e9bc <__malloc_unlock>:
 800e9bc:	4801      	ldr	r0, [pc, #4]	@ (800e9c4 <__malloc_unlock+0x8>)
 800e9be:	f7ff b8af 	b.w	800db20 <__retarget_lock_release_recursive>
 800e9c2:	bf00      	nop
 800e9c4:	200029a0 	.word	0x200029a0

0800e9c8 <_Balloc>:
 800e9c8:	b570      	push	{r4, r5, r6, lr}
 800e9ca:	69c6      	ldr	r6, [r0, #28]
 800e9cc:	4604      	mov	r4, r0
 800e9ce:	460d      	mov	r5, r1
 800e9d0:	b976      	cbnz	r6, 800e9f0 <_Balloc+0x28>
 800e9d2:	2010      	movs	r0, #16
 800e9d4:	f7ff ff42 	bl	800e85c <malloc>
 800e9d8:	4602      	mov	r2, r0
 800e9da:	61e0      	str	r0, [r4, #28]
 800e9dc:	b920      	cbnz	r0, 800e9e8 <_Balloc+0x20>
 800e9de:	4b18      	ldr	r3, [pc, #96]	@ (800ea40 <_Balloc+0x78>)
 800e9e0:	4818      	ldr	r0, [pc, #96]	@ (800ea44 <_Balloc+0x7c>)
 800e9e2:	216b      	movs	r1, #107	@ 0x6b
 800e9e4:	f001 ff44 	bl	8010870 <__assert_func>
 800e9e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e9ec:	6006      	str	r6, [r0, #0]
 800e9ee:	60c6      	str	r6, [r0, #12]
 800e9f0:	69e6      	ldr	r6, [r4, #28]
 800e9f2:	68f3      	ldr	r3, [r6, #12]
 800e9f4:	b183      	cbz	r3, 800ea18 <_Balloc+0x50>
 800e9f6:	69e3      	ldr	r3, [r4, #28]
 800e9f8:	68db      	ldr	r3, [r3, #12]
 800e9fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e9fe:	b9b8      	cbnz	r0, 800ea30 <_Balloc+0x68>
 800ea00:	2101      	movs	r1, #1
 800ea02:	fa01 f605 	lsl.w	r6, r1, r5
 800ea06:	1d72      	adds	r2, r6, #5
 800ea08:	0092      	lsls	r2, r2, #2
 800ea0a:	4620      	mov	r0, r4
 800ea0c:	f001 ff4e 	bl	80108ac <_calloc_r>
 800ea10:	b160      	cbz	r0, 800ea2c <_Balloc+0x64>
 800ea12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ea16:	e00e      	b.n	800ea36 <_Balloc+0x6e>
 800ea18:	2221      	movs	r2, #33	@ 0x21
 800ea1a:	2104      	movs	r1, #4
 800ea1c:	4620      	mov	r0, r4
 800ea1e:	f001 ff45 	bl	80108ac <_calloc_r>
 800ea22:	69e3      	ldr	r3, [r4, #28]
 800ea24:	60f0      	str	r0, [r6, #12]
 800ea26:	68db      	ldr	r3, [r3, #12]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d1e4      	bne.n	800e9f6 <_Balloc+0x2e>
 800ea2c:	2000      	movs	r0, #0
 800ea2e:	bd70      	pop	{r4, r5, r6, pc}
 800ea30:	6802      	ldr	r2, [r0, #0]
 800ea32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ea36:	2300      	movs	r3, #0
 800ea38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ea3c:	e7f7      	b.n	800ea2e <_Balloc+0x66>
 800ea3e:	bf00      	nop
 800ea40:	080246aa 	.word	0x080246aa
 800ea44:	0802472a 	.word	0x0802472a

0800ea48 <_Bfree>:
 800ea48:	b570      	push	{r4, r5, r6, lr}
 800ea4a:	69c6      	ldr	r6, [r0, #28]
 800ea4c:	4605      	mov	r5, r0
 800ea4e:	460c      	mov	r4, r1
 800ea50:	b976      	cbnz	r6, 800ea70 <_Bfree+0x28>
 800ea52:	2010      	movs	r0, #16
 800ea54:	f7ff ff02 	bl	800e85c <malloc>
 800ea58:	4602      	mov	r2, r0
 800ea5a:	61e8      	str	r0, [r5, #28]
 800ea5c:	b920      	cbnz	r0, 800ea68 <_Bfree+0x20>
 800ea5e:	4b09      	ldr	r3, [pc, #36]	@ (800ea84 <_Bfree+0x3c>)
 800ea60:	4809      	ldr	r0, [pc, #36]	@ (800ea88 <_Bfree+0x40>)
 800ea62:	218f      	movs	r1, #143	@ 0x8f
 800ea64:	f001 ff04 	bl	8010870 <__assert_func>
 800ea68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ea6c:	6006      	str	r6, [r0, #0]
 800ea6e:	60c6      	str	r6, [r0, #12]
 800ea70:	b13c      	cbz	r4, 800ea82 <_Bfree+0x3a>
 800ea72:	69eb      	ldr	r3, [r5, #28]
 800ea74:	6862      	ldr	r2, [r4, #4]
 800ea76:	68db      	ldr	r3, [r3, #12]
 800ea78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ea7c:	6021      	str	r1, [r4, #0]
 800ea7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ea82:	bd70      	pop	{r4, r5, r6, pc}
 800ea84:	080246aa 	.word	0x080246aa
 800ea88:	0802472a 	.word	0x0802472a

0800ea8c <__multadd>:
 800ea8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea90:	690d      	ldr	r5, [r1, #16]
 800ea92:	4607      	mov	r7, r0
 800ea94:	460c      	mov	r4, r1
 800ea96:	461e      	mov	r6, r3
 800ea98:	f101 0c14 	add.w	ip, r1, #20
 800ea9c:	2000      	movs	r0, #0
 800ea9e:	f8dc 3000 	ldr.w	r3, [ip]
 800eaa2:	b299      	uxth	r1, r3
 800eaa4:	fb02 6101 	mla	r1, r2, r1, r6
 800eaa8:	0c1e      	lsrs	r6, r3, #16
 800eaaa:	0c0b      	lsrs	r3, r1, #16
 800eaac:	fb02 3306 	mla	r3, r2, r6, r3
 800eab0:	b289      	uxth	r1, r1
 800eab2:	3001      	adds	r0, #1
 800eab4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800eab8:	4285      	cmp	r5, r0
 800eaba:	f84c 1b04 	str.w	r1, [ip], #4
 800eabe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800eac2:	dcec      	bgt.n	800ea9e <__multadd+0x12>
 800eac4:	b30e      	cbz	r6, 800eb0a <__multadd+0x7e>
 800eac6:	68a3      	ldr	r3, [r4, #8]
 800eac8:	42ab      	cmp	r3, r5
 800eaca:	dc19      	bgt.n	800eb00 <__multadd+0x74>
 800eacc:	6861      	ldr	r1, [r4, #4]
 800eace:	4638      	mov	r0, r7
 800ead0:	3101      	adds	r1, #1
 800ead2:	f7ff ff79 	bl	800e9c8 <_Balloc>
 800ead6:	4680      	mov	r8, r0
 800ead8:	b928      	cbnz	r0, 800eae6 <__multadd+0x5a>
 800eada:	4602      	mov	r2, r0
 800eadc:	4b0c      	ldr	r3, [pc, #48]	@ (800eb10 <__multadd+0x84>)
 800eade:	480d      	ldr	r0, [pc, #52]	@ (800eb14 <__multadd+0x88>)
 800eae0:	21ba      	movs	r1, #186	@ 0xba
 800eae2:	f001 fec5 	bl	8010870 <__assert_func>
 800eae6:	6922      	ldr	r2, [r4, #16]
 800eae8:	3202      	adds	r2, #2
 800eaea:	f104 010c 	add.w	r1, r4, #12
 800eaee:	0092      	lsls	r2, r2, #2
 800eaf0:	300c      	adds	r0, #12
 800eaf2:	f001 fea5 	bl	8010840 <memcpy>
 800eaf6:	4621      	mov	r1, r4
 800eaf8:	4638      	mov	r0, r7
 800eafa:	f7ff ffa5 	bl	800ea48 <_Bfree>
 800eafe:	4644      	mov	r4, r8
 800eb00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800eb04:	3501      	adds	r5, #1
 800eb06:	615e      	str	r6, [r3, #20]
 800eb08:	6125      	str	r5, [r4, #16]
 800eb0a:	4620      	mov	r0, r4
 800eb0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb10:	08024719 	.word	0x08024719
 800eb14:	0802472a 	.word	0x0802472a

0800eb18 <__s2b>:
 800eb18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb1c:	460c      	mov	r4, r1
 800eb1e:	4615      	mov	r5, r2
 800eb20:	461f      	mov	r7, r3
 800eb22:	2209      	movs	r2, #9
 800eb24:	3308      	adds	r3, #8
 800eb26:	4606      	mov	r6, r0
 800eb28:	fb93 f3f2 	sdiv	r3, r3, r2
 800eb2c:	2100      	movs	r1, #0
 800eb2e:	2201      	movs	r2, #1
 800eb30:	429a      	cmp	r2, r3
 800eb32:	db09      	blt.n	800eb48 <__s2b+0x30>
 800eb34:	4630      	mov	r0, r6
 800eb36:	f7ff ff47 	bl	800e9c8 <_Balloc>
 800eb3a:	b940      	cbnz	r0, 800eb4e <__s2b+0x36>
 800eb3c:	4602      	mov	r2, r0
 800eb3e:	4b19      	ldr	r3, [pc, #100]	@ (800eba4 <__s2b+0x8c>)
 800eb40:	4819      	ldr	r0, [pc, #100]	@ (800eba8 <__s2b+0x90>)
 800eb42:	21d3      	movs	r1, #211	@ 0xd3
 800eb44:	f001 fe94 	bl	8010870 <__assert_func>
 800eb48:	0052      	lsls	r2, r2, #1
 800eb4a:	3101      	adds	r1, #1
 800eb4c:	e7f0      	b.n	800eb30 <__s2b+0x18>
 800eb4e:	9b08      	ldr	r3, [sp, #32]
 800eb50:	6143      	str	r3, [r0, #20]
 800eb52:	2d09      	cmp	r5, #9
 800eb54:	f04f 0301 	mov.w	r3, #1
 800eb58:	6103      	str	r3, [r0, #16]
 800eb5a:	dd16      	ble.n	800eb8a <__s2b+0x72>
 800eb5c:	f104 0909 	add.w	r9, r4, #9
 800eb60:	46c8      	mov	r8, r9
 800eb62:	442c      	add	r4, r5
 800eb64:	f818 3b01 	ldrb.w	r3, [r8], #1
 800eb68:	4601      	mov	r1, r0
 800eb6a:	3b30      	subs	r3, #48	@ 0x30
 800eb6c:	220a      	movs	r2, #10
 800eb6e:	4630      	mov	r0, r6
 800eb70:	f7ff ff8c 	bl	800ea8c <__multadd>
 800eb74:	45a0      	cmp	r8, r4
 800eb76:	d1f5      	bne.n	800eb64 <__s2b+0x4c>
 800eb78:	f1a5 0408 	sub.w	r4, r5, #8
 800eb7c:	444c      	add	r4, r9
 800eb7e:	1b2d      	subs	r5, r5, r4
 800eb80:	1963      	adds	r3, r4, r5
 800eb82:	42bb      	cmp	r3, r7
 800eb84:	db04      	blt.n	800eb90 <__s2b+0x78>
 800eb86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb8a:	340a      	adds	r4, #10
 800eb8c:	2509      	movs	r5, #9
 800eb8e:	e7f6      	b.n	800eb7e <__s2b+0x66>
 800eb90:	f814 3b01 	ldrb.w	r3, [r4], #1
 800eb94:	4601      	mov	r1, r0
 800eb96:	3b30      	subs	r3, #48	@ 0x30
 800eb98:	220a      	movs	r2, #10
 800eb9a:	4630      	mov	r0, r6
 800eb9c:	f7ff ff76 	bl	800ea8c <__multadd>
 800eba0:	e7ee      	b.n	800eb80 <__s2b+0x68>
 800eba2:	bf00      	nop
 800eba4:	08024719 	.word	0x08024719
 800eba8:	0802472a 	.word	0x0802472a

0800ebac <__hi0bits>:
 800ebac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ebb0:	4603      	mov	r3, r0
 800ebb2:	bf36      	itet	cc
 800ebb4:	0403      	lslcc	r3, r0, #16
 800ebb6:	2000      	movcs	r0, #0
 800ebb8:	2010      	movcc	r0, #16
 800ebba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ebbe:	bf3c      	itt	cc
 800ebc0:	021b      	lslcc	r3, r3, #8
 800ebc2:	3008      	addcc	r0, #8
 800ebc4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ebc8:	bf3c      	itt	cc
 800ebca:	011b      	lslcc	r3, r3, #4
 800ebcc:	3004      	addcc	r0, #4
 800ebce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ebd2:	bf3c      	itt	cc
 800ebd4:	009b      	lslcc	r3, r3, #2
 800ebd6:	3002      	addcc	r0, #2
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	db05      	blt.n	800ebe8 <__hi0bits+0x3c>
 800ebdc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ebe0:	f100 0001 	add.w	r0, r0, #1
 800ebe4:	bf08      	it	eq
 800ebe6:	2020      	moveq	r0, #32
 800ebe8:	4770      	bx	lr

0800ebea <__lo0bits>:
 800ebea:	6803      	ldr	r3, [r0, #0]
 800ebec:	4602      	mov	r2, r0
 800ebee:	f013 0007 	ands.w	r0, r3, #7
 800ebf2:	d00b      	beq.n	800ec0c <__lo0bits+0x22>
 800ebf4:	07d9      	lsls	r1, r3, #31
 800ebf6:	d421      	bmi.n	800ec3c <__lo0bits+0x52>
 800ebf8:	0798      	lsls	r0, r3, #30
 800ebfa:	bf49      	itett	mi
 800ebfc:	085b      	lsrmi	r3, r3, #1
 800ebfe:	089b      	lsrpl	r3, r3, #2
 800ec00:	2001      	movmi	r0, #1
 800ec02:	6013      	strmi	r3, [r2, #0]
 800ec04:	bf5c      	itt	pl
 800ec06:	6013      	strpl	r3, [r2, #0]
 800ec08:	2002      	movpl	r0, #2
 800ec0a:	4770      	bx	lr
 800ec0c:	b299      	uxth	r1, r3
 800ec0e:	b909      	cbnz	r1, 800ec14 <__lo0bits+0x2a>
 800ec10:	0c1b      	lsrs	r3, r3, #16
 800ec12:	2010      	movs	r0, #16
 800ec14:	b2d9      	uxtb	r1, r3
 800ec16:	b909      	cbnz	r1, 800ec1c <__lo0bits+0x32>
 800ec18:	3008      	adds	r0, #8
 800ec1a:	0a1b      	lsrs	r3, r3, #8
 800ec1c:	0719      	lsls	r1, r3, #28
 800ec1e:	bf04      	itt	eq
 800ec20:	091b      	lsreq	r3, r3, #4
 800ec22:	3004      	addeq	r0, #4
 800ec24:	0799      	lsls	r1, r3, #30
 800ec26:	bf04      	itt	eq
 800ec28:	089b      	lsreq	r3, r3, #2
 800ec2a:	3002      	addeq	r0, #2
 800ec2c:	07d9      	lsls	r1, r3, #31
 800ec2e:	d403      	bmi.n	800ec38 <__lo0bits+0x4e>
 800ec30:	085b      	lsrs	r3, r3, #1
 800ec32:	f100 0001 	add.w	r0, r0, #1
 800ec36:	d003      	beq.n	800ec40 <__lo0bits+0x56>
 800ec38:	6013      	str	r3, [r2, #0]
 800ec3a:	4770      	bx	lr
 800ec3c:	2000      	movs	r0, #0
 800ec3e:	4770      	bx	lr
 800ec40:	2020      	movs	r0, #32
 800ec42:	4770      	bx	lr

0800ec44 <__i2b>:
 800ec44:	b510      	push	{r4, lr}
 800ec46:	460c      	mov	r4, r1
 800ec48:	2101      	movs	r1, #1
 800ec4a:	f7ff febd 	bl	800e9c8 <_Balloc>
 800ec4e:	4602      	mov	r2, r0
 800ec50:	b928      	cbnz	r0, 800ec5e <__i2b+0x1a>
 800ec52:	4b05      	ldr	r3, [pc, #20]	@ (800ec68 <__i2b+0x24>)
 800ec54:	4805      	ldr	r0, [pc, #20]	@ (800ec6c <__i2b+0x28>)
 800ec56:	f240 1145 	movw	r1, #325	@ 0x145
 800ec5a:	f001 fe09 	bl	8010870 <__assert_func>
 800ec5e:	2301      	movs	r3, #1
 800ec60:	6144      	str	r4, [r0, #20]
 800ec62:	6103      	str	r3, [r0, #16]
 800ec64:	bd10      	pop	{r4, pc}
 800ec66:	bf00      	nop
 800ec68:	08024719 	.word	0x08024719
 800ec6c:	0802472a 	.word	0x0802472a

0800ec70 <__multiply>:
 800ec70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec74:	4614      	mov	r4, r2
 800ec76:	690a      	ldr	r2, [r1, #16]
 800ec78:	6923      	ldr	r3, [r4, #16]
 800ec7a:	429a      	cmp	r2, r3
 800ec7c:	bfa8      	it	ge
 800ec7e:	4623      	movge	r3, r4
 800ec80:	460f      	mov	r7, r1
 800ec82:	bfa4      	itt	ge
 800ec84:	460c      	movge	r4, r1
 800ec86:	461f      	movge	r7, r3
 800ec88:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ec8c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ec90:	68a3      	ldr	r3, [r4, #8]
 800ec92:	6861      	ldr	r1, [r4, #4]
 800ec94:	eb0a 0609 	add.w	r6, sl, r9
 800ec98:	42b3      	cmp	r3, r6
 800ec9a:	b085      	sub	sp, #20
 800ec9c:	bfb8      	it	lt
 800ec9e:	3101      	addlt	r1, #1
 800eca0:	f7ff fe92 	bl	800e9c8 <_Balloc>
 800eca4:	b930      	cbnz	r0, 800ecb4 <__multiply+0x44>
 800eca6:	4602      	mov	r2, r0
 800eca8:	4b44      	ldr	r3, [pc, #272]	@ (800edbc <__multiply+0x14c>)
 800ecaa:	4845      	ldr	r0, [pc, #276]	@ (800edc0 <__multiply+0x150>)
 800ecac:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ecb0:	f001 fdde 	bl	8010870 <__assert_func>
 800ecb4:	f100 0514 	add.w	r5, r0, #20
 800ecb8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ecbc:	462b      	mov	r3, r5
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	4543      	cmp	r3, r8
 800ecc2:	d321      	bcc.n	800ed08 <__multiply+0x98>
 800ecc4:	f107 0114 	add.w	r1, r7, #20
 800ecc8:	f104 0214 	add.w	r2, r4, #20
 800eccc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ecd0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ecd4:	9302      	str	r3, [sp, #8]
 800ecd6:	1b13      	subs	r3, r2, r4
 800ecd8:	3b15      	subs	r3, #21
 800ecda:	f023 0303 	bic.w	r3, r3, #3
 800ecde:	3304      	adds	r3, #4
 800ece0:	f104 0715 	add.w	r7, r4, #21
 800ece4:	42ba      	cmp	r2, r7
 800ece6:	bf38      	it	cc
 800ece8:	2304      	movcc	r3, #4
 800ecea:	9301      	str	r3, [sp, #4]
 800ecec:	9b02      	ldr	r3, [sp, #8]
 800ecee:	9103      	str	r1, [sp, #12]
 800ecf0:	428b      	cmp	r3, r1
 800ecf2:	d80c      	bhi.n	800ed0e <__multiply+0x9e>
 800ecf4:	2e00      	cmp	r6, #0
 800ecf6:	dd03      	ble.n	800ed00 <__multiply+0x90>
 800ecf8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d05b      	beq.n	800edb8 <__multiply+0x148>
 800ed00:	6106      	str	r6, [r0, #16]
 800ed02:	b005      	add	sp, #20
 800ed04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed08:	f843 2b04 	str.w	r2, [r3], #4
 800ed0c:	e7d8      	b.n	800ecc0 <__multiply+0x50>
 800ed0e:	f8b1 a000 	ldrh.w	sl, [r1]
 800ed12:	f1ba 0f00 	cmp.w	sl, #0
 800ed16:	d024      	beq.n	800ed62 <__multiply+0xf2>
 800ed18:	f104 0e14 	add.w	lr, r4, #20
 800ed1c:	46a9      	mov	r9, r5
 800ed1e:	f04f 0c00 	mov.w	ip, #0
 800ed22:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ed26:	f8d9 3000 	ldr.w	r3, [r9]
 800ed2a:	fa1f fb87 	uxth.w	fp, r7
 800ed2e:	b29b      	uxth	r3, r3
 800ed30:	fb0a 330b 	mla	r3, sl, fp, r3
 800ed34:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ed38:	f8d9 7000 	ldr.w	r7, [r9]
 800ed3c:	4463      	add	r3, ip
 800ed3e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ed42:	fb0a c70b 	mla	r7, sl, fp, ip
 800ed46:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ed4a:	b29b      	uxth	r3, r3
 800ed4c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ed50:	4572      	cmp	r2, lr
 800ed52:	f849 3b04 	str.w	r3, [r9], #4
 800ed56:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ed5a:	d8e2      	bhi.n	800ed22 <__multiply+0xb2>
 800ed5c:	9b01      	ldr	r3, [sp, #4]
 800ed5e:	f845 c003 	str.w	ip, [r5, r3]
 800ed62:	9b03      	ldr	r3, [sp, #12]
 800ed64:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ed68:	3104      	adds	r1, #4
 800ed6a:	f1b9 0f00 	cmp.w	r9, #0
 800ed6e:	d021      	beq.n	800edb4 <__multiply+0x144>
 800ed70:	682b      	ldr	r3, [r5, #0]
 800ed72:	f104 0c14 	add.w	ip, r4, #20
 800ed76:	46ae      	mov	lr, r5
 800ed78:	f04f 0a00 	mov.w	sl, #0
 800ed7c:	f8bc b000 	ldrh.w	fp, [ip]
 800ed80:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ed84:	fb09 770b 	mla	r7, r9, fp, r7
 800ed88:	4457      	add	r7, sl
 800ed8a:	b29b      	uxth	r3, r3
 800ed8c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ed90:	f84e 3b04 	str.w	r3, [lr], #4
 800ed94:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ed98:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ed9c:	f8be 3000 	ldrh.w	r3, [lr]
 800eda0:	fb09 330a 	mla	r3, r9, sl, r3
 800eda4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800eda8:	4562      	cmp	r2, ip
 800edaa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800edae:	d8e5      	bhi.n	800ed7c <__multiply+0x10c>
 800edb0:	9f01      	ldr	r7, [sp, #4]
 800edb2:	51eb      	str	r3, [r5, r7]
 800edb4:	3504      	adds	r5, #4
 800edb6:	e799      	b.n	800ecec <__multiply+0x7c>
 800edb8:	3e01      	subs	r6, #1
 800edba:	e79b      	b.n	800ecf4 <__multiply+0x84>
 800edbc:	08024719 	.word	0x08024719
 800edc0:	0802472a 	.word	0x0802472a

0800edc4 <__pow5mult>:
 800edc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800edc8:	4615      	mov	r5, r2
 800edca:	f012 0203 	ands.w	r2, r2, #3
 800edce:	4607      	mov	r7, r0
 800edd0:	460e      	mov	r6, r1
 800edd2:	d007      	beq.n	800ede4 <__pow5mult+0x20>
 800edd4:	4c25      	ldr	r4, [pc, #148]	@ (800ee6c <__pow5mult+0xa8>)
 800edd6:	3a01      	subs	r2, #1
 800edd8:	2300      	movs	r3, #0
 800edda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800edde:	f7ff fe55 	bl	800ea8c <__multadd>
 800ede2:	4606      	mov	r6, r0
 800ede4:	10ad      	asrs	r5, r5, #2
 800ede6:	d03d      	beq.n	800ee64 <__pow5mult+0xa0>
 800ede8:	69fc      	ldr	r4, [r7, #28]
 800edea:	b97c      	cbnz	r4, 800ee0c <__pow5mult+0x48>
 800edec:	2010      	movs	r0, #16
 800edee:	f7ff fd35 	bl	800e85c <malloc>
 800edf2:	4602      	mov	r2, r0
 800edf4:	61f8      	str	r0, [r7, #28]
 800edf6:	b928      	cbnz	r0, 800ee04 <__pow5mult+0x40>
 800edf8:	4b1d      	ldr	r3, [pc, #116]	@ (800ee70 <__pow5mult+0xac>)
 800edfa:	481e      	ldr	r0, [pc, #120]	@ (800ee74 <__pow5mult+0xb0>)
 800edfc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ee00:	f001 fd36 	bl	8010870 <__assert_func>
 800ee04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ee08:	6004      	str	r4, [r0, #0]
 800ee0a:	60c4      	str	r4, [r0, #12]
 800ee0c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ee10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ee14:	b94c      	cbnz	r4, 800ee2a <__pow5mult+0x66>
 800ee16:	f240 2171 	movw	r1, #625	@ 0x271
 800ee1a:	4638      	mov	r0, r7
 800ee1c:	f7ff ff12 	bl	800ec44 <__i2b>
 800ee20:	2300      	movs	r3, #0
 800ee22:	f8c8 0008 	str.w	r0, [r8, #8]
 800ee26:	4604      	mov	r4, r0
 800ee28:	6003      	str	r3, [r0, #0]
 800ee2a:	f04f 0900 	mov.w	r9, #0
 800ee2e:	07eb      	lsls	r3, r5, #31
 800ee30:	d50a      	bpl.n	800ee48 <__pow5mult+0x84>
 800ee32:	4631      	mov	r1, r6
 800ee34:	4622      	mov	r2, r4
 800ee36:	4638      	mov	r0, r7
 800ee38:	f7ff ff1a 	bl	800ec70 <__multiply>
 800ee3c:	4631      	mov	r1, r6
 800ee3e:	4680      	mov	r8, r0
 800ee40:	4638      	mov	r0, r7
 800ee42:	f7ff fe01 	bl	800ea48 <_Bfree>
 800ee46:	4646      	mov	r6, r8
 800ee48:	106d      	asrs	r5, r5, #1
 800ee4a:	d00b      	beq.n	800ee64 <__pow5mult+0xa0>
 800ee4c:	6820      	ldr	r0, [r4, #0]
 800ee4e:	b938      	cbnz	r0, 800ee60 <__pow5mult+0x9c>
 800ee50:	4622      	mov	r2, r4
 800ee52:	4621      	mov	r1, r4
 800ee54:	4638      	mov	r0, r7
 800ee56:	f7ff ff0b 	bl	800ec70 <__multiply>
 800ee5a:	6020      	str	r0, [r4, #0]
 800ee5c:	f8c0 9000 	str.w	r9, [r0]
 800ee60:	4604      	mov	r4, r0
 800ee62:	e7e4      	b.n	800ee2e <__pow5mult+0x6a>
 800ee64:	4630      	mov	r0, r6
 800ee66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee6a:	bf00      	nop
 800ee6c:	08024784 	.word	0x08024784
 800ee70:	080246aa 	.word	0x080246aa
 800ee74:	0802472a 	.word	0x0802472a

0800ee78 <__lshift>:
 800ee78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee7c:	460c      	mov	r4, r1
 800ee7e:	6849      	ldr	r1, [r1, #4]
 800ee80:	6923      	ldr	r3, [r4, #16]
 800ee82:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ee86:	68a3      	ldr	r3, [r4, #8]
 800ee88:	4607      	mov	r7, r0
 800ee8a:	4691      	mov	r9, r2
 800ee8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ee90:	f108 0601 	add.w	r6, r8, #1
 800ee94:	42b3      	cmp	r3, r6
 800ee96:	db0b      	blt.n	800eeb0 <__lshift+0x38>
 800ee98:	4638      	mov	r0, r7
 800ee9a:	f7ff fd95 	bl	800e9c8 <_Balloc>
 800ee9e:	4605      	mov	r5, r0
 800eea0:	b948      	cbnz	r0, 800eeb6 <__lshift+0x3e>
 800eea2:	4602      	mov	r2, r0
 800eea4:	4b28      	ldr	r3, [pc, #160]	@ (800ef48 <__lshift+0xd0>)
 800eea6:	4829      	ldr	r0, [pc, #164]	@ (800ef4c <__lshift+0xd4>)
 800eea8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800eeac:	f001 fce0 	bl	8010870 <__assert_func>
 800eeb0:	3101      	adds	r1, #1
 800eeb2:	005b      	lsls	r3, r3, #1
 800eeb4:	e7ee      	b.n	800ee94 <__lshift+0x1c>
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	f100 0114 	add.w	r1, r0, #20
 800eebc:	f100 0210 	add.w	r2, r0, #16
 800eec0:	4618      	mov	r0, r3
 800eec2:	4553      	cmp	r3, sl
 800eec4:	db33      	blt.n	800ef2e <__lshift+0xb6>
 800eec6:	6920      	ldr	r0, [r4, #16]
 800eec8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800eecc:	f104 0314 	add.w	r3, r4, #20
 800eed0:	f019 091f 	ands.w	r9, r9, #31
 800eed4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800eed8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800eedc:	d02b      	beq.n	800ef36 <__lshift+0xbe>
 800eede:	f1c9 0e20 	rsb	lr, r9, #32
 800eee2:	468a      	mov	sl, r1
 800eee4:	2200      	movs	r2, #0
 800eee6:	6818      	ldr	r0, [r3, #0]
 800eee8:	fa00 f009 	lsl.w	r0, r0, r9
 800eeec:	4310      	orrs	r0, r2
 800eeee:	f84a 0b04 	str.w	r0, [sl], #4
 800eef2:	f853 2b04 	ldr.w	r2, [r3], #4
 800eef6:	459c      	cmp	ip, r3
 800eef8:	fa22 f20e 	lsr.w	r2, r2, lr
 800eefc:	d8f3      	bhi.n	800eee6 <__lshift+0x6e>
 800eefe:	ebac 0304 	sub.w	r3, ip, r4
 800ef02:	3b15      	subs	r3, #21
 800ef04:	f023 0303 	bic.w	r3, r3, #3
 800ef08:	3304      	adds	r3, #4
 800ef0a:	f104 0015 	add.w	r0, r4, #21
 800ef0e:	4584      	cmp	ip, r0
 800ef10:	bf38      	it	cc
 800ef12:	2304      	movcc	r3, #4
 800ef14:	50ca      	str	r2, [r1, r3]
 800ef16:	b10a      	cbz	r2, 800ef1c <__lshift+0xa4>
 800ef18:	f108 0602 	add.w	r6, r8, #2
 800ef1c:	3e01      	subs	r6, #1
 800ef1e:	4638      	mov	r0, r7
 800ef20:	612e      	str	r6, [r5, #16]
 800ef22:	4621      	mov	r1, r4
 800ef24:	f7ff fd90 	bl	800ea48 <_Bfree>
 800ef28:	4628      	mov	r0, r5
 800ef2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef2e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ef32:	3301      	adds	r3, #1
 800ef34:	e7c5      	b.n	800eec2 <__lshift+0x4a>
 800ef36:	3904      	subs	r1, #4
 800ef38:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef3c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ef40:	459c      	cmp	ip, r3
 800ef42:	d8f9      	bhi.n	800ef38 <__lshift+0xc0>
 800ef44:	e7ea      	b.n	800ef1c <__lshift+0xa4>
 800ef46:	bf00      	nop
 800ef48:	08024719 	.word	0x08024719
 800ef4c:	0802472a 	.word	0x0802472a

0800ef50 <__mcmp>:
 800ef50:	690a      	ldr	r2, [r1, #16]
 800ef52:	4603      	mov	r3, r0
 800ef54:	6900      	ldr	r0, [r0, #16]
 800ef56:	1a80      	subs	r0, r0, r2
 800ef58:	b530      	push	{r4, r5, lr}
 800ef5a:	d10e      	bne.n	800ef7a <__mcmp+0x2a>
 800ef5c:	3314      	adds	r3, #20
 800ef5e:	3114      	adds	r1, #20
 800ef60:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ef64:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ef68:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ef6c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ef70:	4295      	cmp	r5, r2
 800ef72:	d003      	beq.n	800ef7c <__mcmp+0x2c>
 800ef74:	d205      	bcs.n	800ef82 <__mcmp+0x32>
 800ef76:	f04f 30ff 	mov.w	r0, #4294967295
 800ef7a:	bd30      	pop	{r4, r5, pc}
 800ef7c:	42a3      	cmp	r3, r4
 800ef7e:	d3f3      	bcc.n	800ef68 <__mcmp+0x18>
 800ef80:	e7fb      	b.n	800ef7a <__mcmp+0x2a>
 800ef82:	2001      	movs	r0, #1
 800ef84:	e7f9      	b.n	800ef7a <__mcmp+0x2a>
	...

0800ef88 <__mdiff>:
 800ef88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef8c:	4689      	mov	r9, r1
 800ef8e:	4606      	mov	r6, r0
 800ef90:	4611      	mov	r1, r2
 800ef92:	4648      	mov	r0, r9
 800ef94:	4614      	mov	r4, r2
 800ef96:	f7ff ffdb 	bl	800ef50 <__mcmp>
 800ef9a:	1e05      	subs	r5, r0, #0
 800ef9c:	d112      	bne.n	800efc4 <__mdiff+0x3c>
 800ef9e:	4629      	mov	r1, r5
 800efa0:	4630      	mov	r0, r6
 800efa2:	f7ff fd11 	bl	800e9c8 <_Balloc>
 800efa6:	4602      	mov	r2, r0
 800efa8:	b928      	cbnz	r0, 800efb6 <__mdiff+0x2e>
 800efaa:	4b3f      	ldr	r3, [pc, #252]	@ (800f0a8 <__mdiff+0x120>)
 800efac:	f240 2137 	movw	r1, #567	@ 0x237
 800efb0:	483e      	ldr	r0, [pc, #248]	@ (800f0ac <__mdiff+0x124>)
 800efb2:	f001 fc5d 	bl	8010870 <__assert_func>
 800efb6:	2301      	movs	r3, #1
 800efb8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800efbc:	4610      	mov	r0, r2
 800efbe:	b003      	add	sp, #12
 800efc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efc4:	bfbc      	itt	lt
 800efc6:	464b      	movlt	r3, r9
 800efc8:	46a1      	movlt	r9, r4
 800efca:	4630      	mov	r0, r6
 800efcc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800efd0:	bfba      	itte	lt
 800efd2:	461c      	movlt	r4, r3
 800efd4:	2501      	movlt	r5, #1
 800efd6:	2500      	movge	r5, #0
 800efd8:	f7ff fcf6 	bl	800e9c8 <_Balloc>
 800efdc:	4602      	mov	r2, r0
 800efde:	b918      	cbnz	r0, 800efe8 <__mdiff+0x60>
 800efe0:	4b31      	ldr	r3, [pc, #196]	@ (800f0a8 <__mdiff+0x120>)
 800efe2:	f240 2145 	movw	r1, #581	@ 0x245
 800efe6:	e7e3      	b.n	800efb0 <__mdiff+0x28>
 800efe8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800efec:	6926      	ldr	r6, [r4, #16]
 800efee:	60c5      	str	r5, [r0, #12]
 800eff0:	f109 0310 	add.w	r3, r9, #16
 800eff4:	f109 0514 	add.w	r5, r9, #20
 800eff8:	f104 0e14 	add.w	lr, r4, #20
 800effc:	f100 0b14 	add.w	fp, r0, #20
 800f000:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f004:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f008:	9301      	str	r3, [sp, #4]
 800f00a:	46d9      	mov	r9, fp
 800f00c:	f04f 0c00 	mov.w	ip, #0
 800f010:	9b01      	ldr	r3, [sp, #4]
 800f012:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f016:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f01a:	9301      	str	r3, [sp, #4]
 800f01c:	fa1f f38a 	uxth.w	r3, sl
 800f020:	4619      	mov	r1, r3
 800f022:	b283      	uxth	r3, r0
 800f024:	1acb      	subs	r3, r1, r3
 800f026:	0c00      	lsrs	r0, r0, #16
 800f028:	4463      	add	r3, ip
 800f02a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f02e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f032:	b29b      	uxth	r3, r3
 800f034:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f038:	4576      	cmp	r6, lr
 800f03a:	f849 3b04 	str.w	r3, [r9], #4
 800f03e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f042:	d8e5      	bhi.n	800f010 <__mdiff+0x88>
 800f044:	1b33      	subs	r3, r6, r4
 800f046:	3b15      	subs	r3, #21
 800f048:	f023 0303 	bic.w	r3, r3, #3
 800f04c:	3415      	adds	r4, #21
 800f04e:	3304      	adds	r3, #4
 800f050:	42a6      	cmp	r6, r4
 800f052:	bf38      	it	cc
 800f054:	2304      	movcc	r3, #4
 800f056:	441d      	add	r5, r3
 800f058:	445b      	add	r3, fp
 800f05a:	461e      	mov	r6, r3
 800f05c:	462c      	mov	r4, r5
 800f05e:	4544      	cmp	r4, r8
 800f060:	d30e      	bcc.n	800f080 <__mdiff+0xf8>
 800f062:	f108 0103 	add.w	r1, r8, #3
 800f066:	1b49      	subs	r1, r1, r5
 800f068:	f021 0103 	bic.w	r1, r1, #3
 800f06c:	3d03      	subs	r5, #3
 800f06e:	45a8      	cmp	r8, r5
 800f070:	bf38      	it	cc
 800f072:	2100      	movcc	r1, #0
 800f074:	440b      	add	r3, r1
 800f076:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f07a:	b191      	cbz	r1, 800f0a2 <__mdiff+0x11a>
 800f07c:	6117      	str	r7, [r2, #16]
 800f07e:	e79d      	b.n	800efbc <__mdiff+0x34>
 800f080:	f854 1b04 	ldr.w	r1, [r4], #4
 800f084:	46e6      	mov	lr, ip
 800f086:	0c08      	lsrs	r0, r1, #16
 800f088:	fa1c fc81 	uxtah	ip, ip, r1
 800f08c:	4471      	add	r1, lr
 800f08e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f092:	b289      	uxth	r1, r1
 800f094:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f098:	f846 1b04 	str.w	r1, [r6], #4
 800f09c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f0a0:	e7dd      	b.n	800f05e <__mdiff+0xd6>
 800f0a2:	3f01      	subs	r7, #1
 800f0a4:	e7e7      	b.n	800f076 <__mdiff+0xee>
 800f0a6:	bf00      	nop
 800f0a8:	08024719 	.word	0x08024719
 800f0ac:	0802472a 	.word	0x0802472a

0800f0b0 <__ulp>:
 800f0b0:	b082      	sub	sp, #8
 800f0b2:	ed8d 0b00 	vstr	d0, [sp]
 800f0b6:	9a01      	ldr	r2, [sp, #4]
 800f0b8:	4b0f      	ldr	r3, [pc, #60]	@ (800f0f8 <__ulp+0x48>)
 800f0ba:	4013      	ands	r3, r2
 800f0bc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	dc08      	bgt.n	800f0d6 <__ulp+0x26>
 800f0c4:	425b      	negs	r3, r3
 800f0c6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800f0ca:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f0ce:	da04      	bge.n	800f0da <__ulp+0x2a>
 800f0d0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800f0d4:	4113      	asrs	r3, r2
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	e008      	b.n	800f0ec <__ulp+0x3c>
 800f0da:	f1a2 0314 	sub.w	r3, r2, #20
 800f0de:	2b1e      	cmp	r3, #30
 800f0e0:	bfda      	itte	le
 800f0e2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800f0e6:	40da      	lsrle	r2, r3
 800f0e8:	2201      	movgt	r2, #1
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	4619      	mov	r1, r3
 800f0ee:	4610      	mov	r0, r2
 800f0f0:	ec41 0b10 	vmov	d0, r0, r1
 800f0f4:	b002      	add	sp, #8
 800f0f6:	4770      	bx	lr
 800f0f8:	7ff00000 	.word	0x7ff00000

0800f0fc <__b2d>:
 800f0fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f100:	6906      	ldr	r6, [r0, #16]
 800f102:	f100 0814 	add.w	r8, r0, #20
 800f106:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800f10a:	1f37      	subs	r7, r6, #4
 800f10c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f110:	4610      	mov	r0, r2
 800f112:	f7ff fd4b 	bl	800ebac <__hi0bits>
 800f116:	f1c0 0320 	rsb	r3, r0, #32
 800f11a:	280a      	cmp	r0, #10
 800f11c:	600b      	str	r3, [r1, #0]
 800f11e:	491b      	ldr	r1, [pc, #108]	@ (800f18c <__b2d+0x90>)
 800f120:	dc15      	bgt.n	800f14e <__b2d+0x52>
 800f122:	f1c0 0c0b 	rsb	ip, r0, #11
 800f126:	fa22 f30c 	lsr.w	r3, r2, ip
 800f12a:	45b8      	cmp	r8, r7
 800f12c:	ea43 0501 	orr.w	r5, r3, r1
 800f130:	bf34      	ite	cc
 800f132:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f136:	2300      	movcs	r3, #0
 800f138:	3015      	adds	r0, #21
 800f13a:	fa02 f000 	lsl.w	r0, r2, r0
 800f13e:	fa23 f30c 	lsr.w	r3, r3, ip
 800f142:	4303      	orrs	r3, r0
 800f144:	461c      	mov	r4, r3
 800f146:	ec45 4b10 	vmov	d0, r4, r5
 800f14a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f14e:	45b8      	cmp	r8, r7
 800f150:	bf3a      	itte	cc
 800f152:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f156:	f1a6 0708 	subcc.w	r7, r6, #8
 800f15a:	2300      	movcs	r3, #0
 800f15c:	380b      	subs	r0, #11
 800f15e:	d012      	beq.n	800f186 <__b2d+0x8a>
 800f160:	f1c0 0120 	rsb	r1, r0, #32
 800f164:	fa23 f401 	lsr.w	r4, r3, r1
 800f168:	4082      	lsls	r2, r0
 800f16a:	4322      	orrs	r2, r4
 800f16c:	4547      	cmp	r7, r8
 800f16e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800f172:	bf8c      	ite	hi
 800f174:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800f178:	2200      	movls	r2, #0
 800f17a:	4083      	lsls	r3, r0
 800f17c:	40ca      	lsrs	r2, r1
 800f17e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800f182:	4313      	orrs	r3, r2
 800f184:	e7de      	b.n	800f144 <__b2d+0x48>
 800f186:	ea42 0501 	orr.w	r5, r2, r1
 800f18a:	e7db      	b.n	800f144 <__b2d+0x48>
 800f18c:	3ff00000 	.word	0x3ff00000

0800f190 <__d2b>:
 800f190:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f194:	460f      	mov	r7, r1
 800f196:	2101      	movs	r1, #1
 800f198:	ec59 8b10 	vmov	r8, r9, d0
 800f19c:	4616      	mov	r6, r2
 800f19e:	f7ff fc13 	bl	800e9c8 <_Balloc>
 800f1a2:	4604      	mov	r4, r0
 800f1a4:	b930      	cbnz	r0, 800f1b4 <__d2b+0x24>
 800f1a6:	4602      	mov	r2, r0
 800f1a8:	4b23      	ldr	r3, [pc, #140]	@ (800f238 <__d2b+0xa8>)
 800f1aa:	4824      	ldr	r0, [pc, #144]	@ (800f23c <__d2b+0xac>)
 800f1ac:	f240 310f 	movw	r1, #783	@ 0x30f
 800f1b0:	f001 fb5e 	bl	8010870 <__assert_func>
 800f1b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f1b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f1bc:	b10d      	cbz	r5, 800f1c2 <__d2b+0x32>
 800f1be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f1c2:	9301      	str	r3, [sp, #4]
 800f1c4:	f1b8 0300 	subs.w	r3, r8, #0
 800f1c8:	d023      	beq.n	800f212 <__d2b+0x82>
 800f1ca:	4668      	mov	r0, sp
 800f1cc:	9300      	str	r3, [sp, #0]
 800f1ce:	f7ff fd0c 	bl	800ebea <__lo0bits>
 800f1d2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f1d6:	b1d0      	cbz	r0, 800f20e <__d2b+0x7e>
 800f1d8:	f1c0 0320 	rsb	r3, r0, #32
 800f1dc:	fa02 f303 	lsl.w	r3, r2, r3
 800f1e0:	430b      	orrs	r3, r1
 800f1e2:	40c2      	lsrs	r2, r0
 800f1e4:	6163      	str	r3, [r4, #20]
 800f1e6:	9201      	str	r2, [sp, #4]
 800f1e8:	9b01      	ldr	r3, [sp, #4]
 800f1ea:	61a3      	str	r3, [r4, #24]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	bf0c      	ite	eq
 800f1f0:	2201      	moveq	r2, #1
 800f1f2:	2202      	movne	r2, #2
 800f1f4:	6122      	str	r2, [r4, #16]
 800f1f6:	b1a5      	cbz	r5, 800f222 <__d2b+0x92>
 800f1f8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f1fc:	4405      	add	r5, r0
 800f1fe:	603d      	str	r5, [r7, #0]
 800f200:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f204:	6030      	str	r0, [r6, #0]
 800f206:	4620      	mov	r0, r4
 800f208:	b003      	add	sp, #12
 800f20a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f20e:	6161      	str	r1, [r4, #20]
 800f210:	e7ea      	b.n	800f1e8 <__d2b+0x58>
 800f212:	a801      	add	r0, sp, #4
 800f214:	f7ff fce9 	bl	800ebea <__lo0bits>
 800f218:	9b01      	ldr	r3, [sp, #4]
 800f21a:	6163      	str	r3, [r4, #20]
 800f21c:	3020      	adds	r0, #32
 800f21e:	2201      	movs	r2, #1
 800f220:	e7e8      	b.n	800f1f4 <__d2b+0x64>
 800f222:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f226:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f22a:	6038      	str	r0, [r7, #0]
 800f22c:	6918      	ldr	r0, [r3, #16]
 800f22e:	f7ff fcbd 	bl	800ebac <__hi0bits>
 800f232:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f236:	e7e5      	b.n	800f204 <__d2b+0x74>
 800f238:	08024719 	.word	0x08024719
 800f23c:	0802472a 	.word	0x0802472a

0800f240 <__ratio>:
 800f240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f244:	b085      	sub	sp, #20
 800f246:	e9cd 1000 	strd	r1, r0, [sp]
 800f24a:	a902      	add	r1, sp, #8
 800f24c:	f7ff ff56 	bl	800f0fc <__b2d>
 800f250:	9800      	ldr	r0, [sp, #0]
 800f252:	a903      	add	r1, sp, #12
 800f254:	ec55 4b10 	vmov	r4, r5, d0
 800f258:	f7ff ff50 	bl	800f0fc <__b2d>
 800f25c:	9b01      	ldr	r3, [sp, #4]
 800f25e:	6919      	ldr	r1, [r3, #16]
 800f260:	9b00      	ldr	r3, [sp, #0]
 800f262:	691b      	ldr	r3, [r3, #16]
 800f264:	1ac9      	subs	r1, r1, r3
 800f266:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f26a:	1a9b      	subs	r3, r3, r2
 800f26c:	ec5b ab10 	vmov	sl, fp, d0
 800f270:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800f274:	2b00      	cmp	r3, #0
 800f276:	bfce      	itee	gt
 800f278:	462a      	movgt	r2, r5
 800f27a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f27e:	465a      	movle	r2, fp
 800f280:	462f      	mov	r7, r5
 800f282:	46d9      	mov	r9, fp
 800f284:	bfcc      	ite	gt
 800f286:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f28a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800f28e:	464b      	mov	r3, r9
 800f290:	4652      	mov	r2, sl
 800f292:	4620      	mov	r0, r4
 800f294:	4639      	mov	r1, r7
 800f296:	f7f1 fb59 	bl	800094c <__aeabi_ddiv>
 800f29a:	ec41 0b10 	vmov	d0, r0, r1
 800f29e:	b005      	add	sp, #20
 800f2a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f2a4 <__copybits>:
 800f2a4:	3901      	subs	r1, #1
 800f2a6:	b570      	push	{r4, r5, r6, lr}
 800f2a8:	1149      	asrs	r1, r1, #5
 800f2aa:	6914      	ldr	r4, [r2, #16]
 800f2ac:	3101      	adds	r1, #1
 800f2ae:	f102 0314 	add.w	r3, r2, #20
 800f2b2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f2b6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f2ba:	1f05      	subs	r5, r0, #4
 800f2bc:	42a3      	cmp	r3, r4
 800f2be:	d30c      	bcc.n	800f2da <__copybits+0x36>
 800f2c0:	1aa3      	subs	r3, r4, r2
 800f2c2:	3b11      	subs	r3, #17
 800f2c4:	f023 0303 	bic.w	r3, r3, #3
 800f2c8:	3211      	adds	r2, #17
 800f2ca:	42a2      	cmp	r2, r4
 800f2cc:	bf88      	it	hi
 800f2ce:	2300      	movhi	r3, #0
 800f2d0:	4418      	add	r0, r3
 800f2d2:	2300      	movs	r3, #0
 800f2d4:	4288      	cmp	r0, r1
 800f2d6:	d305      	bcc.n	800f2e4 <__copybits+0x40>
 800f2d8:	bd70      	pop	{r4, r5, r6, pc}
 800f2da:	f853 6b04 	ldr.w	r6, [r3], #4
 800f2de:	f845 6f04 	str.w	r6, [r5, #4]!
 800f2e2:	e7eb      	b.n	800f2bc <__copybits+0x18>
 800f2e4:	f840 3b04 	str.w	r3, [r0], #4
 800f2e8:	e7f4      	b.n	800f2d4 <__copybits+0x30>

0800f2ea <__any_on>:
 800f2ea:	f100 0214 	add.w	r2, r0, #20
 800f2ee:	6900      	ldr	r0, [r0, #16]
 800f2f0:	114b      	asrs	r3, r1, #5
 800f2f2:	4298      	cmp	r0, r3
 800f2f4:	b510      	push	{r4, lr}
 800f2f6:	db11      	blt.n	800f31c <__any_on+0x32>
 800f2f8:	dd0a      	ble.n	800f310 <__any_on+0x26>
 800f2fa:	f011 011f 	ands.w	r1, r1, #31
 800f2fe:	d007      	beq.n	800f310 <__any_on+0x26>
 800f300:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f304:	fa24 f001 	lsr.w	r0, r4, r1
 800f308:	fa00 f101 	lsl.w	r1, r0, r1
 800f30c:	428c      	cmp	r4, r1
 800f30e:	d10b      	bne.n	800f328 <__any_on+0x3e>
 800f310:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f314:	4293      	cmp	r3, r2
 800f316:	d803      	bhi.n	800f320 <__any_on+0x36>
 800f318:	2000      	movs	r0, #0
 800f31a:	bd10      	pop	{r4, pc}
 800f31c:	4603      	mov	r3, r0
 800f31e:	e7f7      	b.n	800f310 <__any_on+0x26>
 800f320:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f324:	2900      	cmp	r1, #0
 800f326:	d0f5      	beq.n	800f314 <__any_on+0x2a>
 800f328:	2001      	movs	r0, #1
 800f32a:	e7f6      	b.n	800f31a <__any_on+0x30>

0800f32c <sulp>:
 800f32c:	b570      	push	{r4, r5, r6, lr}
 800f32e:	4604      	mov	r4, r0
 800f330:	460d      	mov	r5, r1
 800f332:	ec45 4b10 	vmov	d0, r4, r5
 800f336:	4616      	mov	r6, r2
 800f338:	f7ff feba 	bl	800f0b0 <__ulp>
 800f33c:	ec51 0b10 	vmov	r0, r1, d0
 800f340:	b17e      	cbz	r6, 800f362 <sulp+0x36>
 800f342:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f346:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	dd09      	ble.n	800f362 <sulp+0x36>
 800f34e:	051b      	lsls	r3, r3, #20
 800f350:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800f354:	2400      	movs	r4, #0
 800f356:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800f35a:	4622      	mov	r2, r4
 800f35c:	462b      	mov	r3, r5
 800f35e:	f7f1 f9cb 	bl	80006f8 <__aeabi_dmul>
 800f362:	ec41 0b10 	vmov	d0, r0, r1
 800f366:	bd70      	pop	{r4, r5, r6, pc}

0800f368 <_strtod_l>:
 800f368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f36c:	b09f      	sub	sp, #124	@ 0x7c
 800f36e:	460c      	mov	r4, r1
 800f370:	9217      	str	r2, [sp, #92]	@ 0x5c
 800f372:	2200      	movs	r2, #0
 800f374:	921a      	str	r2, [sp, #104]	@ 0x68
 800f376:	9005      	str	r0, [sp, #20]
 800f378:	f04f 0a00 	mov.w	sl, #0
 800f37c:	f04f 0b00 	mov.w	fp, #0
 800f380:	460a      	mov	r2, r1
 800f382:	9219      	str	r2, [sp, #100]	@ 0x64
 800f384:	7811      	ldrb	r1, [r2, #0]
 800f386:	292b      	cmp	r1, #43	@ 0x2b
 800f388:	d04a      	beq.n	800f420 <_strtod_l+0xb8>
 800f38a:	d838      	bhi.n	800f3fe <_strtod_l+0x96>
 800f38c:	290d      	cmp	r1, #13
 800f38e:	d832      	bhi.n	800f3f6 <_strtod_l+0x8e>
 800f390:	2908      	cmp	r1, #8
 800f392:	d832      	bhi.n	800f3fa <_strtod_l+0x92>
 800f394:	2900      	cmp	r1, #0
 800f396:	d03b      	beq.n	800f410 <_strtod_l+0xa8>
 800f398:	2200      	movs	r2, #0
 800f39a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800f39c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800f39e:	782a      	ldrb	r2, [r5, #0]
 800f3a0:	2a30      	cmp	r2, #48	@ 0x30
 800f3a2:	f040 80b3 	bne.w	800f50c <_strtod_l+0x1a4>
 800f3a6:	786a      	ldrb	r2, [r5, #1]
 800f3a8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f3ac:	2a58      	cmp	r2, #88	@ 0x58
 800f3ae:	d16e      	bne.n	800f48e <_strtod_l+0x126>
 800f3b0:	9302      	str	r3, [sp, #8]
 800f3b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f3b4:	9301      	str	r3, [sp, #4]
 800f3b6:	ab1a      	add	r3, sp, #104	@ 0x68
 800f3b8:	9300      	str	r3, [sp, #0]
 800f3ba:	4a8e      	ldr	r2, [pc, #568]	@ (800f5f4 <_strtod_l+0x28c>)
 800f3bc:	9805      	ldr	r0, [sp, #20]
 800f3be:	ab1b      	add	r3, sp, #108	@ 0x6c
 800f3c0:	a919      	add	r1, sp, #100	@ 0x64
 800f3c2:	f001 faef 	bl	80109a4 <__gethex>
 800f3c6:	f010 060f 	ands.w	r6, r0, #15
 800f3ca:	4604      	mov	r4, r0
 800f3cc:	d005      	beq.n	800f3da <_strtod_l+0x72>
 800f3ce:	2e06      	cmp	r6, #6
 800f3d0:	d128      	bne.n	800f424 <_strtod_l+0xbc>
 800f3d2:	3501      	adds	r5, #1
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	9519      	str	r5, [sp, #100]	@ 0x64
 800f3d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f3da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	f040 858e 	bne.w	800fefe <_strtod_l+0xb96>
 800f3e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f3e4:	b1cb      	cbz	r3, 800f41a <_strtod_l+0xb2>
 800f3e6:	4652      	mov	r2, sl
 800f3e8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800f3ec:	ec43 2b10 	vmov	d0, r2, r3
 800f3f0:	b01f      	add	sp, #124	@ 0x7c
 800f3f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3f6:	2920      	cmp	r1, #32
 800f3f8:	d1ce      	bne.n	800f398 <_strtod_l+0x30>
 800f3fa:	3201      	adds	r2, #1
 800f3fc:	e7c1      	b.n	800f382 <_strtod_l+0x1a>
 800f3fe:	292d      	cmp	r1, #45	@ 0x2d
 800f400:	d1ca      	bne.n	800f398 <_strtod_l+0x30>
 800f402:	2101      	movs	r1, #1
 800f404:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f406:	1c51      	adds	r1, r2, #1
 800f408:	9119      	str	r1, [sp, #100]	@ 0x64
 800f40a:	7852      	ldrb	r2, [r2, #1]
 800f40c:	2a00      	cmp	r2, #0
 800f40e:	d1c5      	bne.n	800f39c <_strtod_l+0x34>
 800f410:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f412:	9419      	str	r4, [sp, #100]	@ 0x64
 800f414:	2b00      	cmp	r3, #0
 800f416:	f040 8570 	bne.w	800fefa <_strtod_l+0xb92>
 800f41a:	4652      	mov	r2, sl
 800f41c:	465b      	mov	r3, fp
 800f41e:	e7e5      	b.n	800f3ec <_strtod_l+0x84>
 800f420:	2100      	movs	r1, #0
 800f422:	e7ef      	b.n	800f404 <_strtod_l+0x9c>
 800f424:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f426:	b13a      	cbz	r2, 800f438 <_strtod_l+0xd0>
 800f428:	2135      	movs	r1, #53	@ 0x35
 800f42a:	a81c      	add	r0, sp, #112	@ 0x70
 800f42c:	f7ff ff3a 	bl	800f2a4 <__copybits>
 800f430:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f432:	9805      	ldr	r0, [sp, #20]
 800f434:	f7ff fb08 	bl	800ea48 <_Bfree>
 800f438:	3e01      	subs	r6, #1
 800f43a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800f43c:	2e04      	cmp	r6, #4
 800f43e:	d806      	bhi.n	800f44e <_strtod_l+0xe6>
 800f440:	e8df f006 	tbb	[pc, r6]
 800f444:	201d0314 	.word	0x201d0314
 800f448:	14          	.byte	0x14
 800f449:	00          	.byte	0x00
 800f44a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800f44e:	05e1      	lsls	r1, r4, #23
 800f450:	bf48      	it	mi
 800f452:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800f456:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f45a:	0d1b      	lsrs	r3, r3, #20
 800f45c:	051b      	lsls	r3, r3, #20
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d1bb      	bne.n	800f3da <_strtod_l+0x72>
 800f462:	f7fe fb31 	bl	800dac8 <__errno>
 800f466:	2322      	movs	r3, #34	@ 0x22
 800f468:	6003      	str	r3, [r0, #0]
 800f46a:	e7b6      	b.n	800f3da <_strtod_l+0x72>
 800f46c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800f470:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f474:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800f478:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f47c:	e7e7      	b.n	800f44e <_strtod_l+0xe6>
 800f47e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800f5fc <_strtod_l+0x294>
 800f482:	e7e4      	b.n	800f44e <_strtod_l+0xe6>
 800f484:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800f488:	f04f 3aff 	mov.w	sl, #4294967295
 800f48c:	e7df      	b.n	800f44e <_strtod_l+0xe6>
 800f48e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f490:	1c5a      	adds	r2, r3, #1
 800f492:	9219      	str	r2, [sp, #100]	@ 0x64
 800f494:	785b      	ldrb	r3, [r3, #1]
 800f496:	2b30      	cmp	r3, #48	@ 0x30
 800f498:	d0f9      	beq.n	800f48e <_strtod_l+0x126>
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d09d      	beq.n	800f3da <_strtod_l+0x72>
 800f49e:	2301      	movs	r3, #1
 800f4a0:	9309      	str	r3, [sp, #36]	@ 0x24
 800f4a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f4a4:	930c      	str	r3, [sp, #48]	@ 0x30
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	9308      	str	r3, [sp, #32]
 800f4aa:	930a      	str	r3, [sp, #40]	@ 0x28
 800f4ac:	461f      	mov	r7, r3
 800f4ae:	220a      	movs	r2, #10
 800f4b0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800f4b2:	7805      	ldrb	r5, [r0, #0]
 800f4b4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800f4b8:	b2d9      	uxtb	r1, r3
 800f4ba:	2909      	cmp	r1, #9
 800f4bc:	d928      	bls.n	800f510 <_strtod_l+0x1a8>
 800f4be:	494e      	ldr	r1, [pc, #312]	@ (800f5f8 <_strtod_l+0x290>)
 800f4c0:	2201      	movs	r2, #1
 800f4c2:	f001 f979 	bl	80107b8 <strncmp>
 800f4c6:	2800      	cmp	r0, #0
 800f4c8:	d032      	beq.n	800f530 <_strtod_l+0x1c8>
 800f4ca:	2000      	movs	r0, #0
 800f4cc:	462a      	mov	r2, r5
 800f4ce:	4681      	mov	r9, r0
 800f4d0:	463d      	mov	r5, r7
 800f4d2:	4603      	mov	r3, r0
 800f4d4:	2a65      	cmp	r2, #101	@ 0x65
 800f4d6:	d001      	beq.n	800f4dc <_strtod_l+0x174>
 800f4d8:	2a45      	cmp	r2, #69	@ 0x45
 800f4da:	d114      	bne.n	800f506 <_strtod_l+0x19e>
 800f4dc:	b91d      	cbnz	r5, 800f4e6 <_strtod_l+0x17e>
 800f4de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f4e0:	4302      	orrs	r2, r0
 800f4e2:	d095      	beq.n	800f410 <_strtod_l+0xa8>
 800f4e4:	2500      	movs	r5, #0
 800f4e6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800f4e8:	1c62      	adds	r2, r4, #1
 800f4ea:	9219      	str	r2, [sp, #100]	@ 0x64
 800f4ec:	7862      	ldrb	r2, [r4, #1]
 800f4ee:	2a2b      	cmp	r2, #43	@ 0x2b
 800f4f0:	d077      	beq.n	800f5e2 <_strtod_l+0x27a>
 800f4f2:	2a2d      	cmp	r2, #45	@ 0x2d
 800f4f4:	d07b      	beq.n	800f5ee <_strtod_l+0x286>
 800f4f6:	f04f 0c00 	mov.w	ip, #0
 800f4fa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800f4fe:	2909      	cmp	r1, #9
 800f500:	f240 8082 	bls.w	800f608 <_strtod_l+0x2a0>
 800f504:	9419      	str	r4, [sp, #100]	@ 0x64
 800f506:	f04f 0800 	mov.w	r8, #0
 800f50a:	e0a2      	b.n	800f652 <_strtod_l+0x2ea>
 800f50c:	2300      	movs	r3, #0
 800f50e:	e7c7      	b.n	800f4a0 <_strtod_l+0x138>
 800f510:	2f08      	cmp	r7, #8
 800f512:	bfd5      	itete	le
 800f514:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800f516:	9908      	ldrgt	r1, [sp, #32]
 800f518:	fb02 3301 	mlale	r3, r2, r1, r3
 800f51c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800f520:	f100 0001 	add.w	r0, r0, #1
 800f524:	bfd4      	ite	le
 800f526:	930a      	strle	r3, [sp, #40]	@ 0x28
 800f528:	9308      	strgt	r3, [sp, #32]
 800f52a:	3701      	adds	r7, #1
 800f52c:	9019      	str	r0, [sp, #100]	@ 0x64
 800f52e:	e7bf      	b.n	800f4b0 <_strtod_l+0x148>
 800f530:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f532:	1c5a      	adds	r2, r3, #1
 800f534:	9219      	str	r2, [sp, #100]	@ 0x64
 800f536:	785a      	ldrb	r2, [r3, #1]
 800f538:	b37f      	cbz	r7, 800f59a <_strtod_l+0x232>
 800f53a:	4681      	mov	r9, r0
 800f53c:	463d      	mov	r5, r7
 800f53e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800f542:	2b09      	cmp	r3, #9
 800f544:	d912      	bls.n	800f56c <_strtod_l+0x204>
 800f546:	2301      	movs	r3, #1
 800f548:	e7c4      	b.n	800f4d4 <_strtod_l+0x16c>
 800f54a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f54c:	1c5a      	adds	r2, r3, #1
 800f54e:	9219      	str	r2, [sp, #100]	@ 0x64
 800f550:	785a      	ldrb	r2, [r3, #1]
 800f552:	3001      	adds	r0, #1
 800f554:	2a30      	cmp	r2, #48	@ 0x30
 800f556:	d0f8      	beq.n	800f54a <_strtod_l+0x1e2>
 800f558:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800f55c:	2b08      	cmp	r3, #8
 800f55e:	f200 84d3 	bhi.w	800ff08 <_strtod_l+0xba0>
 800f562:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f564:	930c      	str	r3, [sp, #48]	@ 0x30
 800f566:	4681      	mov	r9, r0
 800f568:	2000      	movs	r0, #0
 800f56a:	4605      	mov	r5, r0
 800f56c:	3a30      	subs	r2, #48	@ 0x30
 800f56e:	f100 0301 	add.w	r3, r0, #1
 800f572:	d02a      	beq.n	800f5ca <_strtod_l+0x262>
 800f574:	4499      	add	r9, r3
 800f576:	eb00 0c05 	add.w	ip, r0, r5
 800f57a:	462b      	mov	r3, r5
 800f57c:	210a      	movs	r1, #10
 800f57e:	4563      	cmp	r3, ip
 800f580:	d10d      	bne.n	800f59e <_strtod_l+0x236>
 800f582:	1c69      	adds	r1, r5, #1
 800f584:	4401      	add	r1, r0
 800f586:	4428      	add	r0, r5
 800f588:	2808      	cmp	r0, #8
 800f58a:	dc16      	bgt.n	800f5ba <_strtod_l+0x252>
 800f58c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f58e:	230a      	movs	r3, #10
 800f590:	fb03 2300 	mla	r3, r3, r0, r2
 800f594:	930a      	str	r3, [sp, #40]	@ 0x28
 800f596:	2300      	movs	r3, #0
 800f598:	e018      	b.n	800f5cc <_strtod_l+0x264>
 800f59a:	4638      	mov	r0, r7
 800f59c:	e7da      	b.n	800f554 <_strtod_l+0x1ec>
 800f59e:	2b08      	cmp	r3, #8
 800f5a0:	f103 0301 	add.w	r3, r3, #1
 800f5a4:	dc03      	bgt.n	800f5ae <_strtod_l+0x246>
 800f5a6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800f5a8:	434e      	muls	r6, r1
 800f5aa:	960a      	str	r6, [sp, #40]	@ 0x28
 800f5ac:	e7e7      	b.n	800f57e <_strtod_l+0x216>
 800f5ae:	2b10      	cmp	r3, #16
 800f5b0:	bfde      	ittt	le
 800f5b2:	9e08      	ldrle	r6, [sp, #32]
 800f5b4:	434e      	mulle	r6, r1
 800f5b6:	9608      	strle	r6, [sp, #32]
 800f5b8:	e7e1      	b.n	800f57e <_strtod_l+0x216>
 800f5ba:	280f      	cmp	r0, #15
 800f5bc:	dceb      	bgt.n	800f596 <_strtod_l+0x22e>
 800f5be:	9808      	ldr	r0, [sp, #32]
 800f5c0:	230a      	movs	r3, #10
 800f5c2:	fb03 2300 	mla	r3, r3, r0, r2
 800f5c6:	9308      	str	r3, [sp, #32]
 800f5c8:	e7e5      	b.n	800f596 <_strtod_l+0x22e>
 800f5ca:	4629      	mov	r1, r5
 800f5cc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f5ce:	1c50      	adds	r0, r2, #1
 800f5d0:	9019      	str	r0, [sp, #100]	@ 0x64
 800f5d2:	7852      	ldrb	r2, [r2, #1]
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	460d      	mov	r5, r1
 800f5d8:	e7b1      	b.n	800f53e <_strtod_l+0x1d6>
 800f5da:	f04f 0900 	mov.w	r9, #0
 800f5de:	2301      	movs	r3, #1
 800f5e0:	e77d      	b.n	800f4de <_strtod_l+0x176>
 800f5e2:	f04f 0c00 	mov.w	ip, #0
 800f5e6:	1ca2      	adds	r2, r4, #2
 800f5e8:	9219      	str	r2, [sp, #100]	@ 0x64
 800f5ea:	78a2      	ldrb	r2, [r4, #2]
 800f5ec:	e785      	b.n	800f4fa <_strtod_l+0x192>
 800f5ee:	f04f 0c01 	mov.w	ip, #1
 800f5f2:	e7f8      	b.n	800f5e6 <_strtod_l+0x27e>
 800f5f4:	08024898 	.word	0x08024898
 800f5f8:	08024880 	.word	0x08024880
 800f5fc:	7ff00000 	.word	0x7ff00000
 800f600:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f602:	1c51      	adds	r1, r2, #1
 800f604:	9119      	str	r1, [sp, #100]	@ 0x64
 800f606:	7852      	ldrb	r2, [r2, #1]
 800f608:	2a30      	cmp	r2, #48	@ 0x30
 800f60a:	d0f9      	beq.n	800f600 <_strtod_l+0x298>
 800f60c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800f610:	2908      	cmp	r1, #8
 800f612:	f63f af78 	bhi.w	800f506 <_strtod_l+0x19e>
 800f616:	3a30      	subs	r2, #48	@ 0x30
 800f618:	920e      	str	r2, [sp, #56]	@ 0x38
 800f61a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f61c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800f61e:	f04f 080a 	mov.w	r8, #10
 800f622:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f624:	1c56      	adds	r6, r2, #1
 800f626:	9619      	str	r6, [sp, #100]	@ 0x64
 800f628:	7852      	ldrb	r2, [r2, #1]
 800f62a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800f62e:	f1be 0f09 	cmp.w	lr, #9
 800f632:	d939      	bls.n	800f6a8 <_strtod_l+0x340>
 800f634:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f636:	1a76      	subs	r6, r6, r1
 800f638:	2e08      	cmp	r6, #8
 800f63a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800f63e:	dc03      	bgt.n	800f648 <_strtod_l+0x2e0>
 800f640:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f642:	4588      	cmp	r8, r1
 800f644:	bfa8      	it	ge
 800f646:	4688      	movge	r8, r1
 800f648:	f1bc 0f00 	cmp.w	ip, #0
 800f64c:	d001      	beq.n	800f652 <_strtod_l+0x2ea>
 800f64e:	f1c8 0800 	rsb	r8, r8, #0
 800f652:	2d00      	cmp	r5, #0
 800f654:	d14e      	bne.n	800f6f4 <_strtod_l+0x38c>
 800f656:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f658:	4308      	orrs	r0, r1
 800f65a:	f47f aebe 	bne.w	800f3da <_strtod_l+0x72>
 800f65e:	2b00      	cmp	r3, #0
 800f660:	f47f aed6 	bne.w	800f410 <_strtod_l+0xa8>
 800f664:	2a69      	cmp	r2, #105	@ 0x69
 800f666:	d028      	beq.n	800f6ba <_strtod_l+0x352>
 800f668:	dc25      	bgt.n	800f6b6 <_strtod_l+0x34e>
 800f66a:	2a49      	cmp	r2, #73	@ 0x49
 800f66c:	d025      	beq.n	800f6ba <_strtod_l+0x352>
 800f66e:	2a4e      	cmp	r2, #78	@ 0x4e
 800f670:	f47f aece 	bne.w	800f410 <_strtod_l+0xa8>
 800f674:	499b      	ldr	r1, [pc, #620]	@ (800f8e4 <_strtod_l+0x57c>)
 800f676:	a819      	add	r0, sp, #100	@ 0x64
 800f678:	f001 fbb6 	bl	8010de8 <__match>
 800f67c:	2800      	cmp	r0, #0
 800f67e:	f43f aec7 	beq.w	800f410 <_strtod_l+0xa8>
 800f682:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f684:	781b      	ldrb	r3, [r3, #0]
 800f686:	2b28      	cmp	r3, #40	@ 0x28
 800f688:	d12e      	bne.n	800f6e8 <_strtod_l+0x380>
 800f68a:	4997      	ldr	r1, [pc, #604]	@ (800f8e8 <_strtod_l+0x580>)
 800f68c:	aa1c      	add	r2, sp, #112	@ 0x70
 800f68e:	a819      	add	r0, sp, #100	@ 0x64
 800f690:	f001 fbbe 	bl	8010e10 <__hexnan>
 800f694:	2805      	cmp	r0, #5
 800f696:	d127      	bne.n	800f6e8 <_strtod_l+0x380>
 800f698:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f69a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800f69e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800f6a2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800f6a6:	e698      	b.n	800f3da <_strtod_l+0x72>
 800f6a8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f6aa:	fb08 2101 	mla	r1, r8, r1, r2
 800f6ae:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800f6b2:	920e      	str	r2, [sp, #56]	@ 0x38
 800f6b4:	e7b5      	b.n	800f622 <_strtod_l+0x2ba>
 800f6b6:	2a6e      	cmp	r2, #110	@ 0x6e
 800f6b8:	e7da      	b.n	800f670 <_strtod_l+0x308>
 800f6ba:	498c      	ldr	r1, [pc, #560]	@ (800f8ec <_strtod_l+0x584>)
 800f6bc:	a819      	add	r0, sp, #100	@ 0x64
 800f6be:	f001 fb93 	bl	8010de8 <__match>
 800f6c2:	2800      	cmp	r0, #0
 800f6c4:	f43f aea4 	beq.w	800f410 <_strtod_l+0xa8>
 800f6c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f6ca:	4989      	ldr	r1, [pc, #548]	@ (800f8f0 <_strtod_l+0x588>)
 800f6cc:	3b01      	subs	r3, #1
 800f6ce:	a819      	add	r0, sp, #100	@ 0x64
 800f6d0:	9319      	str	r3, [sp, #100]	@ 0x64
 800f6d2:	f001 fb89 	bl	8010de8 <__match>
 800f6d6:	b910      	cbnz	r0, 800f6de <_strtod_l+0x376>
 800f6d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f6da:	3301      	adds	r3, #1
 800f6dc:	9319      	str	r3, [sp, #100]	@ 0x64
 800f6de:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800f900 <_strtod_l+0x598>
 800f6e2:	f04f 0a00 	mov.w	sl, #0
 800f6e6:	e678      	b.n	800f3da <_strtod_l+0x72>
 800f6e8:	4882      	ldr	r0, [pc, #520]	@ (800f8f4 <_strtod_l+0x58c>)
 800f6ea:	f001 f8b9 	bl	8010860 <nan>
 800f6ee:	ec5b ab10 	vmov	sl, fp, d0
 800f6f2:	e672      	b.n	800f3da <_strtod_l+0x72>
 800f6f4:	eba8 0309 	sub.w	r3, r8, r9
 800f6f8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f6fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800f6fc:	2f00      	cmp	r7, #0
 800f6fe:	bf08      	it	eq
 800f700:	462f      	moveq	r7, r5
 800f702:	2d10      	cmp	r5, #16
 800f704:	462c      	mov	r4, r5
 800f706:	bfa8      	it	ge
 800f708:	2410      	movge	r4, #16
 800f70a:	f7f0 ff7b 	bl	8000604 <__aeabi_ui2d>
 800f70e:	2d09      	cmp	r5, #9
 800f710:	4682      	mov	sl, r0
 800f712:	468b      	mov	fp, r1
 800f714:	dc13      	bgt.n	800f73e <_strtod_l+0x3d6>
 800f716:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f718:	2b00      	cmp	r3, #0
 800f71a:	f43f ae5e 	beq.w	800f3da <_strtod_l+0x72>
 800f71e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f720:	dd78      	ble.n	800f814 <_strtod_l+0x4ac>
 800f722:	2b16      	cmp	r3, #22
 800f724:	dc5f      	bgt.n	800f7e6 <_strtod_l+0x47e>
 800f726:	4974      	ldr	r1, [pc, #464]	@ (800f8f8 <_strtod_l+0x590>)
 800f728:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f72c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f730:	4652      	mov	r2, sl
 800f732:	465b      	mov	r3, fp
 800f734:	f7f0 ffe0 	bl	80006f8 <__aeabi_dmul>
 800f738:	4682      	mov	sl, r0
 800f73a:	468b      	mov	fp, r1
 800f73c:	e64d      	b.n	800f3da <_strtod_l+0x72>
 800f73e:	4b6e      	ldr	r3, [pc, #440]	@ (800f8f8 <_strtod_l+0x590>)
 800f740:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f744:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800f748:	f7f0 ffd6 	bl	80006f8 <__aeabi_dmul>
 800f74c:	4682      	mov	sl, r0
 800f74e:	9808      	ldr	r0, [sp, #32]
 800f750:	468b      	mov	fp, r1
 800f752:	f7f0 ff57 	bl	8000604 <__aeabi_ui2d>
 800f756:	4602      	mov	r2, r0
 800f758:	460b      	mov	r3, r1
 800f75a:	4650      	mov	r0, sl
 800f75c:	4659      	mov	r1, fp
 800f75e:	f7f0 fe15 	bl	800038c <__adddf3>
 800f762:	2d0f      	cmp	r5, #15
 800f764:	4682      	mov	sl, r0
 800f766:	468b      	mov	fp, r1
 800f768:	ddd5      	ble.n	800f716 <_strtod_l+0x3ae>
 800f76a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f76c:	1b2c      	subs	r4, r5, r4
 800f76e:	441c      	add	r4, r3
 800f770:	2c00      	cmp	r4, #0
 800f772:	f340 8096 	ble.w	800f8a2 <_strtod_l+0x53a>
 800f776:	f014 030f 	ands.w	r3, r4, #15
 800f77a:	d00a      	beq.n	800f792 <_strtod_l+0x42a>
 800f77c:	495e      	ldr	r1, [pc, #376]	@ (800f8f8 <_strtod_l+0x590>)
 800f77e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f782:	4652      	mov	r2, sl
 800f784:	465b      	mov	r3, fp
 800f786:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f78a:	f7f0 ffb5 	bl	80006f8 <__aeabi_dmul>
 800f78e:	4682      	mov	sl, r0
 800f790:	468b      	mov	fp, r1
 800f792:	f034 040f 	bics.w	r4, r4, #15
 800f796:	d073      	beq.n	800f880 <_strtod_l+0x518>
 800f798:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800f79c:	dd48      	ble.n	800f830 <_strtod_l+0x4c8>
 800f79e:	2400      	movs	r4, #0
 800f7a0:	46a0      	mov	r8, r4
 800f7a2:	940a      	str	r4, [sp, #40]	@ 0x28
 800f7a4:	46a1      	mov	r9, r4
 800f7a6:	9a05      	ldr	r2, [sp, #20]
 800f7a8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800f900 <_strtod_l+0x598>
 800f7ac:	2322      	movs	r3, #34	@ 0x22
 800f7ae:	6013      	str	r3, [r2, #0]
 800f7b0:	f04f 0a00 	mov.w	sl, #0
 800f7b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	f43f ae0f 	beq.w	800f3da <_strtod_l+0x72>
 800f7bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f7be:	9805      	ldr	r0, [sp, #20]
 800f7c0:	f7ff f942 	bl	800ea48 <_Bfree>
 800f7c4:	9805      	ldr	r0, [sp, #20]
 800f7c6:	4649      	mov	r1, r9
 800f7c8:	f7ff f93e 	bl	800ea48 <_Bfree>
 800f7cc:	9805      	ldr	r0, [sp, #20]
 800f7ce:	4641      	mov	r1, r8
 800f7d0:	f7ff f93a 	bl	800ea48 <_Bfree>
 800f7d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f7d6:	9805      	ldr	r0, [sp, #20]
 800f7d8:	f7ff f936 	bl	800ea48 <_Bfree>
 800f7dc:	9805      	ldr	r0, [sp, #20]
 800f7de:	4621      	mov	r1, r4
 800f7e0:	f7ff f932 	bl	800ea48 <_Bfree>
 800f7e4:	e5f9      	b.n	800f3da <_strtod_l+0x72>
 800f7e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f7e8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800f7ec:	4293      	cmp	r3, r2
 800f7ee:	dbbc      	blt.n	800f76a <_strtod_l+0x402>
 800f7f0:	4c41      	ldr	r4, [pc, #260]	@ (800f8f8 <_strtod_l+0x590>)
 800f7f2:	f1c5 050f 	rsb	r5, r5, #15
 800f7f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f7fa:	4652      	mov	r2, sl
 800f7fc:	465b      	mov	r3, fp
 800f7fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f802:	f7f0 ff79 	bl	80006f8 <__aeabi_dmul>
 800f806:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f808:	1b5d      	subs	r5, r3, r5
 800f80a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f80e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f812:	e78f      	b.n	800f734 <_strtod_l+0x3cc>
 800f814:	3316      	adds	r3, #22
 800f816:	dba8      	blt.n	800f76a <_strtod_l+0x402>
 800f818:	4b37      	ldr	r3, [pc, #220]	@ (800f8f8 <_strtod_l+0x590>)
 800f81a:	eba9 0808 	sub.w	r8, r9, r8
 800f81e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800f822:	e9d8 2300 	ldrd	r2, r3, [r8]
 800f826:	4650      	mov	r0, sl
 800f828:	4659      	mov	r1, fp
 800f82a:	f7f1 f88f 	bl	800094c <__aeabi_ddiv>
 800f82e:	e783      	b.n	800f738 <_strtod_l+0x3d0>
 800f830:	4b32      	ldr	r3, [pc, #200]	@ (800f8fc <_strtod_l+0x594>)
 800f832:	9308      	str	r3, [sp, #32]
 800f834:	2300      	movs	r3, #0
 800f836:	1124      	asrs	r4, r4, #4
 800f838:	4650      	mov	r0, sl
 800f83a:	4659      	mov	r1, fp
 800f83c:	461e      	mov	r6, r3
 800f83e:	2c01      	cmp	r4, #1
 800f840:	dc21      	bgt.n	800f886 <_strtod_l+0x51e>
 800f842:	b10b      	cbz	r3, 800f848 <_strtod_l+0x4e0>
 800f844:	4682      	mov	sl, r0
 800f846:	468b      	mov	fp, r1
 800f848:	492c      	ldr	r1, [pc, #176]	@ (800f8fc <_strtod_l+0x594>)
 800f84a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800f84e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800f852:	4652      	mov	r2, sl
 800f854:	465b      	mov	r3, fp
 800f856:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f85a:	f7f0 ff4d 	bl	80006f8 <__aeabi_dmul>
 800f85e:	4b28      	ldr	r3, [pc, #160]	@ (800f900 <_strtod_l+0x598>)
 800f860:	460a      	mov	r2, r1
 800f862:	400b      	ands	r3, r1
 800f864:	4927      	ldr	r1, [pc, #156]	@ (800f904 <_strtod_l+0x59c>)
 800f866:	428b      	cmp	r3, r1
 800f868:	4682      	mov	sl, r0
 800f86a:	d898      	bhi.n	800f79e <_strtod_l+0x436>
 800f86c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800f870:	428b      	cmp	r3, r1
 800f872:	bf86      	itte	hi
 800f874:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800f908 <_strtod_l+0x5a0>
 800f878:	f04f 3aff 	movhi.w	sl, #4294967295
 800f87c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800f880:	2300      	movs	r3, #0
 800f882:	9308      	str	r3, [sp, #32]
 800f884:	e07a      	b.n	800f97c <_strtod_l+0x614>
 800f886:	07e2      	lsls	r2, r4, #31
 800f888:	d505      	bpl.n	800f896 <_strtod_l+0x52e>
 800f88a:	9b08      	ldr	r3, [sp, #32]
 800f88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f890:	f7f0 ff32 	bl	80006f8 <__aeabi_dmul>
 800f894:	2301      	movs	r3, #1
 800f896:	9a08      	ldr	r2, [sp, #32]
 800f898:	3208      	adds	r2, #8
 800f89a:	3601      	adds	r6, #1
 800f89c:	1064      	asrs	r4, r4, #1
 800f89e:	9208      	str	r2, [sp, #32]
 800f8a0:	e7cd      	b.n	800f83e <_strtod_l+0x4d6>
 800f8a2:	d0ed      	beq.n	800f880 <_strtod_l+0x518>
 800f8a4:	4264      	negs	r4, r4
 800f8a6:	f014 020f 	ands.w	r2, r4, #15
 800f8aa:	d00a      	beq.n	800f8c2 <_strtod_l+0x55a>
 800f8ac:	4b12      	ldr	r3, [pc, #72]	@ (800f8f8 <_strtod_l+0x590>)
 800f8ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f8b2:	4650      	mov	r0, sl
 800f8b4:	4659      	mov	r1, fp
 800f8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8ba:	f7f1 f847 	bl	800094c <__aeabi_ddiv>
 800f8be:	4682      	mov	sl, r0
 800f8c0:	468b      	mov	fp, r1
 800f8c2:	1124      	asrs	r4, r4, #4
 800f8c4:	d0dc      	beq.n	800f880 <_strtod_l+0x518>
 800f8c6:	2c1f      	cmp	r4, #31
 800f8c8:	dd20      	ble.n	800f90c <_strtod_l+0x5a4>
 800f8ca:	2400      	movs	r4, #0
 800f8cc:	46a0      	mov	r8, r4
 800f8ce:	940a      	str	r4, [sp, #40]	@ 0x28
 800f8d0:	46a1      	mov	r9, r4
 800f8d2:	9a05      	ldr	r2, [sp, #20]
 800f8d4:	2322      	movs	r3, #34	@ 0x22
 800f8d6:	f04f 0a00 	mov.w	sl, #0
 800f8da:	f04f 0b00 	mov.w	fp, #0
 800f8de:	6013      	str	r3, [r2, #0]
 800f8e0:	e768      	b.n	800f7b4 <_strtod_l+0x44c>
 800f8e2:	bf00      	nop
 800f8e4:	08024671 	.word	0x08024671
 800f8e8:	08024884 	.word	0x08024884
 800f8ec:	08024669 	.word	0x08024669
 800f8f0:	080246a0 	.word	0x080246a0
 800f8f4:	08024a2d 	.word	0x08024a2d
 800f8f8:	080247b8 	.word	0x080247b8
 800f8fc:	08024790 	.word	0x08024790
 800f900:	7ff00000 	.word	0x7ff00000
 800f904:	7ca00000 	.word	0x7ca00000
 800f908:	7fefffff 	.word	0x7fefffff
 800f90c:	f014 0310 	ands.w	r3, r4, #16
 800f910:	bf18      	it	ne
 800f912:	236a      	movne	r3, #106	@ 0x6a
 800f914:	4ea9      	ldr	r6, [pc, #676]	@ (800fbbc <_strtod_l+0x854>)
 800f916:	9308      	str	r3, [sp, #32]
 800f918:	4650      	mov	r0, sl
 800f91a:	4659      	mov	r1, fp
 800f91c:	2300      	movs	r3, #0
 800f91e:	07e2      	lsls	r2, r4, #31
 800f920:	d504      	bpl.n	800f92c <_strtod_l+0x5c4>
 800f922:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f926:	f7f0 fee7 	bl	80006f8 <__aeabi_dmul>
 800f92a:	2301      	movs	r3, #1
 800f92c:	1064      	asrs	r4, r4, #1
 800f92e:	f106 0608 	add.w	r6, r6, #8
 800f932:	d1f4      	bne.n	800f91e <_strtod_l+0x5b6>
 800f934:	b10b      	cbz	r3, 800f93a <_strtod_l+0x5d2>
 800f936:	4682      	mov	sl, r0
 800f938:	468b      	mov	fp, r1
 800f93a:	9b08      	ldr	r3, [sp, #32]
 800f93c:	b1b3      	cbz	r3, 800f96c <_strtod_l+0x604>
 800f93e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f942:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800f946:	2b00      	cmp	r3, #0
 800f948:	4659      	mov	r1, fp
 800f94a:	dd0f      	ble.n	800f96c <_strtod_l+0x604>
 800f94c:	2b1f      	cmp	r3, #31
 800f94e:	dd55      	ble.n	800f9fc <_strtod_l+0x694>
 800f950:	2b34      	cmp	r3, #52	@ 0x34
 800f952:	bfde      	ittt	le
 800f954:	f04f 33ff 	movle.w	r3, #4294967295
 800f958:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800f95c:	4093      	lslle	r3, r2
 800f95e:	f04f 0a00 	mov.w	sl, #0
 800f962:	bfcc      	ite	gt
 800f964:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800f968:	ea03 0b01 	andle.w	fp, r3, r1
 800f96c:	2200      	movs	r2, #0
 800f96e:	2300      	movs	r3, #0
 800f970:	4650      	mov	r0, sl
 800f972:	4659      	mov	r1, fp
 800f974:	f7f1 f928 	bl	8000bc8 <__aeabi_dcmpeq>
 800f978:	2800      	cmp	r0, #0
 800f97a:	d1a6      	bne.n	800f8ca <_strtod_l+0x562>
 800f97c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f97e:	9300      	str	r3, [sp, #0]
 800f980:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f982:	9805      	ldr	r0, [sp, #20]
 800f984:	462b      	mov	r3, r5
 800f986:	463a      	mov	r2, r7
 800f988:	f7ff f8c6 	bl	800eb18 <__s2b>
 800f98c:	900a      	str	r0, [sp, #40]	@ 0x28
 800f98e:	2800      	cmp	r0, #0
 800f990:	f43f af05 	beq.w	800f79e <_strtod_l+0x436>
 800f994:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f996:	2a00      	cmp	r2, #0
 800f998:	eba9 0308 	sub.w	r3, r9, r8
 800f99c:	bfa8      	it	ge
 800f99e:	2300      	movge	r3, #0
 800f9a0:	9312      	str	r3, [sp, #72]	@ 0x48
 800f9a2:	2400      	movs	r4, #0
 800f9a4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f9a8:	9316      	str	r3, [sp, #88]	@ 0x58
 800f9aa:	46a0      	mov	r8, r4
 800f9ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f9ae:	9805      	ldr	r0, [sp, #20]
 800f9b0:	6859      	ldr	r1, [r3, #4]
 800f9b2:	f7ff f809 	bl	800e9c8 <_Balloc>
 800f9b6:	4681      	mov	r9, r0
 800f9b8:	2800      	cmp	r0, #0
 800f9ba:	f43f aef4 	beq.w	800f7a6 <_strtod_l+0x43e>
 800f9be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f9c0:	691a      	ldr	r2, [r3, #16]
 800f9c2:	3202      	adds	r2, #2
 800f9c4:	f103 010c 	add.w	r1, r3, #12
 800f9c8:	0092      	lsls	r2, r2, #2
 800f9ca:	300c      	adds	r0, #12
 800f9cc:	f000 ff38 	bl	8010840 <memcpy>
 800f9d0:	ec4b ab10 	vmov	d0, sl, fp
 800f9d4:	9805      	ldr	r0, [sp, #20]
 800f9d6:	aa1c      	add	r2, sp, #112	@ 0x70
 800f9d8:	a91b      	add	r1, sp, #108	@ 0x6c
 800f9da:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800f9de:	f7ff fbd7 	bl	800f190 <__d2b>
 800f9e2:	901a      	str	r0, [sp, #104]	@ 0x68
 800f9e4:	2800      	cmp	r0, #0
 800f9e6:	f43f aede 	beq.w	800f7a6 <_strtod_l+0x43e>
 800f9ea:	9805      	ldr	r0, [sp, #20]
 800f9ec:	2101      	movs	r1, #1
 800f9ee:	f7ff f929 	bl	800ec44 <__i2b>
 800f9f2:	4680      	mov	r8, r0
 800f9f4:	b948      	cbnz	r0, 800fa0a <_strtod_l+0x6a2>
 800f9f6:	f04f 0800 	mov.w	r8, #0
 800f9fa:	e6d4      	b.n	800f7a6 <_strtod_l+0x43e>
 800f9fc:	f04f 32ff 	mov.w	r2, #4294967295
 800fa00:	fa02 f303 	lsl.w	r3, r2, r3
 800fa04:	ea03 0a0a 	and.w	sl, r3, sl
 800fa08:	e7b0      	b.n	800f96c <_strtod_l+0x604>
 800fa0a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800fa0c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800fa0e:	2d00      	cmp	r5, #0
 800fa10:	bfab      	itete	ge
 800fa12:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800fa14:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800fa16:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800fa18:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800fa1a:	bfac      	ite	ge
 800fa1c:	18ef      	addge	r7, r5, r3
 800fa1e:	1b5e      	sublt	r6, r3, r5
 800fa20:	9b08      	ldr	r3, [sp, #32]
 800fa22:	1aed      	subs	r5, r5, r3
 800fa24:	4415      	add	r5, r2
 800fa26:	4b66      	ldr	r3, [pc, #408]	@ (800fbc0 <_strtod_l+0x858>)
 800fa28:	3d01      	subs	r5, #1
 800fa2a:	429d      	cmp	r5, r3
 800fa2c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800fa30:	da50      	bge.n	800fad4 <_strtod_l+0x76c>
 800fa32:	1b5b      	subs	r3, r3, r5
 800fa34:	2b1f      	cmp	r3, #31
 800fa36:	eba2 0203 	sub.w	r2, r2, r3
 800fa3a:	f04f 0101 	mov.w	r1, #1
 800fa3e:	dc3d      	bgt.n	800fabc <_strtod_l+0x754>
 800fa40:	fa01 f303 	lsl.w	r3, r1, r3
 800fa44:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fa46:	2300      	movs	r3, #0
 800fa48:	9310      	str	r3, [sp, #64]	@ 0x40
 800fa4a:	18bd      	adds	r5, r7, r2
 800fa4c:	9b08      	ldr	r3, [sp, #32]
 800fa4e:	42af      	cmp	r7, r5
 800fa50:	4416      	add	r6, r2
 800fa52:	441e      	add	r6, r3
 800fa54:	463b      	mov	r3, r7
 800fa56:	bfa8      	it	ge
 800fa58:	462b      	movge	r3, r5
 800fa5a:	42b3      	cmp	r3, r6
 800fa5c:	bfa8      	it	ge
 800fa5e:	4633      	movge	r3, r6
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	bfc2      	ittt	gt
 800fa64:	1aed      	subgt	r5, r5, r3
 800fa66:	1af6      	subgt	r6, r6, r3
 800fa68:	1aff      	subgt	r7, r7, r3
 800fa6a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	dd16      	ble.n	800fa9e <_strtod_l+0x736>
 800fa70:	4641      	mov	r1, r8
 800fa72:	9805      	ldr	r0, [sp, #20]
 800fa74:	461a      	mov	r2, r3
 800fa76:	f7ff f9a5 	bl	800edc4 <__pow5mult>
 800fa7a:	4680      	mov	r8, r0
 800fa7c:	2800      	cmp	r0, #0
 800fa7e:	d0ba      	beq.n	800f9f6 <_strtod_l+0x68e>
 800fa80:	4601      	mov	r1, r0
 800fa82:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800fa84:	9805      	ldr	r0, [sp, #20]
 800fa86:	f7ff f8f3 	bl	800ec70 <__multiply>
 800fa8a:	900e      	str	r0, [sp, #56]	@ 0x38
 800fa8c:	2800      	cmp	r0, #0
 800fa8e:	f43f ae8a 	beq.w	800f7a6 <_strtod_l+0x43e>
 800fa92:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fa94:	9805      	ldr	r0, [sp, #20]
 800fa96:	f7fe ffd7 	bl	800ea48 <_Bfree>
 800fa9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fa9c:	931a      	str	r3, [sp, #104]	@ 0x68
 800fa9e:	2d00      	cmp	r5, #0
 800faa0:	dc1d      	bgt.n	800fade <_strtod_l+0x776>
 800faa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	dd23      	ble.n	800faf0 <_strtod_l+0x788>
 800faa8:	4649      	mov	r1, r9
 800faaa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800faac:	9805      	ldr	r0, [sp, #20]
 800faae:	f7ff f989 	bl	800edc4 <__pow5mult>
 800fab2:	4681      	mov	r9, r0
 800fab4:	b9e0      	cbnz	r0, 800faf0 <_strtod_l+0x788>
 800fab6:	f04f 0900 	mov.w	r9, #0
 800faba:	e674      	b.n	800f7a6 <_strtod_l+0x43e>
 800fabc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800fac0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800fac4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800fac8:	35e2      	adds	r5, #226	@ 0xe2
 800faca:	fa01 f305 	lsl.w	r3, r1, r5
 800face:	9310      	str	r3, [sp, #64]	@ 0x40
 800fad0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800fad2:	e7ba      	b.n	800fa4a <_strtod_l+0x6e2>
 800fad4:	2300      	movs	r3, #0
 800fad6:	9310      	str	r3, [sp, #64]	@ 0x40
 800fad8:	2301      	movs	r3, #1
 800fada:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fadc:	e7b5      	b.n	800fa4a <_strtod_l+0x6e2>
 800fade:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fae0:	9805      	ldr	r0, [sp, #20]
 800fae2:	462a      	mov	r2, r5
 800fae4:	f7ff f9c8 	bl	800ee78 <__lshift>
 800fae8:	901a      	str	r0, [sp, #104]	@ 0x68
 800faea:	2800      	cmp	r0, #0
 800faec:	d1d9      	bne.n	800faa2 <_strtod_l+0x73a>
 800faee:	e65a      	b.n	800f7a6 <_strtod_l+0x43e>
 800faf0:	2e00      	cmp	r6, #0
 800faf2:	dd07      	ble.n	800fb04 <_strtod_l+0x79c>
 800faf4:	4649      	mov	r1, r9
 800faf6:	9805      	ldr	r0, [sp, #20]
 800faf8:	4632      	mov	r2, r6
 800fafa:	f7ff f9bd 	bl	800ee78 <__lshift>
 800fafe:	4681      	mov	r9, r0
 800fb00:	2800      	cmp	r0, #0
 800fb02:	d0d8      	beq.n	800fab6 <_strtod_l+0x74e>
 800fb04:	2f00      	cmp	r7, #0
 800fb06:	dd08      	ble.n	800fb1a <_strtod_l+0x7b2>
 800fb08:	4641      	mov	r1, r8
 800fb0a:	9805      	ldr	r0, [sp, #20]
 800fb0c:	463a      	mov	r2, r7
 800fb0e:	f7ff f9b3 	bl	800ee78 <__lshift>
 800fb12:	4680      	mov	r8, r0
 800fb14:	2800      	cmp	r0, #0
 800fb16:	f43f ae46 	beq.w	800f7a6 <_strtod_l+0x43e>
 800fb1a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fb1c:	9805      	ldr	r0, [sp, #20]
 800fb1e:	464a      	mov	r2, r9
 800fb20:	f7ff fa32 	bl	800ef88 <__mdiff>
 800fb24:	4604      	mov	r4, r0
 800fb26:	2800      	cmp	r0, #0
 800fb28:	f43f ae3d 	beq.w	800f7a6 <_strtod_l+0x43e>
 800fb2c:	68c3      	ldr	r3, [r0, #12]
 800fb2e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fb30:	2300      	movs	r3, #0
 800fb32:	60c3      	str	r3, [r0, #12]
 800fb34:	4641      	mov	r1, r8
 800fb36:	f7ff fa0b 	bl	800ef50 <__mcmp>
 800fb3a:	2800      	cmp	r0, #0
 800fb3c:	da46      	bge.n	800fbcc <_strtod_l+0x864>
 800fb3e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fb40:	ea53 030a 	orrs.w	r3, r3, sl
 800fb44:	d16c      	bne.n	800fc20 <_strtod_l+0x8b8>
 800fb46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d168      	bne.n	800fc20 <_strtod_l+0x8b8>
 800fb4e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fb52:	0d1b      	lsrs	r3, r3, #20
 800fb54:	051b      	lsls	r3, r3, #20
 800fb56:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800fb5a:	d961      	bls.n	800fc20 <_strtod_l+0x8b8>
 800fb5c:	6963      	ldr	r3, [r4, #20]
 800fb5e:	b913      	cbnz	r3, 800fb66 <_strtod_l+0x7fe>
 800fb60:	6923      	ldr	r3, [r4, #16]
 800fb62:	2b01      	cmp	r3, #1
 800fb64:	dd5c      	ble.n	800fc20 <_strtod_l+0x8b8>
 800fb66:	4621      	mov	r1, r4
 800fb68:	2201      	movs	r2, #1
 800fb6a:	9805      	ldr	r0, [sp, #20]
 800fb6c:	f7ff f984 	bl	800ee78 <__lshift>
 800fb70:	4641      	mov	r1, r8
 800fb72:	4604      	mov	r4, r0
 800fb74:	f7ff f9ec 	bl	800ef50 <__mcmp>
 800fb78:	2800      	cmp	r0, #0
 800fb7a:	dd51      	ble.n	800fc20 <_strtod_l+0x8b8>
 800fb7c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fb80:	9a08      	ldr	r2, [sp, #32]
 800fb82:	0d1b      	lsrs	r3, r3, #20
 800fb84:	051b      	lsls	r3, r3, #20
 800fb86:	2a00      	cmp	r2, #0
 800fb88:	d06b      	beq.n	800fc62 <_strtod_l+0x8fa>
 800fb8a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800fb8e:	d868      	bhi.n	800fc62 <_strtod_l+0x8fa>
 800fb90:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800fb94:	f67f ae9d 	bls.w	800f8d2 <_strtod_l+0x56a>
 800fb98:	4b0a      	ldr	r3, [pc, #40]	@ (800fbc4 <_strtod_l+0x85c>)
 800fb9a:	4650      	mov	r0, sl
 800fb9c:	4659      	mov	r1, fp
 800fb9e:	2200      	movs	r2, #0
 800fba0:	f7f0 fdaa 	bl	80006f8 <__aeabi_dmul>
 800fba4:	4b08      	ldr	r3, [pc, #32]	@ (800fbc8 <_strtod_l+0x860>)
 800fba6:	400b      	ands	r3, r1
 800fba8:	4682      	mov	sl, r0
 800fbaa:	468b      	mov	fp, r1
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	f47f ae05 	bne.w	800f7bc <_strtod_l+0x454>
 800fbb2:	9a05      	ldr	r2, [sp, #20]
 800fbb4:	2322      	movs	r3, #34	@ 0x22
 800fbb6:	6013      	str	r3, [r2, #0]
 800fbb8:	e600      	b.n	800f7bc <_strtod_l+0x454>
 800fbba:	bf00      	nop
 800fbbc:	080248b0 	.word	0x080248b0
 800fbc0:	fffffc02 	.word	0xfffffc02
 800fbc4:	39500000 	.word	0x39500000
 800fbc8:	7ff00000 	.word	0x7ff00000
 800fbcc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800fbd0:	d165      	bne.n	800fc9e <_strtod_l+0x936>
 800fbd2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800fbd4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fbd8:	b35a      	cbz	r2, 800fc32 <_strtod_l+0x8ca>
 800fbda:	4a9f      	ldr	r2, [pc, #636]	@ (800fe58 <_strtod_l+0xaf0>)
 800fbdc:	4293      	cmp	r3, r2
 800fbde:	d12b      	bne.n	800fc38 <_strtod_l+0x8d0>
 800fbe0:	9b08      	ldr	r3, [sp, #32]
 800fbe2:	4651      	mov	r1, sl
 800fbe4:	b303      	cbz	r3, 800fc28 <_strtod_l+0x8c0>
 800fbe6:	4b9d      	ldr	r3, [pc, #628]	@ (800fe5c <_strtod_l+0xaf4>)
 800fbe8:	465a      	mov	r2, fp
 800fbea:	4013      	ands	r3, r2
 800fbec:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800fbf0:	f04f 32ff 	mov.w	r2, #4294967295
 800fbf4:	d81b      	bhi.n	800fc2e <_strtod_l+0x8c6>
 800fbf6:	0d1b      	lsrs	r3, r3, #20
 800fbf8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800fbfc:	fa02 f303 	lsl.w	r3, r2, r3
 800fc00:	4299      	cmp	r1, r3
 800fc02:	d119      	bne.n	800fc38 <_strtod_l+0x8d0>
 800fc04:	4b96      	ldr	r3, [pc, #600]	@ (800fe60 <_strtod_l+0xaf8>)
 800fc06:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fc08:	429a      	cmp	r2, r3
 800fc0a:	d102      	bne.n	800fc12 <_strtod_l+0x8aa>
 800fc0c:	3101      	adds	r1, #1
 800fc0e:	f43f adca 	beq.w	800f7a6 <_strtod_l+0x43e>
 800fc12:	4b92      	ldr	r3, [pc, #584]	@ (800fe5c <_strtod_l+0xaf4>)
 800fc14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fc16:	401a      	ands	r2, r3
 800fc18:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800fc1c:	f04f 0a00 	mov.w	sl, #0
 800fc20:	9b08      	ldr	r3, [sp, #32]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d1b8      	bne.n	800fb98 <_strtod_l+0x830>
 800fc26:	e5c9      	b.n	800f7bc <_strtod_l+0x454>
 800fc28:	f04f 33ff 	mov.w	r3, #4294967295
 800fc2c:	e7e8      	b.n	800fc00 <_strtod_l+0x898>
 800fc2e:	4613      	mov	r3, r2
 800fc30:	e7e6      	b.n	800fc00 <_strtod_l+0x898>
 800fc32:	ea53 030a 	orrs.w	r3, r3, sl
 800fc36:	d0a1      	beq.n	800fb7c <_strtod_l+0x814>
 800fc38:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fc3a:	b1db      	cbz	r3, 800fc74 <_strtod_l+0x90c>
 800fc3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fc3e:	4213      	tst	r3, r2
 800fc40:	d0ee      	beq.n	800fc20 <_strtod_l+0x8b8>
 800fc42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fc44:	9a08      	ldr	r2, [sp, #32]
 800fc46:	4650      	mov	r0, sl
 800fc48:	4659      	mov	r1, fp
 800fc4a:	b1bb      	cbz	r3, 800fc7c <_strtod_l+0x914>
 800fc4c:	f7ff fb6e 	bl	800f32c <sulp>
 800fc50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fc54:	ec53 2b10 	vmov	r2, r3, d0
 800fc58:	f7f0 fb98 	bl	800038c <__adddf3>
 800fc5c:	4682      	mov	sl, r0
 800fc5e:	468b      	mov	fp, r1
 800fc60:	e7de      	b.n	800fc20 <_strtod_l+0x8b8>
 800fc62:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800fc66:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800fc6a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800fc6e:	f04f 3aff 	mov.w	sl, #4294967295
 800fc72:	e7d5      	b.n	800fc20 <_strtod_l+0x8b8>
 800fc74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fc76:	ea13 0f0a 	tst.w	r3, sl
 800fc7a:	e7e1      	b.n	800fc40 <_strtod_l+0x8d8>
 800fc7c:	f7ff fb56 	bl	800f32c <sulp>
 800fc80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fc84:	ec53 2b10 	vmov	r2, r3, d0
 800fc88:	f7f0 fb7e 	bl	8000388 <__aeabi_dsub>
 800fc8c:	2200      	movs	r2, #0
 800fc8e:	2300      	movs	r3, #0
 800fc90:	4682      	mov	sl, r0
 800fc92:	468b      	mov	fp, r1
 800fc94:	f7f0 ff98 	bl	8000bc8 <__aeabi_dcmpeq>
 800fc98:	2800      	cmp	r0, #0
 800fc9a:	d0c1      	beq.n	800fc20 <_strtod_l+0x8b8>
 800fc9c:	e619      	b.n	800f8d2 <_strtod_l+0x56a>
 800fc9e:	4641      	mov	r1, r8
 800fca0:	4620      	mov	r0, r4
 800fca2:	f7ff facd 	bl	800f240 <__ratio>
 800fca6:	ec57 6b10 	vmov	r6, r7, d0
 800fcaa:	2200      	movs	r2, #0
 800fcac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800fcb0:	4630      	mov	r0, r6
 800fcb2:	4639      	mov	r1, r7
 800fcb4:	f7f0 ff9c 	bl	8000bf0 <__aeabi_dcmple>
 800fcb8:	2800      	cmp	r0, #0
 800fcba:	d06f      	beq.n	800fd9c <_strtod_l+0xa34>
 800fcbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d17a      	bne.n	800fdb8 <_strtod_l+0xa50>
 800fcc2:	f1ba 0f00 	cmp.w	sl, #0
 800fcc6:	d158      	bne.n	800fd7a <_strtod_l+0xa12>
 800fcc8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fcca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d15a      	bne.n	800fd88 <_strtod_l+0xa20>
 800fcd2:	4b64      	ldr	r3, [pc, #400]	@ (800fe64 <_strtod_l+0xafc>)
 800fcd4:	2200      	movs	r2, #0
 800fcd6:	4630      	mov	r0, r6
 800fcd8:	4639      	mov	r1, r7
 800fcda:	f7f0 ff7f 	bl	8000bdc <__aeabi_dcmplt>
 800fcde:	2800      	cmp	r0, #0
 800fce0:	d159      	bne.n	800fd96 <_strtod_l+0xa2e>
 800fce2:	4630      	mov	r0, r6
 800fce4:	4639      	mov	r1, r7
 800fce6:	4b60      	ldr	r3, [pc, #384]	@ (800fe68 <_strtod_l+0xb00>)
 800fce8:	2200      	movs	r2, #0
 800fcea:	f7f0 fd05 	bl	80006f8 <__aeabi_dmul>
 800fcee:	4606      	mov	r6, r0
 800fcf0:	460f      	mov	r7, r1
 800fcf2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800fcf6:	9606      	str	r6, [sp, #24]
 800fcf8:	9307      	str	r3, [sp, #28]
 800fcfa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fcfe:	4d57      	ldr	r5, [pc, #348]	@ (800fe5c <_strtod_l+0xaf4>)
 800fd00:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800fd04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fd06:	401d      	ands	r5, r3
 800fd08:	4b58      	ldr	r3, [pc, #352]	@ (800fe6c <_strtod_l+0xb04>)
 800fd0a:	429d      	cmp	r5, r3
 800fd0c:	f040 80b2 	bne.w	800fe74 <_strtod_l+0xb0c>
 800fd10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fd12:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800fd16:	ec4b ab10 	vmov	d0, sl, fp
 800fd1a:	f7ff f9c9 	bl	800f0b0 <__ulp>
 800fd1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fd22:	ec51 0b10 	vmov	r0, r1, d0
 800fd26:	f7f0 fce7 	bl	80006f8 <__aeabi_dmul>
 800fd2a:	4652      	mov	r2, sl
 800fd2c:	465b      	mov	r3, fp
 800fd2e:	f7f0 fb2d 	bl	800038c <__adddf3>
 800fd32:	460b      	mov	r3, r1
 800fd34:	4949      	ldr	r1, [pc, #292]	@ (800fe5c <_strtod_l+0xaf4>)
 800fd36:	4a4e      	ldr	r2, [pc, #312]	@ (800fe70 <_strtod_l+0xb08>)
 800fd38:	4019      	ands	r1, r3
 800fd3a:	4291      	cmp	r1, r2
 800fd3c:	4682      	mov	sl, r0
 800fd3e:	d942      	bls.n	800fdc6 <_strtod_l+0xa5e>
 800fd40:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fd42:	4b47      	ldr	r3, [pc, #284]	@ (800fe60 <_strtod_l+0xaf8>)
 800fd44:	429a      	cmp	r2, r3
 800fd46:	d103      	bne.n	800fd50 <_strtod_l+0x9e8>
 800fd48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fd4a:	3301      	adds	r3, #1
 800fd4c:	f43f ad2b 	beq.w	800f7a6 <_strtod_l+0x43e>
 800fd50:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800fe60 <_strtod_l+0xaf8>
 800fd54:	f04f 3aff 	mov.w	sl, #4294967295
 800fd58:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fd5a:	9805      	ldr	r0, [sp, #20]
 800fd5c:	f7fe fe74 	bl	800ea48 <_Bfree>
 800fd60:	9805      	ldr	r0, [sp, #20]
 800fd62:	4649      	mov	r1, r9
 800fd64:	f7fe fe70 	bl	800ea48 <_Bfree>
 800fd68:	9805      	ldr	r0, [sp, #20]
 800fd6a:	4641      	mov	r1, r8
 800fd6c:	f7fe fe6c 	bl	800ea48 <_Bfree>
 800fd70:	9805      	ldr	r0, [sp, #20]
 800fd72:	4621      	mov	r1, r4
 800fd74:	f7fe fe68 	bl	800ea48 <_Bfree>
 800fd78:	e618      	b.n	800f9ac <_strtod_l+0x644>
 800fd7a:	f1ba 0f01 	cmp.w	sl, #1
 800fd7e:	d103      	bne.n	800fd88 <_strtod_l+0xa20>
 800fd80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	f43f ada5 	beq.w	800f8d2 <_strtod_l+0x56a>
 800fd88:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800fe38 <_strtod_l+0xad0>
 800fd8c:	4f35      	ldr	r7, [pc, #212]	@ (800fe64 <_strtod_l+0xafc>)
 800fd8e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fd92:	2600      	movs	r6, #0
 800fd94:	e7b1      	b.n	800fcfa <_strtod_l+0x992>
 800fd96:	4f34      	ldr	r7, [pc, #208]	@ (800fe68 <_strtod_l+0xb00>)
 800fd98:	2600      	movs	r6, #0
 800fd9a:	e7aa      	b.n	800fcf2 <_strtod_l+0x98a>
 800fd9c:	4b32      	ldr	r3, [pc, #200]	@ (800fe68 <_strtod_l+0xb00>)
 800fd9e:	4630      	mov	r0, r6
 800fda0:	4639      	mov	r1, r7
 800fda2:	2200      	movs	r2, #0
 800fda4:	f7f0 fca8 	bl	80006f8 <__aeabi_dmul>
 800fda8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fdaa:	4606      	mov	r6, r0
 800fdac:	460f      	mov	r7, r1
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d09f      	beq.n	800fcf2 <_strtod_l+0x98a>
 800fdb2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800fdb6:	e7a0      	b.n	800fcfa <_strtod_l+0x992>
 800fdb8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800fe40 <_strtod_l+0xad8>
 800fdbc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fdc0:	ec57 6b17 	vmov	r6, r7, d7
 800fdc4:	e799      	b.n	800fcfa <_strtod_l+0x992>
 800fdc6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800fdca:	9b08      	ldr	r3, [sp, #32]
 800fdcc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d1c1      	bne.n	800fd58 <_strtod_l+0x9f0>
 800fdd4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fdd8:	0d1b      	lsrs	r3, r3, #20
 800fdda:	051b      	lsls	r3, r3, #20
 800fddc:	429d      	cmp	r5, r3
 800fdde:	d1bb      	bne.n	800fd58 <_strtod_l+0x9f0>
 800fde0:	4630      	mov	r0, r6
 800fde2:	4639      	mov	r1, r7
 800fde4:	f7f0 ffe8 	bl	8000db8 <__aeabi_d2lz>
 800fde8:	f7f0 fc58 	bl	800069c <__aeabi_l2d>
 800fdec:	4602      	mov	r2, r0
 800fdee:	460b      	mov	r3, r1
 800fdf0:	4630      	mov	r0, r6
 800fdf2:	4639      	mov	r1, r7
 800fdf4:	f7f0 fac8 	bl	8000388 <__aeabi_dsub>
 800fdf8:	460b      	mov	r3, r1
 800fdfa:	4602      	mov	r2, r0
 800fdfc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800fe00:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800fe04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fe06:	ea46 060a 	orr.w	r6, r6, sl
 800fe0a:	431e      	orrs	r6, r3
 800fe0c:	d06f      	beq.n	800feee <_strtod_l+0xb86>
 800fe0e:	a30e      	add	r3, pc, #56	@ (adr r3, 800fe48 <_strtod_l+0xae0>)
 800fe10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe14:	f7f0 fee2 	bl	8000bdc <__aeabi_dcmplt>
 800fe18:	2800      	cmp	r0, #0
 800fe1a:	f47f accf 	bne.w	800f7bc <_strtod_l+0x454>
 800fe1e:	a30c      	add	r3, pc, #48	@ (adr r3, 800fe50 <_strtod_l+0xae8>)
 800fe20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fe28:	f7f0 fef6 	bl	8000c18 <__aeabi_dcmpgt>
 800fe2c:	2800      	cmp	r0, #0
 800fe2e:	d093      	beq.n	800fd58 <_strtod_l+0x9f0>
 800fe30:	e4c4      	b.n	800f7bc <_strtod_l+0x454>
 800fe32:	bf00      	nop
 800fe34:	f3af 8000 	nop.w
 800fe38:	00000000 	.word	0x00000000
 800fe3c:	bff00000 	.word	0xbff00000
 800fe40:	00000000 	.word	0x00000000
 800fe44:	3ff00000 	.word	0x3ff00000
 800fe48:	94a03595 	.word	0x94a03595
 800fe4c:	3fdfffff 	.word	0x3fdfffff
 800fe50:	35afe535 	.word	0x35afe535
 800fe54:	3fe00000 	.word	0x3fe00000
 800fe58:	000fffff 	.word	0x000fffff
 800fe5c:	7ff00000 	.word	0x7ff00000
 800fe60:	7fefffff 	.word	0x7fefffff
 800fe64:	3ff00000 	.word	0x3ff00000
 800fe68:	3fe00000 	.word	0x3fe00000
 800fe6c:	7fe00000 	.word	0x7fe00000
 800fe70:	7c9fffff 	.word	0x7c9fffff
 800fe74:	9b08      	ldr	r3, [sp, #32]
 800fe76:	b323      	cbz	r3, 800fec2 <_strtod_l+0xb5a>
 800fe78:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800fe7c:	d821      	bhi.n	800fec2 <_strtod_l+0xb5a>
 800fe7e:	a328      	add	r3, pc, #160	@ (adr r3, 800ff20 <_strtod_l+0xbb8>)
 800fe80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe84:	4630      	mov	r0, r6
 800fe86:	4639      	mov	r1, r7
 800fe88:	f7f0 feb2 	bl	8000bf0 <__aeabi_dcmple>
 800fe8c:	b1a0      	cbz	r0, 800feb8 <_strtod_l+0xb50>
 800fe8e:	4639      	mov	r1, r7
 800fe90:	4630      	mov	r0, r6
 800fe92:	f7f0 ff09 	bl	8000ca8 <__aeabi_d2uiz>
 800fe96:	2801      	cmp	r0, #1
 800fe98:	bf38      	it	cc
 800fe9a:	2001      	movcc	r0, #1
 800fe9c:	f7f0 fbb2 	bl	8000604 <__aeabi_ui2d>
 800fea0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fea2:	4606      	mov	r6, r0
 800fea4:	460f      	mov	r7, r1
 800fea6:	b9fb      	cbnz	r3, 800fee8 <_strtod_l+0xb80>
 800fea8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800feac:	9014      	str	r0, [sp, #80]	@ 0x50
 800feae:	9315      	str	r3, [sp, #84]	@ 0x54
 800feb0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800feb4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800feb8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800feba:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800febe:	1b5b      	subs	r3, r3, r5
 800fec0:	9311      	str	r3, [sp, #68]	@ 0x44
 800fec2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800fec6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800feca:	f7ff f8f1 	bl	800f0b0 <__ulp>
 800fece:	4650      	mov	r0, sl
 800fed0:	ec53 2b10 	vmov	r2, r3, d0
 800fed4:	4659      	mov	r1, fp
 800fed6:	f7f0 fc0f 	bl	80006f8 <__aeabi_dmul>
 800feda:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800fede:	f7f0 fa55 	bl	800038c <__adddf3>
 800fee2:	4682      	mov	sl, r0
 800fee4:	468b      	mov	fp, r1
 800fee6:	e770      	b.n	800fdca <_strtod_l+0xa62>
 800fee8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800feec:	e7e0      	b.n	800feb0 <_strtod_l+0xb48>
 800feee:	a30e      	add	r3, pc, #56	@ (adr r3, 800ff28 <_strtod_l+0xbc0>)
 800fef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fef4:	f7f0 fe72 	bl	8000bdc <__aeabi_dcmplt>
 800fef8:	e798      	b.n	800fe2c <_strtod_l+0xac4>
 800fefa:	2300      	movs	r3, #0
 800fefc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fefe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ff00:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ff02:	6013      	str	r3, [r2, #0]
 800ff04:	f7ff ba6d 	b.w	800f3e2 <_strtod_l+0x7a>
 800ff08:	2a65      	cmp	r2, #101	@ 0x65
 800ff0a:	f43f ab66 	beq.w	800f5da <_strtod_l+0x272>
 800ff0e:	2a45      	cmp	r2, #69	@ 0x45
 800ff10:	f43f ab63 	beq.w	800f5da <_strtod_l+0x272>
 800ff14:	2301      	movs	r3, #1
 800ff16:	f7ff bb9e 	b.w	800f656 <_strtod_l+0x2ee>
 800ff1a:	bf00      	nop
 800ff1c:	f3af 8000 	nop.w
 800ff20:	ffc00000 	.word	0xffc00000
 800ff24:	41dfffff 	.word	0x41dfffff
 800ff28:	94a03595 	.word	0x94a03595
 800ff2c:	3fcfffff 	.word	0x3fcfffff

0800ff30 <_strtod_r>:
 800ff30:	4b01      	ldr	r3, [pc, #4]	@ (800ff38 <_strtod_r+0x8>)
 800ff32:	f7ff ba19 	b.w	800f368 <_strtod_l>
 800ff36:	bf00      	nop
 800ff38:	20000168 	.word	0x20000168

0800ff3c <_strtol_l.constprop.0>:
 800ff3c:	2b24      	cmp	r3, #36	@ 0x24
 800ff3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff42:	4686      	mov	lr, r0
 800ff44:	4690      	mov	r8, r2
 800ff46:	d801      	bhi.n	800ff4c <_strtol_l.constprop.0+0x10>
 800ff48:	2b01      	cmp	r3, #1
 800ff4a:	d106      	bne.n	800ff5a <_strtol_l.constprop.0+0x1e>
 800ff4c:	f7fd fdbc 	bl	800dac8 <__errno>
 800ff50:	2316      	movs	r3, #22
 800ff52:	6003      	str	r3, [r0, #0]
 800ff54:	2000      	movs	r0, #0
 800ff56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff5a:	4834      	ldr	r0, [pc, #208]	@ (801002c <_strtol_l.constprop.0+0xf0>)
 800ff5c:	460d      	mov	r5, r1
 800ff5e:	462a      	mov	r2, r5
 800ff60:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ff64:	5d06      	ldrb	r6, [r0, r4]
 800ff66:	f016 0608 	ands.w	r6, r6, #8
 800ff6a:	d1f8      	bne.n	800ff5e <_strtol_l.constprop.0+0x22>
 800ff6c:	2c2d      	cmp	r4, #45	@ 0x2d
 800ff6e:	d12d      	bne.n	800ffcc <_strtol_l.constprop.0+0x90>
 800ff70:	782c      	ldrb	r4, [r5, #0]
 800ff72:	2601      	movs	r6, #1
 800ff74:	1c95      	adds	r5, r2, #2
 800ff76:	f033 0210 	bics.w	r2, r3, #16
 800ff7a:	d109      	bne.n	800ff90 <_strtol_l.constprop.0+0x54>
 800ff7c:	2c30      	cmp	r4, #48	@ 0x30
 800ff7e:	d12a      	bne.n	800ffd6 <_strtol_l.constprop.0+0x9a>
 800ff80:	782a      	ldrb	r2, [r5, #0]
 800ff82:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ff86:	2a58      	cmp	r2, #88	@ 0x58
 800ff88:	d125      	bne.n	800ffd6 <_strtol_l.constprop.0+0x9a>
 800ff8a:	786c      	ldrb	r4, [r5, #1]
 800ff8c:	2310      	movs	r3, #16
 800ff8e:	3502      	adds	r5, #2
 800ff90:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ff94:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ff98:	2200      	movs	r2, #0
 800ff9a:	fbbc f9f3 	udiv	r9, ip, r3
 800ff9e:	4610      	mov	r0, r2
 800ffa0:	fb03 ca19 	mls	sl, r3, r9, ip
 800ffa4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ffa8:	2f09      	cmp	r7, #9
 800ffaa:	d81b      	bhi.n	800ffe4 <_strtol_l.constprop.0+0xa8>
 800ffac:	463c      	mov	r4, r7
 800ffae:	42a3      	cmp	r3, r4
 800ffb0:	dd27      	ble.n	8010002 <_strtol_l.constprop.0+0xc6>
 800ffb2:	1c57      	adds	r7, r2, #1
 800ffb4:	d007      	beq.n	800ffc6 <_strtol_l.constprop.0+0x8a>
 800ffb6:	4581      	cmp	r9, r0
 800ffb8:	d320      	bcc.n	800fffc <_strtol_l.constprop.0+0xc0>
 800ffba:	d101      	bne.n	800ffc0 <_strtol_l.constprop.0+0x84>
 800ffbc:	45a2      	cmp	sl, r4
 800ffbe:	db1d      	blt.n	800fffc <_strtol_l.constprop.0+0xc0>
 800ffc0:	fb00 4003 	mla	r0, r0, r3, r4
 800ffc4:	2201      	movs	r2, #1
 800ffc6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ffca:	e7eb      	b.n	800ffa4 <_strtol_l.constprop.0+0x68>
 800ffcc:	2c2b      	cmp	r4, #43	@ 0x2b
 800ffce:	bf04      	itt	eq
 800ffd0:	782c      	ldrbeq	r4, [r5, #0]
 800ffd2:	1c95      	addeq	r5, r2, #2
 800ffd4:	e7cf      	b.n	800ff76 <_strtol_l.constprop.0+0x3a>
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d1da      	bne.n	800ff90 <_strtol_l.constprop.0+0x54>
 800ffda:	2c30      	cmp	r4, #48	@ 0x30
 800ffdc:	bf0c      	ite	eq
 800ffde:	2308      	moveq	r3, #8
 800ffe0:	230a      	movne	r3, #10
 800ffe2:	e7d5      	b.n	800ff90 <_strtol_l.constprop.0+0x54>
 800ffe4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ffe8:	2f19      	cmp	r7, #25
 800ffea:	d801      	bhi.n	800fff0 <_strtol_l.constprop.0+0xb4>
 800ffec:	3c37      	subs	r4, #55	@ 0x37
 800ffee:	e7de      	b.n	800ffae <_strtol_l.constprop.0+0x72>
 800fff0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800fff4:	2f19      	cmp	r7, #25
 800fff6:	d804      	bhi.n	8010002 <_strtol_l.constprop.0+0xc6>
 800fff8:	3c57      	subs	r4, #87	@ 0x57
 800fffa:	e7d8      	b.n	800ffae <_strtol_l.constprop.0+0x72>
 800fffc:	f04f 32ff 	mov.w	r2, #4294967295
 8010000:	e7e1      	b.n	800ffc6 <_strtol_l.constprop.0+0x8a>
 8010002:	1c53      	adds	r3, r2, #1
 8010004:	d108      	bne.n	8010018 <_strtol_l.constprop.0+0xdc>
 8010006:	2322      	movs	r3, #34	@ 0x22
 8010008:	f8ce 3000 	str.w	r3, [lr]
 801000c:	4660      	mov	r0, ip
 801000e:	f1b8 0f00 	cmp.w	r8, #0
 8010012:	d0a0      	beq.n	800ff56 <_strtol_l.constprop.0+0x1a>
 8010014:	1e69      	subs	r1, r5, #1
 8010016:	e006      	b.n	8010026 <_strtol_l.constprop.0+0xea>
 8010018:	b106      	cbz	r6, 801001c <_strtol_l.constprop.0+0xe0>
 801001a:	4240      	negs	r0, r0
 801001c:	f1b8 0f00 	cmp.w	r8, #0
 8010020:	d099      	beq.n	800ff56 <_strtol_l.constprop.0+0x1a>
 8010022:	2a00      	cmp	r2, #0
 8010024:	d1f6      	bne.n	8010014 <_strtol_l.constprop.0+0xd8>
 8010026:	f8c8 1000 	str.w	r1, [r8]
 801002a:	e794      	b.n	800ff56 <_strtol_l.constprop.0+0x1a>
 801002c:	080248d9 	.word	0x080248d9

08010030 <_strtol_r>:
 8010030:	f7ff bf84 	b.w	800ff3c <_strtol_l.constprop.0>

08010034 <__ssputs_r>:
 8010034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010038:	688e      	ldr	r6, [r1, #8]
 801003a:	461f      	mov	r7, r3
 801003c:	42be      	cmp	r6, r7
 801003e:	680b      	ldr	r3, [r1, #0]
 8010040:	4682      	mov	sl, r0
 8010042:	460c      	mov	r4, r1
 8010044:	4690      	mov	r8, r2
 8010046:	d82d      	bhi.n	80100a4 <__ssputs_r+0x70>
 8010048:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801004c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010050:	d026      	beq.n	80100a0 <__ssputs_r+0x6c>
 8010052:	6965      	ldr	r5, [r4, #20]
 8010054:	6909      	ldr	r1, [r1, #16]
 8010056:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801005a:	eba3 0901 	sub.w	r9, r3, r1
 801005e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010062:	1c7b      	adds	r3, r7, #1
 8010064:	444b      	add	r3, r9
 8010066:	106d      	asrs	r5, r5, #1
 8010068:	429d      	cmp	r5, r3
 801006a:	bf38      	it	cc
 801006c:	461d      	movcc	r5, r3
 801006e:	0553      	lsls	r3, r2, #21
 8010070:	d527      	bpl.n	80100c2 <__ssputs_r+0x8e>
 8010072:	4629      	mov	r1, r5
 8010074:	f7fe fc1c 	bl	800e8b0 <_malloc_r>
 8010078:	4606      	mov	r6, r0
 801007a:	b360      	cbz	r0, 80100d6 <__ssputs_r+0xa2>
 801007c:	6921      	ldr	r1, [r4, #16]
 801007e:	464a      	mov	r2, r9
 8010080:	f000 fbde 	bl	8010840 <memcpy>
 8010084:	89a3      	ldrh	r3, [r4, #12]
 8010086:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801008a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801008e:	81a3      	strh	r3, [r4, #12]
 8010090:	6126      	str	r6, [r4, #16]
 8010092:	6165      	str	r5, [r4, #20]
 8010094:	444e      	add	r6, r9
 8010096:	eba5 0509 	sub.w	r5, r5, r9
 801009a:	6026      	str	r6, [r4, #0]
 801009c:	60a5      	str	r5, [r4, #8]
 801009e:	463e      	mov	r6, r7
 80100a0:	42be      	cmp	r6, r7
 80100a2:	d900      	bls.n	80100a6 <__ssputs_r+0x72>
 80100a4:	463e      	mov	r6, r7
 80100a6:	6820      	ldr	r0, [r4, #0]
 80100a8:	4632      	mov	r2, r6
 80100aa:	4641      	mov	r1, r8
 80100ac:	f000 fb6a 	bl	8010784 <memmove>
 80100b0:	68a3      	ldr	r3, [r4, #8]
 80100b2:	1b9b      	subs	r3, r3, r6
 80100b4:	60a3      	str	r3, [r4, #8]
 80100b6:	6823      	ldr	r3, [r4, #0]
 80100b8:	4433      	add	r3, r6
 80100ba:	6023      	str	r3, [r4, #0]
 80100bc:	2000      	movs	r0, #0
 80100be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100c2:	462a      	mov	r2, r5
 80100c4:	f000 ff51 	bl	8010f6a <_realloc_r>
 80100c8:	4606      	mov	r6, r0
 80100ca:	2800      	cmp	r0, #0
 80100cc:	d1e0      	bne.n	8010090 <__ssputs_r+0x5c>
 80100ce:	6921      	ldr	r1, [r4, #16]
 80100d0:	4650      	mov	r0, sl
 80100d2:	f7fe fb79 	bl	800e7c8 <_free_r>
 80100d6:	230c      	movs	r3, #12
 80100d8:	f8ca 3000 	str.w	r3, [sl]
 80100dc:	89a3      	ldrh	r3, [r4, #12]
 80100de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80100e2:	81a3      	strh	r3, [r4, #12]
 80100e4:	f04f 30ff 	mov.w	r0, #4294967295
 80100e8:	e7e9      	b.n	80100be <__ssputs_r+0x8a>
	...

080100ec <_svfiprintf_r>:
 80100ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100f0:	4698      	mov	r8, r3
 80100f2:	898b      	ldrh	r3, [r1, #12]
 80100f4:	061b      	lsls	r3, r3, #24
 80100f6:	b09d      	sub	sp, #116	@ 0x74
 80100f8:	4607      	mov	r7, r0
 80100fa:	460d      	mov	r5, r1
 80100fc:	4614      	mov	r4, r2
 80100fe:	d510      	bpl.n	8010122 <_svfiprintf_r+0x36>
 8010100:	690b      	ldr	r3, [r1, #16]
 8010102:	b973      	cbnz	r3, 8010122 <_svfiprintf_r+0x36>
 8010104:	2140      	movs	r1, #64	@ 0x40
 8010106:	f7fe fbd3 	bl	800e8b0 <_malloc_r>
 801010a:	6028      	str	r0, [r5, #0]
 801010c:	6128      	str	r0, [r5, #16]
 801010e:	b930      	cbnz	r0, 801011e <_svfiprintf_r+0x32>
 8010110:	230c      	movs	r3, #12
 8010112:	603b      	str	r3, [r7, #0]
 8010114:	f04f 30ff 	mov.w	r0, #4294967295
 8010118:	b01d      	add	sp, #116	@ 0x74
 801011a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801011e:	2340      	movs	r3, #64	@ 0x40
 8010120:	616b      	str	r3, [r5, #20]
 8010122:	2300      	movs	r3, #0
 8010124:	9309      	str	r3, [sp, #36]	@ 0x24
 8010126:	2320      	movs	r3, #32
 8010128:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801012c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010130:	2330      	movs	r3, #48	@ 0x30
 8010132:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80102d0 <_svfiprintf_r+0x1e4>
 8010136:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801013a:	f04f 0901 	mov.w	r9, #1
 801013e:	4623      	mov	r3, r4
 8010140:	469a      	mov	sl, r3
 8010142:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010146:	b10a      	cbz	r2, 801014c <_svfiprintf_r+0x60>
 8010148:	2a25      	cmp	r2, #37	@ 0x25
 801014a:	d1f9      	bne.n	8010140 <_svfiprintf_r+0x54>
 801014c:	ebba 0b04 	subs.w	fp, sl, r4
 8010150:	d00b      	beq.n	801016a <_svfiprintf_r+0x7e>
 8010152:	465b      	mov	r3, fp
 8010154:	4622      	mov	r2, r4
 8010156:	4629      	mov	r1, r5
 8010158:	4638      	mov	r0, r7
 801015a:	f7ff ff6b 	bl	8010034 <__ssputs_r>
 801015e:	3001      	adds	r0, #1
 8010160:	f000 80a7 	beq.w	80102b2 <_svfiprintf_r+0x1c6>
 8010164:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010166:	445a      	add	r2, fp
 8010168:	9209      	str	r2, [sp, #36]	@ 0x24
 801016a:	f89a 3000 	ldrb.w	r3, [sl]
 801016e:	2b00      	cmp	r3, #0
 8010170:	f000 809f 	beq.w	80102b2 <_svfiprintf_r+0x1c6>
 8010174:	2300      	movs	r3, #0
 8010176:	f04f 32ff 	mov.w	r2, #4294967295
 801017a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801017e:	f10a 0a01 	add.w	sl, sl, #1
 8010182:	9304      	str	r3, [sp, #16]
 8010184:	9307      	str	r3, [sp, #28]
 8010186:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801018a:	931a      	str	r3, [sp, #104]	@ 0x68
 801018c:	4654      	mov	r4, sl
 801018e:	2205      	movs	r2, #5
 8010190:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010194:	484e      	ldr	r0, [pc, #312]	@ (80102d0 <_svfiprintf_r+0x1e4>)
 8010196:	f7f0 f89b 	bl	80002d0 <memchr>
 801019a:	9a04      	ldr	r2, [sp, #16]
 801019c:	b9d8      	cbnz	r0, 80101d6 <_svfiprintf_r+0xea>
 801019e:	06d0      	lsls	r0, r2, #27
 80101a0:	bf44      	itt	mi
 80101a2:	2320      	movmi	r3, #32
 80101a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80101a8:	0711      	lsls	r1, r2, #28
 80101aa:	bf44      	itt	mi
 80101ac:	232b      	movmi	r3, #43	@ 0x2b
 80101ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80101b2:	f89a 3000 	ldrb.w	r3, [sl]
 80101b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80101b8:	d015      	beq.n	80101e6 <_svfiprintf_r+0xfa>
 80101ba:	9a07      	ldr	r2, [sp, #28]
 80101bc:	4654      	mov	r4, sl
 80101be:	2000      	movs	r0, #0
 80101c0:	f04f 0c0a 	mov.w	ip, #10
 80101c4:	4621      	mov	r1, r4
 80101c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101ca:	3b30      	subs	r3, #48	@ 0x30
 80101cc:	2b09      	cmp	r3, #9
 80101ce:	d94b      	bls.n	8010268 <_svfiprintf_r+0x17c>
 80101d0:	b1b0      	cbz	r0, 8010200 <_svfiprintf_r+0x114>
 80101d2:	9207      	str	r2, [sp, #28]
 80101d4:	e014      	b.n	8010200 <_svfiprintf_r+0x114>
 80101d6:	eba0 0308 	sub.w	r3, r0, r8
 80101da:	fa09 f303 	lsl.w	r3, r9, r3
 80101de:	4313      	orrs	r3, r2
 80101e0:	9304      	str	r3, [sp, #16]
 80101e2:	46a2      	mov	sl, r4
 80101e4:	e7d2      	b.n	801018c <_svfiprintf_r+0xa0>
 80101e6:	9b03      	ldr	r3, [sp, #12]
 80101e8:	1d19      	adds	r1, r3, #4
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	9103      	str	r1, [sp, #12]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	bfbb      	ittet	lt
 80101f2:	425b      	neglt	r3, r3
 80101f4:	f042 0202 	orrlt.w	r2, r2, #2
 80101f8:	9307      	strge	r3, [sp, #28]
 80101fa:	9307      	strlt	r3, [sp, #28]
 80101fc:	bfb8      	it	lt
 80101fe:	9204      	strlt	r2, [sp, #16]
 8010200:	7823      	ldrb	r3, [r4, #0]
 8010202:	2b2e      	cmp	r3, #46	@ 0x2e
 8010204:	d10a      	bne.n	801021c <_svfiprintf_r+0x130>
 8010206:	7863      	ldrb	r3, [r4, #1]
 8010208:	2b2a      	cmp	r3, #42	@ 0x2a
 801020a:	d132      	bne.n	8010272 <_svfiprintf_r+0x186>
 801020c:	9b03      	ldr	r3, [sp, #12]
 801020e:	1d1a      	adds	r2, r3, #4
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	9203      	str	r2, [sp, #12]
 8010214:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010218:	3402      	adds	r4, #2
 801021a:	9305      	str	r3, [sp, #20]
 801021c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80102e0 <_svfiprintf_r+0x1f4>
 8010220:	7821      	ldrb	r1, [r4, #0]
 8010222:	2203      	movs	r2, #3
 8010224:	4650      	mov	r0, sl
 8010226:	f7f0 f853 	bl	80002d0 <memchr>
 801022a:	b138      	cbz	r0, 801023c <_svfiprintf_r+0x150>
 801022c:	9b04      	ldr	r3, [sp, #16]
 801022e:	eba0 000a 	sub.w	r0, r0, sl
 8010232:	2240      	movs	r2, #64	@ 0x40
 8010234:	4082      	lsls	r2, r0
 8010236:	4313      	orrs	r3, r2
 8010238:	3401      	adds	r4, #1
 801023a:	9304      	str	r3, [sp, #16]
 801023c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010240:	4824      	ldr	r0, [pc, #144]	@ (80102d4 <_svfiprintf_r+0x1e8>)
 8010242:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010246:	2206      	movs	r2, #6
 8010248:	f7f0 f842 	bl	80002d0 <memchr>
 801024c:	2800      	cmp	r0, #0
 801024e:	d036      	beq.n	80102be <_svfiprintf_r+0x1d2>
 8010250:	4b21      	ldr	r3, [pc, #132]	@ (80102d8 <_svfiprintf_r+0x1ec>)
 8010252:	bb1b      	cbnz	r3, 801029c <_svfiprintf_r+0x1b0>
 8010254:	9b03      	ldr	r3, [sp, #12]
 8010256:	3307      	adds	r3, #7
 8010258:	f023 0307 	bic.w	r3, r3, #7
 801025c:	3308      	adds	r3, #8
 801025e:	9303      	str	r3, [sp, #12]
 8010260:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010262:	4433      	add	r3, r6
 8010264:	9309      	str	r3, [sp, #36]	@ 0x24
 8010266:	e76a      	b.n	801013e <_svfiprintf_r+0x52>
 8010268:	fb0c 3202 	mla	r2, ip, r2, r3
 801026c:	460c      	mov	r4, r1
 801026e:	2001      	movs	r0, #1
 8010270:	e7a8      	b.n	80101c4 <_svfiprintf_r+0xd8>
 8010272:	2300      	movs	r3, #0
 8010274:	3401      	adds	r4, #1
 8010276:	9305      	str	r3, [sp, #20]
 8010278:	4619      	mov	r1, r3
 801027a:	f04f 0c0a 	mov.w	ip, #10
 801027e:	4620      	mov	r0, r4
 8010280:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010284:	3a30      	subs	r2, #48	@ 0x30
 8010286:	2a09      	cmp	r2, #9
 8010288:	d903      	bls.n	8010292 <_svfiprintf_r+0x1a6>
 801028a:	2b00      	cmp	r3, #0
 801028c:	d0c6      	beq.n	801021c <_svfiprintf_r+0x130>
 801028e:	9105      	str	r1, [sp, #20]
 8010290:	e7c4      	b.n	801021c <_svfiprintf_r+0x130>
 8010292:	fb0c 2101 	mla	r1, ip, r1, r2
 8010296:	4604      	mov	r4, r0
 8010298:	2301      	movs	r3, #1
 801029a:	e7f0      	b.n	801027e <_svfiprintf_r+0x192>
 801029c:	ab03      	add	r3, sp, #12
 801029e:	9300      	str	r3, [sp, #0]
 80102a0:	462a      	mov	r2, r5
 80102a2:	4b0e      	ldr	r3, [pc, #56]	@ (80102dc <_svfiprintf_r+0x1f0>)
 80102a4:	a904      	add	r1, sp, #16
 80102a6:	4638      	mov	r0, r7
 80102a8:	f7fc fbc6 	bl	800ca38 <_printf_float>
 80102ac:	1c42      	adds	r2, r0, #1
 80102ae:	4606      	mov	r6, r0
 80102b0:	d1d6      	bne.n	8010260 <_svfiprintf_r+0x174>
 80102b2:	89ab      	ldrh	r3, [r5, #12]
 80102b4:	065b      	lsls	r3, r3, #25
 80102b6:	f53f af2d 	bmi.w	8010114 <_svfiprintf_r+0x28>
 80102ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80102bc:	e72c      	b.n	8010118 <_svfiprintf_r+0x2c>
 80102be:	ab03      	add	r3, sp, #12
 80102c0:	9300      	str	r3, [sp, #0]
 80102c2:	462a      	mov	r2, r5
 80102c4:	4b05      	ldr	r3, [pc, #20]	@ (80102dc <_svfiprintf_r+0x1f0>)
 80102c6:	a904      	add	r1, sp, #16
 80102c8:	4638      	mov	r0, r7
 80102ca:	f7fc fe4d 	bl	800cf68 <_printf_i>
 80102ce:	e7ed      	b.n	80102ac <_svfiprintf_r+0x1c0>
 80102d0:	080249d9 	.word	0x080249d9
 80102d4:	080249e3 	.word	0x080249e3
 80102d8:	0800ca39 	.word	0x0800ca39
 80102dc:	08010035 	.word	0x08010035
 80102e0:	080249df 	.word	0x080249df

080102e4 <__sfputc_r>:
 80102e4:	6893      	ldr	r3, [r2, #8]
 80102e6:	3b01      	subs	r3, #1
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	b410      	push	{r4}
 80102ec:	6093      	str	r3, [r2, #8]
 80102ee:	da08      	bge.n	8010302 <__sfputc_r+0x1e>
 80102f0:	6994      	ldr	r4, [r2, #24]
 80102f2:	42a3      	cmp	r3, r4
 80102f4:	db01      	blt.n	80102fa <__sfputc_r+0x16>
 80102f6:	290a      	cmp	r1, #10
 80102f8:	d103      	bne.n	8010302 <__sfputc_r+0x1e>
 80102fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80102fe:	f7fd bafc 	b.w	800d8fa <__swbuf_r>
 8010302:	6813      	ldr	r3, [r2, #0]
 8010304:	1c58      	adds	r0, r3, #1
 8010306:	6010      	str	r0, [r2, #0]
 8010308:	7019      	strb	r1, [r3, #0]
 801030a:	4608      	mov	r0, r1
 801030c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010310:	4770      	bx	lr

08010312 <__sfputs_r>:
 8010312:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010314:	4606      	mov	r6, r0
 8010316:	460f      	mov	r7, r1
 8010318:	4614      	mov	r4, r2
 801031a:	18d5      	adds	r5, r2, r3
 801031c:	42ac      	cmp	r4, r5
 801031e:	d101      	bne.n	8010324 <__sfputs_r+0x12>
 8010320:	2000      	movs	r0, #0
 8010322:	e007      	b.n	8010334 <__sfputs_r+0x22>
 8010324:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010328:	463a      	mov	r2, r7
 801032a:	4630      	mov	r0, r6
 801032c:	f7ff ffda 	bl	80102e4 <__sfputc_r>
 8010330:	1c43      	adds	r3, r0, #1
 8010332:	d1f3      	bne.n	801031c <__sfputs_r+0xa>
 8010334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010338 <_vfiprintf_r>:
 8010338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801033c:	460d      	mov	r5, r1
 801033e:	b09d      	sub	sp, #116	@ 0x74
 8010340:	4614      	mov	r4, r2
 8010342:	4698      	mov	r8, r3
 8010344:	4606      	mov	r6, r0
 8010346:	b118      	cbz	r0, 8010350 <_vfiprintf_r+0x18>
 8010348:	6a03      	ldr	r3, [r0, #32]
 801034a:	b90b      	cbnz	r3, 8010350 <_vfiprintf_r+0x18>
 801034c:	f7fd f9cc 	bl	800d6e8 <__sinit>
 8010350:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010352:	07d9      	lsls	r1, r3, #31
 8010354:	d405      	bmi.n	8010362 <_vfiprintf_r+0x2a>
 8010356:	89ab      	ldrh	r3, [r5, #12]
 8010358:	059a      	lsls	r2, r3, #22
 801035a:	d402      	bmi.n	8010362 <_vfiprintf_r+0x2a>
 801035c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801035e:	f7fd fbde 	bl	800db1e <__retarget_lock_acquire_recursive>
 8010362:	89ab      	ldrh	r3, [r5, #12]
 8010364:	071b      	lsls	r3, r3, #28
 8010366:	d501      	bpl.n	801036c <_vfiprintf_r+0x34>
 8010368:	692b      	ldr	r3, [r5, #16]
 801036a:	b99b      	cbnz	r3, 8010394 <_vfiprintf_r+0x5c>
 801036c:	4629      	mov	r1, r5
 801036e:	4630      	mov	r0, r6
 8010370:	f7fd fb02 	bl	800d978 <__swsetup_r>
 8010374:	b170      	cbz	r0, 8010394 <_vfiprintf_r+0x5c>
 8010376:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010378:	07dc      	lsls	r4, r3, #31
 801037a:	d504      	bpl.n	8010386 <_vfiprintf_r+0x4e>
 801037c:	f04f 30ff 	mov.w	r0, #4294967295
 8010380:	b01d      	add	sp, #116	@ 0x74
 8010382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010386:	89ab      	ldrh	r3, [r5, #12]
 8010388:	0598      	lsls	r0, r3, #22
 801038a:	d4f7      	bmi.n	801037c <_vfiprintf_r+0x44>
 801038c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801038e:	f7fd fbc7 	bl	800db20 <__retarget_lock_release_recursive>
 8010392:	e7f3      	b.n	801037c <_vfiprintf_r+0x44>
 8010394:	2300      	movs	r3, #0
 8010396:	9309      	str	r3, [sp, #36]	@ 0x24
 8010398:	2320      	movs	r3, #32
 801039a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801039e:	f8cd 800c 	str.w	r8, [sp, #12]
 80103a2:	2330      	movs	r3, #48	@ 0x30
 80103a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010554 <_vfiprintf_r+0x21c>
 80103a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80103ac:	f04f 0901 	mov.w	r9, #1
 80103b0:	4623      	mov	r3, r4
 80103b2:	469a      	mov	sl, r3
 80103b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80103b8:	b10a      	cbz	r2, 80103be <_vfiprintf_r+0x86>
 80103ba:	2a25      	cmp	r2, #37	@ 0x25
 80103bc:	d1f9      	bne.n	80103b2 <_vfiprintf_r+0x7a>
 80103be:	ebba 0b04 	subs.w	fp, sl, r4
 80103c2:	d00b      	beq.n	80103dc <_vfiprintf_r+0xa4>
 80103c4:	465b      	mov	r3, fp
 80103c6:	4622      	mov	r2, r4
 80103c8:	4629      	mov	r1, r5
 80103ca:	4630      	mov	r0, r6
 80103cc:	f7ff ffa1 	bl	8010312 <__sfputs_r>
 80103d0:	3001      	adds	r0, #1
 80103d2:	f000 80a7 	beq.w	8010524 <_vfiprintf_r+0x1ec>
 80103d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80103d8:	445a      	add	r2, fp
 80103da:	9209      	str	r2, [sp, #36]	@ 0x24
 80103dc:	f89a 3000 	ldrb.w	r3, [sl]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	f000 809f 	beq.w	8010524 <_vfiprintf_r+0x1ec>
 80103e6:	2300      	movs	r3, #0
 80103e8:	f04f 32ff 	mov.w	r2, #4294967295
 80103ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80103f0:	f10a 0a01 	add.w	sl, sl, #1
 80103f4:	9304      	str	r3, [sp, #16]
 80103f6:	9307      	str	r3, [sp, #28]
 80103f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80103fc:	931a      	str	r3, [sp, #104]	@ 0x68
 80103fe:	4654      	mov	r4, sl
 8010400:	2205      	movs	r2, #5
 8010402:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010406:	4853      	ldr	r0, [pc, #332]	@ (8010554 <_vfiprintf_r+0x21c>)
 8010408:	f7ef ff62 	bl	80002d0 <memchr>
 801040c:	9a04      	ldr	r2, [sp, #16]
 801040e:	b9d8      	cbnz	r0, 8010448 <_vfiprintf_r+0x110>
 8010410:	06d1      	lsls	r1, r2, #27
 8010412:	bf44      	itt	mi
 8010414:	2320      	movmi	r3, #32
 8010416:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801041a:	0713      	lsls	r3, r2, #28
 801041c:	bf44      	itt	mi
 801041e:	232b      	movmi	r3, #43	@ 0x2b
 8010420:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010424:	f89a 3000 	ldrb.w	r3, [sl]
 8010428:	2b2a      	cmp	r3, #42	@ 0x2a
 801042a:	d015      	beq.n	8010458 <_vfiprintf_r+0x120>
 801042c:	9a07      	ldr	r2, [sp, #28]
 801042e:	4654      	mov	r4, sl
 8010430:	2000      	movs	r0, #0
 8010432:	f04f 0c0a 	mov.w	ip, #10
 8010436:	4621      	mov	r1, r4
 8010438:	f811 3b01 	ldrb.w	r3, [r1], #1
 801043c:	3b30      	subs	r3, #48	@ 0x30
 801043e:	2b09      	cmp	r3, #9
 8010440:	d94b      	bls.n	80104da <_vfiprintf_r+0x1a2>
 8010442:	b1b0      	cbz	r0, 8010472 <_vfiprintf_r+0x13a>
 8010444:	9207      	str	r2, [sp, #28]
 8010446:	e014      	b.n	8010472 <_vfiprintf_r+0x13a>
 8010448:	eba0 0308 	sub.w	r3, r0, r8
 801044c:	fa09 f303 	lsl.w	r3, r9, r3
 8010450:	4313      	orrs	r3, r2
 8010452:	9304      	str	r3, [sp, #16]
 8010454:	46a2      	mov	sl, r4
 8010456:	e7d2      	b.n	80103fe <_vfiprintf_r+0xc6>
 8010458:	9b03      	ldr	r3, [sp, #12]
 801045a:	1d19      	adds	r1, r3, #4
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	9103      	str	r1, [sp, #12]
 8010460:	2b00      	cmp	r3, #0
 8010462:	bfbb      	ittet	lt
 8010464:	425b      	neglt	r3, r3
 8010466:	f042 0202 	orrlt.w	r2, r2, #2
 801046a:	9307      	strge	r3, [sp, #28]
 801046c:	9307      	strlt	r3, [sp, #28]
 801046e:	bfb8      	it	lt
 8010470:	9204      	strlt	r2, [sp, #16]
 8010472:	7823      	ldrb	r3, [r4, #0]
 8010474:	2b2e      	cmp	r3, #46	@ 0x2e
 8010476:	d10a      	bne.n	801048e <_vfiprintf_r+0x156>
 8010478:	7863      	ldrb	r3, [r4, #1]
 801047a:	2b2a      	cmp	r3, #42	@ 0x2a
 801047c:	d132      	bne.n	80104e4 <_vfiprintf_r+0x1ac>
 801047e:	9b03      	ldr	r3, [sp, #12]
 8010480:	1d1a      	adds	r2, r3, #4
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	9203      	str	r2, [sp, #12]
 8010486:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801048a:	3402      	adds	r4, #2
 801048c:	9305      	str	r3, [sp, #20]
 801048e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010564 <_vfiprintf_r+0x22c>
 8010492:	7821      	ldrb	r1, [r4, #0]
 8010494:	2203      	movs	r2, #3
 8010496:	4650      	mov	r0, sl
 8010498:	f7ef ff1a 	bl	80002d0 <memchr>
 801049c:	b138      	cbz	r0, 80104ae <_vfiprintf_r+0x176>
 801049e:	9b04      	ldr	r3, [sp, #16]
 80104a0:	eba0 000a 	sub.w	r0, r0, sl
 80104a4:	2240      	movs	r2, #64	@ 0x40
 80104a6:	4082      	lsls	r2, r0
 80104a8:	4313      	orrs	r3, r2
 80104aa:	3401      	adds	r4, #1
 80104ac:	9304      	str	r3, [sp, #16]
 80104ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104b2:	4829      	ldr	r0, [pc, #164]	@ (8010558 <_vfiprintf_r+0x220>)
 80104b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80104b8:	2206      	movs	r2, #6
 80104ba:	f7ef ff09 	bl	80002d0 <memchr>
 80104be:	2800      	cmp	r0, #0
 80104c0:	d03f      	beq.n	8010542 <_vfiprintf_r+0x20a>
 80104c2:	4b26      	ldr	r3, [pc, #152]	@ (801055c <_vfiprintf_r+0x224>)
 80104c4:	bb1b      	cbnz	r3, 801050e <_vfiprintf_r+0x1d6>
 80104c6:	9b03      	ldr	r3, [sp, #12]
 80104c8:	3307      	adds	r3, #7
 80104ca:	f023 0307 	bic.w	r3, r3, #7
 80104ce:	3308      	adds	r3, #8
 80104d0:	9303      	str	r3, [sp, #12]
 80104d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80104d4:	443b      	add	r3, r7
 80104d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80104d8:	e76a      	b.n	80103b0 <_vfiprintf_r+0x78>
 80104da:	fb0c 3202 	mla	r2, ip, r2, r3
 80104de:	460c      	mov	r4, r1
 80104e0:	2001      	movs	r0, #1
 80104e2:	e7a8      	b.n	8010436 <_vfiprintf_r+0xfe>
 80104e4:	2300      	movs	r3, #0
 80104e6:	3401      	adds	r4, #1
 80104e8:	9305      	str	r3, [sp, #20]
 80104ea:	4619      	mov	r1, r3
 80104ec:	f04f 0c0a 	mov.w	ip, #10
 80104f0:	4620      	mov	r0, r4
 80104f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80104f6:	3a30      	subs	r2, #48	@ 0x30
 80104f8:	2a09      	cmp	r2, #9
 80104fa:	d903      	bls.n	8010504 <_vfiprintf_r+0x1cc>
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d0c6      	beq.n	801048e <_vfiprintf_r+0x156>
 8010500:	9105      	str	r1, [sp, #20]
 8010502:	e7c4      	b.n	801048e <_vfiprintf_r+0x156>
 8010504:	fb0c 2101 	mla	r1, ip, r1, r2
 8010508:	4604      	mov	r4, r0
 801050a:	2301      	movs	r3, #1
 801050c:	e7f0      	b.n	80104f0 <_vfiprintf_r+0x1b8>
 801050e:	ab03      	add	r3, sp, #12
 8010510:	9300      	str	r3, [sp, #0]
 8010512:	462a      	mov	r2, r5
 8010514:	4b12      	ldr	r3, [pc, #72]	@ (8010560 <_vfiprintf_r+0x228>)
 8010516:	a904      	add	r1, sp, #16
 8010518:	4630      	mov	r0, r6
 801051a:	f7fc fa8d 	bl	800ca38 <_printf_float>
 801051e:	4607      	mov	r7, r0
 8010520:	1c78      	adds	r0, r7, #1
 8010522:	d1d6      	bne.n	80104d2 <_vfiprintf_r+0x19a>
 8010524:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010526:	07d9      	lsls	r1, r3, #31
 8010528:	d405      	bmi.n	8010536 <_vfiprintf_r+0x1fe>
 801052a:	89ab      	ldrh	r3, [r5, #12]
 801052c:	059a      	lsls	r2, r3, #22
 801052e:	d402      	bmi.n	8010536 <_vfiprintf_r+0x1fe>
 8010530:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010532:	f7fd faf5 	bl	800db20 <__retarget_lock_release_recursive>
 8010536:	89ab      	ldrh	r3, [r5, #12]
 8010538:	065b      	lsls	r3, r3, #25
 801053a:	f53f af1f 	bmi.w	801037c <_vfiprintf_r+0x44>
 801053e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010540:	e71e      	b.n	8010380 <_vfiprintf_r+0x48>
 8010542:	ab03      	add	r3, sp, #12
 8010544:	9300      	str	r3, [sp, #0]
 8010546:	462a      	mov	r2, r5
 8010548:	4b05      	ldr	r3, [pc, #20]	@ (8010560 <_vfiprintf_r+0x228>)
 801054a:	a904      	add	r1, sp, #16
 801054c:	4630      	mov	r0, r6
 801054e:	f7fc fd0b 	bl	800cf68 <_printf_i>
 8010552:	e7e4      	b.n	801051e <_vfiprintf_r+0x1e6>
 8010554:	080249d9 	.word	0x080249d9
 8010558:	080249e3 	.word	0x080249e3
 801055c:	0800ca39 	.word	0x0800ca39
 8010560:	08010313 	.word	0x08010313
 8010564:	080249df 	.word	0x080249df

08010568 <__sflush_r>:
 8010568:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801056c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010570:	0716      	lsls	r6, r2, #28
 8010572:	4605      	mov	r5, r0
 8010574:	460c      	mov	r4, r1
 8010576:	d454      	bmi.n	8010622 <__sflush_r+0xba>
 8010578:	684b      	ldr	r3, [r1, #4]
 801057a:	2b00      	cmp	r3, #0
 801057c:	dc02      	bgt.n	8010584 <__sflush_r+0x1c>
 801057e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010580:	2b00      	cmp	r3, #0
 8010582:	dd48      	ble.n	8010616 <__sflush_r+0xae>
 8010584:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010586:	2e00      	cmp	r6, #0
 8010588:	d045      	beq.n	8010616 <__sflush_r+0xae>
 801058a:	2300      	movs	r3, #0
 801058c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010590:	682f      	ldr	r7, [r5, #0]
 8010592:	6a21      	ldr	r1, [r4, #32]
 8010594:	602b      	str	r3, [r5, #0]
 8010596:	d030      	beq.n	80105fa <__sflush_r+0x92>
 8010598:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801059a:	89a3      	ldrh	r3, [r4, #12]
 801059c:	0759      	lsls	r1, r3, #29
 801059e:	d505      	bpl.n	80105ac <__sflush_r+0x44>
 80105a0:	6863      	ldr	r3, [r4, #4]
 80105a2:	1ad2      	subs	r2, r2, r3
 80105a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80105a6:	b10b      	cbz	r3, 80105ac <__sflush_r+0x44>
 80105a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80105aa:	1ad2      	subs	r2, r2, r3
 80105ac:	2300      	movs	r3, #0
 80105ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80105b0:	6a21      	ldr	r1, [r4, #32]
 80105b2:	4628      	mov	r0, r5
 80105b4:	47b0      	blx	r6
 80105b6:	1c43      	adds	r3, r0, #1
 80105b8:	89a3      	ldrh	r3, [r4, #12]
 80105ba:	d106      	bne.n	80105ca <__sflush_r+0x62>
 80105bc:	6829      	ldr	r1, [r5, #0]
 80105be:	291d      	cmp	r1, #29
 80105c0:	d82b      	bhi.n	801061a <__sflush_r+0xb2>
 80105c2:	4a2a      	ldr	r2, [pc, #168]	@ (801066c <__sflush_r+0x104>)
 80105c4:	410a      	asrs	r2, r1
 80105c6:	07d6      	lsls	r6, r2, #31
 80105c8:	d427      	bmi.n	801061a <__sflush_r+0xb2>
 80105ca:	2200      	movs	r2, #0
 80105cc:	6062      	str	r2, [r4, #4]
 80105ce:	04d9      	lsls	r1, r3, #19
 80105d0:	6922      	ldr	r2, [r4, #16]
 80105d2:	6022      	str	r2, [r4, #0]
 80105d4:	d504      	bpl.n	80105e0 <__sflush_r+0x78>
 80105d6:	1c42      	adds	r2, r0, #1
 80105d8:	d101      	bne.n	80105de <__sflush_r+0x76>
 80105da:	682b      	ldr	r3, [r5, #0]
 80105dc:	b903      	cbnz	r3, 80105e0 <__sflush_r+0x78>
 80105de:	6560      	str	r0, [r4, #84]	@ 0x54
 80105e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80105e2:	602f      	str	r7, [r5, #0]
 80105e4:	b1b9      	cbz	r1, 8010616 <__sflush_r+0xae>
 80105e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80105ea:	4299      	cmp	r1, r3
 80105ec:	d002      	beq.n	80105f4 <__sflush_r+0x8c>
 80105ee:	4628      	mov	r0, r5
 80105f0:	f7fe f8ea 	bl	800e7c8 <_free_r>
 80105f4:	2300      	movs	r3, #0
 80105f6:	6363      	str	r3, [r4, #52]	@ 0x34
 80105f8:	e00d      	b.n	8010616 <__sflush_r+0xae>
 80105fa:	2301      	movs	r3, #1
 80105fc:	4628      	mov	r0, r5
 80105fe:	47b0      	blx	r6
 8010600:	4602      	mov	r2, r0
 8010602:	1c50      	adds	r0, r2, #1
 8010604:	d1c9      	bne.n	801059a <__sflush_r+0x32>
 8010606:	682b      	ldr	r3, [r5, #0]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d0c6      	beq.n	801059a <__sflush_r+0x32>
 801060c:	2b1d      	cmp	r3, #29
 801060e:	d001      	beq.n	8010614 <__sflush_r+0xac>
 8010610:	2b16      	cmp	r3, #22
 8010612:	d11e      	bne.n	8010652 <__sflush_r+0xea>
 8010614:	602f      	str	r7, [r5, #0]
 8010616:	2000      	movs	r0, #0
 8010618:	e022      	b.n	8010660 <__sflush_r+0xf8>
 801061a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801061e:	b21b      	sxth	r3, r3
 8010620:	e01b      	b.n	801065a <__sflush_r+0xf2>
 8010622:	690f      	ldr	r7, [r1, #16]
 8010624:	2f00      	cmp	r7, #0
 8010626:	d0f6      	beq.n	8010616 <__sflush_r+0xae>
 8010628:	0793      	lsls	r3, r2, #30
 801062a:	680e      	ldr	r6, [r1, #0]
 801062c:	bf08      	it	eq
 801062e:	694b      	ldreq	r3, [r1, #20]
 8010630:	600f      	str	r7, [r1, #0]
 8010632:	bf18      	it	ne
 8010634:	2300      	movne	r3, #0
 8010636:	eba6 0807 	sub.w	r8, r6, r7
 801063a:	608b      	str	r3, [r1, #8]
 801063c:	f1b8 0f00 	cmp.w	r8, #0
 8010640:	dde9      	ble.n	8010616 <__sflush_r+0xae>
 8010642:	6a21      	ldr	r1, [r4, #32]
 8010644:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010646:	4643      	mov	r3, r8
 8010648:	463a      	mov	r2, r7
 801064a:	4628      	mov	r0, r5
 801064c:	47b0      	blx	r6
 801064e:	2800      	cmp	r0, #0
 8010650:	dc08      	bgt.n	8010664 <__sflush_r+0xfc>
 8010652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010656:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801065a:	81a3      	strh	r3, [r4, #12]
 801065c:	f04f 30ff 	mov.w	r0, #4294967295
 8010660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010664:	4407      	add	r7, r0
 8010666:	eba8 0800 	sub.w	r8, r8, r0
 801066a:	e7e7      	b.n	801063c <__sflush_r+0xd4>
 801066c:	dfbffffe 	.word	0xdfbffffe

08010670 <_fflush_r>:
 8010670:	b538      	push	{r3, r4, r5, lr}
 8010672:	690b      	ldr	r3, [r1, #16]
 8010674:	4605      	mov	r5, r0
 8010676:	460c      	mov	r4, r1
 8010678:	b913      	cbnz	r3, 8010680 <_fflush_r+0x10>
 801067a:	2500      	movs	r5, #0
 801067c:	4628      	mov	r0, r5
 801067e:	bd38      	pop	{r3, r4, r5, pc}
 8010680:	b118      	cbz	r0, 801068a <_fflush_r+0x1a>
 8010682:	6a03      	ldr	r3, [r0, #32]
 8010684:	b90b      	cbnz	r3, 801068a <_fflush_r+0x1a>
 8010686:	f7fd f82f 	bl	800d6e8 <__sinit>
 801068a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d0f3      	beq.n	801067a <_fflush_r+0xa>
 8010692:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010694:	07d0      	lsls	r0, r2, #31
 8010696:	d404      	bmi.n	80106a2 <_fflush_r+0x32>
 8010698:	0599      	lsls	r1, r3, #22
 801069a:	d402      	bmi.n	80106a2 <_fflush_r+0x32>
 801069c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801069e:	f7fd fa3e 	bl	800db1e <__retarget_lock_acquire_recursive>
 80106a2:	4628      	mov	r0, r5
 80106a4:	4621      	mov	r1, r4
 80106a6:	f7ff ff5f 	bl	8010568 <__sflush_r>
 80106aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80106ac:	07da      	lsls	r2, r3, #31
 80106ae:	4605      	mov	r5, r0
 80106b0:	d4e4      	bmi.n	801067c <_fflush_r+0xc>
 80106b2:	89a3      	ldrh	r3, [r4, #12]
 80106b4:	059b      	lsls	r3, r3, #22
 80106b6:	d4e1      	bmi.n	801067c <_fflush_r+0xc>
 80106b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80106ba:	f7fd fa31 	bl	800db20 <__retarget_lock_release_recursive>
 80106be:	e7dd      	b.n	801067c <_fflush_r+0xc>

080106c0 <__swhatbuf_r>:
 80106c0:	b570      	push	{r4, r5, r6, lr}
 80106c2:	460c      	mov	r4, r1
 80106c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106c8:	2900      	cmp	r1, #0
 80106ca:	b096      	sub	sp, #88	@ 0x58
 80106cc:	4615      	mov	r5, r2
 80106ce:	461e      	mov	r6, r3
 80106d0:	da0d      	bge.n	80106ee <__swhatbuf_r+0x2e>
 80106d2:	89a3      	ldrh	r3, [r4, #12]
 80106d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80106d8:	f04f 0100 	mov.w	r1, #0
 80106dc:	bf14      	ite	ne
 80106de:	2340      	movne	r3, #64	@ 0x40
 80106e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80106e4:	2000      	movs	r0, #0
 80106e6:	6031      	str	r1, [r6, #0]
 80106e8:	602b      	str	r3, [r5, #0]
 80106ea:	b016      	add	sp, #88	@ 0x58
 80106ec:	bd70      	pop	{r4, r5, r6, pc}
 80106ee:	466a      	mov	r2, sp
 80106f0:	f000 f874 	bl	80107dc <_fstat_r>
 80106f4:	2800      	cmp	r0, #0
 80106f6:	dbec      	blt.n	80106d2 <__swhatbuf_r+0x12>
 80106f8:	9901      	ldr	r1, [sp, #4]
 80106fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80106fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010702:	4259      	negs	r1, r3
 8010704:	4159      	adcs	r1, r3
 8010706:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801070a:	e7eb      	b.n	80106e4 <__swhatbuf_r+0x24>

0801070c <__smakebuf_r>:
 801070c:	898b      	ldrh	r3, [r1, #12]
 801070e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010710:	079d      	lsls	r5, r3, #30
 8010712:	4606      	mov	r6, r0
 8010714:	460c      	mov	r4, r1
 8010716:	d507      	bpl.n	8010728 <__smakebuf_r+0x1c>
 8010718:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801071c:	6023      	str	r3, [r4, #0]
 801071e:	6123      	str	r3, [r4, #16]
 8010720:	2301      	movs	r3, #1
 8010722:	6163      	str	r3, [r4, #20]
 8010724:	b003      	add	sp, #12
 8010726:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010728:	ab01      	add	r3, sp, #4
 801072a:	466a      	mov	r2, sp
 801072c:	f7ff ffc8 	bl	80106c0 <__swhatbuf_r>
 8010730:	9f00      	ldr	r7, [sp, #0]
 8010732:	4605      	mov	r5, r0
 8010734:	4639      	mov	r1, r7
 8010736:	4630      	mov	r0, r6
 8010738:	f7fe f8ba 	bl	800e8b0 <_malloc_r>
 801073c:	b948      	cbnz	r0, 8010752 <__smakebuf_r+0x46>
 801073e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010742:	059a      	lsls	r2, r3, #22
 8010744:	d4ee      	bmi.n	8010724 <__smakebuf_r+0x18>
 8010746:	f023 0303 	bic.w	r3, r3, #3
 801074a:	f043 0302 	orr.w	r3, r3, #2
 801074e:	81a3      	strh	r3, [r4, #12]
 8010750:	e7e2      	b.n	8010718 <__smakebuf_r+0xc>
 8010752:	89a3      	ldrh	r3, [r4, #12]
 8010754:	6020      	str	r0, [r4, #0]
 8010756:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801075a:	81a3      	strh	r3, [r4, #12]
 801075c:	9b01      	ldr	r3, [sp, #4]
 801075e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010762:	b15b      	cbz	r3, 801077c <__smakebuf_r+0x70>
 8010764:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010768:	4630      	mov	r0, r6
 801076a:	f000 f849 	bl	8010800 <_isatty_r>
 801076e:	b128      	cbz	r0, 801077c <__smakebuf_r+0x70>
 8010770:	89a3      	ldrh	r3, [r4, #12]
 8010772:	f023 0303 	bic.w	r3, r3, #3
 8010776:	f043 0301 	orr.w	r3, r3, #1
 801077a:	81a3      	strh	r3, [r4, #12]
 801077c:	89a3      	ldrh	r3, [r4, #12]
 801077e:	431d      	orrs	r5, r3
 8010780:	81a5      	strh	r5, [r4, #12]
 8010782:	e7cf      	b.n	8010724 <__smakebuf_r+0x18>

08010784 <memmove>:
 8010784:	4288      	cmp	r0, r1
 8010786:	b510      	push	{r4, lr}
 8010788:	eb01 0402 	add.w	r4, r1, r2
 801078c:	d902      	bls.n	8010794 <memmove+0x10>
 801078e:	4284      	cmp	r4, r0
 8010790:	4623      	mov	r3, r4
 8010792:	d807      	bhi.n	80107a4 <memmove+0x20>
 8010794:	1e43      	subs	r3, r0, #1
 8010796:	42a1      	cmp	r1, r4
 8010798:	d008      	beq.n	80107ac <memmove+0x28>
 801079a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801079e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80107a2:	e7f8      	b.n	8010796 <memmove+0x12>
 80107a4:	4402      	add	r2, r0
 80107a6:	4601      	mov	r1, r0
 80107a8:	428a      	cmp	r2, r1
 80107aa:	d100      	bne.n	80107ae <memmove+0x2a>
 80107ac:	bd10      	pop	{r4, pc}
 80107ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80107b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80107b6:	e7f7      	b.n	80107a8 <memmove+0x24>

080107b8 <strncmp>:
 80107b8:	b510      	push	{r4, lr}
 80107ba:	b16a      	cbz	r2, 80107d8 <strncmp+0x20>
 80107bc:	3901      	subs	r1, #1
 80107be:	1884      	adds	r4, r0, r2
 80107c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80107c4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80107c8:	429a      	cmp	r2, r3
 80107ca:	d103      	bne.n	80107d4 <strncmp+0x1c>
 80107cc:	42a0      	cmp	r0, r4
 80107ce:	d001      	beq.n	80107d4 <strncmp+0x1c>
 80107d0:	2a00      	cmp	r2, #0
 80107d2:	d1f5      	bne.n	80107c0 <strncmp+0x8>
 80107d4:	1ad0      	subs	r0, r2, r3
 80107d6:	bd10      	pop	{r4, pc}
 80107d8:	4610      	mov	r0, r2
 80107da:	e7fc      	b.n	80107d6 <strncmp+0x1e>

080107dc <_fstat_r>:
 80107dc:	b538      	push	{r3, r4, r5, lr}
 80107de:	4d07      	ldr	r5, [pc, #28]	@ (80107fc <_fstat_r+0x20>)
 80107e0:	2300      	movs	r3, #0
 80107e2:	4604      	mov	r4, r0
 80107e4:	4608      	mov	r0, r1
 80107e6:	4611      	mov	r1, r2
 80107e8:	602b      	str	r3, [r5, #0]
 80107ea:	f7f1 fcc5 	bl	8002178 <_fstat>
 80107ee:	1c43      	adds	r3, r0, #1
 80107f0:	d102      	bne.n	80107f8 <_fstat_r+0x1c>
 80107f2:	682b      	ldr	r3, [r5, #0]
 80107f4:	b103      	cbz	r3, 80107f8 <_fstat_r+0x1c>
 80107f6:	6023      	str	r3, [r4, #0]
 80107f8:	bd38      	pop	{r3, r4, r5, pc}
 80107fa:	bf00      	nop
 80107fc:	2000299c 	.word	0x2000299c

08010800 <_isatty_r>:
 8010800:	b538      	push	{r3, r4, r5, lr}
 8010802:	4d06      	ldr	r5, [pc, #24]	@ (801081c <_isatty_r+0x1c>)
 8010804:	2300      	movs	r3, #0
 8010806:	4604      	mov	r4, r0
 8010808:	4608      	mov	r0, r1
 801080a:	602b      	str	r3, [r5, #0]
 801080c:	f7f1 fcc4 	bl	8002198 <_isatty>
 8010810:	1c43      	adds	r3, r0, #1
 8010812:	d102      	bne.n	801081a <_isatty_r+0x1a>
 8010814:	682b      	ldr	r3, [r5, #0]
 8010816:	b103      	cbz	r3, 801081a <_isatty_r+0x1a>
 8010818:	6023      	str	r3, [r4, #0]
 801081a:	bd38      	pop	{r3, r4, r5, pc}
 801081c:	2000299c 	.word	0x2000299c

08010820 <_sbrk_r>:
 8010820:	b538      	push	{r3, r4, r5, lr}
 8010822:	4d06      	ldr	r5, [pc, #24]	@ (801083c <_sbrk_r+0x1c>)
 8010824:	2300      	movs	r3, #0
 8010826:	4604      	mov	r4, r0
 8010828:	4608      	mov	r0, r1
 801082a:	602b      	str	r3, [r5, #0]
 801082c:	f7f1 fccc 	bl	80021c8 <_sbrk>
 8010830:	1c43      	adds	r3, r0, #1
 8010832:	d102      	bne.n	801083a <_sbrk_r+0x1a>
 8010834:	682b      	ldr	r3, [r5, #0]
 8010836:	b103      	cbz	r3, 801083a <_sbrk_r+0x1a>
 8010838:	6023      	str	r3, [r4, #0]
 801083a:	bd38      	pop	{r3, r4, r5, pc}
 801083c:	2000299c 	.word	0x2000299c

08010840 <memcpy>:
 8010840:	440a      	add	r2, r1
 8010842:	4291      	cmp	r1, r2
 8010844:	f100 33ff 	add.w	r3, r0, #4294967295
 8010848:	d100      	bne.n	801084c <memcpy+0xc>
 801084a:	4770      	bx	lr
 801084c:	b510      	push	{r4, lr}
 801084e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010852:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010856:	4291      	cmp	r1, r2
 8010858:	d1f9      	bne.n	801084e <memcpy+0xe>
 801085a:	bd10      	pop	{r4, pc}
 801085c:	0000      	movs	r0, r0
	...

08010860 <nan>:
 8010860:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010868 <nan+0x8>
 8010864:	4770      	bx	lr
 8010866:	bf00      	nop
 8010868:	00000000 	.word	0x00000000
 801086c:	7ff80000 	.word	0x7ff80000

08010870 <__assert_func>:
 8010870:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010872:	4614      	mov	r4, r2
 8010874:	461a      	mov	r2, r3
 8010876:	4b09      	ldr	r3, [pc, #36]	@ (801089c <__assert_func+0x2c>)
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	4605      	mov	r5, r0
 801087c:	68d8      	ldr	r0, [r3, #12]
 801087e:	b954      	cbnz	r4, 8010896 <__assert_func+0x26>
 8010880:	4b07      	ldr	r3, [pc, #28]	@ (80108a0 <__assert_func+0x30>)
 8010882:	461c      	mov	r4, r3
 8010884:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010888:	9100      	str	r1, [sp, #0]
 801088a:	462b      	mov	r3, r5
 801088c:	4905      	ldr	r1, [pc, #20]	@ (80108a4 <__assert_func+0x34>)
 801088e:	f000 fba7 	bl	8010fe0 <fiprintf>
 8010892:	f000 fbb7 	bl	8011004 <abort>
 8010896:	4b04      	ldr	r3, [pc, #16]	@ (80108a8 <__assert_func+0x38>)
 8010898:	e7f4      	b.n	8010884 <__assert_func+0x14>
 801089a:	bf00      	nop
 801089c:	20000118 	.word	0x20000118
 80108a0:	08024a2d 	.word	0x08024a2d
 80108a4:	080249ff 	.word	0x080249ff
 80108a8:	080249f2 	.word	0x080249f2

080108ac <_calloc_r>:
 80108ac:	b570      	push	{r4, r5, r6, lr}
 80108ae:	fba1 5402 	umull	r5, r4, r1, r2
 80108b2:	b93c      	cbnz	r4, 80108c4 <_calloc_r+0x18>
 80108b4:	4629      	mov	r1, r5
 80108b6:	f7fd fffb 	bl	800e8b0 <_malloc_r>
 80108ba:	4606      	mov	r6, r0
 80108bc:	b928      	cbnz	r0, 80108ca <_calloc_r+0x1e>
 80108be:	2600      	movs	r6, #0
 80108c0:	4630      	mov	r0, r6
 80108c2:	bd70      	pop	{r4, r5, r6, pc}
 80108c4:	220c      	movs	r2, #12
 80108c6:	6002      	str	r2, [r0, #0]
 80108c8:	e7f9      	b.n	80108be <_calloc_r+0x12>
 80108ca:	462a      	mov	r2, r5
 80108cc:	4621      	mov	r1, r4
 80108ce:	f7fd f8a9 	bl	800da24 <memset>
 80108d2:	e7f5      	b.n	80108c0 <_calloc_r+0x14>

080108d4 <rshift>:
 80108d4:	6903      	ldr	r3, [r0, #16]
 80108d6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80108da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80108de:	ea4f 1261 	mov.w	r2, r1, asr #5
 80108e2:	f100 0414 	add.w	r4, r0, #20
 80108e6:	dd45      	ble.n	8010974 <rshift+0xa0>
 80108e8:	f011 011f 	ands.w	r1, r1, #31
 80108ec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80108f0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80108f4:	d10c      	bne.n	8010910 <rshift+0x3c>
 80108f6:	f100 0710 	add.w	r7, r0, #16
 80108fa:	4629      	mov	r1, r5
 80108fc:	42b1      	cmp	r1, r6
 80108fe:	d334      	bcc.n	801096a <rshift+0x96>
 8010900:	1a9b      	subs	r3, r3, r2
 8010902:	009b      	lsls	r3, r3, #2
 8010904:	1eea      	subs	r2, r5, #3
 8010906:	4296      	cmp	r6, r2
 8010908:	bf38      	it	cc
 801090a:	2300      	movcc	r3, #0
 801090c:	4423      	add	r3, r4
 801090e:	e015      	b.n	801093c <rshift+0x68>
 8010910:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010914:	f1c1 0820 	rsb	r8, r1, #32
 8010918:	40cf      	lsrs	r7, r1
 801091a:	f105 0e04 	add.w	lr, r5, #4
 801091e:	46a1      	mov	r9, r4
 8010920:	4576      	cmp	r6, lr
 8010922:	46f4      	mov	ip, lr
 8010924:	d815      	bhi.n	8010952 <rshift+0x7e>
 8010926:	1a9a      	subs	r2, r3, r2
 8010928:	0092      	lsls	r2, r2, #2
 801092a:	3a04      	subs	r2, #4
 801092c:	3501      	adds	r5, #1
 801092e:	42ae      	cmp	r6, r5
 8010930:	bf38      	it	cc
 8010932:	2200      	movcc	r2, #0
 8010934:	18a3      	adds	r3, r4, r2
 8010936:	50a7      	str	r7, [r4, r2]
 8010938:	b107      	cbz	r7, 801093c <rshift+0x68>
 801093a:	3304      	adds	r3, #4
 801093c:	1b1a      	subs	r2, r3, r4
 801093e:	42a3      	cmp	r3, r4
 8010940:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010944:	bf08      	it	eq
 8010946:	2300      	moveq	r3, #0
 8010948:	6102      	str	r2, [r0, #16]
 801094a:	bf08      	it	eq
 801094c:	6143      	streq	r3, [r0, #20]
 801094e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010952:	f8dc c000 	ldr.w	ip, [ip]
 8010956:	fa0c fc08 	lsl.w	ip, ip, r8
 801095a:	ea4c 0707 	orr.w	r7, ip, r7
 801095e:	f849 7b04 	str.w	r7, [r9], #4
 8010962:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010966:	40cf      	lsrs	r7, r1
 8010968:	e7da      	b.n	8010920 <rshift+0x4c>
 801096a:	f851 cb04 	ldr.w	ip, [r1], #4
 801096e:	f847 cf04 	str.w	ip, [r7, #4]!
 8010972:	e7c3      	b.n	80108fc <rshift+0x28>
 8010974:	4623      	mov	r3, r4
 8010976:	e7e1      	b.n	801093c <rshift+0x68>

08010978 <__hexdig_fun>:
 8010978:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801097c:	2b09      	cmp	r3, #9
 801097e:	d802      	bhi.n	8010986 <__hexdig_fun+0xe>
 8010980:	3820      	subs	r0, #32
 8010982:	b2c0      	uxtb	r0, r0
 8010984:	4770      	bx	lr
 8010986:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801098a:	2b05      	cmp	r3, #5
 801098c:	d801      	bhi.n	8010992 <__hexdig_fun+0x1a>
 801098e:	3847      	subs	r0, #71	@ 0x47
 8010990:	e7f7      	b.n	8010982 <__hexdig_fun+0xa>
 8010992:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8010996:	2b05      	cmp	r3, #5
 8010998:	d801      	bhi.n	801099e <__hexdig_fun+0x26>
 801099a:	3827      	subs	r0, #39	@ 0x27
 801099c:	e7f1      	b.n	8010982 <__hexdig_fun+0xa>
 801099e:	2000      	movs	r0, #0
 80109a0:	4770      	bx	lr
	...

080109a4 <__gethex>:
 80109a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109a8:	b085      	sub	sp, #20
 80109aa:	468a      	mov	sl, r1
 80109ac:	9302      	str	r3, [sp, #8]
 80109ae:	680b      	ldr	r3, [r1, #0]
 80109b0:	9001      	str	r0, [sp, #4]
 80109b2:	4690      	mov	r8, r2
 80109b4:	1c9c      	adds	r4, r3, #2
 80109b6:	46a1      	mov	r9, r4
 80109b8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80109bc:	2830      	cmp	r0, #48	@ 0x30
 80109be:	d0fa      	beq.n	80109b6 <__gethex+0x12>
 80109c0:	eba9 0303 	sub.w	r3, r9, r3
 80109c4:	f1a3 0b02 	sub.w	fp, r3, #2
 80109c8:	f7ff ffd6 	bl	8010978 <__hexdig_fun>
 80109cc:	4605      	mov	r5, r0
 80109ce:	2800      	cmp	r0, #0
 80109d0:	d168      	bne.n	8010aa4 <__gethex+0x100>
 80109d2:	49a0      	ldr	r1, [pc, #640]	@ (8010c54 <__gethex+0x2b0>)
 80109d4:	2201      	movs	r2, #1
 80109d6:	4648      	mov	r0, r9
 80109d8:	f7ff feee 	bl	80107b8 <strncmp>
 80109dc:	4607      	mov	r7, r0
 80109de:	2800      	cmp	r0, #0
 80109e0:	d167      	bne.n	8010ab2 <__gethex+0x10e>
 80109e2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80109e6:	4626      	mov	r6, r4
 80109e8:	f7ff ffc6 	bl	8010978 <__hexdig_fun>
 80109ec:	2800      	cmp	r0, #0
 80109ee:	d062      	beq.n	8010ab6 <__gethex+0x112>
 80109f0:	4623      	mov	r3, r4
 80109f2:	7818      	ldrb	r0, [r3, #0]
 80109f4:	2830      	cmp	r0, #48	@ 0x30
 80109f6:	4699      	mov	r9, r3
 80109f8:	f103 0301 	add.w	r3, r3, #1
 80109fc:	d0f9      	beq.n	80109f2 <__gethex+0x4e>
 80109fe:	f7ff ffbb 	bl	8010978 <__hexdig_fun>
 8010a02:	fab0 f580 	clz	r5, r0
 8010a06:	096d      	lsrs	r5, r5, #5
 8010a08:	f04f 0b01 	mov.w	fp, #1
 8010a0c:	464a      	mov	r2, r9
 8010a0e:	4616      	mov	r6, r2
 8010a10:	3201      	adds	r2, #1
 8010a12:	7830      	ldrb	r0, [r6, #0]
 8010a14:	f7ff ffb0 	bl	8010978 <__hexdig_fun>
 8010a18:	2800      	cmp	r0, #0
 8010a1a:	d1f8      	bne.n	8010a0e <__gethex+0x6a>
 8010a1c:	498d      	ldr	r1, [pc, #564]	@ (8010c54 <__gethex+0x2b0>)
 8010a1e:	2201      	movs	r2, #1
 8010a20:	4630      	mov	r0, r6
 8010a22:	f7ff fec9 	bl	80107b8 <strncmp>
 8010a26:	2800      	cmp	r0, #0
 8010a28:	d13f      	bne.n	8010aaa <__gethex+0x106>
 8010a2a:	b944      	cbnz	r4, 8010a3e <__gethex+0x9a>
 8010a2c:	1c74      	adds	r4, r6, #1
 8010a2e:	4622      	mov	r2, r4
 8010a30:	4616      	mov	r6, r2
 8010a32:	3201      	adds	r2, #1
 8010a34:	7830      	ldrb	r0, [r6, #0]
 8010a36:	f7ff ff9f 	bl	8010978 <__hexdig_fun>
 8010a3a:	2800      	cmp	r0, #0
 8010a3c:	d1f8      	bne.n	8010a30 <__gethex+0x8c>
 8010a3e:	1ba4      	subs	r4, r4, r6
 8010a40:	00a7      	lsls	r7, r4, #2
 8010a42:	7833      	ldrb	r3, [r6, #0]
 8010a44:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010a48:	2b50      	cmp	r3, #80	@ 0x50
 8010a4a:	d13e      	bne.n	8010aca <__gethex+0x126>
 8010a4c:	7873      	ldrb	r3, [r6, #1]
 8010a4e:	2b2b      	cmp	r3, #43	@ 0x2b
 8010a50:	d033      	beq.n	8010aba <__gethex+0x116>
 8010a52:	2b2d      	cmp	r3, #45	@ 0x2d
 8010a54:	d034      	beq.n	8010ac0 <__gethex+0x11c>
 8010a56:	1c71      	adds	r1, r6, #1
 8010a58:	2400      	movs	r4, #0
 8010a5a:	7808      	ldrb	r0, [r1, #0]
 8010a5c:	f7ff ff8c 	bl	8010978 <__hexdig_fun>
 8010a60:	1e43      	subs	r3, r0, #1
 8010a62:	b2db      	uxtb	r3, r3
 8010a64:	2b18      	cmp	r3, #24
 8010a66:	d830      	bhi.n	8010aca <__gethex+0x126>
 8010a68:	f1a0 0210 	sub.w	r2, r0, #16
 8010a6c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010a70:	f7ff ff82 	bl	8010978 <__hexdig_fun>
 8010a74:	f100 3cff 	add.w	ip, r0, #4294967295
 8010a78:	fa5f fc8c 	uxtb.w	ip, ip
 8010a7c:	f1bc 0f18 	cmp.w	ip, #24
 8010a80:	f04f 030a 	mov.w	r3, #10
 8010a84:	d91e      	bls.n	8010ac4 <__gethex+0x120>
 8010a86:	b104      	cbz	r4, 8010a8a <__gethex+0xe6>
 8010a88:	4252      	negs	r2, r2
 8010a8a:	4417      	add	r7, r2
 8010a8c:	f8ca 1000 	str.w	r1, [sl]
 8010a90:	b1ed      	cbz	r5, 8010ace <__gethex+0x12a>
 8010a92:	f1bb 0f00 	cmp.w	fp, #0
 8010a96:	bf0c      	ite	eq
 8010a98:	2506      	moveq	r5, #6
 8010a9a:	2500      	movne	r5, #0
 8010a9c:	4628      	mov	r0, r5
 8010a9e:	b005      	add	sp, #20
 8010aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010aa4:	2500      	movs	r5, #0
 8010aa6:	462c      	mov	r4, r5
 8010aa8:	e7b0      	b.n	8010a0c <__gethex+0x68>
 8010aaa:	2c00      	cmp	r4, #0
 8010aac:	d1c7      	bne.n	8010a3e <__gethex+0x9a>
 8010aae:	4627      	mov	r7, r4
 8010ab0:	e7c7      	b.n	8010a42 <__gethex+0x9e>
 8010ab2:	464e      	mov	r6, r9
 8010ab4:	462f      	mov	r7, r5
 8010ab6:	2501      	movs	r5, #1
 8010ab8:	e7c3      	b.n	8010a42 <__gethex+0x9e>
 8010aba:	2400      	movs	r4, #0
 8010abc:	1cb1      	adds	r1, r6, #2
 8010abe:	e7cc      	b.n	8010a5a <__gethex+0xb6>
 8010ac0:	2401      	movs	r4, #1
 8010ac2:	e7fb      	b.n	8010abc <__gethex+0x118>
 8010ac4:	fb03 0002 	mla	r0, r3, r2, r0
 8010ac8:	e7ce      	b.n	8010a68 <__gethex+0xc4>
 8010aca:	4631      	mov	r1, r6
 8010acc:	e7de      	b.n	8010a8c <__gethex+0xe8>
 8010ace:	eba6 0309 	sub.w	r3, r6, r9
 8010ad2:	3b01      	subs	r3, #1
 8010ad4:	4629      	mov	r1, r5
 8010ad6:	2b07      	cmp	r3, #7
 8010ad8:	dc0a      	bgt.n	8010af0 <__gethex+0x14c>
 8010ada:	9801      	ldr	r0, [sp, #4]
 8010adc:	f7fd ff74 	bl	800e9c8 <_Balloc>
 8010ae0:	4604      	mov	r4, r0
 8010ae2:	b940      	cbnz	r0, 8010af6 <__gethex+0x152>
 8010ae4:	4b5c      	ldr	r3, [pc, #368]	@ (8010c58 <__gethex+0x2b4>)
 8010ae6:	4602      	mov	r2, r0
 8010ae8:	21e4      	movs	r1, #228	@ 0xe4
 8010aea:	485c      	ldr	r0, [pc, #368]	@ (8010c5c <__gethex+0x2b8>)
 8010aec:	f7ff fec0 	bl	8010870 <__assert_func>
 8010af0:	3101      	adds	r1, #1
 8010af2:	105b      	asrs	r3, r3, #1
 8010af4:	e7ef      	b.n	8010ad6 <__gethex+0x132>
 8010af6:	f100 0a14 	add.w	sl, r0, #20
 8010afa:	2300      	movs	r3, #0
 8010afc:	4655      	mov	r5, sl
 8010afe:	469b      	mov	fp, r3
 8010b00:	45b1      	cmp	r9, r6
 8010b02:	d337      	bcc.n	8010b74 <__gethex+0x1d0>
 8010b04:	f845 bb04 	str.w	fp, [r5], #4
 8010b08:	eba5 050a 	sub.w	r5, r5, sl
 8010b0c:	10ad      	asrs	r5, r5, #2
 8010b0e:	6125      	str	r5, [r4, #16]
 8010b10:	4658      	mov	r0, fp
 8010b12:	f7fe f84b 	bl	800ebac <__hi0bits>
 8010b16:	016d      	lsls	r5, r5, #5
 8010b18:	f8d8 6000 	ldr.w	r6, [r8]
 8010b1c:	1a2d      	subs	r5, r5, r0
 8010b1e:	42b5      	cmp	r5, r6
 8010b20:	dd54      	ble.n	8010bcc <__gethex+0x228>
 8010b22:	1bad      	subs	r5, r5, r6
 8010b24:	4629      	mov	r1, r5
 8010b26:	4620      	mov	r0, r4
 8010b28:	f7fe fbdf 	bl	800f2ea <__any_on>
 8010b2c:	4681      	mov	r9, r0
 8010b2e:	b178      	cbz	r0, 8010b50 <__gethex+0x1ac>
 8010b30:	1e6b      	subs	r3, r5, #1
 8010b32:	1159      	asrs	r1, r3, #5
 8010b34:	f003 021f 	and.w	r2, r3, #31
 8010b38:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010b3c:	f04f 0901 	mov.w	r9, #1
 8010b40:	fa09 f202 	lsl.w	r2, r9, r2
 8010b44:	420a      	tst	r2, r1
 8010b46:	d003      	beq.n	8010b50 <__gethex+0x1ac>
 8010b48:	454b      	cmp	r3, r9
 8010b4a:	dc36      	bgt.n	8010bba <__gethex+0x216>
 8010b4c:	f04f 0902 	mov.w	r9, #2
 8010b50:	4629      	mov	r1, r5
 8010b52:	4620      	mov	r0, r4
 8010b54:	f7ff febe 	bl	80108d4 <rshift>
 8010b58:	442f      	add	r7, r5
 8010b5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010b5e:	42bb      	cmp	r3, r7
 8010b60:	da42      	bge.n	8010be8 <__gethex+0x244>
 8010b62:	9801      	ldr	r0, [sp, #4]
 8010b64:	4621      	mov	r1, r4
 8010b66:	f7fd ff6f 	bl	800ea48 <_Bfree>
 8010b6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010b6c:	2300      	movs	r3, #0
 8010b6e:	6013      	str	r3, [r2, #0]
 8010b70:	25a3      	movs	r5, #163	@ 0xa3
 8010b72:	e793      	b.n	8010a9c <__gethex+0xf8>
 8010b74:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010b78:	2a2e      	cmp	r2, #46	@ 0x2e
 8010b7a:	d012      	beq.n	8010ba2 <__gethex+0x1fe>
 8010b7c:	2b20      	cmp	r3, #32
 8010b7e:	d104      	bne.n	8010b8a <__gethex+0x1e6>
 8010b80:	f845 bb04 	str.w	fp, [r5], #4
 8010b84:	f04f 0b00 	mov.w	fp, #0
 8010b88:	465b      	mov	r3, fp
 8010b8a:	7830      	ldrb	r0, [r6, #0]
 8010b8c:	9303      	str	r3, [sp, #12]
 8010b8e:	f7ff fef3 	bl	8010978 <__hexdig_fun>
 8010b92:	9b03      	ldr	r3, [sp, #12]
 8010b94:	f000 000f 	and.w	r0, r0, #15
 8010b98:	4098      	lsls	r0, r3
 8010b9a:	ea4b 0b00 	orr.w	fp, fp, r0
 8010b9e:	3304      	adds	r3, #4
 8010ba0:	e7ae      	b.n	8010b00 <__gethex+0x15c>
 8010ba2:	45b1      	cmp	r9, r6
 8010ba4:	d8ea      	bhi.n	8010b7c <__gethex+0x1d8>
 8010ba6:	492b      	ldr	r1, [pc, #172]	@ (8010c54 <__gethex+0x2b0>)
 8010ba8:	9303      	str	r3, [sp, #12]
 8010baa:	2201      	movs	r2, #1
 8010bac:	4630      	mov	r0, r6
 8010bae:	f7ff fe03 	bl	80107b8 <strncmp>
 8010bb2:	9b03      	ldr	r3, [sp, #12]
 8010bb4:	2800      	cmp	r0, #0
 8010bb6:	d1e1      	bne.n	8010b7c <__gethex+0x1d8>
 8010bb8:	e7a2      	b.n	8010b00 <__gethex+0x15c>
 8010bba:	1ea9      	subs	r1, r5, #2
 8010bbc:	4620      	mov	r0, r4
 8010bbe:	f7fe fb94 	bl	800f2ea <__any_on>
 8010bc2:	2800      	cmp	r0, #0
 8010bc4:	d0c2      	beq.n	8010b4c <__gethex+0x1a8>
 8010bc6:	f04f 0903 	mov.w	r9, #3
 8010bca:	e7c1      	b.n	8010b50 <__gethex+0x1ac>
 8010bcc:	da09      	bge.n	8010be2 <__gethex+0x23e>
 8010bce:	1b75      	subs	r5, r6, r5
 8010bd0:	4621      	mov	r1, r4
 8010bd2:	9801      	ldr	r0, [sp, #4]
 8010bd4:	462a      	mov	r2, r5
 8010bd6:	f7fe f94f 	bl	800ee78 <__lshift>
 8010bda:	1b7f      	subs	r7, r7, r5
 8010bdc:	4604      	mov	r4, r0
 8010bde:	f100 0a14 	add.w	sl, r0, #20
 8010be2:	f04f 0900 	mov.w	r9, #0
 8010be6:	e7b8      	b.n	8010b5a <__gethex+0x1b6>
 8010be8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010bec:	42bd      	cmp	r5, r7
 8010bee:	dd6f      	ble.n	8010cd0 <__gethex+0x32c>
 8010bf0:	1bed      	subs	r5, r5, r7
 8010bf2:	42ae      	cmp	r6, r5
 8010bf4:	dc34      	bgt.n	8010c60 <__gethex+0x2bc>
 8010bf6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010bfa:	2b02      	cmp	r3, #2
 8010bfc:	d022      	beq.n	8010c44 <__gethex+0x2a0>
 8010bfe:	2b03      	cmp	r3, #3
 8010c00:	d024      	beq.n	8010c4c <__gethex+0x2a8>
 8010c02:	2b01      	cmp	r3, #1
 8010c04:	d115      	bne.n	8010c32 <__gethex+0x28e>
 8010c06:	42ae      	cmp	r6, r5
 8010c08:	d113      	bne.n	8010c32 <__gethex+0x28e>
 8010c0a:	2e01      	cmp	r6, #1
 8010c0c:	d10b      	bne.n	8010c26 <__gethex+0x282>
 8010c0e:	9a02      	ldr	r2, [sp, #8]
 8010c10:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010c14:	6013      	str	r3, [r2, #0]
 8010c16:	2301      	movs	r3, #1
 8010c18:	6123      	str	r3, [r4, #16]
 8010c1a:	f8ca 3000 	str.w	r3, [sl]
 8010c1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010c20:	2562      	movs	r5, #98	@ 0x62
 8010c22:	601c      	str	r4, [r3, #0]
 8010c24:	e73a      	b.n	8010a9c <__gethex+0xf8>
 8010c26:	1e71      	subs	r1, r6, #1
 8010c28:	4620      	mov	r0, r4
 8010c2a:	f7fe fb5e 	bl	800f2ea <__any_on>
 8010c2e:	2800      	cmp	r0, #0
 8010c30:	d1ed      	bne.n	8010c0e <__gethex+0x26a>
 8010c32:	9801      	ldr	r0, [sp, #4]
 8010c34:	4621      	mov	r1, r4
 8010c36:	f7fd ff07 	bl	800ea48 <_Bfree>
 8010c3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010c3c:	2300      	movs	r3, #0
 8010c3e:	6013      	str	r3, [r2, #0]
 8010c40:	2550      	movs	r5, #80	@ 0x50
 8010c42:	e72b      	b.n	8010a9c <__gethex+0xf8>
 8010c44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d1f3      	bne.n	8010c32 <__gethex+0x28e>
 8010c4a:	e7e0      	b.n	8010c0e <__gethex+0x26a>
 8010c4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d1dd      	bne.n	8010c0e <__gethex+0x26a>
 8010c52:	e7ee      	b.n	8010c32 <__gethex+0x28e>
 8010c54:	08024880 	.word	0x08024880
 8010c58:	08024719 	.word	0x08024719
 8010c5c:	08024a2e 	.word	0x08024a2e
 8010c60:	1e6f      	subs	r7, r5, #1
 8010c62:	f1b9 0f00 	cmp.w	r9, #0
 8010c66:	d130      	bne.n	8010cca <__gethex+0x326>
 8010c68:	b127      	cbz	r7, 8010c74 <__gethex+0x2d0>
 8010c6a:	4639      	mov	r1, r7
 8010c6c:	4620      	mov	r0, r4
 8010c6e:	f7fe fb3c 	bl	800f2ea <__any_on>
 8010c72:	4681      	mov	r9, r0
 8010c74:	117a      	asrs	r2, r7, #5
 8010c76:	2301      	movs	r3, #1
 8010c78:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010c7c:	f007 071f 	and.w	r7, r7, #31
 8010c80:	40bb      	lsls	r3, r7
 8010c82:	4213      	tst	r3, r2
 8010c84:	4629      	mov	r1, r5
 8010c86:	4620      	mov	r0, r4
 8010c88:	bf18      	it	ne
 8010c8a:	f049 0902 	orrne.w	r9, r9, #2
 8010c8e:	f7ff fe21 	bl	80108d4 <rshift>
 8010c92:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010c96:	1b76      	subs	r6, r6, r5
 8010c98:	2502      	movs	r5, #2
 8010c9a:	f1b9 0f00 	cmp.w	r9, #0
 8010c9e:	d047      	beq.n	8010d30 <__gethex+0x38c>
 8010ca0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010ca4:	2b02      	cmp	r3, #2
 8010ca6:	d015      	beq.n	8010cd4 <__gethex+0x330>
 8010ca8:	2b03      	cmp	r3, #3
 8010caa:	d017      	beq.n	8010cdc <__gethex+0x338>
 8010cac:	2b01      	cmp	r3, #1
 8010cae:	d109      	bne.n	8010cc4 <__gethex+0x320>
 8010cb0:	f019 0f02 	tst.w	r9, #2
 8010cb4:	d006      	beq.n	8010cc4 <__gethex+0x320>
 8010cb6:	f8da 3000 	ldr.w	r3, [sl]
 8010cba:	ea49 0903 	orr.w	r9, r9, r3
 8010cbe:	f019 0f01 	tst.w	r9, #1
 8010cc2:	d10e      	bne.n	8010ce2 <__gethex+0x33e>
 8010cc4:	f045 0510 	orr.w	r5, r5, #16
 8010cc8:	e032      	b.n	8010d30 <__gethex+0x38c>
 8010cca:	f04f 0901 	mov.w	r9, #1
 8010cce:	e7d1      	b.n	8010c74 <__gethex+0x2d0>
 8010cd0:	2501      	movs	r5, #1
 8010cd2:	e7e2      	b.n	8010c9a <__gethex+0x2f6>
 8010cd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010cd6:	f1c3 0301 	rsb	r3, r3, #1
 8010cda:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010cdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d0f0      	beq.n	8010cc4 <__gethex+0x320>
 8010ce2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010ce6:	f104 0314 	add.w	r3, r4, #20
 8010cea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010cee:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010cf2:	f04f 0c00 	mov.w	ip, #0
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	f853 2b04 	ldr.w	r2, [r3], #4
 8010cfc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010d00:	d01b      	beq.n	8010d3a <__gethex+0x396>
 8010d02:	3201      	adds	r2, #1
 8010d04:	6002      	str	r2, [r0, #0]
 8010d06:	2d02      	cmp	r5, #2
 8010d08:	f104 0314 	add.w	r3, r4, #20
 8010d0c:	d13c      	bne.n	8010d88 <__gethex+0x3e4>
 8010d0e:	f8d8 2000 	ldr.w	r2, [r8]
 8010d12:	3a01      	subs	r2, #1
 8010d14:	42b2      	cmp	r2, r6
 8010d16:	d109      	bne.n	8010d2c <__gethex+0x388>
 8010d18:	1171      	asrs	r1, r6, #5
 8010d1a:	2201      	movs	r2, #1
 8010d1c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010d20:	f006 061f 	and.w	r6, r6, #31
 8010d24:	fa02 f606 	lsl.w	r6, r2, r6
 8010d28:	421e      	tst	r6, r3
 8010d2a:	d13a      	bne.n	8010da2 <__gethex+0x3fe>
 8010d2c:	f045 0520 	orr.w	r5, r5, #32
 8010d30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010d32:	601c      	str	r4, [r3, #0]
 8010d34:	9b02      	ldr	r3, [sp, #8]
 8010d36:	601f      	str	r7, [r3, #0]
 8010d38:	e6b0      	b.n	8010a9c <__gethex+0xf8>
 8010d3a:	4299      	cmp	r1, r3
 8010d3c:	f843 cc04 	str.w	ip, [r3, #-4]
 8010d40:	d8d9      	bhi.n	8010cf6 <__gethex+0x352>
 8010d42:	68a3      	ldr	r3, [r4, #8]
 8010d44:	459b      	cmp	fp, r3
 8010d46:	db17      	blt.n	8010d78 <__gethex+0x3d4>
 8010d48:	6861      	ldr	r1, [r4, #4]
 8010d4a:	9801      	ldr	r0, [sp, #4]
 8010d4c:	3101      	adds	r1, #1
 8010d4e:	f7fd fe3b 	bl	800e9c8 <_Balloc>
 8010d52:	4681      	mov	r9, r0
 8010d54:	b918      	cbnz	r0, 8010d5e <__gethex+0x3ba>
 8010d56:	4b1a      	ldr	r3, [pc, #104]	@ (8010dc0 <__gethex+0x41c>)
 8010d58:	4602      	mov	r2, r0
 8010d5a:	2184      	movs	r1, #132	@ 0x84
 8010d5c:	e6c5      	b.n	8010aea <__gethex+0x146>
 8010d5e:	6922      	ldr	r2, [r4, #16]
 8010d60:	3202      	adds	r2, #2
 8010d62:	f104 010c 	add.w	r1, r4, #12
 8010d66:	0092      	lsls	r2, r2, #2
 8010d68:	300c      	adds	r0, #12
 8010d6a:	f7ff fd69 	bl	8010840 <memcpy>
 8010d6e:	4621      	mov	r1, r4
 8010d70:	9801      	ldr	r0, [sp, #4]
 8010d72:	f7fd fe69 	bl	800ea48 <_Bfree>
 8010d76:	464c      	mov	r4, r9
 8010d78:	6923      	ldr	r3, [r4, #16]
 8010d7a:	1c5a      	adds	r2, r3, #1
 8010d7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010d80:	6122      	str	r2, [r4, #16]
 8010d82:	2201      	movs	r2, #1
 8010d84:	615a      	str	r2, [r3, #20]
 8010d86:	e7be      	b.n	8010d06 <__gethex+0x362>
 8010d88:	6922      	ldr	r2, [r4, #16]
 8010d8a:	455a      	cmp	r2, fp
 8010d8c:	dd0b      	ble.n	8010da6 <__gethex+0x402>
 8010d8e:	2101      	movs	r1, #1
 8010d90:	4620      	mov	r0, r4
 8010d92:	f7ff fd9f 	bl	80108d4 <rshift>
 8010d96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010d9a:	3701      	adds	r7, #1
 8010d9c:	42bb      	cmp	r3, r7
 8010d9e:	f6ff aee0 	blt.w	8010b62 <__gethex+0x1be>
 8010da2:	2501      	movs	r5, #1
 8010da4:	e7c2      	b.n	8010d2c <__gethex+0x388>
 8010da6:	f016 061f 	ands.w	r6, r6, #31
 8010daa:	d0fa      	beq.n	8010da2 <__gethex+0x3fe>
 8010dac:	4453      	add	r3, sl
 8010dae:	f1c6 0620 	rsb	r6, r6, #32
 8010db2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010db6:	f7fd fef9 	bl	800ebac <__hi0bits>
 8010dba:	42b0      	cmp	r0, r6
 8010dbc:	dbe7      	blt.n	8010d8e <__gethex+0x3ea>
 8010dbe:	e7f0      	b.n	8010da2 <__gethex+0x3fe>
 8010dc0:	08024719 	.word	0x08024719

08010dc4 <L_shift>:
 8010dc4:	f1c2 0208 	rsb	r2, r2, #8
 8010dc8:	0092      	lsls	r2, r2, #2
 8010dca:	b570      	push	{r4, r5, r6, lr}
 8010dcc:	f1c2 0620 	rsb	r6, r2, #32
 8010dd0:	6843      	ldr	r3, [r0, #4]
 8010dd2:	6804      	ldr	r4, [r0, #0]
 8010dd4:	fa03 f506 	lsl.w	r5, r3, r6
 8010dd8:	432c      	orrs	r4, r5
 8010dda:	40d3      	lsrs	r3, r2
 8010ddc:	6004      	str	r4, [r0, #0]
 8010dde:	f840 3f04 	str.w	r3, [r0, #4]!
 8010de2:	4288      	cmp	r0, r1
 8010de4:	d3f4      	bcc.n	8010dd0 <L_shift+0xc>
 8010de6:	bd70      	pop	{r4, r5, r6, pc}

08010de8 <__match>:
 8010de8:	b530      	push	{r4, r5, lr}
 8010dea:	6803      	ldr	r3, [r0, #0]
 8010dec:	3301      	adds	r3, #1
 8010dee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010df2:	b914      	cbnz	r4, 8010dfa <__match+0x12>
 8010df4:	6003      	str	r3, [r0, #0]
 8010df6:	2001      	movs	r0, #1
 8010df8:	bd30      	pop	{r4, r5, pc}
 8010dfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010dfe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8010e02:	2d19      	cmp	r5, #25
 8010e04:	bf98      	it	ls
 8010e06:	3220      	addls	r2, #32
 8010e08:	42a2      	cmp	r2, r4
 8010e0a:	d0f0      	beq.n	8010dee <__match+0x6>
 8010e0c:	2000      	movs	r0, #0
 8010e0e:	e7f3      	b.n	8010df8 <__match+0x10>

08010e10 <__hexnan>:
 8010e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e14:	680b      	ldr	r3, [r1, #0]
 8010e16:	6801      	ldr	r1, [r0, #0]
 8010e18:	115e      	asrs	r6, r3, #5
 8010e1a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010e1e:	f013 031f 	ands.w	r3, r3, #31
 8010e22:	b087      	sub	sp, #28
 8010e24:	bf18      	it	ne
 8010e26:	3604      	addne	r6, #4
 8010e28:	2500      	movs	r5, #0
 8010e2a:	1f37      	subs	r7, r6, #4
 8010e2c:	4682      	mov	sl, r0
 8010e2e:	4690      	mov	r8, r2
 8010e30:	9301      	str	r3, [sp, #4]
 8010e32:	f846 5c04 	str.w	r5, [r6, #-4]
 8010e36:	46b9      	mov	r9, r7
 8010e38:	463c      	mov	r4, r7
 8010e3a:	9502      	str	r5, [sp, #8]
 8010e3c:	46ab      	mov	fp, r5
 8010e3e:	784a      	ldrb	r2, [r1, #1]
 8010e40:	1c4b      	adds	r3, r1, #1
 8010e42:	9303      	str	r3, [sp, #12]
 8010e44:	b342      	cbz	r2, 8010e98 <__hexnan+0x88>
 8010e46:	4610      	mov	r0, r2
 8010e48:	9105      	str	r1, [sp, #20]
 8010e4a:	9204      	str	r2, [sp, #16]
 8010e4c:	f7ff fd94 	bl	8010978 <__hexdig_fun>
 8010e50:	2800      	cmp	r0, #0
 8010e52:	d151      	bne.n	8010ef8 <__hexnan+0xe8>
 8010e54:	9a04      	ldr	r2, [sp, #16]
 8010e56:	9905      	ldr	r1, [sp, #20]
 8010e58:	2a20      	cmp	r2, #32
 8010e5a:	d818      	bhi.n	8010e8e <__hexnan+0x7e>
 8010e5c:	9b02      	ldr	r3, [sp, #8]
 8010e5e:	459b      	cmp	fp, r3
 8010e60:	dd13      	ble.n	8010e8a <__hexnan+0x7a>
 8010e62:	454c      	cmp	r4, r9
 8010e64:	d206      	bcs.n	8010e74 <__hexnan+0x64>
 8010e66:	2d07      	cmp	r5, #7
 8010e68:	dc04      	bgt.n	8010e74 <__hexnan+0x64>
 8010e6a:	462a      	mov	r2, r5
 8010e6c:	4649      	mov	r1, r9
 8010e6e:	4620      	mov	r0, r4
 8010e70:	f7ff ffa8 	bl	8010dc4 <L_shift>
 8010e74:	4544      	cmp	r4, r8
 8010e76:	d952      	bls.n	8010f1e <__hexnan+0x10e>
 8010e78:	2300      	movs	r3, #0
 8010e7a:	f1a4 0904 	sub.w	r9, r4, #4
 8010e7e:	f844 3c04 	str.w	r3, [r4, #-4]
 8010e82:	f8cd b008 	str.w	fp, [sp, #8]
 8010e86:	464c      	mov	r4, r9
 8010e88:	461d      	mov	r5, r3
 8010e8a:	9903      	ldr	r1, [sp, #12]
 8010e8c:	e7d7      	b.n	8010e3e <__hexnan+0x2e>
 8010e8e:	2a29      	cmp	r2, #41	@ 0x29
 8010e90:	d157      	bne.n	8010f42 <__hexnan+0x132>
 8010e92:	3102      	adds	r1, #2
 8010e94:	f8ca 1000 	str.w	r1, [sl]
 8010e98:	f1bb 0f00 	cmp.w	fp, #0
 8010e9c:	d051      	beq.n	8010f42 <__hexnan+0x132>
 8010e9e:	454c      	cmp	r4, r9
 8010ea0:	d206      	bcs.n	8010eb0 <__hexnan+0xa0>
 8010ea2:	2d07      	cmp	r5, #7
 8010ea4:	dc04      	bgt.n	8010eb0 <__hexnan+0xa0>
 8010ea6:	462a      	mov	r2, r5
 8010ea8:	4649      	mov	r1, r9
 8010eaa:	4620      	mov	r0, r4
 8010eac:	f7ff ff8a 	bl	8010dc4 <L_shift>
 8010eb0:	4544      	cmp	r4, r8
 8010eb2:	d936      	bls.n	8010f22 <__hexnan+0x112>
 8010eb4:	f1a8 0204 	sub.w	r2, r8, #4
 8010eb8:	4623      	mov	r3, r4
 8010eba:	f853 1b04 	ldr.w	r1, [r3], #4
 8010ebe:	f842 1f04 	str.w	r1, [r2, #4]!
 8010ec2:	429f      	cmp	r7, r3
 8010ec4:	d2f9      	bcs.n	8010eba <__hexnan+0xaa>
 8010ec6:	1b3b      	subs	r3, r7, r4
 8010ec8:	f023 0303 	bic.w	r3, r3, #3
 8010ecc:	3304      	adds	r3, #4
 8010ece:	3401      	adds	r4, #1
 8010ed0:	3e03      	subs	r6, #3
 8010ed2:	42b4      	cmp	r4, r6
 8010ed4:	bf88      	it	hi
 8010ed6:	2304      	movhi	r3, #4
 8010ed8:	4443      	add	r3, r8
 8010eda:	2200      	movs	r2, #0
 8010edc:	f843 2b04 	str.w	r2, [r3], #4
 8010ee0:	429f      	cmp	r7, r3
 8010ee2:	d2fb      	bcs.n	8010edc <__hexnan+0xcc>
 8010ee4:	683b      	ldr	r3, [r7, #0]
 8010ee6:	b91b      	cbnz	r3, 8010ef0 <__hexnan+0xe0>
 8010ee8:	4547      	cmp	r7, r8
 8010eea:	d128      	bne.n	8010f3e <__hexnan+0x12e>
 8010eec:	2301      	movs	r3, #1
 8010eee:	603b      	str	r3, [r7, #0]
 8010ef0:	2005      	movs	r0, #5
 8010ef2:	b007      	add	sp, #28
 8010ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ef8:	3501      	adds	r5, #1
 8010efa:	2d08      	cmp	r5, #8
 8010efc:	f10b 0b01 	add.w	fp, fp, #1
 8010f00:	dd06      	ble.n	8010f10 <__hexnan+0x100>
 8010f02:	4544      	cmp	r4, r8
 8010f04:	d9c1      	bls.n	8010e8a <__hexnan+0x7a>
 8010f06:	2300      	movs	r3, #0
 8010f08:	f844 3c04 	str.w	r3, [r4, #-4]
 8010f0c:	2501      	movs	r5, #1
 8010f0e:	3c04      	subs	r4, #4
 8010f10:	6822      	ldr	r2, [r4, #0]
 8010f12:	f000 000f 	and.w	r0, r0, #15
 8010f16:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010f1a:	6020      	str	r0, [r4, #0]
 8010f1c:	e7b5      	b.n	8010e8a <__hexnan+0x7a>
 8010f1e:	2508      	movs	r5, #8
 8010f20:	e7b3      	b.n	8010e8a <__hexnan+0x7a>
 8010f22:	9b01      	ldr	r3, [sp, #4]
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d0dd      	beq.n	8010ee4 <__hexnan+0xd4>
 8010f28:	f1c3 0320 	rsb	r3, r3, #32
 8010f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8010f30:	40da      	lsrs	r2, r3
 8010f32:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010f36:	4013      	ands	r3, r2
 8010f38:	f846 3c04 	str.w	r3, [r6, #-4]
 8010f3c:	e7d2      	b.n	8010ee4 <__hexnan+0xd4>
 8010f3e:	3f04      	subs	r7, #4
 8010f40:	e7d0      	b.n	8010ee4 <__hexnan+0xd4>
 8010f42:	2004      	movs	r0, #4
 8010f44:	e7d5      	b.n	8010ef2 <__hexnan+0xe2>

08010f46 <__ascii_mbtowc>:
 8010f46:	b082      	sub	sp, #8
 8010f48:	b901      	cbnz	r1, 8010f4c <__ascii_mbtowc+0x6>
 8010f4a:	a901      	add	r1, sp, #4
 8010f4c:	b142      	cbz	r2, 8010f60 <__ascii_mbtowc+0x1a>
 8010f4e:	b14b      	cbz	r3, 8010f64 <__ascii_mbtowc+0x1e>
 8010f50:	7813      	ldrb	r3, [r2, #0]
 8010f52:	600b      	str	r3, [r1, #0]
 8010f54:	7812      	ldrb	r2, [r2, #0]
 8010f56:	1e10      	subs	r0, r2, #0
 8010f58:	bf18      	it	ne
 8010f5a:	2001      	movne	r0, #1
 8010f5c:	b002      	add	sp, #8
 8010f5e:	4770      	bx	lr
 8010f60:	4610      	mov	r0, r2
 8010f62:	e7fb      	b.n	8010f5c <__ascii_mbtowc+0x16>
 8010f64:	f06f 0001 	mvn.w	r0, #1
 8010f68:	e7f8      	b.n	8010f5c <__ascii_mbtowc+0x16>

08010f6a <_realloc_r>:
 8010f6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f6e:	4680      	mov	r8, r0
 8010f70:	4615      	mov	r5, r2
 8010f72:	460c      	mov	r4, r1
 8010f74:	b921      	cbnz	r1, 8010f80 <_realloc_r+0x16>
 8010f76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010f7a:	4611      	mov	r1, r2
 8010f7c:	f7fd bc98 	b.w	800e8b0 <_malloc_r>
 8010f80:	b92a      	cbnz	r2, 8010f8e <_realloc_r+0x24>
 8010f82:	f7fd fc21 	bl	800e7c8 <_free_r>
 8010f86:	2400      	movs	r4, #0
 8010f88:	4620      	mov	r0, r4
 8010f8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f8e:	f000 f840 	bl	8011012 <_malloc_usable_size_r>
 8010f92:	4285      	cmp	r5, r0
 8010f94:	4606      	mov	r6, r0
 8010f96:	d802      	bhi.n	8010f9e <_realloc_r+0x34>
 8010f98:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010f9c:	d8f4      	bhi.n	8010f88 <_realloc_r+0x1e>
 8010f9e:	4629      	mov	r1, r5
 8010fa0:	4640      	mov	r0, r8
 8010fa2:	f7fd fc85 	bl	800e8b0 <_malloc_r>
 8010fa6:	4607      	mov	r7, r0
 8010fa8:	2800      	cmp	r0, #0
 8010faa:	d0ec      	beq.n	8010f86 <_realloc_r+0x1c>
 8010fac:	42b5      	cmp	r5, r6
 8010fae:	462a      	mov	r2, r5
 8010fb0:	4621      	mov	r1, r4
 8010fb2:	bf28      	it	cs
 8010fb4:	4632      	movcs	r2, r6
 8010fb6:	f7ff fc43 	bl	8010840 <memcpy>
 8010fba:	4621      	mov	r1, r4
 8010fbc:	4640      	mov	r0, r8
 8010fbe:	f7fd fc03 	bl	800e7c8 <_free_r>
 8010fc2:	463c      	mov	r4, r7
 8010fc4:	e7e0      	b.n	8010f88 <_realloc_r+0x1e>

08010fc6 <__ascii_wctomb>:
 8010fc6:	4603      	mov	r3, r0
 8010fc8:	4608      	mov	r0, r1
 8010fca:	b141      	cbz	r1, 8010fde <__ascii_wctomb+0x18>
 8010fcc:	2aff      	cmp	r2, #255	@ 0xff
 8010fce:	d904      	bls.n	8010fda <__ascii_wctomb+0x14>
 8010fd0:	228a      	movs	r2, #138	@ 0x8a
 8010fd2:	601a      	str	r2, [r3, #0]
 8010fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8010fd8:	4770      	bx	lr
 8010fda:	700a      	strb	r2, [r1, #0]
 8010fdc:	2001      	movs	r0, #1
 8010fde:	4770      	bx	lr

08010fe0 <fiprintf>:
 8010fe0:	b40e      	push	{r1, r2, r3}
 8010fe2:	b503      	push	{r0, r1, lr}
 8010fe4:	4601      	mov	r1, r0
 8010fe6:	ab03      	add	r3, sp, #12
 8010fe8:	4805      	ldr	r0, [pc, #20]	@ (8011000 <fiprintf+0x20>)
 8010fea:	f853 2b04 	ldr.w	r2, [r3], #4
 8010fee:	6800      	ldr	r0, [r0, #0]
 8010ff0:	9301      	str	r3, [sp, #4]
 8010ff2:	f7ff f9a1 	bl	8010338 <_vfiprintf_r>
 8010ff6:	b002      	add	sp, #8
 8010ff8:	f85d eb04 	ldr.w	lr, [sp], #4
 8010ffc:	b003      	add	sp, #12
 8010ffe:	4770      	bx	lr
 8011000:	20000118 	.word	0x20000118

08011004 <abort>:
 8011004:	b508      	push	{r3, lr}
 8011006:	2006      	movs	r0, #6
 8011008:	f000 f834 	bl	8011074 <raise>
 801100c:	2001      	movs	r0, #1
 801100e:	f7f1 f87f 	bl	8002110 <_exit>

08011012 <_malloc_usable_size_r>:
 8011012:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011016:	1f18      	subs	r0, r3, #4
 8011018:	2b00      	cmp	r3, #0
 801101a:	bfbc      	itt	lt
 801101c:	580b      	ldrlt	r3, [r1, r0]
 801101e:	18c0      	addlt	r0, r0, r3
 8011020:	4770      	bx	lr

08011022 <_raise_r>:
 8011022:	291f      	cmp	r1, #31
 8011024:	b538      	push	{r3, r4, r5, lr}
 8011026:	4605      	mov	r5, r0
 8011028:	460c      	mov	r4, r1
 801102a:	d904      	bls.n	8011036 <_raise_r+0x14>
 801102c:	2316      	movs	r3, #22
 801102e:	6003      	str	r3, [r0, #0]
 8011030:	f04f 30ff 	mov.w	r0, #4294967295
 8011034:	bd38      	pop	{r3, r4, r5, pc}
 8011036:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011038:	b112      	cbz	r2, 8011040 <_raise_r+0x1e>
 801103a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801103e:	b94b      	cbnz	r3, 8011054 <_raise_r+0x32>
 8011040:	4628      	mov	r0, r5
 8011042:	f000 f831 	bl	80110a8 <_getpid_r>
 8011046:	4622      	mov	r2, r4
 8011048:	4601      	mov	r1, r0
 801104a:	4628      	mov	r0, r5
 801104c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011050:	f000 b818 	b.w	8011084 <_kill_r>
 8011054:	2b01      	cmp	r3, #1
 8011056:	d00a      	beq.n	801106e <_raise_r+0x4c>
 8011058:	1c59      	adds	r1, r3, #1
 801105a:	d103      	bne.n	8011064 <_raise_r+0x42>
 801105c:	2316      	movs	r3, #22
 801105e:	6003      	str	r3, [r0, #0]
 8011060:	2001      	movs	r0, #1
 8011062:	e7e7      	b.n	8011034 <_raise_r+0x12>
 8011064:	2100      	movs	r1, #0
 8011066:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801106a:	4620      	mov	r0, r4
 801106c:	4798      	blx	r3
 801106e:	2000      	movs	r0, #0
 8011070:	e7e0      	b.n	8011034 <_raise_r+0x12>
	...

08011074 <raise>:
 8011074:	4b02      	ldr	r3, [pc, #8]	@ (8011080 <raise+0xc>)
 8011076:	4601      	mov	r1, r0
 8011078:	6818      	ldr	r0, [r3, #0]
 801107a:	f7ff bfd2 	b.w	8011022 <_raise_r>
 801107e:	bf00      	nop
 8011080:	20000118 	.word	0x20000118

08011084 <_kill_r>:
 8011084:	b538      	push	{r3, r4, r5, lr}
 8011086:	4d07      	ldr	r5, [pc, #28]	@ (80110a4 <_kill_r+0x20>)
 8011088:	2300      	movs	r3, #0
 801108a:	4604      	mov	r4, r0
 801108c:	4608      	mov	r0, r1
 801108e:	4611      	mov	r1, r2
 8011090:	602b      	str	r3, [r5, #0]
 8011092:	f7f1 f82d 	bl	80020f0 <_kill>
 8011096:	1c43      	adds	r3, r0, #1
 8011098:	d102      	bne.n	80110a0 <_kill_r+0x1c>
 801109a:	682b      	ldr	r3, [r5, #0]
 801109c:	b103      	cbz	r3, 80110a0 <_kill_r+0x1c>
 801109e:	6023      	str	r3, [r4, #0]
 80110a0:	bd38      	pop	{r3, r4, r5, pc}
 80110a2:	bf00      	nop
 80110a4:	2000299c 	.word	0x2000299c

080110a8 <_getpid_r>:
 80110a8:	f7f1 b81a 	b.w	80020e0 <_getpid>

080110ac <sqrtf>:
 80110ac:	b508      	push	{r3, lr}
 80110ae:	ed2d 8b02 	vpush	{d8}
 80110b2:	eeb0 8a40 	vmov.f32	s16, s0
 80110b6:	f000 f817 	bl	80110e8 <__ieee754_sqrtf>
 80110ba:	eeb4 8a48 	vcmp.f32	s16, s16
 80110be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110c2:	d60c      	bvs.n	80110de <sqrtf+0x32>
 80110c4:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80110e4 <sqrtf+0x38>
 80110c8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80110cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110d0:	d505      	bpl.n	80110de <sqrtf+0x32>
 80110d2:	f7fc fcf9 	bl	800dac8 <__errno>
 80110d6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80110da:	2321      	movs	r3, #33	@ 0x21
 80110dc:	6003      	str	r3, [r0, #0]
 80110de:	ecbd 8b02 	vpop	{d8}
 80110e2:	bd08      	pop	{r3, pc}
 80110e4:	00000000 	.word	0x00000000

080110e8 <__ieee754_sqrtf>:
 80110e8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80110ec:	4770      	bx	lr
	...

080110f0 <_init>:
 80110f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110f2:	bf00      	nop
 80110f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80110f6:	bc08      	pop	{r3}
 80110f8:	469e      	mov	lr, r3
 80110fa:	4770      	bx	lr

080110fc <_fini>:
 80110fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110fe:	bf00      	nop
 8011100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011102:	bc08      	pop	{r3}
 8011104:	469e      	mov	lr, r3
 8011106:	4770      	bx	lr
