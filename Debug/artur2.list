
artur2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad2c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800aef0  0800aef0  0001aef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af58  0800af58  00020168  2**0
                  CONTENTS
  4 .ARM          00000008  0800af58  0800af58  0001af58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af60  0800af60  00020168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af60  0800af60  0001af60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af64  0800af64  0001af64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  0800af68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fd0  20000168  0800b0d0  00020168  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002138  0800b0d0  00022138  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c08b  00000000  00000000  000201db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000424d  00000000  00000000  0003c266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001908  00000000  00000000  000404b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001351  00000000  00000000  00041dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027dec  00000000  00000000  00043111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fa9b  00000000  00000000  0006aefd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6d17  00000000  00000000  0008a998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007048  00000000  00000000  001716b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  001786f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000168 	.word	0x20000168
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800aed8 	.word	0x0800aed8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000016c 	.word	0x2000016c
 8000200:	0800aed8 	.word	0x0800aed8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <_write>:
        }
    }
}

int _write(int file, char *ptr, int len)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
 8000506:	60f8      	str	r0, [r7, #12]
 8000508:	60b9      	str	r1, [r7, #8]
 800050a:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	b29a      	uxth	r2, r3
 8000510:	f04f 33ff 	mov.w	r3, #4294967295
 8000514:	68b9      	ldr	r1, [r7, #8]
 8000516:	4804      	ldr	r0, [pc, #16]	; (8000528 <_write+0x28>)
 8000518:	f005 fc2a 	bl	8005d70 <HAL_UART_Transmit>
    return len;
 800051c:	687b      	ldr	r3, [r7, #4]
}
 800051e:	4618      	mov	r0, r3
 8000520:	3710      	adds	r7, #16
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	200003b8 	.word	0x200003b8

0800052c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000530:	f000 ff1c 	bl	800136c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000534:	f000 f820 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000538:	f000 fafa 	bl	8000b30 <MX_GPIO_Init>
  MX_DMA_Init();
 800053c:	f000 fad8 	bl	8000af0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000540:	f000 faac 	bl	8000a9c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000544:	f000 f886 	bl	8000654 <MX_ADC1_Init>
  MX_DAC_Init();
 8000548:	f000 f97a 	bl	8000840 <MX_DAC_Init>
  MX_SPI2_Init();
 800054c:	f000 f9ac 	bl	80008a8 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 8000550:	f009 faca 	bl	8009ae8 <MX_USB_DEVICE_Init>
  MX_ADC2_Init();
 8000554:	f000 f8d0 	bl	80006f8 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000558:	f000 f920 	bl	800079c <MX_ADC3_Init>
  MX_TIM3_Init();
 800055c:	f000 f9da 	bl	8000914 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000560:	f000 fa36 	bl	80009d0 <MX_TIM4_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000564:	2100      	movs	r1, #0
 8000566:	4803      	ldr	r0, [pc, #12]	; (8000574 <main+0x48>)
 8000568:	f004 fd04 	bl	8004f74 <HAL_TIM_IC_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */
	 printf("a");
 800056c:	2061      	movs	r0, #97	; 0x61
 800056e:	f00a f8e7 	bl	800a740 <putchar>
 8000572:	e7fb      	b.n	800056c <main+0x40>
 8000574:	20000328 	.word	0x20000328

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b094      	sub	sp, #80	; 0x50
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 031c 	add.w	r3, r7, #28
 8000582:	2234      	movs	r2, #52	; 0x34
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f00a f925 	bl	800a7d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	f107 0308 	add.w	r3, r7, #8
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800059c:	2300      	movs	r3, #0
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	4b2a      	ldr	r3, [pc, #168]	; (800064c <SystemClock_Config+0xd4>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a4:	4a29      	ldr	r2, [pc, #164]	; (800064c <SystemClock_Config+0xd4>)
 80005a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005aa:	6413      	str	r3, [r2, #64]	; 0x40
 80005ac:	4b27      	ldr	r3, [pc, #156]	; (800064c <SystemClock_Config+0xd4>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005b8:	2300      	movs	r3, #0
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	4b24      	ldr	r3, [pc, #144]	; (8000650 <SystemClock_Config+0xd8>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005c4:	4a22      	ldr	r2, [pc, #136]	; (8000650 <SystemClock_Config+0xd8>)
 80005c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ca:	6013      	str	r3, [r2, #0]
 80005cc:	4b20      	ldr	r3, [pc, #128]	; (8000650 <SystemClock_Config+0xd8>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d4:	603b      	str	r3, [r7, #0]
 80005d6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d8:	2301      	movs	r3, #1
 80005da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e2:	2302      	movs	r3, #2
 80005e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005ec:	2308      	movs	r3, #8
 80005ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005f0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005f4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005f6:	2304      	movs	r3, #4
 80005f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005fa:	2307      	movs	r3, #7
 80005fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005fe:	2302      	movs	r3, #2
 8000600:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000602:	f107 031c 	add.w	r3, r7, #28
 8000606:	4618      	mov	r0, r3
 8000608:	f004 f8ee 	bl	80047e8 <HAL_RCC_OscConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000612:	f000 fb29 	bl	8000c68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000616:	230f      	movs	r3, #15
 8000618:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061a:	2302      	movs	r3, #2
 800061c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000626:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800062c:	f107 0308 	add.w	r3, r7, #8
 8000630:	2102      	movs	r1, #2
 8000632:	4618      	mov	r0, r3
 8000634:	f003 fa64 	bl	8003b00 <HAL_RCC_ClockConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800063e:	f000 fb13 	bl	8000c68 <Error_Handler>
  }
}
 8000642:	bf00      	nop
 8000644:	3750      	adds	r7, #80	; 0x50
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40023800 	.word	0x40023800
 8000650:	40007000 	.word	0x40007000

08000654 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800065a:	463b      	mov	r3, r7
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000666:	4b21      	ldr	r3, [pc, #132]	; (80006ec <MX_ADC1_Init+0x98>)
 8000668:	4a21      	ldr	r2, [pc, #132]	; (80006f0 <MX_ADC1_Init+0x9c>)
 800066a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800066c:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <MX_ADC1_Init+0x98>)
 800066e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000672:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000674:	4b1d      	ldr	r3, [pc, #116]	; (80006ec <MX_ADC1_Init+0x98>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800067a:	4b1c      	ldr	r3, [pc, #112]	; (80006ec <MX_ADC1_Init+0x98>)
 800067c:	2200      	movs	r2, #0
 800067e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000680:	4b1a      	ldr	r3, [pc, #104]	; (80006ec <MX_ADC1_Init+0x98>)
 8000682:	2200      	movs	r2, #0
 8000684:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000686:	4b19      	ldr	r3, [pc, #100]	; (80006ec <MX_ADC1_Init+0x98>)
 8000688:	2200      	movs	r2, #0
 800068a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800068e:	4b17      	ldr	r3, [pc, #92]	; (80006ec <MX_ADC1_Init+0x98>)
 8000690:	2200      	movs	r2, #0
 8000692:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000694:	4b15      	ldr	r3, [pc, #84]	; (80006ec <MX_ADC1_Init+0x98>)
 8000696:	4a17      	ldr	r2, [pc, #92]	; (80006f4 <MX_ADC1_Init+0xa0>)
 8000698:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800069a:	4b14      	ldr	r3, [pc, #80]	; (80006ec <MX_ADC1_Init+0x98>)
 800069c:	2200      	movs	r2, #0
 800069e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <MX_ADC1_Init+0x98>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006a6:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_ADC1_Init+0x98>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ae:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <MX_ADC1_Init+0x98>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006b4:	480d      	ldr	r0, [pc, #52]	; (80006ec <MX_ADC1_Init+0x98>)
 80006b6:	f000 feef 	bl	8001498 <HAL_ADC_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006c0:	f000 fad2 	bl	8000c68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80006c4:	230a      	movs	r3, #10
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006c8:	2301      	movs	r3, #1
 80006ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006cc:	2300      	movs	r3, #0
 80006ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d0:	463b      	mov	r3, r7
 80006d2:	4619      	mov	r1, r3
 80006d4:	4805      	ldr	r0, [pc, #20]	; (80006ec <MX_ADC1_Init+0x98>)
 80006d6:	f000 ff23 	bl	8001520 <HAL_ADC_ConfigChannel>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006e0:	f000 fac2 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006e4:	bf00      	nop
 80006e6:	3710      	adds	r7, #16
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000184 	.word	0x20000184
 80006f0:	40012000 	.word	0x40012000
 80006f4:	0f000001 	.word	0x0f000001

080006f8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006fe:	463b      	mov	r3, r7
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800070a:	4b21      	ldr	r3, [pc, #132]	; (8000790 <MX_ADC2_Init+0x98>)
 800070c:	4a21      	ldr	r2, [pc, #132]	; (8000794 <MX_ADC2_Init+0x9c>)
 800070e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000710:	4b1f      	ldr	r3, [pc, #124]	; (8000790 <MX_ADC2_Init+0x98>)
 8000712:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000716:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000718:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <MX_ADC2_Init+0x98>)
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800071e:	4b1c      	ldr	r3, [pc, #112]	; (8000790 <MX_ADC2_Init+0x98>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000724:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <MX_ADC2_Init+0x98>)
 8000726:	2201      	movs	r2, #1
 8000728:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800072a:	4b19      	ldr	r3, [pc, #100]	; (8000790 <MX_ADC2_Init+0x98>)
 800072c:	2200      	movs	r2, #0
 800072e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000732:	4b17      	ldr	r3, [pc, #92]	; (8000790 <MX_ADC2_Init+0x98>)
 8000734:	2200      	movs	r2, #0
 8000736:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000738:	4b15      	ldr	r3, [pc, #84]	; (8000790 <MX_ADC2_Init+0x98>)
 800073a:	4a17      	ldr	r2, [pc, #92]	; (8000798 <MX_ADC2_Init+0xa0>)
 800073c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800073e:	4b14      	ldr	r3, [pc, #80]	; (8000790 <MX_ADC2_Init+0x98>)
 8000740:	2200      	movs	r2, #0
 8000742:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <MX_ADC2_Init+0x98>)
 8000746:	2201      	movs	r2, #1
 8000748:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_ADC2_Init+0x98>)
 800074c:	2200      	movs	r2, #0
 800074e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000752:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <MX_ADC2_Init+0x98>)
 8000754:	2201      	movs	r2, #1
 8000756:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000758:	480d      	ldr	r0, [pc, #52]	; (8000790 <MX_ADC2_Init+0x98>)
 800075a:	f000 fe9d 	bl	8001498 <HAL_ADC_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000764:	f000 fa80 	bl	8000c68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000768:	2300      	movs	r3, #0
 800076a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800076c:	2301      	movs	r3, #1
 800076e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000770:	2300      	movs	r3, #0
 8000772:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000774:	463b      	mov	r3, r7
 8000776:	4619      	mov	r1, r3
 8000778:	4805      	ldr	r0, [pc, #20]	; (8000790 <MX_ADC2_Init+0x98>)
 800077a:	f000 fed1 	bl	8001520 <HAL_ADC_ConfigChannel>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000784:	f000 fa70 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	3710      	adds	r7, #16
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	200001cc 	.word	0x200001cc
 8000794:	40012100 	.word	0x40012100
 8000798:	0f000001 	.word	0x0f000001

0800079c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007a2:	463b      	mov	r3, r7
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80007ae:	4b21      	ldr	r3, [pc, #132]	; (8000834 <MX_ADC3_Init+0x98>)
 80007b0:	4a21      	ldr	r2, [pc, #132]	; (8000838 <MX_ADC3_Init+0x9c>)
 80007b2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007b4:	4b1f      	ldr	r3, [pc, #124]	; (8000834 <MX_ADC3_Init+0x98>)
 80007b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007ba:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80007bc:	4b1d      	ldr	r3, [pc, #116]	; (8000834 <MX_ADC3_Init+0x98>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80007c2:	4b1c      	ldr	r3, [pc, #112]	; (8000834 <MX_ADC3_Init+0x98>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80007c8:	4b1a      	ldr	r3, [pc, #104]	; (8000834 <MX_ADC3_Init+0x98>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80007ce:	4b19      	ldr	r3, [pc, #100]	; (8000834 <MX_ADC3_Init+0x98>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007d6:	4b17      	ldr	r3, [pc, #92]	; (8000834 <MX_ADC3_Init+0x98>)
 80007d8:	2200      	movs	r2, #0
 80007da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007dc:	4b15      	ldr	r3, [pc, #84]	; (8000834 <MX_ADC3_Init+0x98>)
 80007de:	4a17      	ldr	r2, [pc, #92]	; (800083c <MX_ADC3_Init+0xa0>)
 80007e0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007e2:	4b14      	ldr	r3, [pc, #80]	; (8000834 <MX_ADC3_Init+0x98>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80007e8:	4b12      	ldr	r3, [pc, #72]	; (8000834 <MX_ADC3_Init+0x98>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80007ee:	4b11      	ldr	r3, [pc, #68]	; (8000834 <MX_ADC3_Init+0x98>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007f6:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <MX_ADC3_Init+0x98>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80007fc:	480d      	ldr	r0, [pc, #52]	; (8000834 <MX_ADC3_Init+0x98>)
 80007fe:	f000 fe4b 	bl	8001498 <HAL_ADC_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000808:	f000 fa2e 	bl	8000c68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800080c:	2301      	movs	r3, #1
 800080e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000810:	2301      	movs	r3, #1
 8000812:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000814:	2300      	movs	r3, #0
 8000816:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000818:	463b      	mov	r3, r7
 800081a:	4619      	mov	r1, r3
 800081c:	4805      	ldr	r0, [pc, #20]	; (8000834 <MX_ADC3_Init+0x98>)
 800081e:	f000 fe7f 	bl	8001520 <HAL_ADC_ConfigChannel>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000828:	f000 fa1e 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800082c:	bf00      	nop
 800082e:	3710      	adds	r7, #16
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000214 	.word	0x20000214
 8000838:	40012200 	.word	0x40012200
 800083c:	0f000001 	.word	0x0f000001

08000840 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000846:	463b      	mov	r3, r7
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800084e:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <MX_DAC_Init+0x60>)
 8000850:	4a14      	ldr	r2, [pc, #80]	; (80008a4 <MX_DAC_Init+0x64>)
 8000852:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000854:	4812      	ldr	r0, [pc, #72]	; (80008a0 <MX_DAC_Init+0x60>)
 8000856:	f001 f9a2 	bl	8001b9e <HAL_DAC_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000860:	f000 fa02 	bl	8000c68 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000864:	2300      	movs	r3, #0
 8000866:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000868:	2300      	movs	r3, #0
 800086a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800086c:	463b      	mov	r3, r7
 800086e:	2200      	movs	r2, #0
 8000870:	4619      	mov	r1, r3
 8000872:	480b      	ldr	r0, [pc, #44]	; (80008a0 <MX_DAC_Init+0x60>)
 8000874:	f001 f9b5 	bl	8001be2 <HAL_DAC_ConfigChannel>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800087e:	f000 f9f3 	bl	8000c68 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000882:	463b      	mov	r3, r7
 8000884:	2210      	movs	r2, #16
 8000886:	4619      	mov	r1, r3
 8000888:	4805      	ldr	r0, [pc, #20]	; (80008a0 <MX_DAC_Init+0x60>)
 800088a:	f001 f9aa 	bl	8001be2 <HAL_DAC_ConfigChannel>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000894:	f000 f9e8 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200002bc 	.word	0x200002bc
 80008a4:	40007400 	.word	0x40007400

080008a8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008ac:	4b17      	ldr	r3, [pc, #92]	; (800090c <MX_SPI2_Init+0x64>)
 80008ae:	4a18      	ldr	r2, [pc, #96]	; (8000910 <MX_SPI2_Init+0x68>)
 80008b0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008b2:	4b16      	ldr	r3, [pc, #88]	; (800090c <MX_SPI2_Init+0x64>)
 80008b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008b8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008ba:	4b14      	ldr	r3, [pc, #80]	; (800090c <MX_SPI2_Init+0x64>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008c0:	4b12      	ldr	r3, [pc, #72]	; (800090c <MX_SPI2_Init+0x64>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008c6:	4b11      	ldr	r3, [pc, #68]	; (800090c <MX_SPI2_Init+0x64>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008cc:	4b0f      	ldr	r3, [pc, #60]	; (800090c <MX_SPI2_Init+0x64>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <MX_SPI2_Init+0x64>)
 80008d4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80008d8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008da:	4b0c      	ldr	r3, [pc, #48]	; (800090c <MX_SPI2_Init+0x64>)
 80008dc:	2200      	movs	r2, #0
 80008de:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008e0:	4b0a      	ldr	r3, [pc, #40]	; (800090c <MX_SPI2_Init+0x64>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <MX_SPI2_Init+0x64>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008ec:	4b07      	ldr	r3, [pc, #28]	; (800090c <MX_SPI2_Init+0x64>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <MX_SPI2_Init+0x64>)
 80008f4:	220a      	movs	r2, #10
 80008f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008f8:	4804      	ldr	r0, [pc, #16]	; (800090c <MX_SPI2_Init+0x64>)
 80008fa:	f004 fa13 	bl	8004d24 <HAL_SPI_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000904:	f000 f9b0 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	200002d0 	.word	0x200002d0
 8000910:	40003800 	.word	0x40003800

08000914 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800091a:	f107 0310 	add.w	r3, r7, #16
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000924:	463b      	mov	r3, r7
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000930:	4b25      	ldr	r3, [pc, #148]	; (80009c8 <MX_TIM3_Init+0xb4>)
 8000932:	4a26      	ldr	r2, [pc, #152]	; (80009cc <MX_TIM3_Init+0xb8>)
 8000934:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000936:	4b24      	ldr	r3, [pc, #144]	; (80009c8 <MX_TIM3_Init+0xb4>)
 8000938:	2200      	movs	r2, #0
 800093a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093c:	4b22      	ldr	r3, [pc, #136]	; (80009c8 <MX_TIM3_Init+0xb4>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000942:	4b21      	ldr	r3, [pc, #132]	; (80009c8 <MX_TIM3_Init+0xb4>)
 8000944:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000948:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800094a:	4b1f      	ldr	r3, [pc, #124]	; (80009c8 <MX_TIM3_Init+0xb4>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000950:	4b1d      	ldr	r3, [pc, #116]	; (80009c8 <MX_TIM3_Init+0xb4>)
 8000952:	2200      	movs	r2, #0
 8000954:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000956:	481c      	ldr	r0, [pc, #112]	; (80009c8 <MX_TIM3_Init+0xb4>)
 8000958:	f004 fabc 	bl	8004ed4 <HAL_TIM_IC_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000962:	f000 f981 	bl	8000c68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000966:	2300      	movs	r3, #0
 8000968:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800096e:	f107 0310 	add.w	r3, r7, #16
 8000972:	4619      	mov	r1, r3
 8000974:	4814      	ldr	r0, [pc, #80]	; (80009c8 <MX_TIM3_Init+0xb4>)
 8000976:	f005 f92f 	bl	8005bd8 <HAL_TIMEx_MasterConfigSynchronization>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000980:	f000 f972 	bl	8000c68 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000984:	2300      	movs	r3, #0
 8000986:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000988:	2301      	movs	r3, #1
 800098a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800098c:	2300      	movs	r3, #0
 800098e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000994:	463b      	mov	r3, r7
 8000996:	2200      	movs	r2, #0
 8000998:	4619      	mov	r1, r3
 800099a:	480b      	ldr	r0, [pc, #44]	; (80009c8 <MX_TIM3_Init+0xb4>)
 800099c:	f004 fc12 	bl	80051c4 <HAL_TIM_IC_ConfigChannel>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80009a6:	f000 f95f 	bl	8000c68 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80009aa:	463b      	mov	r3, r7
 80009ac:	2204      	movs	r2, #4
 80009ae:	4619      	mov	r1, r3
 80009b0:	4805      	ldr	r0, [pc, #20]	; (80009c8 <MX_TIM3_Init+0xb4>)
 80009b2:	f004 fc07 	bl	80051c4 <HAL_TIM_IC_ConfigChannel>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 80009bc:	f000 f954 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009c0:	bf00      	nop
 80009c2:	3718      	adds	r7, #24
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000328 	.word	0x20000328
 80009cc:	40000400 	.word	0x40000400

080009d0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08a      	sub	sp, #40	; 0x28
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d6:	f107 0320 	add.w	r3, r7, #32
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
 80009ec:	611a      	str	r2, [r3, #16]
 80009ee:	615a      	str	r2, [r3, #20]
 80009f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80009f2:	4b28      	ldr	r3, [pc, #160]	; (8000a94 <MX_TIM4_Init+0xc4>)
 80009f4:	4a28      	ldr	r2, [pc, #160]	; (8000a98 <MX_TIM4_Init+0xc8>)
 80009f6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8399; // Adjust for 1ms tick
 80009f8:	4b26      	ldr	r3, [pc, #152]	; (8000a94 <MX_TIM4_Init+0xc4>)
 80009fa:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80009fe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a00:	4b24      	ldr	r3, [pc, #144]	; (8000a94 <MX_TIM4_Init+0xc4>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999; // 1-second period
 8000a06:	4b23      	ldr	r3, [pc, #140]	; (8000a94 <MX_TIM4_Init+0xc4>)
 8000a08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a0c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a0e:	4b21      	ldr	r3, [pc, #132]	; (8000a94 <MX_TIM4_Init+0xc4>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a14:	4b1f      	ldr	r3, [pc, #124]	; (8000a94 <MX_TIM4_Init+0xc4>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a1a:	481e      	ldr	r0, [pc, #120]	; (8000a94 <MX_TIM4_Init+0xc4>)
 8000a1c:	f004 fa0b 	bl	8004e36 <HAL_TIM_PWM_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000a26:	f000 f91f 	bl	8000c68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a32:	f107 0320 	add.w	r3, r7, #32
 8000a36:	4619      	mov	r1, r3
 8000a38:	4816      	ldr	r0, [pc, #88]	; (8000a94 <MX_TIM4_Init+0xc4>)
 8000a3a:	f005 f8cd 	bl	8005bd8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000a44:	f000 f910 	bl	8000c68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a48:	2360      	movs	r3, #96	; 0x60
 8000a4a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10000;
 8000a4c:	f242 7310 	movw	r3, #10000	; 0x2710
 8000a50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	2208      	movs	r2, #8
 8000a5e:	4619      	mov	r1, r3
 8000a60:	480c      	ldr	r0, [pc, #48]	; (8000a94 <MX_TIM4_Init+0xc4>)
 8000a62:	f004 fc4b 	bl	80052fc <HAL_TIM_PWM_ConfigChannel>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8000a6c:	f000 f8fc 	bl	8000c68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	220c      	movs	r2, #12
 8000a74:	4619      	mov	r1, r3
 8000a76:	4807      	ldr	r0, [pc, #28]	; (8000a94 <MX_TIM4_Init+0xc4>)
 8000a78:	f004 fc40 	bl	80052fc <HAL_TIM_PWM_ConfigChannel>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8000a82:	f000 f8f1 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000a86:	4803      	ldr	r0, [pc, #12]	; (8000a94 <MX_TIM4_Init+0xc4>)
 8000a88:	f000 faec 	bl	8001064 <HAL_TIM_MspPostInit>

}
 8000a8c:	bf00      	nop
 8000a8e:	3728      	adds	r7, #40	; 0x28
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000370 	.word	0x20000370
 8000a98:	40000800 	.word	0x40000800

08000a9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aa0:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000aa2:	4a12      	ldr	r2, [pc, #72]	; (8000aec <MX_USART2_UART_Init+0x50>)
 8000aa4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aa6:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000aa8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aae:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ac0:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ac2:	220c      	movs	r2, #12
 8000ac4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ad2:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ad4:	f005 f8fc 	bl	8005cd0 <HAL_UART_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ade:	f000 f8c3 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	200003b8 	.word	0x200003b8
 8000aec:	40004400 	.word	0x40004400

08000af0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <MX_DMA_Init+0x3c>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a0b      	ldr	r2, [pc, #44]	; (8000b2c <MX_DMA_Init+0x3c>)
 8000b00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <MX_DMA_Init+0x3c>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2100      	movs	r1, #0
 8000b16:	203a      	movs	r0, #58	; 0x3a
 8000b18:	f001 f80b 	bl	8001b32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000b1c:	203a      	movs	r0, #58	; 0x3a
 8000b1e:	f001 f824 	bl	8001b6a <HAL_NVIC_EnableIRQ>

}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40023800 	.word	0x40023800

08000b30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08a      	sub	sp, #40	; 0x28
 8000b34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]
 8000b44:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	4b43      	ldr	r3, [pc, #268]	; (8000c58 <MX_GPIO_Init+0x128>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a42      	ldr	r2, [pc, #264]	; (8000c58 <MX_GPIO_Init+0x128>)
 8000b50:	f043 0304 	orr.w	r3, r3, #4
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b40      	ldr	r3, [pc, #256]	; (8000c58 <MX_GPIO_Init+0x128>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0304 	and.w	r3, r3, #4
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	4b3c      	ldr	r3, [pc, #240]	; (8000c58 <MX_GPIO_Init+0x128>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a3b      	ldr	r2, [pc, #236]	; (8000c58 <MX_GPIO_Init+0x128>)
 8000b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b39      	ldr	r3, [pc, #228]	; (8000c58 <MX_GPIO_Init+0x128>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	4b35      	ldr	r3, [pc, #212]	; (8000c58 <MX_GPIO_Init+0x128>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a34      	ldr	r2, [pc, #208]	; (8000c58 <MX_GPIO_Init+0x128>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b32      	ldr	r3, [pc, #200]	; (8000c58 <MX_GPIO_Init+0x128>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	60bb      	str	r3, [r7, #8]
 8000b98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	607b      	str	r3, [r7, #4]
 8000b9e:	4b2e      	ldr	r3, [pc, #184]	; (8000c58 <MX_GPIO_Init+0x128>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a2d      	ldr	r2, [pc, #180]	; (8000c58 <MX_GPIO_Init+0x128>)
 8000ba4:	f043 0302 	orr.w	r3, r3, #2
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b2b      	ldr	r3, [pc, #172]	; (8000c58 <MX_GPIO_Init+0x128>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0302 	and.w	r3, r3, #2
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f240 4117 	movw	r1, #1047	; 0x417
 8000bbc:	4827      	ldr	r0, [pc, #156]	; (8000c5c <MX_GPIO_Init+0x12c>)
 8000bbe:	f001 fce7 	bl	8002590 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_12, GPIO_PIN_RESET);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f44f 519c 	mov.w	r1, #4992	; 0x1380
 8000bc8:	4825      	ldr	r0, [pc, #148]	; (8000c60 <MX_GPIO_Init+0x130>)
 8000bca:	f001 fce1 	bl	8002590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000bd4:	4823      	ldr	r0, [pc, #140]	; (8000c64 <MX_GPIO_Init+0x134>)
 8000bd6:	f001 fcdb 	bl	8002590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000be0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000be4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	4619      	mov	r1, r3
 8000bf0:	481b      	ldr	r0, [pc, #108]	; (8000c60 <MX_GPIO_Init+0x130>)
 8000bf2:	f001 fb39 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000bf6:	f240 4317 	movw	r3, #1047	; 0x417
 8000bfa:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c04:	2300      	movs	r3, #0
 8000c06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4813      	ldr	r0, [pc, #76]	; (8000c5c <MX_GPIO_Init+0x12c>)
 8000c10:	f001 fb2a 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC8 PC9 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_12;
 8000c14:	f44f 539c 	mov.w	r3, #4992	; 0x1380
 8000c18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	480c      	ldr	r0, [pc, #48]	; (8000c60 <MX_GPIO_Init+0x130>)
 8000c2e:	f001 fb1b 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000c32:	f44f 63e4 	mov.w	r3, #1824	; 0x720
 8000c36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	2300      	movs	r3, #0
 8000c42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4806      	ldr	r0, [pc, #24]	; (8000c64 <MX_GPIO_Init+0x134>)
 8000c4c:	f001 fb0c 	bl	8002268 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c50:	bf00      	nop
 8000c52:	3728      	adds	r7, #40	; 0x28
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40020400 	.word	0x40020400
 8000c60:	40020800 	.word	0x40020800
 8000c64:	40020000 	.word	0x40020000

08000c68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c6c:	b672      	cpsid	i
}
 8000c6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <Error_Handler+0x8>
	...

08000c74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	607b      	str	r3, [r7, #4]
 8000c7e:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <HAL_MspInit+0x4c>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c82:	4a0f      	ldr	r2, [pc, #60]	; (8000cc0 <HAL_MspInit+0x4c>)
 8000c84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c88:	6453      	str	r3, [r2, #68]	; 0x44
 8000c8a:	4b0d      	ldr	r3, [pc, #52]	; (8000cc0 <HAL_MspInit+0x4c>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	603b      	str	r3, [r7, #0]
 8000c9a:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <HAL_MspInit+0x4c>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	4a08      	ldr	r2, [pc, #32]	; (8000cc0 <HAL_MspInit+0x4c>)
 8000ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <HAL_MspInit+0x4c>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cae:	603b      	str	r3, [r7, #0]
 8000cb0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cb2:	2007      	movs	r0, #7
 8000cb4:	f000 ff32 	bl	8001b1c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb8:	bf00      	nop
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40023800 	.word	0x40023800

08000cc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08e      	sub	sp, #56	; 0x38
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a5d      	ldr	r2, [pc, #372]	; (8000e58 <HAL_ADC_MspInit+0x194>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d128      	bne.n	8000d38 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	623b      	str	r3, [r7, #32]
 8000cea:	4b5c      	ldr	r3, [pc, #368]	; (8000e5c <HAL_ADC_MspInit+0x198>)
 8000cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cee:	4a5b      	ldr	r2, [pc, #364]	; (8000e5c <HAL_ADC_MspInit+0x198>)
 8000cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cf6:	4b59      	ldr	r3, [pc, #356]	; (8000e5c <HAL_ADC_MspInit+0x198>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cfe:	623b      	str	r3, [r7, #32]
 8000d00:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
 8000d06:	4b55      	ldr	r3, [pc, #340]	; (8000e5c <HAL_ADC_MspInit+0x198>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a54      	ldr	r2, [pc, #336]	; (8000e5c <HAL_ADC_MspInit+0x198>)
 8000d0c:	f043 0304 	orr.w	r3, r3, #4
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b52      	ldr	r3, [pc, #328]	; (8000e5c <HAL_ADC_MspInit+0x198>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0304 	and.w	r3, r3, #4
 8000d1a:	61fb      	str	r3, [r7, #28]
 8000d1c:	69fb      	ldr	r3, [r7, #28]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000d1e:	230f      	movs	r3, #15
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d22:	2303      	movs	r3, #3
 8000d24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2e:	4619      	mov	r1, r3
 8000d30:	484b      	ldr	r0, [pc, #300]	; (8000e60 <HAL_ADC_MspInit+0x19c>)
 8000d32:	f001 fa99 	bl	8002268 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000d36:	e08a      	b.n	8000e4e <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC2)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a49      	ldr	r2, [pc, #292]	; (8000e64 <HAL_ADC_MspInit+0x1a0>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d158      	bne.n	8000df4 <HAL_ADC_MspInit+0x130>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	61bb      	str	r3, [r7, #24]
 8000d46:	4b45      	ldr	r3, [pc, #276]	; (8000e5c <HAL_ADC_MspInit+0x198>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	4a44      	ldr	r2, [pc, #272]	; (8000e5c <HAL_ADC_MspInit+0x198>)
 8000d4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d50:	6453      	str	r3, [r2, #68]	; 0x44
 8000d52:	4b42      	ldr	r3, [pc, #264]	; (8000e5c <HAL_ADC_MspInit+0x198>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d5a:	61bb      	str	r3, [r7, #24]
 8000d5c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]
 8000d62:	4b3e      	ldr	r3, [pc, #248]	; (8000e5c <HAL_ADC_MspInit+0x198>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a3d      	ldr	r2, [pc, #244]	; (8000e5c <HAL_ADC_MspInit+0x198>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b3b      	ldr	r3, [pc, #236]	; (8000e5c <HAL_ADC_MspInit+0x198>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	617b      	str	r3, [r7, #20]
 8000d78:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4836      	ldr	r0, [pc, #216]	; (8000e68 <HAL_ADC_MspInit+0x1a4>)
 8000d8e:	f001 fa6b 	bl	8002268 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8000d92:	4b36      	ldr	r3, [pc, #216]	; (8000e6c <HAL_ADC_MspInit+0x1a8>)
 8000d94:	4a36      	ldr	r2, [pc, #216]	; (8000e70 <HAL_ADC_MspInit+0x1ac>)
 8000d96:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8000d98:	4b34      	ldr	r3, [pc, #208]	; (8000e6c <HAL_ADC_MspInit+0x1a8>)
 8000d9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000d9e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000da0:	4b32      	ldr	r3, [pc, #200]	; (8000e6c <HAL_ADC_MspInit+0x1a8>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000da6:	4b31      	ldr	r3, [pc, #196]	; (8000e6c <HAL_ADC_MspInit+0x1a8>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000dac:	4b2f      	ldr	r3, [pc, #188]	; (8000e6c <HAL_ADC_MspInit+0x1a8>)
 8000dae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000db2:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000db4:	4b2d      	ldr	r3, [pc, #180]	; (8000e6c <HAL_ADC_MspInit+0x1a8>)
 8000db6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000dba:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000dbc:	4b2b      	ldr	r3, [pc, #172]	; (8000e6c <HAL_ADC_MspInit+0x1a8>)
 8000dbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dc2:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8000dc4:	4b29      	ldr	r3, [pc, #164]	; (8000e6c <HAL_ADC_MspInit+0x1a8>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000dca:	4b28      	ldr	r3, [pc, #160]	; (8000e6c <HAL_ADC_MspInit+0x1a8>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dd0:	4b26      	ldr	r3, [pc, #152]	; (8000e6c <HAL_ADC_MspInit+0x1a8>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000dd6:	4825      	ldr	r0, [pc, #148]	; (8000e6c <HAL_ADC_MspInit+0x1a8>)
 8000dd8:	f000 ff5c 	bl	8001c94 <HAL_DMA_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <HAL_ADC_MspInit+0x122>
      Error_Handler();
 8000de2:	f7ff ff41 	bl	8000c68 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a20      	ldr	r2, [pc, #128]	; (8000e6c <HAL_ADC_MspInit+0x1a8>)
 8000dea:	639a      	str	r2, [r3, #56]	; 0x38
 8000dec:	4a1f      	ldr	r2, [pc, #124]	; (8000e6c <HAL_ADC_MspInit+0x1a8>)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000df2:	e02c      	b.n	8000e4e <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a1e      	ldr	r2, [pc, #120]	; (8000e74 <HAL_ADC_MspInit+0x1b0>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d127      	bne.n	8000e4e <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]
 8000e02:	4b16      	ldr	r3, [pc, #88]	; (8000e5c <HAL_ADC_MspInit+0x198>)
 8000e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e06:	4a15      	ldr	r2, [pc, #84]	; (8000e5c <HAL_ADC_MspInit+0x198>)
 8000e08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e0e:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <HAL_ADC_MspInit+0x198>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <HAL_ADC_MspInit+0x198>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a0e      	ldr	r2, [pc, #56]	; (8000e5c <HAL_ADC_MspInit+0x198>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <HAL_ADC_MspInit+0x198>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e36:	2302      	movs	r3, #2
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e46:	4619      	mov	r1, r3
 8000e48:	4807      	ldr	r0, [pc, #28]	; (8000e68 <HAL_ADC_MspInit+0x1a4>)
 8000e4a:	f001 fa0d 	bl	8002268 <HAL_GPIO_Init>
}
 8000e4e:	bf00      	nop
 8000e50:	3738      	adds	r7, #56	; 0x38
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40012000 	.word	0x40012000
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40020800 	.word	0x40020800
 8000e64:	40012100 	.word	0x40012100
 8000e68:	40020000 	.word	0x40020000
 8000e6c:	2000025c 	.word	0x2000025c
 8000e70:	40026440 	.word	0x40026440
 8000e74:	40012200 	.word	0x40012200

08000e78 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08a      	sub	sp, #40	; 0x28
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a17      	ldr	r2, [pc, #92]	; (8000ef4 <HAL_DAC_MspInit+0x7c>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d127      	bne.n	8000eea <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	613b      	str	r3, [r7, #16]
 8000e9e:	4b16      	ldr	r3, [pc, #88]	; (8000ef8 <HAL_DAC_MspInit+0x80>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	4a15      	ldr	r2, [pc, #84]	; (8000ef8 <HAL_DAC_MspInit+0x80>)
 8000ea4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eaa:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <HAL_DAC_MspInit+0x80>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <HAL_DAC_MspInit+0x80>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4a0e      	ldr	r2, [pc, #56]	; (8000ef8 <HAL_DAC_MspInit+0x80>)
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <HAL_DAC_MspInit+0x80>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000ed2:	2330      	movs	r3, #48	; 0x30
 8000ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	f107 0314 	add.w	r3, r7, #20
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4805      	ldr	r0, [pc, #20]	; (8000efc <HAL_DAC_MspInit+0x84>)
 8000ee6:	f001 f9bf 	bl	8002268 <HAL_GPIO_Init>

  /* USER CODE END DAC_MspInit 1 */

  }

}
 8000eea:	bf00      	nop
 8000eec:	3728      	adds	r7, #40	; 0x28
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40007400 	.word	0x40007400
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40020000 	.word	0x40020000

08000f00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08a      	sub	sp, #40	; 0x28
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a19      	ldr	r2, [pc, #100]	; (8000f84 <HAL_SPI_MspInit+0x84>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d12c      	bne.n	8000f7c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
 8000f26:	4b18      	ldr	r3, [pc, #96]	; (8000f88 <HAL_SPI_MspInit+0x88>)
 8000f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2a:	4a17      	ldr	r2, [pc, #92]	; (8000f88 <HAL_SPI_MspInit+0x88>)
 8000f2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f30:	6413      	str	r3, [r2, #64]	; 0x40
 8000f32:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <HAL_SPI_MspInit+0x88>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <HAL_SPI_MspInit+0x88>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a10      	ldr	r2, [pc, #64]	; (8000f88 <HAL_SPI_MspInit+0x88>)
 8000f48:	f043 0302 	orr.w	r3, r3, #2
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <HAL_SPI_MspInit+0x88>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000f5a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000f5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f60:	2302      	movs	r3, #2
 8000f62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f6c:	2305      	movs	r3, #5
 8000f6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	4619      	mov	r1, r3
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <HAL_SPI_MspInit+0x8c>)
 8000f78:	f001 f976 	bl	8002268 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000f7c:	bf00      	nop
 8000f7e:	3728      	adds	r7, #40	; 0x28
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40003800 	.word	0x40003800
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40020400 	.word	0x40020400

08000f90 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08a      	sub	sp, #40	; 0x28
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a19      	ldr	r2, [pc, #100]	; (8001014 <HAL_TIM_IC_MspInit+0x84>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d12b      	bne.n	800100a <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	613b      	str	r3, [r7, #16]
 8000fb6:	4b18      	ldr	r3, [pc, #96]	; (8001018 <HAL_TIM_IC_MspInit+0x88>)
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fba:	4a17      	ldr	r2, [pc, #92]	; (8001018 <HAL_TIM_IC_MspInit+0x88>)
 8000fbc:	f043 0302 	orr.w	r3, r3, #2
 8000fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <HAL_TIM_IC_MspInit+0x88>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	613b      	str	r3, [r7, #16]
 8000fcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	4b11      	ldr	r3, [pc, #68]	; (8001018 <HAL_TIM_IC_MspInit+0x88>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a10      	ldr	r2, [pc, #64]	; (8001018 <HAL_TIM_IC_MspInit+0x88>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <HAL_TIM_IC_MspInit+0x88>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fea:	23c0      	movs	r3, #192	; 0xc0
 8000fec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	4619      	mov	r1, r3
 8001004:	4805      	ldr	r0, [pc, #20]	; (800101c <HAL_TIM_IC_MspInit+0x8c>)
 8001006:	f001 f92f 	bl	8002268 <HAL_GPIO_Init>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800100a:	bf00      	nop
 800100c:	3728      	adds	r7, #40	; 0x28
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40000400 	.word	0x40000400
 8001018:	40023800 	.word	0x40023800
 800101c:	40020000 	.word	0x40020000

08001020 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a0b      	ldr	r2, [pc, #44]	; (800105c <HAL_TIM_PWM_MspInit+0x3c>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d10d      	bne.n	800104e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <HAL_TIM_PWM_MspInit+0x40>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	4a09      	ldr	r2, [pc, #36]	; (8001060 <HAL_TIM_PWM_MspInit+0x40>)
 800103c:	f043 0304 	orr.w	r3, r3, #4
 8001040:	6413      	str	r3, [r2, #64]	; 0x40
 8001042:	4b07      	ldr	r3, [pc, #28]	; (8001060 <HAL_TIM_PWM_MspInit+0x40>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	f003 0304 	and.w	r3, r3, #4
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 800104e:	bf00      	nop
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	40000800 	.word	0x40000800
 8001060:	40023800 	.word	0x40023800

08001064 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b088      	sub	sp, #32
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 030c 	add.w	r3, r7, #12
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a12      	ldr	r2, [pc, #72]	; (80010cc <HAL_TIM_MspPostInit+0x68>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d11e      	bne.n	80010c4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <HAL_TIM_MspPostInit+0x6c>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a10      	ldr	r2, [pc, #64]	; (80010d0 <HAL_TIM_MspPostInit+0x6c>)
 8001090:	f043 0302 	orr.w	r3, r3, #2
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <HAL_TIM_MspPostInit+0x6c>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010a6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a8:	2302      	movs	r3, #2
 80010aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80010b4:	2302      	movs	r3, #2
 80010b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b8:	f107 030c 	add.w	r3, r7, #12
 80010bc:	4619      	mov	r1, r3
 80010be:	4805      	ldr	r0, [pc, #20]	; (80010d4 <HAL_TIM_MspPostInit+0x70>)
 80010c0:	f001 f8d2 	bl	8002268 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80010c4:	bf00      	nop
 80010c6:	3720      	adds	r7, #32
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40000800 	.word	0x40000800
 80010d0:	40023800 	.word	0x40023800
 80010d4:	40020400 	.word	0x40020400

080010d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08a      	sub	sp, #40	; 0x28
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a19      	ldr	r2, [pc, #100]	; (800115c <HAL_UART_MspInit+0x84>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d12b      	bne.n	8001152 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
 80010fe:	4b18      	ldr	r3, [pc, #96]	; (8001160 <HAL_UART_MspInit+0x88>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	4a17      	ldr	r2, [pc, #92]	; (8001160 <HAL_UART_MspInit+0x88>)
 8001104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001108:	6413      	str	r3, [r2, #64]	; 0x40
 800110a:	4b15      	ldr	r3, [pc, #84]	; (8001160 <HAL_UART_MspInit+0x88>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	4b11      	ldr	r3, [pc, #68]	; (8001160 <HAL_UART_MspInit+0x88>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a10      	ldr	r2, [pc, #64]	; (8001160 <HAL_UART_MspInit+0x88>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <HAL_UART_MspInit+0x88>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001132:	230c      	movs	r3, #12
 8001134:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001136:	2302      	movs	r3, #2
 8001138:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113e:	2303      	movs	r3, #3
 8001140:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001142:	2307      	movs	r3, #7
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	4619      	mov	r1, r3
 800114c:	4805      	ldr	r0, [pc, #20]	; (8001164 <HAL_UART_MspInit+0x8c>)
 800114e:	f001 f88b 	bl	8002268 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001152:	bf00      	nop
 8001154:	3728      	adds	r7, #40	; 0x28
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40004400 	.word	0x40004400
 8001160:	40023800 	.word	0x40023800
 8001164:	40020000 	.word	0x40020000

08001168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800116c:	e7fe      	b.n	800116c <NMI_Handler+0x4>

0800116e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001172:	e7fe      	b.n	8001172 <HardFault_Handler+0x4>

08001174 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001178:	e7fe      	b.n	8001178 <MemManage_Handler+0x4>

0800117a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800117a:	b480      	push	{r7}
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800117e:	e7fe      	b.n	800117e <BusFault_Handler+0x4>

08001180 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001184:	e7fe      	b.n	8001184 <UsageFault_Handler+0x4>

08001186 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001186:	b480      	push	{r7}
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011b4:	f000 f92c 	bl	8001410 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}

080011bc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80011c0:	4802      	ldr	r0, [pc, #8]	; (80011cc <DMA2_Stream2_IRQHandler+0x10>)
 80011c2:	f000 fe15 	bl	8001df0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	2000025c 	.word	0x2000025c

080011d0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80011d4:	4802      	ldr	r0, [pc, #8]	; (80011e0 <OTG_FS_IRQHandler+0x10>)
 80011d6:	f001 fb3f 	bl	8002858 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	200018e8 	.word	0x200018e8

080011e4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]
 80011f4:	e00a      	b.n	800120c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011f6:	f3af 8000 	nop.w
 80011fa:	4601      	mov	r1, r0
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	1c5a      	adds	r2, r3, #1
 8001200:	60ba      	str	r2, [r7, #8]
 8001202:	b2ca      	uxtb	r2, r1
 8001204:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	3301      	adds	r3, #1
 800120a:	617b      	str	r3, [r7, #20]
 800120c:	697a      	ldr	r2, [r7, #20]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	429a      	cmp	r2, r3
 8001212:	dbf0      	blt.n	80011f6 <_read+0x12>
  }

  return len;
 8001214:	687b      	ldr	r3, [r7, #4]
}
 8001216:	4618      	mov	r0, r3
 8001218:	3718      	adds	r7, #24
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <_close>:
  }
  return len;
}

int _close(int file)
{
 800121e:	b480      	push	{r7}
 8001220:	b083      	sub	sp, #12
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001226:	f04f 33ff 	mov.w	r3, #4294967295
}
 800122a:	4618      	mov	r0, r3
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001236:	b480      	push	{r7}
 8001238:	b083      	sub	sp, #12
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
 800123e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001246:	605a      	str	r2, [r3, #4]
  return 0;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <_isatty>:

int _isatty(int file)
{
 8001256:	b480      	push	{r7}
 8001258:	b083      	sub	sp, #12
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800125e:	2301      	movs	r3, #1
}
 8001260:	4618      	mov	r0, r3
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3714      	adds	r7, #20
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
	...

08001288 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001290:	4a14      	ldr	r2, [pc, #80]	; (80012e4 <_sbrk+0x5c>)
 8001292:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <_sbrk+0x60>)
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800129c:	4b13      	ldr	r3, [pc, #76]	; (80012ec <_sbrk+0x64>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d102      	bne.n	80012aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012a4:	4b11      	ldr	r3, [pc, #68]	; (80012ec <_sbrk+0x64>)
 80012a6:	4a12      	ldr	r2, [pc, #72]	; (80012f0 <_sbrk+0x68>)
 80012a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012aa:	4b10      	ldr	r3, [pc, #64]	; (80012ec <_sbrk+0x64>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4413      	add	r3, r2
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d207      	bcs.n	80012c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012b8:	f009 fadc 	bl	800a874 <__errno>
 80012bc:	4603      	mov	r3, r0
 80012be:	220c      	movs	r2, #12
 80012c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012c2:	f04f 33ff 	mov.w	r3, #4294967295
 80012c6:	e009      	b.n	80012dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012c8:	4b08      	ldr	r3, [pc, #32]	; (80012ec <_sbrk+0x64>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ce:	4b07      	ldr	r3, [pc, #28]	; (80012ec <_sbrk+0x64>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4413      	add	r3, r2
 80012d6:	4a05      	ldr	r2, [pc, #20]	; (80012ec <_sbrk+0x64>)
 80012d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012da:	68fb      	ldr	r3, [r7, #12]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3718      	adds	r7, #24
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20020000 	.word	0x20020000
 80012e8:	00000400 	.word	0x00000400
 80012ec:	20000400 	.word	0x20000400
 80012f0:	20002138 	.word	0x20002138

080012f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012f8:	4b06      	ldr	r3, [pc, #24]	; (8001314 <SystemInit+0x20>)
 80012fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012fe:	4a05      	ldr	r2, [pc, #20]	; (8001314 <SystemInit+0x20>)
 8001300:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001304:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001318:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001350 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800131c:	f7ff ffea 	bl	80012f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001320:	480c      	ldr	r0, [pc, #48]	; (8001354 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001322:	490d      	ldr	r1, [pc, #52]	; (8001358 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001324:	4a0d      	ldr	r2, [pc, #52]	; (800135c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001326:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001328:	e002      	b.n	8001330 <LoopCopyDataInit>

0800132a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800132a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800132c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800132e:	3304      	adds	r3, #4

08001330 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001330:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001332:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001334:	d3f9      	bcc.n	800132a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001336:	4a0a      	ldr	r2, [pc, #40]	; (8001360 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001338:	4c0a      	ldr	r4, [pc, #40]	; (8001364 <LoopFillZerobss+0x22>)
  movs r3, #0
 800133a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800133c:	e001      	b.n	8001342 <LoopFillZerobss>

0800133e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800133e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001340:	3204      	adds	r2, #4

08001342 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001342:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001344:	d3fb      	bcc.n	800133e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001346:	f009 fa9b 	bl	800a880 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800134a:	f7ff f8ef 	bl	800052c <main>
  bx  lr    
 800134e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001350:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001354:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001358:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 800135c:	0800af68 	.word	0x0800af68
  ldr r2, =_sbss
 8001360:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8001364:	20002138 	.word	0x20002138

08001368 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001368:	e7fe      	b.n	8001368 <ADC_IRQHandler>
	...

0800136c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001370:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <HAL_Init+0x40>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a0d      	ldr	r2, [pc, #52]	; (80013ac <HAL_Init+0x40>)
 8001376:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800137a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800137c:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <HAL_Init+0x40>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a0a      	ldr	r2, [pc, #40]	; (80013ac <HAL_Init+0x40>)
 8001382:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001386:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001388:	4b08      	ldr	r3, [pc, #32]	; (80013ac <HAL_Init+0x40>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a07      	ldr	r2, [pc, #28]	; (80013ac <HAL_Init+0x40>)
 800138e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001392:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001394:	2003      	movs	r0, #3
 8001396:	f000 fbc1 	bl	8001b1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800139a:	2000      	movs	r0, #0
 800139c:	f000 f808 	bl	80013b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013a0:	f7ff fc68 	bl	8000c74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40023c00 	.word	0x40023c00

080013b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013b8:	4b12      	ldr	r3, [pc, #72]	; (8001404 <HAL_InitTick+0x54>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	4b12      	ldr	r3, [pc, #72]	; (8001408 <HAL_InitTick+0x58>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	4619      	mov	r1, r3
 80013c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ce:	4618      	mov	r0, r3
 80013d0:	f000 fbd9 	bl	8001b86 <HAL_SYSTICK_Config>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e00e      	b.n	80013fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b0f      	cmp	r3, #15
 80013e2:	d80a      	bhi.n	80013fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013e4:	2200      	movs	r2, #0
 80013e6:	6879      	ldr	r1, [r7, #4]
 80013e8:	f04f 30ff 	mov.w	r0, #4294967295
 80013ec:	f000 fba1 	bl	8001b32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013f0:	4a06      	ldr	r2, [pc, #24]	; (800140c <HAL_InitTick+0x5c>)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013f6:	2300      	movs	r3, #0
 80013f8:	e000      	b.n	80013fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20000000 	.word	0x20000000
 8001408:	20000008 	.word	0x20000008
 800140c:	20000004 	.word	0x20000004

08001410 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <HAL_IncTick+0x20>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	461a      	mov	r2, r3
 800141a:	4b06      	ldr	r3, [pc, #24]	; (8001434 <HAL_IncTick+0x24>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4413      	add	r3, r2
 8001420:	4a04      	ldr	r2, [pc, #16]	; (8001434 <HAL_IncTick+0x24>)
 8001422:	6013      	str	r3, [r2, #0]
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	20000008 	.word	0x20000008
 8001434:	20000404 	.word	0x20000404

08001438 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  return uwTick;
 800143c:	4b03      	ldr	r3, [pc, #12]	; (800144c <HAL_GetTick+0x14>)
 800143e:	681b      	ldr	r3, [r3, #0]
}
 8001440:	4618      	mov	r0, r3
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	20000404 	.word	0x20000404

08001450 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001458:	f7ff ffee 	bl	8001438 <HAL_GetTick>
 800145c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001468:	d005      	beq.n	8001476 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800146a:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <HAL_Delay+0x44>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	461a      	mov	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4413      	add	r3, r2
 8001474:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001476:	bf00      	nop
 8001478:	f7ff ffde 	bl	8001438 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	429a      	cmp	r2, r3
 8001486:	d8f7      	bhi.n	8001478 <HAL_Delay+0x28>
  {
  }
}
 8001488:	bf00      	nop
 800148a:	bf00      	nop
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000008 	.word	0x20000008

08001498 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014a0:	2300      	movs	r3, #0
 80014a2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e033      	b.n	8001516 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d109      	bne.n	80014ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff fc04 	bl	8000cc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	f003 0310 	and.w	r3, r3, #16
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d118      	bne.n	8001508 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014de:	f023 0302 	bic.w	r3, r3, #2
 80014e2:	f043 0202 	orr.w	r2, r3, #2
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f000 f94a 	bl	8001784 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	f023 0303 	bic.w	r3, r3, #3
 80014fe:	f043 0201 	orr.w	r2, r3, #1
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	641a      	str	r2, [r3, #64]	; 0x40
 8001506:	e001      	b.n	800150c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001514:	7bfb      	ldrb	r3, [r7, #15]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800152a:	2300      	movs	r3, #0
 800152c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001534:	2b01      	cmp	r3, #1
 8001536:	d101      	bne.n	800153c <HAL_ADC_ConfigChannel+0x1c>
 8001538:	2302      	movs	r3, #2
 800153a:	e113      	b.n	8001764 <HAL_ADC_ConfigChannel+0x244>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2201      	movs	r2, #1
 8001540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b09      	cmp	r3, #9
 800154a:	d925      	bls.n	8001598 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	68d9      	ldr	r1, [r3, #12]
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	b29b      	uxth	r3, r3
 8001558:	461a      	mov	r2, r3
 800155a:	4613      	mov	r3, r2
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	4413      	add	r3, r2
 8001560:	3b1e      	subs	r3, #30
 8001562:	2207      	movs	r2, #7
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	43da      	mvns	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	400a      	ands	r2, r1
 8001570:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	68d9      	ldr	r1, [r3, #12]
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	689a      	ldr	r2, [r3, #8]
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	b29b      	uxth	r3, r3
 8001582:	4618      	mov	r0, r3
 8001584:	4603      	mov	r3, r0
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	4403      	add	r3, r0
 800158a:	3b1e      	subs	r3, #30
 800158c:	409a      	lsls	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	430a      	orrs	r2, r1
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	e022      	b.n	80015de <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6919      	ldr	r1, [r3, #16]
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	461a      	mov	r2, r3
 80015a6:	4613      	mov	r3, r2
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	4413      	add	r3, r2
 80015ac:	2207      	movs	r2, #7
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43da      	mvns	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	400a      	ands	r2, r1
 80015ba:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	6919      	ldr	r1, [r3, #16]
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	689a      	ldr	r2, [r3, #8]
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	4618      	mov	r0, r3
 80015ce:	4603      	mov	r3, r0
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	4403      	add	r3, r0
 80015d4:	409a      	lsls	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	430a      	orrs	r2, r1
 80015dc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	2b06      	cmp	r3, #6
 80015e4:	d824      	bhi.n	8001630 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685a      	ldr	r2, [r3, #4]
 80015f0:	4613      	mov	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4413      	add	r3, r2
 80015f6:	3b05      	subs	r3, #5
 80015f8:	221f      	movs	r2, #31
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	43da      	mvns	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	400a      	ands	r2, r1
 8001606:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	b29b      	uxth	r3, r3
 8001614:	4618      	mov	r0, r3
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685a      	ldr	r2, [r3, #4]
 800161a:	4613      	mov	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4413      	add	r3, r2
 8001620:	3b05      	subs	r3, #5
 8001622:	fa00 f203 	lsl.w	r2, r0, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	430a      	orrs	r2, r1
 800162c:	635a      	str	r2, [r3, #52]	; 0x34
 800162e:	e04c      	b.n	80016ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	2b0c      	cmp	r3, #12
 8001636:	d824      	bhi.n	8001682 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685a      	ldr	r2, [r3, #4]
 8001642:	4613      	mov	r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4413      	add	r3, r2
 8001648:	3b23      	subs	r3, #35	; 0x23
 800164a:	221f      	movs	r2, #31
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43da      	mvns	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	400a      	ands	r2, r1
 8001658:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	b29b      	uxth	r3, r3
 8001666:	4618      	mov	r0, r3
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	4613      	mov	r3, r2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	4413      	add	r3, r2
 8001672:	3b23      	subs	r3, #35	; 0x23
 8001674:	fa00 f203 	lsl.w	r2, r0, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	430a      	orrs	r2, r1
 800167e:	631a      	str	r2, [r3, #48]	; 0x30
 8001680:	e023      	b.n	80016ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685a      	ldr	r2, [r3, #4]
 800168c:	4613      	mov	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	4413      	add	r3, r2
 8001692:	3b41      	subs	r3, #65	; 0x41
 8001694:	221f      	movs	r2, #31
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43da      	mvns	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	400a      	ands	r2, r1
 80016a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	4618      	mov	r0, r3
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685a      	ldr	r2, [r3, #4]
 80016b6:	4613      	mov	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4413      	add	r3, r2
 80016bc:	3b41      	subs	r3, #65	; 0x41
 80016be:	fa00 f203 	lsl.w	r2, r0, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	430a      	orrs	r2, r1
 80016c8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016ca:	4b29      	ldr	r3, [pc, #164]	; (8001770 <HAL_ADC_ConfigChannel+0x250>)
 80016cc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a28      	ldr	r2, [pc, #160]	; (8001774 <HAL_ADC_ConfigChannel+0x254>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d10f      	bne.n	80016f8 <HAL_ADC_ConfigChannel+0x1d8>
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b12      	cmp	r3, #18
 80016de:	d10b      	bne.n	80016f8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a1d      	ldr	r2, [pc, #116]	; (8001774 <HAL_ADC_ConfigChannel+0x254>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d12b      	bne.n	800175a <HAL_ADC_ConfigChannel+0x23a>
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a1c      	ldr	r2, [pc, #112]	; (8001778 <HAL_ADC_ConfigChannel+0x258>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d003      	beq.n	8001714 <HAL_ADC_ConfigChannel+0x1f4>
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2b11      	cmp	r3, #17
 8001712:	d122      	bne.n	800175a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a11      	ldr	r2, [pc, #68]	; (8001778 <HAL_ADC_ConfigChannel+0x258>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d111      	bne.n	800175a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001736:	4b11      	ldr	r3, [pc, #68]	; (800177c <HAL_ADC_ConfigChannel+0x25c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a11      	ldr	r2, [pc, #68]	; (8001780 <HAL_ADC_ConfigChannel+0x260>)
 800173c:	fba2 2303 	umull	r2, r3, r2, r3
 8001740:	0c9a      	lsrs	r2, r3, #18
 8001742:	4613      	mov	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800174c:	e002      	b.n	8001754 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	3b01      	subs	r3, #1
 8001752:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1f9      	bne.n	800174e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001762:	2300      	movs	r3, #0
}
 8001764:	4618      	mov	r0, r3
 8001766:	3714      	adds	r7, #20
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	40012300 	.word	0x40012300
 8001774:	40012000 	.word	0x40012000
 8001778:	10000012 	.word	0x10000012
 800177c:	20000000 	.word	0x20000000
 8001780:	431bde83 	.word	0x431bde83

08001784 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800178c:	4b79      	ldr	r3, [pc, #484]	; (8001974 <ADC_Init+0x1f0>)
 800178e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	685a      	ldr	r2, [r3, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	431a      	orrs	r2, r3
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	685a      	ldr	r2, [r3, #4]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	6859      	ldr	r1, [r3, #4]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	691b      	ldr	r3, [r3, #16]
 80017c4:	021a      	lsls	r2, r3, #8
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	430a      	orrs	r2, r1
 80017cc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	685a      	ldr	r2, [r3, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80017dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6859      	ldr	r1, [r3, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	430a      	orrs	r2, r1
 80017ee:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	689a      	ldr	r2, [r3, #8]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6899      	ldr	r1, [r3, #8]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	68da      	ldr	r2, [r3, #12]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	430a      	orrs	r2, r1
 8001810:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001816:	4a58      	ldr	r2, [pc, #352]	; (8001978 <ADC_Init+0x1f4>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d022      	beq.n	8001862 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	689a      	ldr	r2, [r3, #8]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800182a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6899      	ldr	r1, [r3, #8]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	430a      	orrs	r2, r1
 800183c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	689a      	ldr	r2, [r3, #8]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800184c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6899      	ldr	r1, [r3, #8]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	430a      	orrs	r2, r1
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	e00f      	b.n	8001882 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	689a      	ldr	r2, [r3, #8]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001870:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	689a      	ldr	r2, [r3, #8]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001880:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	689a      	ldr	r2, [r3, #8]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f022 0202 	bic.w	r2, r2, #2
 8001890:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	6899      	ldr	r1, [r3, #8]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	7e1b      	ldrb	r3, [r3, #24]
 800189c:	005a      	lsls	r2, r3, #1
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	430a      	orrs	r2, r1
 80018a4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d01b      	beq.n	80018e8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	685a      	ldr	r2, [r3, #4]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018be:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	685a      	ldr	r2, [r3, #4]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80018ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	6859      	ldr	r1, [r3, #4]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018da:	3b01      	subs	r3, #1
 80018dc:	035a      	lsls	r2, r3, #13
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	430a      	orrs	r2, r1
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	e007      	b.n	80018f8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	685a      	ldr	r2, [r3, #4]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018f6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001906:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	3b01      	subs	r3, #1
 8001914:	051a      	lsls	r2, r3, #20
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	430a      	orrs	r2, r1
 800191c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	689a      	ldr	r2, [r3, #8]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800192c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6899      	ldr	r1, [r3, #8]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800193a:	025a      	lsls	r2, r3, #9
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	430a      	orrs	r2, r1
 8001942:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	689a      	ldr	r2, [r3, #8]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001952:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6899      	ldr	r1, [r3, #8]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	695b      	ldr	r3, [r3, #20]
 800195e:	029a      	lsls	r2, r3, #10
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	430a      	orrs	r2, r1
 8001966:	609a      	str	r2, [r3, #8]
}
 8001968:	bf00      	nop
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	40012300 	.word	0x40012300
 8001978:	0f000001 	.word	0x0f000001

0800197c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800198c:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <__NVIC_SetPriorityGrouping+0x44>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001992:	68ba      	ldr	r2, [r7, #8]
 8001994:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001998:	4013      	ands	r3, r2
 800199a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ae:	4a04      	ldr	r2, [pc, #16]	; (80019c0 <__NVIC_SetPriorityGrouping+0x44>)
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	60d3      	str	r3, [r2, #12]
}
 80019b4:	bf00      	nop
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c8:	4b04      	ldr	r3, [pc, #16]	; (80019dc <__NVIC_GetPriorityGrouping+0x18>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	0a1b      	lsrs	r3, r3, #8
 80019ce:	f003 0307 	and.w	r3, r3, #7
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	db0b      	blt.n	8001a0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	f003 021f 	and.w	r2, r3, #31
 80019f8:	4907      	ldr	r1, [pc, #28]	; (8001a18 <__NVIC_EnableIRQ+0x38>)
 80019fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fe:	095b      	lsrs	r3, r3, #5
 8001a00:	2001      	movs	r0, #1
 8001a02:	fa00 f202 	lsl.w	r2, r0, r2
 8001a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	e000e100 	.word	0xe000e100

08001a1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	6039      	str	r1, [r7, #0]
 8001a26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	db0a      	blt.n	8001a46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	490c      	ldr	r1, [pc, #48]	; (8001a68 <__NVIC_SetPriority+0x4c>)
 8001a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3a:	0112      	lsls	r2, r2, #4
 8001a3c:	b2d2      	uxtb	r2, r2
 8001a3e:	440b      	add	r3, r1
 8001a40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a44:	e00a      	b.n	8001a5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	b2da      	uxtb	r2, r3
 8001a4a:	4908      	ldr	r1, [pc, #32]	; (8001a6c <__NVIC_SetPriority+0x50>)
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	f003 030f 	and.w	r3, r3, #15
 8001a52:	3b04      	subs	r3, #4
 8001a54:	0112      	lsls	r2, r2, #4
 8001a56:	b2d2      	uxtb	r2, r2
 8001a58:	440b      	add	r3, r1
 8001a5a:	761a      	strb	r2, [r3, #24]
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	e000e100 	.word	0xe000e100
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b089      	sub	sp, #36	; 0x24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	f1c3 0307 	rsb	r3, r3, #7
 8001a8a:	2b04      	cmp	r3, #4
 8001a8c:	bf28      	it	cs
 8001a8e:	2304      	movcs	r3, #4
 8001a90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	3304      	adds	r3, #4
 8001a96:	2b06      	cmp	r3, #6
 8001a98:	d902      	bls.n	8001aa0 <NVIC_EncodePriority+0x30>
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	3b03      	subs	r3, #3
 8001a9e:	e000      	b.n	8001aa2 <NVIC_EncodePriority+0x32>
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	43da      	mvns	r2, r3
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	401a      	ands	r2, r3
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac2:	43d9      	mvns	r1, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac8:	4313      	orrs	r3, r2
         );
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3724      	adds	r7, #36	; 0x24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
	...

08001ad8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ae8:	d301      	bcc.n	8001aee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aea:	2301      	movs	r3, #1
 8001aec:	e00f      	b.n	8001b0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aee:	4a0a      	ldr	r2, [pc, #40]	; (8001b18 <SysTick_Config+0x40>)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3b01      	subs	r3, #1
 8001af4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001af6:	210f      	movs	r1, #15
 8001af8:	f04f 30ff 	mov.w	r0, #4294967295
 8001afc:	f7ff ff8e 	bl	8001a1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b00:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <SysTick_Config+0x40>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b06:	4b04      	ldr	r3, [pc, #16]	; (8001b18 <SysTick_Config+0x40>)
 8001b08:	2207      	movs	r2, #7
 8001b0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	e000e010 	.word	0xe000e010

08001b1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff ff29 	bl	800197c <__NVIC_SetPriorityGrouping>
}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b086      	sub	sp, #24
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	4603      	mov	r3, r0
 8001b3a:	60b9      	str	r1, [r7, #8]
 8001b3c:	607a      	str	r2, [r7, #4]
 8001b3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b44:	f7ff ff3e 	bl	80019c4 <__NVIC_GetPriorityGrouping>
 8001b48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	68b9      	ldr	r1, [r7, #8]
 8001b4e:	6978      	ldr	r0, [r7, #20]
 8001b50:	f7ff ff8e 	bl	8001a70 <NVIC_EncodePriority>
 8001b54:	4602      	mov	r2, r0
 8001b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b5a:	4611      	mov	r1, r2
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff ff5d 	bl	8001a1c <__NVIC_SetPriority>
}
 8001b62:	bf00      	nop
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b082      	sub	sp, #8
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	4603      	mov	r3, r0
 8001b72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff ff31 	bl	80019e0 <__NVIC_EnableIRQ>
}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff ffa2 	bl	8001ad8 <SysTick_Config>
 8001b94:	4603      	mov	r3, r0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b082      	sub	sp, #8
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d101      	bne.n	8001bb0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e014      	b.n	8001bda <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	791b      	ldrb	r3, [r3, #4]
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d105      	bne.n	8001bc6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f7ff f959 	bl	8000e78 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2202      	movs	r2, #2
 8001bca:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b089      	sub	sp, #36	; 0x24
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	60f8      	str	r0, [r7, #12]
 8001bea:	60b9      	str	r1, [r7, #8]
 8001bec:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d002      	beq.n	8001bfe <HAL_DAC_ConfigChannel+0x1c>
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e042      	b.n	8001c88 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	795b      	ldrb	r3, [r3, #5]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d101      	bne.n	8001c0e <HAL_DAC_ConfigChannel+0x2c>
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	e03c      	b.n	8001c88 <HAL_DAC_ConfigChannel+0xa6>
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2201      	movs	r2, #1
 8001c12:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2202      	movs	r2, #2
 8001c18:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f003 0310 	and.w	r3, r3, #16
 8001c28:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8001c30:	43db      	mvns	r3, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f003 0310 	and.w	r3, r3, #16
 8001c4a:	697a      	ldr	r2, [r7, #20]
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6819      	ldr	r1, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f003 0310 	and.w	r3, r3, #16
 8001c6a:	22c0      	movs	r2, #192	; 0xc0
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	43da      	mvns	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	400a      	ands	r2, r1
 8001c78:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2200      	movs	r2, #0
 8001c84:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001c86:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3724      	adds	r7, #36	; 0x24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ca0:	f7ff fbca 	bl	8001438 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d101      	bne.n	8001cb0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e099      	b.n	8001de4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f022 0201 	bic.w	r2, r2, #1
 8001cce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cd0:	e00f      	b.n	8001cf2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cd2:	f7ff fbb1 	bl	8001438 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b05      	cmp	r3, #5
 8001cde:	d908      	bls.n	8001cf2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2220      	movs	r2, #32
 8001ce4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2203      	movs	r2, #3
 8001cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e078      	b.n	8001de4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1e8      	bne.n	8001cd2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d08:	697a      	ldr	r2, [r7, #20]
 8001d0a:	4b38      	ldr	r3, [pc, #224]	; (8001dec <HAL_DMA_Init+0x158>)
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685a      	ldr	r2, [r3, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d3e:	697a      	ldr	r2, [r7, #20]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d48:	2b04      	cmp	r3, #4
 8001d4a:	d107      	bne.n	8001d5c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d54:	4313      	orrs	r3, r2
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	697a      	ldr	r2, [r7, #20]
 8001d62:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	f023 0307 	bic.w	r3, r3, #7
 8001d72:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d78:	697a      	ldr	r2, [r7, #20]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	d117      	bne.n	8001db6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8a:	697a      	ldr	r2, [r7, #20]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d00e      	beq.n	8001db6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 f9e9 	bl	8002170 <DMA_CheckFifoParam>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d008      	beq.n	8001db6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2240      	movs	r2, #64	; 0x40
 8001da8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2201      	movs	r2, #1
 8001dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001db2:	2301      	movs	r3, #1
 8001db4:	e016      	b.n	8001de4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f9a0 	bl	8002104 <DMA_CalcBaseAndBitshift>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dcc:	223f      	movs	r2, #63	; 0x3f
 8001dce:	409a      	lsls	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	f010803f 	.word	0xf010803f

08001df0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001dfc:	4b8e      	ldr	r3, [pc, #568]	; (8002038 <HAL_DMA_IRQHandler+0x248>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a8e      	ldr	r2, [pc, #568]	; (800203c <HAL_DMA_IRQHandler+0x24c>)
 8001e02:	fba2 2303 	umull	r2, r3, r2, r3
 8001e06:	0a9b      	lsrs	r3, r3, #10
 8001e08:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1a:	2208      	movs	r2, #8
 8001e1c:	409a      	lsls	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	4013      	ands	r3, r2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d01a      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d013      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 0204 	bic.w	r2, r2, #4
 8001e42:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e48:	2208      	movs	r2, #8
 8001e4a:	409a      	lsls	r2, r3
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e54:	f043 0201 	orr.w	r2, r3, #1
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e60:	2201      	movs	r2, #1
 8001e62:	409a      	lsls	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	4013      	ands	r3, r2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d012      	beq.n	8001e92 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00b      	beq.n	8001e92 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e7e:	2201      	movs	r2, #1
 8001e80:	409a      	lsls	r2, r3
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e8a:	f043 0202 	orr.w	r2, r3, #2
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e96:	2204      	movs	r2, #4
 8001e98:	409a      	lsls	r2, r3
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d012      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d00b      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb4:	2204      	movs	r2, #4
 8001eb6:	409a      	lsls	r2, r3
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec0:	f043 0204 	orr.w	r2, r3, #4
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ecc:	2210      	movs	r2, #16
 8001ece:	409a      	lsls	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d043      	beq.n	8001f60 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0308 	and.w	r3, r3, #8
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d03c      	beq.n	8001f60 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eea:	2210      	movs	r2, #16
 8001eec:	409a      	lsls	r2, r3
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d018      	beq.n	8001f32 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d108      	bne.n	8001f20 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d024      	beq.n	8001f60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	4798      	blx	r3
 8001f1e:	e01f      	b.n	8001f60 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d01b      	beq.n	8001f60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	4798      	blx	r3
 8001f30:	e016      	b.n	8001f60 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d107      	bne.n	8001f50 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f022 0208 	bic.w	r2, r2, #8
 8001f4e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f64:	2220      	movs	r2, #32
 8001f66:	409a      	lsls	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f000 808f 	beq.w	8002090 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0310 	and.w	r3, r3, #16
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f000 8087 	beq.w	8002090 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f86:	2220      	movs	r2, #32
 8001f88:	409a      	lsls	r2, r3
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b05      	cmp	r3, #5
 8001f98:	d136      	bne.n	8002008 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f022 0216 	bic.w	r2, r2, #22
 8001fa8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	695a      	ldr	r2, [r3, #20]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fb8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d103      	bne.n	8001fca <HAL_DMA_IRQHandler+0x1da>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d007      	beq.n	8001fda <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 0208 	bic.w	r2, r2, #8
 8001fd8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fde:	223f      	movs	r2, #63	; 0x3f
 8001fe0:	409a      	lsls	r2, r3
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d07e      	beq.n	80020fc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	4798      	blx	r3
        }
        return;
 8002006:	e079      	b.n	80020fc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d01d      	beq.n	8002052 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d10d      	bne.n	8002040 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002028:	2b00      	cmp	r3, #0
 800202a:	d031      	beq.n	8002090 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	4798      	blx	r3
 8002034:	e02c      	b.n	8002090 <HAL_DMA_IRQHandler+0x2a0>
 8002036:	bf00      	nop
 8002038:	20000000 	.word	0x20000000
 800203c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002044:	2b00      	cmp	r3, #0
 8002046:	d023      	beq.n	8002090 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	4798      	blx	r3
 8002050:	e01e      	b.n	8002090 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205c:	2b00      	cmp	r3, #0
 800205e:	d10f      	bne.n	8002080 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f022 0210 	bic.w	r2, r2, #16
 800206e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002084:	2b00      	cmp	r3, #0
 8002086:	d003      	beq.n	8002090 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002094:	2b00      	cmp	r3, #0
 8002096:	d032      	beq.n	80020fe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d022      	beq.n	80020ea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2205      	movs	r2, #5
 80020a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f022 0201 	bic.w	r2, r2, #1
 80020ba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	3301      	adds	r3, #1
 80020c0:	60bb      	str	r3, [r7, #8]
 80020c2:	697a      	ldr	r2, [r7, #20]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d307      	bcc.n	80020d8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1f2      	bne.n	80020bc <HAL_DMA_IRQHandler+0x2cc>
 80020d6:	e000      	b.n	80020da <HAL_DMA_IRQHandler+0x2ea>
          break;
 80020d8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d005      	beq.n	80020fe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	4798      	blx	r3
 80020fa:	e000      	b.n	80020fe <HAL_DMA_IRQHandler+0x30e>
        return;
 80020fc:	bf00      	nop
    }
  }
}
 80020fe:	3718      	adds	r7, #24
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	b2db      	uxtb	r3, r3
 8002112:	3b10      	subs	r3, #16
 8002114:	4a14      	ldr	r2, [pc, #80]	; (8002168 <DMA_CalcBaseAndBitshift+0x64>)
 8002116:	fba2 2303 	umull	r2, r3, r2, r3
 800211a:	091b      	lsrs	r3, r3, #4
 800211c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800211e:	4a13      	ldr	r2, [pc, #76]	; (800216c <DMA_CalcBaseAndBitshift+0x68>)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	4413      	add	r3, r2
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	461a      	mov	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2b03      	cmp	r3, #3
 8002130:	d909      	bls.n	8002146 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800213a:	f023 0303 	bic.w	r3, r3, #3
 800213e:	1d1a      	adds	r2, r3, #4
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	659a      	str	r2, [r3, #88]	; 0x58
 8002144:	e007      	b.n	8002156 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800214e:	f023 0303 	bic.w	r3, r3, #3
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800215a:	4618      	mov	r0, r3
 800215c:	3714      	adds	r7, #20
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	aaaaaaab 	.word	0xaaaaaaab
 800216c:	0800af50 	.word	0x0800af50

08002170 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002178:	2300      	movs	r3, #0
 800217a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002180:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d11f      	bne.n	80021ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	2b03      	cmp	r3, #3
 800218e:	d856      	bhi.n	800223e <DMA_CheckFifoParam+0xce>
 8002190:	a201      	add	r2, pc, #4	; (adr r2, 8002198 <DMA_CheckFifoParam+0x28>)
 8002192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002196:	bf00      	nop
 8002198:	080021a9 	.word	0x080021a9
 800219c:	080021bb 	.word	0x080021bb
 80021a0:	080021a9 	.word	0x080021a9
 80021a4:	0800223f 	.word	0x0800223f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d046      	beq.n	8002242 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021b8:	e043      	b.n	8002242 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021c2:	d140      	bne.n	8002246 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021c8:	e03d      	b.n	8002246 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021d2:	d121      	bne.n	8002218 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	2b03      	cmp	r3, #3
 80021d8:	d837      	bhi.n	800224a <DMA_CheckFifoParam+0xda>
 80021da:	a201      	add	r2, pc, #4	; (adr r2, 80021e0 <DMA_CheckFifoParam+0x70>)
 80021dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e0:	080021f1 	.word	0x080021f1
 80021e4:	080021f7 	.word	0x080021f7
 80021e8:	080021f1 	.word	0x080021f1
 80021ec:	08002209 	.word	0x08002209
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	73fb      	strb	r3, [r7, #15]
      break;
 80021f4:	e030      	b.n	8002258 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d025      	beq.n	800224e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002206:	e022      	b.n	800224e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002210:	d11f      	bne.n	8002252 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002216:	e01c      	b.n	8002252 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	2b02      	cmp	r3, #2
 800221c:	d903      	bls.n	8002226 <DMA_CheckFifoParam+0xb6>
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	2b03      	cmp	r3, #3
 8002222:	d003      	beq.n	800222c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002224:	e018      	b.n	8002258 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	73fb      	strb	r3, [r7, #15]
      break;
 800222a:	e015      	b.n	8002258 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002230:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00e      	beq.n	8002256 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	73fb      	strb	r3, [r7, #15]
      break;
 800223c:	e00b      	b.n	8002256 <DMA_CheckFifoParam+0xe6>
      break;
 800223e:	bf00      	nop
 8002240:	e00a      	b.n	8002258 <DMA_CheckFifoParam+0xe8>
      break;
 8002242:	bf00      	nop
 8002244:	e008      	b.n	8002258 <DMA_CheckFifoParam+0xe8>
      break;
 8002246:	bf00      	nop
 8002248:	e006      	b.n	8002258 <DMA_CheckFifoParam+0xe8>
      break;
 800224a:	bf00      	nop
 800224c:	e004      	b.n	8002258 <DMA_CheckFifoParam+0xe8>
      break;
 800224e:	bf00      	nop
 8002250:	e002      	b.n	8002258 <DMA_CheckFifoParam+0xe8>
      break;   
 8002252:	bf00      	nop
 8002254:	e000      	b.n	8002258 <DMA_CheckFifoParam+0xe8>
      break;
 8002256:	bf00      	nop
    }
  } 
  
  return status; 
 8002258:	7bfb      	ldrb	r3, [r7, #15]
}
 800225a:	4618      	mov	r0, r3
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop

08002268 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002268:	b480      	push	{r7}
 800226a:	b089      	sub	sp, #36	; 0x24
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002272:	2300      	movs	r3, #0
 8002274:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002276:	2300      	movs	r3, #0
 8002278:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800227a:	2300      	movs	r3, #0
 800227c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800227e:	2300      	movs	r3, #0
 8002280:	61fb      	str	r3, [r7, #28]
 8002282:	e165      	b.n	8002550 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002284:	2201      	movs	r2, #1
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	697a      	ldr	r2, [r7, #20]
 8002294:	4013      	ands	r3, r2
 8002296:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	429a      	cmp	r2, r3
 800229e:	f040 8154 	bne.w	800254a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d005      	beq.n	80022ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d130      	bne.n	800231c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	2203      	movs	r2, #3
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	43db      	mvns	r3, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4013      	ands	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	68da      	ldr	r2, [r3, #12]
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022f0:	2201      	movs	r2, #1
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	43db      	mvns	r3, r3
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4013      	ands	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	091b      	lsrs	r3, r3, #4
 8002306:	f003 0201 	and.w	r2, r3, #1
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4313      	orrs	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 0303 	and.w	r3, r3, #3
 8002324:	2b03      	cmp	r3, #3
 8002326:	d017      	beq.n	8002358 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	2203      	movs	r2, #3
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4013      	ands	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4313      	orrs	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f003 0303 	and.w	r3, r3, #3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d123      	bne.n	80023ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	08da      	lsrs	r2, r3, #3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3208      	adds	r2, #8
 800236c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002370:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	220f      	movs	r2, #15
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4013      	ands	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	691a      	ldr	r2, [r3, #16]
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4313      	orrs	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	08da      	lsrs	r2, r3, #3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3208      	adds	r2, #8
 80023a6:	69b9      	ldr	r1, [r7, #24]
 80023a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	2203      	movs	r2, #3
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	43db      	mvns	r3, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4013      	ands	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f003 0203 	and.w	r2, r3, #3
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 80ae 	beq.w	800254a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	4b5d      	ldr	r3, [pc, #372]	; (8002568 <HAL_GPIO_Init+0x300>)
 80023f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f6:	4a5c      	ldr	r2, [pc, #368]	; (8002568 <HAL_GPIO_Init+0x300>)
 80023f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023fc:	6453      	str	r3, [r2, #68]	; 0x44
 80023fe:	4b5a      	ldr	r3, [pc, #360]	; (8002568 <HAL_GPIO_Init+0x300>)
 8002400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800240a:	4a58      	ldr	r2, [pc, #352]	; (800256c <HAL_GPIO_Init+0x304>)
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	089b      	lsrs	r3, r3, #2
 8002410:	3302      	adds	r3, #2
 8002412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002416:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f003 0303 	and.w	r3, r3, #3
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	220f      	movs	r2, #15
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43db      	mvns	r3, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4013      	ands	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a4f      	ldr	r2, [pc, #316]	; (8002570 <HAL_GPIO_Init+0x308>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d025      	beq.n	8002482 <HAL_GPIO_Init+0x21a>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a4e      	ldr	r2, [pc, #312]	; (8002574 <HAL_GPIO_Init+0x30c>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d01f      	beq.n	800247e <HAL_GPIO_Init+0x216>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a4d      	ldr	r2, [pc, #308]	; (8002578 <HAL_GPIO_Init+0x310>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d019      	beq.n	800247a <HAL_GPIO_Init+0x212>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a4c      	ldr	r2, [pc, #304]	; (800257c <HAL_GPIO_Init+0x314>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d013      	beq.n	8002476 <HAL_GPIO_Init+0x20e>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a4b      	ldr	r2, [pc, #300]	; (8002580 <HAL_GPIO_Init+0x318>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d00d      	beq.n	8002472 <HAL_GPIO_Init+0x20a>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a4a      	ldr	r2, [pc, #296]	; (8002584 <HAL_GPIO_Init+0x31c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d007      	beq.n	800246e <HAL_GPIO_Init+0x206>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a49      	ldr	r2, [pc, #292]	; (8002588 <HAL_GPIO_Init+0x320>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d101      	bne.n	800246a <HAL_GPIO_Init+0x202>
 8002466:	2306      	movs	r3, #6
 8002468:	e00c      	b.n	8002484 <HAL_GPIO_Init+0x21c>
 800246a:	2307      	movs	r3, #7
 800246c:	e00a      	b.n	8002484 <HAL_GPIO_Init+0x21c>
 800246e:	2305      	movs	r3, #5
 8002470:	e008      	b.n	8002484 <HAL_GPIO_Init+0x21c>
 8002472:	2304      	movs	r3, #4
 8002474:	e006      	b.n	8002484 <HAL_GPIO_Init+0x21c>
 8002476:	2303      	movs	r3, #3
 8002478:	e004      	b.n	8002484 <HAL_GPIO_Init+0x21c>
 800247a:	2302      	movs	r3, #2
 800247c:	e002      	b.n	8002484 <HAL_GPIO_Init+0x21c>
 800247e:	2301      	movs	r3, #1
 8002480:	e000      	b.n	8002484 <HAL_GPIO_Init+0x21c>
 8002482:	2300      	movs	r3, #0
 8002484:	69fa      	ldr	r2, [r7, #28]
 8002486:	f002 0203 	and.w	r2, r2, #3
 800248a:	0092      	lsls	r2, r2, #2
 800248c:	4093      	lsls	r3, r2
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4313      	orrs	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002494:	4935      	ldr	r1, [pc, #212]	; (800256c <HAL_GPIO_Init+0x304>)
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	089b      	lsrs	r3, r3, #2
 800249a:	3302      	adds	r3, #2
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024a2:	4b3a      	ldr	r3, [pc, #232]	; (800258c <HAL_GPIO_Init+0x324>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	43db      	mvns	r3, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4013      	ands	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024c6:	4a31      	ldr	r2, [pc, #196]	; (800258c <HAL_GPIO_Init+0x324>)
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024cc:	4b2f      	ldr	r3, [pc, #188]	; (800258c <HAL_GPIO_Init+0x324>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d003      	beq.n	80024f0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024f0:	4a26      	ldr	r2, [pc, #152]	; (800258c <HAL_GPIO_Init+0x324>)
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024f6:	4b25      	ldr	r3, [pc, #148]	; (800258c <HAL_GPIO_Init+0x324>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	43db      	mvns	r3, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4013      	ands	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	4313      	orrs	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800251a:	4a1c      	ldr	r2, [pc, #112]	; (800258c <HAL_GPIO_Init+0x324>)
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002520:	4b1a      	ldr	r3, [pc, #104]	; (800258c <HAL_GPIO_Init+0x324>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	43db      	mvns	r3, r3
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4013      	ands	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d003      	beq.n	8002544 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	4313      	orrs	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002544:	4a11      	ldr	r2, [pc, #68]	; (800258c <HAL_GPIO_Init+0x324>)
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	3301      	adds	r3, #1
 800254e:	61fb      	str	r3, [r7, #28]
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	2b0f      	cmp	r3, #15
 8002554:	f67f ae96 	bls.w	8002284 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002558:	bf00      	nop
 800255a:	bf00      	nop
 800255c:	3724      	adds	r7, #36	; 0x24
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	40023800 	.word	0x40023800
 800256c:	40013800 	.word	0x40013800
 8002570:	40020000 	.word	0x40020000
 8002574:	40020400 	.word	0x40020400
 8002578:	40020800 	.word	0x40020800
 800257c:	40020c00 	.word	0x40020c00
 8002580:	40021000 	.word	0x40021000
 8002584:	40021400 	.word	0x40021400
 8002588:	40021800 	.word	0x40021800
 800258c:	40013c00 	.word	0x40013c00

08002590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	460b      	mov	r3, r1
 800259a:	807b      	strh	r3, [r7, #2]
 800259c:	4613      	mov	r3, r2
 800259e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025a0:	787b      	ldrb	r3, [r7, #1]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025a6:	887a      	ldrh	r2, [r7, #2]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025ac:	e003      	b.n	80025b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025ae:	887b      	ldrh	r3, [r7, #2]
 80025b0:	041a      	lsls	r2, r3, #16
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	619a      	str	r2, [r3, #24]
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b086      	sub	sp, #24
 80025c6:	af02      	add	r7, sp, #8
 80025c8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e108      	b.n	80027e6 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d106      	bne.n	80025f4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f007 fc6c 	bl	8009ecc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2203      	movs	r2, #3
 80025f8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002602:	d102      	bne.n	800260a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f004 f881 	bl	8006716 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6818      	ldr	r0, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	7c1a      	ldrb	r2, [r3, #16]
 800261c:	f88d 2000 	strb.w	r2, [sp]
 8002620:	3304      	adds	r3, #4
 8002622:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002624:	f003 ff60 	bl	80064e8 <USB_CoreInit>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d005      	beq.n	800263a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2202      	movs	r2, #2
 8002632:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e0d5      	b.n	80027e6 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2100      	movs	r1, #0
 8002640:	4618      	mov	r0, r3
 8002642:	f004 f879 	bl	8006738 <USB_SetCurrentMode>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d005      	beq.n	8002658 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2202      	movs	r2, #2
 8002650:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e0c6      	b.n	80027e6 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002658:	2300      	movs	r3, #0
 800265a:	73fb      	strb	r3, [r7, #15]
 800265c:	e04a      	b.n	80026f4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800265e:	7bfa      	ldrb	r2, [r7, #15]
 8002660:	6879      	ldr	r1, [r7, #4]
 8002662:	4613      	mov	r3, r2
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	4413      	add	r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	440b      	add	r3, r1
 800266c:	3315      	adds	r3, #21
 800266e:	2201      	movs	r2, #1
 8002670:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002672:	7bfa      	ldrb	r2, [r7, #15]
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	4613      	mov	r3, r2
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	4413      	add	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	440b      	add	r3, r1
 8002680:	3314      	adds	r3, #20
 8002682:	7bfa      	ldrb	r2, [r7, #15]
 8002684:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002686:	7bfa      	ldrb	r2, [r7, #15]
 8002688:	7bfb      	ldrb	r3, [r7, #15]
 800268a:	b298      	uxth	r0, r3
 800268c:	6879      	ldr	r1, [r7, #4]
 800268e:	4613      	mov	r3, r2
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	4413      	add	r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	440b      	add	r3, r1
 8002698:	332e      	adds	r3, #46	; 0x2e
 800269a:	4602      	mov	r2, r0
 800269c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800269e:	7bfa      	ldrb	r2, [r7, #15]
 80026a0:	6879      	ldr	r1, [r7, #4]
 80026a2:	4613      	mov	r3, r2
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	4413      	add	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	440b      	add	r3, r1
 80026ac:	3318      	adds	r3, #24
 80026ae:	2200      	movs	r2, #0
 80026b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80026b2:	7bfa      	ldrb	r2, [r7, #15]
 80026b4:	6879      	ldr	r1, [r7, #4]
 80026b6:	4613      	mov	r3, r2
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	4413      	add	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	440b      	add	r3, r1
 80026c0:	331c      	adds	r3, #28
 80026c2:	2200      	movs	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80026c6:	7bfa      	ldrb	r2, [r7, #15]
 80026c8:	6879      	ldr	r1, [r7, #4]
 80026ca:	4613      	mov	r3, r2
 80026cc:	00db      	lsls	r3, r3, #3
 80026ce:	4413      	add	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	440b      	add	r3, r1
 80026d4:	3320      	adds	r3, #32
 80026d6:	2200      	movs	r2, #0
 80026d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026da:	7bfa      	ldrb	r2, [r7, #15]
 80026dc:	6879      	ldr	r1, [r7, #4]
 80026de:	4613      	mov	r3, r2
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	4413      	add	r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	440b      	add	r3, r1
 80026e8:	3324      	adds	r3, #36	; 0x24
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026ee:	7bfb      	ldrb	r3, [r7, #15]
 80026f0:	3301      	adds	r3, #1
 80026f2:	73fb      	strb	r3, [r7, #15]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	791b      	ldrb	r3, [r3, #4]
 80026f8:	7bfa      	ldrb	r2, [r7, #15]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d3af      	bcc.n	800265e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026fe:	2300      	movs	r3, #0
 8002700:	73fb      	strb	r3, [r7, #15]
 8002702:	e044      	b.n	800278e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002704:	7bfa      	ldrb	r2, [r7, #15]
 8002706:	6879      	ldr	r1, [r7, #4]
 8002708:	4613      	mov	r3, r2
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	4413      	add	r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	440b      	add	r3, r1
 8002712:	f203 2355 	addw	r3, r3, #597	; 0x255
 8002716:	2200      	movs	r2, #0
 8002718:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800271a:	7bfa      	ldrb	r2, [r7, #15]
 800271c:	6879      	ldr	r1, [r7, #4]
 800271e:	4613      	mov	r3, r2
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	4413      	add	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	440b      	add	r3, r1
 8002728:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800272c:	7bfa      	ldrb	r2, [r7, #15]
 800272e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002730:	7bfa      	ldrb	r2, [r7, #15]
 8002732:	6879      	ldr	r1, [r7, #4]
 8002734:	4613      	mov	r3, r2
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	4413      	add	r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	440b      	add	r3, r1
 800273e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002742:	2200      	movs	r2, #0
 8002744:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002746:	7bfa      	ldrb	r2, [r7, #15]
 8002748:	6879      	ldr	r1, [r7, #4]
 800274a:	4613      	mov	r3, r2
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	4413      	add	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	440b      	add	r3, r1
 8002754:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800275c:	7bfa      	ldrb	r2, [r7, #15]
 800275e:	6879      	ldr	r1, [r7, #4]
 8002760:	4613      	mov	r3, r2
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	4413      	add	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	440b      	add	r3, r1
 800276a:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800276e:	2200      	movs	r2, #0
 8002770:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002772:	7bfa      	ldrb	r2, [r7, #15]
 8002774:	6879      	ldr	r1, [r7, #4]
 8002776:	4613      	mov	r3, r2
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	4413      	add	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	440b      	add	r3, r1
 8002780:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002788:	7bfb      	ldrb	r3, [r7, #15]
 800278a:	3301      	adds	r3, #1
 800278c:	73fb      	strb	r3, [r7, #15]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	791b      	ldrb	r3, [r3, #4]
 8002792:	7bfa      	ldrb	r2, [r7, #15]
 8002794:	429a      	cmp	r2, r3
 8002796:	d3b5      	bcc.n	8002704 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6818      	ldr	r0, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	7c1a      	ldrb	r2, [r3, #16]
 80027a0:	f88d 2000 	strb.w	r2, [sp]
 80027a4:	3304      	adds	r3, #4
 80027a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027a8:	f004 f812 	bl	80067d0 <USB_DevInit>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d005      	beq.n	80027be <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2202      	movs	r2, #2
 80027b6:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e013      	b.n	80027e6 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	7b1b      	ldrb	r3, [r3, #12]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d102      	bne.n	80027da <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f001 f96f 	bl	8003ab8 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f005 f84f 	bl	8007882 <USB_DevDisconnect>

  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b084      	sub	sp, #16
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002802:	2b01      	cmp	r3, #1
 8002804:	d101      	bne.n	800280a <HAL_PCD_Start+0x1c>
 8002806:	2302      	movs	r3, #2
 8002808:	e022      	b.n	8002850 <HAL_PCD_Start+0x62>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800281a:	2b00      	cmp	r3, #0
 800281c:	d009      	beq.n	8002832 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002822:	2b01      	cmp	r3, #1
 8002824:	d105      	bne.n	8002832 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f003 ff5c 	bl	80066f4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f004 fffd 	bl	8007840 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002858:	b590      	push	{r4, r7, lr}
 800285a:	b08d      	sub	sp, #52	; 0x34
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002866:	6a3b      	ldr	r3, [r7, #32]
 8002868:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f005 f8bb 	bl	80079ea <USB_GetMode>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	f040 84b9 	bne.w	80031ee <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4618      	mov	r0, r3
 8002882:	f005 f81f 	bl	80078c4 <USB_ReadInterrupts>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	f000 84af 	beq.w	80031ec <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	0a1b      	lsrs	r3, r3, #8
 8002898:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f005 f80c 	bl	80078c4 <USB_ReadInterrupts>
 80028ac:	4603      	mov	r3, r0
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d107      	bne.n	80028c6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	695a      	ldr	r2, [r3, #20]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f002 0202 	and.w	r2, r2, #2
 80028c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f004 fffa 	bl	80078c4 <USB_ReadInterrupts>
 80028d0:	4603      	mov	r3, r0
 80028d2:	f003 0310 	and.w	r3, r3, #16
 80028d6:	2b10      	cmp	r3, #16
 80028d8:	d161      	bne.n	800299e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	699a      	ldr	r2, [r3, #24]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 0210 	bic.w	r2, r2, #16
 80028e8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80028ea:	6a3b      	ldr	r3, [r7, #32]
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	f003 020f 	and.w	r2, r3, #15
 80028f6:	4613      	mov	r3, r2
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	4413      	add	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	4413      	add	r3, r2
 8002906:	3304      	adds	r3, #4
 8002908:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	0c5b      	lsrs	r3, r3, #17
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	2b02      	cmp	r3, #2
 8002914:	d124      	bne.n	8002960 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800291c:	4013      	ands	r3, r2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d035      	beq.n	800298e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	091b      	lsrs	r3, r3, #4
 800292a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800292c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002930:	b29b      	uxth	r3, r3
 8002932:	461a      	mov	r2, r3
 8002934:	6a38      	ldr	r0, [r7, #32]
 8002936:	f004 fe31 	bl	800759c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	68da      	ldr	r2, [r3, #12]
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	091b      	lsrs	r3, r3, #4
 8002942:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002946:	441a      	add	r2, r3
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	695a      	ldr	r2, [r3, #20]
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	091b      	lsrs	r3, r3, #4
 8002954:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002958:	441a      	add	r2, r3
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	615a      	str	r2, [r3, #20]
 800295e:	e016      	b.n	800298e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	0c5b      	lsrs	r3, r3, #17
 8002964:	f003 030f 	and.w	r3, r3, #15
 8002968:	2b06      	cmp	r3, #6
 800296a:	d110      	bne.n	800298e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002972:	2208      	movs	r2, #8
 8002974:	4619      	mov	r1, r3
 8002976:	6a38      	ldr	r0, [r7, #32]
 8002978:	f004 fe10 	bl	800759c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	695a      	ldr	r2, [r3, #20]
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	091b      	lsrs	r3, r3, #4
 8002984:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002988:	441a      	add	r2, r3
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	699a      	ldr	r2, [r3, #24]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f042 0210 	orr.w	r2, r2, #16
 800299c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f004 ff8e 	bl	80078c4 <USB_ReadInterrupts>
 80029a8:	4603      	mov	r3, r0
 80029aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029ae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80029b2:	f040 80a7 	bne.w	8002b04 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80029b6:	2300      	movs	r3, #0
 80029b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f004 ff93 	bl	80078ea <USB_ReadDevAllOutEpInterrupt>
 80029c4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80029c6:	e099      	b.n	8002afc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80029c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f000 808e 	beq.w	8002af0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029da:	b2d2      	uxtb	r2, r2
 80029dc:	4611      	mov	r1, r2
 80029de:	4618      	mov	r0, r3
 80029e0:	f004 ffb7 	bl	8007952 <USB_ReadDevOutEPInterrupt>
 80029e4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00c      	beq.n	8002a0a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f2:	015a      	lsls	r2, r3, #5
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	4413      	add	r3, r2
 80029f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029fc:	461a      	mov	r2, r3
 80029fe:	2301      	movs	r3, #1
 8002a00:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002a02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 fed1 	bl	80037ac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00c      	beq.n	8002a2e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a16:	015a      	lsls	r2, r3, #5
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a20:	461a      	mov	r2, r3
 8002a22:	2308      	movs	r3, #8
 8002a24:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002a26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 ffa7 	bl	800397c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	f003 0310 	and.w	r3, r3, #16
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d008      	beq.n	8002a4a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3a:	015a      	lsls	r2, r3, #5
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	4413      	add	r3, r2
 8002a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a44:	461a      	mov	r2, r3
 8002a46:	2310      	movs	r3, #16
 8002a48:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d030      	beq.n	8002ab6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002a54:	6a3b      	ldr	r3, [r7, #32]
 8002a56:	695b      	ldr	r3, [r3, #20]
 8002a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a5c:	2b80      	cmp	r3, #128	; 0x80
 8002a5e:	d109      	bne.n	8002a74 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	69fa      	ldr	r2, [r7, #28]
 8002a6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a72:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a76:	4613      	mov	r3, r2
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	4413      	add	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	4413      	add	r3, r2
 8002a86:	3304      	adds	r3, #4
 8002a88:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	78db      	ldrb	r3, [r3, #3]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d108      	bne.n	8002aa4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	2200      	movs	r2, #0
 8002a96:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f007 fb30 	bl	800a104 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa6:	015a      	lsls	r2, r3, #5
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	4413      	add	r3, r2
 8002aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	f003 0320 	and.w	r3, r3, #32
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d008      	beq.n	8002ad2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	015a      	lsls	r2, r3, #5
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002acc:	461a      	mov	r2, r3
 8002ace:	2320      	movs	r3, #32
 8002ad0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d009      	beq.n	8002af0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ade:	015a      	lsls	r2, r3, #5
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ae8:	461a      	mov	r2, r3
 8002aea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002aee:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	3301      	adds	r3, #1
 8002af4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af8:	085b      	lsrs	r3, r3, #1
 8002afa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f47f af62 	bne.w	80029c8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f004 fedb 	bl	80078c4 <USB_ReadInterrupts>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b18:	f040 80db 	bne.w	8002cd2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f004 fefc 	bl	800791e <USB_ReadDevAllInEpInterrupt>
 8002b26:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002b2c:	e0cd      	b.n	8002cca <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f000 80c2 	beq.w	8002cbe <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b40:	b2d2      	uxtb	r2, r2
 8002b42:	4611      	mov	r1, r2
 8002b44:	4618      	mov	r0, r3
 8002b46:	f004 ff22 	bl	800798e <USB_ReadDevInEPInterrupt>
 8002b4a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d057      	beq.n	8002c06 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b58:	f003 030f 	and.w	r3, r3, #15
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	69f9      	ldr	r1, [r7, #28]
 8002b72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002b76:	4013      	ands	r3, r2
 8002b78:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	015a      	lsls	r2, r3, #5
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	4413      	add	r3, r2
 8002b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b86:	461a      	mov	r2, r3
 8002b88:	2301      	movs	r3, #1
 8002b8a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	799b      	ldrb	r3, [r3, #6]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d132      	bne.n	8002bfa <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002b94:	6879      	ldr	r1, [r7, #4]
 8002b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b98:	4613      	mov	r3, r2
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	4413      	add	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	440b      	add	r3, r1
 8002ba2:	3320      	adds	r3, #32
 8002ba4:	6819      	ldr	r1, [r3, #0]
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002baa:	4613      	mov	r3, r2
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	4413      	add	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	4403      	add	r3, r0
 8002bb4:	331c      	adds	r3, #28
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4419      	add	r1, r3
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	4413      	add	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	4403      	add	r3, r0
 8002bc8:	3320      	adds	r3, #32
 8002bca:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d113      	bne.n	8002bfa <HAL_PCD_IRQHandler+0x3a2>
 8002bd2:	6879      	ldr	r1, [r7, #4]
 8002bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	4413      	add	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	440b      	add	r3, r1
 8002be0:	3324      	adds	r3, #36	; 0x24
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d108      	bne.n	8002bfa <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6818      	ldr	r0, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	f004 ff29 	bl	8007a4c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	4619      	mov	r1, r3
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f007 f9fa 	bl	8009ffa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	f003 0308 	and.w	r3, r3, #8
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d008      	beq.n	8002c22 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c12:	015a      	lsls	r2, r3, #5
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	4413      	add	r3, r2
 8002c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	2308      	movs	r3, #8
 8002c20:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	f003 0310 	and.w	r3, r3, #16
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d008      	beq.n	8002c3e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	015a      	lsls	r2, r3, #5
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	4413      	add	r3, r2
 8002c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c38:	461a      	mov	r2, r3
 8002c3a:	2310      	movs	r3, #16
 8002c3c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d008      	beq.n	8002c5a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4a:	015a      	lsls	r2, r3, #5
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	4413      	add	r3, r2
 8002c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c54:	461a      	mov	r2, r3
 8002c56:	2340      	movs	r3, #64	; 0x40
 8002c58:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d023      	beq.n	8002cac <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002c64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c66:	6a38      	ldr	r0, [r7, #32]
 8002c68:	f003 ff10 	bl	8006a8c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c6e:	4613      	mov	r3, r2
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	4413      	add	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	3310      	adds	r3, #16
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	78db      	ldrb	r3, [r3, #3]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d108      	bne.n	8002c9a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	4619      	mov	r1, r3
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f007 fa47 	bl	800a128 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	015a      	lsls	r2, r3, #5
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	2302      	movs	r3, #2
 8002caa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002cb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 fcea 	bl	8003692 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc6:	085b      	lsrs	r3, r3, #1
 8002cc8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f47f af2e 	bne.w	8002b2e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f004 fdf4 	bl	80078c4 <USB_ReadInterrupts>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ce2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ce6:	d122      	bne.n	8002d2e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	69fa      	ldr	r2, [r7, #28]
 8002cf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cf6:	f023 0301 	bic.w	r3, r3, #1
 8002cfa:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d108      	bne.n	8002d18 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002d0e:	2100      	movs	r1, #0
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f007 fbc1 	bl	800a498 <HAL_PCDEx_LPM_Callback>
 8002d16:	e002      	b.n	8002d1e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f007 f9e5 	bl	800a0e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	695a      	ldr	r2, [r3, #20]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002d2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f004 fdc6 	bl	80078c4 <USB_ReadInterrupts>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d42:	d112      	bne.n	8002d6a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d102      	bne.n	8002d5a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f007 f9a1 	bl	800a09c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	695a      	ldr	r2, [r3, #20]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002d68:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f004 fda8 	bl	80078c4 <USB_ReadInterrupts>
 8002d74:	4603      	mov	r3, r0
 8002d76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d7e:	d121      	bne.n	8002dc4 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	695a      	ldr	r2, [r3, #20]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002d8e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d111      	bne.n	8002dbe <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da8:	089b      	lsrs	r3, r3, #2
 8002daa:	f003 020f 	and.w	r2, r3, #15
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f8c3 24d0 	str.w	r2, [r3, #1232]	; 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002db4:	2101      	movs	r1, #1
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f007 fb6e 	bl	800a498 <HAL_PCDEx_LPM_Callback>
 8002dbc:	e002      	b.n	8002dc4 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f007 f96c 	bl	800a09c <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f004 fd7b 	bl	80078c4 <USB_ReadInterrupts>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dd8:	f040 80b7 	bne.w	8002f4a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	69fa      	ldr	r2, [r7, #28]
 8002de6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dea:	f023 0301 	bic.w	r3, r3, #1
 8002dee:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2110      	movs	r1, #16
 8002df6:	4618      	mov	r0, r3
 8002df8:	f003 fe48 	bl	8006a8c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e00:	e046      	b.n	8002e90 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e04:	015a      	lsls	r2, r3, #5
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	4413      	add	r3, r2
 8002e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e0e:	461a      	mov	r2, r3
 8002e10:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e14:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e18:	015a      	lsls	r2, r3, #5
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e26:	0151      	lsls	r1, r2, #5
 8002e28:	69fa      	ldr	r2, [r7, #28]
 8002e2a:	440a      	add	r2, r1
 8002e2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002e30:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e34:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e38:	015a      	lsls	r2, r3, #5
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e42:	461a      	mov	r2, r3
 8002e44:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e48:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e4c:	015a      	lsls	r2, r3, #5
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	4413      	add	r3, r2
 8002e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e5a:	0151      	lsls	r1, r2, #5
 8002e5c:	69fa      	ldr	r2, [r7, #28]
 8002e5e:	440a      	add	r2, r1
 8002e60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e64:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e68:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6c:	015a      	lsls	r2, r3, #5
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	4413      	add	r3, r2
 8002e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e7a:	0151      	lsls	r1, r2, #5
 8002e7c:	69fa      	ldr	r2, [r7, #28]
 8002e7e:	440a      	add	r2, r1
 8002e80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e84:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002e88:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	791b      	ldrb	r3, [r3, #4]
 8002e94:	461a      	mov	r2, r3
 8002e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d3b2      	bcc.n	8002e02 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	69fa      	ldr	r2, [r7, #28]
 8002ea6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002eaa:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002eae:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	7bdb      	ldrb	r3, [r3, #15]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d016      	beq.n	8002ee6 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ec2:	69fa      	ldr	r2, [r7, #28]
 8002ec4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ec8:	f043 030b 	orr.w	r3, r3, #11
 8002ecc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed8:	69fa      	ldr	r2, [r7, #28]
 8002eda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ede:	f043 030b 	orr.w	r3, r3, #11
 8002ee2:	6453      	str	r3, [r2, #68]	; 0x44
 8002ee4:	e015      	b.n	8002f12 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	69fa      	ldr	r2, [r7, #28]
 8002ef0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ef4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ef8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002efc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	69fa      	ldr	r2, [r7, #28]
 8002f08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f0c:	f043 030b 	orr.w	r3, r3, #11
 8002f10:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	69fa      	ldr	r2, [r7, #28]
 8002f1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f20:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002f24:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6818      	ldr	r0, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f34:	461a      	mov	r2, r3
 8002f36:	f004 fd89 	bl	8007a4c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	695a      	ldr	r2, [r3, #20]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002f48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f004 fcb8 	bl	80078c4 <USB_ReadInterrupts>
 8002f54:	4603      	mov	r3, r0
 8002f56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f5e:	d123      	bne.n	8002fa8 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f004 fd4e 	bl	8007a06 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f003 fe05 	bl	8006b7e <USB_GetDevSpeed>
 8002f74:	4603      	mov	r3, r0
 8002f76:	461a      	mov	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681c      	ldr	r4, [r3, #0]
 8002f80:	f000 fea4 	bl	8003ccc <HAL_RCC_GetHCLKFreq>
 8002f84:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	4620      	mov	r0, r4
 8002f8e:	f003 fb0f 	bl	80065b0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f007 f859 	bl	800a04a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	695a      	ldr	r2, [r3, #20]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002fa6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f004 fc89 	bl	80078c4 <USB_ReadInterrupts>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	f003 0308 	and.w	r3, r3, #8
 8002fb8:	2b08      	cmp	r3, #8
 8002fba:	d10a      	bne.n	8002fd2 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f007 f836 	bl	800a02e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	695a      	ldr	r2, [r3, #20]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f002 0208 	and.w	r2, r2, #8
 8002fd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f004 fc74 	bl	80078c4 <USB_ReadInterrupts>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe2:	2b80      	cmp	r3, #128	; 0x80
 8002fe4:	d123      	bne.n	800302e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002fe6:	6a3b      	ldr	r3, [r7, #32]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fee:	6a3b      	ldr	r3, [r7, #32]
 8002ff0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ff6:	e014      	b.n	8003022 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002ff8:	6879      	ldr	r1, [r7, #4]
 8002ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	4413      	add	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	f203 2357 	addw	r3, r3, #599	; 0x257
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d105      	bne.n	800301c <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	b2db      	uxtb	r3, r3
 8003014:	4619      	mov	r1, r3
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 fb0a 	bl	8003630 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800301c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301e:	3301      	adds	r3, #1
 8003020:	627b      	str	r3, [r7, #36]	; 0x24
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	791b      	ldrb	r3, [r3, #4]
 8003026:	461a      	mov	r2, r3
 8003028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302a:	4293      	cmp	r3, r2
 800302c:	d3e4      	bcc.n	8002ff8 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4618      	mov	r0, r3
 8003034:	f004 fc46 	bl	80078c4 <USB_ReadInterrupts>
 8003038:	4603      	mov	r3, r0
 800303a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800303e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003042:	d13c      	bne.n	80030be <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003044:	2301      	movs	r3, #1
 8003046:	627b      	str	r3, [r7, #36]	; 0x24
 8003048:	e02b      	b.n	80030a2 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304c:	015a      	lsls	r2, r3, #5
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	4413      	add	r3, r2
 8003052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800305a:	6879      	ldr	r1, [r7, #4]
 800305c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800305e:	4613      	mov	r3, r2
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	4413      	add	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	440b      	add	r3, r1
 8003068:	3318      	adds	r3, #24
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d115      	bne.n	800309c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003070:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003072:	2b00      	cmp	r3, #0
 8003074:	da12      	bge.n	800309c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800307a:	4613      	mov	r3, r2
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	4413      	add	r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	440b      	add	r3, r1
 8003084:	3317      	adds	r3, #23
 8003086:	2201      	movs	r2, #1
 8003088:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800308a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308c:	b2db      	uxtb	r3, r3
 800308e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003092:	b2db      	uxtb	r3, r3
 8003094:	4619      	mov	r1, r3
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 faca 	bl	8003630 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309e:	3301      	adds	r3, #1
 80030a0:	627b      	str	r3, [r7, #36]	; 0x24
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	791b      	ldrb	r3, [r3, #4]
 80030a6:	461a      	mov	r2, r3
 80030a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d3cd      	bcc.n	800304a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	695a      	ldr	r2, [r3, #20]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80030bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f004 fbfe 	bl	80078c4 <USB_ReadInterrupts>
 80030c8:	4603      	mov	r3, r0
 80030ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030d2:	d156      	bne.n	8003182 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030d4:	2301      	movs	r3, #1
 80030d6:	627b      	str	r3, [r7, #36]	; 0x24
 80030d8:	e045      	b.n	8003166 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80030da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030dc:	015a      	lsls	r2, r3, #5
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	4413      	add	r3, r2
 80030e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80030ea:	6879      	ldr	r1, [r7, #4]
 80030ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ee:	4613      	mov	r3, r2
 80030f0:	00db      	lsls	r3, r3, #3
 80030f2:	4413      	add	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	440b      	add	r3, r1
 80030f8:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d12e      	bne.n	8003160 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003102:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003104:	2b00      	cmp	r3, #0
 8003106:	da2b      	bge.n	8003160 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8003114:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003118:	429a      	cmp	r2, r3
 800311a:	d121      	bne.n	8003160 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800311c:	6879      	ldr	r1, [r7, #4]
 800311e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003120:	4613      	mov	r3, r2
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	4413      	add	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	440b      	add	r3, r1
 800312a:	f203 2357 	addw	r3, r3, #599	; 0x257
 800312e:	2201      	movs	r2, #1
 8003130:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003132:	6a3b      	ldr	r3, [r7, #32]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800313a:	6a3b      	ldr	r3, [r7, #32]
 800313c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800313e:	6a3b      	ldr	r3, [r7, #32]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10a      	bne.n	8003160 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	69fa      	ldr	r2, [r7, #28]
 8003154:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003158:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800315c:	6053      	str	r3, [r2, #4]
            break;
 800315e:	e008      	b.n	8003172 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003162:	3301      	adds	r3, #1
 8003164:	627b      	str	r3, [r7, #36]	; 0x24
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	791b      	ldrb	r3, [r3, #4]
 800316a:	461a      	mov	r2, r3
 800316c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316e:	4293      	cmp	r3, r2
 8003170:	d3b3      	bcc.n	80030da <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	695a      	ldr	r2, [r3, #20]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003180:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4618      	mov	r0, r3
 8003188:	f004 fb9c 	bl	80078c4 <USB_ReadInterrupts>
 800318c:	4603      	mov	r3, r0
 800318e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003196:	d10a      	bne.n	80031ae <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f006 ffd7 	bl	800a14c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	695a      	ldr	r2, [r3, #20]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80031ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f004 fb86 	bl	80078c4 <USB_ReadInterrupts>
 80031b8:	4603      	mov	r3, r0
 80031ba:	f003 0304 	and.w	r3, r3, #4
 80031be:	2b04      	cmp	r3, #4
 80031c0:	d115      	bne.n	80031ee <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	f003 0304 	and.w	r3, r3, #4
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d002      	beq.n	80031da <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f006 ffc7 	bl	800a168 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	6859      	ldr	r1, [r3, #4]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	605a      	str	r2, [r3, #4]
 80031ea:	e000      	b.n	80031ee <HAL_PCD_IRQHandler+0x996>
      return;
 80031ec:	bf00      	nop
    }
  }
}
 80031ee:	3734      	adds	r7, #52	; 0x34
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd90      	pop	{r4, r7, pc}

080031f4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	460b      	mov	r3, r1
 80031fe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003206:	2b01      	cmp	r3, #1
 8003208:	d101      	bne.n	800320e <HAL_PCD_SetAddress+0x1a>
 800320a:	2302      	movs	r3, #2
 800320c:	e012      	b.n	8003234 <HAL_PCD_SetAddress+0x40>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	78fa      	ldrb	r2, [r7, #3]
 800321a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	78fa      	ldrb	r2, [r7, #3]
 8003222:	4611      	mov	r1, r2
 8003224:	4618      	mov	r0, r3
 8003226:	f004 fae5 	bl	80077f4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3708      	adds	r7, #8
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	4608      	mov	r0, r1
 8003246:	4611      	mov	r1, r2
 8003248:	461a      	mov	r2, r3
 800324a:	4603      	mov	r3, r0
 800324c:	70fb      	strb	r3, [r7, #3]
 800324e:	460b      	mov	r3, r1
 8003250:	803b      	strh	r3, [r7, #0]
 8003252:	4613      	mov	r3, r2
 8003254:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003256:	2300      	movs	r3, #0
 8003258:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800325a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800325e:	2b00      	cmp	r3, #0
 8003260:	da0f      	bge.n	8003282 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003262:	78fb      	ldrb	r3, [r7, #3]
 8003264:	f003 020f 	and.w	r2, r3, #15
 8003268:	4613      	mov	r3, r2
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	4413      	add	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	3310      	adds	r3, #16
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	4413      	add	r3, r2
 8003276:	3304      	adds	r3, #4
 8003278:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2201      	movs	r2, #1
 800327e:	705a      	strb	r2, [r3, #1]
 8003280:	e00f      	b.n	80032a2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003282:	78fb      	ldrb	r3, [r7, #3]
 8003284:	f003 020f 	and.w	r2, r3, #15
 8003288:	4613      	mov	r3, r2
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	4413      	add	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	4413      	add	r3, r2
 8003298:	3304      	adds	r3, #4
 800329a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80032a2:	78fb      	ldrb	r3, [r7, #3]
 80032a4:	f003 030f 	and.w	r3, r3, #15
 80032a8:	b2da      	uxtb	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80032ae:	883b      	ldrh	r3, [r7, #0]
 80032b0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	78ba      	ldrb	r2, [r7, #2]
 80032bc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	785b      	ldrb	r3, [r3, #1]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d004      	beq.n	80032d0 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80032d0:	78bb      	ldrb	r3, [r7, #2]
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d102      	bne.n	80032dc <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d101      	bne.n	80032ea <HAL_PCD_EP_Open+0xae>
 80032e6:	2302      	movs	r3, #2
 80032e8:	e00e      	b.n	8003308 <HAL_PCD_EP_Open+0xcc>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68f9      	ldr	r1, [r7, #12]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f003 fc65 	bl	8006bc8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8003306:	7afb      	ldrb	r3, [r7, #11]
}
 8003308:	4618      	mov	r0, r3
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	460b      	mov	r3, r1
 800331a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800331c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003320:	2b00      	cmp	r3, #0
 8003322:	da0f      	bge.n	8003344 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003324:	78fb      	ldrb	r3, [r7, #3]
 8003326:	f003 020f 	and.w	r2, r3, #15
 800332a:	4613      	mov	r3, r2
 800332c:	00db      	lsls	r3, r3, #3
 800332e:	4413      	add	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	3310      	adds	r3, #16
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	4413      	add	r3, r2
 8003338:	3304      	adds	r3, #4
 800333a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2201      	movs	r2, #1
 8003340:	705a      	strb	r2, [r3, #1]
 8003342:	e00f      	b.n	8003364 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003344:	78fb      	ldrb	r3, [r7, #3]
 8003346:	f003 020f 	and.w	r2, r3, #15
 800334a:	4613      	mov	r3, r2
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	4413      	add	r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	4413      	add	r3, r2
 800335a:	3304      	adds	r3, #4
 800335c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003364:	78fb      	ldrb	r3, [r7, #3]
 8003366:	f003 030f 	and.w	r3, r3, #15
 800336a:	b2da      	uxtb	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003376:	2b01      	cmp	r3, #1
 8003378:	d101      	bne.n	800337e <HAL_PCD_EP_Close+0x6e>
 800337a:	2302      	movs	r3, #2
 800337c:	e00e      	b.n	800339c <HAL_PCD_EP_Close+0x8c>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68f9      	ldr	r1, [r7, #12]
 800338c:	4618      	mov	r0, r3
 800338e:	f003 fca3 	bl	8006cd8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3710      	adds	r7, #16
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	607a      	str	r2, [r7, #4]
 80033ae:	603b      	str	r3, [r7, #0]
 80033b0:	460b      	mov	r3, r1
 80033b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033b4:	7afb      	ldrb	r3, [r7, #11]
 80033b6:	f003 020f 	and.w	r2, r3, #15
 80033ba:	4613      	mov	r3, r2
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	4413      	add	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	4413      	add	r3, r2
 80033ca:	3304      	adds	r3, #4
 80033cc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	2200      	movs	r2, #0
 80033de:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	2200      	movs	r2, #0
 80033e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033e6:	7afb      	ldrb	r3, [r7, #11]
 80033e8:	f003 030f 	and.w	r3, r3, #15
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	799b      	ldrb	r3, [r3, #6]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d102      	bne.n	8003400 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6818      	ldr	r0, [r3, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	799b      	ldrb	r3, [r3, #6]
 8003408:	461a      	mov	r2, r3
 800340a:	6979      	ldr	r1, [r7, #20]
 800340c:	f003 fd40 	bl	8006e90 <USB_EPStartXfer>

  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3718      	adds	r7, #24
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800341a:	b480      	push	{r7}
 800341c:	b083      	sub	sp, #12
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
 8003422:	460b      	mov	r3, r1
 8003424:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003426:	78fb      	ldrb	r3, [r7, #3]
 8003428:	f003 020f 	and.w	r2, r3, #15
 800342c:	6879      	ldr	r1, [r7, #4]
 800342e:	4613      	mov	r3, r2
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	4413      	add	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	440b      	add	r3, r1
 8003438:	f503 731a 	add.w	r3, r3, #616	; 0x268
 800343c:	681b      	ldr	r3, [r3, #0]
}
 800343e:	4618      	mov	r0, r3
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr

0800344a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b086      	sub	sp, #24
 800344e:	af00      	add	r7, sp, #0
 8003450:	60f8      	str	r0, [r7, #12]
 8003452:	607a      	str	r2, [r7, #4]
 8003454:	603b      	str	r3, [r7, #0]
 8003456:	460b      	mov	r3, r1
 8003458:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800345a:	7afb      	ldrb	r3, [r7, #11]
 800345c:	f003 020f 	and.w	r2, r3, #15
 8003460:	4613      	mov	r3, r2
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	4413      	add	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	3310      	adds	r3, #16
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	4413      	add	r3, r2
 800346e:	3304      	adds	r3, #4
 8003470:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	2200      	movs	r2, #0
 8003482:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	2201      	movs	r2, #1
 8003488:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800348a:	7afb      	ldrb	r3, [r7, #11]
 800348c:	f003 030f 	and.w	r3, r3, #15
 8003490:	b2da      	uxtb	r2, r3
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	799b      	ldrb	r3, [r3, #6]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d102      	bne.n	80034a4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6818      	ldr	r0, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	799b      	ldrb	r3, [r3, #6]
 80034ac:	461a      	mov	r2, r3
 80034ae:	6979      	ldr	r1, [r7, #20]
 80034b0:	f003 fcee 	bl	8006e90 <USB_EPStartXfer>

  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3718      	adds	r7, #24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b084      	sub	sp, #16
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
 80034c6:	460b      	mov	r3, r1
 80034c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80034ca:	78fb      	ldrb	r3, [r7, #3]
 80034cc:	f003 030f 	and.w	r3, r3, #15
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	7912      	ldrb	r2, [r2, #4]
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d901      	bls.n	80034dc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e04f      	b.n	800357c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80034dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	da0f      	bge.n	8003504 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034e4:	78fb      	ldrb	r3, [r7, #3]
 80034e6:	f003 020f 	and.w	r2, r3, #15
 80034ea:	4613      	mov	r3, r2
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	4413      	add	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	3310      	adds	r3, #16
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	4413      	add	r3, r2
 80034f8:	3304      	adds	r3, #4
 80034fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2201      	movs	r2, #1
 8003500:	705a      	strb	r2, [r3, #1]
 8003502:	e00d      	b.n	8003520 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003504:	78fa      	ldrb	r2, [r7, #3]
 8003506:	4613      	mov	r3, r2
 8003508:	00db      	lsls	r3, r3, #3
 800350a:	4413      	add	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	4413      	add	r3, r2
 8003516:	3304      	adds	r3, #4
 8003518:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2201      	movs	r2, #1
 8003524:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003526:	78fb      	ldrb	r3, [r7, #3]
 8003528:	f003 030f 	and.w	r3, r3, #15
 800352c:	b2da      	uxtb	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003538:	2b01      	cmp	r3, #1
 800353a:	d101      	bne.n	8003540 <HAL_PCD_EP_SetStall+0x82>
 800353c:	2302      	movs	r3, #2
 800353e:	e01d      	b.n	800357c <HAL_PCD_EP_SetStall+0xbe>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68f9      	ldr	r1, [r7, #12]
 800354e:	4618      	mov	r0, r3
 8003550:	f004 f87c 	bl	800764c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003554:	78fb      	ldrb	r3, [r7, #3]
 8003556:	f003 030f 	and.w	r3, r3, #15
 800355a:	2b00      	cmp	r3, #0
 800355c:	d109      	bne.n	8003572 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6818      	ldr	r0, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	7999      	ldrb	r1, [r3, #6]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800356c:	461a      	mov	r2, r3
 800356e:	f004 fa6d 	bl	8007a4c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	460b      	mov	r3, r1
 800358e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003590:	78fb      	ldrb	r3, [r7, #3]
 8003592:	f003 030f 	and.w	r3, r3, #15
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	7912      	ldrb	r2, [r2, #4]
 800359a:	4293      	cmp	r3, r2
 800359c:	d901      	bls.n	80035a2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e042      	b.n	8003628 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	da0f      	bge.n	80035ca <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035aa:	78fb      	ldrb	r3, [r7, #3]
 80035ac:	f003 020f 	and.w	r2, r3, #15
 80035b0:	4613      	mov	r3, r2
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	4413      	add	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	3310      	adds	r3, #16
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	4413      	add	r3, r2
 80035be:	3304      	adds	r3, #4
 80035c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2201      	movs	r2, #1
 80035c6:	705a      	strb	r2, [r3, #1]
 80035c8:	e00f      	b.n	80035ea <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035ca:	78fb      	ldrb	r3, [r7, #3]
 80035cc:	f003 020f 	and.w	r2, r3, #15
 80035d0:	4613      	mov	r3, r2
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	4413      	add	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	4413      	add	r3, r2
 80035e0:	3304      	adds	r3, #4
 80035e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035f0:	78fb      	ldrb	r3, [r7, #3]
 80035f2:	f003 030f 	and.w	r3, r3, #15
 80035f6:	b2da      	uxtb	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003602:	2b01      	cmp	r3, #1
 8003604:	d101      	bne.n	800360a <HAL_PCD_EP_ClrStall+0x86>
 8003606:	2302      	movs	r3, #2
 8003608:	e00e      	b.n	8003628 <HAL_PCD_EP_ClrStall+0xa4>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68f9      	ldr	r1, [r7, #12]
 8003618:	4618      	mov	r0, r3
 800361a:	f004 f885 	bl	8007728 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	460b      	mov	r3, r1
 800363a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800363c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003640:	2b00      	cmp	r3, #0
 8003642:	da0c      	bge.n	800365e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003644:	78fb      	ldrb	r3, [r7, #3]
 8003646:	f003 020f 	and.w	r2, r3, #15
 800364a:	4613      	mov	r3, r2
 800364c:	00db      	lsls	r3, r3, #3
 800364e:	4413      	add	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	3310      	adds	r3, #16
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	4413      	add	r3, r2
 8003658:	3304      	adds	r3, #4
 800365a:	60fb      	str	r3, [r7, #12]
 800365c:	e00c      	b.n	8003678 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800365e:	78fb      	ldrb	r3, [r7, #3]
 8003660:	f003 020f 	and.w	r2, r3, #15
 8003664:	4613      	mov	r3, r2
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	4413      	add	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	4413      	add	r3, r2
 8003674:	3304      	adds	r3, #4
 8003676:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68f9      	ldr	r1, [r7, #12]
 800367e:	4618      	mov	r0, r3
 8003680:	f003 fea4 	bl	80073cc <USB_EPStopXfer>
 8003684:	4603      	mov	r3, r0
 8003686:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003688:	7afb      	ldrb	r3, [r7, #11]
}
 800368a:	4618      	mov	r0, r3
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b08a      	sub	sp, #40	; 0x28
 8003696:	af02      	add	r7, sp, #8
 8003698:	6078      	str	r0, [r7, #4]
 800369a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	4613      	mov	r3, r2
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	4413      	add	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	3310      	adds	r3, #16
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	4413      	add	r3, r2
 80036b6:	3304      	adds	r3, #4
 80036b8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	695a      	ldr	r2, [r3, #20]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d901      	bls.n	80036ca <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e06b      	b.n	80037a2 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	691a      	ldr	r2, [r3, #16]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	69fa      	ldr	r2, [r7, #28]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d902      	bls.n	80036e6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	3303      	adds	r3, #3
 80036ea:	089b      	lsrs	r3, r3, #2
 80036ec:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036ee:	e02a      	b.n	8003746 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	691a      	ldr	r2, [r3, #16]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	69fa      	ldr	r2, [r7, #28]
 8003702:	429a      	cmp	r2, r3
 8003704:	d902      	bls.n	800370c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	3303      	adds	r3, #3
 8003710:	089b      	lsrs	r3, r3, #2
 8003712:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	68d9      	ldr	r1, [r3, #12]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	b2da      	uxtb	r2, r3
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	4603      	mov	r3, r0
 8003728:	6978      	ldr	r0, [r7, #20]
 800372a:	f003 fef9 	bl	8007520 <USB_WritePacket>

    ep->xfer_buff  += len;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	441a      	add	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	695a      	ldr	r2, [r3, #20]
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	441a      	add	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	015a      	lsls	r2, r3, #5
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	4413      	add	r3, r2
 800374e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	429a      	cmp	r2, r3
 800375a:	d809      	bhi.n	8003770 <PCD_WriteEmptyTxFifo+0xde>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	695a      	ldr	r2, [r3, #20]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003764:	429a      	cmp	r2, r3
 8003766:	d203      	bcs.n	8003770 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1bf      	bne.n	80036f0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	691a      	ldr	r2, [r3, #16]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	429a      	cmp	r2, r3
 800377a:	d811      	bhi.n	80037a0 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	f003 030f 	and.w	r3, r3, #15
 8003782:	2201      	movs	r2, #1
 8003784:	fa02 f303 	lsl.w	r3, r2, r3
 8003788:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003790:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	43db      	mvns	r3, r3
 8003796:	6939      	ldr	r1, [r7, #16]
 8003798:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800379c:	4013      	ands	r3, r2
 800379e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3720      	adds	r7, #32
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
	...

080037ac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b088      	sub	sp, #32
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	333c      	adds	r3, #60	; 0x3c
 80037c4:	3304      	adds	r3, #4
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	015a      	lsls	r2, r3, #5
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	4413      	add	r3, r2
 80037d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	799b      	ldrb	r3, [r3, #6]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d17b      	bne.n	80038da <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	f003 0308 	and.w	r3, r3, #8
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d015      	beq.n	8003818 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	4a61      	ldr	r2, [pc, #388]	; (8003974 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	f240 80b9 	bls.w	8003968 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f000 80b3 	beq.w	8003968 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	015a      	lsls	r2, r3, #5
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	4413      	add	r3, r2
 800380a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800380e:	461a      	mov	r2, r3
 8003810:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003814:	6093      	str	r3, [r2, #8]
 8003816:	e0a7      	b.n	8003968 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	f003 0320 	and.w	r3, r3, #32
 800381e:	2b00      	cmp	r3, #0
 8003820:	d009      	beq.n	8003836 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	015a      	lsls	r2, r3, #5
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	4413      	add	r3, r2
 800382a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800382e:	461a      	mov	r2, r3
 8003830:	2320      	movs	r3, #32
 8003832:	6093      	str	r3, [r2, #8]
 8003834:	e098      	b.n	8003968 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800383c:	2b00      	cmp	r3, #0
 800383e:	f040 8093 	bne.w	8003968 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	4a4b      	ldr	r2, [pc, #300]	; (8003974 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d90f      	bls.n	800386a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00a      	beq.n	800386a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	015a      	lsls	r2, r3, #5
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	4413      	add	r3, r2
 800385c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003860:	461a      	mov	r2, r3
 8003862:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003866:	6093      	str	r3, [r2, #8]
 8003868:	e07e      	b.n	8003968 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	4613      	mov	r3, r2
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	4413      	add	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	4413      	add	r3, r2
 800387c:	3304      	adds	r3, #4
 800387e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6a1a      	ldr	r2, [r3, #32]
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	0159      	lsls	r1, r3, #5
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	440b      	add	r3, r1
 800388c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003896:	1ad2      	subs	r2, r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d114      	bne.n	80038cc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d109      	bne.n	80038be <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6818      	ldr	r0, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80038b4:	461a      	mov	r2, r3
 80038b6:	2101      	movs	r1, #1
 80038b8:	f004 f8c8 	bl	8007a4c <USB_EP0_OutStart>
 80038bc:	e006      	b.n	80038cc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	68da      	ldr	r2, [r3, #12]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	441a      	add	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	4619      	mov	r1, r3
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f006 fb76 	bl	8009fc4 <HAL_PCD_DataOutStageCallback>
 80038d8:	e046      	b.n	8003968 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	4a26      	ldr	r2, [pc, #152]	; (8003978 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d124      	bne.n	800392c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00a      	beq.n	8003902 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	015a      	lsls	r2, r3, #5
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	4413      	add	r3, r2
 80038f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038f8:	461a      	mov	r2, r3
 80038fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038fe:	6093      	str	r3, [r2, #8]
 8003900:	e032      	b.n	8003968 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	f003 0320 	and.w	r3, r3, #32
 8003908:	2b00      	cmp	r3, #0
 800390a:	d008      	beq.n	800391e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	015a      	lsls	r2, r3, #5
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	4413      	add	r3, r2
 8003914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003918:	461a      	mov	r2, r3
 800391a:	2320      	movs	r3, #32
 800391c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	b2db      	uxtb	r3, r3
 8003922:	4619      	mov	r1, r3
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f006 fb4d 	bl	8009fc4 <HAL_PCD_DataOutStageCallback>
 800392a:	e01d      	b.n	8003968 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d114      	bne.n	800395c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003932:	6879      	ldr	r1, [r7, #4]
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	4613      	mov	r3, r2
 8003938:	00db      	lsls	r3, r3, #3
 800393a:	4413      	add	r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	440b      	add	r3, r1
 8003940:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d108      	bne.n	800395c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6818      	ldr	r0, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003954:	461a      	mov	r2, r3
 8003956:	2100      	movs	r1, #0
 8003958:	f004 f878 	bl	8007a4c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	b2db      	uxtb	r3, r3
 8003960:	4619      	mov	r1, r3
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f006 fb2e 	bl	8009fc4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3720      	adds	r7, #32
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	4f54300a 	.word	0x4f54300a
 8003978:	4f54310a 	.word	0x4f54310a

0800397c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	333c      	adds	r3, #60	; 0x3c
 8003994:	3304      	adds	r3, #4
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	015a      	lsls	r2, r3, #5
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	4413      	add	r3, r2
 80039a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	4a15      	ldr	r2, [pc, #84]	; (8003a04 <PCD_EP_OutSetupPacket_int+0x88>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d90e      	bls.n	80039d0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d009      	beq.n	80039d0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	015a      	lsls	r2, r3, #5
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	4413      	add	r3, r2
 80039c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039c8:	461a      	mov	r2, r3
 80039ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039ce:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f006 fae5 	bl	8009fa0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	4a0a      	ldr	r2, [pc, #40]	; (8003a04 <PCD_EP_OutSetupPacket_int+0x88>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d90c      	bls.n	80039f8 <PCD_EP_OutSetupPacket_int+0x7c>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	799b      	ldrb	r3, [r3, #6]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d108      	bne.n	80039f8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6818      	ldr	r0, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80039f0:	461a      	mov	r2, r3
 80039f2:	2101      	movs	r1, #1
 80039f4:	f004 f82a 	bl	8007a4c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3718      	adds	r7, #24
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	4f54300a 	.word	0x4f54300a

08003a08 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	460b      	mov	r3, r1
 8003a12:	70fb      	strb	r3, [r7, #3]
 8003a14:	4613      	mov	r3, r2
 8003a16:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003a20:	78fb      	ldrb	r3, [r7, #3]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d107      	bne.n	8003a36 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003a26:	883b      	ldrh	r3, [r7, #0]
 8003a28:	0419      	lsls	r1, r3, #16
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68ba      	ldr	r2, [r7, #8]
 8003a30:	430a      	orrs	r2, r1
 8003a32:	629a      	str	r2, [r3, #40]	; 0x28
 8003a34:	e028      	b.n	8003a88 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3c:	0c1b      	lsrs	r3, r3, #16
 8003a3e:	68ba      	ldr	r2, [r7, #8]
 8003a40:	4413      	add	r3, r2
 8003a42:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a44:	2300      	movs	r3, #0
 8003a46:	73fb      	strb	r3, [r7, #15]
 8003a48:	e00d      	b.n	8003a66 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	7bfb      	ldrb	r3, [r7, #15]
 8003a50:	3340      	adds	r3, #64	; 0x40
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	4413      	add	r3, r2
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	0c1b      	lsrs	r3, r3, #16
 8003a5a:	68ba      	ldr	r2, [r7, #8]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a60:	7bfb      	ldrb	r3, [r7, #15]
 8003a62:	3301      	adds	r3, #1
 8003a64:	73fb      	strb	r3, [r7, #15]
 8003a66:	7bfa      	ldrb	r2, [r7, #15]
 8003a68:	78fb      	ldrb	r3, [r7, #3]
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d3ec      	bcc.n	8003a4a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003a70:	883b      	ldrh	r3, [r7, #0]
 8003a72:	0418      	lsls	r0, r3, #16
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6819      	ldr	r1, [r3, #0]
 8003a78:	78fb      	ldrb	r3, [r7, #3]
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	68ba      	ldr	r2, [r7, #8]
 8003a7e:	4302      	orrs	r2, r0
 8003a80:	3340      	adds	r3, #64	; 0x40
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3714      	adds	r7, #20
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b083      	sub	sp, #12
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	887a      	ldrh	r2, [r7, #2]
 8003aa8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aea:	f043 0303 	orr.w	r3, r3, #3
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3714      	adds	r7, #20
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d101      	bne.n	8003b14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e0cc      	b.n	8003cae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b14:	4b68      	ldr	r3, [pc, #416]	; (8003cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 030f 	and.w	r3, r3, #15
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d90c      	bls.n	8003b3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b22:	4b65      	ldr	r3, [pc, #404]	; (8003cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b24:	683a      	ldr	r2, [r7, #0]
 8003b26:	b2d2      	uxtb	r2, r2
 8003b28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b2a:	4b63      	ldr	r3, [pc, #396]	; (8003cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 030f 	and.w	r3, r3, #15
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d001      	beq.n	8003b3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e0b8      	b.n	8003cae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d020      	beq.n	8003b8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d005      	beq.n	8003b60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b54:	4b59      	ldr	r3, [pc, #356]	; (8003cbc <HAL_RCC_ClockConfig+0x1bc>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	4a58      	ldr	r2, [pc, #352]	; (8003cbc <HAL_RCC_ClockConfig+0x1bc>)
 8003b5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b5e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0308 	and.w	r3, r3, #8
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d005      	beq.n	8003b78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b6c:	4b53      	ldr	r3, [pc, #332]	; (8003cbc <HAL_RCC_ClockConfig+0x1bc>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	4a52      	ldr	r2, [pc, #328]	; (8003cbc <HAL_RCC_ClockConfig+0x1bc>)
 8003b72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b78:	4b50      	ldr	r3, [pc, #320]	; (8003cbc <HAL_RCC_ClockConfig+0x1bc>)
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	494d      	ldr	r1, [pc, #308]	; (8003cbc <HAL_RCC_ClockConfig+0x1bc>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d044      	beq.n	8003c20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d107      	bne.n	8003bae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b9e:	4b47      	ldr	r3, [pc, #284]	; (8003cbc <HAL_RCC_ClockConfig+0x1bc>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d119      	bne.n	8003bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e07f      	b.n	8003cae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d003      	beq.n	8003bbe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bba:	2b03      	cmp	r3, #3
 8003bbc:	d107      	bne.n	8003bce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bbe:	4b3f      	ldr	r3, [pc, #252]	; (8003cbc <HAL_RCC_ClockConfig+0x1bc>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d109      	bne.n	8003bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e06f      	b.n	8003cae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bce:	4b3b      	ldr	r3, [pc, #236]	; (8003cbc <HAL_RCC_ClockConfig+0x1bc>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d101      	bne.n	8003bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e067      	b.n	8003cae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bde:	4b37      	ldr	r3, [pc, #220]	; (8003cbc <HAL_RCC_ClockConfig+0x1bc>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f023 0203 	bic.w	r2, r3, #3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	4934      	ldr	r1, [pc, #208]	; (8003cbc <HAL_RCC_ClockConfig+0x1bc>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bf0:	f7fd fc22 	bl	8001438 <HAL_GetTick>
 8003bf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bf6:	e00a      	b.n	8003c0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bf8:	f7fd fc1e 	bl	8001438 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e04f      	b.n	8003cae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c0e:	4b2b      	ldr	r3, [pc, #172]	; (8003cbc <HAL_RCC_ClockConfig+0x1bc>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f003 020c 	and.w	r2, r3, #12
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d1eb      	bne.n	8003bf8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c20:	4b25      	ldr	r3, [pc, #148]	; (8003cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 030f 	and.w	r3, r3, #15
 8003c28:	683a      	ldr	r2, [r7, #0]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d20c      	bcs.n	8003c48 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c2e:	4b22      	ldr	r3, [pc, #136]	; (8003cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	b2d2      	uxtb	r2, r2
 8003c34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c36:	4b20      	ldr	r3, [pc, #128]	; (8003cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 030f 	and.w	r3, r3, #15
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d001      	beq.n	8003c48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e032      	b.n	8003cae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0304 	and.w	r3, r3, #4
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d008      	beq.n	8003c66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c54:	4b19      	ldr	r3, [pc, #100]	; (8003cbc <HAL_RCC_ClockConfig+0x1bc>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	4916      	ldr	r1, [pc, #88]	; (8003cbc <HAL_RCC_ClockConfig+0x1bc>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0308 	and.w	r3, r3, #8
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d009      	beq.n	8003c86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c72:	4b12      	ldr	r3, [pc, #72]	; (8003cbc <HAL_RCC_ClockConfig+0x1bc>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	490e      	ldr	r1, [pc, #56]	; (8003cbc <HAL_RCC_ClockConfig+0x1bc>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c86:	f000 fb7f 	bl	8004388 <HAL_RCC_GetSysClockFreq>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	4b0b      	ldr	r3, [pc, #44]	; (8003cbc <HAL_RCC_ClockConfig+0x1bc>)
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	091b      	lsrs	r3, r3, #4
 8003c92:	f003 030f 	and.w	r3, r3, #15
 8003c96:	490a      	ldr	r1, [pc, #40]	; (8003cc0 <HAL_RCC_ClockConfig+0x1c0>)
 8003c98:	5ccb      	ldrb	r3, [r1, r3]
 8003c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c9e:	4a09      	ldr	r2, [pc, #36]	; (8003cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003ca2:	4b09      	ldr	r3, [pc, #36]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7fd fb82 	bl	80013b0 <HAL_InitTick>

  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	40023c00 	.word	0x40023c00
 8003cbc:	40023800 	.word	0x40023800
 8003cc0:	0800af38 	.word	0x0800af38
 8003cc4:	20000000 	.word	0x20000000
 8003cc8:	20000004 	.word	0x20000004

08003ccc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cd0:	4b03      	ldr	r3, [pc, #12]	; (8003ce0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	20000000 	.word	0x20000000

08003ce4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ce8:	f7ff fff0 	bl	8003ccc <HAL_RCC_GetHCLKFreq>
 8003cec:	4602      	mov	r2, r0
 8003cee:	4b05      	ldr	r3, [pc, #20]	; (8003d04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	0a9b      	lsrs	r3, r3, #10
 8003cf4:	f003 0307 	and.w	r3, r3, #7
 8003cf8:	4903      	ldr	r1, [pc, #12]	; (8003d08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cfa:	5ccb      	ldrb	r3, [r1, r3]
 8003cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	40023800 	.word	0x40023800
 8003d08:	0800af48 	.word	0x0800af48

08003d0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d10:	f7ff ffdc 	bl	8003ccc <HAL_RCC_GetHCLKFreq>
 8003d14:	4602      	mov	r2, r0
 8003d16:	4b05      	ldr	r3, [pc, #20]	; (8003d2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	0b5b      	lsrs	r3, r3, #13
 8003d1c:	f003 0307 	and.w	r3, r3, #7
 8003d20:	4903      	ldr	r1, [pc, #12]	; (8003d30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d22:	5ccb      	ldrb	r3, [r1, r3]
 8003d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	40023800 	.word	0x40023800
 8003d30:	0800af48 	.word	0x0800af48

08003d34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b08c      	sub	sp, #48	; 0x30
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003d40:	2300      	movs	r3, #0
 8003d42:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003d44:	2300      	movs	r3, #0
 8003d46:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003d50:	2300      	movs	r3, #0
 8003d52:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003d54:	2300      	movs	r3, #0
 8003d56:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d010      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003d6c:	4b6f      	ldr	r3, [pc, #444]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d72:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7a:	496c      	ldr	r1, [pc, #432]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d010      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003d9a:	4b64      	ldr	r3, [pc, #400]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003da0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da8:	4960      	ldr	r1, [pc, #384]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d101      	bne.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003db8:	2301      	movs	r3, #1
 8003dba:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0304 	and.w	r3, r3, #4
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d017      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003dc8:	4b58      	ldr	r3, [pc, #352]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003dca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd6:	4955      	ldr	r1, [pc, #340]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003de6:	d101      	bne.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003de8:	2301      	movs	r3, #1
 8003dea:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d101      	bne.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003df4:	2301      	movs	r3, #1
 8003df6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0308 	and.w	r3, r3, #8
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d017      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e04:	4b49      	ldr	r3, [pc, #292]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e0a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e12:	4946      	ldr	r1, [pc, #280]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e22:	d101      	bne.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003e24:	2301      	movs	r3, #1
 8003e26:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d101      	bne.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003e30:	2301      	movs	r3, #1
 8003e32:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0320 	and.w	r3, r3, #32
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f000 808a 	beq.w	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e42:	2300      	movs	r3, #0
 8003e44:	60bb      	str	r3, [r7, #8]
 8003e46:	4b39      	ldr	r3, [pc, #228]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4a:	4a38      	ldr	r2, [pc, #224]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e50:	6413      	str	r3, [r2, #64]	; 0x40
 8003e52:	4b36      	ldr	r3, [pc, #216]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e5a:	60bb      	str	r3, [r7, #8]
 8003e5c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003e5e:	4b34      	ldr	r3, [pc, #208]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a33      	ldr	r2, [pc, #204]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e68:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e6a:	f7fd fae5 	bl	8001438 <HAL_GetTick>
 8003e6e:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003e70:	e008      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e72:	f7fd fae1 	bl	8001438 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d901      	bls.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e278      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003e84:	4b2a      	ldr	r3, [pc, #168]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d0f0      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e90:	4b26      	ldr	r3, [pc, #152]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e98:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e9a:	6a3b      	ldr	r3, [r7, #32]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d02f      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ea8:	6a3a      	ldr	r2, [r7, #32]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d028      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003eae:	4b1f      	ldr	r3, [pc, #124]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eb6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003eb8:	4b1e      	ldr	r3, [pc, #120]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003eba:	2201      	movs	r2, #1
 8003ebc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ebe:	4b1d      	ldr	r3, [pc, #116]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003ec4:	4a19      	ldr	r2, [pc, #100]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ec6:	6a3b      	ldr	r3, [r7, #32]
 8003ec8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003eca:	4b18      	ldr	r3, [pc, #96]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d114      	bne.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003ed6:	f7fd faaf 	bl	8001438 <HAL_GetTick>
 8003eda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003edc:	e00a      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ede:	f7fd faab 	bl	8001438 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e240      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ef4:	4b0d      	ldr	r3, [pc, #52]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d0ee      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f0c:	d114      	bne.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003f0e:	4b07      	ldr	r3, [pc, #28]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003f1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f22:	4902      	ldr	r1, [pc, #8]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	608b      	str	r3, [r1, #8]
 8003f28:	e00c      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003f2a:	bf00      	nop
 8003f2c:	40023800 	.word	0x40023800
 8003f30:	40007000 	.word	0x40007000
 8003f34:	42470e40 	.word	0x42470e40
 8003f38:	4b4a      	ldr	r3, [pc, #296]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	4a49      	ldr	r2, [pc, #292]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003f3e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003f42:	6093      	str	r3, [r2, #8]
 8003f44:	4b47      	ldr	r3, [pc, #284]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003f46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f50:	4944      	ldr	r1, [pc, #272]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0310 	and.w	r3, r3, #16
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d004      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003f68:	4b3f      	ldr	r3, [pc, #252]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003f6a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00a      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003f78:	4b3a      	ldr	r3, [pc, #232]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f7e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f86:	4937      	ldr	r1, [pc, #220]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00a      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f9a:	4b32      	ldr	r3, [pc, #200]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003f9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fa0:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fa8:	492e      	ldr	r1, [pc, #184]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d011      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003fbc:	4b29      	ldr	r3, [pc, #164]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fc2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fca:	4926      	ldr	r1, [pc, #152]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fda:	d101      	bne.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00a      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003fec:	4b1d      	ldr	r3, [pc, #116]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ff2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffa:	491a      	ldr	r1, [pc, #104]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800400a:	2b00      	cmp	r3, #0
 800400c:	d011      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800400e:	4b15      	ldr	r3, [pc, #84]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004010:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004014:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800401c:	4911      	ldr	r1, [pc, #68]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800401e:	4313      	orrs	r3, r2
 8004020:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004028:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800402c:	d101      	bne.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800402e:	2301      	movs	r3, #1
 8004030:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004034:	2b01      	cmp	r3, #1
 8004036:	d005      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004040:	f040 80ff 	bne.w	8004242 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004044:	4b09      	ldr	r3, [pc, #36]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004046:	2200      	movs	r2, #0
 8004048:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800404a:	f7fd f9f5 	bl	8001438 <HAL_GetTick>
 800404e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004050:	e00e      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004052:	f7fd f9f1 	bl	8001438 <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	2b02      	cmp	r3, #2
 800405e:	d907      	bls.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e188      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004064:	40023800 	.word	0x40023800
 8004068:	424711e0 	.word	0x424711e0
 800406c:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004070:	4b7e      	ldr	r3, [pc, #504]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1ea      	bne.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	2b00      	cmp	r3, #0
 8004086:	d003      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408c:	2b00      	cmp	r3, #0
 800408e:	d009      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004098:	2b00      	cmp	r3, #0
 800409a:	d028      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d124      	bne.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80040a4:	4b71      	ldr	r3, [pc, #452]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80040a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040aa:	0c1b      	lsrs	r3, r3, #16
 80040ac:	f003 0303 	and.w	r3, r3, #3
 80040b0:	3301      	adds	r3, #1
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80040b6:	4b6d      	ldr	r3, [pc, #436]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80040b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040bc:	0e1b      	lsrs	r3, r3, #24
 80040be:	f003 030f 	and.w	r3, r3, #15
 80040c2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	019b      	lsls	r3, r3, #6
 80040ce:	431a      	orrs	r2, r3
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	085b      	lsrs	r3, r3, #1
 80040d4:	3b01      	subs	r3, #1
 80040d6:	041b      	lsls	r3, r3, #16
 80040d8:	431a      	orrs	r2, r3
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	061b      	lsls	r3, r3, #24
 80040de:	431a      	orrs	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	695b      	ldr	r3, [r3, #20]
 80040e4:	071b      	lsls	r3, r3, #28
 80040e6:	4961      	ldr	r1, [pc, #388]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0304 	and.w	r3, r3, #4
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d004      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004102:	d00a      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800410c:	2b00      	cmp	r3, #0
 800410e:	d035      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004114:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004118:	d130      	bne.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800411a:	4b54      	ldr	r3, [pc, #336]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800411c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004120:	0c1b      	lsrs	r3, r3, #16
 8004122:	f003 0303 	and.w	r3, r3, #3
 8004126:	3301      	adds	r3, #1
 8004128:	005b      	lsls	r3, r3, #1
 800412a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800412c:	4b4f      	ldr	r3, [pc, #316]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800412e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004132:	0f1b      	lsrs	r3, r3, #28
 8004134:	f003 0307 	and.w	r3, r3, #7
 8004138:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685a      	ldr	r2, [r3, #4]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	019b      	lsls	r3, r3, #6
 8004144:	431a      	orrs	r2, r3
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	085b      	lsrs	r3, r3, #1
 800414a:	3b01      	subs	r3, #1
 800414c:	041b      	lsls	r3, r3, #16
 800414e:	431a      	orrs	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	061b      	lsls	r3, r3, #24
 8004156:	431a      	orrs	r2, r3
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	071b      	lsls	r3, r3, #28
 800415c:	4943      	ldr	r1, [pc, #268]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800415e:	4313      	orrs	r3, r2
 8004160:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004164:	4b41      	ldr	r3, [pc, #260]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004166:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800416a:	f023 021f 	bic.w	r2, r3, #31
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004172:	3b01      	subs	r3, #1
 8004174:	493d      	ldr	r1, [pc, #244]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004176:	4313      	orrs	r3, r2
 8004178:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004184:	2b00      	cmp	r3, #0
 8004186:	d029      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800418c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004190:	d124      	bne.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004192:	4b36      	ldr	r3, [pc, #216]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004194:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004198:	0c1b      	lsrs	r3, r3, #16
 800419a:	f003 0303 	and.w	r3, r3, #3
 800419e:	3301      	adds	r3, #1
 80041a0:	005b      	lsls	r3, r3, #1
 80041a2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80041a4:	4b31      	ldr	r3, [pc, #196]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80041a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041aa:	0f1b      	lsrs	r3, r3, #28
 80041ac:	f003 0307 	and.w	r3, r3, #7
 80041b0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	019b      	lsls	r3, r3, #6
 80041bc:	431a      	orrs	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	085b      	lsrs	r3, r3, #1
 80041c4:	3b01      	subs	r3, #1
 80041c6:	041b      	lsls	r3, r3, #16
 80041c8:	431a      	orrs	r2, r3
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	061b      	lsls	r3, r3, #24
 80041ce:	431a      	orrs	r2, r3
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	071b      	lsls	r3, r3, #28
 80041d4:	4925      	ldr	r1, [pc, #148]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d016      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685a      	ldr	r2, [r3, #4]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	019b      	lsls	r3, r3, #6
 80041f2:	431a      	orrs	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	085b      	lsrs	r3, r3, #1
 80041fa:	3b01      	subs	r3, #1
 80041fc:	041b      	lsls	r3, r3, #16
 80041fe:	431a      	orrs	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	061b      	lsls	r3, r3, #24
 8004206:	431a      	orrs	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	071b      	lsls	r3, r3, #28
 800420e:	4917      	ldr	r1, [pc, #92]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004210:	4313      	orrs	r3, r2
 8004212:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004216:	4b16      	ldr	r3, [pc, #88]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004218:	2201      	movs	r2, #1
 800421a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800421c:	f7fd f90c 	bl	8001438 <HAL_GetTick>
 8004220:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004222:	e008      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004224:	f7fd f908 	bl	8001438 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b02      	cmp	r3, #2
 8004230:	d901      	bls.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e09f      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004236:	4b0d      	ldr	r3, [pc, #52]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d0f0      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8004242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004244:	2b01      	cmp	r3, #1
 8004246:	f040 8095 	bne.w	8004374 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800424a:	4b0a      	ldr	r3, [pc, #40]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800424c:	2200      	movs	r2, #0
 800424e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004250:	f7fd f8f2 	bl	8001438 <HAL_GetTick>
 8004254:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004256:	e00f      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004258:	f7fd f8ee 	bl	8001438 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	2b02      	cmp	r3, #2
 8004264:	d908      	bls.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e085      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800426a:	bf00      	nop
 800426c:	40023800 	.word	0x40023800
 8004270:	42470068 	.word	0x42470068
 8004274:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004278:	4b41      	ldr	r3, [pc, #260]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004280:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004284:	d0e8      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0304 	and.w	r3, r3, #4
 800428e:	2b00      	cmp	r3, #0
 8004290:	d003      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004296:	2b00      	cmp	r3, #0
 8004298:	d009      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d02b      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d127      	bne.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80042ae:	4b34      	ldr	r3, [pc, #208]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80042b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b4:	0c1b      	lsrs	r3, r3, #16
 80042b6:	f003 0303 	and.w	r3, r3, #3
 80042ba:	3301      	adds	r3, #1
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	699a      	ldr	r2, [r3, #24]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	69db      	ldr	r3, [r3, #28]
 80042c8:	019b      	lsls	r3, r3, #6
 80042ca:	431a      	orrs	r2, r3
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	085b      	lsrs	r3, r3, #1
 80042d0:	3b01      	subs	r3, #1
 80042d2:	041b      	lsls	r3, r3, #16
 80042d4:	431a      	orrs	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042da:	061b      	lsls	r3, r3, #24
 80042dc:	4928      	ldr	r1, [pc, #160]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80042e4:	4b26      	ldr	r3, [pc, #152]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80042e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042ea:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f2:	3b01      	subs	r3, #1
 80042f4:	021b      	lsls	r3, r3, #8
 80042f6:	4922      	ldr	r1, [pc, #136]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004306:	2b00      	cmp	r3, #0
 8004308:	d01d      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800430e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004312:	d118      	bne.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004314:	4b1a      	ldr	r3, [pc, #104]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800431a:	0e1b      	lsrs	r3, r3, #24
 800431c:	f003 030f 	and.w	r3, r3, #15
 8004320:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	699a      	ldr	r2, [r3, #24]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	69db      	ldr	r3, [r3, #28]
 800432a:	019b      	lsls	r3, r3, #6
 800432c:	431a      	orrs	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	085b      	lsrs	r3, r3, #1
 8004334:	3b01      	subs	r3, #1
 8004336:	041b      	lsls	r3, r3, #16
 8004338:	431a      	orrs	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	061b      	lsls	r3, r3, #24
 800433e:	4910      	ldr	r1, [pc, #64]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004340:	4313      	orrs	r3, r2
 8004342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004346:	4b0f      	ldr	r3, [pc, #60]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004348:	2201      	movs	r2, #1
 800434a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800434c:	f7fd f874 	bl	8001438 <HAL_GetTick>
 8004350:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004352:	e008      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004354:	f7fd f870 	bl	8001438 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	2b02      	cmp	r3, #2
 8004360:	d901      	bls.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e007      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004366:	4b06      	ldr	r3, [pc, #24]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800436e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004372:	d1ef      	bne.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3730      	adds	r7, #48	; 0x30
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	40023800 	.word	0x40023800
 8004384:	42470070 	.word	0x42470070

08004388 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004388:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800438c:	b0ae      	sub	sp, #184	; 0xb8
 800438e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004390:	2300      	movs	r3, #0
 8004392:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004396:	2300      	movs	r3, #0
 8004398:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800439c:	2300      	movs	r3, #0
 800439e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80043a2:	2300      	movs	r3, #0
 80043a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80043a8:	2300      	movs	r3, #0
 80043aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043ae:	4bcb      	ldr	r3, [pc, #812]	; (80046dc <HAL_RCC_GetSysClockFreq+0x354>)
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f003 030c 	and.w	r3, r3, #12
 80043b6:	2b0c      	cmp	r3, #12
 80043b8:	f200 8206 	bhi.w	80047c8 <HAL_RCC_GetSysClockFreq+0x440>
 80043bc:	a201      	add	r2, pc, #4	; (adr r2, 80043c4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80043be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c2:	bf00      	nop
 80043c4:	080043f9 	.word	0x080043f9
 80043c8:	080047c9 	.word	0x080047c9
 80043cc:	080047c9 	.word	0x080047c9
 80043d0:	080047c9 	.word	0x080047c9
 80043d4:	08004401 	.word	0x08004401
 80043d8:	080047c9 	.word	0x080047c9
 80043dc:	080047c9 	.word	0x080047c9
 80043e0:	080047c9 	.word	0x080047c9
 80043e4:	08004409 	.word	0x08004409
 80043e8:	080047c9 	.word	0x080047c9
 80043ec:	080047c9 	.word	0x080047c9
 80043f0:	080047c9 	.word	0x080047c9
 80043f4:	080045f9 	.word	0x080045f9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043f8:	4bb9      	ldr	r3, [pc, #740]	; (80046e0 <HAL_RCC_GetSysClockFreq+0x358>)
 80043fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80043fe:	e1e7      	b.n	80047d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004400:	4bb8      	ldr	r3, [pc, #736]	; (80046e4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004402:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004406:	e1e3      	b.n	80047d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004408:	4bb4      	ldr	r3, [pc, #720]	; (80046dc <HAL_RCC_GetSysClockFreq+0x354>)
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004410:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004414:	4bb1      	ldr	r3, [pc, #708]	; (80046dc <HAL_RCC_GetSysClockFreq+0x354>)
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d071      	beq.n	8004504 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004420:	4bae      	ldr	r3, [pc, #696]	; (80046dc <HAL_RCC_GetSysClockFreq+0x354>)
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	099b      	lsrs	r3, r3, #6
 8004426:	2200      	movs	r2, #0
 8004428:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800442c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004430:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004434:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004438:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800443c:	2300      	movs	r3, #0
 800443e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004442:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004446:	4622      	mov	r2, r4
 8004448:	462b      	mov	r3, r5
 800444a:	f04f 0000 	mov.w	r0, #0
 800444e:	f04f 0100 	mov.w	r1, #0
 8004452:	0159      	lsls	r1, r3, #5
 8004454:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004458:	0150      	lsls	r0, r2, #5
 800445a:	4602      	mov	r2, r0
 800445c:	460b      	mov	r3, r1
 800445e:	4621      	mov	r1, r4
 8004460:	1a51      	subs	r1, r2, r1
 8004462:	6439      	str	r1, [r7, #64]	; 0x40
 8004464:	4629      	mov	r1, r5
 8004466:	eb63 0301 	sbc.w	r3, r3, r1
 800446a:	647b      	str	r3, [r7, #68]	; 0x44
 800446c:	f04f 0200 	mov.w	r2, #0
 8004470:	f04f 0300 	mov.w	r3, #0
 8004474:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004478:	4649      	mov	r1, r9
 800447a:	018b      	lsls	r3, r1, #6
 800447c:	4641      	mov	r1, r8
 800447e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004482:	4641      	mov	r1, r8
 8004484:	018a      	lsls	r2, r1, #6
 8004486:	4641      	mov	r1, r8
 8004488:	1a51      	subs	r1, r2, r1
 800448a:	63b9      	str	r1, [r7, #56]	; 0x38
 800448c:	4649      	mov	r1, r9
 800448e:	eb63 0301 	sbc.w	r3, r3, r1
 8004492:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004494:	f04f 0200 	mov.w	r2, #0
 8004498:	f04f 0300 	mov.w	r3, #0
 800449c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80044a0:	4649      	mov	r1, r9
 80044a2:	00cb      	lsls	r3, r1, #3
 80044a4:	4641      	mov	r1, r8
 80044a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044aa:	4641      	mov	r1, r8
 80044ac:	00ca      	lsls	r2, r1, #3
 80044ae:	4610      	mov	r0, r2
 80044b0:	4619      	mov	r1, r3
 80044b2:	4603      	mov	r3, r0
 80044b4:	4622      	mov	r2, r4
 80044b6:	189b      	adds	r3, r3, r2
 80044b8:	633b      	str	r3, [r7, #48]	; 0x30
 80044ba:	462b      	mov	r3, r5
 80044bc:	460a      	mov	r2, r1
 80044be:	eb42 0303 	adc.w	r3, r2, r3
 80044c2:	637b      	str	r3, [r7, #52]	; 0x34
 80044c4:	f04f 0200 	mov.w	r2, #0
 80044c8:	f04f 0300 	mov.w	r3, #0
 80044cc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80044d0:	4629      	mov	r1, r5
 80044d2:	024b      	lsls	r3, r1, #9
 80044d4:	4621      	mov	r1, r4
 80044d6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80044da:	4621      	mov	r1, r4
 80044dc:	024a      	lsls	r2, r1, #9
 80044de:	4610      	mov	r0, r2
 80044e0:	4619      	mov	r1, r3
 80044e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044e6:	2200      	movs	r2, #0
 80044e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80044ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80044f0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80044f4:	f7fb fe86 	bl	8000204 <__aeabi_uldivmod>
 80044f8:	4602      	mov	r2, r0
 80044fa:	460b      	mov	r3, r1
 80044fc:	4613      	mov	r3, r2
 80044fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004502:	e067      	b.n	80045d4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004504:	4b75      	ldr	r3, [pc, #468]	; (80046dc <HAL_RCC_GetSysClockFreq+0x354>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	099b      	lsrs	r3, r3, #6
 800450a:	2200      	movs	r2, #0
 800450c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004510:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004514:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004518:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800451c:	67bb      	str	r3, [r7, #120]	; 0x78
 800451e:	2300      	movs	r3, #0
 8004520:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004522:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004526:	4622      	mov	r2, r4
 8004528:	462b      	mov	r3, r5
 800452a:	f04f 0000 	mov.w	r0, #0
 800452e:	f04f 0100 	mov.w	r1, #0
 8004532:	0159      	lsls	r1, r3, #5
 8004534:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004538:	0150      	lsls	r0, r2, #5
 800453a:	4602      	mov	r2, r0
 800453c:	460b      	mov	r3, r1
 800453e:	4621      	mov	r1, r4
 8004540:	1a51      	subs	r1, r2, r1
 8004542:	62b9      	str	r1, [r7, #40]	; 0x28
 8004544:	4629      	mov	r1, r5
 8004546:	eb63 0301 	sbc.w	r3, r3, r1
 800454a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800454c:	f04f 0200 	mov.w	r2, #0
 8004550:	f04f 0300 	mov.w	r3, #0
 8004554:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004558:	4649      	mov	r1, r9
 800455a:	018b      	lsls	r3, r1, #6
 800455c:	4641      	mov	r1, r8
 800455e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004562:	4641      	mov	r1, r8
 8004564:	018a      	lsls	r2, r1, #6
 8004566:	4641      	mov	r1, r8
 8004568:	ebb2 0a01 	subs.w	sl, r2, r1
 800456c:	4649      	mov	r1, r9
 800456e:	eb63 0b01 	sbc.w	fp, r3, r1
 8004572:	f04f 0200 	mov.w	r2, #0
 8004576:	f04f 0300 	mov.w	r3, #0
 800457a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800457e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004582:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004586:	4692      	mov	sl, r2
 8004588:	469b      	mov	fp, r3
 800458a:	4623      	mov	r3, r4
 800458c:	eb1a 0303 	adds.w	r3, sl, r3
 8004590:	623b      	str	r3, [r7, #32]
 8004592:	462b      	mov	r3, r5
 8004594:	eb4b 0303 	adc.w	r3, fp, r3
 8004598:	627b      	str	r3, [r7, #36]	; 0x24
 800459a:	f04f 0200 	mov.w	r2, #0
 800459e:	f04f 0300 	mov.w	r3, #0
 80045a2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80045a6:	4629      	mov	r1, r5
 80045a8:	028b      	lsls	r3, r1, #10
 80045aa:	4621      	mov	r1, r4
 80045ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045b0:	4621      	mov	r1, r4
 80045b2:	028a      	lsls	r2, r1, #10
 80045b4:	4610      	mov	r0, r2
 80045b6:	4619      	mov	r1, r3
 80045b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80045bc:	2200      	movs	r2, #0
 80045be:	673b      	str	r3, [r7, #112]	; 0x70
 80045c0:	677a      	str	r2, [r7, #116]	; 0x74
 80045c2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80045c6:	f7fb fe1d 	bl	8000204 <__aeabi_uldivmod>
 80045ca:	4602      	mov	r2, r0
 80045cc:	460b      	mov	r3, r1
 80045ce:	4613      	mov	r3, r2
 80045d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80045d4:	4b41      	ldr	r3, [pc, #260]	; (80046dc <HAL_RCC_GetSysClockFreq+0x354>)
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	0c1b      	lsrs	r3, r3, #16
 80045da:	f003 0303 	and.w	r3, r3, #3
 80045de:	3301      	adds	r3, #1
 80045e0:	005b      	lsls	r3, r3, #1
 80045e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco / pllp;
 80045e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80045ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80045ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80045f6:	e0eb      	b.n	80047d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045f8:	4b38      	ldr	r3, [pc, #224]	; (80046dc <HAL_RCC_GetSysClockFreq+0x354>)
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004600:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004604:	4b35      	ldr	r3, [pc, #212]	; (80046dc <HAL_RCC_GetSysClockFreq+0x354>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d06b      	beq.n	80046e8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004610:	4b32      	ldr	r3, [pc, #200]	; (80046dc <HAL_RCC_GetSysClockFreq+0x354>)
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	099b      	lsrs	r3, r3, #6
 8004616:	2200      	movs	r2, #0
 8004618:	66bb      	str	r3, [r7, #104]	; 0x68
 800461a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800461c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800461e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004622:	663b      	str	r3, [r7, #96]	; 0x60
 8004624:	2300      	movs	r3, #0
 8004626:	667b      	str	r3, [r7, #100]	; 0x64
 8004628:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800462c:	4622      	mov	r2, r4
 800462e:	462b      	mov	r3, r5
 8004630:	f04f 0000 	mov.w	r0, #0
 8004634:	f04f 0100 	mov.w	r1, #0
 8004638:	0159      	lsls	r1, r3, #5
 800463a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800463e:	0150      	lsls	r0, r2, #5
 8004640:	4602      	mov	r2, r0
 8004642:	460b      	mov	r3, r1
 8004644:	4621      	mov	r1, r4
 8004646:	1a51      	subs	r1, r2, r1
 8004648:	61b9      	str	r1, [r7, #24]
 800464a:	4629      	mov	r1, r5
 800464c:	eb63 0301 	sbc.w	r3, r3, r1
 8004650:	61fb      	str	r3, [r7, #28]
 8004652:	f04f 0200 	mov.w	r2, #0
 8004656:	f04f 0300 	mov.w	r3, #0
 800465a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800465e:	4659      	mov	r1, fp
 8004660:	018b      	lsls	r3, r1, #6
 8004662:	4651      	mov	r1, sl
 8004664:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004668:	4651      	mov	r1, sl
 800466a:	018a      	lsls	r2, r1, #6
 800466c:	4651      	mov	r1, sl
 800466e:	ebb2 0801 	subs.w	r8, r2, r1
 8004672:	4659      	mov	r1, fp
 8004674:	eb63 0901 	sbc.w	r9, r3, r1
 8004678:	f04f 0200 	mov.w	r2, #0
 800467c:	f04f 0300 	mov.w	r3, #0
 8004680:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004684:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004688:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800468c:	4690      	mov	r8, r2
 800468e:	4699      	mov	r9, r3
 8004690:	4623      	mov	r3, r4
 8004692:	eb18 0303 	adds.w	r3, r8, r3
 8004696:	613b      	str	r3, [r7, #16]
 8004698:	462b      	mov	r3, r5
 800469a:	eb49 0303 	adc.w	r3, r9, r3
 800469e:	617b      	str	r3, [r7, #20]
 80046a0:	f04f 0200 	mov.w	r2, #0
 80046a4:	f04f 0300 	mov.w	r3, #0
 80046a8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80046ac:	4629      	mov	r1, r5
 80046ae:	024b      	lsls	r3, r1, #9
 80046b0:	4621      	mov	r1, r4
 80046b2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80046b6:	4621      	mov	r1, r4
 80046b8:	024a      	lsls	r2, r1, #9
 80046ba:	4610      	mov	r0, r2
 80046bc:	4619      	mov	r1, r3
 80046be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80046c2:	2200      	movs	r2, #0
 80046c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80046c6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80046c8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80046cc:	f7fb fd9a 	bl	8000204 <__aeabi_uldivmod>
 80046d0:	4602      	mov	r2, r0
 80046d2:	460b      	mov	r3, r1
 80046d4:	4613      	mov	r3, r2
 80046d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80046da:	e065      	b.n	80047a8 <HAL_RCC_GetSysClockFreq+0x420>
 80046dc:	40023800 	.word	0x40023800
 80046e0:	00f42400 	.word	0x00f42400
 80046e4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046e8:	4b3d      	ldr	r3, [pc, #244]	; (80047e0 <HAL_RCC_GetSysClockFreq+0x458>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	099b      	lsrs	r3, r3, #6
 80046ee:	2200      	movs	r2, #0
 80046f0:	4618      	mov	r0, r3
 80046f2:	4611      	mov	r1, r2
 80046f4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80046f8:	653b      	str	r3, [r7, #80]	; 0x50
 80046fa:	2300      	movs	r3, #0
 80046fc:	657b      	str	r3, [r7, #84]	; 0x54
 80046fe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004702:	4642      	mov	r2, r8
 8004704:	464b      	mov	r3, r9
 8004706:	f04f 0000 	mov.w	r0, #0
 800470a:	f04f 0100 	mov.w	r1, #0
 800470e:	0159      	lsls	r1, r3, #5
 8004710:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004714:	0150      	lsls	r0, r2, #5
 8004716:	4602      	mov	r2, r0
 8004718:	460b      	mov	r3, r1
 800471a:	4641      	mov	r1, r8
 800471c:	1a51      	subs	r1, r2, r1
 800471e:	60b9      	str	r1, [r7, #8]
 8004720:	4649      	mov	r1, r9
 8004722:	eb63 0301 	sbc.w	r3, r3, r1
 8004726:	60fb      	str	r3, [r7, #12]
 8004728:	f04f 0200 	mov.w	r2, #0
 800472c:	f04f 0300 	mov.w	r3, #0
 8004730:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004734:	4659      	mov	r1, fp
 8004736:	018b      	lsls	r3, r1, #6
 8004738:	4651      	mov	r1, sl
 800473a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800473e:	4651      	mov	r1, sl
 8004740:	018a      	lsls	r2, r1, #6
 8004742:	4651      	mov	r1, sl
 8004744:	1a54      	subs	r4, r2, r1
 8004746:	4659      	mov	r1, fp
 8004748:	eb63 0501 	sbc.w	r5, r3, r1
 800474c:	f04f 0200 	mov.w	r2, #0
 8004750:	f04f 0300 	mov.w	r3, #0
 8004754:	00eb      	lsls	r3, r5, #3
 8004756:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800475a:	00e2      	lsls	r2, r4, #3
 800475c:	4614      	mov	r4, r2
 800475e:	461d      	mov	r5, r3
 8004760:	4643      	mov	r3, r8
 8004762:	18e3      	adds	r3, r4, r3
 8004764:	603b      	str	r3, [r7, #0]
 8004766:	464b      	mov	r3, r9
 8004768:	eb45 0303 	adc.w	r3, r5, r3
 800476c:	607b      	str	r3, [r7, #4]
 800476e:	f04f 0200 	mov.w	r2, #0
 8004772:	f04f 0300 	mov.w	r3, #0
 8004776:	e9d7 4500 	ldrd	r4, r5, [r7]
 800477a:	4629      	mov	r1, r5
 800477c:	028b      	lsls	r3, r1, #10
 800477e:	4621      	mov	r1, r4
 8004780:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004784:	4621      	mov	r1, r4
 8004786:	028a      	lsls	r2, r1, #10
 8004788:	4610      	mov	r0, r2
 800478a:	4619      	mov	r1, r3
 800478c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004790:	2200      	movs	r2, #0
 8004792:	64bb      	str	r3, [r7, #72]	; 0x48
 8004794:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004796:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800479a:	f7fb fd33 	bl	8000204 <__aeabi_uldivmod>
 800479e:	4602      	mov	r2, r0
 80047a0:	460b      	mov	r3, r1
 80047a2:	4613      	mov	r3, r2
 80047a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80047a8:	4b0d      	ldr	r3, [pc, #52]	; (80047e0 <HAL_RCC_GetSysClockFreq+0x458>)
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	0f1b      	lsrs	r3, r3, #28
 80047ae:	f003 0307 	and.w	r3, r3, #7
 80047b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco / pllr;
 80047b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80047ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80047be:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80047c6:	e003      	b.n	80047d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047c8:	4b06      	ldr	r3, [pc, #24]	; (80047e4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80047ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80047ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	37b8      	adds	r7, #184	; 0xb8
 80047d8:	46bd      	mov	sp, r7
 80047da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047de:	bf00      	nop
 80047e0:	40023800 	.word	0x40023800
 80047e4:	00f42400 	.word	0x00f42400

080047e8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d101      	bne.n	80047fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e28d      	b.n	8004d16 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	f000 8083 	beq.w	800490e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004808:	4b94      	ldr	r3, [pc, #592]	; (8004a5c <HAL_RCC_OscConfig+0x274>)
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f003 030c 	and.w	r3, r3, #12
 8004810:	2b04      	cmp	r3, #4
 8004812:	d019      	beq.n	8004848 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004814:	4b91      	ldr	r3, [pc, #580]	; (8004a5c <HAL_RCC_OscConfig+0x274>)
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f003 030c 	and.w	r3, r3, #12
        || \
 800481c:	2b08      	cmp	r3, #8
 800481e:	d106      	bne.n	800482e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004820:	4b8e      	ldr	r3, [pc, #568]	; (8004a5c <HAL_RCC_OscConfig+0x274>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004828:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800482c:	d00c      	beq.n	8004848 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800482e:	4b8b      	ldr	r3, [pc, #556]	; (8004a5c <HAL_RCC_OscConfig+0x274>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004836:	2b0c      	cmp	r3, #12
 8004838:	d112      	bne.n	8004860 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800483a:	4b88      	ldr	r3, [pc, #544]	; (8004a5c <HAL_RCC_OscConfig+0x274>)
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004842:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004846:	d10b      	bne.n	8004860 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004848:	4b84      	ldr	r3, [pc, #528]	; (8004a5c <HAL_RCC_OscConfig+0x274>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d05b      	beq.n	800490c <HAL_RCC_OscConfig+0x124>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d157      	bne.n	800490c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e25a      	b.n	8004d16 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004868:	d106      	bne.n	8004878 <HAL_RCC_OscConfig+0x90>
 800486a:	4b7c      	ldr	r3, [pc, #496]	; (8004a5c <HAL_RCC_OscConfig+0x274>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a7b      	ldr	r2, [pc, #492]	; (8004a5c <HAL_RCC_OscConfig+0x274>)
 8004870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004874:	6013      	str	r3, [r2, #0]
 8004876:	e01d      	b.n	80048b4 <HAL_RCC_OscConfig+0xcc>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004880:	d10c      	bne.n	800489c <HAL_RCC_OscConfig+0xb4>
 8004882:	4b76      	ldr	r3, [pc, #472]	; (8004a5c <HAL_RCC_OscConfig+0x274>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a75      	ldr	r2, [pc, #468]	; (8004a5c <HAL_RCC_OscConfig+0x274>)
 8004888:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800488c:	6013      	str	r3, [r2, #0]
 800488e:	4b73      	ldr	r3, [pc, #460]	; (8004a5c <HAL_RCC_OscConfig+0x274>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a72      	ldr	r2, [pc, #456]	; (8004a5c <HAL_RCC_OscConfig+0x274>)
 8004894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004898:	6013      	str	r3, [r2, #0]
 800489a:	e00b      	b.n	80048b4 <HAL_RCC_OscConfig+0xcc>
 800489c:	4b6f      	ldr	r3, [pc, #444]	; (8004a5c <HAL_RCC_OscConfig+0x274>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a6e      	ldr	r2, [pc, #440]	; (8004a5c <HAL_RCC_OscConfig+0x274>)
 80048a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048a6:	6013      	str	r3, [r2, #0]
 80048a8:	4b6c      	ldr	r3, [pc, #432]	; (8004a5c <HAL_RCC_OscConfig+0x274>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a6b      	ldr	r2, [pc, #428]	; (8004a5c <HAL_RCC_OscConfig+0x274>)
 80048ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d013      	beq.n	80048e4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048bc:	f7fc fdbc 	bl	8001438 <HAL_GetTick>
 80048c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048c2:	e008      	b.n	80048d6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048c4:	f7fc fdb8 	bl	8001438 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b64      	cmp	r3, #100	; 0x64
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e21f      	b.n	8004d16 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048d6:	4b61      	ldr	r3, [pc, #388]	; (8004a5c <HAL_RCC_OscConfig+0x274>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d0f0      	beq.n	80048c4 <HAL_RCC_OscConfig+0xdc>
 80048e2:	e014      	b.n	800490e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e4:	f7fc fda8 	bl	8001438 <HAL_GetTick>
 80048e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ea:	e008      	b.n	80048fe <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048ec:	f7fc fda4 	bl	8001438 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b64      	cmp	r3, #100	; 0x64
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e20b      	b.n	8004d16 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048fe:	4b57      	ldr	r3, [pc, #348]	; (8004a5c <HAL_RCC_OscConfig+0x274>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1f0      	bne.n	80048ec <HAL_RCC_OscConfig+0x104>
 800490a:	e000      	b.n	800490e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800490c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b00      	cmp	r3, #0
 8004918:	d06f      	beq.n	80049fa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800491a:	4b50      	ldr	r3, [pc, #320]	; (8004a5c <HAL_RCC_OscConfig+0x274>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f003 030c 	and.w	r3, r3, #12
 8004922:	2b00      	cmp	r3, #0
 8004924:	d017      	beq.n	8004956 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004926:	4b4d      	ldr	r3, [pc, #308]	; (8004a5c <HAL_RCC_OscConfig+0x274>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f003 030c 	and.w	r3, r3, #12
        || \
 800492e:	2b08      	cmp	r3, #8
 8004930:	d105      	bne.n	800493e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004932:	4b4a      	ldr	r3, [pc, #296]	; (8004a5c <HAL_RCC_OscConfig+0x274>)
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00b      	beq.n	8004956 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800493e:	4b47      	ldr	r3, [pc, #284]	; (8004a5c <HAL_RCC_OscConfig+0x274>)
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004946:	2b0c      	cmp	r3, #12
 8004948:	d11c      	bne.n	8004984 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800494a:	4b44      	ldr	r3, [pc, #272]	; (8004a5c <HAL_RCC_OscConfig+0x274>)
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d116      	bne.n	8004984 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004956:	4b41      	ldr	r3, [pc, #260]	; (8004a5c <HAL_RCC_OscConfig+0x274>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d005      	beq.n	800496e <HAL_RCC_OscConfig+0x186>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d001      	beq.n	800496e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e1d3      	b.n	8004d16 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800496e:	4b3b      	ldr	r3, [pc, #236]	; (8004a5c <HAL_RCC_OscConfig+0x274>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	00db      	lsls	r3, r3, #3
 800497c:	4937      	ldr	r1, [pc, #220]	; (8004a5c <HAL_RCC_OscConfig+0x274>)
 800497e:	4313      	orrs	r3, r2
 8004980:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004982:	e03a      	b.n	80049fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d020      	beq.n	80049ce <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800498c:	4b34      	ldr	r3, [pc, #208]	; (8004a60 <HAL_RCC_OscConfig+0x278>)
 800498e:	2201      	movs	r2, #1
 8004990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004992:	f7fc fd51 	bl	8001438 <HAL_GetTick>
 8004996:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004998:	e008      	b.n	80049ac <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800499a:	f7fc fd4d 	bl	8001438 <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d901      	bls.n	80049ac <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e1b4      	b.n	8004d16 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ac:	4b2b      	ldr	r3, [pc, #172]	; (8004a5c <HAL_RCC_OscConfig+0x274>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0302 	and.w	r3, r3, #2
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d0f0      	beq.n	800499a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049b8:	4b28      	ldr	r3, [pc, #160]	; (8004a5c <HAL_RCC_OscConfig+0x274>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	00db      	lsls	r3, r3, #3
 80049c6:	4925      	ldr	r1, [pc, #148]	; (8004a5c <HAL_RCC_OscConfig+0x274>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	600b      	str	r3, [r1, #0]
 80049cc:	e015      	b.n	80049fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049ce:	4b24      	ldr	r3, [pc, #144]	; (8004a60 <HAL_RCC_OscConfig+0x278>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d4:	f7fc fd30 	bl	8001438 <HAL_GetTick>
 80049d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049da:	e008      	b.n	80049ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049dc:	f7fc fd2c 	bl	8001438 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e193      	b.n	8004d16 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049ee:	4b1b      	ldr	r3, [pc, #108]	; (8004a5c <HAL_RCC_OscConfig+0x274>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1f0      	bne.n	80049dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0308 	and.w	r3, r3, #8
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d036      	beq.n	8004a74 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d016      	beq.n	8004a3c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a0e:	4b15      	ldr	r3, [pc, #84]	; (8004a64 <HAL_RCC_OscConfig+0x27c>)
 8004a10:	2201      	movs	r2, #1
 8004a12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a14:	f7fc fd10 	bl	8001438 <HAL_GetTick>
 8004a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a1c:	f7fc fd0c 	bl	8001438 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e173      	b.n	8004d16 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a2e:	4b0b      	ldr	r3, [pc, #44]	; (8004a5c <HAL_RCC_OscConfig+0x274>)
 8004a30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d0f0      	beq.n	8004a1c <HAL_RCC_OscConfig+0x234>
 8004a3a:	e01b      	b.n	8004a74 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a3c:	4b09      	ldr	r3, [pc, #36]	; (8004a64 <HAL_RCC_OscConfig+0x27c>)
 8004a3e:	2200      	movs	r2, #0
 8004a40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a42:	f7fc fcf9 	bl	8001438 <HAL_GetTick>
 8004a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a48:	e00e      	b.n	8004a68 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a4a:	f7fc fcf5 	bl	8001438 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d907      	bls.n	8004a68 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e15c      	b.n	8004d16 <HAL_RCC_OscConfig+0x52e>
 8004a5c:	40023800 	.word	0x40023800
 8004a60:	42470000 	.word	0x42470000
 8004a64:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a68:	4b8a      	ldr	r3, [pc, #552]	; (8004c94 <HAL_RCC_OscConfig+0x4ac>)
 8004a6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a6c:	f003 0302 	and.w	r3, r3, #2
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1ea      	bne.n	8004a4a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0304 	and.w	r3, r3, #4
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f000 8097 	beq.w	8004bb0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a82:	2300      	movs	r3, #0
 8004a84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a86:	4b83      	ldr	r3, [pc, #524]	; (8004c94 <HAL_RCC_OscConfig+0x4ac>)
 8004a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d10f      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a92:	2300      	movs	r3, #0
 8004a94:	60bb      	str	r3, [r7, #8]
 8004a96:	4b7f      	ldr	r3, [pc, #508]	; (8004c94 <HAL_RCC_OscConfig+0x4ac>)
 8004a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9a:	4a7e      	ldr	r2, [pc, #504]	; (8004c94 <HAL_RCC_OscConfig+0x4ac>)
 8004a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8004aa2:	4b7c      	ldr	r3, [pc, #496]	; (8004c94 <HAL_RCC_OscConfig+0x4ac>)
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aaa:	60bb      	str	r3, [r7, #8]
 8004aac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ab2:	4b79      	ldr	r3, [pc, #484]	; (8004c98 <HAL_RCC_OscConfig+0x4b0>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d118      	bne.n	8004af0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004abe:	4b76      	ldr	r3, [pc, #472]	; (8004c98 <HAL_RCC_OscConfig+0x4b0>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a75      	ldr	r2, [pc, #468]	; (8004c98 <HAL_RCC_OscConfig+0x4b0>)
 8004ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ac8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004aca:	f7fc fcb5 	bl	8001438 <HAL_GetTick>
 8004ace:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ad0:	e008      	b.n	8004ae4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ad2:	f7fc fcb1 	bl	8001438 <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d901      	bls.n	8004ae4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e118      	b.n	8004d16 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ae4:	4b6c      	ldr	r3, [pc, #432]	; (8004c98 <HAL_RCC_OscConfig+0x4b0>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d0f0      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d106      	bne.n	8004b06 <HAL_RCC_OscConfig+0x31e>
 8004af8:	4b66      	ldr	r3, [pc, #408]	; (8004c94 <HAL_RCC_OscConfig+0x4ac>)
 8004afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004afc:	4a65      	ldr	r2, [pc, #404]	; (8004c94 <HAL_RCC_OscConfig+0x4ac>)
 8004afe:	f043 0301 	orr.w	r3, r3, #1
 8004b02:	6713      	str	r3, [r2, #112]	; 0x70
 8004b04:	e01c      	b.n	8004b40 <HAL_RCC_OscConfig+0x358>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	2b05      	cmp	r3, #5
 8004b0c:	d10c      	bne.n	8004b28 <HAL_RCC_OscConfig+0x340>
 8004b0e:	4b61      	ldr	r3, [pc, #388]	; (8004c94 <HAL_RCC_OscConfig+0x4ac>)
 8004b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b12:	4a60      	ldr	r2, [pc, #384]	; (8004c94 <HAL_RCC_OscConfig+0x4ac>)
 8004b14:	f043 0304 	orr.w	r3, r3, #4
 8004b18:	6713      	str	r3, [r2, #112]	; 0x70
 8004b1a:	4b5e      	ldr	r3, [pc, #376]	; (8004c94 <HAL_RCC_OscConfig+0x4ac>)
 8004b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b1e:	4a5d      	ldr	r2, [pc, #372]	; (8004c94 <HAL_RCC_OscConfig+0x4ac>)
 8004b20:	f043 0301 	orr.w	r3, r3, #1
 8004b24:	6713      	str	r3, [r2, #112]	; 0x70
 8004b26:	e00b      	b.n	8004b40 <HAL_RCC_OscConfig+0x358>
 8004b28:	4b5a      	ldr	r3, [pc, #360]	; (8004c94 <HAL_RCC_OscConfig+0x4ac>)
 8004b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b2c:	4a59      	ldr	r2, [pc, #356]	; (8004c94 <HAL_RCC_OscConfig+0x4ac>)
 8004b2e:	f023 0301 	bic.w	r3, r3, #1
 8004b32:	6713      	str	r3, [r2, #112]	; 0x70
 8004b34:	4b57      	ldr	r3, [pc, #348]	; (8004c94 <HAL_RCC_OscConfig+0x4ac>)
 8004b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b38:	4a56      	ldr	r2, [pc, #344]	; (8004c94 <HAL_RCC_OscConfig+0x4ac>)
 8004b3a:	f023 0304 	bic.w	r3, r3, #4
 8004b3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d015      	beq.n	8004b74 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b48:	f7fc fc76 	bl	8001438 <HAL_GetTick>
 8004b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b4e:	e00a      	b.n	8004b66 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b50:	f7fc fc72 	bl	8001438 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e0d7      	b.n	8004d16 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b66:	4b4b      	ldr	r3, [pc, #300]	; (8004c94 <HAL_RCC_OscConfig+0x4ac>)
 8004b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b6a:	f003 0302 	and.w	r3, r3, #2
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d0ee      	beq.n	8004b50 <HAL_RCC_OscConfig+0x368>
 8004b72:	e014      	b.n	8004b9e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b74:	f7fc fc60 	bl	8001438 <HAL_GetTick>
 8004b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b7a:	e00a      	b.n	8004b92 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b7c:	f7fc fc5c 	bl	8001438 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e0c1      	b.n	8004d16 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b92:	4b40      	ldr	r3, [pc, #256]	; (8004c94 <HAL_RCC_OscConfig+0x4ac>)
 8004b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1ee      	bne.n	8004b7c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b9e:	7dfb      	ldrb	r3, [r7, #23]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d105      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ba4:	4b3b      	ldr	r3, [pc, #236]	; (8004c94 <HAL_RCC_OscConfig+0x4ac>)
 8004ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba8:	4a3a      	ldr	r2, [pc, #232]	; (8004c94 <HAL_RCC_OscConfig+0x4ac>)
 8004baa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f000 80ad 	beq.w	8004d14 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bba:	4b36      	ldr	r3, [pc, #216]	; (8004c94 <HAL_RCC_OscConfig+0x4ac>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f003 030c 	and.w	r3, r3, #12
 8004bc2:	2b08      	cmp	r3, #8
 8004bc4:	d060      	beq.n	8004c88 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	699b      	ldr	r3, [r3, #24]
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d145      	bne.n	8004c5a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bce:	4b33      	ldr	r3, [pc, #204]	; (8004c9c <HAL_RCC_OscConfig+0x4b4>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd4:	f7fc fc30 	bl	8001438 <HAL_GetTick>
 8004bd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bda:	e008      	b.n	8004bee <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bdc:	f7fc fc2c 	bl	8001438 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d901      	bls.n	8004bee <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e093      	b.n	8004d16 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bee:	4b29      	ldr	r3, [pc, #164]	; (8004c94 <HAL_RCC_OscConfig+0x4ac>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d1f0      	bne.n	8004bdc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	69da      	ldr	r2, [r3, #28]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	431a      	orrs	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c08:	019b      	lsls	r3, r3, #6
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c10:	085b      	lsrs	r3, r3, #1
 8004c12:	3b01      	subs	r3, #1
 8004c14:	041b      	lsls	r3, r3, #16
 8004c16:	431a      	orrs	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1c:	061b      	lsls	r3, r3, #24
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c24:	071b      	lsls	r3, r3, #28
 8004c26:	491b      	ldr	r1, [pc, #108]	; (8004c94 <HAL_RCC_OscConfig+0x4ac>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c2c:	4b1b      	ldr	r3, [pc, #108]	; (8004c9c <HAL_RCC_OscConfig+0x4b4>)
 8004c2e:	2201      	movs	r2, #1
 8004c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c32:	f7fc fc01 	bl	8001438 <HAL_GetTick>
 8004c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c38:	e008      	b.n	8004c4c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c3a:	f7fc fbfd 	bl	8001438 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d901      	bls.n	8004c4c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e064      	b.n	8004d16 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c4c:	4b11      	ldr	r3, [pc, #68]	; (8004c94 <HAL_RCC_OscConfig+0x4ac>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d0f0      	beq.n	8004c3a <HAL_RCC_OscConfig+0x452>
 8004c58:	e05c      	b.n	8004d14 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c5a:	4b10      	ldr	r3, [pc, #64]	; (8004c9c <HAL_RCC_OscConfig+0x4b4>)
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c60:	f7fc fbea 	bl	8001438 <HAL_GetTick>
 8004c64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c66:	e008      	b.n	8004c7a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c68:	f7fc fbe6 	bl	8001438 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d901      	bls.n	8004c7a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e04d      	b.n	8004d16 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c7a:	4b06      	ldr	r3, [pc, #24]	; (8004c94 <HAL_RCC_OscConfig+0x4ac>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1f0      	bne.n	8004c68 <HAL_RCC_OscConfig+0x480>
 8004c86:	e045      	b.n	8004d14 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d107      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e040      	b.n	8004d16 <HAL_RCC_OscConfig+0x52e>
 8004c94:	40023800 	.word	0x40023800
 8004c98:	40007000 	.word	0x40007000
 8004c9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ca0:	4b1f      	ldr	r3, [pc, #124]	; (8004d20 <HAL_RCC_OscConfig+0x538>)
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d030      	beq.n	8004d10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d129      	bne.n	8004d10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d122      	bne.n	8004d10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004cd6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d119      	bne.n	8004d10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce6:	085b      	lsrs	r3, r3, #1
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d10f      	bne.n	8004d10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cfa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d107      	bne.n	8004d10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d001      	beq.n	8004d14 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e000      	b.n	8004d16 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3718      	adds	r7, #24
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	40023800 	.word	0x40023800

08004d24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e07b      	b.n	8004e2e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d108      	bne.n	8004d50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d46:	d009      	beq.n	8004d5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	61da      	str	r2, [r3, #28]
 8004d4e:	e005      	b.n	8004d5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d106      	bne.n	8004d7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f7fc f8c2 	bl	8000f00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2202      	movs	r2, #2
 8004d80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d92:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004da4:	431a      	orrs	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dae:	431a      	orrs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	f003 0302 	and.w	r3, r3, #2
 8004db8:	431a      	orrs	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	f003 0301 	and.w	r3, r3, #1
 8004dc2:	431a      	orrs	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dcc:	431a      	orrs	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	69db      	ldr	r3, [r3, #28]
 8004dd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a1b      	ldr	r3, [r3, #32]
 8004ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de0:	ea42 0103 	orr.w	r1, r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	430a      	orrs	r2, r1
 8004df2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	0c1b      	lsrs	r3, r3, #16
 8004dfa:	f003 0104 	and.w	r1, r3, #4
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	f003 0210 	and.w	r2, r3, #16
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	69da      	ldr	r2, [r3, #28]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e1c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3708      	adds	r7, #8
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b082      	sub	sp, #8
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d101      	bne.n	8004e48 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e041      	b.n	8004ecc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d106      	bne.n	8004e62 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f7fc f8df 	bl	8001020 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2202      	movs	r2, #2
 8004e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	3304      	adds	r3, #4
 8004e72:	4619      	mov	r1, r3
 8004e74:	4610      	mov	r0, r2
 8004e76:	f000 fb03 	bl	8005480 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3708      	adds	r7, #8
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e041      	b.n	8004f6a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d106      	bne.n	8004f00 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f7fc f848 	bl	8000f90 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2202      	movs	r2, #2
 8004f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	3304      	adds	r3, #4
 8004f10:	4619      	mov	r1, r3
 8004f12:	4610      	mov	r0, r2
 8004f14:	f000 fab4 	bl	8005480 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
	...

08004f74 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d104      	bne.n	8004f92 <HAL_TIM_IC_Start_IT+0x1e>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	e013      	b.n	8004fba <HAL_TIM_IC_Start_IT+0x46>
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	2b04      	cmp	r3, #4
 8004f96:	d104      	bne.n	8004fa2 <HAL_TIM_IC_Start_IT+0x2e>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	e00b      	b.n	8004fba <HAL_TIM_IC_Start_IT+0x46>
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	2b08      	cmp	r3, #8
 8004fa6:	d104      	bne.n	8004fb2 <HAL_TIM_IC_Start_IT+0x3e>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	e003      	b.n	8004fba <HAL_TIM_IC_Start_IT+0x46>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d104      	bne.n	8004fcc <HAL_TIM_IC_Start_IT+0x58>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	e013      	b.n	8004ff4 <HAL_TIM_IC_Start_IT+0x80>
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	2b04      	cmp	r3, #4
 8004fd0:	d104      	bne.n	8004fdc <HAL_TIM_IC_Start_IT+0x68>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	e00b      	b.n	8004ff4 <HAL_TIM_IC_Start_IT+0x80>
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	2b08      	cmp	r3, #8
 8004fe0:	d104      	bne.n	8004fec <HAL_TIM_IC_Start_IT+0x78>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	e003      	b.n	8004ff4 <HAL_TIM_IC_Start_IT+0x80>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ff6:	7bbb      	ldrb	r3, [r7, #14]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d102      	bne.n	8005002 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ffc:	7b7b      	ldrb	r3, [r7, #13]
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d001      	beq.n	8005006 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e0cc      	b.n	80051a0 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d104      	bne.n	8005016 <HAL_TIM_IC_Start_IT+0xa2>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2202      	movs	r2, #2
 8005010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005014:	e013      	b.n	800503e <HAL_TIM_IC_Start_IT+0xca>
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	2b04      	cmp	r3, #4
 800501a:	d104      	bne.n	8005026 <HAL_TIM_IC_Start_IT+0xb2>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2202      	movs	r2, #2
 8005020:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005024:	e00b      	b.n	800503e <HAL_TIM_IC_Start_IT+0xca>
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	2b08      	cmp	r3, #8
 800502a:	d104      	bne.n	8005036 <HAL_TIM_IC_Start_IT+0xc2>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2202      	movs	r2, #2
 8005030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005034:	e003      	b.n	800503e <HAL_TIM_IC_Start_IT+0xca>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2202      	movs	r2, #2
 800503a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d104      	bne.n	800504e <HAL_TIM_IC_Start_IT+0xda>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2202      	movs	r2, #2
 8005048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800504c:	e013      	b.n	8005076 <HAL_TIM_IC_Start_IT+0x102>
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	2b04      	cmp	r3, #4
 8005052:	d104      	bne.n	800505e <HAL_TIM_IC_Start_IT+0xea>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2202      	movs	r2, #2
 8005058:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800505c:	e00b      	b.n	8005076 <HAL_TIM_IC_Start_IT+0x102>
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	2b08      	cmp	r3, #8
 8005062:	d104      	bne.n	800506e <HAL_TIM_IC_Start_IT+0xfa>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2202      	movs	r2, #2
 8005068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800506c:	e003      	b.n	8005076 <HAL_TIM_IC_Start_IT+0x102>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2202      	movs	r2, #2
 8005072:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	2b0c      	cmp	r3, #12
 800507a:	d841      	bhi.n	8005100 <HAL_TIM_IC_Start_IT+0x18c>
 800507c:	a201      	add	r2, pc, #4	; (adr r2, 8005084 <HAL_TIM_IC_Start_IT+0x110>)
 800507e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005082:	bf00      	nop
 8005084:	080050b9 	.word	0x080050b9
 8005088:	08005101 	.word	0x08005101
 800508c:	08005101 	.word	0x08005101
 8005090:	08005101 	.word	0x08005101
 8005094:	080050cb 	.word	0x080050cb
 8005098:	08005101 	.word	0x08005101
 800509c:	08005101 	.word	0x08005101
 80050a0:	08005101 	.word	0x08005101
 80050a4:	080050dd 	.word	0x080050dd
 80050a8:	08005101 	.word	0x08005101
 80050ac:	08005101 	.word	0x08005101
 80050b0:	08005101 	.word	0x08005101
 80050b4:	080050ef 	.word	0x080050ef
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68da      	ldr	r2, [r3, #12]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f042 0202 	orr.w	r2, r2, #2
 80050c6:	60da      	str	r2, [r3, #12]
      break;
 80050c8:	e01d      	b.n	8005106 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68da      	ldr	r2, [r3, #12]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f042 0204 	orr.w	r2, r2, #4
 80050d8:	60da      	str	r2, [r3, #12]
      break;
 80050da:	e014      	b.n	8005106 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68da      	ldr	r2, [r3, #12]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f042 0208 	orr.w	r2, r2, #8
 80050ea:	60da      	str	r2, [r3, #12]
      break;
 80050ec:	e00b      	b.n	8005106 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68da      	ldr	r2, [r3, #12]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f042 0210 	orr.w	r2, r2, #16
 80050fc:	60da      	str	r2, [r3, #12]
      break;
 80050fe:	e002      	b.n	8005106 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	73fb      	strb	r3, [r7, #15]
      break;
 8005104:	bf00      	nop
  }

  if (status == HAL_OK)
 8005106:	7bfb      	ldrb	r3, [r7, #15]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d148      	bne.n	800519e <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2201      	movs	r2, #1
 8005112:	6839      	ldr	r1, [r7, #0]
 8005114:	4618      	mov	r0, r3
 8005116:	f000 fd39 	bl	8005b8c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a22      	ldr	r2, [pc, #136]	; (80051a8 <HAL_TIM_IC_Start_IT+0x234>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d022      	beq.n	800516a <HAL_TIM_IC_Start_IT+0x1f6>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800512c:	d01d      	beq.n	800516a <HAL_TIM_IC_Start_IT+0x1f6>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a1e      	ldr	r2, [pc, #120]	; (80051ac <HAL_TIM_IC_Start_IT+0x238>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d018      	beq.n	800516a <HAL_TIM_IC_Start_IT+0x1f6>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a1c      	ldr	r2, [pc, #112]	; (80051b0 <HAL_TIM_IC_Start_IT+0x23c>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d013      	beq.n	800516a <HAL_TIM_IC_Start_IT+0x1f6>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a1b      	ldr	r2, [pc, #108]	; (80051b4 <HAL_TIM_IC_Start_IT+0x240>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d00e      	beq.n	800516a <HAL_TIM_IC_Start_IT+0x1f6>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a19      	ldr	r2, [pc, #100]	; (80051b8 <HAL_TIM_IC_Start_IT+0x244>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d009      	beq.n	800516a <HAL_TIM_IC_Start_IT+0x1f6>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a18      	ldr	r2, [pc, #96]	; (80051bc <HAL_TIM_IC_Start_IT+0x248>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d004      	beq.n	800516a <HAL_TIM_IC_Start_IT+0x1f6>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a16      	ldr	r2, [pc, #88]	; (80051c0 <HAL_TIM_IC_Start_IT+0x24c>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d111      	bne.n	800518e <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f003 0307 	and.w	r3, r3, #7
 8005174:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	2b06      	cmp	r3, #6
 800517a:	d010      	beq.n	800519e <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f042 0201 	orr.w	r2, r2, #1
 800518a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800518c:	e007      	b.n	800519e <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f042 0201 	orr.w	r2, r2, #1
 800519c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800519e:	7bfb      	ldrb	r3, [r7, #15]
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3710      	adds	r7, #16
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	40010000 	.word	0x40010000
 80051ac:	40000400 	.word	0x40000400
 80051b0:	40000800 	.word	0x40000800
 80051b4:	40000c00 	.word	0x40000c00
 80051b8:	40010400 	.word	0x40010400
 80051bc:	40014000 	.word	0x40014000
 80051c0:	40001800 	.word	0x40001800

080051c4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051d0:	2300      	movs	r3, #0
 80051d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d101      	bne.n	80051e2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80051de:	2302      	movs	r3, #2
 80051e0:	e088      	b.n	80052f4 <HAL_TIM_IC_ConfigChannel+0x130>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d11b      	bne.n	8005228 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005200:	f000 fb9a 	bl	8005938 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	699a      	ldr	r2, [r3, #24]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f022 020c 	bic.w	r2, r2, #12
 8005212:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6999      	ldr	r1, [r3, #24]
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	689a      	ldr	r2, [r3, #8]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	430a      	orrs	r2, r1
 8005224:	619a      	str	r2, [r3, #24]
 8005226:	e060      	b.n	80052ea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2b04      	cmp	r3, #4
 800522c:	d11c      	bne.n	8005268 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800523e:	f000 fbef 	bl	8005a20 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	699a      	ldr	r2, [r3, #24]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005250:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	6999      	ldr	r1, [r3, #24]
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	021a      	lsls	r2, r3, #8
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	430a      	orrs	r2, r1
 8005264:	619a      	str	r2, [r3, #24]
 8005266:	e040      	b.n	80052ea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b08      	cmp	r3, #8
 800526c:	d11b      	bne.n	80052a6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800527e:	f000 fc0c 	bl	8005a9a <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	69da      	ldr	r2, [r3, #28]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f022 020c 	bic.w	r2, r2, #12
 8005290:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	69d9      	ldr	r1, [r3, #28]
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	689a      	ldr	r2, [r3, #8]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	430a      	orrs	r2, r1
 80052a2:	61da      	str	r2, [r3, #28]
 80052a4:	e021      	b.n	80052ea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2b0c      	cmp	r3, #12
 80052aa:	d11c      	bne.n	80052e6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80052bc:	f000 fc29 	bl	8005b12 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	69da      	ldr	r2, [r3, #28]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80052ce:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	69d9      	ldr	r1, [r3, #28]
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	021a      	lsls	r2, r3, #8
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	430a      	orrs	r2, r1
 80052e2:	61da      	str	r2, [r3, #28]
 80052e4:	e001      	b.n	80052ea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3718      	adds	r7, #24
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005308:	2300      	movs	r3, #0
 800530a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005312:	2b01      	cmp	r3, #1
 8005314:	d101      	bne.n	800531a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005316:	2302      	movs	r3, #2
 8005318:	e0ae      	b.n	8005478 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2b0c      	cmp	r3, #12
 8005326:	f200 809f 	bhi.w	8005468 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800532a:	a201      	add	r2, pc, #4	; (adr r2, 8005330 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800532c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005330:	08005365 	.word	0x08005365
 8005334:	08005469 	.word	0x08005469
 8005338:	08005469 	.word	0x08005469
 800533c:	08005469 	.word	0x08005469
 8005340:	080053a5 	.word	0x080053a5
 8005344:	08005469 	.word	0x08005469
 8005348:	08005469 	.word	0x08005469
 800534c:	08005469 	.word	0x08005469
 8005350:	080053e7 	.word	0x080053e7
 8005354:	08005469 	.word	0x08005469
 8005358:	08005469 	.word	0x08005469
 800535c:	08005469 	.word	0x08005469
 8005360:	08005427 	.word	0x08005427
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68b9      	ldr	r1, [r7, #8]
 800536a:	4618      	mov	r0, r3
 800536c:	f000 f934 	bl	80055d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	699a      	ldr	r2, [r3, #24]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f042 0208 	orr.w	r2, r2, #8
 800537e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	699a      	ldr	r2, [r3, #24]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 0204 	bic.w	r2, r2, #4
 800538e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6999      	ldr	r1, [r3, #24]
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	691a      	ldr	r2, [r3, #16]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	619a      	str	r2, [r3, #24]
      break;
 80053a2:	e064      	b.n	800546e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68b9      	ldr	r1, [r7, #8]
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 f984 	bl	80056b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	699a      	ldr	r2, [r3, #24]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	699a      	ldr	r2, [r3, #24]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6999      	ldr	r1, [r3, #24]
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	021a      	lsls	r2, r3, #8
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	430a      	orrs	r2, r1
 80053e2:	619a      	str	r2, [r3, #24]
      break;
 80053e4:	e043      	b.n	800546e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68b9      	ldr	r1, [r7, #8]
 80053ec:	4618      	mov	r0, r3
 80053ee:	f000 f9d9 	bl	80057a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	69da      	ldr	r2, [r3, #28]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f042 0208 	orr.w	r2, r2, #8
 8005400:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	69da      	ldr	r2, [r3, #28]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f022 0204 	bic.w	r2, r2, #4
 8005410:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	69d9      	ldr	r1, [r3, #28]
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	691a      	ldr	r2, [r3, #16]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	430a      	orrs	r2, r1
 8005422:	61da      	str	r2, [r3, #28]
      break;
 8005424:	e023      	b.n	800546e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68b9      	ldr	r1, [r7, #8]
 800542c:	4618      	mov	r0, r3
 800542e:	f000 fa2d 	bl	800588c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	69da      	ldr	r2, [r3, #28]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005440:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	69da      	ldr	r2, [r3, #28]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005450:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	69d9      	ldr	r1, [r3, #28]
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	021a      	lsls	r2, r3, #8
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	430a      	orrs	r2, r1
 8005464:	61da      	str	r2, [r3, #28]
      break;
 8005466:	e002      	b.n	800546e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	75fb      	strb	r3, [r7, #23]
      break;
 800546c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005476:	7dfb      	ldrb	r3, [r7, #23]
}
 8005478:	4618      	mov	r0, r3
 800547a:	3718      	adds	r7, #24
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a46      	ldr	r2, [pc, #280]	; (80055ac <TIM_Base_SetConfig+0x12c>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d013      	beq.n	80054c0 <TIM_Base_SetConfig+0x40>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800549e:	d00f      	beq.n	80054c0 <TIM_Base_SetConfig+0x40>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a43      	ldr	r2, [pc, #268]	; (80055b0 <TIM_Base_SetConfig+0x130>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d00b      	beq.n	80054c0 <TIM_Base_SetConfig+0x40>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a42      	ldr	r2, [pc, #264]	; (80055b4 <TIM_Base_SetConfig+0x134>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d007      	beq.n	80054c0 <TIM_Base_SetConfig+0x40>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a41      	ldr	r2, [pc, #260]	; (80055b8 <TIM_Base_SetConfig+0x138>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d003      	beq.n	80054c0 <TIM_Base_SetConfig+0x40>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a40      	ldr	r2, [pc, #256]	; (80055bc <TIM_Base_SetConfig+0x13c>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d108      	bne.n	80054d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a35      	ldr	r2, [pc, #212]	; (80055ac <TIM_Base_SetConfig+0x12c>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d02b      	beq.n	8005532 <TIM_Base_SetConfig+0xb2>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054e0:	d027      	beq.n	8005532 <TIM_Base_SetConfig+0xb2>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a32      	ldr	r2, [pc, #200]	; (80055b0 <TIM_Base_SetConfig+0x130>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d023      	beq.n	8005532 <TIM_Base_SetConfig+0xb2>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a31      	ldr	r2, [pc, #196]	; (80055b4 <TIM_Base_SetConfig+0x134>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d01f      	beq.n	8005532 <TIM_Base_SetConfig+0xb2>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a30      	ldr	r2, [pc, #192]	; (80055b8 <TIM_Base_SetConfig+0x138>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d01b      	beq.n	8005532 <TIM_Base_SetConfig+0xb2>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a2f      	ldr	r2, [pc, #188]	; (80055bc <TIM_Base_SetConfig+0x13c>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d017      	beq.n	8005532 <TIM_Base_SetConfig+0xb2>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a2e      	ldr	r2, [pc, #184]	; (80055c0 <TIM_Base_SetConfig+0x140>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d013      	beq.n	8005532 <TIM_Base_SetConfig+0xb2>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a2d      	ldr	r2, [pc, #180]	; (80055c4 <TIM_Base_SetConfig+0x144>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d00f      	beq.n	8005532 <TIM_Base_SetConfig+0xb2>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a2c      	ldr	r2, [pc, #176]	; (80055c8 <TIM_Base_SetConfig+0x148>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d00b      	beq.n	8005532 <TIM_Base_SetConfig+0xb2>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a2b      	ldr	r2, [pc, #172]	; (80055cc <TIM_Base_SetConfig+0x14c>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d007      	beq.n	8005532 <TIM_Base_SetConfig+0xb2>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a2a      	ldr	r2, [pc, #168]	; (80055d0 <TIM_Base_SetConfig+0x150>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d003      	beq.n	8005532 <TIM_Base_SetConfig+0xb2>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a29      	ldr	r2, [pc, #164]	; (80055d4 <TIM_Base_SetConfig+0x154>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d108      	bne.n	8005544 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005538:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	4313      	orrs	r3, r2
 8005542:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	695b      	ldr	r3, [r3, #20]
 800554e:	4313      	orrs	r3, r2
 8005550:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	689a      	ldr	r2, [r3, #8]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a10      	ldr	r2, [pc, #64]	; (80055ac <TIM_Base_SetConfig+0x12c>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d003      	beq.n	8005578 <TIM_Base_SetConfig+0xf8>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a12      	ldr	r2, [pc, #72]	; (80055bc <TIM_Base_SetConfig+0x13c>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d103      	bne.n	8005580 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	691a      	ldr	r2, [r3, #16]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	2b01      	cmp	r3, #1
 8005590:	d105      	bne.n	800559e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	f023 0201 	bic.w	r2, r3, #1
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	611a      	str	r2, [r3, #16]
  }
}
 800559e:	bf00      	nop
 80055a0:	3714      	adds	r7, #20
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	40010000 	.word	0x40010000
 80055b0:	40000400 	.word	0x40000400
 80055b4:	40000800 	.word	0x40000800
 80055b8:	40000c00 	.word	0x40000c00
 80055bc:	40010400 	.word	0x40010400
 80055c0:	40014000 	.word	0x40014000
 80055c4:	40014400 	.word	0x40014400
 80055c8:	40014800 	.word	0x40014800
 80055cc:	40001800 	.word	0x40001800
 80055d0:	40001c00 	.word	0x40001c00
 80055d4:	40002000 	.word	0x40002000

080055d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055d8:	b480      	push	{r7}
 80055da:	b087      	sub	sp, #28
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a1b      	ldr	r3, [r3, #32]
 80055e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a1b      	ldr	r3, [r3, #32]
 80055ec:	f023 0201 	bic.w	r2, r3, #1
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005606:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f023 0303 	bic.w	r3, r3, #3
 800560e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	4313      	orrs	r3, r2
 8005618:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	f023 0302 	bic.w	r3, r3, #2
 8005620:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	4313      	orrs	r3, r2
 800562a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a20      	ldr	r2, [pc, #128]	; (80056b0 <TIM_OC1_SetConfig+0xd8>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d003      	beq.n	800563c <TIM_OC1_SetConfig+0x64>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a1f      	ldr	r2, [pc, #124]	; (80056b4 <TIM_OC1_SetConfig+0xdc>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d10c      	bne.n	8005656 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	f023 0308 	bic.w	r3, r3, #8
 8005642:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	4313      	orrs	r3, r2
 800564c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	f023 0304 	bic.w	r3, r3, #4
 8005654:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a15      	ldr	r2, [pc, #84]	; (80056b0 <TIM_OC1_SetConfig+0xd8>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d003      	beq.n	8005666 <TIM_OC1_SetConfig+0x8e>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a14      	ldr	r2, [pc, #80]	; (80056b4 <TIM_OC1_SetConfig+0xdc>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d111      	bne.n	800568a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800566c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005674:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	4313      	orrs	r3, r2
 800567e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	699b      	ldr	r3, [r3, #24]
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	4313      	orrs	r3, r2
 8005688:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	685a      	ldr	r2, [r3, #4]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	697a      	ldr	r2, [r7, #20]
 80056a2:	621a      	str	r2, [r3, #32]
}
 80056a4:	bf00      	nop
 80056a6:	371c      	adds	r7, #28
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr
 80056b0:	40010000 	.word	0x40010000
 80056b4:	40010400 	.word	0x40010400

080056b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b087      	sub	sp, #28
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a1b      	ldr	r3, [r3, #32]
 80056cc:	f023 0210 	bic.w	r2, r3, #16
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	021b      	lsls	r3, r3, #8
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	f023 0320 	bic.w	r3, r3, #32
 8005702:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	011b      	lsls	r3, r3, #4
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	4313      	orrs	r3, r2
 800570e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a22      	ldr	r2, [pc, #136]	; (800579c <TIM_OC2_SetConfig+0xe4>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d003      	beq.n	8005720 <TIM_OC2_SetConfig+0x68>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a21      	ldr	r2, [pc, #132]	; (80057a0 <TIM_OC2_SetConfig+0xe8>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d10d      	bne.n	800573c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005726:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	011b      	lsls	r3, r3, #4
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	4313      	orrs	r3, r2
 8005732:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800573a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a17      	ldr	r2, [pc, #92]	; (800579c <TIM_OC2_SetConfig+0xe4>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d003      	beq.n	800574c <TIM_OC2_SetConfig+0x94>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a16      	ldr	r2, [pc, #88]	; (80057a0 <TIM_OC2_SetConfig+0xe8>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d113      	bne.n	8005774 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005752:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800575a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	695b      	ldr	r3, [r3, #20]
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	693a      	ldr	r2, [r7, #16]
 8005764:	4313      	orrs	r3, r2
 8005766:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	4313      	orrs	r3, r2
 8005772:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	693a      	ldr	r2, [r7, #16]
 8005778:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	685a      	ldr	r2, [r3, #4]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	697a      	ldr	r2, [r7, #20]
 800578c:	621a      	str	r2, [r3, #32]
}
 800578e:	bf00      	nop
 8005790:	371c      	adds	r7, #28
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	40010000 	.word	0x40010000
 80057a0:	40010400 	.word	0x40010400

080057a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b087      	sub	sp, #28
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a1b      	ldr	r3, [r3, #32]
 80057b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	69db      	ldr	r3, [r3, #28]
 80057ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f023 0303 	bic.w	r3, r3, #3
 80057da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	021b      	lsls	r3, r3, #8
 80057f4:	697a      	ldr	r2, [r7, #20]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a21      	ldr	r2, [pc, #132]	; (8005884 <TIM_OC3_SetConfig+0xe0>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d003      	beq.n	800580a <TIM_OC3_SetConfig+0x66>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a20      	ldr	r2, [pc, #128]	; (8005888 <TIM_OC3_SetConfig+0xe4>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d10d      	bne.n	8005826 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005810:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	021b      	lsls	r3, r3, #8
 8005818:	697a      	ldr	r2, [r7, #20]
 800581a:	4313      	orrs	r3, r2
 800581c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005824:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a16      	ldr	r2, [pc, #88]	; (8005884 <TIM_OC3_SetConfig+0xe0>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d003      	beq.n	8005836 <TIM_OC3_SetConfig+0x92>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a15      	ldr	r2, [pc, #84]	; (8005888 <TIM_OC3_SetConfig+0xe4>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d113      	bne.n	800585e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800583c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005844:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	695b      	ldr	r3, [r3, #20]
 800584a:	011b      	lsls	r3, r3, #4
 800584c:	693a      	ldr	r2, [r7, #16]
 800584e:	4313      	orrs	r3, r2
 8005850:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	011b      	lsls	r3, r3, #4
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	4313      	orrs	r3, r2
 800585c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	685a      	ldr	r2, [r3, #4]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	621a      	str	r2, [r3, #32]
}
 8005878:	bf00      	nop
 800587a:	371c      	adds	r7, #28
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr
 8005884:	40010000 	.word	0x40010000
 8005888:	40010400 	.word	0x40010400

0800588c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800588c:	b480      	push	{r7}
 800588e:	b087      	sub	sp, #28
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a1b      	ldr	r3, [r3, #32]
 800589a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a1b      	ldr	r3, [r3, #32]
 80058a0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	69db      	ldr	r3, [r3, #28]
 80058b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	021b      	lsls	r3, r3, #8
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	031b      	lsls	r3, r3, #12
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a12      	ldr	r2, [pc, #72]	; (8005930 <TIM_OC4_SetConfig+0xa4>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d003      	beq.n	80058f4 <TIM_OC4_SetConfig+0x68>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a11      	ldr	r2, [pc, #68]	; (8005934 <TIM_OC4_SetConfig+0xa8>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d109      	bne.n	8005908 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	695b      	ldr	r3, [r3, #20]
 8005900:	019b      	lsls	r3, r3, #6
 8005902:	697a      	ldr	r2, [r7, #20]
 8005904:	4313      	orrs	r3, r2
 8005906:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	697a      	ldr	r2, [r7, #20]
 800590c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	693a      	ldr	r2, [r7, #16]
 8005920:	621a      	str	r2, [r3, #32]
}
 8005922:	bf00      	nop
 8005924:	371c      	adds	r7, #28
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	40010000 	.word	0x40010000
 8005934:	40010400 	.word	0x40010400

08005938 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005938:	b480      	push	{r7}
 800593a:	b087      	sub	sp, #28
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
 8005944:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6a1b      	ldr	r3, [r3, #32]
 8005950:	f023 0201 	bic.w	r2, r3, #1
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	699b      	ldr	r3, [r3, #24]
 800595c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	4a28      	ldr	r2, [pc, #160]	; (8005a04 <TIM_TI1_SetConfig+0xcc>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d01b      	beq.n	800599e <TIM_TI1_SetConfig+0x66>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800596c:	d017      	beq.n	800599e <TIM_TI1_SetConfig+0x66>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	4a25      	ldr	r2, [pc, #148]	; (8005a08 <TIM_TI1_SetConfig+0xd0>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d013      	beq.n	800599e <TIM_TI1_SetConfig+0x66>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	4a24      	ldr	r2, [pc, #144]	; (8005a0c <TIM_TI1_SetConfig+0xd4>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d00f      	beq.n	800599e <TIM_TI1_SetConfig+0x66>
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	4a23      	ldr	r2, [pc, #140]	; (8005a10 <TIM_TI1_SetConfig+0xd8>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d00b      	beq.n	800599e <TIM_TI1_SetConfig+0x66>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	4a22      	ldr	r2, [pc, #136]	; (8005a14 <TIM_TI1_SetConfig+0xdc>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d007      	beq.n	800599e <TIM_TI1_SetConfig+0x66>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	4a21      	ldr	r2, [pc, #132]	; (8005a18 <TIM_TI1_SetConfig+0xe0>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d003      	beq.n	800599e <TIM_TI1_SetConfig+0x66>
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	4a20      	ldr	r2, [pc, #128]	; (8005a1c <TIM_TI1_SetConfig+0xe4>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d101      	bne.n	80059a2 <TIM_TI1_SetConfig+0x6a>
 800599e:	2301      	movs	r3, #1
 80059a0:	e000      	b.n	80059a4 <TIM_TI1_SetConfig+0x6c>
 80059a2:	2300      	movs	r3, #0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d008      	beq.n	80059ba <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	f023 0303 	bic.w	r3, r3, #3
 80059ae:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80059b0:	697a      	ldr	r2, [r7, #20]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	617b      	str	r3, [r7, #20]
 80059b8:	e003      	b.n	80059c2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	f043 0301 	orr.w	r3, r3, #1
 80059c0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	011b      	lsls	r3, r3, #4
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	f023 030a 	bic.w	r3, r3, #10
 80059dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	f003 030a 	and.w	r3, r3, #10
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	697a      	ldr	r2, [r7, #20]
 80059ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	693a      	ldr	r2, [r7, #16]
 80059f4:	621a      	str	r2, [r3, #32]
}
 80059f6:	bf00      	nop
 80059f8:	371c      	adds	r7, #28
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	40010000 	.word	0x40010000
 8005a08:	40000400 	.word	0x40000400
 8005a0c:	40000800 	.word	0x40000800
 8005a10:	40000c00 	.word	0x40000c00
 8005a14:	40010400 	.word	0x40010400
 8005a18:	40014000 	.word	0x40014000
 8005a1c:	40001800 	.word	0x40001800

08005a20 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b087      	sub	sp, #28
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	607a      	str	r2, [r7, #4]
 8005a2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6a1b      	ldr	r3, [r3, #32]
 8005a38:	f023 0210 	bic.w	r2, r3, #16
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	021b      	lsls	r3, r3, #8
 8005a52:	693a      	ldr	r2, [r7, #16]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	031b      	lsls	r3, r3, #12
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	693a      	ldr	r2, [r7, #16]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a72:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	011b      	lsls	r3, r3, #4
 8005a78:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005a7c:	697a      	ldr	r2, [r7, #20]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	693a      	ldr	r2, [r7, #16]
 8005a86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	697a      	ldr	r2, [r7, #20]
 8005a8c:	621a      	str	r2, [r3, #32]
}
 8005a8e:	bf00      	nop
 8005a90:	371c      	adds	r7, #28
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr

08005a9a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005a9a:	b480      	push	{r7}
 8005a9c:	b087      	sub	sp, #28
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	60f8      	str	r0, [r7, #12]
 8005aa2:	60b9      	str	r1, [r7, #8]
 8005aa4:	607a      	str	r2, [r7, #4]
 8005aa6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6a1b      	ldr	r3, [r3, #32]
 8005aac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6a1b      	ldr	r3, [r3, #32]
 8005ab2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	69db      	ldr	r3, [r3, #28]
 8005abe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	f023 0303 	bic.w	r3, r3, #3
 8005ac6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ad6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	011b      	lsls	r3, r3, #4
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	693a      	ldr	r2, [r7, #16]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005aea:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	021b      	lsls	r3, r3, #8
 8005af0:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005af4:	697a      	ldr	r2, [r7, #20]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	621a      	str	r2, [r3, #32]
}
 8005b06:	bf00      	nop
 8005b08:	371c      	adds	r7, #28
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr

08005b12 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005b12:	b480      	push	{r7}
 8005b14:	b087      	sub	sp, #28
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	60f8      	str	r0, [r7, #12]
 8005b1a:	60b9      	str	r1, [r7, #8]
 8005b1c:	607a      	str	r2, [r7, #4]
 8005b1e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6a1b      	ldr	r3, [r3, #32]
 8005b24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	69db      	ldr	r3, [r3, #28]
 8005b36:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b3e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	021b      	lsls	r3, r3, #8
 8005b44:	693a      	ldr	r2, [r7, #16]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b50:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	031b      	lsls	r3, r3, #12
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	693a      	ldr	r2, [r7, #16]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005b64:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	031b      	lsls	r3, r3, #12
 8005b6a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005b6e:	697a      	ldr	r2, [r7, #20]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	621a      	str	r2, [r3, #32]
}
 8005b80:	bf00      	nop
 8005b82:	371c      	adds	r7, #28
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b087      	sub	sp, #28
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	f003 031f 	and.w	r3, r3, #31
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6a1a      	ldr	r2, [r3, #32]
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	43db      	mvns	r3, r3
 8005bae:	401a      	ands	r2, r3
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6a1a      	ldr	r2, [r3, #32]
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	f003 031f 	and.w	r3, r3, #31
 8005bbe:	6879      	ldr	r1, [r7, #4]
 8005bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8005bc4:	431a      	orrs	r2, r3
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	621a      	str	r2, [r3, #32]
}
 8005bca:	bf00      	nop
 8005bcc:	371c      	adds	r7, #28
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
	...

08005bd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d101      	bne.n	8005bf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bec:	2302      	movs	r3, #2
 8005bee:	e05a      	b.n	8005ca6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a21      	ldr	r2, [pc, #132]	; (8005cb4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d022      	beq.n	8005c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c3c:	d01d      	beq.n	8005c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a1d      	ldr	r2, [pc, #116]	; (8005cb8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d018      	beq.n	8005c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a1b      	ldr	r2, [pc, #108]	; (8005cbc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d013      	beq.n	8005c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a1a      	ldr	r2, [pc, #104]	; (8005cc0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d00e      	beq.n	8005c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a18      	ldr	r2, [pc, #96]	; (8005cc4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d009      	beq.n	8005c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a17      	ldr	r2, [pc, #92]	; (8005cc8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d004      	beq.n	8005c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a15      	ldr	r2, [pc, #84]	; (8005ccc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d10c      	bne.n	8005c94 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	68ba      	ldr	r2, [r7, #8]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68ba      	ldr	r2, [r7, #8]
 8005c92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3714      	adds	r7, #20
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	40010000 	.word	0x40010000
 8005cb8:	40000400 	.word	0x40000400
 8005cbc:	40000800 	.word	0x40000800
 8005cc0:	40000c00 	.word	0x40000c00
 8005cc4:	40010400 	.word	0x40010400
 8005cc8:	40014000 	.word	0x40014000
 8005ccc:	40001800 	.word	0x40001800

08005cd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d101      	bne.n	8005ce2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e042      	b.n	8005d68 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d106      	bne.n	8005cfc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f7fb f9ee 	bl	80010d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2224      	movs	r2, #36	; 0x24
 8005d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68da      	ldr	r2, [r3, #12]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 f973 	bl	8006000 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	691a      	ldr	r2, [r3, #16]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	695a      	ldr	r2, [r3, #20]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68da      	ldr	r2, [r3, #12]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2220      	movs	r2, #32
 8005d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2220      	movs	r2, #32
 8005d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3708      	adds	r7, #8
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b08a      	sub	sp, #40	; 0x28
 8005d74:	af02      	add	r7, sp, #8
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	603b      	str	r3, [r7, #0]
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005d80:	2300      	movs	r3, #0
 8005d82:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	2b20      	cmp	r3, #32
 8005d8e:	d175      	bne.n	8005e7c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d002      	beq.n	8005d9c <HAL_UART_Transmit+0x2c>
 8005d96:	88fb      	ldrh	r3, [r7, #6]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d101      	bne.n	8005da0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e06e      	b.n	8005e7e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2200      	movs	r2, #0
 8005da4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2221      	movs	r2, #33	; 0x21
 8005daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005dae:	f7fb fb43 	bl	8001438 <HAL_GetTick>
 8005db2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	88fa      	ldrh	r2, [r7, #6]
 8005db8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	88fa      	ldrh	r2, [r7, #6]
 8005dbe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dc8:	d108      	bne.n	8005ddc <HAL_UART_Transmit+0x6c>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d104      	bne.n	8005ddc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	61bb      	str	r3, [r7, #24]
 8005dda:	e003      	b.n	8005de4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005de0:	2300      	movs	r3, #0
 8005de2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005de4:	e02e      	b.n	8005e44 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	9300      	str	r3, [sp, #0]
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	2200      	movs	r2, #0
 8005dee:	2180      	movs	r1, #128	; 0x80
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f000 f848 	bl	8005e86 <UART_WaitOnFlagUntilTimeout>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d005      	beq.n	8005e08 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2220      	movs	r2, #32
 8005e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e03a      	b.n	8005e7e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10b      	bne.n	8005e26 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	881b      	ldrh	r3, [r3, #0]
 8005e12:	461a      	mov	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	3302      	adds	r3, #2
 8005e22:	61bb      	str	r3, [r7, #24]
 8005e24:	e007      	b.n	8005e36 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	781a      	ldrb	r2, [r3, #0]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	3301      	adds	r3, #1
 8005e34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	b29a      	uxth	r2, r3
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1cb      	bne.n	8005de6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	9300      	str	r3, [sp, #0]
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	2200      	movs	r2, #0
 8005e56:	2140      	movs	r1, #64	; 0x40
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f000 f814 	bl	8005e86 <UART_WaitOnFlagUntilTimeout>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d005      	beq.n	8005e70 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2220      	movs	r2, #32
 8005e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e006      	b.n	8005e7e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2220      	movs	r2, #32
 8005e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	e000      	b.n	8005e7e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005e7c:	2302      	movs	r3, #2
  }
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3720      	adds	r7, #32
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b086      	sub	sp, #24
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	60f8      	str	r0, [r7, #12]
 8005e8e:	60b9      	str	r1, [r7, #8]
 8005e90:	603b      	str	r3, [r7, #0]
 8005e92:	4613      	mov	r3, r2
 8005e94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e96:	e03b      	b.n	8005f10 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e98:	6a3b      	ldr	r3, [r7, #32]
 8005e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e9e:	d037      	beq.n	8005f10 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ea0:	f7fb faca 	bl	8001438 <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	6a3a      	ldr	r2, [r7, #32]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d302      	bcc.n	8005eb6 <UART_WaitOnFlagUntilTimeout+0x30>
 8005eb0:	6a3b      	ldr	r3, [r7, #32]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d101      	bne.n	8005eba <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e03a      	b.n	8005f30 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	f003 0304 	and.w	r3, r3, #4
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d023      	beq.n	8005f10 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	2b80      	cmp	r3, #128	; 0x80
 8005ecc:	d020      	beq.n	8005f10 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	2b40      	cmp	r3, #64	; 0x40
 8005ed2:	d01d      	beq.n	8005f10 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0308 	and.w	r3, r3, #8
 8005ede:	2b08      	cmp	r3, #8
 8005ee0:	d116      	bne.n	8005f10 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	617b      	str	r3, [r7, #20]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	617b      	str	r3, [r7, #20]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	617b      	str	r3, [r7, #20]
 8005ef6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ef8:	68f8      	ldr	r0, [r7, #12]
 8005efa:	f000 f81d 	bl	8005f38 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2208      	movs	r2, #8
 8005f02:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e00f      	b.n	8005f30 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	4013      	ands	r3, r2
 8005f1a:	68ba      	ldr	r2, [r7, #8]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	bf0c      	ite	eq
 8005f20:	2301      	moveq	r3, #1
 8005f22:	2300      	movne	r3, #0
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	461a      	mov	r2, r3
 8005f28:	79fb      	ldrb	r3, [r7, #7]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d0b4      	beq.n	8005e98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3718      	adds	r7, #24
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b095      	sub	sp, #84	; 0x54
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	330c      	adds	r3, #12
 8005f46:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f4a:	e853 3f00 	ldrex	r3, [r3]
 8005f4e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	330c      	adds	r3, #12
 8005f5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f60:	643a      	str	r2, [r7, #64]	; 0x40
 8005f62:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f68:	e841 2300 	strex	r3, r2, [r1]
 8005f6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d1e5      	bne.n	8005f40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	3314      	adds	r3, #20
 8005f7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7c:	6a3b      	ldr	r3, [r7, #32]
 8005f7e:	e853 3f00 	ldrex	r3, [r3]
 8005f82:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	f023 0301 	bic.w	r3, r3, #1
 8005f8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	3314      	adds	r3, #20
 8005f92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f9c:	e841 2300 	strex	r3, r2, [r1]
 8005fa0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d1e5      	bne.n	8005f74 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d119      	bne.n	8005fe4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	330c      	adds	r3, #12
 8005fb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	e853 3f00 	ldrex	r3, [r3]
 8005fbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	f023 0310 	bic.w	r3, r3, #16
 8005fc6:	647b      	str	r3, [r7, #68]	; 0x44
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	330c      	adds	r3, #12
 8005fce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fd0:	61ba      	str	r2, [r7, #24]
 8005fd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd4:	6979      	ldr	r1, [r7, #20]
 8005fd6:	69ba      	ldr	r2, [r7, #24]
 8005fd8:	e841 2300 	strex	r3, r2, [r1]
 8005fdc:	613b      	str	r3, [r7, #16]
   return(result);
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1e5      	bne.n	8005fb0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2220      	movs	r2, #32
 8005fe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005ff2:	bf00      	nop
 8005ff4:	3754      	adds	r7, #84	; 0x54
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr
	...

08006000 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006000:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006004:	b0c0      	sub	sp, #256	; 0x100
 8006006:	af00      	add	r7, sp, #0
 8006008:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800600c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800601c:	68d9      	ldr	r1, [r3, #12]
 800601e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	ea40 0301 	orr.w	r3, r0, r1
 8006028:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800602a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800602e:	689a      	ldr	r2, [r3, #8]
 8006030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	431a      	orrs	r2, r3
 8006038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	431a      	orrs	r2, r3
 8006040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006044:	69db      	ldr	r3, [r3, #28]
 8006046:	4313      	orrs	r3, r2
 8006048:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800604c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006058:	f021 010c 	bic.w	r1, r1, #12
 800605c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006066:	430b      	orrs	r3, r1
 8006068:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800606a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	695b      	ldr	r3, [r3, #20]
 8006072:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800607a:	6999      	ldr	r1, [r3, #24]
 800607c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	ea40 0301 	orr.w	r3, r0, r1
 8006086:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	4b8f      	ldr	r3, [pc, #572]	; (80062cc <UART_SetConfig+0x2cc>)
 8006090:	429a      	cmp	r2, r3
 8006092:	d005      	beq.n	80060a0 <UART_SetConfig+0xa0>
 8006094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	4b8d      	ldr	r3, [pc, #564]	; (80062d0 <UART_SetConfig+0x2d0>)
 800609c:	429a      	cmp	r2, r3
 800609e:	d104      	bne.n	80060aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80060a0:	f7fd fe34 	bl	8003d0c <HAL_RCC_GetPCLK2Freq>
 80060a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80060a8:	e003      	b.n	80060b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80060aa:	f7fd fe1b 	bl	8003ce4 <HAL_RCC_GetPCLK1Freq>
 80060ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060b6:	69db      	ldr	r3, [r3, #28]
 80060b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060bc:	f040 810c 	bne.w	80062d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80060c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060c4:	2200      	movs	r2, #0
 80060c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80060ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80060ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80060d2:	4622      	mov	r2, r4
 80060d4:	462b      	mov	r3, r5
 80060d6:	1891      	adds	r1, r2, r2
 80060d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80060da:	415b      	adcs	r3, r3
 80060dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80060e2:	4621      	mov	r1, r4
 80060e4:	eb12 0801 	adds.w	r8, r2, r1
 80060e8:	4629      	mov	r1, r5
 80060ea:	eb43 0901 	adc.w	r9, r3, r1
 80060ee:	f04f 0200 	mov.w	r2, #0
 80060f2:	f04f 0300 	mov.w	r3, #0
 80060f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006102:	4690      	mov	r8, r2
 8006104:	4699      	mov	r9, r3
 8006106:	4623      	mov	r3, r4
 8006108:	eb18 0303 	adds.w	r3, r8, r3
 800610c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006110:	462b      	mov	r3, r5
 8006112:	eb49 0303 	adc.w	r3, r9, r3
 8006116:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800611a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006126:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800612a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800612e:	460b      	mov	r3, r1
 8006130:	18db      	adds	r3, r3, r3
 8006132:	653b      	str	r3, [r7, #80]	; 0x50
 8006134:	4613      	mov	r3, r2
 8006136:	eb42 0303 	adc.w	r3, r2, r3
 800613a:	657b      	str	r3, [r7, #84]	; 0x54
 800613c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006140:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006144:	f7fa f85e 	bl	8000204 <__aeabi_uldivmod>
 8006148:	4602      	mov	r2, r0
 800614a:	460b      	mov	r3, r1
 800614c:	4b61      	ldr	r3, [pc, #388]	; (80062d4 <UART_SetConfig+0x2d4>)
 800614e:	fba3 2302 	umull	r2, r3, r3, r2
 8006152:	095b      	lsrs	r3, r3, #5
 8006154:	011c      	lsls	r4, r3, #4
 8006156:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800615a:	2200      	movs	r2, #0
 800615c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006160:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006164:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006168:	4642      	mov	r2, r8
 800616a:	464b      	mov	r3, r9
 800616c:	1891      	adds	r1, r2, r2
 800616e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006170:	415b      	adcs	r3, r3
 8006172:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006174:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006178:	4641      	mov	r1, r8
 800617a:	eb12 0a01 	adds.w	sl, r2, r1
 800617e:	4649      	mov	r1, r9
 8006180:	eb43 0b01 	adc.w	fp, r3, r1
 8006184:	f04f 0200 	mov.w	r2, #0
 8006188:	f04f 0300 	mov.w	r3, #0
 800618c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006190:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006194:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006198:	4692      	mov	sl, r2
 800619a:	469b      	mov	fp, r3
 800619c:	4643      	mov	r3, r8
 800619e:	eb1a 0303 	adds.w	r3, sl, r3
 80061a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061a6:	464b      	mov	r3, r9
 80061a8:	eb4b 0303 	adc.w	r3, fp, r3
 80061ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80061b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80061c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80061c4:	460b      	mov	r3, r1
 80061c6:	18db      	adds	r3, r3, r3
 80061c8:	643b      	str	r3, [r7, #64]	; 0x40
 80061ca:	4613      	mov	r3, r2
 80061cc:	eb42 0303 	adc.w	r3, r2, r3
 80061d0:	647b      	str	r3, [r7, #68]	; 0x44
 80061d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80061d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80061da:	f7fa f813 	bl	8000204 <__aeabi_uldivmod>
 80061de:	4602      	mov	r2, r0
 80061e0:	460b      	mov	r3, r1
 80061e2:	4611      	mov	r1, r2
 80061e4:	4b3b      	ldr	r3, [pc, #236]	; (80062d4 <UART_SetConfig+0x2d4>)
 80061e6:	fba3 2301 	umull	r2, r3, r3, r1
 80061ea:	095b      	lsrs	r3, r3, #5
 80061ec:	2264      	movs	r2, #100	; 0x64
 80061ee:	fb02 f303 	mul.w	r3, r2, r3
 80061f2:	1acb      	subs	r3, r1, r3
 80061f4:	00db      	lsls	r3, r3, #3
 80061f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80061fa:	4b36      	ldr	r3, [pc, #216]	; (80062d4 <UART_SetConfig+0x2d4>)
 80061fc:	fba3 2302 	umull	r2, r3, r3, r2
 8006200:	095b      	lsrs	r3, r3, #5
 8006202:	005b      	lsls	r3, r3, #1
 8006204:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006208:	441c      	add	r4, r3
 800620a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800620e:	2200      	movs	r2, #0
 8006210:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006214:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006218:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800621c:	4642      	mov	r2, r8
 800621e:	464b      	mov	r3, r9
 8006220:	1891      	adds	r1, r2, r2
 8006222:	63b9      	str	r1, [r7, #56]	; 0x38
 8006224:	415b      	adcs	r3, r3
 8006226:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006228:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800622c:	4641      	mov	r1, r8
 800622e:	1851      	adds	r1, r2, r1
 8006230:	6339      	str	r1, [r7, #48]	; 0x30
 8006232:	4649      	mov	r1, r9
 8006234:	414b      	adcs	r3, r1
 8006236:	637b      	str	r3, [r7, #52]	; 0x34
 8006238:	f04f 0200 	mov.w	r2, #0
 800623c:	f04f 0300 	mov.w	r3, #0
 8006240:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006244:	4659      	mov	r1, fp
 8006246:	00cb      	lsls	r3, r1, #3
 8006248:	4651      	mov	r1, sl
 800624a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800624e:	4651      	mov	r1, sl
 8006250:	00ca      	lsls	r2, r1, #3
 8006252:	4610      	mov	r0, r2
 8006254:	4619      	mov	r1, r3
 8006256:	4603      	mov	r3, r0
 8006258:	4642      	mov	r2, r8
 800625a:	189b      	adds	r3, r3, r2
 800625c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006260:	464b      	mov	r3, r9
 8006262:	460a      	mov	r2, r1
 8006264:	eb42 0303 	adc.w	r3, r2, r3
 8006268:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800626c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006278:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800627c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006280:	460b      	mov	r3, r1
 8006282:	18db      	adds	r3, r3, r3
 8006284:	62bb      	str	r3, [r7, #40]	; 0x28
 8006286:	4613      	mov	r3, r2
 8006288:	eb42 0303 	adc.w	r3, r2, r3
 800628c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800628e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006292:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006296:	f7f9 ffb5 	bl	8000204 <__aeabi_uldivmod>
 800629a:	4602      	mov	r2, r0
 800629c:	460b      	mov	r3, r1
 800629e:	4b0d      	ldr	r3, [pc, #52]	; (80062d4 <UART_SetConfig+0x2d4>)
 80062a0:	fba3 1302 	umull	r1, r3, r3, r2
 80062a4:	095b      	lsrs	r3, r3, #5
 80062a6:	2164      	movs	r1, #100	; 0x64
 80062a8:	fb01 f303 	mul.w	r3, r1, r3
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	00db      	lsls	r3, r3, #3
 80062b0:	3332      	adds	r3, #50	; 0x32
 80062b2:	4a08      	ldr	r2, [pc, #32]	; (80062d4 <UART_SetConfig+0x2d4>)
 80062b4:	fba2 2303 	umull	r2, r3, r2, r3
 80062b8:	095b      	lsrs	r3, r3, #5
 80062ba:	f003 0207 	and.w	r2, r3, #7
 80062be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4422      	add	r2, r4
 80062c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80062c8:	e106      	b.n	80064d8 <UART_SetConfig+0x4d8>
 80062ca:	bf00      	nop
 80062cc:	40011000 	.word	0x40011000
 80062d0:	40011400 	.word	0x40011400
 80062d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062dc:	2200      	movs	r2, #0
 80062de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80062e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80062e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80062ea:	4642      	mov	r2, r8
 80062ec:	464b      	mov	r3, r9
 80062ee:	1891      	adds	r1, r2, r2
 80062f0:	6239      	str	r1, [r7, #32]
 80062f2:	415b      	adcs	r3, r3
 80062f4:	627b      	str	r3, [r7, #36]	; 0x24
 80062f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80062fa:	4641      	mov	r1, r8
 80062fc:	1854      	adds	r4, r2, r1
 80062fe:	4649      	mov	r1, r9
 8006300:	eb43 0501 	adc.w	r5, r3, r1
 8006304:	f04f 0200 	mov.w	r2, #0
 8006308:	f04f 0300 	mov.w	r3, #0
 800630c:	00eb      	lsls	r3, r5, #3
 800630e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006312:	00e2      	lsls	r2, r4, #3
 8006314:	4614      	mov	r4, r2
 8006316:	461d      	mov	r5, r3
 8006318:	4643      	mov	r3, r8
 800631a:	18e3      	adds	r3, r4, r3
 800631c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006320:	464b      	mov	r3, r9
 8006322:	eb45 0303 	adc.w	r3, r5, r3
 8006326:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800632a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006336:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800633a:	f04f 0200 	mov.w	r2, #0
 800633e:	f04f 0300 	mov.w	r3, #0
 8006342:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006346:	4629      	mov	r1, r5
 8006348:	008b      	lsls	r3, r1, #2
 800634a:	4621      	mov	r1, r4
 800634c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006350:	4621      	mov	r1, r4
 8006352:	008a      	lsls	r2, r1, #2
 8006354:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006358:	f7f9 ff54 	bl	8000204 <__aeabi_uldivmod>
 800635c:	4602      	mov	r2, r0
 800635e:	460b      	mov	r3, r1
 8006360:	4b60      	ldr	r3, [pc, #384]	; (80064e4 <UART_SetConfig+0x4e4>)
 8006362:	fba3 2302 	umull	r2, r3, r3, r2
 8006366:	095b      	lsrs	r3, r3, #5
 8006368:	011c      	lsls	r4, r3, #4
 800636a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800636e:	2200      	movs	r2, #0
 8006370:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006374:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006378:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800637c:	4642      	mov	r2, r8
 800637e:	464b      	mov	r3, r9
 8006380:	1891      	adds	r1, r2, r2
 8006382:	61b9      	str	r1, [r7, #24]
 8006384:	415b      	adcs	r3, r3
 8006386:	61fb      	str	r3, [r7, #28]
 8006388:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800638c:	4641      	mov	r1, r8
 800638e:	1851      	adds	r1, r2, r1
 8006390:	6139      	str	r1, [r7, #16]
 8006392:	4649      	mov	r1, r9
 8006394:	414b      	adcs	r3, r1
 8006396:	617b      	str	r3, [r7, #20]
 8006398:	f04f 0200 	mov.w	r2, #0
 800639c:	f04f 0300 	mov.w	r3, #0
 80063a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80063a4:	4659      	mov	r1, fp
 80063a6:	00cb      	lsls	r3, r1, #3
 80063a8:	4651      	mov	r1, sl
 80063aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063ae:	4651      	mov	r1, sl
 80063b0:	00ca      	lsls	r2, r1, #3
 80063b2:	4610      	mov	r0, r2
 80063b4:	4619      	mov	r1, r3
 80063b6:	4603      	mov	r3, r0
 80063b8:	4642      	mov	r2, r8
 80063ba:	189b      	adds	r3, r3, r2
 80063bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80063c0:	464b      	mov	r3, r9
 80063c2:	460a      	mov	r2, r1
 80063c4:	eb42 0303 	adc.w	r3, r2, r3
 80063c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80063cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80063d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80063d8:	f04f 0200 	mov.w	r2, #0
 80063dc:	f04f 0300 	mov.w	r3, #0
 80063e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80063e4:	4649      	mov	r1, r9
 80063e6:	008b      	lsls	r3, r1, #2
 80063e8:	4641      	mov	r1, r8
 80063ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063ee:	4641      	mov	r1, r8
 80063f0:	008a      	lsls	r2, r1, #2
 80063f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80063f6:	f7f9 ff05 	bl	8000204 <__aeabi_uldivmod>
 80063fa:	4602      	mov	r2, r0
 80063fc:	460b      	mov	r3, r1
 80063fe:	4611      	mov	r1, r2
 8006400:	4b38      	ldr	r3, [pc, #224]	; (80064e4 <UART_SetConfig+0x4e4>)
 8006402:	fba3 2301 	umull	r2, r3, r3, r1
 8006406:	095b      	lsrs	r3, r3, #5
 8006408:	2264      	movs	r2, #100	; 0x64
 800640a:	fb02 f303 	mul.w	r3, r2, r3
 800640e:	1acb      	subs	r3, r1, r3
 8006410:	011b      	lsls	r3, r3, #4
 8006412:	3332      	adds	r3, #50	; 0x32
 8006414:	4a33      	ldr	r2, [pc, #204]	; (80064e4 <UART_SetConfig+0x4e4>)
 8006416:	fba2 2303 	umull	r2, r3, r2, r3
 800641a:	095b      	lsrs	r3, r3, #5
 800641c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006420:	441c      	add	r4, r3
 8006422:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006426:	2200      	movs	r2, #0
 8006428:	673b      	str	r3, [r7, #112]	; 0x70
 800642a:	677a      	str	r2, [r7, #116]	; 0x74
 800642c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006430:	4642      	mov	r2, r8
 8006432:	464b      	mov	r3, r9
 8006434:	1891      	adds	r1, r2, r2
 8006436:	60b9      	str	r1, [r7, #8]
 8006438:	415b      	adcs	r3, r3
 800643a:	60fb      	str	r3, [r7, #12]
 800643c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006440:	4641      	mov	r1, r8
 8006442:	1851      	adds	r1, r2, r1
 8006444:	6039      	str	r1, [r7, #0]
 8006446:	4649      	mov	r1, r9
 8006448:	414b      	adcs	r3, r1
 800644a:	607b      	str	r3, [r7, #4]
 800644c:	f04f 0200 	mov.w	r2, #0
 8006450:	f04f 0300 	mov.w	r3, #0
 8006454:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006458:	4659      	mov	r1, fp
 800645a:	00cb      	lsls	r3, r1, #3
 800645c:	4651      	mov	r1, sl
 800645e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006462:	4651      	mov	r1, sl
 8006464:	00ca      	lsls	r2, r1, #3
 8006466:	4610      	mov	r0, r2
 8006468:	4619      	mov	r1, r3
 800646a:	4603      	mov	r3, r0
 800646c:	4642      	mov	r2, r8
 800646e:	189b      	adds	r3, r3, r2
 8006470:	66bb      	str	r3, [r7, #104]	; 0x68
 8006472:	464b      	mov	r3, r9
 8006474:	460a      	mov	r2, r1
 8006476:	eb42 0303 	adc.w	r3, r2, r3
 800647a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800647c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	663b      	str	r3, [r7, #96]	; 0x60
 8006486:	667a      	str	r2, [r7, #100]	; 0x64
 8006488:	f04f 0200 	mov.w	r2, #0
 800648c:	f04f 0300 	mov.w	r3, #0
 8006490:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006494:	4649      	mov	r1, r9
 8006496:	008b      	lsls	r3, r1, #2
 8006498:	4641      	mov	r1, r8
 800649a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800649e:	4641      	mov	r1, r8
 80064a0:	008a      	lsls	r2, r1, #2
 80064a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80064a6:	f7f9 fead 	bl	8000204 <__aeabi_uldivmod>
 80064aa:	4602      	mov	r2, r0
 80064ac:	460b      	mov	r3, r1
 80064ae:	4b0d      	ldr	r3, [pc, #52]	; (80064e4 <UART_SetConfig+0x4e4>)
 80064b0:	fba3 1302 	umull	r1, r3, r3, r2
 80064b4:	095b      	lsrs	r3, r3, #5
 80064b6:	2164      	movs	r1, #100	; 0x64
 80064b8:	fb01 f303 	mul.w	r3, r1, r3
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	011b      	lsls	r3, r3, #4
 80064c0:	3332      	adds	r3, #50	; 0x32
 80064c2:	4a08      	ldr	r2, [pc, #32]	; (80064e4 <UART_SetConfig+0x4e4>)
 80064c4:	fba2 2303 	umull	r2, r3, r2, r3
 80064c8:	095b      	lsrs	r3, r3, #5
 80064ca:	f003 020f 	and.w	r2, r3, #15
 80064ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4422      	add	r2, r4
 80064d6:	609a      	str	r2, [r3, #8]
}
 80064d8:	bf00      	nop
 80064da:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80064de:	46bd      	mov	sp, r7
 80064e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064e4:	51eb851f 	.word	0x51eb851f

080064e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80064e8:	b084      	sub	sp, #16
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b084      	sub	sp, #16
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
 80064f2:	f107 001c 	add.w	r0, r7, #28
 80064f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80064fa:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d123      	bne.n	800654a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006506:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006516:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800652a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800652e:	2b01      	cmp	r3, #1
 8006530:	d105      	bne.n	800653e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f001 fae2 	bl	8007b08 <USB_CoreReset>
 8006544:	4603      	mov	r3, r0
 8006546:	73fb      	strb	r3, [r7, #15]
 8006548:	e01b      	b.n	8006582 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f001 fad6 	bl	8007b08 <USB_CoreReset>
 800655c:	4603      	mov	r3, r0
 800655e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006560:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006564:	2b00      	cmp	r3, #0
 8006566:	d106      	bne.n	8006576 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	639a      	str	r2, [r3, #56]	; 0x38
 8006574:	e005      	b.n	8006582 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800657a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006582:	7fbb      	ldrb	r3, [r7, #30]
 8006584:	2b01      	cmp	r3, #1
 8006586:	d10b      	bne.n	80065a0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	f043 0206 	orr.w	r2, r3, #6
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f043 0220 	orr.w	r2, r3, #32
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80065a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3710      	adds	r7, #16
 80065a6:	46bd      	mov	sp, r7
 80065a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065ac:	b004      	add	sp, #16
 80065ae:	4770      	bx	lr

080065b0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b087      	sub	sp, #28
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	4613      	mov	r3, r2
 80065bc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80065be:	79fb      	ldrb	r3, [r7, #7]
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	d165      	bne.n	8006690 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	4a41      	ldr	r2, [pc, #260]	; (80066cc <USB_SetTurnaroundTime+0x11c>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d906      	bls.n	80065da <USB_SetTurnaroundTime+0x2a>
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	4a40      	ldr	r2, [pc, #256]	; (80066d0 <USB_SetTurnaroundTime+0x120>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d202      	bcs.n	80065da <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80065d4:	230f      	movs	r3, #15
 80065d6:	617b      	str	r3, [r7, #20]
 80065d8:	e062      	b.n	80066a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	4a3c      	ldr	r2, [pc, #240]	; (80066d0 <USB_SetTurnaroundTime+0x120>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d306      	bcc.n	80065f0 <USB_SetTurnaroundTime+0x40>
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	4a3b      	ldr	r2, [pc, #236]	; (80066d4 <USB_SetTurnaroundTime+0x124>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d202      	bcs.n	80065f0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80065ea:	230e      	movs	r3, #14
 80065ec:	617b      	str	r3, [r7, #20]
 80065ee:	e057      	b.n	80066a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	4a38      	ldr	r2, [pc, #224]	; (80066d4 <USB_SetTurnaroundTime+0x124>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d306      	bcc.n	8006606 <USB_SetTurnaroundTime+0x56>
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	4a37      	ldr	r2, [pc, #220]	; (80066d8 <USB_SetTurnaroundTime+0x128>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d202      	bcs.n	8006606 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006600:	230d      	movs	r3, #13
 8006602:	617b      	str	r3, [r7, #20]
 8006604:	e04c      	b.n	80066a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	4a33      	ldr	r2, [pc, #204]	; (80066d8 <USB_SetTurnaroundTime+0x128>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d306      	bcc.n	800661c <USB_SetTurnaroundTime+0x6c>
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	4a32      	ldr	r2, [pc, #200]	; (80066dc <USB_SetTurnaroundTime+0x12c>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d802      	bhi.n	800661c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006616:	230c      	movs	r3, #12
 8006618:	617b      	str	r3, [r7, #20]
 800661a:	e041      	b.n	80066a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	4a2f      	ldr	r2, [pc, #188]	; (80066dc <USB_SetTurnaroundTime+0x12c>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d906      	bls.n	8006632 <USB_SetTurnaroundTime+0x82>
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	4a2e      	ldr	r2, [pc, #184]	; (80066e0 <USB_SetTurnaroundTime+0x130>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d802      	bhi.n	8006632 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800662c:	230b      	movs	r3, #11
 800662e:	617b      	str	r3, [r7, #20]
 8006630:	e036      	b.n	80066a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	4a2a      	ldr	r2, [pc, #168]	; (80066e0 <USB_SetTurnaroundTime+0x130>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d906      	bls.n	8006648 <USB_SetTurnaroundTime+0x98>
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	4a29      	ldr	r2, [pc, #164]	; (80066e4 <USB_SetTurnaroundTime+0x134>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d802      	bhi.n	8006648 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006642:	230a      	movs	r3, #10
 8006644:	617b      	str	r3, [r7, #20]
 8006646:	e02b      	b.n	80066a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	4a26      	ldr	r2, [pc, #152]	; (80066e4 <USB_SetTurnaroundTime+0x134>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d906      	bls.n	800665e <USB_SetTurnaroundTime+0xae>
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	4a25      	ldr	r2, [pc, #148]	; (80066e8 <USB_SetTurnaroundTime+0x138>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d202      	bcs.n	800665e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006658:	2309      	movs	r3, #9
 800665a:	617b      	str	r3, [r7, #20]
 800665c:	e020      	b.n	80066a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	4a21      	ldr	r2, [pc, #132]	; (80066e8 <USB_SetTurnaroundTime+0x138>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d306      	bcc.n	8006674 <USB_SetTurnaroundTime+0xc4>
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	4a20      	ldr	r2, [pc, #128]	; (80066ec <USB_SetTurnaroundTime+0x13c>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d802      	bhi.n	8006674 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800666e:	2308      	movs	r3, #8
 8006670:	617b      	str	r3, [r7, #20]
 8006672:	e015      	b.n	80066a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	4a1d      	ldr	r2, [pc, #116]	; (80066ec <USB_SetTurnaroundTime+0x13c>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d906      	bls.n	800668a <USB_SetTurnaroundTime+0xda>
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	4a1c      	ldr	r2, [pc, #112]	; (80066f0 <USB_SetTurnaroundTime+0x140>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d202      	bcs.n	800668a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006684:	2307      	movs	r3, #7
 8006686:	617b      	str	r3, [r7, #20]
 8006688:	e00a      	b.n	80066a0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800668a:	2306      	movs	r3, #6
 800668c:	617b      	str	r3, [r7, #20]
 800668e:	e007      	b.n	80066a0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006690:	79fb      	ldrb	r3, [r7, #7]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d102      	bne.n	800669c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006696:	2309      	movs	r3, #9
 8006698:	617b      	str	r3, [r7, #20]
 800669a:	e001      	b.n	80066a0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800669c:	2309      	movs	r3, #9
 800669e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	68da      	ldr	r2, [r3, #12]
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	029b      	lsls	r3, r3, #10
 80066b4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80066b8:	431a      	orrs	r2, r3
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	371c      	adds	r7, #28
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr
 80066cc:	00d8acbf 	.word	0x00d8acbf
 80066d0:	00e4e1c0 	.word	0x00e4e1c0
 80066d4:	00f42400 	.word	0x00f42400
 80066d8:	01067380 	.word	0x01067380
 80066dc:	011a499f 	.word	0x011a499f
 80066e0:	01312cff 	.word	0x01312cff
 80066e4:	014ca43f 	.word	0x014ca43f
 80066e8:	016e3600 	.word	0x016e3600
 80066ec:	01a6ab1f 	.word	0x01a6ab1f
 80066f0:	01e84800 	.word	0x01e84800

080066f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	f043 0201 	orr.w	r2, r3, #1
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	370c      	adds	r7, #12
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr

08006716 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006716:	b480      	push	{r7}
 8006718:	b083      	sub	sp, #12
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	f023 0201 	bic.w	r2, r3, #1
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	370c      	adds	r7, #12
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	460b      	mov	r3, r1
 8006742:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006744:	2300      	movs	r3, #0
 8006746:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006754:	78fb      	ldrb	r3, [r7, #3]
 8006756:	2b01      	cmp	r3, #1
 8006758:	d115      	bne.n	8006786 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006766:	200a      	movs	r0, #10
 8006768:	f7fa fe72 	bl	8001450 <HAL_Delay>
      ms += 10U;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	330a      	adds	r3, #10
 8006770:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f001 f939 	bl	80079ea <USB_GetMode>
 8006778:	4603      	mov	r3, r0
 800677a:	2b01      	cmp	r3, #1
 800677c:	d01e      	beq.n	80067bc <USB_SetCurrentMode+0x84>
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2bc7      	cmp	r3, #199	; 0xc7
 8006782:	d9f0      	bls.n	8006766 <USB_SetCurrentMode+0x2e>
 8006784:	e01a      	b.n	80067bc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006786:	78fb      	ldrb	r3, [r7, #3]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d115      	bne.n	80067b8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006798:	200a      	movs	r0, #10
 800679a:	f7fa fe59 	bl	8001450 <HAL_Delay>
      ms += 10U;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	330a      	adds	r3, #10
 80067a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f001 f920 	bl	80079ea <USB_GetMode>
 80067aa:	4603      	mov	r3, r0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d005      	beq.n	80067bc <USB_SetCurrentMode+0x84>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2bc7      	cmp	r3, #199	; 0xc7
 80067b4:	d9f0      	bls.n	8006798 <USB_SetCurrentMode+0x60>
 80067b6:	e001      	b.n	80067bc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	e005      	b.n	80067c8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2bc8      	cmp	r3, #200	; 0xc8
 80067c0:	d101      	bne.n	80067c6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e000      	b.n	80067c8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80067c6:	2300      	movs	r3, #0
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3710      	adds	r7, #16
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80067d0:	b084      	sub	sp, #16
 80067d2:	b580      	push	{r7, lr}
 80067d4:	b086      	sub	sp, #24
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
 80067da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80067de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80067e2:	2300      	movs	r3, #0
 80067e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80067ea:	2300      	movs	r3, #0
 80067ec:	613b      	str	r3, [r7, #16]
 80067ee:	e009      	b.n	8006804 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	3340      	adds	r3, #64	; 0x40
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4413      	add	r3, r2
 80067fa:	2200      	movs	r2, #0
 80067fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	3301      	adds	r3, #1
 8006802:	613b      	str	r3, [r7, #16]
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	2b0e      	cmp	r3, #14
 8006808:	d9f2      	bls.n	80067f0 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800680a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800680e:	2b00      	cmp	r3, #0
 8006810:	d11c      	bne.n	800684c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006820:	f043 0302 	orr.w	r3, r3, #2
 8006824:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	601a      	str	r2, [r3, #0]
 800684a:	e005      	b.n	8006858 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006850:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800685e:	461a      	mov	r2, r3
 8006860:	2300      	movs	r3, #0
 8006862:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006864:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006868:	2b01      	cmp	r3, #1
 800686a:	d10d      	bne.n	8006888 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800686c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006870:	2b00      	cmp	r3, #0
 8006872:	d104      	bne.n	800687e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006874:	2100      	movs	r1, #0
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 f968 	bl	8006b4c <USB_SetDevSpeed>
 800687c:	e008      	b.n	8006890 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800687e:	2101      	movs	r1, #1
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 f963 	bl	8006b4c <USB_SetDevSpeed>
 8006886:	e003      	b.n	8006890 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006888:	2103      	movs	r1, #3
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 f95e 	bl	8006b4c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006890:	2110      	movs	r1, #16
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 f8fa 	bl	8006a8c <USB_FlushTxFifo>
 8006898:	4603      	mov	r3, r0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d001      	beq.n	80068a2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 f924 	bl	8006af0 <USB_FlushRxFifo>
 80068a8:	4603      	mov	r3, r0
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d001      	beq.n	80068b2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068b8:	461a      	mov	r2, r3
 80068ba:	2300      	movs	r3, #0
 80068bc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068c4:	461a      	mov	r2, r3
 80068c6:	2300      	movs	r3, #0
 80068c8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068d0:	461a      	mov	r2, r3
 80068d2:	2300      	movs	r3, #0
 80068d4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068d6:	2300      	movs	r3, #0
 80068d8:	613b      	str	r3, [r7, #16]
 80068da:	e043      	b.n	8006964 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	015a      	lsls	r2, r3, #5
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	4413      	add	r3, r2
 80068e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068f2:	d118      	bne.n	8006926 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d10a      	bne.n	8006910 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	015a      	lsls	r2, r3, #5
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	4413      	add	r3, r2
 8006902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006906:	461a      	mov	r2, r3
 8006908:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800690c:	6013      	str	r3, [r2, #0]
 800690e:	e013      	b.n	8006938 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	015a      	lsls	r2, r3, #5
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	4413      	add	r3, r2
 8006918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800691c:	461a      	mov	r2, r3
 800691e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006922:	6013      	str	r3, [r2, #0]
 8006924:	e008      	b.n	8006938 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	015a      	lsls	r2, r3, #5
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	4413      	add	r3, r2
 800692e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006932:	461a      	mov	r2, r3
 8006934:	2300      	movs	r3, #0
 8006936:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	015a      	lsls	r2, r3, #5
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	4413      	add	r3, r2
 8006940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006944:	461a      	mov	r2, r3
 8006946:	2300      	movs	r3, #0
 8006948:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	015a      	lsls	r2, r3, #5
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	4413      	add	r3, r2
 8006952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006956:	461a      	mov	r2, r3
 8006958:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800695c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	3301      	adds	r3, #1
 8006962:	613b      	str	r3, [r7, #16]
 8006964:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006968:	461a      	mov	r2, r3
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	4293      	cmp	r3, r2
 800696e:	d3b5      	bcc.n	80068dc <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006970:	2300      	movs	r3, #0
 8006972:	613b      	str	r3, [r7, #16]
 8006974:	e043      	b.n	80069fe <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	015a      	lsls	r2, r3, #5
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	4413      	add	r3, r2
 800697e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006988:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800698c:	d118      	bne.n	80069c0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d10a      	bne.n	80069aa <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	015a      	lsls	r2, r3, #5
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	4413      	add	r3, r2
 800699c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069a0:	461a      	mov	r2, r3
 80069a2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80069a6:	6013      	str	r3, [r2, #0]
 80069a8:	e013      	b.n	80069d2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	015a      	lsls	r2, r3, #5
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	4413      	add	r3, r2
 80069b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b6:	461a      	mov	r2, r3
 80069b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80069bc:	6013      	str	r3, [r2, #0]
 80069be:	e008      	b.n	80069d2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	015a      	lsls	r2, r3, #5
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	4413      	add	r3, r2
 80069c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069cc:	461a      	mov	r2, r3
 80069ce:	2300      	movs	r3, #0
 80069d0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	015a      	lsls	r2, r3, #5
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	4413      	add	r3, r2
 80069da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069de:	461a      	mov	r2, r3
 80069e0:	2300      	movs	r3, #0
 80069e2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	015a      	lsls	r2, r3, #5
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	4413      	add	r3, r2
 80069ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069f0:	461a      	mov	r2, r3
 80069f2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80069f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	3301      	adds	r3, #1
 80069fc:	613b      	str	r3, [r7, #16]
 80069fe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006a02:	461a      	mov	r2, r3
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d3b5      	bcc.n	8006976 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a1c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006a2a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006a2c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d105      	bne.n	8006a40 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	699b      	ldr	r3, [r3, #24]
 8006a38:	f043 0210 	orr.w	r2, r3, #16
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	699a      	ldr	r2, [r3, #24]
 8006a44:	4b10      	ldr	r3, [pc, #64]	; (8006a88 <USB_DevInit+0x2b8>)
 8006a46:	4313      	orrs	r3, r2
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006a4c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d005      	beq.n	8006a60 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	f043 0208 	orr.w	r2, r3, #8
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006a60:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d107      	bne.n	8006a78 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	699b      	ldr	r3, [r3, #24]
 8006a6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a70:	f043 0304 	orr.w	r3, r3, #4
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006a78:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3718      	adds	r7, #24
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a84:	b004      	add	sp, #16
 8006a86:	4770      	bx	lr
 8006a88:	803c3800 	.word	0x803c3800

08006a8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006a96:	2300      	movs	r3, #0
 8006a98:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006aa6:	d901      	bls.n	8006aac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006aa8:	2303      	movs	r3, #3
 8006aaa:	e01b      	b.n	8006ae4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	691b      	ldr	r3, [r3, #16]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	daf2      	bge.n	8006a9a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	019b      	lsls	r3, r3, #6
 8006abc:	f043 0220 	orr.w	r2, r3, #32
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006ad0:	d901      	bls.n	8006ad6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006ad2:	2303      	movs	r3, #3
 8006ad4:	e006      	b.n	8006ae4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	f003 0320 	and.w	r3, r3, #32
 8006ade:	2b20      	cmp	r3, #32
 8006ae0:	d0f0      	beq.n	8006ac4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3714      	adds	r7, #20
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b085      	sub	sp, #20
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006af8:	2300      	movs	r3, #0
 8006afa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	3301      	adds	r3, #1
 8006b00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006b08:	d901      	bls.n	8006b0e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	e018      	b.n	8006b40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	daf2      	bge.n	8006afc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006b16:	2300      	movs	r3, #0
 8006b18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2210      	movs	r2, #16
 8006b1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	3301      	adds	r3, #1
 8006b24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006b2c:	d901      	bls.n	8006b32 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	e006      	b.n	8006b40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	f003 0310 	and.w	r3, r3, #16
 8006b3a:	2b10      	cmp	r3, #16
 8006b3c:	d0f0      	beq.n	8006b20 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006b3e:	2300      	movs	r3, #0
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3714      	adds	r7, #20
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b085      	sub	sp, #20
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	460b      	mov	r3, r1
 8006b56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	78fb      	ldrb	r3, [r7, #3]
 8006b66:	68f9      	ldr	r1, [r7, #12]
 8006b68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3714      	adds	r7, #20
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr

08006b7e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b7e:	b480      	push	{r7}
 8006b80:	b087      	sub	sp, #28
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	f003 0306 	and.w	r3, r3, #6
 8006b96:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d102      	bne.n	8006ba4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	75fb      	strb	r3, [r7, #23]
 8006ba2:	e00a      	b.n	8006bba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	d002      	beq.n	8006bb0 <USB_GetDevSpeed+0x32>
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2b06      	cmp	r3, #6
 8006bae:	d102      	bne.n	8006bb6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006bb0:	2302      	movs	r3, #2
 8006bb2:	75fb      	strb	r3, [r7, #23]
 8006bb4:	e001      	b.n	8006bba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006bb6:	230f      	movs	r3, #15
 8006bb8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	371c      	adds	r7, #28
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b085      	sub	sp, #20
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	785b      	ldrb	r3, [r3, #1]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d13a      	bne.n	8006c5a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bea:	69da      	ldr	r2, [r3, #28]
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	f003 030f 	and.w	r3, r3, #15
 8006bf4:	2101      	movs	r1, #1
 8006bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	68f9      	ldr	r1, [r7, #12]
 8006bfe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c02:	4313      	orrs	r3, r2
 8006c04:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	015a      	lsls	r2, r3, #5
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d155      	bne.n	8006cc8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	015a      	lsls	r2, r3, #5
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	4413      	add	r3, r2
 8006c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	791b      	ldrb	r3, [r3, #4]
 8006c36:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006c38:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	059b      	lsls	r3, r3, #22
 8006c3e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006c40:	4313      	orrs	r3, r2
 8006c42:	68ba      	ldr	r2, [r7, #8]
 8006c44:	0151      	lsls	r1, r2, #5
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	440a      	add	r2, r1
 8006c4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c56:	6013      	str	r3, [r2, #0]
 8006c58:	e036      	b.n	8006cc8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c60:	69da      	ldr	r2, [r3, #28]
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	f003 030f 	and.w	r3, r3, #15
 8006c6a:	2101      	movs	r1, #1
 8006c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c70:	041b      	lsls	r3, r3, #16
 8006c72:	68f9      	ldr	r1, [r7, #12]
 8006c74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	015a      	lsls	r2, r3, #5
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	4413      	add	r3, r2
 8006c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d11a      	bne.n	8006cc8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	015a      	lsls	r2, r3, #5
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	4413      	add	r3, r2
 8006c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	791b      	ldrb	r3, [r3, #4]
 8006cac:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006cae:	430b      	orrs	r3, r1
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	68ba      	ldr	r2, [r7, #8]
 8006cb4:	0151      	lsls	r1, r2, #5
 8006cb6:	68fa      	ldr	r2, [r7, #12]
 8006cb8:	440a      	add	r2, r1
 8006cba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cc6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3714      	adds	r7, #20
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr
	...

08006cd8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	785b      	ldrb	r3, [r3, #1]
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d161      	bne.n	8006db8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	015a      	lsls	r2, r3, #5
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d0a:	d11f      	bne.n	8006d4c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	015a      	lsls	r2, r3, #5
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	4413      	add	r3, r2
 8006d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	68ba      	ldr	r2, [r7, #8]
 8006d1c:	0151      	lsls	r1, r2, #5
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	440a      	add	r2, r1
 8006d22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006d2a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	015a      	lsls	r2, r3, #5
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	4413      	add	r3, r2
 8006d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	68ba      	ldr	r2, [r7, #8]
 8006d3c:	0151      	lsls	r1, r2, #5
 8006d3e:	68fa      	ldr	r2, [r7, #12]
 8006d40:	440a      	add	r2, r1
 8006d42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	f003 030f 	and.w	r3, r3, #15
 8006d5c:	2101      	movs	r1, #1
 8006d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	43db      	mvns	r3, r3
 8006d66:	68f9      	ldr	r1, [r7, #12]
 8006d68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d76:	69da      	ldr	r2, [r3, #28]
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	f003 030f 	and.w	r3, r3, #15
 8006d80:	2101      	movs	r1, #1
 8006d82:	fa01 f303 	lsl.w	r3, r1, r3
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	43db      	mvns	r3, r3
 8006d8a:	68f9      	ldr	r1, [r7, #12]
 8006d8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d90:	4013      	ands	r3, r2
 8006d92:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	015a      	lsls	r2, r3, #5
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	4413      	add	r3, r2
 8006d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	0159      	lsls	r1, r3, #5
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	440b      	add	r3, r1
 8006daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dae:	4619      	mov	r1, r3
 8006db0:	4b35      	ldr	r3, [pc, #212]	; (8006e88 <USB_DeactivateEndpoint+0x1b0>)
 8006db2:	4013      	ands	r3, r2
 8006db4:	600b      	str	r3, [r1, #0]
 8006db6:	e060      	b.n	8006e7a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	015a      	lsls	r2, r3, #5
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	4413      	add	r3, r2
 8006dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006dca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006dce:	d11f      	bne.n	8006e10 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	015a      	lsls	r2, r3, #5
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	68ba      	ldr	r2, [r7, #8]
 8006de0:	0151      	lsls	r1, r2, #5
 8006de2:	68fa      	ldr	r2, [r7, #12]
 8006de4:	440a      	add	r2, r1
 8006de6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006dee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	015a      	lsls	r2, r3, #5
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	4413      	add	r3, r2
 8006df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68ba      	ldr	r2, [r7, #8]
 8006e00:	0151      	lsls	r1, r2, #5
 8006e02:	68fa      	ldr	r2, [r7, #12]
 8006e04:	440a      	add	r2, r1
 8006e06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	f003 030f 	and.w	r3, r3, #15
 8006e20:	2101      	movs	r1, #1
 8006e22:	fa01 f303 	lsl.w	r3, r1, r3
 8006e26:	041b      	lsls	r3, r3, #16
 8006e28:	43db      	mvns	r3, r3
 8006e2a:	68f9      	ldr	r1, [r7, #12]
 8006e2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e30:	4013      	ands	r3, r2
 8006e32:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e3a:	69da      	ldr	r2, [r3, #28]
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	f003 030f 	and.w	r3, r3, #15
 8006e44:	2101      	movs	r1, #1
 8006e46:	fa01 f303 	lsl.w	r3, r1, r3
 8006e4a:	041b      	lsls	r3, r3, #16
 8006e4c:	43db      	mvns	r3, r3
 8006e4e:	68f9      	ldr	r1, [r7, #12]
 8006e50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e54:	4013      	ands	r3, r2
 8006e56:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	015a      	lsls	r2, r3, #5
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	4413      	add	r3, r2
 8006e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	0159      	lsls	r1, r3, #5
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	440b      	add	r3, r1
 8006e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e72:	4619      	mov	r1, r3
 8006e74:	4b05      	ldr	r3, [pc, #20]	; (8006e8c <USB_DeactivateEndpoint+0x1b4>)
 8006e76:	4013      	ands	r3, r2
 8006e78:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3714      	adds	r7, #20
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr
 8006e88:	ec337800 	.word	0xec337800
 8006e8c:	eff37800 	.word	0xeff37800

08006e90 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b08a      	sub	sp, #40	; 0x28
 8006e94:	af02      	add	r7, sp, #8
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	4613      	mov	r3, r2
 8006e9c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	785b      	ldrb	r3, [r3, #1]
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	f040 8180 	bne.w	80071b2 <USB_EPStartXfer+0x322>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d132      	bne.n	8006f20 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	015a      	lsls	r2, r3, #5
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	69ba      	ldr	r2, [r7, #24]
 8006eca:	0151      	lsls	r1, r2, #5
 8006ecc:	69fa      	ldr	r2, [r7, #28]
 8006ece:	440a      	add	r2, r1
 8006ed0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ed4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ed8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006edc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	015a      	lsls	r2, r3, #5
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eea:	691b      	ldr	r3, [r3, #16]
 8006eec:	69ba      	ldr	r2, [r7, #24]
 8006eee:	0151      	lsls	r1, r2, #5
 8006ef0:	69fa      	ldr	r2, [r7, #28]
 8006ef2:	440a      	add	r2, r1
 8006ef4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ef8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006efc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	015a      	lsls	r2, r3, #5
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	4413      	add	r3, r2
 8006f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	69ba      	ldr	r2, [r7, #24]
 8006f0e:	0151      	lsls	r1, r2, #5
 8006f10:	69fa      	ldr	r2, [r7, #28]
 8006f12:	440a      	add	r2, r1
 8006f14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f18:	0cdb      	lsrs	r3, r3, #19
 8006f1a:	04db      	lsls	r3, r3, #19
 8006f1c:	6113      	str	r3, [r2, #16]
 8006f1e:	e098      	b.n	8007052 <USB_EPStartXfer+0x1c2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	015a      	lsls	r2, r3, #5
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	4413      	add	r3, r2
 8006f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	69ba      	ldr	r2, [r7, #24]
 8006f30:	0151      	lsls	r1, r2, #5
 8006f32:	69fa      	ldr	r2, [r7, #28]
 8006f34:	440a      	add	r2, r1
 8006f36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f3a:	0cdb      	lsrs	r3, r3, #19
 8006f3c:	04db      	lsls	r3, r3, #19
 8006f3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	015a      	lsls	r2, r3, #5
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	4413      	add	r3, r2
 8006f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	69ba      	ldr	r2, [r7, #24]
 8006f50:	0151      	lsls	r1, r2, #5
 8006f52:	69fa      	ldr	r2, [r7, #28]
 8006f54:	440a      	add	r2, r1
 8006f56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f5a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f5e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f62:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d11a      	bne.n	8006fa0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	691a      	ldr	r2, [r3, #16]
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d903      	bls.n	8006f7e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	689a      	ldr	r2, [r3, #8]
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	015a      	lsls	r2, r3, #5
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	4413      	add	r3, r2
 8006f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	69ba      	ldr	r2, [r7, #24]
 8006f8e:	0151      	lsls	r1, r2, #5
 8006f90:	69fa      	ldr	r2, [r7, #28]
 8006f92:	440a      	add	r2, r1
 8006f94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f9c:	6113      	str	r3, [r2, #16]
 8006f9e:	e045      	b.n	800702c <USB_EPStartXfer+0x19c>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	691a      	ldr	r2, [r3, #16]
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	4413      	add	r3, r2
 8006faa:	1e5a      	subs	r2, r3, #1
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fb4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	015a      	lsls	r2, r3, #5
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fc2:	691a      	ldr	r2, [r3, #16]
 8006fc4:	8afb      	ldrh	r3, [r7, #22]
 8006fc6:	04db      	lsls	r3, r3, #19
 8006fc8:	4619      	mov	r1, r3
 8006fca:	4ba4      	ldr	r3, [pc, #656]	; (800725c <USB_EPStartXfer+0x3cc>)
 8006fcc:	400b      	ands	r3, r1
 8006fce:	69b9      	ldr	r1, [r7, #24]
 8006fd0:	0148      	lsls	r0, r1, #5
 8006fd2:	69f9      	ldr	r1, [r7, #28]
 8006fd4:	4401      	add	r1, r0
 8006fd6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	791b      	ldrb	r3, [r3, #4]
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d122      	bne.n	800702c <USB_EPStartXfer+0x19c>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006fe6:	69bb      	ldr	r3, [r7, #24]
 8006fe8:	015a      	lsls	r2, r3, #5
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	4413      	add	r3, r2
 8006fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	69ba      	ldr	r2, [r7, #24]
 8006ff6:	0151      	lsls	r1, r2, #5
 8006ff8:	69fa      	ldr	r2, [r7, #28]
 8006ffa:	440a      	add	r2, r1
 8006ffc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007000:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007004:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	015a      	lsls	r2, r3, #5
 800700a:	69fb      	ldr	r3, [r7, #28]
 800700c:	4413      	add	r3, r2
 800700e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007012:	691a      	ldr	r2, [r3, #16]
 8007014:	8afb      	ldrh	r3, [r7, #22]
 8007016:	075b      	lsls	r3, r3, #29
 8007018:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 800701c:	69b9      	ldr	r1, [r7, #24]
 800701e:	0148      	lsls	r0, r1, #5
 8007020:	69f9      	ldr	r1, [r7, #28]
 8007022:	4401      	add	r1, r0
 8007024:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007028:	4313      	orrs	r3, r2
 800702a:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800702c:	69bb      	ldr	r3, [r7, #24]
 800702e:	015a      	lsls	r2, r3, #5
 8007030:	69fb      	ldr	r3, [r7, #28]
 8007032:	4413      	add	r3, r2
 8007034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007038:	691a      	ldr	r2, [r3, #16]
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	691b      	ldr	r3, [r3, #16]
 800703e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007042:	69b9      	ldr	r1, [r7, #24]
 8007044:	0148      	lsls	r0, r1, #5
 8007046:	69f9      	ldr	r1, [r7, #28]
 8007048:	4401      	add	r1, r0
 800704a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800704e:	4313      	orrs	r3, r2
 8007050:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007052:	79fb      	ldrb	r3, [r7, #7]
 8007054:	2b01      	cmp	r3, #1
 8007056:	d14b      	bne.n	80070f0 <USB_EPStartXfer+0x260>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	69db      	ldr	r3, [r3, #28]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d009      	beq.n	8007074 <USB_EPStartXfer+0x1e4>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	015a      	lsls	r2, r3, #5
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	4413      	add	r3, r2
 8007068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800706c:	461a      	mov	r2, r3
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	69db      	ldr	r3, [r3, #28]
 8007072:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	791b      	ldrb	r3, [r3, #4]
 8007078:	2b01      	cmp	r3, #1
 800707a:	d128      	bne.n	80070ce <USB_EPStartXfer+0x23e>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007088:	2b00      	cmp	r3, #0
 800708a:	d110      	bne.n	80070ae <USB_EPStartXfer+0x21e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	015a      	lsls	r2, r3, #5
 8007090:	69fb      	ldr	r3, [r7, #28]
 8007092:	4413      	add	r3, r2
 8007094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	69ba      	ldr	r2, [r7, #24]
 800709c:	0151      	lsls	r1, r2, #5
 800709e:	69fa      	ldr	r2, [r7, #28]
 80070a0:	440a      	add	r2, r1
 80070a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80070aa:	6013      	str	r3, [r2, #0]
 80070ac:	e00f      	b.n	80070ce <USB_EPStartXfer+0x23e>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	015a      	lsls	r2, r3, #5
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	4413      	add	r3, r2
 80070b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	69ba      	ldr	r2, [r7, #24]
 80070be:	0151      	lsls	r1, r2, #5
 80070c0:	69fa      	ldr	r2, [r7, #28]
 80070c2:	440a      	add	r2, r1
 80070c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070cc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	015a      	lsls	r2, r3, #5
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	4413      	add	r3, r2
 80070d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	69ba      	ldr	r2, [r7, #24]
 80070de:	0151      	lsls	r1, r2, #5
 80070e0:	69fa      	ldr	r2, [r7, #28]
 80070e2:	440a      	add	r2, r1
 80070e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80070ec:	6013      	str	r3, [r2, #0]
 80070ee:	e165      	b.n	80073bc <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80070f0:	69bb      	ldr	r3, [r7, #24]
 80070f2:	015a      	lsls	r2, r3, #5
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	4413      	add	r3, r2
 80070f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	69ba      	ldr	r2, [r7, #24]
 8007100:	0151      	lsls	r1, r2, #5
 8007102:	69fa      	ldr	r2, [r7, #28]
 8007104:	440a      	add	r2, r1
 8007106:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800710a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800710e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	791b      	ldrb	r3, [r3, #4]
 8007114:	2b01      	cmp	r3, #1
 8007116:	d015      	beq.n	8007144 <USB_EPStartXfer+0x2b4>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	691b      	ldr	r3, [r3, #16]
 800711c:	2b00      	cmp	r3, #0
 800711e:	f000 814d 	beq.w	80073bc <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007122:	69fb      	ldr	r3, [r7, #28]
 8007124:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007128:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	f003 030f 	and.w	r3, r3, #15
 8007132:	2101      	movs	r1, #1
 8007134:	fa01 f303 	lsl.w	r3, r1, r3
 8007138:	69f9      	ldr	r1, [r7, #28]
 800713a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800713e:	4313      	orrs	r3, r2
 8007140:	634b      	str	r3, [r1, #52]	; 0x34
 8007142:	e13b      	b.n	80073bc <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007150:	2b00      	cmp	r3, #0
 8007152:	d110      	bne.n	8007176 <USB_EPStartXfer+0x2e6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007154:	69bb      	ldr	r3, [r7, #24]
 8007156:	015a      	lsls	r2, r3, #5
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	4413      	add	r3, r2
 800715c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	69ba      	ldr	r2, [r7, #24]
 8007164:	0151      	lsls	r1, r2, #5
 8007166:	69fa      	ldr	r2, [r7, #28]
 8007168:	440a      	add	r2, r1
 800716a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800716e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007172:	6013      	str	r3, [r2, #0]
 8007174:	e00f      	b.n	8007196 <USB_EPStartXfer+0x306>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	015a      	lsls	r2, r3, #5
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	4413      	add	r3, r2
 800717e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	69ba      	ldr	r2, [r7, #24]
 8007186:	0151      	lsls	r1, r2, #5
 8007188:	69fa      	ldr	r2, [r7, #28]
 800718a:	440a      	add	r2, r1
 800718c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007194:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	68d9      	ldr	r1, [r3, #12]
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	781a      	ldrb	r2, [r3, #0]
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	b298      	uxth	r0, r3
 80071a4:	79fb      	ldrb	r3, [r7, #7]
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	4603      	mov	r3, r0
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	f000 f9b8 	bl	8007520 <USB_WritePacket>
 80071b0:	e104      	b.n	80073bc <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	015a      	lsls	r2, r3, #5
 80071b6:	69fb      	ldr	r3, [r7, #28]
 80071b8:	4413      	add	r3, r2
 80071ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071be:	691b      	ldr	r3, [r3, #16]
 80071c0:	69ba      	ldr	r2, [r7, #24]
 80071c2:	0151      	lsls	r1, r2, #5
 80071c4:	69fa      	ldr	r2, [r7, #28]
 80071c6:	440a      	add	r2, r1
 80071c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071cc:	0cdb      	lsrs	r3, r3, #19
 80071ce:	04db      	lsls	r3, r3, #19
 80071d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80071d2:	69bb      	ldr	r3, [r7, #24]
 80071d4:	015a      	lsls	r2, r3, #5
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	4413      	add	r3, r2
 80071da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071de:	691b      	ldr	r3, [r3, #16]
 80071e0:	69ba      	ldr	r2, [r7, #24]
 80071e2:	0151      	lsls	r1, r2, #5
 80071e4:	69fa      	ldr	r2, [r7, #28]
 80071e6:	440a      	add	r2, r1
 80071e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80071f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80071f4:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80071f6:	69bb      	ldr	r3, [r7, #24]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d131      	bne.n	8007260 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d003      	beq.n	800720c <USB_EPStartXfer+0x37c>
      {
        ep->xfer_len = ep->maxpacket;
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	689a      	ldr	r2, [r3, #8]
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	689a      	ldr	r2, [r3, #8]
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	015a      	lsls	r2, r3, #5
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	4413      	add	r3, r2
 800721c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007220:	691a      	ldr	r2, [r3, #16]
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	6a1b      	ldr	r3, [r3, #32]
 8007226:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800722a:	69b9      	ldr	r1, [r7, #24]
 800722c:	0148      	lsls	r0, r1, #5
 800722e:	69f9      	ldr	r1, [r7, #28]
 8007230:	4401      	add	r1, r0
 8007232:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007236:	4313      	orrs	r3, r2
 8007238:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	015a      	lsls	r2, r3, #5
 800723e:	69fb      	ldr	r3, [r7, #28]
 8007240:	4413      	add	r3, r2
 8007242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007246:	691b      	ldr	r3, [r3, #16]
 8007248:	69ba      	ldr	r2, [r7, #24]
 800724a:	0151      	lsls	r1, r2, #5
 800724c:	69fa      	ldr	r2, [r7, #28]
 800724e:	440a      	add	r2, r1
 8007250:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007254:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007258:	6113      	str	r3, [r2, #16]
 800725a:	e061      	b.n	8007320 <USB_EPStartXfer+0x490>
 800725c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	691b      	ldr	r3, [r3, #16]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d123      	bne.n	80072b0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	015a      	lsls	r2, r3, #5
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	4413      	add	r3, r2
 8007270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007274:	691a      	ldr	r2, [r3, #16]
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800727e:	69b9      	ldr	r1, [r7, #24]
 8007280:	0148      	lsls	r0, r1, #5
 8007282:	69f9      	ldr	r1, [r7, #28]
 8007284:	4401      	add	r1, r0
 8007286:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800728a:	4313      	orrs	r3, r2
 800728c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	015a      	lsls	r2, r3, #5
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	4413      	add	r3, r2
 8007296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800729a:	691b      	ldr	r3, [r3, #16]
 800729c:	69ba      	ldr	r2, [r7, #24]
 800729e:	0151      	lsls	r1, r2, #5
 80072a0:	69fa      	ldr	r2, [r7, #28]
 80072a2:	440a      	add	r2, r1
 80072a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072ac:	6113      	str	r3, [r2, #16]
 80072ae:	e037      	b.n	8007320 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	691a      	ldr	r2, [r3, #16]
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	4413      	add	r3, r2
 80072ba:	1e5a      	subs	r2, r3, #1
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80072c4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	8afa      	ldrh	r2, [r7, #22]
 80072cc:	fb03 f202 	mul.w	r2, r3, r2
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80072d4:	69bb      	ldr	r3, [r7, #24]
 80072d6:	015a      	lsls	r2, r3, #5
 80072d8:	69fb      	ldr	r3, [r7, #28]
 80072da:	4413      	add	r3, r2
 80072dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072e0:	691a      	ldr	r2, [r3, #16]
 80072e2:	8afb      	ldrh	r3, [r7, #22]
 80072e4:	04d9      	lsls	r1, r3, #19
 80072e6:	4b38      	ldr	r3, [pc, #224]	; (80073c8 <USB_EPStartXfer+0x538>)
 80072e8:	400b      	ands	r3, r1
 80072ea:	69b9      	ldr	r1, [r7, #24]
 80072ec:	0148      	lsls	r0, r1, #5
 80072ee:	69f9      	ldr	r1, [r7, #28]
 80072f0:	4401      	add	r1, r0
 80072f2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80072f6:	4313      	orrs	r3, r2
 80072f8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	015a      	lsls	r2, r3, #5
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	4413      	add	r3, r2
 8007302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007306:	691a      	ldr	r2, [r3, #16]
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	6a1b      	ldr	r3, [r3, #32]
 800730c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007310:	69b9      	ldr	r1, [r7, #24]
 8007312:	0148      	lsls	r0, r1, #5
 8007314:	69f9      	ldr	r1, [r7, #28]
 8007316:	4401      	add	r1, r0
 8007318:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800731c:	4313      	orrs	r3, r2
 800731e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007320:	79fb      	ldrb	r3, [r7, #7]
 8007322:	2b01      	cmp	r3, #1
 8007324:	d10d      	bne.n	8007342 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	68db      	ldr	r3, [r3, #12]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d009      	beq.n	8007342 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	68d9      	ldr	r1, [r3, #12]
 8007332:	69bb      	ldr	r3, [r7, #24]
 8007334:	015a      	lsls	r2, r3, #5
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	4413      	add	r3, r2
 800733a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800733e:	460a      	mov	r2, r1
 8007340:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	791b      	ldrb	r3, [r3, #4]
 8007346:	2b01      	cmp	r3, #1
 8007348:	d128      	bne.n	800739c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007356:	2b00      	cmp	r3, #0
 8007358:	d110      	bne.n	800737c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	015a      	lsls	r2, r3, #5
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	4413      	add	r3, r2
 8007362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	69ba      	ldr	r2, [r7, #24]
 800736a:	0151      	lsls	r1, r2, #5
 800736c:	69fa      	ldr	r2, [r7, #28]
 800736e:	440a      	add	r2, r1
 8007370:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007374:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007378:	6013      	str	r3, [r2, #0]
 800737a:	e00f      	b.n	800739c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	015a      	lsls	r2, r3, #5
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	4413      	add	r3, r2
 8007384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	69ba      	ldr	r2, [r7, #24]
 800738c:	0151      	lsls	r1, r2, #5
 800738e:	69fa      	ldr	r2, [r7, #28]
 8007390:	440a      	add	r2, r1
 8007392:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007396:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800739a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800739c:	69bb      	ldr	r3, [r7, #24]
 800739e:	015a      	lsls	r2, r3, #5
 80073a0:	69fb      	ldr	r3, [r7, #28]
 80073a2:	4413      	add	r3, r2
 80073a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	69ba      	ldr	r2, [r7, #24]
 80073ac:	0151      	lsls	r1, r2, #5
 80073ae:	69fa      	ldr	r2, [r7, #28]
 80073b0:	440a      	add	r2, r1
 80073b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80073ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80073bc:	2300      	movs	r3, #0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3720      	adds	r7, #32
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	1ff80000 	.word	0x1ff80000

080073cc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b087      	sub	sp, #28
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80073d6:	2300      	movs	r3, #0
 80073d8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80073da:	2300      	movs	r3, #0
 80073dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	785b      	ldrb	r3, [r3, #1]
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d14a      	bne.n	8007480 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	015a      	lsls	r2, r3, #5
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	4413      	add	r3, r2
 80073f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007402:	f040 8086 	bne.w	8007512 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	015a      	lsls	r2, r3, #5
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	4413      	add	r3, r2
 8007410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	683a      	ldr	r2, [r7, #0]
 8007418:	7812      	ldrb	r2, [r2, #0]
 800741a:	0151      	lsls	r1, r2, #5
 800741c:	693a      	ldr	r2, [r7, #16]
 800741e:	440a      	add	r2, r1
 8007420:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007424:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007428:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	015a      	lsls	r2, r3, #5
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	4413      	add	r3, r2
 8007434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	683a      	ldr	r2, [r7, #0]
 800743c:	7812      	ldrb	r2, [r2, #0]
 800743e:	0151      	lsls	r1, r2, #5
 8007440:	693a      	ldr	r2, [r7, #16]
 8007442:	440a      	add	r2, r1
 8007444:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007448:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800744c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	3301      	adds	r3, #1
 8007452:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f242 7210 	movw	r2, #10000	; 0x2710
 800745a:	4293      	cmp	r3, r2
 800745c:	d902      	bls.n	8007464 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	75fb      	strb	r3, [r7, #23]
          break;
 8007462:	e056      	b.n	8007512 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	015a      	lsls	r2, r3, #5
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	4413      	add	r3, r2
 800746e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007478:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800747c:	d0e7      	beq.n	800744e <USB_EPStopXfer+0x82>
 800747e:	e048      	b.n	8007512 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	015a      	lsls	r2, r3, #5
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	4413      	add	r3, r2
 800748a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007494:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007498:	d13b      	bne.n	8007512 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	015a      	lsls	r2, r3, #5
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	4413      	add	r3, r2
 80074a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	683a      	ldr	r2, [r7, #0]
 80074ac:	7812      	ldrb	r2, [r2, #0]
 80074ae:	0151      	lsls	r1, r2, #5
 80074b0:	693a      	ldr	r2, [r7, #16]
 80074b2:	440a      	add	r2, r1
 80074b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80074bc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	015a      	lsls	r2, r3, #5
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	4413      	add	r3, r2
 80074c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	683a      	ldr	r2, [r7, #0]
 80074d0:	7812      	ldrb	r2, [r2, #0]
 80074d2:	0151      	lsls	r1, r2, #5
 80074d4:	693a      	ldr	r2, [r7, #16]
 80074d6:	440a      	add	r2, r1
 80074d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80074e0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	3301      	adds	r3, #1
 80074e6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f242 7210 	movw	r2, #10000	; 0x2710
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d902      	bls.n	80074f8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	75fb      	strb	r3, [r7, #23]
          break;
 80074f6:	e00c      	b.n	8007512 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	015a      	lsls	r2, r3, #5
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	4413      	add	r3, r2
 8007502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800750c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007510:	d0e7      	beq.n	80074e2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007512:	7dfb      	ldrb	r3, [r7, #23]
}
 8007514:	4618      	mov	r0, r3
 8007516:	371c      	adds	r7, #28
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007520:	b480      	push	{r7}
 8007522:	b089      	sub	sp, #36	; 0x24
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	4611      	mov	r1, r2
 800752c:	461a      	mov	r2, r3
 800752e:	460b      	mov	r3, r1
 8007530:	71fb      	strb	r3, [r7, #7]
 8007532:	4613      	mov	r3, r2
 8007534:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800753e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007542:	2b00      	cmp	r3, #0
 8007544:	d123      	bne.n	800758e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007546:	88bb      	ldrh	r3, [r7, #4]
 8007548:	3303      	adds	r3, #3
 800754a:	089b      	lsrs	r3, r3, #2
 800754c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800754e:	2300      	movs	r3, #0
 8007550:	61bb      	str	r3, [r7, #24]
 8007552:	e018      	b.n	8007586 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007554:	79fb      	ldrb	r3, [r7, #7]
 8007556:	031a      	lsls	r2, r3, #12
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	4413      	add	r3, r2
 800755c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007560:	461a      	mov	r2, r3
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	3301      	adds	r3, #1
 800756c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	3301      	adds	r3, #1
 8007572:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	3301      	adds	r3, #1
 8007578:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	3301      	adds	r3, #1
 800757e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007580:	69bb      	ldr	r3, [r7, #24]
 8007582:	3301      	adds	r3, #1
 8007584:	61bb      	str	r3, [r7, #24]
 8007586:	69ba      	ldr	r2, [r7, #24]
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	429a      	cmp	r2, r3
 800758c:	d3e2      	bcc.n	8007554 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800758e:	2300      	movs	r3, #0
}
 8007590:	4618      	mov	r0, r3
 8007592:	3724      	adds	r7, #36	; 0x24
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800759c:	b480      	push	{r7}
 800759e:	b08b      	sub	sp, #44	; 0x2c
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	4613      	mov	r3, r2
 80075a8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80075b2:	88fb      	ldrh	r3, [r7, #6]
 80075b4:	089b      	lsrs	r3, r3, #2
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80075ba:	88fb      	ldrh	r3, [r7, #6]
 80075bc:	f003 0303 	and.w	r3, r3, #3
 80075c0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80075c2:	2300      	movs	r3, #0
 80075c4:	623b      	str	r3, [r7, #32]
 80075c6:	e014      	b.n	80075f2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80075c8:	69bb      	ldr	r3, [r7, #24]
 80075ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d2:	601a      	str	r2, [r3, #0]
    pDest++;
 80075d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d6:	3301      	adds	r3, #1
 80075d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80075da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075dc:	3301      	adds	r3, #1
 80075de:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80075e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e2:	3301      	adds	r3, #1
 80075e4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80075e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e8:	3301      	adds	r3, #1
 80075ea:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80075ec:	6a3b      	ldr	r3, [r7, #32]
 80075ee:	3301      	adds	r3, #1
 80075f0:	623b      	str	r3, [r7, #32]
 80075f2:	6a3a      	ldr	r2, [r7, #32]
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d3e6      	bcc.n	80075c8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80075fa:	8bfb      	ldrh	r3, [r7, #30]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d01e      	beq.n	800763e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007600:	2300      	movs	r3, #0
 8007602:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007604:	69bb      	ldr	r3, [r7, #24]
 8007606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800760a:	461a      	mov	r2, r3
 800760c:	f107 0310 	add.w	r3, r7, #16
 8007610:	6812      	ldr	r2, [r2, #0]
 8007612:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007614:	693a      	ldr	r2, [r7, #16]
 8007616:	6a3b      	ldr	r3, [r7, #32]
 8007618:	b2db      	uxtb	r3, r3
 800761a:	00db      	lsls	r3, r3, #3
 800761c:	fa22 f303 	lsr.w	r3, r2, r3
 8007620:	b2da      	uxtb	r2, r3
 8007622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007624:	701a      	strb	r2, [r3, #0]
      i++;
 8007626:	6a3b      	ldr	r3, [r7, #32]
 8007628:	3301      	adds	r3, #1
 800762a:	623b      	str	r3, [r7, #32]
      pDest++;
 800762c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762e:	3301      	adds	r3, #1
 8007630:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007632:	8bfb      	ldrh	r3, [r7, #30]
 8007634:	3b01      	subs	r3, #1
 8007636:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007638:	8bfb      	ldrh	r3, [r7, #30]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d1ea      	bne.n	8007614 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800763e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007640:	4618      	mov	r0, r3
 8007642:	372c      	adds	r7, #44	; 0x2c
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr

0800764c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800764c:	b480      	push	{r7}
 800764e:	b085      	sub	sp, #20
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	785b      	ldrb	r3, [r3, #1]
 8007664:	2b01      	cmp	r3, #1
 8007666:	d12c      	bne.n	80076c2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	015a      	lsls	r2, r3, #5
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	4413      	add	r3, r2
 8007670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	2b00      	cmp	r3, #0
 8007678:	db12      	blt.n	80076a0 <USB_EPSetStall+0x54>
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00f      	beq.n	80076a0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	015a      	lsls	r2, r3, #5
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	4413      	add	r3, r2
 8007688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	68ba      	ldr	r2, [r7, #8]
 8007690:	0151      	lsls	r1, r2, #5
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	440a      	add	r2, r1
 8007696:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800769a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800769e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	015a      	lsls	r2, r3, #5
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	4413      	add	r3, r2
 80076a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	68ba      	ldr	r2, [r7, #8]
 80076b0:	0151      	lsls	r1, r2, #5
 80076b2:	68fa      	ldr	r2, [r7, #12]
 80076b4:	440a      	add	r2, r1
 80076b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80076be:	6013      	str	r3, [r2, #0]
 80076c0:	e02b      	b.n	800771a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	015a      	lsls	r2, r3, #5
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	4413      	add	r3, r2
 80076ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	db12      	blt.n	80076fa <USB_EPSetStall+0xae>
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00f      	beq.n	80076fa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	015a      	lsls	r2, r3, #5
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	4413      	add	r3, r2
 80076e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	68ba      	ldr	r2, [r7, #8]
 80076ea:	0151      	lsls	r1, r2, #5
 80076ec:	68fa      	ldr	r2, [r7, #12]
 80076ee:	440a      	add	r2, r1
 80076f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80076f8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	015a      	lsls	r2, r3, #5
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	4413      	add	r3, r2
 8007702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	68ba      	ldr	r2, [r7, #8]
 800770a:	0151      	lsls	r1, r2, #5
 800770c:	68fa      	ldr	r2, [r7, #12]
 800770e:	440a      	add	r2, r1
 8007710:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007714:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007718:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800771a:	2300      	movs	r3, #0
}
 800771c:	4618      	mov	r0, r3
 800771e:	3714      	adds	r7, #20
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007728:	b480      	push	{r7}
 800772a:	b085      	sub	sp, #20
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	785b      	ldrb	r3, [r3, #1]
 8007740:	2b01      	cmp	r3, #1
 8007742:	d128      	bne.n	8007796 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	015a      	lsls	r2, r3, #5
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	4413      	add	r3, r2
 800774c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	68ba      	ldr	r2, [r7, #8]
 8007754:	0151      	lsls	r1, r2, #5
 8007756:	68fa      	ldr	r2, [r7, #12]
 8007758:	440a      	add	r2, r1
 800775a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800775e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007762:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	791b      	ldrb	r3, [r3, #4]
 8007768:	2b03      	cmp	r3, #3
 800776a:	d003      	beq.n	8007774 <USB_EPClearStall+0x4c>
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	791b      	ldrb	r3, [r3, #4]
 8007770:	2b02      	cmp	r3, #2
 8007772:	d138      	bne.n	80077e6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	015a      	lsls	r2, r3, #5
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	4413      	add	r3, r2
 800777c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	68ba      	ldr	r2, [r7, #8]
 8007784:	0151      	lsls	r1, r2, #5
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	440a      	add	r2, r1
 800778a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800778e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007792:	6013      	str	r3, [r2, #0]
 8007794:	e027      	b.n	80077e6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	015a      	lsls	r2, r3, #5
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	4413      	add	r3, r2
 800779e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	68ba      	ldr	r2, [r7, #8]
 80077a6:	0151      	lsls	r1, r2, #5
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	440a      	add	r2, r1
 80077ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80077b4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	791b      	ldrb	r3, [r3, #4]
 80077ba:	2b03      	cmp	r3, #3
 80077bc:	d003      	beq.n	80077c6 <USB_EPClearStall+0x9e>
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	791b      	ldrb	r3, [r3, #4]
 80077c2:	2b02      	cmp	r3, #2
 80077c4:	d10f      	bne.n	80077e6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	015a      	lsls	r2, r3, #5
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	4413      	add	r3, r2
 80077ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	68ba      	ldr	r2, [r7, #8]
 80077d6:	0151      	lsls	r1, r2, #5
 80077d8:	68fa      	ldr	r2, [r7, #12]
 80077da:	440a      	add	r2, r1
 80077dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077e4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80077e6:	2300      	movs	r3, #0
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3714      	adds	r7, #20
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	460b      	mov	r3, r1
 80077fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007812:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007816:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	78fb      	ldrb	r3, [r7, #3]
 8007822:	011b      	lsls	r3, r3, #4
 8007824:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007828:	68f9      	ldr	r1, [r7, #12]
 800782a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800782e:	4313      	orrs	r3, r2
 8007830:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007832:	2300      	movs	r3, #0
}
 8007834:	4618      	mov	r0, r3
 8007836:	3714      	adds	r7, #20
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007840:	b480      	push	{r7}
 8007842:	b085      	sub	sp, #20
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800785a:	f023 0303 	bic.w	r3, r3, #3
 800785e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	68fa      	ldr	r2, [r7, #12]
 800786a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800786e:	f023 0302 	bic.w	r3, r3, #2
 8007872:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007874:	2300      	movs	r3, #0
}
 8007876:	4618      	mov	r0, r3
 8007878:	3714      	adds	r7, #20
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr

08007882 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007882:	b480      	push	{r7}
 8007884:	b085      	sub	sp, #20
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	68fa      	ldr	r2, [r7, #12]
 8007898:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800789c:	f023 0303 	bic.w	r3, r3, #3
 80078a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	68fa      	ldr	r2, [r7, #12]
 80078ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078b0:	f043 0302 	orr.w	r3, r3, #2
 80078b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80078b6:	2300      	movs	r3, #0
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3714      	adds	r7, #20
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b085      	sub	sp, #20
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	695b      	ldr	r3, [r3, #20]
 80078d0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	699b      	ldr	r3, [r3, #24]
 80078d6:	68fa      	ldr	r2, [r7, #12]
 80078d8:	4013      	ands	r3, r2
 80078da:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80078dc:	68fb      	ldr	r3, [r7, #12]
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3714      	adds	r7, #20
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr

080078ea <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80078ea:	b480      	push	{r7}
 80078ec:	b085      	sub	sp, #20
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078fc:	699b      	ldr	r3, [r3, #24]
 80078fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007906:	69db      	ldr	r3, [r3, #28]
 8007908:	68ba      	ldr	r2, [r7, #8]
 800790a:	4013      	ands	r3, r2
 800790c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	0c1b      	lsrs	r3, r3, #16
}
 8007912:	4618      	mov	r0, r3
 8007914:	3714      	adds	r7, #20
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr

0800791e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800791e:	b480      	push	{r7}
 8007920:	b085      	sub	sp, #20
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007930:	699b      	ldr	r3, [r3, #24]
 8007932:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800793a:	69db      	ldr	r3, [r3, #28]
 800793c:	68ba      	ldr	r2, [r7, #8]
 800793e:	4013      	ands	r3, r2
 8007940:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	b29b      	uxth	r3, r3
}
 8007946:	4618      	mov	r0, r3
 8007948:	3714      	adds	r7, #20
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr

08007952 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007952:	b480      	push	{r7}
 8007954:	b085      	sub	sp, #20
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
 800795a:	460b      	mov	r3, r1
 800795c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007962:	78fb      	ldrb	r3, [r7, #3]
 8007964:	015a      	lsls	r2, r3, #5
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	4413      	add	r3, r2
 800796a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007978:	695b      	ldr	r3, [r3, #20]
 800797a:	68ba      	ldr	r2, [r7, #8]
 800797c:	4013      	ands	r3, r2
 800797e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007980:	68bb      	ldr	r3, [r7, #8]
}
 8007982:	4618      	mov	r0, r3
 8007984:	3714      	adds	r7, #20
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr

0800798e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800798e:	b480      	push	{r7}
 8007990:	b087      	sub	sp, #28
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
 8007996:	460b      	mov	r3, r1
 8007998:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079a4:	691b      	ldr	r3, [r3, #16]
 80079a6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079b0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80079b2:	78fb      	ldrb	r3, [r7, #3]
 80079b4:	f003 030f 	and.w	r3, r3, #15
 80079b8:	68fa      	ldr	r2, [r7, #12]
 80079ba:	fa22 f303 	lsr.w	r3, r2, r3
 80079be:	01db      	lsls	r3, r3, #7
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	693a      	ldr	r2, [r7, #16]
 80079c4:	4313      	orrs	r3, r2
 80079c6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80079c8:	78fb      	ldrb	r3, [r7, #3]
 80079ca:	015a      	lsls	r2, r3, #5
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	4413      	add	r3, r2
 80079d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	693a      	ldr	r2, [r7, #16]
 80079d8:	4013      	ands	r3, r2
 80079da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80079dc:	68bb      	ldr	r3, [r7, #8]
}
 80079de:	4618      	mov	r0, r3
 80079e0:	371c      	adds	r7, #28
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr

080079ea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80079ea:	b480      	push	{r7}
 80079ec:	b083      	sub	sp, #12
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	695b      	ldr	r3, [r3, #20]
 80079f6:	f003 0301 	and.w	r3, r3, #1
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	370c      	adds	r7, #12
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr

08007a06 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007a06:	b480      	push	{r7}
 8007a08:	b085      	sub	sp, #20
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	68fa      	ldr	r2, [r7, #12]
 8007a1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a20:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007a24:	f023 0307 	bic.w	r3, r3, #7
 8007a28:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a3c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007a3e:	2300      	movs	r3, #0
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3714      	adds	r7, #20
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b087      	sub	sp, #28
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	460b      	mov	r3, r1
 8007a56:	607a      	str	r2, [r7, #4]
 8007a58:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	333c      	adds	r3, #60	; 0x3c
 8007a62:	3304      	adds	r3, #4
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	4a26      	ldr	r2, [pc, #152]	; (8007b04 <USB_EP0_OutStart+0xb8>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d90a      	bls.n	8007a86 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a80:	d101      	bne.n	8007a86 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007a82:	2300      	movs	r3, #0
 8007a84:	e037      	b.n	8007af6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	2300      	movs	r3, #0
 8007a90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a98:	691b      	ldr	r3, [r3, #16]
 8007a9a:	697a      	ldr	r2, [r7, #20]
 8007a9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007aa0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007aa4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aac:	691b      	ldr	r3, [r3, #16]
 8007aae:	697a      	ldr	r2, [r7, #20]
 8007ab0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ab4:	f043 0318 	orr.w	r3, r3, #24
 8007ab8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	697a      	ldr	r2, [r7, #20]
 8007ac4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ac8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007acc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007ace:	7afb      	ldrb	r3, [r7, #11]
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d10f      	bne.n	8007af4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ada:	461a      	mov	r2, r3
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	697a      	ldr	r2, [r7, #20]
 8007aea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007aee:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007af2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007af4:	2300      	movs	r3, #0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	371c      	adds	r7, #28
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	4f54300a 	.word	0x4f54300a

08007b08 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b085      	sub	sp, #20
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b10:	2300      	movs	r3, #0
 8007b12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	3301      	adds	r3, #1
 8007b18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007b20:	d901      	bls.n	8007b26 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007b22:	2303      	movs	r3, #3
 8007b24:	e01b      	b.n	8007b5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	691b      	ldr	r3, [r3, #16]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	daf2      	bge.n	8007b14 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	691b      	ldr	r3, [r3, #16]
 8007b36:	f043 0201 	orr.w	r2, r3, #1
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	3301      	adds	r3, #1
 8007b42:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007b4a:	d901      	bls.n	8007b50 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007b4c:	2303      	movs	r3, #3
 8007b4e:	e006      	b.n	8007b5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	691b      	ldr	r3, [r3, #16]
 8007b54:	f003 0301 	and.w	r3, r3, #1
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d0f0      	beq.n	8007b3e <USB_CoreReset+0x36>

  return HAL_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3714      	adds	r7, #20
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr
	...

08007b6c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	460b      	mov	r3, r1
 8007b76:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007b78:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007b7c:	f002 fcda 	bl	800a534 <USBD_static_malloc>
 8007b80:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d109      	bne.n	8007b9c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	32b0      	adds	r2, #176	; 0xb0
 8007b92:	2100      	movs	r1, #0
 8007b94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007b98:	2302      	movs	r3, #2
 8007b9a:	e0d4      	b.n	8007d46 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007b9c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007ba0:	2100      	movs	r1, #0
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	f002 fe17 	bl	800a7d6 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	32b0      	adds	r2, #176	; 0xb0
 8007bb2:	68f9      	ldr	r1, [r7, #12]
 8007bb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	32b0      	adds	r2, #176	; 0xb0
 8007bc2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	7c1b      	ldrb	r3, [r3, #16]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d138      	bne.n	8007c46 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007bd4:	4b5e      	ldr	r3, [pc, #376]	; (8007d50 <USBD_CDC_Init+0x1e4>)
 8007bd6:	7819      	ldrb	r1, [r3, #0]
 8007bd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bdc:	2202      	movs	r2, #2
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f002 fb37 	bl	800a252 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007be4:	4b5a      	ldr	r3, [pc, #360]	; (8007d50 <USBD_CDC_Init+0x1e4>)
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	f003 020f 	and.w	r2, r3, #15
 8007bec:	6879      	ldr	r1, [r7, #4]
 8007bee:	4613      	mov	r3, r2
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	4413      	add	r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	440b      	add	r3, r1
 8007bf8:	3324      	adds	r3, #36	; 0x24
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007bfe:	4b55      	ldr	r3, [pc, #340]	; (8007d54 <USBD_CDC_Init+0x1e8>)
 8007c00:	7819      	ldrb	r1, [r3, #0]
 8007c02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c06:	2202      	movs	r2, #2
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f002 fb22 	bl	800a252 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007c0e:	4b51      	ldr	r3, [pc, #324]	; (8007d54 <USBD_CDC_Init+0x1e8>)
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	f003 020f 	and.w	r2, r3, #15
 8007c16:	6879      	ldr	r1, [r7, #4]
 8007c18:	4613      	mov	r3, r2
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	4413      	add	r3, r2
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	440b      	add	r3, r1
 8007c22:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007c26:	2201      	movs	r2, #1
 8007c28:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007c2a:	4b4b      	ldr	r3, [pc, #300]	; (8007d58 <USBD_CDC_Init+0x1ec>)
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	f003 020f 	and.w	r2, r3, #15
 8007c32:	6879      	ldr	r1, [r7, #4]
 8007c34:	4613      	mov	r3, r2
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	4413      	add	r3, r2
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	440b      	add	r3, r1
 8007c3e:	3326      	adds	r3, #38	; 0x26
 8007c40:	2210      	movs	r2, #16
 8007c42:	801a      	strh	r2, [r3, #0]
 8007c44:	e035      	b.n	8007cb2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007c46:	4b42      	ldr	r3, [pc, #264]	; (8007d50 <USBD_CDC_Init+0x1e4>)
 8007c48:	7819      	ldrb	r1, [r3, #0]
 8007c4a:	2340      	movs	r3, #64	; 0x40
 8007c4c:	2202      	movs	r2, #2
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f002 faff 	bl	800a252 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007c54:	4b3e      	ldr	r3, [pc, #248]	; (8007d50 <USBD_CDC_Init+0x1e4>)
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	f003 020f 	and.w	r2, r3, #15
 8007c5c:	6879      	ldr	r1, [r7, #4]
 8007c5e:	4613      	mov	r3, r2
 8007c60:	009b      	lsls	r3, r3, #2
 8007c62:	4413      	add	r3, r2
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	440b      	add	r3, r1
 8007c68:	3324      	adds	r3, #36	; 0x24
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007c6e:	4b39      	ldr	r3, [pc, #228]	; (8007d54 <USBD_CDC_Init+0x1e8>)
 8007c70:	7819      	ldrb	r1, [r3, #0]
 8007c72:	2340      	movs	r3, #64	; 0x40
 8007c74:	2202      	movs	r2, #2
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f002 faeb 	bl	800a252 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007c7c:	4b35      	ldr	r3, [pc, #212]	; (8007d54 <USBD_CDC_Init+0x1e8>)
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	f003 020f 	and.w	r2, r3, #15
 8007c84:	6879      	ldr	r1, [r7, #4]
 8007c86:	4613      	mov	r3, r2
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	4413      	add	r3, r2
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	440b      	add	r3, r1
 8007c90:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007c94:	2201      	movs	r2, #1
 8007c96:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007c98:	4b2f      	ldr	r3, [pc, #188]	; (8007d58 <USBD_CDC_Init+0x1ec>)
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	f003 020f 	and.w	r2, r3, #15
 8007ca0:	6879      	ldr	r1, [r7, #4]
 8007ca2:	4613      	mov	r3, r2
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	4413      	add	r3, r2
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	440b      	add	r3, r1
 8007cac:	3326      	adds	r3, #38	; 0x26
 8007cae:	2210      	movs	r2, #16
 8007cb0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007cb2:	4b29      	ldr	r3, [pc, #164]	; (8007d58 <USBD_CDC_Init+0x1ec>)
 8007cb4:	7819      	ldrb	r1, [r3, #0]
 8007cb6:	2308      	movs	r3, #8
 8007cb8:	2203      	movs	r2, #3
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f002 fac9 	bl	800a252 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007cc0:	4b25      	ldr	r3, [pc, #148]	; (8007d58 <USBD_CDC_Init+0x1ec>)
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	f003 020f 	and.w	r2, r3, #15
 8007cc8:	6879      	ldr	r1, [r7, #4]
 8007cca:	4613      	mov	r3, r2
 8007ccc:	009b      	lsls	r3, r3, #2
 8007cce:	4413      	add	r3, r2
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	440b      	add	r3, r1
 8007cd4:	3324      	adds	r3, #36	; 0x24
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	33b0      	adds	r3, #176	; 0xb0
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	4413      	add	r3, r2
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2200      	movs	r2, #0
 8007d02:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d101      	bne.n	8007d14 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007d10:	2302      	movs	r3, #2
 8007d12:	e018      	b.n	8007d46 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	7c1b      	ldrb	r3, [r3, #16]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d10a      	bne.n	8007d32 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007d1c:	4b0d      	ldr	r3, [pc, #52]	; (8007d54 <USBD_CDC_Init+0x1e8>)
 8007d1e:	7819      	ldrb	r1, [r3, #0]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f002 fb80 	bl	800a430 <USBD_LL_PrepareReceive>
 8007d30:	e008      	b.n	8007d44 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007d32:	4b08      	ldr	r3, [pc, #32]	; (8007d54 <USBD_CDC_Init+0x1e8>)
 8007d34:	7819      	ldrb	r1, [r3, #0]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d3c:	2340      	movs	r3, #64	; 0x40
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f002 fb76 	bl	800a430 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3710      	adds	r7, #16
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	20000093 	.word	0x20000093
 8007d54:	20000094 	.word	0x20000094
 8007d58:	20000095 	.word	0x20000095

08007d5c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	460b      	mov	r3, r1
 8007d66:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007d68:	4b3a      	ldr	r3, [pc, #232]	; (8007e54 <USBD_CDC_DeInit+0xf8>)
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f002 fa95 	bl	800a29e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007d74:	4b37      	ldr	r3, [pc, #220]	; (8007e54 <USBD_CDC_DeInit+0xf8>)
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	f003 020f 	and.w	r2, r3, #15
 8007d7c:	6879      	ldr	r1, [r7, #4]
 8007d7e:	4613      	mov	r3, r2
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	4413      	add	r3, r2
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	440b      	add	r3, r1
 8007d88:	3324      	adds	r3, #36	; 0x24
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007d8e:	4b32      	ldr	r3, [pc, #200]	; (8007e58 <USBD_CDC_DeInit+0xfc>)
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	4619      	mov	r1, r3
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f002 fa82 	bl	800a29e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007d9a:	4b2f      	ldr	r3, [pc, #188]	; (8007e58 <USBD_CDC_DeInit+0xfc>)
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	f003 020f 	and.w	r2, r3, #15
 8007da2:	6879      	ldr	r1, [r7, #4]
 8007da4:	4613      	mov	r3, r2
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	4413      	add	r3, r2
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	440b      	add	r3, r1
 8007dae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007db2:	2200      	movs	r2, #0
 8007db4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007db6:	4b29      	ldr	r3, [pc, #164]	; (8007e5c <USBD_CDC_DeInit+0x100>)
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	4619      	mov	r1, r3
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f002 fa6e 	bl	800a29e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007dc2:	4b26      	ldr	r3, [pc, #152]	; (8007e5c <USBD_CDC_DeInit+0x100>)
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	f003 020f 	and.w	r2, r3, #15
 8007dca:	6879      	ldr	r1, [r7, #4]
 8007dcc:	4613      	mov	r3, r2
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	4413      	add	r3, r2
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	440b      	add	r3, r1
 8007dd6:	3324      	adds	r3, #36	; 0x24
 8007dd8:	2200      	movs	r2, #0
 8007dda:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007ddc:	4b1f      	ldr	r3, [pc, #124]	; (8007e5c <USBD_CDC_DeInit+0x100>)
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	f003 020f 	and.w	r2, r3, #15
 8007de4:	6879      	ldr	r1, [r7, #4]
 8007de6:	4613      	mov	r3, r2
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	4413      	add	r3, r2
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	440b      	add	r3, r1
 8007df0:	3326      	adds	r3, #38	; 0x26
 8007df2:	2200      	movs	r2, #0
 8007df4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	32b0      	adds	r2, #176	; 0xb0
 8007e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d01f      	beq.n	8007e48 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	33b0      	adds	r3, #176	; 0xb0
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	4413      	add	r3, r2
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	32b0      	adds	r2, #176	; 0xb0
 8007e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f002 fb90 	bl	800a550 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	32b0      	adds	r2, #176	; 0xb0
 8007e3a:	2100      	movs	r1, #0
 8007e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3708      	adds	r7, #8
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	20000093 	.word	0x20000093
 8007e58:	20000094 	.word	0x20000094
 8007e5c:	20000095 	.word	0x20000095

08007e60 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b086      	sub	sp, #24
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	32b0      	adds	r2, #176	; 0xb0
 8007e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e78:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e82:	2300      	movs	r3, #0
 8007e84:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d101      	bne.n	8007e90 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007e8c:	2303      	movs	r3, #3
 8007e8e:	e0bf      	b.n	8008010 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d050      	beq.n	8007f3e <USBD_CDC_Setup+0xde>
 8007e9c:	2b20      	cmp	r3, #32
 8007e9e:	f040 80af 	bne.w	8008000 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	88db      	ldrh	r3, [r3, #6]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d03a      	beq.n	8007f20 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	b25b      	sxtb	r3, r3
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	da1b      	bge.n	8007eec <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	33b0      	adds	r3, #176	; 0xb0
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	4413      	add	r3, r2
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	683a      	ldr	r2, [r7, #0]
 8007ec8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007eca:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007ecc:	683a      	ldr	r2, [r7, #0]
 8007ece:	88d2      	ldrh	r2, [r2, #6]
 8007ed0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	88db      	ldrh	r3, [r3, #6]
 8007ed6:	2b07      	cmp	r3, #7
 8007ed8:	bf28      	it	cs
 8007eda:	2307      	movcs	r3, #7
 8007edc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	89fa      	ldrh	r2, [r7, #14]
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f001 fd7f 	bl	80099e8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007eea:	e090      	b.n	800800e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	785a      	ldrb	r2, [r3, #1]
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	88db      	ldrh	r3, [r3, #6]
 8007efa:	2b3f      	cmp	r3, #63	; 0x3f
 8007efc:	d803      	bhi.n	8007f06 <USBD_CDC_Setup+0xa6>
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	88db      	ldrh	r3, [r3, #6]
 8007f02:	b2da      	uxtb	r2, r3
 8007f04:	e000      	b.n	8007f08 <USBD_CDC_Setup+0xa8>
 8007f06:	2240      	movs	r2, #64	; 0x40
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007f0e:	6939      	ldr	r1, [r7, #16]
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007f16:	461a      	mov	r2, r3
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f001 fd91 	bl	8009a40 <USBD_CtlPrepareRx>
      break;
 8007f1e:	e076      	b.n	800800e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	33b0      	adds	r3, #176	; 0xb0
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	4413      	add	r3, r2
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	683a      	ldr	r2, [r7, #0]
 8007f34:	7850      	ldrb	r0, [r2, #1]
 8007f36:	2200      	movs	r2, #0
 8007f38:	6839      	ldr	r1, [r7, #0]
 8007f3a:	4798      	blx	r3
      break;
 8007f3c:	e067      	b.n	800800e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	785b      	ldrb	r3, [r3, #1]
 8007f42:	2b0b      	cmp	r3, #11
 8007f44:	d851      	bhi.n	8007fea <USBD_CDC_Setup+0x18a>
 8007f46:	a201      	add	r2, pc, #4	; (adr r2, 8007f4c <USBD_CDC_Setup+0xec>)
 8007f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f4c:	08007f7d 	.word	0x08007f7d
 8007f50:	08007ff9 	.word	0x08007ff9
 8007f54:	08007feb 	.word	0x08007feb
 8007f58:	08007feb 	.word	0x08007feb
 8007f5c:	08007feb 	.word	0x08007feb
 8007f60:	08007feb 	.word	0x08007feb
 8007f64:	08007feb 	.word	0x08007feb
 8007f68:	08007feb 	.word	0x08007feb
 8007f6c:	08007feb 	.word	0x08007feb
 8007f70:	08007feb 	.word	0x08007feb
 8007f74:	08007fa7 	.word	0x08007fa7
 8007f78:	08007fd1 	.word	0x08007fd1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	2b03      	cmp	r3, #3
 8007f86:	d107      	bne.n	8007f98 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007f88:	f107 030a 	add.w	r3, r7, #10
 8007f8c:	2202      	movs	r2, #2
 8007f8e:	4619      	mov	r1, r3
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f001 fd29 	bl	80099e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f96:	e032      	b.n	8007ffe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007f98:	6839      	ldr	r1, [r7, #0]
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f001 fca7 	bl	80098ee <USBD_CtlError>
            ret = USBD_FAIL;
 8007fa0:	2303      	movs	r3, #3
 8007fa2:	75fb      	strb	r3, [r7, #23]
          break;
 8007fa4:	e02b      	b.n	8007ffe <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fac:	b2db      	uxtb	r3, r3
 8007fae:	2b03      	cmp	r3, #3
 8007fb0:	d107      	bne.n	8007fc2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007fb2:	f107 030d 	add.w	r3, r7, #13
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	4619      	mov	r1, r3
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f001 fd14 	bl	80099e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007fc0:	e01d      	b.n	8007ffe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007fc2:	6839      	ldr	r1, [r7, #0]
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f001 fc92 	bl	80098ee <USBD_CtlError>
            ret = USBD_FAIL;
 8007fca:	2303      	movs	r3, #3
 8007fcc:	75fb      	strb	r3, [r7, #23]
          break;
 8007fce:	e016      	b.n	8007ffe <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	2b03      	cmp	r3, #3
 8007fda:	d00f      	beq.n	8007ffc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007fdc:	6839      	ldr	r1, [r7, #0]
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f001 fc85 	bl	80098ee <USBD_CtlError>
            ret = USBD_FAIL;
 8007fe4:	2303      	movs	r3, #3
 8007fe6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007fe8:	e008      	b.n	8007ffc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007fea:	6839      	ldr	r1, [r7, #0]
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f001 fc7e 	bl	80098ee <USBD_CtlError>
          ret = USBD_FAIL;
 8007ff2:	2303      	movs	r3, #3
 8007ff4:	75fb      	strb	r3, [r7, #23]
          break;
 8007ff6:	e002      	b.n	8007ffe <USBD_CDC_Setup+0x19e>
          break;
 8007ff8:	bf00      	nop
 8007ffa:	e008      	b.n	800800e <USBD_CDC_Setup+0x1ae>
          break;
 8007ffc:	bf00      	nop
      }
      break;
 8007ffe:	e006      	b.n	800800e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008000:	6839      	ldr	r1, [r7, #0]
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f001 fc73 	bl	80098ee <USBD_CtlError>
      ret = USBD_FAIL;
 8008008:	2303      	movs	r3, #3
 800800a:	75fb      	strb	r3, [r7, #23]
      break;
 800800c:	bf00      	nop
  }

  return (uint8_t)ret;
 800800e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008010:	4618      	mov	r0, r3
 8008012:	3718      	adds	r7, #24
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	460b      	mov	r3, r1
 8008022:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800802a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	32b0      	adds	r2, #176	; 0xb0
 8008036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d101      	bne.n	8008042 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800803e:	2303      	movs	r3, #3
 8008040:	e065      	b.n	800810e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	32b0      	adds	r2, #176	; 0xb0
 800804c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008050:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008052:	78fb      	ldrb	r3, [r7, #3]
 8008054:	f003 020f 	and.w	r2, r3, #15
 8008058:	6879      	ldr	r1, [r7, #4]
 800805a:	4613      	mov	r3, r2
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	4413      	add	r3, r2
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	440b      	add	r3, r1
 8008064:	3318      	adds	r3, #24
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d02f      	beq.n	80080cc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800806c:	78fb      	ldrb	r3, [r7, #3]
 800806e:	f003 020f 	and.w	r2, r3, #15
 8008072:	6879      	ldr	r1, [r7, #4]
 8008074:	4613      	mov	r3, r2
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	4413      	add	r3, r2
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	440b      	add	r3, r1
 800807e:	3318      	adds	r3, #24
 8008080:	681a      	ldr	r2, [r3, #0]
 8008082:	78fb      	ldrb	r3, [r7, #3]
 8008084:	f003 010f 	and.w	r1, r3, #15
 8008088:	68f8      	ldr	r0, [r7, #12]
 800808a:	460b      	mov	r3, r1
 800808c:	00db      	lsls	r3, r3, #3
 800808e:	440b      	add	r3, r1
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	4403      	add	r3, r0
 8008094:	331c      	adds	r3, #28
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	fbb2 f1f3 	udiv	r1, r2, r3
 800809c:	fb01 f303 	mul.w	r3, r1, r3
 80080a0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d112      	bne.n	80080cc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80080a6:	78fb      	ldrb	r3, [r7, #3]
 80080a8:	f003 020f 	and.w	r2, r3, #15
 80080ac:	6879      	ldr	r1, [r7, #4]
 80080ae:	4613      	mov	r3, r2
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	4413      	add	r3, r2
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	440b      	add	r3, r1
 80080b8:	3318      	adds	r3, #24
 80080ba:	2200      	movs	r2, #0
 80080bc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80080be:	78f9      	ldrb	r1, [r7, #3]
 80080c0:	2300      	movs	r3, #0
 80080c2:	2200      	movs	r2, #0
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f002 f992 	bl	800a3ee <USBD_LL_Transmit>
 80080ca:	e01f      	b.n	800810c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	2200      	movs	r2, #0
 80080d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	33b0      	adds	r3, #176	; 0xb0
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	4413      	add	r3, r2
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	691b      	ldr	r3, [r3, #16]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d010      	beq.n	800810c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	33b0      	adds	r3, #176	; 0xb0
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	4413      	add	r3, r2
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	691b      	ldr	r3, [r3, #16]
 80080fc:	68ba      	ldr	r2, [r7, #8]
 80080fe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008102:	68ba      	ldr	r2, [r7, #8]
 8008104:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008108:	78fa      	ldrb	r2, [r7, #3]
 800810a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800810c:	2300      	movs	r3, #0
}
 800810e:	4618      	mov	r0, r3
 8008110:	3710      	adds	r7, #16
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}

08008116 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008116:	b580      	push	{r7, lr}
 8008118:	b084      	sub	sp, #16
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
 800811e:	460b      	mov	r3, r1
 8008120:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	32b0      	adds	r2, #176	; 0xb0
 800812c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008130:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	32b0      	adds	r2, #176	; 0xb0
 800813c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d101      	bne.n	8008148 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008144:	2303      	movs	r3, #3
 8008146:	e01a      	b.n	800817e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008148:	78fb      	ldrb	r3, [r7, #3]
 800814a:	4619      	mov	r1, r3
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f002 f990 	bl	800a472 <USBD_LL_GetRxDataSize>
 8008152:	4602      	mov	r2, r0
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	33b0      	adds	r3, #176	; 0xb0
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	4413      	add	r3, r2
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	68fa      	ldr	r2, [r7, #12]
 800816e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008172:	68fa      	ldr	r2, [r7, #12]
 8008174:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008178:	4611      	mov	r1, r2
 800817a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}

08008186 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008186:	b580      	push	{r7, lr}
 8008188:	b084      	sub	sp, #16
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	32b0      	adds	r2, #176	; 0xb0
 8008198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800819c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d101      	bne.n	80081a8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80081a4:	2303      	movs	r3, #3
 80081a6:	e025      	b.n	80081f4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	33b0      	adds	r3, #176	; 0xb0
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	4413      	add	r3, r2
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d01a      	beq.n	80081f2 <USBD_CDC_EP0_RxReady+0x6c>
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80081c2:	2bff      	cmp	r3, #255	; 0xff
 80081c4:	d015      	beq.n	80081f2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	33b0      	adds	r3, #176	; 0xb0
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	4413      	add	r3, r2
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80081de:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80081e0:	68fa      	ldr	r2, [r7, #12]
 80081e2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80081e6:	b292      	uxth	r2, r2
 80081e8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	22ff      	movs	r2, #255	; 0xff
 80081ee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80081f2:	2300      	movs	r3, #0
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3710      	adds	r7, #16
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b086      	sub	sp, #24
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008204:	2182      	movs	r1, #130	; 0x82
 8008206:	4818      	ldr	r0, [pc, #96]	; (8008268 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008208:	f000 fd0f 	bl	8008c2a <USBD_GetEpDesc>
 800820c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800820e:	2101      	movs	r1, #1
 8008210:	4815      	ldr	r0, [pc, #84]	; (8008268 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008212:	f000 fd0a 	bl	8008c2a <USBD_GetEpDesc>
 8008216:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008218:	2181      	movs	r1, #129	; 0x81
 800821a:	4813      	ldr	r0, [pc, #76]	; (8008268 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800821c:	f000 fd05 	bl	8008c2a <USBD_GetEpDesc>
 8008220:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d002      	beq.n	800822e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	2210      	movs	r2, #16
 800822c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d006      	beq.n	8008242 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	2200      	movs	r2, #0
 8008238:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800823c:	711a      	strb	r2, [r3, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d006      	beq.n	8008256 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2200      	movs	r2, #0
 800824c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008250:	711a      	strb	r2, [r3, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2243      	movs	r2, #67	; 0x43
 800825a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800825c:	4b02      	ldr	r3, [pc, #8]	; (8008268 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800825e:	4618      	mov	r0, r3
 8008260:	3718      	adds	r7, #24
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop
 8008268:	20000050 	.word	0x20000050

0800826c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b086      	sub	sp, #24
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008274:	2182      	movs	r1, #130	; 0x82
 8008276:	4818      	ldr	r0, [pc, #96]	; (80082d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008278:	f000 fcd7 	bl	8008c2a <USBD_GetEpDesc>
 800827c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800827e:	2101      	movs	r1, #1
 8008280:	4815      	ldr	r0, [pc, #84]	; (80082d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008282:	f000 fcd2 	bl	8008c2a <USBD_GetEpDesc>
 8008286:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008288:	2181      	movs	r1, #129	; 0x81
 800828a:	4813      	ldr	r0, [pc, #76]	; (80082d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800828c:	f000 fccd 	bl	8008c2a <USBD_GetEpDesc>
 8008290:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d002      	beq.n	800829e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	2210      	movs	r2, #16
 800829c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d006      	beq.n	80082b2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	2200      	movs	r2, #0
 80082a8:	711a      	strb	r2, [r3, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	f042 0202 	orr.w	r2, r2, #2
 80082b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d006      	beq.n	80082c6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2200      	movs	r2, #0
 80082bc:	711a      	strb	r2, [r3, #4]
 80082be:	2200      	movs	r2, #0
 80082c0:	f042 0202 	orr.w	r2, r2, #2
 80082c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2243      	movs	r2, #67	; 0x43
 80082ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80082cc:	4b02      	ldr	r3, [pc, #8]	; (80082d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3718      	adds	r7, #24
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	bf00      	nop
 80082d8:	20000050 	.word	0x20000050

080082dc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b086      	sub	sp, #24
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80082e4:	2182      	movs	r1, #130	; 0x82
 80082e6:	4818      	ldr	r0, [pc, #96]	; (8008348 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80082e8:	f000 fc9f 	bl	8008c2a <USBD_GetEpDesc>
 80082ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80082ee:	2101      	movs	r1, #1
 80082f0:	4815      	ldr	r0, [pc, #84]	; (8008348 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80082f2:	f000 fc9a 	bl	8008c2a <USBD_GetEpDesc>
 80082f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80082f8:	2181      	movs	r1, #129	; 0x81
 80082fa:	4813      	ldr	r0, [pc, #76]	; (8008348 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80082fc:	f000 fc95 	bl	8008c2a <USBD_GetEpDesc>
 8008300:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d002      	beq.n	800830e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	2210      	movs	r2, #16
 800830c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d006      	beq.n	8008322 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	2200      	movs	r2, #0
 8008318:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800831c:	711a      	strb	r2, [r3, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d006      	beq.n	8008336 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2200      	movs	r2, #0
 800832c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008330:	711a      	strb	r2, [r3, #4]
 8008332:	2200      	movs	r2, #0
 8008334:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2243      	movs	r2, #67	; 0x43
 800833a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800833c:	4b02      	ldr	r3, [pc, #8]	; (8008348 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800833e:	4618      	mov	r0, r3
 8008340:	3718      	adds	r7, #24
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	20000050 	.word	0x20000050

0800834c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	220a      	movs	r2, #10
 8008358:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800835a:	4b03      	ldr	r3, [pc, #12]	; (8008368 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800835c:	4618      	mov	r0, r3
 800835e:	370c      	adds	r7, #12
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr
 8008368:	2000000c 	.word	0x2000000c

0800836c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d101      	bne.n	8008380 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800837c:	2303      	movs	r3, #3
 800837e:	e009      	b.n	8008394 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	33b0      	adds	r3, #176	; 0xb0
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	4413      	add	r3, r2
 800838e:	683a      	ldr	r2, [r7, #0]
 8008390:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008392:	2300      	movs	r3, #0
}
 8008394:	4618      	mov	r0, r3
 8008396:	370c      	adds	r7, #12
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr

080083a0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b087      	sub	sp, #28
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	32b0      	adds	r2, #176	; 0xb0
 80083b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083ba:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d101      	bne.n	80083c6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80083c2:	2303      	movs	r3, #3
 80083c4:	e008      	b.n	80083d8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	68ba      	ldr	r2, [r7, #8]
 80083ca:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80083d6:	2300      	movs	r3, #0
}
 80083d8:	4618      	mov	r0, r3
 80083da:	371c      	adds	r7, #28
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr

080083e4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b085      	sub	sp, #20
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	32b0      	adds	r2, #176	; 0xb0
 80083f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083fc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d101      	bne.n	8008408 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008404:	2303      	movs	r3, #3
 8008406:	e004      	b.n	8008412 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	683a      	ldr	r2, [r7, #0]
 800840c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008410:	2300      	movs	r3, #0
}
 8008412:	4618      	mov	r0, r3
 8008414:	3714      	adds	r7, #20
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr
	...

08008420 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	32b0      	adds	r2, #176	; 0xb0
 8008432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008436:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	32b0      	adds	r2, #176	; 0xb0
 8008442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d101      	bne.n	800844e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800844a:	2303      	movs	r3, #3
 800844c:	e018      	b.n	8008480 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	7c1b      	ldrb	r3, [r3, #16]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d10a      	bne.n	800846c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008456:	4b0c      	ldr	r3, [pc, #48]	; (8008488 <USBD_CDC_ReceivePacket+0x68>)
 8008458:	7819      	ldrb	r1, [r3, #0]
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008460:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f001 ffe3 	bl	800a430 <USBD_LL_PrepareReceive>
 800846a:	e008      	b.n	800847e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800846c:	4b06      	ldr	r3, [pc, #24]	; (8008488 <USBD_CDC_ReceivePacket+0x68>)
 800846e:	7819      	ldrb	r1, [r3, #0]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008476:	2340      	movs	r3, #64	; 0x40
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f001 ffd9 	bl	800a430 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800847e:	2300      	movs	r3, #0
}
 8008480:	4618      	mov	r0, r3
 8008482:	3710      	adds	r7, #16
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}
 8008488:	20000094 	.word	0x20000094

0800848c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b086      	sub	sp, #24
 8008490:	af00      	add	r7, sp, #0
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	60b9      	str	r1, [r7, #8]
 8008496:	4613      	mov	r3, r2
 8008498:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d101      	bne.n	80084a4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80084a0:	2303      	movs	r3, #3
 80084a2:	e01f      	b.n	80084e4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2200      	movs	r2, #0
 80084a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2200      	movs	r2, #0
 80084b0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2200      	movs	r2, #0
 80084b8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d003      	beq.n	80084ca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	68ba      	ldr	r2, [r7, #8]
 80084c6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2201      	movs	r2, #1
 80084ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	79fa      	ldrb	r2, [r7, #7]
 80084d6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80084d8:	68f8      	ldr	r0, [r7, #12]
 80084da:	f001 fe53 	bl	800a184 <USBD_LL_Init>
 80084de:	4603      	mov	r3, r0
 80084e0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80084e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3718      	adds	r7, #24
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80084f6:	2300      	movs	r3, #0
 80084f8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d101      	bne.n	8008504 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008500:	2303      	movs	r3, #3
 8008502:	e025      	b.n	8008550 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	683a      	ldr	r2, [r7, #0]
 8008508:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	32ae      	adds	r2, #174	; 0xae
 8008516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800851a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800851c:	2b00      	cmp	r3, #0
 800851e:	d00f      	beq.n	8008540 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	32ae      	adds	r2, #174	; 0xae
 800852a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800852e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008530:	f107 020e 	add.w	r2, r7, #14
 8008534:	4610      	mov	r0, r2
 8008536:	4798      	blx	r3
 8008538:	4602      	mov	r2, r0
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008546:	1c5a      	adds	r2, r3, #1
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800854e:	2300      	movs	r3, #0
}
 8008550:	4618      	mov	r0, r3
 8008552:	3710      	adds	r7, #16
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b082      	sub	sp, #8
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f001 fe5b 	bl	800a21c <USBD_LL_Start>
 8008566:	4603      	mov	r3, r0
}
 8008568:	4618      	mov	r0, r3
 800856a:	3708      	adds	r7, #8
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008570:	b480      	push	{r7}
 8008572:	b083      	sub	sp, #12
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008578:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800857a:	4618      	mov	r0, r3
 800857c:	370c      	adds	r7, #12
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr

08008586 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008586:	b580      	push	{r7, lr}
 8008588:	b084      	sub	sp, #16
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
 800858e:	460b      	mov	r3, r1
 8008590:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008592:	2300      	movs	r3, #0
 8008594:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800859c:	2b00      	cmp	r3, #0
 800859e:	d009      	beq.n	80085b4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	78fa      	ldrb	r2, [r7, #3]
 80085aa:	4611      	mov	r1, r2
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	4798      	blx	r3
 80085b0:	4603      	mov	r3, r0
 80085b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80085b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3710      	adds	r7, #16
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}

080085be <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80085be:	b580      	push	{r7, lr}
 80085c0:	b084      	sub	sp, #16
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
 80085c6:	460b      	mov	r3, r1
 80085c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80085ca:	2300      	movs	r3, #0
 80085cc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	78fa      	ldrb	r2, [r7, #3]
 80085d8:	4611      	mov	r1, r2
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	4798      	blx	r3
 80085de:	4603      	mov	r3, r0
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d001      	beq.n	80085e8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80085e4:	2303      	movs	r3, #3
 80085e6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80085e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3710      	adds	r7, #16
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b084      	sub	sp, #16
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
 80085fa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008602:	6839      	ldr	r1, [r7, #0]
 8008604:	4618      	mov	r0, r3
 8008606:	f001 f938 	bl	800987a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2201      	movs	r2, #1
 800860e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008618:	461a      	mov	r2, r3
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008626:	f003 031f 	and.w	r3, r3, #31
 800862a:	2b02      	cmp	r3, #2
 800862c:	d01a      	beq.n	8008664 <USBD_LL_SetupStage+0x72>
 800862e:	2b02      	cmp	r3, #2
 8008630:	d822      	bhi.n	8008678 <USBD_LL_SetupStage+0x86>
 8008632:	2b00      	cmp	r3, #0
 8008634:	d002      	beq.n	800863c <USBD_LL_SetupStage+0x4a>
 8008636:	2b01      	cmp	r3, #1
 8008638:	d00a      	beq.n	8008650 <USBD_LL_SetupStage+0x5e>
 800863a:	e01d      	b.n	8008678 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008642:	4619      	mov	r1, r3
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 fb65 	bl	8008d14 <USBD_StdDevReq>
 800864a:	4603      	mov	r3, r0
 800864c:	73fb      	strb	r3, [r7, #15]
      break;
 800864e:	e020      	b.n	8008692 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008656:	4619      	mov	r1, r3
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 fbcd 	bl	8008df8 <USBD_StdItfReq>
 800865e:	4603      	mov	r3, r0
 8008660:	73fb      	strb	r3, [r7, #15]
      break;
 8008662:	e016      	b.n	8008692 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800866a:	4619      	mov	r1, r3
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 fc2f 	bl	8008ed0 <USBD_StdEPReq>
 8008672:	4603      	mov	r3, r0
 8008674:	73fb      	strb	r3, [r7, #15]
      break;
 8008676:	e00c      	b.n	8008692 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800867e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008682:	b2db      	uxtb	r3, r3
 8008684:	4619      	mov	r1, r3
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f001 fe28 	bl	800a2dc <USBD_LL_StallEP>
 800868c:	4603      	mov	r3, r0
 800868e:	73fb      	strb	r3, [r7, #15]
      break;
 8008690:	bf00      	nop
  }

  return ret;
 8008692:	7bfb      	ldrb	r3, [r7, #15]
}
 8008694:	4618      	mov	r0, r3
 8008696:	3710      	adds	r7, #16
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b086      	sub	sp, #24
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	60f8      	str	r0, [r7, #12]
 80086a4:	460b      	mov	r3, r1
 80086a6:	607a      	str	r2, [r7, #4]
 80086a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80086aa:	2300      	movs	r3, #0
 80086ac:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80086ae:	7afb      	ldrb	r3, [r7, #11]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d16e      	bne.n	8008792 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80086ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80086c2:	2b03      	cmp	r3, #3
 80086c4:	f040 8098 	bne.w	80087f8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	689a      	ldr	r2, [r3, #8]
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d913      	bls.n	80086fc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	689a      	ldr	r2, [r3, #8]
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	68db      	ldr	r3, [r3, #12]
 80086dc:	1ad2      	subs	r2, r2, r3
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	68da      	ldr	r2, [r3, #12]
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	4293      	cmp	r3, r2
 80086ec:	bf28      	it	cs
 80086ee:	4613      	movcs	r3, r2
 80086f0:	461a      	mov	r2, r3
 80086f2:	6879      	ldr	r1, [r7, #4]
 80086f4:	68f8      	ldr	r0, [r7, #12]
 80086f6:	f001 f9c0 	bl	8009a7a <USBD_CtlContinueRx>
 80086fa:	e07d      	b.n	80087f8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008702:	f003 031f 	and.w	r3, r3, #31
 8008706:	2b02      	cmp	r3, #2
 8008708:	d014      	beq.n	8008734 <USBD_LL_DataOutStage+0x98>
 800870a:	2b02      	cmp	r3, #2
 800870c:	d81d      	bhi.n	800874a <USBD_LL_DataOutStage+0xae>
 800870e:	2b00      	cmp	r3, #0
 8008710:	d002      	beq.n	8008718 <USBD_LL_DataOutStage+0x7c>
 8008712:	2b01      	cmp	r3, #1
 8008714:	d003      	beq.n	800871e <USBD_LL_DataOutStage+0x82>
 8008716:	e018      	b.n	800874a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008718:	2300      	movs	r3, #0
 800871a:	75bb      	strb	r3, [r7, #22]
            break;
 800871c:	e018      	b.n	8008750 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008724:	b2db      	uxtb	r3, r3
 8008726:	4619      	mov	r1, r3
 8008728:	68f8      	ldr	r0, [r7, #12]
 800872a:	f000 fa64 	bl	8008bf6 <USBD_CoreFindIF>
 800872e:	4603      	mov	r3, r0
 8008730:	75bb      	strb	r3, [r7, #22]
            break;
 8008732:	e00d      	b.n	8008750 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800873a:	b2db      	uxtb	r3, r3
 800873c:	4619      	mov	r1, r3
 800873e:	68f8      	ldr	r0, [r7, #12]
 8008740:	f000 fa66 	bl	8008c10 <USBD_CoreFindEP>
 8008744:	4603      	mov	r3, r0
 8008746:	75bb      	strb	r3, [r7, #22]
            break;
 8008748:	e002      	b.n	8008750 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800874a:	2300      	movs	r3, #0
 800874c:	75bb      	strb	r3, [r7, #22]
            break;
 800874e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008750:	7dbb      	ldrb	r3, [r7, #22]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d119      	bne.n	800878a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800875c:	b2db      	uxtb	r3, r3
 800875e:	2b03      	cmp	r3, #3
 8008760:	d113      	bne.n	800878a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008762:	7dba      	ldrb	r2, [r7, #22]
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	32ae      	adds	r2, #174	; 0xae
 8008768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800876c:	691b      	ldr	r3, [r3, #16]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d00b      	beq.n	800878a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008772:	7dba      	ldrb	r2, [r7, #22]
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800877a:	7dba      	ldrb	r2, [r7, #22]
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	32ae      	adds	r2, #174	; 0xae
 8008780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008784:	691b      	ldr	r3, [r3, #16]
 8008786:	68f8      	ldr	r0, [r7, #12]
 8008788:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800878a:	68f8      	ldr	r0, [r7, #12]
 800878c:	f001 f986 	bl	8009a9c <USBD_CtlSendStatus>
 8008790:	e032      	b.n	80087f8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008792:	7afb      	ldrb	r3, [r7, #11]
 8008794:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008798:	b2db      	uxtb	r3, r3
 800879a:	4619      	mov	r1, r3
 800879c:	68f8      	ldr	r0, [r7, #12]
 800879e:	f000 fa37 	bl	8008c10 <USBD_CoreFindEP>
 80087a2:	4603      	mov	r3, r0
 80087a4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80087a6:	7dbb      	ldrb	r3, [r7, #22]
 80087a8:	2bff      	cmp	r3, #255	; 0xff
 80087aa:	d025      	beq.n	80087f8 <USBD_LL_DataOutStage+0x15c>
 80087ac:	7dbb      	ldrb	r3, [r7, #22]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d122      	bne.n	80087f8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087b8:	b2db      	uxtb	r3, r3
 80087ba:	2b03      	cmp	r3, #3
 80087bc:	d117      	bne.n	80087ee <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80087be:	7dba      	ldrb	r2, [r7, #22]
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	32ae      	adds	r2, #174	; 0xae
 80087c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087c8:	699b      	ldr	r3, [r3, #24]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d00f      	beq.n	80087ee <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80087ce:	7dba      	ldrb	r2, [r7, #22]
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80087d6:	7dba      	ldrb	r2, [r7, #22]
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	32ae      	adds	r2, #174	; 0xae
 80087dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087e0:	699b      	ldr	r3, [r3, #24]
 80087e2:	7afa      	ldrb	r2, [r7, #11]
 80087e4:	4611      	mov	r1, r2
 80087e6:	68f8      	ldr	r0, [r7, #12]
 80087e8:	4798      	blx	r3
 80087ea:	4603      	mov	r3, r0
 80087ec:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80087ee:	7dfb      	ldrb	r3, [r7, #23]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d001      	beq.n	80087f8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80087f4:	7dfb      	ldrb	r3, [r7, #23]
 80087f6:	e000      	b.n	80087fa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80087f8:	2300      	movs	r3, #0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3718      	adds	r7, #24
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}

08008802 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008802:	b580      	push	{r7, lr}
 8008804:	b086      	sub	sp, #24
 8008806:	af00      	add	r7, sp, #0
 8008808:	60f8      	str	r0, [r7, #12]
 800880a:	460b      	mov	r3, r1
 800880c:	607a      	str	r2, [r7, #4]
 800880e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008810:	7afb      	ldrb	r3, [r7, #11]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d16f      	bne.n	80088f6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	3314      	adds	r3, #20
 800881a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008822:	2b02      	cmp	r3, #2
 8008824:	d15a      	bne.n	80088dc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	689a      	ldr	r2, [r3, #8]
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	429a      	cmp	r2, r3
 8008830:	d914      	bls.n	800885c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	689a      	ldr	r2, [r3, #8]
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	68db      	ldr	r3, [r3, #12]
 800883a:	1ad2      	subs	r2, r2, r3
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	689b      	ldr	r3, [r3, #8]
 8008844:	461a      	mov	r2, r3
 8008846:	6879      	ldr	r1, [r7, #4]
 8008848:	68f8      	ldr	r0, [r7, #12]
 800884a:	f001 f8e8 	bl	8009a1e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800884e:	2300      	movs	r3, #0
 8008850:	2200      	movs	r2, #0
 8008852:	2100      	movs	r1, #0
 8008854:	68f8      	ldr	r0, [r7, #12]
 8008856:	f001 fdeb 	bl	800a430 <USBD_LL_PrepareReceive>
 800885a:	e03f      	b.n	80088dc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	68da      	ldr	r2, [r3, #12]
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	429a      	cmp	r2, r3
 8008866:	d11c      	bne.n	80088a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	685a      	ldr	r2, [r3, #4]
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008870:	429a      	cmp	r2, r3
 8008872:	d316      	bcc.n	80088a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	685a      	ldr	r2, [r3, #4]
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800887e:	429a      	cmp	r2, r3
 8008880:	d20f      	bcs.n	80088a2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008882:	2200      	movs	r2, #0
 8008884:	2100      	movs	r1, #0
 8008886:	68f8      	ldr	r0, [r7, #12]
 8008888:	f001 f8c9 	bl	8009a1e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2200      	movs	r2, #0
 8008890:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008894:	2300      	movs	r3, #0
 8008896:	2200      	movs	r2, #0
 8008898:	2100      	movs	r1, #0
 800889a:	68f8      	ldr	r0, [r7, #12]
 800889c:	f001 fdc8 	bl	800a430 <USBD_LL_PrepareReceive>
 80088a0:	e01c      	b.n	80088dc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	2b03      	cmp	r3, #3
 80088ac:	d10f      	bne.n	80088ce <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088b4:	68db      	ldr	r3, [r3, #12]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d009      	beq.n	80088ce <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2200      	movs	r2, #0
 80088be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088c8:	68db      	ldr	r3, [r3, #12]
 80088ca:	68f8      	ldr	r0, [r7, #12]
 80088cc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80088ce:	2180      	movs	r1, #128	; 0x80
 80088d0:	68f8      	ldr	r0, [r7, #12]
 80088d2:	f001 fd03 	bl	800a2dc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80088d6:	68f8      	ldr	r0, [r7, #12]
 80088d8:	f001 f8f3 	bl	8009ac2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d03a      	beq.n	800895c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80088e6:	68f8      	ldr	r0, [r7, #12]
 80088e8:	f7ff fe42 	bl	8008570 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2200      	movs	r2, #0
 80088f0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80088f4:	e032      	b.n	800895c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80088f6:	7afb      	ldrb	r3, [r7, #11]
 80088f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	4619      	mov	r1, r3
 8008900:	68f8      	ldr	r0, [r7, #12]
 8008902:	f000 f985 	bl	8008c10 <USBD_CoreFindEP>
 8008906:	4603      	mov	r3, r0
 8008908:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800890a:	7dfb      	ldrb	r3, [r7, #23]
 800890c:	2bff      	cmp	r3, #255	; 0xff
 800890e:	d025      	beq.n	800895c <USBD_LL_DataInStage+0x15a>
 8008910:	7dfb      	ldrb	r3, [r7, #23]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d122      	bne.n	800895c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800891c:	b2db      	uxtb	r3, r3
 800891e:	2b03      	cmp	r3, #3
 8008920:	d11c      	bne.n	800895c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008922:	7dfa      	ldrb	r2, [r7, #23]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	32ae      	adds	r2, #174	; 0xae
 8008928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800892c:	695b      	ldr	r3, [r3, #20]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d014      	beq.n	800895c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008932:	7dfa      	ldrb	r2, [r7, #23]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800893a:	7dfa      	ldrb	r2, [r7, #23]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	32ae      	adds	r2, #174	; 0xae
 8008940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008944:	695b      	ldr	r3, [r3, #20]
 8008946:	7afa      	ldrb	r2, [r7, #11]
 8008948:	4611      	mov	r1, r2
 800894a:	68f8      	ldr	r0, [r7, #12]
 800894c:	4798      	blx	r3
 800894e:	4603      	mov	r3, r0
 8008950:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008952:	7dbb      	ldrb	r3, [r7, #22]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d001      	beq.n	800895c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008958:	7dbb      	ldrb	r3, [r7, #22]
 800895a:	e000      	b.n	800895e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800895c:	2300      	movs	r3, #0
}
 800895e:	4618      	mov	r0, r3
 8008960:	3718      	adds	r7, #24
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}

08008966 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008966:	b580      	push	{r7, lr}
 8008968:	b084      	sub	sp, #16
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800896e:	2300      	movs	r3, #0
 8008970:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2201      	movs	r2, #1
 8008976:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2200      	movs	r2, #0
 800897e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2200      	movs	r2, #0
 8008994:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d014      	beq.n	80089cc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d00e      	beq.n	80089cc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	6852      	ldr	r2, [r2, #4]
 80089ba:	b2d2      	uxtb	r2, r2
 80089bc:	4611      	mov	r1, r2
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	4798      	blx	r3
 80089c2:	4603      	mov	r3, r0
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d001      	beq.n	80089cc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80089c8:	2303      	movs	r3, #3
 80089ca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80089cc:	2340      	movs	r3, #64	; 0x40
 80089ce:	2200      	movs	r2, #0
 80089d0:	2100      	movs	r1, #0
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f001 fc3d 	bl	800a252 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2201      	movs	r2, #1
 80089dc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2240      	movs	r2, #64	; 0x40
 80089e4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80089e8:	2340      	movs	r3, #64	; 0x40
 80089ea:	2200      	movs	r2, #0
 80089ec:	2180      	movs	r1, #128	; 0x80
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f001 fc2f 	bl	800a252 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2201      	movs	r2, #1
 80089f8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2240      	movs	r2, #64	; 0x40
 80089fe:	621a      	str	r2, [r3, #32]

  return ret;
 8008a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}

08008a0a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008a0a:	b480      	push	{r7}
 8008a0c:	b083      	sub	sp, #12
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6078      	str	r0, [r7, #4]
 8008a12:	460b      	mov	r3, r1
 8008a14:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	78fa      	ldrb	r2, [r7, #3]
 8008a1a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008a1c:	2300      	movs	r3, #0
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	370c      	adds	r7, #12
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr

08008a2a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008a2a:	b480      	push	{r7}
 8008a2c:	b083      	sub	sp, #12
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	2b04      	cmp	r3, #4
 8008a3c:	d006      	beq.n	8008a4c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a44:	b2da      	uxtb	r2, r3
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2204      	movs	r2, #4
 8008a50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008a54:	2300      	movs	r3, #0
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	370c      	adds	r7, #12
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr

08008a62 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008a62:	b480      	push	{r7}
 8008a64:	b083      	sub	sp, #12
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	2b04      	cmp	r3, #4
 8008a74:	d106      	bne.n	8008a84 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008a7c:	b2da      	uxtb	r2, r3
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008a84:	2300      	movs	r3, #0
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	370c      	adds	r7, #12
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr

08008a92 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008a92:	b580      	push	{r7, lr}
 8008a94:	b082      	sub	sp, #8
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008aa0:	b2db      	uxtb	r3, r3
 8008aa2:	2b03      	cmp	r3, #3
 8008aa4:	d110      	bne.n	8008ac8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d00b      	beq.n	8008ac8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ab6:	69db      	ldr	r3, [r3, #28]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d005      	beq.n	8008ac8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ac2:	69db      	ldr	r3, [r3, #28]
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008ac8:	2300      	movs	r3, #0
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3708      	adds	r7, #8
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}

08008ad2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008ad2:	b580      	push	{r7, lr}
 8008ad4:	b082      	sub	sp, #8
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	6078      	str	r0, [r7, #4]
 8008ada:	460b      	mov	r3, r1
 8008adc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	32ae      	adds	r2, #174	; 0xae
 8008ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d101      	bne.n	8008af4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008af0:	2303      	movs	r3, #3
 8008af2:	e01c      	b.n	8008b2e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	2b03      	cmp	r3, #3
 8008afe:	d115      	bne.n	8008b2c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	32ae      	adds	r2, #174	; 0xae
 8008b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b0e:	6a1b      	ldr	r3, [r3, #32]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d00b      	beq.n	8008b2c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	32ae      	adds	r2, #174	; 0xae
 8008b1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b22:	6a1b      	ldr	r3, [r3, #32]
 8008b24:	78fa      	ldrb	r2, [r7, #3]
 8008b26:	4611      	mov	r1, r2
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008b2c:	2300      	movs	r3, #0
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3708      	adds	r7, #8
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}

08008b36 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008b36:	b580      	push	{r7, lr}
 8008b38:	b082      	sub	sp, #8
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	6078      	str	r0, [r7, #4]
 8008b3e:	460b      	mov	r3, r1
 8008b40:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	32ae      	adds	r2, #174	; 0xae
 8008b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d101      	bne.n	8008b58 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008b54:	2303      	movs	r3, #3
 8008b56:	e01c      	b.n	8008b92 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	2b03      	cmp	r3, #3
 8008b62:	d115      	bne.n	8008b90 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	32ae      	adds	r2, #174	; 0xae
 8008b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d00b      	beq.n	8008b90 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	32ae      	adds	r2, #174	; 0xae
 8008b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b88:	78fa      	ldrb	r2, [r7, #3]
 8008b8a:	4611      	mov	r1, r2
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008b90:	2300      	movs	r3, #0
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3708      	adds	r7, #8
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008b9a:	b480      	push	{r7}
 8008b9c:	b083      	sub	sp, #12
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008ba2:	2300      	movs	r3, #0
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	370c      	adds	r7, #12
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d00e      	beq.n	8008bec <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	6852      	ldr	r2, [r2, #4]
 8008bda:	b2d2      	uxtb	r2, r2
 8008bdc:	4611      	mov	r1, r2
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	4798      	blx	r3
 8008be2:	4603      	mov	r3, r0
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d001      	beq.n	8008bec <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008be8:	2303      	movs	r3, #3
 8008bea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3710      	adds	r7, #16
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}

08008bf6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008bf6:	b480      	push	{r7}
 8008bf8:	b083      	sub	sp, #12
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	6078      	str	r0, [r7, #4]
 8008bfe:	460b      	mov	r3, r1
 8008c00:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008c02:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	370c      	adds	r7, #12
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr

08008c10 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	460b      	mov	r3, r1
 8008c1a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008c1c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	370c      	adds	r7, #12
 8008c22:	46bd      	mov	sp, r7
 8008c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c28:	4770      	bx	lr

08008c2a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008c2a:	b580      	push	{r7, lr}
 8008c2c:	b086      	sub	sp, #24
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	6078      	str	r0, [r7, #4]
 8008c32:	460b      	mov	r3, r1
 8008c34:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	885b      	ldrh	r3, [r3, #2]
 8008c46:	b29a      	uxth	r2, r3
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d920      	bls.n	8008c94 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008c5a:	e013      	b.n	8008c84 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008c5c:	f107 030a 	add.w	r3, r7, #10
 8008c60:	4619      	mov	r1, r3
 8008c62:	6978      	ldr	r0, [r7, #20]
 8008c64:	f000 f81b 	bl	8008c9e <USBD_GetNextDesc>
 8008c68:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	785b      	ldrb	r3, [r3, #1]
 8008c6e:	2b05      	cmp	r3, #5
 8008c70:	d108      	bne.n	8008c84 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	789b      	ldrb	r3, [r3, #2]
 8008c7a:	78fa      	ldrb	r2, [r7, #3]
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d008      	beq.n	8008c92 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008c80:	2300      	movs	r3, #0
 8008c82:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	885b      	ldrh	r3, [r3, #2]
 8008c88:	b29a      	uxth	r2, r3
 8008c8a:	897b      	ldrh	r3, [r7, #10]
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d8e5      	bhi.n	8008c5c <USBD_GetEpDesc+0x32>
 8008c90:	e000      	b.n	8008c94 <USBD_GetEpDesc+0x6a>
          break;
 8008c92:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008c94:	693b      	ldr	r3, [r7, #16]
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3718      	adds	r7, #24
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}

08008c9e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008c9e:	b480      	push	{r7}
 8008ca0:	b085      	sub	sp, #20
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
 8008ca6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	881a      	ldrh	r2, [r3, #0]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	4413      	add	r3, r2
 8008cb8:	b29a      	uxth	r2, r3
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	4413      	add	r3, r2
 8008cc8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008cca:	68fb      	ldr	r3, [r7, #12]
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3714      	adds	r7, #20
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr

08008cd8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b087      	sub	sp, #28
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	781b      	ldrb	r3, [r3, #0]
 8008ce8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	3301      	adds	r3, #1
 8008cee:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008cf6:	8a3b      	ldrh	r3, [r7, #16]
 8008cf8:	021b      	lsls	r3, r3, #8
 8008cfa:	b21a      	sxth	r2, r3
 8008cfc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008d00:	4313      	orrs	r3, r2
 8008d02:	b21b      	sxth	r3, r3
 8008d04:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008d06:	89fb      	ldrh	r3, [r7, #14]
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	371c      	adds	r7, #28
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr

08008d14 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b084      	sub	sp, #16
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d2a:	2b40      	cmp	r3, #64	; 0x40
 8008d2c:	d005      	beq.n	8008d3a <USBD_StdDevReq+0x26>
 8008d2e:	2b40      	cmp	r3, #64	; 0x40
 8008d30:	d857      	bhi.n	8008de2 <USBD_StdDevReq+0xce>
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d00f      	beq.n	8008d56 <USBD_StdDevReq+0x42>
 8008d36:	2b20      	cmp	r3, #32
 8008d38:	d153      	bne.n	8008de2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	32ae      	adds	r2, #174	; 0xae
 8008d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d48:	689b      	ldr	r3, [r3, #8]
 8008d4a:	6839      	ldr	r1, [r7, #0]
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	4798      	blx	r3
 8008d50:	4603      	mov	r3, r0
 8008d52:	73fb      	strb	r3, [r7, #15]
      break;
 8008d54:	e04a      	b.n	8008dec <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	785b      	ldrb	r3, [r3, #1]
 8008d5a:	2b09      	cmp	r3, #9
 8008d5c:	d83b      	bhi.n	8008dd6 <USBD_StdDevReq+0xc2>
 8008d5e:	a201      	add	r2, pc, #4	; (adr r2, 8008d64 <USBD_StdDevReq+0x50>)
 8008d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d64:	08008db9 	.word	0x08008db9
 8008d68:	08008dcd 	.word	0x08008dcd
 8008d6c:	08008dd7 	.word	0x08008dd7
 8008d70:	08008dc3 	.word	0x08008dc3
 8008d74:	08008dd7 	.word	0x08008dd7
 8008d78:	08008d97 	.word	0x08008d97
 8008d7c:	08008d8d 	.word	0x08008d8d
 8008d80:	08008dd7 	.word	0x08008dd7
 8008d84:	08008daf 	.word	0x08008daf
 8008d88:	08008da1 	.word	0x08008da1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008d8c:	6839      	ldr	r1, [r7, #0]
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 fa3c 	bl	800920c <USBD_GetDescriptor>
          break;
 8008d94:	e024      	b.n	8008de0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008d96:	6839      	ldr	r1, [r7, #0]
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 fbcb 	bl	8009534 <USBD_SetAddress>
          break;
 8008d9e:	e01f      	b.n	8008de0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008da0:	6839      	ldr	r1, [r7, #0]
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 fc0a 	bl	80095bc <USBD_SetConfig>
 8008da8:	4603      	mov	r3, r0
 8008daa:	73fb      	strb	r3, [r7, #15]
          break;
 8008dac:	e018      	b.n	8008de0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008dae:	6839      	ldr	r1, [r7, #0]
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 fcad 	bl	8009710 <USBD_GetConfig>
          break;
 8008db6:	e013      	b.n	8008de0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008db8:	6839      	ldr	r1, [r7, #0]
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 fcde 	bl	800977c <USBD_GetStatus>
          break;
 8008dc0:	e00e      	b.n	8008de0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008dc2:	6839      	ldr	r1, [r7, #0]
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f000 fd0d 	bl	80097e4 <USBD_SetFeature>
          break;
 8008dca:	e009      	b.n	8008de0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008dcc:	6839      	ldr	r1, [r7, #0]
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 fd31 	bl	8009836 <USBD_ClrFeature>
          break;
 8008dd4:	e004      	b.n	8008de0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008dd6:	6839      	ldr	r1, [r7, #0]
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 fd88 	bl	80098ee <USBD_CtlError>
          break;
 8008dde:	bf00      	nop
      }
      break;
 8008de0:	e004      	b.n	8008dec <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008de2:	6839      	ldr	r1, [r7, #0]
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 fd82 	bl	80098ee <USBD_CtlError>
      break;
 8008dea:	bf00      	nop
  }

  return ret;
 8008dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3710      	adds	r7, #16
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop

08008df8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b084      	sub	sp, #16
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e02:	2300      	movs	r3, #0
 8008e04:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e0e:	2b40      	cmp	r3, #64	; 0x40
 8008e10:	d005      	beq.n	8008e1e <USBD_StdItfReq+0x26>
 8008e12:	2b40      	cmp	r3, #64	; 0x40
 8008e14:	d852      	bhi.n	8008ebc <USBD_StdItfReq+0xc4>
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d001      	beq.n	8008e1e <USBD_StdItfReq+0x26>
 8008e1a:	2b20      	cmp	r3, #32
 8008e1c:	d14e      	bne.n	8008ebc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	3b01      	subs	r3, #1
 8008e28:	2b02      	cmp	r3, #2
 8008e2a:	d840      	bhi.n	8008eae <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	889b      	ldrh	r3, [r3, #4]
 8008e30:	b2db      	uxtb	r3, r3
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d836      	bhi.n	8008ea4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	889b      	ldrh	r3, [r3, #4]
 8008e3a:	b2db      	uxtb	r3, r3
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f7ff fed9 	bl	8008bf6 <USBD_CoreFindIF>
 8008e44:	4603      	mov	r3, r0
 8008e46:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e48:	7bbb      	ldrb	r3, [r7, #14]
 8008e4a:	2bff      	cmp	r3, #255	; 0xff
 8008e4c:	d01d      	beq.n	8008e8a <USBD_StdItfReq+0x92>
 8008e4e:	7bbb      	ldrb	r3, [r7, #14]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d11a      	bne.n	8008e8a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008e54:	7bba      	ldrb	r2, [r7, #14]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	32ae      	adds	r2, #174	; 0xae
 8008e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d00f      	beq.n	8008e84 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008e64:	7bba      	ldrb	r2, [r7, #14]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008e6c:	7bba      	ldrb	r2, [r7, #14]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	32ae      	adds	r2, #174	; 0xae
 8008e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e76:	689b      	ldr	r3, [r3, #8]
 8008e78:	6839      	ldr	r1, [r7, #0]
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	4798      	blx	r3
 8008e7e:	4603      	mov	r3, r0
 8008e80:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008e82:	e004      	b.n	8008e8e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008e84:	2303      	movs	r3, #3
 8008e86:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008e88:	e001      	b.n	8008e8e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008e8a:	2303      	movs	r3, #3
 8008e8c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	88db      	ldrh	r3, [r3, #6]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d110      	bne.n	8008eb8 <USBD_StdItfReq+0xc0>
 8008e96:	7bfb      	ldrb	r3, [r7, #15]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d10d      	bne.n	8008eb8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 fdfd 	bl	8009a9c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008ea2:	e009      	b.n	8008eb8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008ea4:	6839      	ldr	r1, [r7, #0]
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 fd21 	bl	80098ee <USBD_CtlError>
          break;
 8008eac:	e004      	b.n	8008eb8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008eae:	6839      	ldr	r1, [r7, #0]
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f000 fd1c 	bl	80098ee <USBD_CtlError>
          break;
 8008eb6:	e000      	b.n	8008eba <USBD_StdItfReq+0xc2>
          break;
 8008eb8:	bf00      	nop
      }
      break;
 8008eba:	e004      	b.n	8008ec6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008ebc:	6839      	ldr	r1, [r7, #0]
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f000 fd15 	bl	80098ee <USBD_CtlError>
      break;
 8008ec4:	bf00      	nop
  }

  return ret;
 8008ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3710      	adds	r7, #16
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008eda:	2300      	movs	r3, #0
 8008edc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	889b      	ldrh	r3, [r3, #4]
 8008ee2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008eec:	2b40      	cmp	r3, #64	; 0x40
 8008eee:	d007      	beq.n	8008f00 <USBD_StdEPReq+0x30>
 8008ef0:	2b40      	cmp	r3, #64	; 0x40
 8008ef2:	f200 817f 	bhi.w	80091f4 <USBD_StdEPReq+0x324>
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d02a      	beq.n	8008f50 <USBD_StdEPReq+0x80>
 8008efa:	2b20      	cmp	r3, #32
 8008efc:	f040 817a 	bne.w	80091f4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008f00:	7bbb      	ldrb	r3, [r7, #14]
 8008f02:	4619      	mov	r1, r3
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f7ff fe83 	bl	8008c10 <USBD_CoreFindEP>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f0e:	7b7b      	ldrb	r3, [r7, #13]
 8008f10:	2bff      	cmp	r3, #255	; 0xff
 8008f12:	f000 8174 	beq.w	80091fe <USBD_StdEPReq+0x32e>
 8008f16:	7b7b      	ldrb	r3, [r7, #13]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	f040 8170 	bne.w	80091fe <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008f1e:	7b7a      	ldrb	r2, [r7, #13]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008f26:	7b7a      	ldrb	r2, [r7, #13]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	32ae      	adds	r2, #174	; 0xae
 8008f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f30:	689b      	ldr	r3, [r3, #8]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	f000 8163 	beq.w	80091fe <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008f38:	7b7a      	ldrb	r2, [r7, #13]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	32ae      	adds	r2, #174	; 0xae
 8008f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f42:	689b      	ldr	r3, [r3, #8]
 8008f44:	6839      	ldr	r1, [r7, #0]
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	4798      	blx	r3
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008f4e:	e156      	b.n	80091fe <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	785b      	ldrb	r3, [r3, #1]
 8008f54:	2b03      	cmp	r3, #3
 8008f56:	d008      	beq.n	8008f6a <USBD_StdEPReq+0x9a>
 8008f58:	2b03      	cmp	r3, #3
 8008f5a:	f300 8145 	bgt.w	80091e8 <USBD_StdEPReq+0x318>
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	f000 809b 	beq.w	800909a <USBD_StdEPReq+0x1ca>
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d03c      	beq.n	8008fe2 <USBD_StdEPReq+0x112>
 8008f68:	e13e      	b.n	80091e8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f70:	b2db      	uxtb	r3, r3
 8008f72:	2b02      	cmp	r3, #2
 8008f74:	d002      	beq.n	8008f7c <USBD_StdEPReq+0xac>
 8008f76:	2b03      	cmp	r3, #3
 8008f78:	d016      	beq.n	8008fa8 <USBD_StdEPReq+0xd8>
 8008f7a:	e02c      	b.n	8008fd6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f7c:	7bbb      	ldrb	r3, [r7, #14]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d00d      	beq.n	8008f9e <USBD_StdEPReq+0xce>
 8008f82:	7bbb      	ldrb	r3, [r7, #14]
 8008f84:	2b80      	cmp	r3, #128	; 0x80
 8008f86:	d00a      	beq.n	8008f9e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f88:	7bbb      	ldrb	r3, [r7, #14]
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f001 f9a5 	bl	800a2dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f92:	2180      	movs	r1, #128	; 0x80
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f001 f9a1 	bl	800a2dc <USBD_LL_StallEP>
 8008f9a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008f9c:	e020      	b.n	8008fe0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008f9e:	6839      	ldr	r1, [r7, #0]
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 fca4 	bl	80098ee <USBD_CtlError>
              break;
 8008fa6:	e01b      	b.n	8008fe0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	885b      	ldrh	r3, [r3, #2]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d10e      	bne.n	8008fce <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008fb0:	7bbb      	ldrb	r3, [r7, #14]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d00b      	beq.n	8008fce <USBD_StdEPReq+0xfe>
 8008fb6:	7bbb      	ldrb	r3, [r7, #14]
 8008fb8:	2b80      	cmp	r3, #128	; 0x80
 8008fba:	d008      	beq.n	8008fce <USBD_StdEPReq+0xfe>
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	88db      	ldrh	r3, [r3, #6]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d104      	bne.n	8008fce <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008fc4:	7bbb      	ldrb	r3, [r7, #14]
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f001 f987 	bl	800a2dc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 fd64 	bl	8009a9c <USBD_CtlSendStatus>

              break;
 8008fd4:	e004      	b.n	8008fe0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008fd6:	6839      	ldr	r1, [r7, #0]
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f000 fc88 	bl	80098ee <USBD_CtlError>
              break;
 8008fde:	bf00      	nop
          }
          break;
 8008fe0:	e107      	b.n	80091f2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	2b02      	cmp	r3, #2
 8008fec:	d002      	beq.n	8008ff4 <USBD_StdEPReq+0x124>
 8008fee:	2b03      	cmp	r3, #3
 8008ff0:	d016      	beq.n	8009020 <USBD_StdEPReq+0x150>
 8008ff2:	e04b      	b.n	800908c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ff4:	7bbb      	ldrb	r3, [r7, #14]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d00d      	beq.n	8009016 <USBD_StdEPReq+0x146>
 8008ffa:	7bbb      	ldrb	r3, [r7, #14]
 8008ffc:	2b80      	cmp	r3, #128	; 0x80
 8008ffe:	d00a      	beq.n	8009016 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009000:	7bbb      	ldrb	r3, [r7, #14]
 8009002:	4619      	mov	r1, r3
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f001 f969 	bl	800a2dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800900a:	2180      	movs	r1, #128	; 0x80
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f001 f965 	bl	800a2dc <USBD_LL_StallEP>
 8009012:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009014:	e040      	b.n	8009098 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009016:	6839      	ldr	r1, [r7, #0]
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 fc68 	bl	80098ee <USBD_CtlError>
              break;
 800901e:	e03b      	b.n	8009098 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	885b      	ldrh	r3, [r3, #2]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d136      	bne.n	8009096 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009028:	7bbb      	ldrb	r3, [r7, #14]
 800902a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800902e:	2b00      	cmp	r3, #0
 8009030:	d004      	beq.n	800903c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009032:	7bbb      	ldrb	r3, [r7, #14]
 8009034:	4619      	mov	r1, r3
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f001 f96f 	bl	800a31a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 fd2d 	bl	8009a9c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009042:	7bbb      	ldrb	r3, [r7, #14]
 8009044:	4619      	mov	r1, r3
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f7ff fde2 	bl	8008c10 <USBD_CoreFindEP>
 800904c:	4603      	mov	r3, r0
 800904e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009050:	7b7b      	ldrb	r3, [r7, #13]
 8009052:	2bff      	cmp	r3, #255	; 0xff
 8009054:	d01f      	beq.n	8009096 <USBD_StdEPReq+0x1c6>
 8009056:	7b7b      	ldrb	r3, [r7, #13]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d11c      	bne.n	8009096 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800905c:	7b7a      	ldrb	r2, [r7, #13]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009064:	7b7a      	ldrb	r2, [r7, #13]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	32ae      	adds	r2, #174	; 0xae
 800906a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800906e:	689b      	ldr	r3, [r3, #8]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d010      	beq.n	8009096 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009074:	7b7a      	ldrb	r2, [r7, #13]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	32ae      	adds	r2, #174	; 0xae
 800907a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	6839      	ldr	r1, [r7, #0]
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	4798      	blx	r3
 8009086:	4603      	mov	r3, r0
 8009088:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800908a:	e004      	b.n	8009096 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800908c:	6839      	ldr	r1, [r7, #0]
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 fc2d 	bl	80098ee <USBD_CtlError>
              break;
 8009094:	e000      	b.n	8009098 <USBD_StdEPReq+0x1c8>
              break;
 8009096:	bf00      	nop
          }
          break;
 8009098:	e0ab      	b.n	80091f2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090a0:	b2db      	uxtb	r3, r3
 80090a2:	2b02      	cmp	r3, #2
 80090a4:	d002      	beq.n	80090ac <USBD_StdEPReq+0x1dc>
 80090a6:	2b03      	cmp	r3, #3
 80090a8:	d032      	beq.n	8009110 <USBD_StdEPReq+0x240>
 80090aa:	e097      	b.n	80091dc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80090ac:	7bbb      	ldrb	r3, [r7, #14]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d007      	beq.n	80090c2 <USBD_StdEPReq+0x1f2>
 80090b2:	7bbb      	ldrb	r3, [r7, #14]
 80090b4:	2b80      	cmp	r3, #128	; 0x80
 80090b6:	d004      	beq.n	80090c2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80090b8:	6839      	ldr	r1, [r7, #0]
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 fc17 	bl	80098ee <USBD_CtlError>
                break;
 80090c0:	e091      	b.n	80091e6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	da0b      	bge.n	80090e2 <USBD_StdEPReq+0x212>
 80090ca:	7bbb      	ldrb	r3, [r7, #14]
 80090cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80090d0:	4613      	mov	r3, r2
 80090d2:	009b      	lsls	r3, r3, #2
 80090d4:	4413      	add	r3, r2
 80090d6:	009b      	lsls	r3, r3, #2
 80090d8:	3310      	adds	r3, #16
 80090da:	687a      	ldr	r2, [r7, #4]
 80090dc:	4413      	add	r3, r2
 80090de:	3304      	adds	r3, #4
 80090e0:	e00b      	b.n	80090fa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80090e2:	7bbb      	ldrb	r3, [r7, #14]
 80090e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090e8:	4613      	mov	r3, r2
 80090ea:	009b      	lsls	r3, r3, #2
 80090ec:	4413      	add	r3, r2
 80090ee:	009b      	lsls	r3, r3, #2
 80090f0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	4413      	add	r3, r2
 80090f8:	3304      	adds	r3, #4
 80090fa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	2200      	movs	r2, #0
 8009100:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	2202      	movs	r2, #2
 8009106:	4619      	mov	r1, r3
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 fc6d 	bl	80099e8 <USBD_CtlSendData>
              break;
 800910e:	e06a      	b.n	80091e6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009110:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009114:	2b00      	cmp	r3, #0
 8009116:	da11      	bge.n	800913c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009118:	7bbb      	ldrb	r3, [r7, #14]
 800911a:	f003 020f 	and.w	r2, r3, #15
 800911e:	6879      	ldr	r1, [r7, #4]
 8009120:	4613      	mov	r3, r2
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	4413      	add	r3, r2
 8009126:	009b      	lsls	r3, r3, #2
 8009128:	440b      	add	r3, r1
 800912a:	3324      	adds	r3, #36	; 0x24
 800912c:	881b      	ldrh	r3, [r3, #0]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d117      	bne.n	8009162 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009132:	6839      	ldr	r1, [r7, #0]
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 fbda 	bl	80098ee <USBD_CtlError>
                  break;
 800913a:	e054      	b.n	80091e6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800913c:	7bbb      	ldrb	r3, [r7, #14]
 800913e:	f003 020f 	and.w	r2, r3, #15
 8009142:	6879      	ldr	r1, [r7, #4]
 8009144:	4613      	mov	r3, r2
 8009146:	009b      	lsls	r3, r3, #2
 8009148:	4413      	add	r3, r2
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	440b      	add	r3, r1
 800914e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009152:	881b      	ldrh	r3, [r3, #0]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d104      	bne.n	8009162 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009158:	6839      	ldr	r1, [r7, #0]
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 fbc7 	bl	80098ee <USBD_CtlError>
                  break;
 8009160:	e041      	b.n	80091e6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009162:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009166:	2b00      	cmp	r3, #0
 8009168:	da0b      	bge.n	8009182 <USBD_StdEPReq+0x2b2>
 800916a:	7bbb      	ldrb	r3, [r7, #14]
 800916c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009170:	4613      	mov	r3, r2
 8009172:	009b      	lsls	r3, r3, #2
 8009174:	4413      	add	r3, r2
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	3310      	adds	r3, #16
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	4413      	add	r3, r2
 800917e:	3304      	adds	r3, #4
 8009180:	e00b      	b.n	800919a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009182:	7bbb      	ldrb	r3, [r7, #14]
 8009184:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009188:	4613      	mov	r3, r2
 800918a:	009b      	lsls	r3, r3, #2
 800918c:	4413      	add	r3, r2
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	4413      	add	r3, r2
 8009198:	3304      	adds	r3, #4
 800919a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800919c:	7bbb      	ldrb	r3, [r7, #14]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d002      	beq.n	80091a8 <USBD_StdEPReq+0x2d8>
 80091a2:	7bbb      	ldrb	r3, [r7, #14]
 80091a4:	2b80      	cmp	r3, #128	; 0x80
 80091a6:	d103      	bne.n	80091b0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	2200      	movs	r2, #0
 80091ac:	601a      	str	r2, [r3, #0]
 80091ae:	e00e      	b.n	80091ce <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80091b0:	7bbb      	ldrb	r3, [r7, #14]
 80091b2:	4619      	mov	r1, r3
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f001 f8cf 	bl	800a358 <USBD_LL_IsStallEP>
 80091ba:	4603      	mov	r3, r0
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d003      	beq.n	80091c8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	2201      	movs	r2, #1
 80091c4:	601a      	str	r2, [r3, #0]
 80091c6:	e002      	b.n	80091ce <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	2200      	movs	r2, #0
 80091cc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	2202      	movs	r2, #2
 80091d2:	4619      	mov	r1, r3
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f000 fc07 	bl	80099e8 <USBD_CtlSendData>
              break;
 80091da:	e004      	b.n	80091e6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80091dc:	6839      	ldr	r1, [r7, #0]
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 fb85 	bl	80098ee <USBD_CtlError>
              break;
 80091e4:	bf00      	nop
          }
          break;
 80091e6:	e004      	b.n	80091f2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80091e8:	6839      	ldr	r1, [r7, #0]
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 fb7f 	bl	80098ee <USBD_CtlError>
          break;
 80091f0:	bf00      	nop
      }
      break;
 80091f2:	e005      	b.n	8009200 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80091f4:	6839      	ldr	r1, [r7, #0]
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 fb79 	bl	80098ee <USBD_CtlError>
      break;
 80091fc:	e000      	b.n	8009200 <USBD_StdEPReq+0x330>
      break;
 80091fe:	bf00      	nop
  }

  return ret;
 8009200:	7bfb      	ldrb	r3, [r7, #15]
}
 8009202:	4618      	mov	r0, r3
 8009204:	3710      	adds	r7, #16
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
	...

0800920c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009216:	2300      	movs	r3, #0
 8009218:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800921a:	2300      	movs	r3, #0
 800921c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800921e:	2300      	movs	r3, #0
 8009220:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	885b      	ldrh	r3, [r3, #2]
 8009226:	0a1b      	lsrs	r3, r3, #8
 8009228:	b29b      	uxth	r3, r3
 800922a:	3b01      	subs	r3, #1
 800922c:	2b0e      	cmp	r3, #14
 800922e:	f200 8152 	bhi.w	80094d6 <USBD_GetDescriptor+0x2ca>
 8009232:	a201      	add	r2, pc, #4	; (adr r2, 8009238 <USBD_GetDescriptor+0x2c>)
 8009234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009238:	080092a9 	.word	0x080092a9
 800923c:	080092c1 	.word	0x080092c1
 8009240:	08009301 	.word	0x08009301
 8009244:	080094d7 	.word	0x080094d7
 8009248:	080094d7 	.word	0x080094d7
 800924c:	08009477 	.word	0x08009477
 8009250:	080094a3 	.word	0x080094a3
 8009254:	080094d7 	.word	0x080094d7
 8009258:	080094d7 	.word	0x080094d7
 800925c:	080094d7 	.word	0x080094d7
 8009260:	080094d7 	.word	0x080094d7
 8009264:	080094d7 	.word	0x080094d7
 8009268:	080094d7 	.word	0x080094d7
 800926c:	080094d7 	.word	0x080094d7
 8009270:	08009275 	.word	0x08009275
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800927a:	69db      	ldr	r3, [r3, #28]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d00b      	beq.n	8009298 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009286:	69db      	ldr	r3, [r3, #28]
 8009288:	687a      	ldr	r2, [r7, #4]
 800928a:	7c12      	ldrb	r2, [r2, #16]
 800928c:	f107 0108 	add.w	r1, r7, #8
 8009290:	4610      	mov	r0, r2
 8009292:	4798      	blx	r3
 8009294:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009296:	e126      	b.n	80094e6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009298:	6839      	ldr	r1, [r7, #0]
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 fb27 	bl	80098ee <USBD_CtlError>
        err++;
 80092a0:	7afb      	ldrb	r3, [r7, #11]
 80092a2:	3301      	adds	r3, #1
 80092a4:	72fb      	strb	r3, [r7, #11]
      break;
 80092a6:	e11e      	b.n	80094e6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	7c12      	ldrb	r2, [r2, #16]
 80092b4:	f107 0108 	add.w	r1, r7, #8
 80092b8:	4610      	mov	r0, r2
 80092ba:	4798      	blx	r3
 80092bc:	60f8      	str	r0, [r7, #12]
      break;
 80092be:	e112      	b.n	80094e6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	7c1b      	ldrb	r3, [r3, #16]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d10d      	bne.n	80092e4 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092d0:	f107 0208 	add.w	r2, r7, #8
 80092d4:	4610      	mov	r0, r2
 80092d6:	4798      	blx	r3
 80092d8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	3301      	adds	r3, #1
 80092de:	2202      	movs	r2, #2
 80092e0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80092e2:	e100      	b.n	80094e6 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ec:	f107 0208 	add.w	r2, r7, #8
 80092f0:	4610      	mov	r0, r2
 80092f2:	4798      	blx	r3
 80092f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	3301      	adds	r3, #1
 80092fa:	2202      	movs	r2, #2
 80092fc:	701a      	strb	r2, [r3, #0]
      break;
 80092fe:	e0f2      	b.n	80094e6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	885b      	ldrh	r3, [r3, #2]
 8009304:	b2db      	uxtb	r3, r3
 8009306:	2b05      	cmp	r3, #5
 8009308:	f200 80ac 	bhi.w	8009464 <USBD_GetDescriptor+0x258>
 800930c:	a201      	add	r2, pc, #4	; (adr r2, 8009314 <USBD_GetDescriptor+0x108>)
 800930e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009312:	bf00      	nop
 8009314:	0800932d 	.word	0x0800932d
 8009318:	08009361 	.word	0x08009361
 800931c:	08009395 	.word	0x08009395
 8009320:	080093c9 	.word	0x080093c9
 8009324:	080093fd 	.word	0x080093fd
 8009328:	08009431 	.word	0x08009431
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d00b      	beq.n	8009350 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	7c12      	ldrb	r2, [r2, #16]
 8009344:	f107 0108 	add.w	r1, r7, #8
 8009348:	4610      	mov	r0, r2
 800934a:	4798      	blx	r3
 800934c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800934e:	e091      	b.n	8009474 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009350:	6839      	ldr	r1, [r7, #0]
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f000 facb 	bl	80098ee <USBD_CtlError>
            err++;
 8009358:	7afb      	ldrb	r3, [r7, #11]
 800935a:	3301      	adds	r3, #1
 800935c:	72fb      	strb	r3, [r7, #11]
          break;
 800935e:	e089      	b.n	8009474 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009366:	689b      	ldr	r3, [r3, #8]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d00b      	beq.n	8009384 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009372:	689b      	ldr	r3, [r3, #8]
 8009374:	687a      	ldr	r2, [r7, #4]
 8009376:	7c12      	ldrb	r2, [r2, #16]
 8009378:	f107 0108 	add.w	r1, r7, #8
 800937c:	4610      	mov	r0, r2
 800937e:	4798      	blx	r3
 8009380:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009382:	e077      	b.n	8009474 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009384:	6839      	ldr	r1, [r7, #0]
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f000 fab1 	bl	80098ee <USBD_CtlError>
            err++;
 800938c:	7afb      	ldrb	r3, [r7, #11]
 800938e:	3301      	adds	r3, #1
 8009390:	72fb      	strb	r3, [r7, #11]
          break;
 8009392:	e06f      	b.n	8009474 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800939a:	68db      	ldr	r3, [r3, #12]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d00b      	beq.n	80093b8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093a6:	68db      	ldr	r3, [r3, #12]
 80093a8:	687a      	ldr	r2, [r7, #4]
 80093aa:	7c12      	ldrb	r2, [r2, #16]
 80093ac:	f107 0108 	add.w	r1, r7, #8
 80093b0:	4610      	mov	r0, r2
 80093b2:	4798      	blx	r3
 80093b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093b6:	e05d      	b.n	8009474 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80093b8:	6839      	ldr	r1, [r7, #0]
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f000 fa97 	bl	80098ee <USBD_CtlError>
            err++;
 80093c0:	7afb      	ldrb	r3, [r7, #11]
 80093c2:	3301      	adds	r3, #1
 80093c4:	72fb      	strb	r3, [r7, #11]
          break;
 80093c6:	e055      	b.n	8009474 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093ce:	691b      	ldr	r3, [r3, #16]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d00b      	beq.n	80093ec <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093da:	691b      	ldr	r3, [r3, #16]
 80093dc:	687a      	ldr	r2, [r7, #4]
 80093de:	7c12      	ldrb	r2, [r2, #16]
 80093e0:	f107 0108 	add.w	r1, r7, #8
 80093e4:	4610      	mov	r0, r2
 80093e6:	4798      	blx	r3
 80093e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093ea:	e043      	b.n	8009474 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80093ec:	6839      	ldr	r1, [r7, #0]
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 fa7d 	bl	80098ee <USBD_CtlError>
            err++;
 80093f4:	7afb      	ldrb	r3, [r7, #11]
 80093f6:	3301      	adds	r3, #1
 80093f8:	72fb      	strb	r3, [r7, #11]
          break;
 80093fa:	e03b      	b.n	8009474 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009402:	695b      	ldr	r3, [r3, #20]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d00b      	beq.n	8009420 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800940e:	695b      	ldr	r3, [r3, #20]
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	7c12      	ldrb	r2, [r2, #16]
 8009414:	f107 0108 	add.w	r1, r7, #8
 8009418:	4610      	mov	r0, r2
 800941a:	4798      	blx	r3
 800941c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800941e:	e029      	b.n	8009474 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009420:	6839      	ldr	r1, [r7, #0]
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 fa63 	bl	80098ee <USBD_CtlError>
            err++;
 8009428:	7afb      	ldrb	r3, [r7, #11]
 800942a:	3301      	adds	r3, #1
 800942c:	72fb      	strb	r3, [r7, #11]
          break;
 800942e:	e021      	b.n	8009474 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009436:	699b      	ldr	r3, [r3, #24]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d00b      	beq.n	8009454 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009442:	699b      	ldr	r3, [r3, #24]
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	7c12      	ldrb	r2, [r2, #16]
 8009448:	f107 0108 	add.w	r1, r7, #8
 800944c:	4610      	mov	r0, r2
 800944e:	4798      	blx	r3
 8009450:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009452:	e00f      	b.n	8009474 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009454:	6839      	ldr	r1, [r7, #0]
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 fa49 	bl	80098ee <USBD_CtlError>
            err++;
 800945c:	7afb      	ldrb	r3, [r7, #11]
 800945e:	3301      	adds	r3, #1
 8009460:	72fb      	strb	r3, [r7, #11]
          break;
 8009462:	e007      	b.n	8009474 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009464:	6839      	ldr	r1, [r7, #0]
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f000 fa41 	bl	80098ee <USBD_CtlError>
          err++;
 800946c:	7afb      	ldrb	r3, [r7, #11]
 800946e:	3301      	adds	r3, #1
 8009470:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009472:	bf00      	nop
      }
      break;
 8009474:	e037      	b.n	80094e6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	7c1b      	ldrb	r3, [r3, #16]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d109      	bne.n	8009492 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009486:	f107 0208 	add.w	r2, r7, #8
 800948a:	4610      	mov	r0, r2
 800948c:	4798      	blx	r3
 800948e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009490:	e029      	b.n	80094e6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009492:	6839      	ldr	r1, [r7, #0]
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 fa2a 	bl	80098ee <USBD_CtlError>
        err++;
 800949a:	7afb      	ldrb	r3, [r7, #11]
 800949c:	3301      	adds	r3, #1
 800949e:	72fb      	strb	r3, [r7, #11]
      break;
 80094a0:	e021      	b.n	80094e6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	7c1b      	ldrb	r3, [r3, #16]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d10d      	bne.n	80094c6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094b2:	f107 0208 	add.w	r2, r7, #8
 80094b6:	4610      	mov	r0, r2
 80094b8:	4798      	blx	r3
 80094ba:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	3301      	adds	r3, #1
 80094c0:	2207      	movs	r2, #7
 80094c2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80094c4:	e00f      	b.n	80094e6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80094c6:	6839      	ldr	r1, [r7, #0]
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f000 fa10 	bl	80098ee <USBD_CtlError>
        err++;
 80094ce:	7afb      	ldrb	r3, [r7, #11]
 80094d0:	3301      	adds	r3, #1
 80094d2:	72fb      	strb	r3, [r7, #11]
      break;
 80094d4:	e007      	b.n	80094e6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80094d6:	6839      	ldr	r1, [r7, #0]
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f000 fa08 	bl	80098ee <USBD_CtlError>
      err++;
 80094de:	7afb      	ldrb	r3, [r7, #11]
 80094e0:	3301      	adds	r3, #1
 80094e2:	72fb      	strb	r3, [r7, #11]
      break;
 80094e4:	bf00      	nop
  }

  if (err != 0U)
 80094e6:	7afb      	ldrb	r3, [r7, #11]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d11e      	bne.n	800952a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	88db      	ldrh	r3, [r3, #6]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d016      	beq.n	8009522 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80094f4:	893b      	ldrh	r3, [r7, #8]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d00e      	beq.n	8009518 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	88da      	ldrh	r2, [r3, #6]
 80094fe:	893b      	ldrh	r3, [r7, #8]
 8009500:	4293      	cmp	r3, r2
 8009502:	bf28      	it	cs
 8009504:	4613      	movcs	r3, r2
 8009506:	b29b      	uxth	r3, r3
 8009508:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800950a:	893b      	ldrh	r3, [r7, #8]
 800950c:	461a      	mov	r2, r3
 800950e:	68f9      	ldr	r1, [r7, #12]
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 fa69 	bl	80099e8 <USBD_CtlSendData>
 8009516:	e009      	b.n	800952c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009518:	6839      	ldr	r1, [r7, #0]
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 f9e7 	bl	80098ee <USBD_CtlError>
 8009520:	e004      	b.n	800952c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 faba 	bl	8009a9c <USBD_CtlSendStatus>
 8009528:	e000      	b.n	800952c <USBD_GetDescriptor+0x320>
    return;
 800952a:	bf00      	nop
  }
}
 800952c:	3710      	adds	r7, #16
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}
 8009532:	bf00      	nop

08009534 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	889b      	ldrh	r3, [r3, #4]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d131      	bne.n	80095aa <USBD_SetAddress+0x76>
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	88db      	ldrh	r3, [r3, #6]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d12d      	bne.n	80095aa <USBD_SetAddress+0x76>
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	885b      	ldrh	r3, [r3, #2]
 8009552:	2b7f      	cmp	r3, #127	; 0x7f
 8009554:	d829      	bhi.n	80095aa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	885b      	ldrh	r3, [r3, #2]
 800955a:	b2db      	uxtb	r3, r3
 800955c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009560:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009568:	b2db      	uxtb	r3, r3
 800956a:	2b03      	cmp	r3, #3
 800956c:	d104      	bne.n	8009578 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800956e:	6839      	ldr	r1, [r7, #0]
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f000 f9bc 	bl	80098ee <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009576:	e01d      	b.n	80095b4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	7bfa      	ldrb	r2, [r7, #15]
 800957c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009580:	7bfb      	ldrb	r3, [r7, #15]
 8009582:	4619      	mov	r1, r3
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f000 ff13 	bl	800a3b0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 fa86 	bl	8009a9c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009590:	7bfb      	ldrb	r3, [r7, #15]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d004      	beq.n	80095a0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2202      	movs	r2, #2
 800959a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800959e:	e009      	b.n	80095b4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2201      	movs	r2, #1
 80095a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095a8:	e004      	b.n	80095b4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80095aa:	6839      	ldr	r1, [r7, #0]
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f000 f99e 	bl	80098ee <USBD_CtlError>
  }
}
 80095b2:	bf00      	nop
 80095b4:	bf00      	nop
 80095b6:	3710      	adds	r7, #16
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b084      	sub	sp, #16
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80095c6:	2300      	movs	r3, #0
 80095c8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	885b      	ldrh	r3, [r3, #2]
 80095ce:	b2da      	uxtb	r2, r3
 80095d0:	4b4e      	ldr	r3, [pc, #312]	; (800970c <USBD_SetConfig+0x150>)
 80095d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80095d4:	4b4d      	ldr	r3, [pc, #308]	; (800970c <USBD_SetConfig+0x150>)
 80095d6:	781b      	ldrb	r3, [r3, #0]
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d905      	bls.n	80095e8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80095dc:	6839      	ldr	r1, [r7, #0]
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 f985 	bl	80098ee <USBD_CtlError>
    return USBD_FAIL;
 80095e4:	2303      	movs	r3, #3
 80095e6:	e08c      	b.n	8009702 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095ee:	b2db      	uxtb	r3, r3
 80095f0:	2b02      	cmp	r3, #2
 80095f2:	d002      	beq.n	80095fa <USBD_SetConfig+0x3e>
 80095f4:	2b03      	cmp	r3, #3
 80095f6:	d029      	beq.n	800964c <USBD_SetConfig+0x90>
 80095f8:	e075      	b.n	80096e6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80095fa:	4b44      	ldr	r3, [pc, #272]	; (800970c <USBD_SetConfig+0x150>)
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d020      	beq.n	8009644 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009602:	4b42      	ldr	r3, [pc, #264]	; (800970c <USBD_SetConfig+0x150>)
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	461a      	mov	r2, r3
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800960c:	4b3f      	ldr	r3, [pc, #252]	; (800970c <USBD_SetConfig+0x150>)
 800960e:	781b      	ldrb	r3, [r3, #0]
 8009610:	4619      	mov	r1, r3
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f7fe ffb7 	bl	8008586 <USBD_SetClassConfig>
 8009618:	4603      	mov	r3, r0
 800961a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800961c:	7bfb      	ldrb	r3, [r7, #15]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d008      	beq.n	8009634 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009622:	6839      	ldr	r1, [r7, #0]
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f000 f962 	bl	80098ee <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2202      	movs	r2, #2
 800962e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009632:	e065      	b.n	8009700 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f000 fa31 	bl	8009a9c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2203      	movs	r2, #3
 800963e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009642:	e05d      	b.n	8009700 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f000 fa29 	bl	8009a9c <USBD_CtlSendStatus>
      break;
 800964a:	e059      	b.n	8009700 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800964c:	4b2f      	ldr	r3, [pc, #188]	; (800970c <USBD_SetConfig+0x150>)
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d112      	bne.n	800967a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2202      	movs	r2, #2
 8009658:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800965c:	4b2b      	ldr	r3, [pc, #172]	; (800970c <USBD_SetConfig+0x150>)
 800965e:	781b      	ldrb	r3, [r3, #0]
 8009660:	461a      	mov	r2, r3
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009666:	4b29      	ldr	r3, [pc, #164]	; (800970c <USBD_SetConfig+0x150>)
 8009668:	781b      	ldrb	r3, [r3, #0]
 800966a:	4619      	mov	r1, r3
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f7fe ffa6 	bl	80085be <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f000 fa12 	bl	8009a9c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009678:	e042      	b.n	8009700 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800967a:	4b24      	ldr	r3, [pc, #144]	; (800970c <USBD_SetConfig+0x150>)
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	461a      	mov	r2, r3
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	685b      	ldr	r3, [r3, #4]
 8009684:	429a      	cmp	r2, r3
 8009686:	d02a      	beq.n	80096de <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	685b      	ldr	r3, [r3, #4]
 800968c:	b2db      	uxtb	r3, r3
 800968e:	4619      	mov	r1, r3
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f7fe ff94 	bl	80085be <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009696:	4b1d      	ldr	r3, [pc, #116]	; (800970c <USBD_SetConfig+0x150>)
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	461a      	mov	r2, r3
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80096a0:	4b1a      	ldr	r3, [pc, #104]	; (800970c <USBD_SetConfig+0x150>)
 80096a2:	781b      	ldrb	r3, [r3, #0]
 80096a4:	4619      	mov	r1, r3
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f7fe ff6d 	bl	8008586 <USBD_SetClassConfig>
 80096ac:	4603      	mov	r3, r0
 80096ae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80096b0:	7bfb      	ldrb	r3, [r7, #15]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d00f      	beq.n	80096d6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80096b6:	6839      	ldr	r1, [r7, #0]
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 f918 	bl	80098ee <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	b2db      	uxtb	r3, r3
 80096c4:	4619      	mov	r1, r3
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f7fe ff79 	bl	80085be <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2202      	movs	r2, #2
 80096d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80096d4:	e014      	b.n	8009700 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 f9e0 	bl	8009a9c <USBD_CtlSendStatus>
      break;
 80096dc:	e010      	b.n	8009700 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f000 f9dc 	bl	8009a9c <USBD_CtlSendStatus>
      break;
 80096e4:	e00c      	b.n	8009700 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80096e6:	6839      	ldr	r1, [r7, #0]
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f000 f900 	bl	80098ee <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80096ee:	4b07      	ldr	r3, [pc, #28]	; (800970c <USBD_SetConfig+0x150>)
 80096f0:	781b      	ldrb	r3, [r3, #0]
 80096f2:	4619      	mov	r1, r3
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f7fe ff62 	bl	80085be <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80096fa:	2303      	movs	r3, #3
 80096fc:	73fb      	strb	r3, [r7, #15]
      break;
 80096fe:	bf00      	nop
  }

  return ret;
 8009700:	7bfb      	ldrb	r3, [r7, #15]
}
 8009702:	4618      	mov	r0, r3
 8009704:	3710      	adds	r7, #16
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}
 800970a:	bf00      	nop
 800970c:	20000408 	.word	0x20000408

08009710 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b082      	sub	sp, #8
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	88db      	ldrh	r3, [r3, #6]
 800971e:	2b01      	cmp	r3, #1
 8009720:	d004      	beq.n	800972c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009722:	6839      	ldr	r1, [r7, #0]
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f000 f8e2 	bl	80098ee <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800972a:	e023      	b.n	8009774 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009732:	b2db      	uxtb	r3, r3
 8009734:	2b02      	cmp	r3, #2
 8009736:	dc02      	bgt.n	800973e <USBD_GetConfig+0x2e>
 8009738:	2b00      	cmp	r3, #0
 800973a:	dc03      	bgt.n	8009744 <USBD_GetConfig+0x34>
 800973c:	e015      	b.n	800976a <USBD_GetConfig+0x5a>
 800973e:	2b03      	cmp	r3, #3
 8009740:	d00b      	beq.n	800975a <USBD_GetConfig+0x4a>
 8009742:	e012      	b.n	800976a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2200      	movs	r2, #0
 8009748:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	3308      	adds	r3, #8
 800974e:	2201      	movs	r2, #1
 8009750:	4619      	mov	r1, r3
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f000 f948 	bl	80099e8 <USBD_CtlSendData>
        break;
 8009758:	e00c      	b.n	8009774 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	3304      	adds	r3, #4
 800975e:	2201      	movs	r2, #1
 8009760:	4619      	mov	r1, r3
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f000 f940 	bl	80099e8 <USBD_CtlSendData>
        break;
 8009768:	e004      	b.n	8009774 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800976a:	6839      	ldr	r1, [r7, #0]
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f000 f8be 	bl	80098ee <USBD_CtlError>
        break;
 8009772:	bf00      	nop
}
 8009774:	bf00      	nop
 8009776:	3708      	adds	r7, #8
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b082      	sub	sp, #8
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800978c:	b2db      	uxtb	r3, r3
 800978e:	3b01      	subs	r3, #1
 8009790:	2b02      	cmp	r3, #2
 8009792:	d81e      	bhi.n	80097d2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	88db      	ldrh	r3, [r3, #6]
 8009798:	2b02      	cmp	r3, #2
 800979a:	d004      	beq.n	80097a6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800979c:	6839      	ldr	r1, [r7, #0]
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f000 f8a5 	bl	80098ee <USBD_CtlError>
        break;
 80097a4:	e01a      	b.n	80097dc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2201      	movs	r2, #1
 80097aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d005      	beq.n	80097c2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	68db      	ldr	r3, [r3, #12]
 80097ba:	f043 0202 	orr.w	r2, r3, #2
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	330c      	adds	r3, #12
 80097c6:	2202      	movs	r2, #2
 80097c8:	4619      	mov	r1, r3
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 f90c 	bl	80099e8 <USBD_CtlSendData>
      break;
 80097d0:	e004      	b.n	80097dc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80097d2:	6839      	ldr	r1, [r7, #0]
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f000 f88a 	bl	80098ee <USBD_CtlError>
      break;
 80097da:	bf00      	nop
  }
}
 80097dc:	bf00      	nop
 80097de:	3708      	adds	r7, #8
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	885b      	ldrh	r3, [r3, #2]
 80097f2:	2b01      	cmp	r3, #1
 80097f4:	d107      	bne.n	8009806 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2201      	movs	r2, #1
 80097fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f000 f94c 	bl	8009a9c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009804:	e013      	b.n	800982e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	885b      	ldrh	r3, [r3, #2]
 800980a:	2b02      	cmp	r3, #2
 800980c:	d10b      	bne.n	8009826 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	889b      	ldrh	r3, [r3, #4]
 8009812:	0a1b      	lsrs	r3, r3, #8
 8009814:	b29b      	uxth	r3, r3
 8009816:	b2da      	uxtb	r2, r3
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f000 f93c 	bl	8009a9c <USBD_CtlSendStatus>
}
 8009824:	e003      	b.n	800982e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009826:	6839      	ldr	r1, [r7, #0]
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f000 f860 	bl	80098ee <USBD_CtlError>
}
 800982e:	bf00      	nop
 8009830:	3708      	adds	r7, #8
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}

08009836 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009836:	b580      	push	{r7, lr}
 8009838:	b082      	sub	sp, #8
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]
 800983e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009846:	b2db      	uxtb	r3, r3
 8009848:	3b01      	subs	r3, #1
 800984a:	2b02      	cmp	r3, #2
 800984c:	d80b      	bhi.n	8009866 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	885b      	ldrh	r3, [r3, #2]
 8009852:	2b01      	cmp	r3, #1
 8009854:	d10c      	bne.n	8009870 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2200      	movs	r2, #0
 800985a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 f91c 	bl	8009a9c <USBD_CtlSendStatus>
      }
      break;
 8009864:	e004      	b.n	8009870 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009866:	6839      	ldr	r1, [r7, #0]
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f000 f840 	bl	80098ee <USBD_CtlError>
      break;
 800986e:	e000      	b.n	8009872 <USBD_ClrFeature+0x3c>
      break;
 8009870:	bf00      	nop
  }
}
 8009872:	bf00      	nop
 8009874:	3708      	adds	r7, #8
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}

0800987a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800987a:	b580      	push	{r7, lr}
 800987c:	b084      	sub	sp, #16
 800987e:	af00      	add	r7, sp, #0
 8009880:	6078      	str	r0, [r7, #4]
 8009882:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	781a      	ldrb	r2, [r3, #0]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	3301      	adds	r3, #1
 8009894:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	781a      	ldrb	r2, [r3, #0]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	3301      	adds	r3, #1
 80098a2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80098a4:	68f8      	ldr	r0, [r7, #12]
 80098a6:	f7ff fa17 	bl	8008cd8 <SWAPBYTE>
 80098aa:	4603      	mov	r3, r0
 80098ac:	461a      	mov	r2, r3
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	3301      	adds	r3, #1
 80098b6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	3301      	adds	r3, #1
 80098bc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80098be:	68f8      	ldr	r0, [r7, #12]
 80098c0:	f7ff fa0a 	bl	8008cd8 <SWAPBYTE>
 80098c4:	4603      	mov	r3, r0
 80098c6:	461a      	mov	r2, r3
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	3301      	adds	r3, #1
 80098d0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	3301      	adds	r3, #1
 80098d6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80098d8:	68f8      	ldr	r0, [r7, #12]
 80098da:	f7ff f9fd 	bl	8008cd8 <SWAPBYTE>
 80098de:	4603      	mov	r3, r0
 80098e0:	461a      	mov	r2, r3
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	80da      	strh	r2, [r3, #6]
}
 80098e6:	bf00      	nop
 80098e8:	3710      	adds	r7, #16
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}

080098ee <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098ee:	b580      	push	{r7, lr}
 80098f0:	b082      	sub	sp, #8
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	6078      	str	r0, [r7, #4]
 80098f6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80098f8:	2180      	movs	r1, #128	; 0x80
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f000 fcee 	bl	800a2dc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009900:	2100      	movs	r1, #0
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f000 fcea 	bl	800a2dc <USBD_LL_StallEP>
}
 8009908:	bf00      	nop
 800990a:	3708      	adds	r7, #8
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}

08009910 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b086      	sub	sp, #24
 8009914:	af00      	add	r7, sp, #0
 8009916:	60f8      	str	r0, [r7, #12]
 8009918:	60b9      	str	r1, [r7, #8]
 800991a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800991c:	2300      	movs	r3, #0
 800991e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d042      	beq.n	80099ac <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800992a:	6938      	ldr	r0, [r7, #16]
 800992c:	f000 f842 	bl	80099b4 <USBD_GetLen>
 8009930:	4603      	mov	r3, r0
 8009932:	3301      	adds	r3, #1
 8009934:	005b      	lsls	r3, r3, #1
 8009936:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800993a:	d808      	bhi.n	800994e <USBD_GetString+0x3e>
 800993c:	6938      	ldr	r0, [r7, #16]
 800993e:	f000 f839 	bl	80099b4 <USBD_GetLen>
 8009942:	4603      	mov	r3, r0
 8009944:	3301      	adds	r3, #1
 8009946:	b29b      	uxth	r3, r3
 8009948:	005b      	lsls	r3, r3, #1
 800994a:	b29a      	uxth	r2, r3
 800994c:	e001      	b.n	8009952 <USBD_GetString+0x42>
 800994e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009956:	7dfb      	ldrb	r3, [r7, #23]
 8009958:	68ba      	ldr	r2, [r7, #8]
 800995a:	4413      	add	r3, r2
 800995c:	687a      	ldr	r2, [r7, #4]
 800995e:	7812      	ldrb	r2, [r2, #0]
 8009960:	701a      	strb	r2, [r3, #0]
  idx++;
 8009962:	7dfb      	ldrb	r3, [r7, #23]
 8009964:	3301      	adds	r3, #1
 8009966:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009968:	7dfb      	ldrb	r3, [r7, #23]
 800996a:	68ba      	ldr	r2, [r7, #8]
 800996c:	4413      	add	r3, r2
 800996e:	2203      	movs	r2, #3
 8009970:	701a      	strb	r2, [r3, #0]
  idx++;
 8009972:	7dfb      	ldrb	r3, [r7, #23]
 8009974:	3301      	adds	r3, #1
 8009976:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009978:	e013      	b.n	80099a2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800997a:	7dfb      	ldrb	r3, [r7, #23]
 800997c:	68ba      	ldr	r2, [r7, #8]
 800997e:	4413      	add	r3, r2
 8009980:	693a      	ldr	r2, [r7, #16]
 8009982:	7812      	ldrb	r2, [r2, #0]
 8009984:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	3301      	adds	r3, #1
 800998a:	613b      	str	r3, [r7, #16]
    idx++;
 800998c:	7dfb      	ldrb	r3, [r7, #23]
 800998e:	3301      	adds	r3, #1
 8009990:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009992:	7dfb      	ldrb	r3, [r7, #23]
 8009994:	68ba      	ldr	r2, [r7, #8]
 8009996:	4413      	add	r3, r2
 8009998:	2200      	movs	r2, #0
 800999a:	701a      	strb	r2, [r3, #0]
    idx++;
 800999c:	7dfb      	ldrb	r3, [r7, #23]
 800999e:	3301      	adds	r3, #1
 80099a0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	781b      	ldrb	r3, [r3, #0]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d1e7      	bne.n	800997a <USBD_GetString+0x6a>
 80099aa:	e000      	b.n	80099ae <USBD_GetString+0x9e>
    return;
 80099ac:	bf00      	nop
  }
}
 80099ae:	3718      	adds	r7, #24
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}

080099b4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b085      	sub	sp, #20
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80099bc:	2300      	movs	r3, #0
 80099be:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80099c4:	e005      	b.n	80099d2 <USBD_GetLen+0x1e>
  {
    len++;
 80099c6:	7bfb      	ldrb	r3, [r7, #15]
 80099c8:	3301      	adds	r3, #1
 80099ca:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	3301      	adds	r3, #1
 80099d0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	781b      	ldrb	r3, [r3, #0]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d1f5      	bne.n	80099c6 <USBD_GetLen+0x12>
  }

  return len;
 80099da:	7bfb      	ldrb	r3, [r7, #15]
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3714      	adds	r7, #20
 80099e0:	46bd      	mov	sp, r7
 80099e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e6:	4770      	bx	lr

080099e8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b084      	sub	sp, #16
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	60f8      	str	r0, [r7, #12]
 80099f0:	60b9      	str	r1, [r7, #8]
 80099f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2202      	movs	r2, #2
 80099f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	687a      	ldr	r2, [r7, #4]
 8009a00:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	68ba      	ldr	r2, [r7, #8]
 8009a0c:	2100      	movs	r1, #0
 8009a0e:	68f8      	ldr	r0, [r7, #12]
 8009a10:	f000 fced 	bl	800a3ee <USBD_LL_Transmit>

  return USBD_OK;
 8009a14:	2300      	movs	r3, #0
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3710      	adds	r7, #16
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}

08009a1e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009a1e:	b580      	push	{r7, lr}
 8009a20:	b084      	sub	sp, #16
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	60f8      	str	r0, [r7, #12]
 8009a26:	60b9      	str	r1, [r7, #8]
 8009a28:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	68ba      	ldr	r2, [r7, #8]
 8009a2e:	2100      	movs	r1, #0
 8009a30:	68f8      	ldr	r0, [r7, #12]
 8009a32:	f000 fcdc 	bl	800a3ee <USBD_LL_Transmit>

  return USBD_OK;
 8009a36:	2300      	movs	r3, #0
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3710      	adds	r7, #16
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	60f8      	str	r0, [r7, #12]
 8009a48:	60b9      	str	r1, [r7, #8]
 8009a4a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	2203      	movs	r2, #3
 8009a50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	687a      	ldr	r2, [r7, #4]
 8009a60:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	68ba      	ldr	r2, [r7, #8]
 8009a68:	2100      	movs	r1, #0
 8009a6a:	68f8      	ldr	r0, [r7, #12]
 8009a6c:	f000 fce0 	bl	800a430 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a70:	2300      	movs	r3, #0
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3710      	adds	r7, #16
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}

08009a7a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009a7a:	b580      	push	{r7, lr}
 8009a7c:	b084      	sub	sp, #16
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	60f8      	str	r0, [r7, #12]
 8009a82:	60b9      	str	r1, [r7, #8]
 8009a84:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	68ba      	ldr	r2, [r7, #8]
 8009a8a:	2100      	movs	r1, #0
 8009a8c:	68f8      	ldr	r0, [r7, #12]
 8009a8e:	f000 fccf 	bl	800a430 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a92:	2300      	movs	r3, #0
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3710      	adds	r7, #16
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b082      	sub	sp, #8
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2204      	movs	r2, #4
 8009aa8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009aac:	2300      	movs	r3, #0
 8009aae:	2200      	movs	r2, #0
 8009ab0:	2100      	movs	r1, #0
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f000 fc9b 	bl	800a3ee <USBD_LL_Transmit>

  return USBD_OK;
 8009ab8:	2300      	movs	r3, #0
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3708      	adds	r7, #8
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}

08009ac2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009ac2:	b580      	push	{r7, lr}
 8009ac4:	b082      	sub	sp, #8
 8009ac6:	af00      	add	r7, sp, #0
 8009ac8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2205      	movs	r2, #5
 8009ace:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	2100      	movs	r1, #0
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 fca9 	bl	800a430 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ade:	2300      	movs	r3, #0
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3708      	adds	r7, #8
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009aec:	2200      	movs	r2, #0
 8009aee:	4912      	ldr	r1, [pc, #72]	; (8009b38 <MX_USB_DEVICE_Init+0x50>)
 8009af0:	4812      	ldr	r0, [pc, #72]	; (8009b3c <MX_USB_DEVICE_Init+0x54>)
 8009af2:	f7fe fccb 	bl	800848c <USBD_Init>
 8009af6:	4603      	mov	r3, r0
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d001      	beq.n	8009b00 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009afc:	f7f7 f8b4 	bl	8000c68 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009b00:	490f      	ldr	r1, [pc, #60]	; (8009b40 <MX_USB_DEVICE_Init+0x58>)
 8009b02:	480e      	ldr	r0, [pc, #56]	; (8009b3c <MX_USB_DEVICE_Init+0x54>)
 8009b04:	f7fe fcf2 	bl	80084ec <USBD_RegisterClass>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d001      	beq.n	8009b12 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009b0e:	f7f7 f8ab 	bl	8000c68 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009b12:	490c      	ldr	r1, [pc, #48]	; (8009b44 <MX_USB_DEVICE_Init+0x5c>)
 8009b14:	4809      	ldr	r0, [pc, #36]	; (8009b3c <MX_USB_DEVICE_Init+0x54>)
 8009b16:	f7fe fc29 	bl	800836c <USBD_CDC_RegisterInterface>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d001      	beq.n	8009b24 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009b20:	f7f7 f8a2 	bl	8000c68 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009b24:	4805      	ldr	r0, [pc, #20]	; (8009b3c <MX_USB_DEVICE_Init+0x54>)
 8009b26:	f7fe fd17 	bl	8008558 <USBD_Start>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d001      	beq.n	8009b34 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009b30:	f7f7 f89a 	bl	8000c68 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009b34:	bf00      	nop
 8009b36:	bd80      	pop	{r7, pc}
 8009b38:	200000ac 	.word	0x200000ac
 8009b3c:	2000040c 	.word	0x2000040c
 8009b40:	20000018 	.word	0x20000018
 8009b44:	20000098 	.word	0x20000098

08009b48 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	4905      	ldr	r1, [pc, #20]	; (8009b64 <CDC_Init_FS+0x1c>)
 8009b50:	4805      	ldr	r0, [pc, #20]	; (8009b68 <CDC_Init_FS+0x20>)
 8009b52:	f7fe fc25 	bl	80083a0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009b56:	4905      	ldr	r1, [pc, #20]	; (8009b6c <CDC_Init_FS+0x24>)
 8009b58:	4803      	ldr	r0, [pc, #12]	; (8009b68 <CDC_Init_FS+0x20>)
 8009b5a:	f7fe fc43 	bl	80083e4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009b5e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	bd80      	pop	{r7, pc}
 8009b64:	20000ee8 	.word	0x20000ee8
 8009b68:	2000040c 	.word	0x2000040c
 8009b6c:	200006e8 	.word	0x200006e8

08009b70 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009b70:	b480      	push	{r7}
 8009b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009b74:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr

08009b80 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b083      	sub	sp, #12
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	4603      	mov	r3, r0
 8009b88:	6039      	str	r1, [r7, #0]
 8009b8a:	71fb      	strb	r3, [r7, #7]
 8009b8c:	4613      	mov	r3, r2
 8009b8e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009b90:	79fb      	ldrb	r3, [r7, #7]
 8009b92:	2b23      	cmp	r3, #35	; 0x23
 8009b94:	d84a      	bhi.n	8009c2c <CDC_Control_FS+0xac>
 8009b96:	a201      	add	r2, pc, #4	; (adr r2, 8009b9c <CDC_Control_FS+0x1c>)
 8009b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b9c:	08009c2d 	.word	0x08009c2d
 8009ba0:	08009c2d 	.word	0x08009c2d
 8009ba4:	08009c2d 	.word	0x08009c2d
 8009ba8:	08009c2d 	.word	0x08009c2d
 8009bac:	08009c2d 	.word	0x08009c2d
 8009bb0:	08009c2d 	.word	0x08009c2d
 8009bb4:	08009c2d 	.word	0x08009c2d
 8009bb8:	08009c2d 	.word	0x08009c2d
 8009bbc:	08009c2d 	.word	0x08009c2d
 8009bc0:	08009c2d 	.word	0x08009c2d
 8009bc4:	08009c2d 	.word	0x08009c2d
 8009bc8:	08009c2d 	.word	0x08009c2d
 8009bcc:	08009c2d 	.word	0x08009c2d
 8009bd0:	08009c2d 	.word	0x08009c2d
 8009bd4:	08009c2d 	.word	0x08009c2d
 8009bd8:	08009c2d 	.word	0x08009c2d
 8009bdc:	08009c2d 	.word	0x08009c2d
 8009be0:	08009c2d 	.word	0x08009c2d
 8009be4:	08009c2d 	.word	0x08009c2d
 8009be8:	08009c2d 	.word	0x08009c2d
 8009bec:	08009c2d 	.word	0x08009c2d
 8009bf0:	08009c2d 	.word	0x08009c2d
 8009bf4:	08009c2d 	.word	0x08009c2d
 8009bf8:	08009c2d 	.word	0x08009c2d
 8009bfc:	08009c2d 	.word	0x08009c2d
 8009c00:	08009c2d 	.word	0x08009c2d
 8009c04:	08009c2d 	.word	0x08009c2d
 8009c08:	08009c2d 	.word	0x08009c2d
 8009c0c:	08009c2d 	.word	0x08009c2d
 8009c10:	08009c2d 	.word	0x08009c2d
 8009c14:	08009c2d 	.word	0x08009c2d
 8009c18:	08009c2d 	.word	0x08009c2d
 8009c1c:	08009c2d 	.word	0x08009c2d
 8009c20:	08009c2d 	.word	0x08009c2d
 8009c24:	08009c2d 	.word	0x08009c2d
 8009c28:	08009c2d 	.word	0x08009c2d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009c2c:	bf00      	nop
  }

  return (USBD_OK);
 8009c2e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	370c      	adds	r7, #12
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr

08009c3c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b082      	sub	sp, #8
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009c46:	6879      	ldr	r1, [r7, #4]
 8009c48:	4805      	ldr	r0, [pc, #20]	; (8009c60 <CDC_Receive_FS+0x24>)
 8009c4a:	f7fe fbcb 	bl	80083e4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009c4e:	4804      	ldr	r0, [pc, #16]	; (8009c60 <CDC_Receive_FS+0x24>)
 8009c50:	f7fe fbe6 	bl	8008420 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009c54:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3708      	adds	r7, #8
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
 8009c5e:	bf00      	nop
 8009c60:	2000040c 	.word	0x2000040c

08009c64 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b087      	sub	sp, #28
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	60f8      	str	r0, [r7, #12]
 8009c6c:	60b9      	str	r1, [r7, #8]
 8009c6e:	4613      	mov	r3, r2
 8009c70:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009c72:	2300      	movs	r3, #0
 8009c74:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009c76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	371c      	adds	r7, #28
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c84:	4770      	bx	lr
	...

08009c88 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b083      	sub	sp, #12
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	4603      	mov	r3, r0
 8009c90:	6039      	str	r1, [r7, #0]
 8009c92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	2212      	movs	r2, #18
 8009c98:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009c9a:	4b03      	ldr	r3, [pc, #12]	; (8009ca8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	370c      	adds	r7, #12
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr
 8009ca8:	200000cc 	.word	0x200000cc

08009cac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b083      	sub	sp, #12
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	6039      	str	r1, [r7, #0]
 8009cb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	2204      	movs	r2, #4
 8009cbc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009cbe:	4b03      	ldr	r3, [pc, #12]	; (8009ccc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	370c      	adds	r7, #12
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr
 8009ccc:	200000ec 	.word	0x200000ec

08009cd0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b082      	sub	sp, #8
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	6039      	str	r1, [r7, #0]
 8009cda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009cdc:	79fb      	ldrb	r3, [r7, #7]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d105      	bne.n	8009cee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009ce2:	683a      	ldr	r2, [r7, #0]
 8009ce4:	4907      	ldr	r1, [pc, #28]	; (8009d04 <USBD_FS_ProductStrDescriptor+0x34>)
 8009ce6:	4808      	ldr	r0, [pc, #32]	; (8009d08 <USBD_FS_ProductStrDescriptor+0x38>)
 8009ce8:	f7ff fe12 	bl	8009910 <USBD_GetString>
 8009cec:	e004      	b.n	8009cf8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009cee:	683a      	ldr	r2, [r7, #0]
 8009cf0:	4904      	ldr	r1, [pc, #16]	; (8009d04 <USBD_FS_ProductStrDescriptor+0x34>)
 8009cf2:	4805      	ldr	r0, [pc, #20]	; (8009d08 <USBD_FS_ProductStrDescriptor+0x38>)
 8009cf4:	f7ff fe0c 	bl	8009910 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009cf8:	4b02      	ldr	r3, [pc, #8]	; (8009d04 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	3708      	adds	r7, #8
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
 8009d02:	bf00      	nop
 8009d04:	200016e8 	.word	0x200016e8
 8009d08:	0800aef0 	.word	0x0800aef0

08009d0c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b082      	sub	sp, #8
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	4603      	mov	r3, r0
 8009d14:	6039      	str	r1, [r7, #0]
 8009d16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009d18:	683a      	ldr	r2, [r7, #0]
 8009d1a:	4904      	ldr	r1, [pc, #16]	; (8009d2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009d1c:	4804      	ldr	r0, [pc, #16]	; (8009d30 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009d1e:	f7ff fdf7 	bl	8009910 <USBD_GetString>
  return USBD_StrDesc;
 8009d22:	4b02      	ldr	r3, [pc, #8]	; (8009d2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3708      	adds	r7, #8
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}
 8009d2c:	200016e8 	.word	0x200016e8
 8009d30:	0800af08 	.word	0x0800af08

08009d34 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b082      	sub	sp, #8
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	6039      	str	r1, [r7, #0]
 8009d3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	221a      	movs	r2, #26
 8009d44:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009d46:	f000 f855 	bl	8009df4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009d4a:	4b02      	ldr	r3, [pc, #8]	; (8009d54 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3708      	adds	r7, #8
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}
 8009d54:	200000f0 	.word	0x200000f0

08009d58 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b082      	sub	sp, #8
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	4603      	mov	r3, r0
 8009d60:	6039      	str	r1, [r7, #0]
 8009d62:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009d64:	79fb      	ldrb	r3, [r7, #7]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d105      	bne.n	8009d76 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009d6a:	683a      	ldr	r2, [r7, #0]
 8009d6c:	4907      	ldr	r1, [pc, #28]	; (8009d8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009d6e:	4808      	ldr	r0, [pc, #32]	; (8009d90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009d70:	f7ff fdce 	bl	8009910 <USBD_GetString>
 8009d74:	e004      	b.n	8009d80 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009d76:	683a      	ldr	r2, [r7, #0]
 8009d78:	4904      	ldr	r1, [pc, #16]	; (8009d8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009d7a:	4805      	ldr	r0, [pc, #20]	; (8009d90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009d7c:	f7ff fdc8 	bl	8009910 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d80:	4b02      	ldr	r3, [pc, #8]	; (8009d8c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3708      	adds	r7, #8
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
 8009d8a:	bf00      	nop
 8009d8c:	200016e8 	.word	0x200016e8
 8009d90:	0800af1c 	.word	0x0800af1c

08009d94 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b082      	sub	sp, #8
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	6039      	str	r1, [r7, #0]
 8009d9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009da0:	79fb      	ldrb	r3, [r7, #7]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d105      	bne.n	8009db2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009da6:	683a      	ldr	r2, [r7, #0]
 8009da8:	4907      	ldr	r1, [pc, #28]	; (8009dc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009daa:	4808      	ldr	r0, [pc, #32]	; (8009dcc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009dac:	f7ff fdb0 	bl	8009910 <USBD_GetString>
 8009db0:	e004      	b.n	8009dbc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009db2:	683a      	ldr	r2, [r7, #0]
 8009db4:	4904      	ldr	r1, [pc, #16]	; (8009dc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009db6:	4805      	ldr	r0, [pc, #20]	; (8009dcc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009db8:	f7ff fdaa 	bl	8009910 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009dbc:	4b02      	ldr	r3, [pc, #8]	; (8009dc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3708      	adds	r7, #8
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}
 8009dc6:	bf00      	nop
 8009dc8:	200016e8 	.word	0x200016e8
 8009dcc:	0800af28 	.word	0x0800af28

08009dd0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b083      	sub	sp, #12
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	6039      	str	r1, [r7, #0]
 8009dda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	220c      	movs	r2, #12
 8009de0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8009de2:	4b03      	ldr	r3, [pc, #12]	; (8009df0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	370c      	adds	r7, #12
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr
 8009df0:	200000e0 	.word	0x200000e0

08009df4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009dfa:	4b0f      	ldr	r3, [pc, #60]	; (8009e38 <Get_SerialNum+0x44>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009e00:	4b0e      	ldr	r3, [pc, #56]	; (8009e3c <Get_SerialNum+0x48>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009e06:	4b0e      	ldr	r3, [pc, #56]	; (8009e40 <Get_SerialNum+0x4c>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009e0c:	68fa      	ldr	r2, [r7, #12]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	4413      	add	r3, r2
 8009e12:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d009      	beq.n	8009e2e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009e1a:	2208      	movs	r2, #8
 8009e1c:	4909      	ldr	r1, [pc, #36]	; (8009e44 <Get_SerialNum+0x50>)
 8009e1e:	68f8      	ldr	r0, [r7, #12]
 8009e20:	f000 f814 	bl	8009e4c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009e24:	2204      	movs	r2, #4
 8009e26:	4908      	ldr	r1, [pc, #32]	; (8009e48 <Get_SerialNum+0x54>)
 8009e28:	68b8      	ldr	r0, [r7, #8]
 8009e2a:	f000 f80f 	bl	8009e4c <IntToUnicode>
  }
}
 8009e2e:	bf00      	nop
 8009e30:	3710      	adds	r7, #16
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
 8009e36:	bf00      	nop
 8009e38:	1fff7a10 	.word	0x1fff7a10
 8009e3c:	1fff7a14 	.word	0x1fff7a14
 8009e40:	1fff7a18 	.word	0x1fff7a18
 8009e44:	200000f2 	.word	0x200000f2
 8009e48:	20000102 	.word	0x20000102

08009e4c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b087      	sub	sp, #28
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	60f8      	str	r0, [r7, #12]
 8009e54:	60b9      	str	r1, [r7, #8]
 8009e56:	4613      	mov	r3, r2
 8009e58:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009e5e:	2300      	movs	r3, #0
 8009e60:	75fb      	strb	r3, [r7, #23]
 8009e62:	e027      	b.n	8009eb4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	0f1b      	lsrs	r3, r3, #28
 8009e68:	2b09      	cmp	r3, #9
 8009e6a:	d80b      	bhi.n	8009e84 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	0f1b      	lsrs	r3, r3, #28
 8009e70:	b2da      	uxtb	r2, r3
 8009e72:	7dfb      	ldrb	r3, [r7, #23]
 8009e74:	005b      	lsls	r3, r3, #1
 8009e76:	4619      	mov	r1, r3
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	440b      	add	r3, r1
 8009e7c:	3230      	adds	r2, #48	; 0x30
 8009e7e:	b2d2      	uxtb	r2, r2
 8009e80:	701a      	strb	r2, [r3, #0]
 8009e82:	e00a      	b.n	8009e9a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	0f1b      	lsrs	r3, r3, #28
 8009e88:	b2da      	uxtb	r2, r3
 8009e8a:	7dfb      	ldrb	r3, [r7, #23]
 8009e8c:	005b      	lsls	r3, r3, #1
 8009e8e:	4619      	mov	r1, r3
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	440b      	add	r3, r1
 8009e94:	3237      	adds	r2, #55	; 0x37
 8009e96:	b2d2      	uxtb	r2, r2
 8009e98:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	011b      	lsls	r3, r3, #4
 8009e9e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009ea0:	7dfb      	ldrb	r3, [r7, #23]
 8009ea2:	005b      	lsls	r3, r3, #1
 8009ea4:	3301      	adds	r3, #1
 8009ea6:	68ba      	ldr	r2, [r7, #8]
 8009ea8:	4413      	add	r3, r2
 8009eaa:	2200      	movs	r2, #0
 8009eac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009eae:	7dfb      	ldrb	r3, [r7, #23]
 8009eb0:	3301      	adds	r3, #1
 8009eb2:	75fb      	strb	r3, [r7, #23]
 8009eb4:	7dfa      	ldrb	r2, [r7, #23]
 8009eb6:	79fb      	ldrb	r3, [r7, #7]
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	d3d3      	bcc.n	8009e64 <IntToUnicode+0x18>
  }
}
 8009ebc:	bf00      	nop
 8009ebe:	bf00      	nop
 8009ec0:	371c      	adds	r7, #28
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec8:	4770      	bx	lr
	...

08009ecc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b0a0      	sub	sp, #128	; 0x80
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ed4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8009ed8:	2200      	movs	r2, #0
 8009eda:	601a      	str	r2, [r3, #0]
 8009edc:	605a      	str	r2, [r3, #4]
 8009ede:	609a      	str	r2, [r3, #8]
 8009ee0:	60da      	str	r2, [r3, #12]
 8009ee2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009ee4:	f107 0310 	add.w	r3, r7, #16
 8009ee8:	225c      	movs	r2, #92	; 0x5c
 8009eea:	2100      	movs	r1, #0
 8009eec:	4618      	mov	r0, r3
 8009eee:	f000 fc72 	bl	800a7d6 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009efa:	d149      	bne.n	8009f90 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8009efc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f00:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8009f02:	2300      	movs	r3, #0
 8009f04:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009f06:	f107 0310 	add.w	r3, r7, #16
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f7f9 ff12 	bl	8003d34 <HAL_RCCEx_PeriphCLKConfig>
 8009f10:	4603      	mov	r3, r0
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d001      	beq.n	8009f1a <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8009f16:	f7f6 fea7 	bl	8000c68 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	60fb      	str	r3, [r7, #12]
 8009f1e:	4b1e      	ldr	r3, [pc, #120]	; (8009f98 <HAL_PCD_MspInit+0xcc>)
 8009f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f22:	4a1d      	ldr	r2, [pc, #116]	; (8009f98 <HAL_PCD_MspInit+0xcc>)
 8009f24:	f043 0301 	orr.w	r3, r3, #1
 8009f28:	6313      	str	r3, [r2, #48]	; 0x30
 8009f2a:	4b1b      	ldr	r3, [pc, #108]	; (8009f98 <HAL_PCD_MspInit+0xcc>)
 8009f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f2e:	f003 0301 	and.w	r3, r3, #1
 8009f32:	60fb      	str	r3, [r7, #12]
 8009f34:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009f36:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009f3a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f3c:	2302      	movs	r3, #2
 8009f3e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f40:	2300      	movs	r3, #0
 8009f42:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009f44:	2303      	movs	r3, #3
 8009f46:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009f48:	230a      	movs	r3, #10
 8009f4a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009f4c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8009f50:	4619      	mov	r1, r3
 8009f52:	4812      	ldr	r0, [pc, #72]	; (8009f9c <HAL_PCD_MspInit+0xd0>)
 8009f54:	f7f8 f988 	bl	8002268 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009f58:	4b0f      	ldr	r3, [pc, #60]	; (8009f98 <HAL_PCD_MspInit+0xcc>)
 8009f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f5c:	4a0e      	ldr	r2, [pc, #56]	; (8009f98 <HAL_PCD_MspInit+0xcc>)
 8009f5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f62:	6353      	str	r3, [r2, #52]	; 0x34
 8009f64:	2300      	movs	r3, #0
 8009f66:	60bb      	str	r3, [r7, #8]
 8009f68:	4b0b      	ldr	r3, [pc, #44]	; (8009f98 <HAL_PCD_MspInit+0xcc>)
 8009f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f6c:	4a0a      	ldr	r2, [pc, #40]	; (8009f98 <HAL_PCD_MspInit+0xcc>)
 8009f6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009f72:	6453      	str	r3, [r2, #68]	; 0x44
 8009f74:	4b08      	ldr	r3, [pc, #32]	; (8009f98 <HAL_PCD_MspInit+0xcc>)
 8009f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f7c:	60bb      	str	r3, [r7, #8]
 8009f7e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009f80:	2200      	movs	r2, #0
 8009f82:	2100      	movs	r1, #0
 8009f84:	2043      	movs	r0, #67	; 0x43
 8009f86:	f7f7 fdd4 	bl	8001b32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009f8a:	2043      	movs	r0, #67	; 0x43
 8009f8c:	f7f7 fded 	bl	8001b6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009f90:	bf00      	nop
 8009f92:	3780      	adds	r7, #128	; 0x80
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}
 8009f98:	40023800 	.word	0x40023800
 8009f9c:	40020000 	.word	0x40020000

08009fa0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b082      	sub	sp, #8
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	4610      	mov	r0, r2
 8009fb8:	f7fe fb1b 	bl	80085f2 <USBD_LL_SetupStage>
}
 8009fbc:	bf00      	nop
 8009fbe:	3708      	adds	r7, #8
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b082      	sub	sp, #8
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	460b      	mov	r3, r1
 8009fce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8009fd6:	78fa      	ldrb	r2, [r7, #3]
 8009fd8:	6879      	ldr	r1, [r7, #4]
 8009fda:	4613      	mov	r3, r2
 8009fdc:	00db      	lsls	r3, r3, #3
 8009fde:	4413      	add	r3, r2
 8009fe0:	009b      	lsls	r3, r3, #2
 8009fe2:	440b      	add	r3, r1
 8009fe4:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8009fe8:	681a      	ldr	r2, [r3, #0]
 8009fea:	78fb      	ldrb	r3, [r7, #3]
 8009fec:	4619      	mov	r1, r3
 8009fee:	f7fe fb55 	bl	800869c <USBD_LL_DataOutStage>
}
 8009ff2:	bf00      	nop
 8009ff4:	3708      	adds	r7, #8
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}

08009ffa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ffa:	b580      	push	{r7, lr}
 8009ffc:	b082      	sub	sp, #8
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	6078      	str	r0, [r7, #4]
 800a002:	460b      	mov	r3, r1
 800a004:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800a00c:	78fa      	ldrb	r2, [r7, #3]
 800a00e:	6879      	ldr	r1, [r7, #4]
 800a010:	4613      	mov	r3, r2
 800a012:	00db      	lsls	r3, r3, #3
 800a014:	4413      	add	r3, r2
 800a016:	009b      	lsls	r3, r3, #2
 800a018:	440b      	add	r3, r1
 800a01a:	3320      	adds	r3, #32
 800a01c:	681a      	ldr	r2, [r3, #0]
 800a01e:	78fb      	ldrb	r3, [r7, #3]
 800a020:	4619      	mov	r1, r3
 800a022:	f7fe fbee 	bl	8008802 <USBD_LL_DataInStage>
}
 800a026:	bf00      	nop
 800a028:	3708      	adds	r7, #8
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}

0800a02e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a02e:	b580      	push	{r7, lr}
 800a030:	b082      	sub	sp, #8
 800a032:	af00      	add	r7, sp, #0
 800a034:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a03c:	4618      	mov	r0, r3
 800a03e:	f7fe fd28 	bl	8008a92 <USBD_LL_SOF>
}
 800a042:	bf00      	nop
 800a044:	3708      	adds	r7, #8
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}

0800a04a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a04a:	b580      	push	{r7, lr}
 800a04c:	b084      	sub	sp, #16
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a052:	2301      	movs	r3, #1
 800a054:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	79db      	ldrb	r3, [r3, #7]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d102      	bne.n	800a064 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a05e:	2300      	movs	r3, #0
 800a060:	73fb      	strb	r3, [r7, #15]
 800a062:	e008      	b.n	800a076 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	79db      	ldrb	r3, [r3, #7]
 800a068:	2b02      	cmp	r3, #2
 800a06a:	d102      	bne.n	800a072 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a06c:	2301      	movs	r3, #1
 800a06e:	73fb      	strb	r3, [r7, #15]
 800a070:	e001      	b.n	800a076 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a072:	f7f6 fdf9 	bl	8000c68 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a07c:	7bfa      	ldrb	r2, [r7, #15]
 800a07e:	4611      	mov	r1, r2
 800a080:	4618      	mov	r0, r3
 800a082:	f7fe fcc2 	bl	8008a0a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a08c:	4618      	mov	r0, r3
 800a08e:	f7fe fc6a 	bl	8008966 <USBD_LL_Reset>
}
 800a092:	bf00      	nop
 800a094:	3710      	adds	r7, #16
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}
	...

0800a09c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b082      	sub	sp, #8
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f7fe fcbd 	bl	8008a2a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	687a      	ldr	r2, [r7, #4]
 800a0bc:	6812      	ldr	r2, [r2, #0]
 800a0be:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a0c2:	f043 0301 	orr.w	r3, r3, #1
 800a0c6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	7adb      	ldrb	r3, [r3, #11]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d005      	beq.n	800a0dc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a0d0:	4b04      	ldr	r3, [pc, #16]	; (800a0e4 <HAL_PCD_SuspendCallback+0x48>)
 800a0d2:	691b      	ldr	r3, [r3, #16]
 800a0d4:	4a03      	ldr	r2, [pc, #12]	; (800a0e4 <HAL_PCD_SuspendCallback+0x48>)
 800a0d6:	f043 0306 	orr.w	r3, r3, #6
 800a0da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a0dc:	bf00      	nop
 800a0de:	3708      	adds	r7, #8
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}
 800a0e4:	e000ed00 	.word	0xe000ed00

0800a0e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b082      	sub	sp, #8
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f7fe fcb3 	bl	8008a62 <USBD_LL_Resume>
}
 800a0fc:	bf00      	nop
 800a0fe:	3708      	adds	r7, #8
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b082      	sub	sp, #8
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	460b      	mov	r3, r1
 800a10e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a116:	78fa      	ldrb	r2, [r7, #3]
 800a118:	4611      	mov	r1, r2
 800a11a:	4618      	mov	r0, r3
 800a11c:	f7fe fd0b 	bl	8008b36 <USBD_LL_IsoOUTIncomplete>
}
 800a120:	bf00      	nop
 800a122:	3708      	adds	r7, #8
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}

0800a128 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b082      	sub	sp, #8
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
 800a130:	460b      	mov	r3, r1
 800a132:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a13a:	78fa      	ldrb	r2, [r7, #3]
 800a13c:	4611      	mov	r1, r2
 800a13e:	4618      	mov	r0, r3
 800a140:	f7fe fcc7 	bl	8008ad2 <USBD_LL_IsoINIncomplete>
}
 800a144:	bf00      	nop
 800a146:	3708      	adds	r7, #8
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}

0800a14c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b082      	sub	sp, #8
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a15a:	4618      	mov	r0, r3
 800a15c:	f7fe fd1d 	bl	8008b9a <USBD_LL_DevConnected>
}
 800a160:	bf00      	nop
 800a162:	3708      	adds	r7, #8
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}

0800a168 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b082      	sub	sp, #8
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a176:	4618      	mov	r0, r3
 800a178:	f7fe fd1a 	bl	8008bb0 <USBD_LL_DevDisconnected>
}
 800a17c:	bf00      	nop
 800a17e:	3708      	adds	r7, #8
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}

0800a184 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b082      	sub	sp, #8
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	781b      	ldrb	r3, [r3, #0]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d13c      	bne.n	800a20e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a194:	4a20      	ldr	r2, [pc, #128]	; (800a218 <USBD_LL_Init+0x94>)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	4a1e      	ldr	r2, [pc, #120]	; (800a218 <USBD_LL_Init+0x94>)
 800a1a0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a1a4:	4b1c      	ldr	r3, [pc, #112]	; (800a218 <USBD_LL_Init+0x94>)
 800a1a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a1aa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800a1ac:	4b1a      	ldr	r3, [pc, #104]	; (800a218 <USBD_LL_Init+0x94>)
 800a1ae:	2206      	movs	r2, #6
 800a1b0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a1b2:	4b19      	ldr	r3, [pc, #100]	; (800a218 <USBD_LL_Init+0x94>)
 800a1b4:	2202      	movs	r2, #2
 800a1b6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a1b8:	4b17      	ldr	r3, [pc, #92]	; (800a218 <USBD_LL_Init+0x94>)
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a1be:	4b16      	ldr	r3, [pc, #88]	; (800a218 <USBD_LL_Init+0x94>)
 800a1c0:	2202      	movs	r2, #2
 800a1c2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a1c4:	4b14      	ldr	r3, [pc, #80]	; (800a218 <USBD_LL_Init+0x94>)
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a1ca:	4b13      	ldr	r3, [pc, #76]	; (800a218 <USBD_LL_Init+0x94>)
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a1d0:	4b11      	ldr	r3, [pc, #68]	; (800a218 <USBD_LL_Init+0x94>)
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a1d6:	4b10      	ldr	r3, [pc, #64]	; (800a218 <USBD_LL_Init+0x94>)
 800a1d8:	2200      	movs	r2, #0
 800a1da:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a1dc:	4b0e      	ldr	r3, [pc, #56]	; (800a218 <USBD_LL_Init+0x94>)
 800a1de:	2200      	movs	r2, #0
 800a1e0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a1e2:	480d      	ldr	r0, [pc, #52]	; (800a218 <USBD_LL_Init+0x94>)
 800a1e4:	f7f8 f9ed 	bl	80025c2 <HAL_PCD_Init>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d001      	beq.n	800a1f2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a1ee:	f7f6 fd3b 	bl	8000c68 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a1f2:	2180      	movs	r1, #128	; 0x80
 800a1f4:	4808      	ldr	r0, [pc, #32]	; (800a218 <USBD_LL_Init+0x94>)
 800a1f6:	f7f9 fc4e 	bl	8003a96 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a1fa:	2240      	movs	r2, #64	; 0x40
 800a1fc:	2100      	movs	r1, #0
 800a1fe:	4806      	ldr	r0, [pc, #24]	; (800a218 <USBD_LL_Init+0x94>)
 800a200:	f7f9 fc02 	bl	8003a08 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a204:	2280      	movs	r2, #128	; 0x80
 800a206:	2101      	movs	r1, #1
 800a208:	4803      	ldr	r0, [pc, #12]	; (800a218 <USBD_LL_Init+0x94>)
 800a20a:	f7f9 fbfd 	bl	8003a08 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a20e:	2300      	movs	r3, #0
}
 800a210:	4618      	mov	r0, r3
 800a212:	3708      	adds	r7, #8
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}
 800a218:	200018e8 	.word	0x200018e8

0800a21c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b084      	sub	sp, #16
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a224:	2300      	movs	r3, #0
 800a226:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a228:	2300      	movs	r3, #0
 800a22a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a232:	4618      	mov	r0, r3
 800a234:	f7f8 fadb 	bl	80027ee <HAL_PCD_Start>
 800a238:	4603      	mov	r3, r0
 800a23a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a23c:	7bfb      	ldrb	r3, [r7, #15]
 800a23e:	4618      	mov	r0, r3
 800a240:	f000 f990 	bl	800a564 <USBD_Get_USB_Status>
 800a244:	4603      	mov	r3, r0
 800a246:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a248:	7bbb      	ldrb	r3, [r7, #14]
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3710      	adds	r7, #16
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}

0800a252 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a252:	b580      	push	{r7, lr}
 800a254:	b084      	sub	sp, #16
 800a256:	af00      	add	r7, sp, #0
 800a258:	6078      	str	r0, [r7, #4]
 800a25a:	4608      	mov	r0, r1
 800a25c:	4611      	mov	r1, r2
 800a25e:	461a      	mov	r2, r3
 800a260:	4603      	mov	r3, r0
 800a262:	70fb      	strb	r3, [r7, #3]
 800a264:	460b      	mov	r3, r1
 800a266:	70bb      	strb	r3, [r7, #2]
 800a268:	4613      	mov	r3, r2
 800a26a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a26c:	2300      	movs	r3, #0
 800a26e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a270:	2300      	movs	r3, #0
 800a272:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a27a:	78bb      	ldrb	r3, [r7, #2]
 800a27c:	883a      	ldrh	r2, [r7, #0]
 800a27e:	78f9      	ldrb	r1, [r7, #3]
 800a280:	f7f8 ffdc 	bl	800323c <HAL_PCD_EP_Open>
 800a284:	4603      	mov	r3, r0
 800a286:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a288:	7bfb      	ldrb	r3, [r7, #15]
 800a28a:	4618      	mov	r0, r3
 800a28c:	f000 f96a 	bl	800a564 <USBD_Get_USB_Status>
 800a290:	4603      	mov	r3, r0
 800a292:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a294:	7bbb      	ldrb	r3, [r7, #14]
}
 800a296:	4618      	mov	r0, r3
 800a298:	3710      	adds	r7, #16
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}

0800a29e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a29e:	b580      	push	{r7, lr}
 800a2a0:	b084      	sub	sp, #16
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	6078      	str	r0, [r7, #4]
 800a2a6:	460b      	mov	r3, r1
 800a2a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a2b8:	78fa      	ldrb	r2, [r7, #3]
 800a2ba:	4611      	mov	r1, r2
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f7f9 f827 	bl	8003310 <HAL_PCD_EP_Close>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2c6:	7bfb      	ldrb	r3, [r7, #15]
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f000 f94b 	bl	800a564 <USBD_Get_USB_Status>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3710      	adds	r7, #16
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	460b      	mov	r3, r1
 800a2e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a2f6:	78fa      	ldrb	r2, [r7, #3]
 800a2f8:	4611      	mov	r1, r2
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f7f9 f8df 	bl	80034be <HAL_PCD_EP_SetStall>
 800a300:	4603      	mov	r3, r0
 800a302:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a304:	7bfb      	ldrb	r3, [r7, #15]
 800a306:	4618      	mov	r0, r3
 800a308:	f000 f92c 	bl	800a564 <USBD_Get_USB_Status>
 800a30c:	4603      	mov	r3, r0
 800a30e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a310:	7bbb      	ldrb	r3, [r7, #14]
}
 800a312:	4618      	mov	r0, r3
 800a314:	3710      	adds	r7, #16
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}

0800a31a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a31a:	b580      	push	{r7, lr}
 800a31c:	b084      	sub	sp, #16
 800a31e:	af00      	add	r7, sp, #0
 800a320:	6078      	str	r0, [r7, #4]
 800a322:	460b      	mov	r3, r1
 800a324:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a326:	2300      	movs	r3, #0
 800a328:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a32a:	2300      	movs	r3, #0
 800a32c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a334:	78fa      	ldrb	r2, [r7, #3]
 800a336:	4611      	mov	r1, r2
 800a338:	4618      	mov	r0, r3
 800a33a:	f7f9 f923 	bl	8003584 <HAL_PCD_EP_ClrStall>
 800a33e:	4603      	mov	r3, r0
 800a340:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a342:	7bfb      	ldrb	r3, [r7, #15]
 800a344:	4618      	mov	r0, r3
 800a346:	f000 f90d 	bl	800a564 <USBD_Get_USB_Status>
 800a34a:	4603      	mov	r3, r0
 800a34c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a34e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a350:	4618      	mov	r0, r3
 800a352:	3710      	adds	r7, #16
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}

0800a358 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a358:	b480      	push	{r7}
 800a35a:	b085      	sub	sp, #20
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
 800a360:	460b      	mov	r3, r1
 800a362:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a36a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a36c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a370:	2b00      	cmp	r3, #0
 800a372:	da0b      	bge.n	800a38c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a374:	78fb      	ldrb	r3, [r7, #3]
 800a376:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a37a:	68f9      	ldr	r1, [r7, #12]
 800a37c:	4613      	mov	r3, r2
 800a37e:	00db      	lsls	r3, r3, #3
 800a380:	4413      	add	r3, r2
 800a382:	009b      	lsls	r3, r3, #2
 800a384:	440b      	add	r3, r1
 800a386:	3316      	adds	r3, #22
 800a388:	781b      	ldrb	r3, [r3, #0]
 800a38a:	e00b      	b.n	800a3a4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a38c:	78fb      	ldrb	r3, [r7, #3]
 800a38e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a392:	68f9      	ldr	r1, [r7, #12]
 800a394:	4613      	mov	r3, r2
 800a396:	00db      	lsls	r3, r3, #3
 800a398:	4413      	add	r3, r2
 800a39a:	009b      	lsls	r3, r3, #2
 800a39c:	440b      	add	r3, r1
 800a39e:	f203 2356 	addw	r3, r3, #598	; 0x256
 800a3a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3714      	adds	r7, #20
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr

0800a3b0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b084      	sub	sp, #16
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
 800a3b8:	460b      	mov	r3, r1
 800a3ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a3ca:	78fa      	ldrb	r2, [r7, #3]
 800a3cc:	4611      	mov	r1, r2
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f7f8 ff10 	bl	80031f4 <HAL_PCD_SetAddress>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3d8:	7bfb      	ldrb	r3, [r7, #15]
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f000 f8c2 	bl	800a564 <USBD_Get_USB_Status>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3710      	adds	r7, #16
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}

0800a3ee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a3ee:	b580      	push	{r7, lr}
 800a3f0:	b086      	sub	sp, #24
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	60f8      	str	r0, [r7, #12]
 800a3f6:	607a      	str	r2, [r7, #4]
 800a3f8:	603b      	str	r3, [r7, #0]
 800a3fa:	460b      	mov	r3, r1
 800a3fc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3fe:	2300      	movs	r3, #0
 800a400:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a402:	2300      	movs	r3, #0
 800a404:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a40c:	7af9      	ldrb	r1, [r7, #11]
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	687a      	ldr	r2, [r7, #4]
 800a412:	f7f9 f81a 	bl	800344a <HAL_PCD_EP_Transmit>
 800a416:	4603      	mov	r3, r0
 800a418:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a41a:	7dfb      	ldrb	r3, [r7, #23]
 800a41c:	4618      	mov	r0, r3
 800a41e:	f000 f8a1 	bl	800a564 <USBD_Get_USB_Status>
 800a422:	4603      	mov	r3, r0
 800a424:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a426:	7dbb      	ldrb	r3, [r7, #22]
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3718      	adds	r7, #24
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}

0800a430 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b086      	sub	sp, #24
 800a434:	af00      	add	r7, sp, #0
 800a436:	60f8      	str	r0, [r7, #12]
 800a438:	607a      	str	r2, [r7, #4]
 800a43a:	603b      	str	r3, [r7, #0]
 800a43c:	460b      	mov	r3, r1
 800a43e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a440:	2300      	movs	r3, #0
 800a442:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a444:	2300      	movs	r3, #0
 800a446:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a44e:	7af9      	ldrb	r1, [r7, #11]
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	687a      	ldr	r2, [r7, #4]
 800a454:	f7f8 ffa6 	bl	80033a4 <HAL_PCD_EP_Receive>
 800a458:	4603      	mov	r3, r0
 800a45a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a45c:	7dfb      	ldrb	r3, [r7, #23]
 800a45e:	4618      	mov	r0, r3
 800a460:	f000 f880 	bl	800a564 <USBD_Get_USB_Status>
 800a464:	4603      	mov	r3, r0
 800a466:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a468:	7dbb      	ldrb	r3, [r7, #22]
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3718      	adds	r7, #24
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}

0800a472 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a472:	b580      	push	{r7, lr}
 800a474:	b082      	sub	sp, #8
 800a476:	af00      	add	r7, sp, #0
 800a478:	6078      	str	r0, [r7, #4]
 800a47a:	460b      	mov	r3, r1
 800a47c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a484:	78fa      	ldrb	r2, [r7, #3]
 800a486:	4611      	mov	r1, r2
 800a488:	4618      	mov	r0, r3
 800a48a:	f7f8 ffc6 	bl	800341a <HAL_PCD_EP_GetRxCount>
 800a48e:	4603      	mov	r3, r0
}
 800a490:	4618      	mov	r0, r3
 800a492:	3708      	adds	r7, #8
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}

0800a498 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b082      	sub	sp, #8
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
 800a4a0:	460b      	mov	r3, r1
 800a4a2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800a4a4:	78fb      	ldrb	r3, [r7, #3]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d002      	beq.n	800a4b0 <HAL_PCDEx_LPM_Callback+0x18>
 800a4aa:	2b01      	cmp	r3, #1
 800a4ac:	d01f      	beq.n	800a4ee <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800a4ae:	e03b      	b.n	800a528 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	7adb      	ldrb	r3, [r3, #11]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d007      	beq.n	800a4c8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800a4b8:	f7f6 f85e 	bl	8000578 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a4bc:	4b1c      	ldr	r3, [pc, #112]	; (800a530 <HAL_PCDEx_LPM_Callback+0x98>)
 800a4be:	691b      	ldr	r3, [r3, #16]
 800a4c0:	4a1b      	ldr	r2, [pc, #108]	; (800a530 <HAL_PCDEx_LPM_Callback+0x98>)
 800a4c2:	f023 0306 	bic.w	r3, r3, #6
 800a4c6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	687a      	ldr	r2, [r7, #4]
 800a4d4:	6812      	ldr	r2, [r2, #0]
 800a4d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a4da:	f023 0301 	bic.w	r3, r3, #1
 800a4de:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f7fe fabb 	bl	8008a62 <USBD_LL_Resume>
    break;
 800a4ec:	e01c      	b.n	800a528 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	687a      	ldr	r2, [r7, #4]
 800a4fa:	6812      	ldr	r2, [r2, #0]
 800a4fc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a500:	f043 0301 	orr.w	r3, r3, #1
 800a504:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a50c:	4618      	mov	r0, r3
 800a50e:	f7fe fa8c 	bl	8008a2a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	7adb      	ldrb	r3, [r3, #11]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d005      	beq.n	800a526 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a51a:	4b05      	ldr	r3, [pc, #20]	; (800a530 <HAL_PCDEx_LPM_Callback+0x98>)
 800a51c:	691b      	ldr	r3, [r3, #16]
 800a51e:	4a04      	ldr	r2, [pc, #16]	; (800a530 <HAL_PCDEx_LPM_Callback+0x98>)
 800a520:	f043 0306 	orr.w	r3, r3, #6
 800a524:	6113      	str	r3, [r2, #16]
    break;
 800a526:	bf00      	nop
}
 800a528:	bf00      	nop
 800a52a:	3708      	adds	r7, #8
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}
 800a530:	e000ed00 	.word	0xe000ed00

0800a534 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a534:	b480      	push	{r7}
 800a536:	b083      	sub	sp, #12
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a53c:	4b03      	ldr	r3, [pc, #12]	; (800a54c <USBD_static_malloc+0x18>)
}
 800a53e:	4618      	mov	r0, r3
 800a540:	370c      	adds	r7, #12
 800a542:	46bd      	mov	sp, r7
 800a544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a548:	4770      	bx	lr
 800a54a:	bf00      	nop
 800a54c:	20001dcc 	.word	0x20001dcc

0800a550 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a550:	b480      	push	{r7}
 800a552:	b083      	sub	sp, #12
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]

}
 800a558:	bf00      	nop
 800a55a:	370c      	adds	r7, #12
 800a55c:	46bd      	mov	sp, r7
 800a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a562:	4770      	bx	lr

0800a564 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a564:	b480      	push	{r7}
 800a566:	b085      	sub	sp, #20
 800a568:	af00      	add	r7, sp, #0
 800a56a:	4603      	mov	r3, r0
 800a56c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a56e:	2300      	movs	r3, #0
 800a570:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a572:	79fb      	ldrb	r3, [r7, #7]
 800a574:	2b03      	cmp	r3, #3
 800a576:	d817      	bhi.n	800a5a8 <USBD_Get_USB_Status+0x44>
 800a578:	a201      	add	r2, pc, #4	; (adr r2, 800a580 <USBD_Get_USB_Status+0x1c>)
 800a57a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a57e:	bf00      	nop
 800a580:	0800a591 	.word	0x0800a591
 800a584:	0800a597 	.word	0x0800a597
 800a588:	0800a59d 	.word	0x0800a59d
 800a58c:	0800a5a3 	.word	0x0800a5a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a590:	2300      	movs	r3, #0
 800a592:	73fb      	strb	r3, [r7, #15]
    break;
 800a594:	e00b      	b.n	800a5ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a596:	2303      	movs	r3, #3
 800a598:	73fb      	strb	r3, [r7, #15]
    break;
 800a59a:	e008      	b.n	800a5ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a59c:	2301      	movs	r3, #1
 800a59e:	73fb      	strb	r3, [r7, #15]
    break;
 800a5a0:	e005      	b.n	800a5ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a5a2:	2303      	movs	r3, #3
 800a5a4:	73fb      	strb	r3, [r7, #15]
    break;
 800a5a6:	e002      	b.n	800a5ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a5a8:	2303      	movs	r3, #3
 800a5aa:	73fb      	strb	r3, [r7, #15]
    break;
 800a5ac:	bf00      	nop
  }
  return usb_status;
 800a5ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3714      	adds	r7, #20
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ba:	4770      	bx	lr

0800a5bc <std>:
 800a5bc:	2300      	movs	r3, #0
 800a5be:	b510      	push	{r4, lr}
 800a5c0:	4604      	mov	r4, r0
 800a5c2:	e9c0 3300 	strd	r3, r3, [r0]
 800a5c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a5ca:	6083      	str	r3, [r0, #8]
 800a5cc:	8181      	strh	r1, [r0, #12]
 800a5ce:	6643      	str	r3, [r0, #100]	; 0x64
 800a5d0:	81c2      	strh	r2, [r0, #14]
 800a5d2:	6183      	str	r3, [r0, #24]
 800a5d4:	4619      	mov	r1, r3
 800a5d6:	2208      	movs	r2, #8
 800a5d8:	305c      	adds	r0, #92	; 0x5c
 800a5da:	f000 f8fc 	bl	800a7d6 <memset>
 800a5de:	4b0d      	ldr	r3, [pc, #52]	; (800a614 <std+0x58>)
 800a5e0:	6263      	str	r3, [r4, #36]	; 0x24
 800a5e2:	4b0d      	ldr	r3, [pc, #52]	; (800a618 <std+0x5c>)
 800a5e4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a5e6:	4b0d      	ldr	r3, [pc, #52]	; (800a61c <std+0x60>)
 800a5e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a5ea:	4b0d      	ldr	r3, [pc, #52]	; (800a620 <std+0x64>)
 800a5ec:	6323      	str	r3, [r4, #48]	; 0x30
 800a5ee:	4b0d      	ldr	r3, [pc, #52]	; (800a624 <std+0x68>)
 800a5f0:	6224      	str	r4, [r4, #32]
 800a5f2:	429c      	cmp	r4, r3
 800a5f4:	d006      	beq.n	800a604 <std+0x48>
 800a5f6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a5fa:	4294      	cmp	r4, r2
 800a5fc:	d002      	beq.n	800a604 <std+0x48>
 800a5fe:	33d0      	adds	r3, #208	; 0xd0
 800a600:	429c      	cmp	r4, r3
 800a602:	d105      	bne.n	800a610 <std+0x54>
 800a604:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a60c:	f000 b95c 	b.w	800a8c8 <__retarget_lock_init_recursive>
 800a610:	bd10      	pop	{r4, pc}
 800a612:	bf00      	nop
 800a614:	0800a751 	.word	0x0800a751
 800a618:	0800a773 	.word	0x0800a773
 800a61c:	0800a7ab 	.word	0x0800a7ab
 800a620:	0800a7cf 	.word	0x0800a7cf
 800a624:	20001fec 	.word	0x20001fec

0800a628 <stdio_exit_handler>:
 800a628:	4a02      	ldr	r2, [pc, #8]	; (800a634 <stdio_exit_handler+0xc>)
 800a62a:	4903      	ldr	r1, [pc, #12]	; (800a638 <stdio_exit_handler+0x10>)
 800a62c:	4803      	ldr	r0, [pc, #12]	; (800a63c <stdio_exit_handler+0x14>)
 800a62e:	f000 b869 	b.w	800a704 <_fwalk_sglue>
 800a632:	bf00      	nop
 800a634:	2000010c 	.word	0x2000010c
 800a638:	0800abcd 	.word	0x0800abcd
 800a63c:	20000118 	.word	0x20000118

0800a640 <cleanup_stdio>:
 800a640:	6841      	ldr	r1, [r0, #4]
 800a642:	4b0c      	ldr	r3, [pc, #48]	; (800a674 <cleanup_stdio+0x34>)
 800a644:	4299      	cmp	r1, r3
 800a646:	b510      	push	{r4, lr}
 800a648:	4604      	mov	r4, r0
 800a64a:	d001      	beq.n	800a650 <cleanup_stdio+0x10>
 800a64c:	f000 fabe 	bl	800abcc <_fflush_r>
 800a650:	68a1      	ldr	r1, [r4, #8]
 800a652:	4b09      	ldr	r3, [pc, #36]	; (800a678 <cleanup_stdio+0x38>)
 800a654:	4299      	cmp	r1, r3
 800a656:	d002      	beq.n	800a65e <cleanup_stdio+0x1e>
 800a658:	4620      	mov	r0, r4
 800a65a:	f000 fab7 	bl	800abcc <_fflush_r>
 800a65e:	68e1      	ldr	r1, [r4, #12]
 800a660:	4b06      	ldr	r3, [pc, #24]	; (800a67c <cleanup_stdio+0x3c>)
 800a662:	4299      	cmp	r1, r3
 800a664:	d004      	beq.n	800a670 <cleanup_stdio+0x30>
 800a666:	4620      	mov	r0, r4
 800a668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a66c:	f000 baae 	b.w	800abcc <_fflush_r>
 800a670:	bd10      	pop	{r4, pc}
 800a672:	bf00      	nop
 800a674:	20001fec 	.word	0x20001fec
 800a678:	20002054 	.word	0x20002054
 800a67c:	200020bc 	.word	0x200020bc

0800a680 <global_stdio_init.part.0>:
 800a680:	b510      	push	{r4, lr}
 800a682:	4b0b      	ldr	r3, [pc, #44]	; (800a6b0 <global_stdio_init.part.0+0x30>)
 800a684:	4c0b      	ldr	r4, [pc, #44]	; (800a6b4 <global_stdio_init.part.0+0x34>)
 800a686:	4a0c      	ldr	r2, [pc, #48]	; (800a6b8 <global_stdio_init.part.0+0x38>)
 800a688:	601a      	str	r2, [r3, #0]
 800a68a:	4620      	mov	r0, r4
 800a68c:	2200      	movs	r2, #0
 800a68e:	2104      	movs	r1, #4
 800a690:	f7ff ff94 	bl	800a5bc <std>
 800a694:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a698:	2201      	movs	r2, #1
 800a69a:	2109      	movs	r1, #9
 800a69c:	f7ff ff8e 	bl	800a5bc <std>
 800a6a0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a6a4:	2202      	movs	r2, #2
 800a6a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6aa:	2112      	movs	r1, #18
 800a6ac:	f7ff bf86 	b.w	800a5bc <std>
 800a6b0:	20002124 	.word	0x20002124
 800a6b4:	20001fec 	.word	0x20001fec
 800a6b8:	0800a629 	.word	0x0800a629

0800a6bc <__sfp_lock_acquire>:
 800a6bc:	4801      	ldr	r0, [pc, #4]	; (800a6c4 <__sfp_lock_acquire+0x8>)
 800a6be:	f000 b904 	b.w	800a8ca <__retarget_lock_acquire_recursive>
 800a6c2:	bf00      	nop
 800a6c4:	2000212d 	.word	0x2000212d

0800a6c8 <__sfp_lock_release>:
 800a6c8:	4801      	ldr	r0, [pc, #4]	; (800a6d0 <__sfp_lock_release+0x8>)
 800a6ca:	f000 b8ff 	b.w	800a8cc <__retarget_lock_release_recursive>
 800a6ce:	bf00      	nop
 800a6d0:	2000212d 	.word	0x2000212d

0800a6d4 <__sinit>:
 800a6d4:	b510      	push	{r4, lr}
 800a6d6:	4604      	mov	r4, r0
 800a6d8:	f7ff fff0 	bl	800a6bc <__sfp_lock_acquire>
 800a6dc:	6a23      	ldr	r3, [r4, #32]
 800a6de:	b11b      	cbz	r3, 800a6e8 <__sinit+0x14>
 800a6e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6e4:	f7ff bff0 	b.w	800a6c8 <__sfp_lock_release>
 800a6e8:	4b04      	ldr	r3, [pc, #16]	; (800a6fc <__sinit+0x28>)
 800a6ea:	6223      	str	r3, [r4, #32]
 800a6ec:	4b04      	ldr	r3, [pc, #16]	; (800a700 <__sinit+0x2c>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d1f5      	bne.n	800a6e0 <__sinit+0xc>
 800a6f4:	f7ff ffc4 	bl	800a680 <global_stdio_init.part.0>
 800a6f8:	e7f2      	b.n	800a6e0 <__sinit+0xc>
 800a6fa:	bf00      	nop
 800a6fc:	0800a641 	.word	0x0800a641
 800a700:	20002124 	.word	0x20002124

0800a704 <_fwalk_sglue>:
 800a704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a708:	4607      	mov	r7, r0
 800a70a:	4688      	mov	r8, r1
 800a70c:	4614      	mov	r4, r2
 800a70e:	2600      	movs	r6, #0
 800a710:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a714:	f1b9 0901 	subs.w	r9, r9, #1
 800a718:	d505      	bpl.n	800a726 <_fwalk_sglue+0x22>
 800a71a:	6824      	ldr	r4, [r4, #0]
 800a71c:	2c00      	cmp	r4, #0
 800a71e:	d1f7      	bne.n	800a710 <_fwalk_sglue+0xc>
 800a720:	4630      	mov	r0, r6
 800a722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a726:	89ab      	ldrh	r3, [r5, #12]
 800a728:	2b01      	cmp	r3, #1
 800a72a:	d907      	bls.n	800a73c <_fwalk_sglue+0x38>
 800a72c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a730:	3301      	adds	r3, #1
 800a732:	d003      	beq.n	800a73c <_fwalk_sglue+0x38>
 800a734:	4629      	mov	r1, r5
 800a736:	4638      	mov	r0, r7
 800a738:	47c0      	blx	r8
 800a73a:	4306      	orrs	r6, r0
 800a73c:	3568      	adds	r5, #104	; 0x68
 800a73e:	e7e9      	b.n	800a714 <_fwalk_sglue+0x10>

0800a740 <putchar>:
 800a740:	4b02      	ldr	r3, [pc, #8]	; (800a74c <putchar+0xc>)
 800a742:	4601      	mov	r1, r0
 800a744:	6818      	ldr	r0, [r3, #0]
 800a746:	6882      	ldr	r2, [r0, #8]
 800a748:	f000 ba68 	b.w	800ac1c <_putc_r>
 800a74c:	20000164 	.word	0x20000164

0800a750 <__sread>:
 800a750:	b510      	push	{r4, lr}
 800a752:	460c      	mov	r4, r1
 800a754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a758:	f000 f868 	bl	800a82c <_read_r>
 800a75c:	2800      	cmp	r0, #0
 800a75e:	bfab      	itete	ge
 800a760:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a762:	89a3      	ldrhlt	r3, [r4, #12]
 800a764:	181b      	addge	r3, r3, r0
 800a766:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a76a:	bfac      	ite	ge
 800a76c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a76e:	81a3      	strhlt	r3, [r4, #12]
 800a770:	bd10      	pop	{r4, pc}

0800a772 <__swrite>:
 800a772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a776:	461f      	mov	r7, r3
 800a778:	898b      	ldrh	r3, [r1, #12]
 800a77a:	05db      	lsls	r3, r3, #23
 800a77c:	4605      	mov	r5, r0
 800a77e:	460c      	mov	r4, r1
 800a780:	4616      	mov	r6, r2
 800a782:	d505      	bpl.n	800a790 <__swrite+0x1e>
 800a784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a788:	2302      	movs	r3, #2
 800a78a:	2200      	movs	r2, #0
 800a78c:	f000 f83c 	bl	800a808 <_lseek_r>
 800a790:	89a3      	ldrh	r3, [r4, #12]
 800a792:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a796:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a79a:	81a3      	strh	r3, [r4, #12]
 800a79c:	4632      	mov	r2, r6
 800a79e:	463b      	mov	r3, r7
 800a7a0:	4628      	mov	r0, r5
 800a7a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7a6:	f000 b853 	b.w	800a850 <_write_r>

0800a7aa <__sseek>:
 800a7aa:	b510      	push	{r4, lr}
 800a7ac:	460c      	mov	r4, r1
 800a7ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7b2:	f000 f829 	bl	800a808 <_lseek_r>
 800a7b6:	1c43      	adds	r3, r0, #1
 800a7b8:	89a3      	ldrh	r3, [r4, #12]
 800a7ba:	bf15      	itete	ne
 800a7bc:	6560      	strne	r0, [r4, #84]	; 0x54
 800a7be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a7c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a7c6:	81a3      	strheq	r3, [r4, #12]
 800a7c8:	bf18      	it	ne
 800a7ca:	81a3      	strhne	r3, [r4, #12]
 800a7cc:	bd10      	pop	{r4, pc}

0800a7ce <__sclose>:
 800a7ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7d2:	f000 b809 	b.w	800a7e8 <_close_r>

0800a7d6 <memset>:
 800a7d6:	4402      	add	r2, r0
 800a7d8:	4603      	mov	r3, r0
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d100      	bne.n	800a7e0 <memset+0xa>
 800a7de:	4770      	bx	lr
 800a7e0:	f803 1b01 	strb.w	r1, [r3], #1
 800a7e4:	e7f9      	b.n	800a7da <memset+0x4>
	...

0800a7e8 <_close_r>:
 800a7e8:	b538      	push	{r3, r4, r5, lr}
 800a7ea:	4d06      	ldr	r5, [pc, #24]	; (800a804 <_close_r+0x1c>)
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	4604      	mov	r4, r0
 800a7f0:	4608      	mov	r0, r1
 800a7f2:	602b      	str	r3, [r5, #0]
 800a7f4:	f7f6 fd13 	bl	800121e <_close>
 800a7f8:	1c43      	adds	r3, r0, #1
 800a7fa:	d102      	bne.n	800a802 <_close_r+0x1a>
 800a7fc:	682b      	ldr	r3, [r5, #0]
 800a7fe:	b103      	cbz	r3, 800a802 <_close_r+0x1a>
 800a800:	6023      	str	r3, [r4, #0]
 800a802:	bd38      	pop	{r3, r4, r5, pc}
 800a804:	20002128 	.word	0x20002128

0800a808 <_lseek_r>:
 800a808:	b538      	push	{r3, r4, r5, lr}
 800a80a:	4d07      	ldr	r5, [pc, #28]	; (800a828 <_lseek_r+0x20>)
 800a80c:	4604      	mov	r4, r0
 800a80e:	4608      	mov	r0, r1
 800a810:	4611      	mov	r1, r2
 800a812:	2200      	movs	r2, #0
 800a814:	602a      	str	r2, [r5, #0]
 800a816:	461a      	mov	r2, r3
 800a818:	f7f6 fd28 	bl	800126c <_lseek>
 800a81c:	1c43      	adds	r3, r0, #1
 800a81e:	d102      	bne.n	800a826 <_lseek_r+0x1e>
 800a820:	682b      	ldr	r3, [r5, #0]
 800a822:	b103      	cbz	r3, 800a826 <_lseek_r+0x1e>
 800a824:	6023      	str	r3, [r4, #0]
 800a826:	bd38      	pop	{r3, r4, r5, pc}
 800a828:	20002128 	.word	0x20002128

0800a82c <_read_r>:
 800a82c:	b538      	push	{r3, r4, r5, lr}
 800a82e:	4d07      	ldr	r5, [pc, #28]	; (800a84c <_read_r+0x20>)
 800a830:	4604      	mov	r4, r0
 800a832:	4608      	mov	r0, r1
 800a834:	4611      	mov	r1, r2
 800a836:	2200      	movs	r2, #0
 800a838:	602a      	str	r2, [r5, #0]
 800a83a:	461a      	mov	r2, r3
 800a83c:	f7f6 fcd2 	bl	80011e4 <_read>
 800a840:	1c43      	adds	r3, r0, #1
 800a842:	d102      	bne.n	800a84a <_read_r+0x1e>
 800a844:	682b      	ldr	r3, [r5, #0]
 800a846:	b103      	cbz	r3, 800a84a <_read_r+0x1e>
 800a848:	6023      	str	r3, [r4, #0]
 800a84a:	bd38      	pop	{r3, r4, r5, pc}
 800a84c:	20002128 	.word	0x20002128

0800a850 <_write_r>:
 800a850:	b538      	push	{r3, r4, r5, lr}
 800a852:	4d07      	ldr	r5, [pc, #28]	; (800a870 <_write_r+0x20>)
 800a854:	4604      	mov	r4, r0
 800a856:	4608      	mov	r0, r1
 800a858:	4611      	mov	r1, r2
 800a85a:	2200      	movs	r2, #0
 800a85c:	602a      	str	r2, [r5, #0]
 800a85e:	461a      	mov	r2, r3
 800a860:	f7f5 fe4e 	bl	8000500 <_write>
 800a864:	1c43      	adds	r3, r0, #1
 800a866:	d102      	bne.n	800a86e <_write_r+0x1e>
 800a868:	682b      	ldr	r3, [r5, #0]
 800a86a:	b103      	cbz	r3, 800a86e <_write_r+0x1e>
 800a86c:	6023      	str	r3, [r4, #0]
 800a86e:	bd38      	pop	{r3, r4, r5, pc}
 800a870:	20002128 	.word	0x20002128

0800a874 <__errno>:
 800a874:	4b01      	ldr	r3, [pc, #4]	; (800a87c <__errno+0x8>)
 800a876:	6818      	ldr	r0, [r3, #0]
 800a878:	4770      	bx	lr
 800a87a:	bf00      	nop
 800a87c:	20000164 	.word	0x20000164

0800a880 <__libc_init_array>:
 800a880:	b570      	push	{r4, r5, r6, lr}
 800a882:	4d0d      	ldr	r5, [pc, #52]	; (800a8b8 <__libc_init_array+0x38>)
 800a884:	4c0d      	ldr	r4, [pc, #52]	; (800a8bc <__libc_init_array+0x3c>)
 800a886:	1b64      	subs	r4, r4, r5
 800a888:	10a4      	asrs	r4, r4, #2
 800a88a:	2600      	movs	r6, #0
 800a88c:	42a6      	cmp	r6, r4
 800a88e:	d109      	bne.n	800a8a4 <__libc_init_array+0x24>
 800a890:	4d0b      	ldr	r5, [pc, #44]	; (800a8c0 <__libc_init_array+0x40>)
 800a892:	4c0c      	ldr	r4, [pc, #48]	; (800a8c4 <__libc_init_array+0x44>)
 800a894:	f000 fb20 	bl	800aed8 <_init>
 800a898:	1b64      	subs	r4, r4, r5
 800a89a:	10a4      	asrs	r4, r4, #2
 800a89c:	2600      	movs	r6, #0
 800a89e:	42a6      	cmp	r6, r4
 800a8a0:	d105      	bne.n	800a8ae <__libc_init_array+0x2e>
 800a8a2:	bd70      	pop	{r4, r5, r6, pc}
 800a8a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8a8:	4798      	blx	r3
 800a8aa:	3601      	adds	r6, #1
 800a8ac:	e7ee      	b.n	800a88c <__libc_init_array+0xc>
 800a8ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8b2:	4798      	blx	r3
 800a8b4:	3601      	adds	r6, #1
 800a8b6:	e7f2      	b.n	800a89e <__libc_init_array+0x1e>
 800a8b8:	0800af60 	.word	0x0800af60
 800a8bc:	0800af60 	.word	0x0800af60
 800a8c0:	0800af60 	.word	0x0800af60
 800a8c4:	0800af64 	.word	0x0800af64

0800a8c8 <__retarget_lock_init_recursive>:
 800a8c8:	4770      	bx	lr

0800a8ca <__retarget_lock_acquire_recursive>:
 800a8ca:	4770      	bx	lr

0800a8cc <__retarget_lock_release_recursive>:
 800a8cc:	4770      	bx	lr
	...

0800a8d0 <_free_r>:
 800a8d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8d2:	2900      	cmp	r1, #0
 800a8d4:	d044      	beq.n	800a960 <_free_r+0x90>
 800a8d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8da:	9001      	str	r0, [sp, #4]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	f1a1 0404 	sub.w	r4, r1, #4
 800a8e2:	bfb8      	it	lt
 800a8e4:	18e4      	addlt	r4, r4, r3
 800a8e6:	f000 f8df 	bl	800aaa8 <__malloc_lock>
 800a8ea:	4a1e      	ldr	r2, [pc, #120]	; (800a964 <_free_r+0x94>)
 800a8ec:	9801      	ldr	r0, [sp, #4]
 800a8ee:	6813      	ldr	r3, [r2, #0]
 800a8f0:	b933      	cbnz	r3, 800a900 <_free_r+0x30>
 800a8f2:	6063      	str	r3, [r4, #4]
 800a8f4:	6014      	str	r4, [r2, #0]
 800a8f6:	b003      	add	sp, #12
 800a8f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a8fc:	f000 b8da 	b.w	800aab4 <__malloc_unlock>
 800a900:	42a3      	cmp	r3, r4
 800a902:	d908      	bls.n	800a916 <_free_r+0x46>
 800a904:	6825      	ldr	r5, [r4, #0]
 800a906:	1961      	adds	r1, r4, r5
 800a908:	428b      	cmp	r3, r1
 800a90a:	bf01      	itttt	eq
 800a90c:	6819      	ldreq	r1, [r3, #0]
 800a90e:	685b      	ldreq	r3, [r3, #4]
 800a910:	1949      	addeq	r1, r1, r5
 800a912:	6021      	streq	r1, [r4, #0]
 800a914:	e7ed      	b.n	800a8f2 <_free_r+0x22>
 800a916:	461a      	mov	r2, r3
 800a918:	685b      	ldr	r3, [r3, #4]
 800a91a:	b10b      	cbz	r3, 800a920 <_free_r+0x50>
 800a91c:	42a3      	cmp	r3, r4
 800a91e:	d9fa      	bls.n	800a916 <_free_r+0x46>
 800a920:	6811      	ldr	r1, [r2, #0]
 800a922:	1855      	adds	r5, r2, r1
 800a924:	42a5      	cmp	r5, r4
 800a926:	d10b      	bne.n	800a940 <_free_r+0x70>
 800a928:	6824      	ldr	r4, [r4, #0]
 800a92a:	4421      	add	r1, r4
 800a92c:	1854      	adds	r4, r2, r1
 800a92e:	42a3      	cmp	r3, r4
 800a930:	6011      	str	r1, [r2, #0]
 800a932:	d1e0      	bne.n	800a8f6 <_free_r+0x26>
 800a934:	681c      	ldr	r4, [r3, #0]
 800a936:	685b      	ldr	r3, [r3, #4]
 800a938:	6053      	str	r3, [r2, #4]
 800a93a:	440c      	add	r4, r1
 800a93c:	6014      	str	r4, [r2, #0]
 800a93e:	e7da      	b.n	800a8f6 <_free_r+0x26>
 800a940:	d902      	bls.n	800a948 <_free_r+0x78>
 800a942:	230c      	movs	r3, #12
 800a944:	6003      	str	r3, [r0, #0]
 800a946:	e7d6      	b.n	800a8f6 <_free_r+0x26>
 800a948:	6825      	ldr	r5, [r4, #0]
 800a94a:	1961      	adds	r1, r4, r5
 800a94c:	428b      	cmp	r3, r1
 800a94e:	bf04      	itt	eq
 800a950:	6819      	ldreq	r1, [r3, #0]
 800a952:	685b      	ldreq	r3, [r3, #4]
 800a954:	6063      	str	r3, [r4, #4]
 800a956:	bf04      	itt	eq
 800a958:	1949      	addeq	r1, r1, r5
 800a95a:	6021      	streq	r1, [r4, #0]
 800a95c:	6054      	str	r4, [r2, #4]
 800a95e:	e7ca      	b.n	800a8f6 <_free_r+0x26>
 800a960:	b003      	add	sp, #12
 800a962:	bd30      	pop	{r4, r5, pc}
 800a964:	20002130 	.word	0x20002130

0800a968 <sbrk_aligned>:
 800a968:	b570      	push	{r4, r5, r6, lr}
 800a96a:	4e0e      	ldr	r6, [pc, #56]	; (800a9a4 <sbrk_aligned+0x3c>)
 800a96c:	460c      	mov	r4, r1
 800a96e:	6831      	ldr	r1, [r6, #0]
 800a970:	4605      	mov	r5, r0
 800a972:	b911      	cbnz	r1, 800a97a <sbrk_aligned+0x12>
 800a974:	f000 fa1c 	bl	800adb0 <_sbrk_r>
 800a978:	6030      	str	r0, [r6, #0]
 800a97a:	4621      	mov	r1, r4
 800a97c:	4628      	mov	r0, r5
 800a97e:	f000 fa17 	bl	800adb0 <_sbrk_r>
 800a982:	1c43      	adds	r3, r0, #1
 800a984:	d00a      	beq.n	800a99c <sbrk_aligned+0x34>
 800a986:	1cc4      	adds	r4, r0, #3
 800a988:	f024 0403 	bic.w	r4, r4, #3
 800a98c:	42a0      	cmp	r0, r4
 800a98e:	d007      	beq.n	800a9a0 <sbrk_aligned+0x38>
 800a990:	1a21      	subs	r1, r4, r0
 800a992:	4628      	mov	r0, r5
 800a994:	f000 fa0c 	bl	800adb0 <_sbrk_r>
 800a998:	3001      	adds	r0, #1
 800a99a:	d101      	bne.n	800a9a0 <sbrk_aligned+0x38>
 800a99c:	f04f 34ff 	mov.w	r4, #4294967295
 800a9a0:	4620      	mov	r0, r4
 800a9a2:	bd70      	pop	{r4, r5, r6, pc}
 800a9a4:	20002134 	.word	0x20002134

0800a9a8 <_malloc_r>:
 800a9a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9ac:	1ccd      	adds	r5, r1, #3
 800a9ae:	f025 0503 	bic.w	r5, r5, #3
 800a9b2:	3508      	adds	r5, #8
 800a9b4:	2d0c      	cmp	r5, #12
 800a9b6:	bf38      	it	cc
 800a9b8:	250c      	movcc	r5, #12
 800a9ba:	2d00      	cmp	r5, #0
 800a9bc:	4607      	mov	r7, r0
 800a9be:	db01      	blt.n	800a9c4 <_malloc_r+0x1c>
 800a9c0:	42a9      	cmp	r1, r5
 800a9c2:	d905      	bls.n	800a9d0 <_malloc_r+0x28>
 800a9c4:	230c      	movs	r3, #12
 800a9c6:	603b      	str	r3, [r7, #0]
 800a9c8:	2600      	movs	r6, #0
 800a9ca:	4630      	mov	r0, r6
 800a9cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9d0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800aaa4 <_malloc_r+0xfc>
 800a9d4:	f000 f868 	bl	800aaa8 <__malloc_lock>
 800a9d8:	f8d8 3000 	ldr.w	r3, [r8]
 800a9dc:	461c      	mov	r4, r3
 800a9de:	bb5c      	cbnz	r4, 800aa38 <_malloc_r+0x90>
 800a9e0:	4629      	mov	r1, r5
 800a9e2:	4638      	mov	r0, r7
 800a9e4:	f7ff ffc0 	bl	800a968 <sbrk_aligned>
 800a9e8:	1c43      	adds	r3, r0, #1
 800a9ea:	4604      	mov	r4, r0
 800a9ec:	d155      	bne.n	800aa9a <_malloc_r+0xf2>
 800a9ee:	f8d8 4000 	ldr.w	r4, [r8]
 800a9f2:	4626      	mov	r6, r4
 800a9f4:	2e00      	cmp	r6, #0
 800a9f6:	d145      	bne.n	800aa84 <_malloc_r+0xdc>
 800a9f8:	2c00      	cmp	r4, #0
 800a9fa:	d048      	beq.n	800aa8e <_malloc_r+0xe6>
 800a9fc:	6823      	ldr	r3, [r4, #0]
 800a9fe:	4631      	mov	r1, r6
 800aa00:	4638      	mov	r0, r7
 800aa02:	eb04 0903 	add.w	r9, r4, r3
 800aa06:	f000 f9d3 	bl	800adb0 <_sbrk_r>
 800aa0a:	4581      	cmp	r9, r0
 800aa0c:	d13f      	bne.n	800aa8e <_malloc_r+0xe6>
 800aa0e:	6821      	ldr	r1, [r4, #0]
 800aa10:	1a6d      	subs	r5, r5, r1
 800aa12:	4629      	mov	r1, r5
 800aa14:	4638      	mov	r0, r7
 800aa16:	f7ff ffa7 	bl	800a968 <sbrk_aligned>
 800aa1a:	3001      	adds	r0, #1
 800aa1c:	d037      	beq.n	800aa8e <_malloc_r+0xe6>
 800aa1e:	6823      	ldr	r3, [r4, #0]
 800aa20:	442b      	add	r3, r5
 800aa22:	6023      	str	r3, [r4, #0]
 800aa24:	f8d8 3000 	ldr.w	r3, [r8]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d038      	beq.n	800aa9e <_malloc_r+0xf6>
 800aa2c:	685a      	ldr	r2, [r3, #4]
 800aa2e:	42a2      	cmp	r2, r4
 800aa30:	d12b      	bne.n	800aa8a <_malloc_r+0xe2>
 800aa32:	2200      	movs	r2, #0
 800aa34:	605a      	str	r2, [r3, #4]
 800aa36:	e00f      	b.n	800aa58 <_malloc_r+0xb0>
 800aa38:	6822      	ldr	r2, [r4, #0]
 800aa3a:	1b52      	subs	r2, r2, r5
 800aa3c:	d41f      	bmi.n	800aa7e <_malloc_r+0xd6>
 800aa3e:	2a0b      	cmp	r2, #11
 800aa40:	d917      	bls.n	800aa72 <_malloc_r+0xca>
 800aa42:	1961      	adds	r1, r4, r5
 800aa44:	42a3      	cmp	r3, r4
 800aa46:	6025      	str	r5, [r4, #0]
 800aa48:	bf18      	it	ne
 800aa4a:	6059      	strne	r1, [r3, #4]
 800aa4c:	6863      	ldr	r3, [r4, #4]
 800aa4e:	bf08      	it	eq
 800aa50:	f8c8 1000 	streq.w	r1, [r8]
 800aa54:	5162      	str	r2, [r4, r5]
 800aa56:	604b      	str	r3, [r1, #4]
 800aa58:	4638      	mov	r0, r7
 800aa5a:	f104 060b 	add.w	r6, r4, #11
 800aa5e:	f000 f829 	bl	800aab4 <__malloc_unlock>
 800aa62:	f026 0607 	bic.w	r6, r6, #7
 800aa66:	1d23      	adds	r3, r4, #4
 800aa68:	1af2      	subs	r2, r6, r3
 800aa6a:	d0ae      	beq.n	800a9ca <_malloc_r+0x22>
 800aa6c:	1b9b      	subs	r3, r3, r6
 800aa6e:	50a3      	str	r3, [r4, r2]
 800aa70:	e7ab      	b.n	800a9ca <_malloc_r+0x22>
 800aa72:	42a3      	cmp	r3, r4
 800aa74:	6862      	ldr	r2, [r4, #4]
 800aa76:	d1dd      	bne.n	800aa34 <_malloc_r+0x8c>
 800aa78:	f8c8 2000 	str.w	r2, [r8]
 800aa7c:	e7ec      	b.n	800aa58 <_malloc_r+0xb0>
 800aa7e:	4623      	mov	r3, r4
 800aa80:	6864      	ldr	r4, [r4, #4]
 800aa82:	e7ac      	b.n	800a9de <_malloc_r+0x36>
 800aa84:	4634      	mov	r4, r6
 800aa86:	6876      	ldr	r6, [r6, #4]
 800aa88:	e7b4      	b.n	800a9f4 <_malloc_r+0x4c>
 800aa8a:	4613      	mov	r3, r2
 800aa8c:	e7cc      	b.n	800aa28 <_malloc_r+0x80>
 800aa8e:	230c      	movs	r3, #12
 800aa90:	603b      	str	r3, [r7, #0]
 800aa92:	4638      	mov	r0, r7
 800aa94:	f000 f80e 	bl	800aab4 <__malloc_unlock>
 800aa98:	e797      	b.n	800a9ca <_malloc_r+0x22>
 800aa9a:	6025      	str	r5, [r4, #0]
 800aa9c:	e7dc      	b.n	800aa58 <_malloc_r+0xb0>
 800aa9e:	605b      	str	r3, [r3, #4]
 800aaa0:	deff      	udf	#255	; 0xff
 800aaa2:	bf00      	nop
 800aaa4:	20002130 	.word	0x20002130

0800aaa8 <__malloc_lock>:
 800aaa8:	4801      	ldr	r0, [pc, #4]	; (800aab0 <__malloc_lock+0x8>)
 800aaaa:	f7ff bf0e 	b.w	800a8ca <__retarget_lock_acquire_recursive>
 800aaae:	bf00      	nop
 800aab0:	2000212c 	.word	0x2000212c

0800aab4 <__malloc_unlock>:
 800aab4:	4801      	ldr	r0, [pc, #4]	; (800aabc <__malloc_unlock+0x8>)
 800aab6:	f7ff bf09 	b.w	800a8cc <__retarget_lock_release_recursive>
 800aaba:	bf00      	nop
 800aabc:	2000212c 	.word	0x2000212c

0800aac0 <__sflush_r>:
 800aac0:	898a      	ldrh	r2, [r1, #12]
 800aac2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aac6:	4605      	mov	r5, r0
 800aac8:	0710      	lsls	r0, r2, #28
 800aaca:	460c      	mov	r4, r1
 800aacc:	d458      	bmi.n	800ab80 <__sflush_r+0xc0>
 800aace:	684b      	ldr	r3, [r1, #4]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	dc05      	bgt.n	800aae0 <__sflush_r+0x20>
 800aad4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	dc02      	bgt.n	800aae0 <__sflush_r+0x20>
 800aada:	2000      	movs	r0, #0
 800aadc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aae0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aae2:	2e00      	cmp	r6, #0
 800aae4:	d0f9      	beq.n	800aada <__sflush_r+0x1a>
 800aae6:	2300      	movs	r3, #0
 800aae8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aaec:	682f      	ldr	r7, [r5, #0]
 800aaee:	6a21      	ldr	r1, [r4, #32]
 800aaf0:	602b      	str	r3, [r5, #0]
 800aaf2:	d032      	beq.n	800ab5a <__sflush_r+0x9a>
 800aaf4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aaf6:	89a3      	ldrh	r3, [r4, #12]
 800aaf8:	075a      	lsls	r2, r3, #29
 800aafa:	d505      	bpl.n	800ab08 <__sflush_r+0x48>
 800aafc:	6863      	ldr	r3, [r4, #4]
 800aafe:	1ac0      	subs	r0, r0, r3
 800ab00:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ab02:	b10b      	cbz	r3, 800ab08 <__sflush_r+0x48>
 800ab04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ab06:	1ac0      	subs	r0, r0, r3
 800ab08:	2300      	movs	r3, #0
 800ab0a:	4602      	mov	r2, r0
 800ab0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab0e:	6a21      	ldr	r1, [r4, #32]
 800ab10:	4628      	mov	r0, r5
 800ab12:	47b0      	blx	r6
 800ab14:	1c43      	adds	r3, r0, #1
 800ab16:	89a3      	ldrh	r3, [r4, #12]
 800ab18:	d106      	bne.n	800ab28 <__sflush_r+0x68>
 800ab1a:	6829      	ldr	r1, [r5, #0]
 800ab1c:	291d      	cmp	r1, #29
 800ab1e:	d82b      	bhi.n	800ab78 <__sflush_r+0xb8>
 800ab20:	4a29      	ldr	r2, [pc, #164]	; (800abc8 <__sflush_r+0x108>)
 800ab22:	410a      	asrs	r2, r1
 800ab24:	07d6      	lsls	r6, r2, #31
 800ab26:	d427      	bmi.n	800ab78 <__sflush_r+0xb8>
 800ab28:	2200      	movs	r2, #0
 800ab2a:	6062      	str	r2, [r4, #4]
 800ab2c:	04d9      	lsls	r1, r3, #19
 800ab2e:	6922      	ldr	r2, [r4, #16]
 800ab30:	6022      	str	r2, [r4, #0]
 800ab32:	d504      	bpl.n	800ab3e <__sflush_r+0x7e>
 800ab34:	1c42      	adds	r2, r0, #1
 800ab36:	d101      	bne.n	800ab3c <__sflush_r+0x7c>
 800ab38:	682b      	ldr	r3, [r5, #0]
 800ab3a:	b903      	cbnz	r3, 800ab3e <__sflush_r+0x7e>
 800ab3c:	6560      	str	r0, [r4, #84]	; 0x54
 800ab3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab40:	602f      	str	r7, [r5, #0]
 800ab42:	2900      	cmp	r1, #0
 800ab44:	d0c9      	beq.n	800aada <__sflush_r+0x1a>
 800ab46:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab4a:	4299      	cmp	r1, r3
 800ab4c:	d002      	beq.n	800ab54 <__sflush_r+0x94>
 800ab4e:	4628      	mov	r0, r5
 800ab50:	f7ff febe 	bl	800a8d0 <_free_r>
 800ab54:	2000      	movs	r0, #0
 800ab56:	6360      	str	r0, [r4, #52]	; 0x34
 800ab58:	e7c0      	b.n	800aadc <__sflush_r+0x1c>
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	4628      	mov	r0, r5
 800ab5e:	47b0      	blx	r6
 800ab60:	1c41      	adds	r1, r0, #1
 800ab62:	d1c8      	bne.n	800aaf6 <__sflush_r+0x36>
 800ab64:	682b      	ldr	r3, [r5, #0]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d0c5      	beq.n	800aaf6 <__sflush_r+0x36>
 800ab6a:	2b1d      	cmp	r3, #29
 800ab6c:	d001      	beq.n	800ab72 <__sflush_r+0xb2>
 800ab6e:	2b16      	cmp	r3, #22
 800ab70:	d101      	bne.n	800ab76 <__sflush_r+0xb6>
 800ab72:	602f      	str	r7, [r5, #0]
 800ab74:	e7b1      	b.n	800aada <__sflush_r+0x1a>
 800ab76:	89a3      	ldrh	r3, [r4, #12]
 800ab78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab7c:	81a3      	strh	r3, [r4, #12]
 800ab7e:	e7ad      	b.n	800aadc <__sflush_r+0x1c>
 800ab80:	690f      	ldr	r7, [r1, #16]
 800ab82:	2f00      	cmp	r7, #0
 800ab84:	d0a9      	beq.n	800aada <__sflush_r+0x1a>
 800ab86:	0793      	lsls	r3, r2, #30
 800ab88:	680e      	ldr	r6, [r1, #0]
 800ab8a:	bf08      	it	eq
 800ab8c:	694b      	ldreq	r3, [r1, #20]
 800ab8e:	600f      	str	r7, [r1, #0]
 800ab90:	bf18      	it	ne
 800ab92:	2300      	movne	r3, #0
 800ab94:	eba6 0807 	sub.w	r8, r6, r7
 800ab98:	608b      	str	r3, [r1, #8]
 800ab9a:	f1b8 0f00 	cmp.w	r8, #0
 800ab9e:	dd9c      	ble.n	800aada <__sflush_r+0x1a>
 800aba0:	6a21      	ldr	r1, [r4, #32]
 800aba2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aba4:	4643      	mov	r3, r8
 800aba6:	463a      	mov	r2, r7
 800aba8:	4628      	mov	r0, r5
 800abaa:	47b0      	blx	r6
 800abac:	2800      	cmp	r0, #0
 800abae:	dc06      	bgt.n	800abbe <__sflush_r+0xfe>
 800abb0:	89a3      	ldrh	r3, [r4, #12]
 800abb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abb6:	81a3      	strh	r3, [r4, #12]
 800abb8:	f04f 30ff 	mov.w	r0, #4294967295
 800abbc:	e78e      	b.n	800aadc <__sflush_r+0x1c>
 800abbe:	4407      	add	r7, r0
 800abc0:	eba8 0800 	sub.w	r8, r8, r0
 800abc4:	e7e9      	b.n	800ab9a <__sflush_r+0xda>
 800abc6:	bf00      	nop
 800abc8:	dfbffffe 	.word	0xdfbffffe

0800abcc <_fflush_r>:
 800abcc:	b538      	push	{r3, r4, r5, lr}
 800abce:	690b      	ldr	r3, [r1, #16]
 800abd0:	4605      	mov	r5, r0
 800abd2:	460c      	mov	r4, r1
 800abd4:	b913      	cbnz	r3, 800abdc <_fflush_r+0x10>
 800abd6:	2500      	movs	r5, #0
 800abd8:	4628      	mov	r0, r5
 800abda:	bd38      	pop	{r3, r4, r5, pc}
 800abdc:	b118      	cbz	r0, 800abe6 <_fflush_r+0x1a>
 800abde:	6a03      	ldr	r3, [r0, #32]
 800abe0:	b90b      	cbnz	r3, 800abe6 <_fflush_r+0x1a>
 800abe2:	f7ff fd77 	bl	800a6d4 <__sinit>
 800abe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d0f3      	beq.n	800abd6 <_fflush_r+0xa>
 800abee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800abf0:	07d0      	lsls	r0, r2, #31
 800abf2:	d404      	bmi.n	800abfe <_fflush_r+0x32>
 800abf4:	0599      	lsls	r1, r3, #22
 800abf6:	d402      	bmi.n	800abfe <_fflush_r+0x32>
 800abf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abfa:	f7ff fe66 	bl	800a8ca <__retarget_lock_acquire_recursive>
 800abfe:	4628      	mov	r0, r5
 800ac00:	4621      	mov	r1, r4
 800ac02:	f7ff ff5d 	bl	800aac0 <__sflush_r>
 800ac06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac08:	07da      	lsls	r2, r3, #31
 800ac0a:	4605      	mov	r5, r0
 800ac0c:	d4e4      	bmi.n	800abd8 <_fflush_r+0xc>
 800ac0e:	89a3      	ldrh	r3, [r4, #12]
 800ac10:	059b      	lsls	r3, r3, #22
 800ac12:	d4e1      	bmi.n	800abd8 <_fflush_r+0xc>
 800ac14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac16:	f7ff fe59 	bl	800a8cc <__retarget_lock_release_recursive>
 800ac1a:	e7dd      	b.n	800abd8 <_fflush_r+0xc>

0800ac1c <_putc_r>:
 800ac1c:	b570      	push	{r4, r5, r6, lr}
 800ac1e:	460d      	mov	r5, r1
 800ac20:	4614      	mov	r4, r2
 800ac22:	4606      	mov	r6, r0
 800ac24:	b118      	cbz	r0, 800ac2e <_putc_r+0x12>
 800ac26:	6a03      	ldr	r3, [r0, #32]
 800ac28:	b90b      	cbnz	r3, 800ac2e <_putc_r+0x12>
 800ac2a:	f7ff fd53 	bl	800a6d4 <__sinit>
 800ac2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac30:	07d8      	lsls	r0, r3, #31
 800ac32:	d405      	bmi.n	800ac40 <_putc_r+0x24>
 800ac34:	89a3      	ldrh	r3, [r4, #12]
 800ac36:	0599      	lsls	r1, r3, #22
 800ac38:	d402      	bmi.n	800ac40 <_putc_r+0x24>
 800ac3a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac3c:	f7ff fe45 	bl	800a8ca <__retarget_lock_acquire_recursive>
 800ac40:	68a3      	ldr	r3, [r4, #8]
 800ac42:	3b01      	subs	r3, #1
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	60a3      	str	r3, [r4, #8]
 800ac48:	da05      	bge.n	800ac56 <_putc_r+0x3a>
 800ac4a:	69a2      	ldr	r2, [r4, #24]
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	db12      	blt.n	800ac76 <_putc_r+0x5a>
 800ac50:	b2eb      	uxtb	r3, r5
 800ac52:	2b0a      	cmp	r3, #10
 800ac54:	d00f      	beq.n	800ac76 <_putc_r+0x5a>
 800ac56:	6823      	ldr	r3, [r4, #0]
 800ac58:	1c5a      	adds	r2, r3, #1
 800ac5a:	6022      	str	r2, [r4, #0]
 800ac5c:	701d      	strb	r5, [r3, #0]
 800ac5e:	b2ed      	uxtb	r5, r5
 800ac60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac62:	07da      	lsls	r2, r3, #31
 800ac64:	d405      	bmi.n	800ac72 <_putc_r+0x56>
 800ac66:	89a3      	ldrh	r3, [r4, #12]
 800ac68:	059b      	lsls	r3, r3, #22
 800ac6a:	d402      	bmi.n	800ac72 <_putc_r+0x56>
 800ac6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac6e:	f7ff fe2d 	bl	800a8cc <__retarget_lock_release_recursive>
 800ac72:	4628      	mov	r0, r5
 800ac74:	bd70      	pop	{r4, r5, r6, pc}
 800ac76:	4629      	mov	r1, r5
 800ac78:	4622      	mov	r2, r4
 800ac7a:	4630      	mov	r0, r6
 800ac7c:	f000 f802 	bl	800ac84 <__swbuf_r>
 800ac80:	4605      	mov	r5, r0
 800ac82:	e7ed      	b.n	800ac60 <_putc_r+0x44>

0800ac84 <__swbuf_r>:
 800ac84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac86:	460e      	mov	r6, r1
 800ac88:	4614      	mov	r4, r2
 800ac8a:	4605      	mov	r5, r0
 800ac8c:	b118      	cbz	r0, 800ac96 <__swbuf_r+0x12>
 800ac8e:	6a03      	ldr	r3, [r0, #32]
 800ac90:	b90b      	cbnz	r3, 800ac96 <__swbuf_r+0x12>
 800ac92:	f7ff fd1f 	bl	800a6d4 <__sinit>
 800ac96:	69a3      	ldr	r3, [r4, #24]
 800ac98:	60a3      	str	r3, [r4, #8]
 800ac9a:	89a3      	ldrh	r3, [r4, #12]
 800ac9c:	071a      	lsls	r2, r3, #28
 800ac9e:	d525      	bpl.n	800acec <__swbuf_r+0x68>
 800aca0:	6923      	ldr	r3, [r4, #16]
 800aca2:	b31b      	cbz	r3, 800acec <__swbuf_r+0x68>
 800aca4:	6823      	ldr	r3, [r4, #0]
 800aca6:	6922      	ldr	r2, [r4, #16]
 800aca8:	1a98      	subs	r0, r3, r2
 800acaa:	6963      	ldr	r3, [r4, #20]
 800acac:	b2f6      	uxtb	r6, r6
 800acae:	4283      	cmp	r3, r0
 800acb0:	4637      	mov	r7, r6
 800acb2:	dc04      	bgt.n	800acbe <__swbuf_r+0x3a>
 800acb4:	4621      	mov	r1, r4
 800acb6:	4628      	mov	r0, r5
 800acb8:	f7ff ff88 	bl	800abcc <_fflush_r>
 800acbc:	b9e0      	cbnz	r0, 800acf8 <__swbuf_r+0x74>
 800acbe:	68a3      	ldr	r3, [r4, #8]
 800acc0:	3b01      	subs	r3, #1
 800acc2:	60a3      	str	r3, [r4, #8]
 800acc4:	6823      	ldr	r3, [r4, #0]
 800acc6:	1c5a      	adds	r2, r3, #1
 800acc8:	6022      	str	r2, [r4, #0]
 800acca:	701e      	strb	r6, [r3, #0]
 800accc:	6962      	ldr	r2, [r4, #20]
 800acce:	1c43      	adds	r3, r0, #1
 800acd0:	429a      	cmp	r2, r3
 800acd2:	d004      	beq.n	800acde <__swbuf_r+0x5a>
 800acd4:	89a3      	ldrh	r3, [r4, #12]
 800acd6:	07db      	lsls	r3, r3, #31
 800acd8:	d506      	bpl.n	800ace8 <__swbuf_r+0x64>
 800acda:	2e0a      	cmp	r6, #10
 800acdc:	d104      	bne.n	800ace8 <__swbuf_r+0x64>
 800acde:	4621      	mov	r1, r4
 800ace0:	4628      	mov	r0, r5
 800ace2:	f7ff ff73 	bl	800abcc <_fflush_r>
 800ace6:	b938      	cbnz	r0, 800acf8 <__swbuf_r+0x74>
 800ace8:	4638      	mov	r0, r7
 800acea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acec:	4621      	mov	r1, r4
 800acee:	4628      	mov	r0, r5
 800acf0:	f000 f806 	bl	800ad00 <__swsetup_r>
 800acf4:	2800      	cmp	r0, #0
 800acf6:	d0d5      	beq.n	800aca4 <__swbuf_r+0x20>
 800acf8:	f04f 37ff 	mov.w	r7, #4294967295
 800acfc:	e7f4      	b.n	800ace8 <__swbuf_r+0x64>
	...

0800ad00 <__swsetup_r>:
 800ad00:	b538      	push	{r3, r4, r5, lr}
 800ad02:	4b2a      	ldr	r3, [pc, #168]	; (800adac <__swsetup_r+0xac>)
 800ad04:	4605      	mov	r5, r0
 800ad06:	6818      	ldr	r0, [r3, #0]
 800ad08:	460c      	mov	r4, r1
 800ad0a:	b118      	cbz	r0, 800ad14 <__swsetup_r+0x14>
 800ad0c:	6a03      	ldr	r3, [r0, #32]
 800ad0e:	b90b      	cbnz	r3, 800ad14 <__swsetup_r+0x14>
 800ad10:	f7ff fce0 	bl	800a6d4 <__sinit>
 800ad14:	89a3      	ldrh	r3, [r4, #12]
 800ad16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad1a:	0718      	lsls	r0, r3, #28
 800ad1c:	d422      	bmi.n	800ad64 <__swsetup_r+0x64>
 800ad1e:	06d9      	lsls	r1, r3, #27
 800ad20:	d407      	bmi.n	800ad32 <__swsetup_r+0x32>
 800ad22:	2309      	movs	r3, #9
 800ad24:	602b      	str	r3, [r5, #0]
 800ad26:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ad2a:	81a3      	strh	r3, [r4, #12]
 800ad2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad30:	e034      	b.n	800ad9c <__swsetup_r+0x9c>
 800ad32:	0758      	lsls	r0, r3, #29
 800ad34:	d512      	bpl.n	800ad5c <__swsetup_r+0x5c>
 800ad36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad38:	b141      	cbz	r1, 800ad4c <__swsetup_r+0x4c>
 800ad3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad3e:	4299      	cmp	r1, r3
 800ad40:	d002      	beq.n	800ad48 <__swsetup_r+0x48>
 800ad42:	4628      	mov	r0, r5
 800ad44:	f7ff fdc4 	bl	800a8d0 <_free_r>
 800ad48:	2300      	movs	r3, #0
 800ad4a:	6363      	str	r3, [r4, #52]	; 0x34
 800ad4c:	89a3      	ldrh	r3, [r4, #12]
 800ad4e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ad52:	81a3      	strh	r3, [r4, #12]
 800ad54:	2300      	movs	r3, #0
 800ad56:	6063      	str	r3, [r4, #4]
 800ad58:	6923      	ldr	r3, [r4, #16]
 800ad5a:	6023      	str	r3, [r4, #0]
 800ad5c:	89a3      	ldrh	r3, [r4, #12]
 800ad5e:	f043 0308 	orr.w	r3, r3, #8
 800ad62:	81a3      	strh	r3, [r4, #12]
 800ad64:	6923      	ldr	r3, [r4, #16]
 800ad66:	b94b      	cbnz	r3, 800ad7c <__swsetup_r+0x7c>
 800ad68:	89a3      	ldrh	r3, [r4, #12]
 800ad6a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ad6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad72:	d003      	beq.n	800ad7c <__swsetup_r+0x7c>
 800ad74:	4621      	mov	r1, r4
 800ad76:	4628      	mov	r0, r5
 800ad78:	f000 f850 	bl	800ae1c <__smakebuf_r>
 800ad7c:	89a0      	ldrh	r0, [r4, #12]
 800ad7e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad82:	f010 0301 	ands.w	r3, r0, #1
 800ad86:	d00a      	beq.n	800ad9e <__swsetup_r+0x9e>
 800ad88:	2300      	movs	r3, #0
 800ad8a:	60a3      	str	r3, [r4, #8]
 800ad8c:	6963      	ldr	r3, [r4, #20]
 800ad8e:	425b      	negs	r3, r3
 800ad90:	61a3      	str	r3, [r4, #24]
 800ad92:	6923      	ldr	r3, [r4, #16]
 800ad94:	b943      	cbnz	r3, 800ada8 <__swsetup_r+0xa8>
 800ad96:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ad9a:	d1c4      	bne.n	800ad26 <__swsetup_r+0x26>
 800ad9c:	bd38      	pop	{r3, r4, r5, pc}
 800ad9e:	0781      	lsls	r1, r0, #30
 800ada0:	bf58      	it	pl
 800ada2:	6963      	ldrpl	r3, [r4, #20]
 800ada4:	60a3      	str	r3, [r4, #8]
 800ada6:	e7f4      	b.n	800ad92 <__swsetup_r+0x92>
 800ada8:	2000      	movs	r0, #0
 800adaa:	e7f7      	b.n	800ad9c <__swsetup_r+0x9c>
 800adac:	20000164 	.word	0x20000164

0800adb0 <_sbrk_r>:
 800adb0:	b538      	push	{r3, r4, r5, lr}
 800adb2:	4d06      	ldr	r5, [pc, #24]	; (800adcc <_sbrk_r+0x1c>)
 800adb4:	2300      	movs	r3, #0
 800adb6:	4604      	mov	r4, r0
 800adb8:	4608      	mov	r0, r1
 800adba:	602b      	str	r3, [r5, #0]
 800adbc:	f7f6 fa64 	bl	8001288 <_sbrk>
 800adc0:	1c43      	adds	r3, r0, #1
 800adc2:	d102      	bne.n	800adca <_sbrk_r+0x1a>
 800adc4:	682b      	ldr	r3, [r5, #0]
 800adc6:	b103      	cbz	r3, 800adca <_sbrk_r+0x1a>
 800adc8:	6023      	str	r3, [r4, #0]
 800adca:	bd38      	pop	{r3, r4, r5, pc}
 800adcc:	20002128 	.word	0x20002128

0800add0 <__swhatbuf_r>:
 800add0:	b570      	push	{r4, r5, r6, lr}
 800add2:	460c      	mov	r4, r1
 800add4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800add8:	2900      	cmp	r1, #0
 800adda:	b096      	sub	sp, #88	; 0x58
 800addc:	4615      	mov	r5, r2
 800adde:	461e      	mov	r6, r3
 800ade0:	da0d      	bge.n	800adfe <__swhatbuf_r+0x2e>
 800ade2:	89a3      	ldrh	r3, [r4, #12]
 800ade4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ade8:	f04f 0100 	mov.w	r1, #0
 800adec:	bf0c      	ite	eq
 800adee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800adf2:	2340      	movne	r3, #64	; 0x40
 800adf4:	2000      	movs	r0, #0
 800adf6:	6031      	str	r1, [r6, #0]
 800adf8:	602b      	str	r3, [r5, #0]
 800adfa:	b016      	add	sp, #88	; 0x58
 800adfc:	bd70      	pop	{r4, r5, r6, pc}
 800adfe:	466a      	mov	r2, sp
 800ae00:	f000 f848 	bl	800ae94 <_fstat_r>
 800ae04:	2800      	cmp	r0, #0
 800ae06:	dbec      	blt.n	800ade2 <__swhatbuf_r+0x12>
 800ae08:	9901      	ldr	r1, [sp, #4]
 800ae0a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ae0e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ae12:	4259      	negs	r1, r3
 800ae14:	4159      	adcs	r1, r3
 800ae16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae1a:	e7eb      	b.n	800adf4 <__swhatbuf_r+0x24>

0800ae1c <__smakebuf_r>:
 800ae1c:	898b      	ldrh	r3, [r1, #12]
 800ae1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae20:	079d      	lsls	r5, r3, #30
 800ae22:	4606      	mov	r6, r0
 800ae24:	460c      	mov	r4, r1
 800ae26:	d507      	bpl.n	800ae38 <__smakebuf_r+0x1c>
 800ae28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ae2c:	6023      	str	r3, [r4, #0]
 800ae2e:	6123      	str	r3, [r4, #16]
 800ae30:	2301      	movs	r3, #1
 800ae32:	6163      	str	r3, [r4, #20]
 800ae34:	b002      	add	sp, #8
 800ae36:	bd70      	pop	{r4, r5, r6, pc}
 800ae38:	ab01      	add	r3, sp, #4
 800ae3a:	466a      	mov	r2, sp
 800ae3c:	f7ff ffc8 	bl	800add0 <__swhatbuf_r>
 800ae40:	9900      	ldr	r1, [sp, #0]
 800ae42:	4605      	mov	r5, r0
 800ae44:	4630      	mov	r0, r6
 800ae46:	f7ff fdaf 	bl	800a9a8 <_malloc_r>
 800ae4a:	b948      	cbnz	r0, 800ae60 <__smakebuf_r+0x44>
 800ae4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae50:	059a      	lsls	r2, r3, #22
 800ae52:	d4ef      	bmi.n	800ae34 <__smakebuf_r+0x18>
 800ae54:	f023 0303 	bic.w	r3, r3, #3
 800ae58:	f043 0302 	orr.w	r3, r3, #2
 800ae5c:	81a3      	strh	r3, [r4, #12]
 800ae5e:	e7e3      	b.n	800ae28 <__smakebuf_r+0xc>
 800ae60:	89a3      	ldrh	r3, [r4, #12]
 800ae62:	6020      	str	r0, [r4, #0]
 800ae64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae68:	81a3      	strh	r3, [r4, #12]
 800ae6a:	9b00      	ldr	r3, [sp, #0]
 800ae6c:	6163      	str	r3, [r4, #20]
 800ae6e:	9b01      	ldr	r3, [sp, #4]
 800ae70:	6120      	str	r0, [r4, #16]
 800ae72:	b15b      	cbz	r3, 800ae8c <__smakebuf_r+0x70>
 800ae74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae78:	4630      	mov	r0, r6
 800ae7a:	f000 f81d 	bl	800aeb8 <_isatty_r>
 800ae7e:	b128      	cbz	r0, 800ae8c <__smakebuf_r+0x70>
 800ae80:	89a3      	ldrh	r3, [r4, #12]
 800ae82:	f023 0303 	bic.w	r3, r3, #3
 800ae86:	f043 0301 	orr.w	r3, r3, #1
 800ae8a:	81a3      	strh	r3, [r4, #12]
 800ae8c:	89a3      	ldrh	r3, [r4, #12]
 800ae8e:	431d      	orrs	r5, r3
 800ae90:	81a5      	strh	r5, [r4, #12]
 800ae92:	e7cf      	b.n	800ae34 <__smakebuf_r+0x18>

0800ae94 <_fstat_r>:
 800ae94:	b538      	push	{r3, r4, r5, lr}
 800ae96:	4d07      	ldr	r5, [pc, #28]	; (800aeb4 <_fstat_r+0x20>)
 800ae98:	2300      	movs	r3, #0
 800ae9a:	4604      	mov	r4, r0
 800ae9c:	4608      	mov	r0, r1
 800ae9e:	4611      	mov	r1, r2
 800aea0:	602b      	str	r3, [r5, #0]
 800aea2:	f7f6 f9c8 	bl	8001236 <_fstat>
 800aea6:	1c43      	adds	r3, r0, #1
 800aea8:	d102      	bne.n	800aeb0 <_fstat_r+0x1c>
 800aeaa:	682b      	ldr	r3, [r5, #0]
 800aeac:	b103      	cbz	r3, 800aeb0 <_fstat_r+0x1c>
 800aeae:	6023      	str	r3, [r4, #0]
 800aeb0:	bd38      	pop	{r3, r4, r5, pc}
 800aeb2:	bf00      	nop
 800aeb4:	20002128 	.word	0x20002128

0800aeb8 <_isatty_r>:
 800aeb8:	b538      	push	{r3, r4, r5, lr}
 800aeba:	4d06      	ldr	r5, [pc, #24]	; (800aed4 <_isatty_r+0x1c>)
 800aebc:	2300      	movs	r3, #0
 800aebe:	4604      	mov	r4, r0
 800aec0:	4608      	mov	r0, r1
 800aec2:	602b      	str	r3, [r5, #0]
 800aec4:	f7f6 f9c7 	bl	8001256 <_isatty>
 800aec8:	1c43      	adds	r3, r0, #1
 800aeca:	d102      	bne.n	800aed2 <_isatty_r+0x1a>
 800aecc:	682b      	ldr	r3, [r5, #0]
 800aece:	b103      	cbz	r3, 800aed2 <_isatty_r+0x1a>
 800aed0:	6023      	str	r3, [r4, #0]
 800aed2:	bd38      	pop	{r3, r4, r5, pc}
 800aed4:	20002128 	.word	0x20002128

0800aed8 <_init>:
 800aed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeda:	bf00      	nop
 800aedc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aede:	bc08      	pop	{r3}
 800aee0:	469e      	mov	lr, r3
 800aee2:	4770      	bx	lr

0800aee4 <_fini>:
 800aee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aee6:	bf00      	nop
 800aee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aeea:	bc08      	pop	{r3}
 800aeec:	469e      	mov	lr, r3
 800aeee:	4770      	bx	lr
