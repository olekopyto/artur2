
artur2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010a54  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000580  08010c28  08010c28  00011c28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080111a8  080111a8  000132d4  2**0
                  CONTENTS
  4 .ARM          00000008  080111a8  080111a8  000121a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080111b0  080111b0  000132d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080111b0  080111b0  000121b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080111b4  080111b4  000121b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d4  20000000  080111b8  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012ac0  200002d4  0801148c  000132d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012d94  0801148c  00013d94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000132d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c55f  00000000  00000000  00013304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042ad  00000000  00000000  0002f863  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001920  00000000  00000000  00033b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001365  00000000  00000000  00035430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028110  00000000  00000000  00036795  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ff8c  00000000  00000000  0005e8a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7da6  00000000  00000000  0007e831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001665d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000080d4  00000000  00000000  0016661c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  0016e6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002d4 	.word	0x200002d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08010c0c 	.word	0x08010c0c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002d8 	.word	0x200002d8
 800020c:	08010c0c 	.word	0x08010c0c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <toggle_pins>:

#ifndef INC_TOGGLE_PINS_H_
#define INC_TOGGLE_PINS_H_

//przełączanie pomiędzy pinami
void toggle_pins(void) {
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
    static uint8_t state = 0;

    switch (state) {
 8001028:	4b3d      	ldr	r3, [pc, #244]	@ (8001120 <toggle_pins+0xfc>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b03      	cmp	r3, #3
 800102e:	d863      	bhi.n	80010f8 <toggle_pins+0xd4>
 8001030:	a201      	add	r2, pc, #4	@ (adr r2, 8001038 <toggle_pins+0x14>)
 8001032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001036:	bf00      	nop
 8001038:	08001049 	.word	0x08001049
 800103c:	08001075 	.word	0x08001075
 8001040:	080010a1 	.word	0x080010a1
 8001044:	080010cd 	.word	0x080010cd
        case 0:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);  // PB0 HIGH
 8001048:	2201      	movs	r2, #1
 800104a:	2101      	movs	r1, #1
 800104c:	4835      	ldr	r0, [pc, #212]	@ (8001124 <toggle_pins+0x100>)
 800104e:	f002 fedd 	bl	8003e0c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);  // PB1 HIGH
 8001052:	2201      	movs	r2, #1
 8001054:	2102      	movs	r1, #2
 8001056:	4833      	ldr	r0, [pc, #204]	@ (8001124 <toggle_pins+0x100>)
 8001058:	f002 fed8 	bl	8003e0c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);  // PB2 LOW
 800105c:	2200      	movs	r2, #0
 800105e:	2104      	movs	r1, #4
 8001060:	4830      	ldr	r0, [pc, #192]	@ (8001124 <toggle_pins+0x100>)
 8001062:	f002 fed3 	bl	8003e0c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET); // PB10 LOW
 8001066:	2200      	movs	r2, #0
 8001068:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800106c:	482d      	ldr	r0, [pc, #180]	@ (8001124 <toggle_pins+0x100>)
 800106e:	f002 fecd 	bl	8003e0c <HAL_GPIO_WritePin>

            break;
 8001072:	e041      	b.n	80010f8 <toggle_pins+0xd4>
        case 1:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);  // PB0 LOW
 8001074:	2200      	movs	r2, #0
 8001076:	2101      	movs	r1, #1
 8001078:	482a      	ldr	r0, [pc, #168]	@ (8001124 <toggle_pins+0x100>)
 800107a:	f002 fec7 	bl	8003e0c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);    // PB1 HIGH
 800107e:	2201      	movs	r2, #1
 8001080:	2102      	movs	r1, #2
 8001082:	4828      	ldr	r0, [pc, #160]	@ (8001124 <toggle_pins+0x100>)
 8001084:	f002 fec2 	bl	8003e0c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);  // PB2 HIGH
 8001088:	2201      	movs	r2, #1
 800108a:	2104      	movs	r1, #4
 800108c:	4825      	ldr	r0, [pc, #148]	@ (8001124 <toggle_pins+0x100>)
 800108e:	f002 febd 	bl	8003e0c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET); // PB10 LOW
 8001092:	2200      	movs	r2, #0
 8001094:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001098:	4822      	ldr	r0, [pc, #136]	@ (8001124 <toggle_pins+0x100>)
 800109a:	f002 feb7 	bl	8003e0c <HAL_GPIO_WritePin>
            break;
 800109e:	e02b      	b.n	80010f8 <toggle_pins+0xd4>
        case 2:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);  // PB0 LOW
 80010a0:	2200      	movs	r2, #0
 80010a2:	2101      	movs	r1, #1
 80010a4:	481f      	ldr	r0, [pc, #124]	@ (8001124 <toggle_pins+0x100>)
 80010a6:	f002 feb1 	bl	8003e0c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);  // PB1 LOW
 80010aa:	2200      	movs	r2, #0
 80010ac:	2102      	movs	r1, #2
 80010ae:	481d      	ldr	r0, [pc, #116]	@ (8001124 <toggle_pins+0x100>)
 80010b0:	f002 feac 	bl	8003e0c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);    // PB2 HIGH
 80010b4:	2201      	movs	r2, #1
 80010b6:	2104      	movs	r1, #4
 80010b8:	481a      	ldr	r0, [pc, #104]	@ (8001124 <toggle_pins+0x100>)
 80010ba:	f002 fea7 	bl	8003e0c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET); // PB10 HIGH
 80010be:	2201      	movs	r2, #1
 80010c0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010c4:	4817      	ldr	r0, [pc, #92]	@ (8001124 <toggle_pins+0x100>)
 80010c6:	f002 fea1 	bl	8003e0c <HAL_GPIO_WritePin>
            break;
 80010ca:	e015      	b.n	80010f8 <toggle_pins+0xd4>
        case 3:
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);  // PB0 HIGH
 80010cc:	2201      	movs	r2, #1
 80010ce:	2101      	movs	r1, #1
 80010d0:	4814      	ldr	r0, [pc, #80]	@ (8001124 <toggle_pins+0x100>)
 80010d2:	f002 fe9b 	bl	8003e0c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);  // PB1 LOW
 80010d6:	2200      	movs	r2, #0
 80010d8:	2102      	movs	r1, #2
 80010da:	4812      	ldr	r0, [pc, #72]	@ (8001124 <toggle_pins+0x100>)
 80010dc:	f002 fe96 	bl	8003e0c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);  // PB2 LOW
 80010e0:	2200      	movs	r2, #0
 80010e2:	2104      	movs	r1, #4
 80010e4:	480f      	ldr	r0, [pc, #60]	@ (8001124 <toggle_pins+0x100>)
 80010e6:	f002 fe91 	bl	8003e0c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);   // PB10 HIGH
 80010ea:	2201      	movs	r2, #1
 80010ec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010f0:	480c      	ldr	r0, [pc, #48]	@ (8001124 <toggle_pins+0x100>)
 80010f2:	f002 fe8b 	bl	8003e0c <HAL_GPIO_WritePin>
            break;
 80010f6:	bf00      	nop
    }

    state = (state + 1) % 4;
 80010f8:	4b09      	ldr	r3, [pc, #36]	@ (8001120 <toggle_pins+0xfc>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	3301      	adds	r3, #1
 80010fe:	425a      	negs	r2, r3
 8001100:	f003 0303 	and.w	r3, r3, #3
 8001104:	f002 0203 	and.w	r2, r2, #3
 8001108:	bf58      	it	pl
 800110a:	4253      	negpl	r3, r2
 800110c:	b2da      	uxtb	r2, r3
 800110e:	4b04      	ldr	r3, [pc, #16]	@ (8001120 <toggle_pins+0xfc>)
 8001110:	701a      	strb	r2, [r3, #0]

    HAL_Delay(1000);
 8001112:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001116:	f001 fa41 	bl	800259c <HAL_Delay>
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20011058 	.word	0x20011058
 8001124:	40020400 	.word	0x40020400

08001128 <read_ADC_voltage>:
#define INC_READ_ADC_VOLTAGE_H_
ADC_HandleTypeDef hadc1;

//TERMISTOR VCO TEMP PC2
float read_ADC_voltage(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
    uint32_t adcValue = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	607b      	str	r3, [r7, #4]

    HAL_ADC_Start(&hadc1);
 8001132:	4812      	ldr	r0, [pc, #72]	@ (800117c <read_ADC_voltage+0x54>)
 8001134:	f001 fa9a 	bl	800266c <HAL_ADC_Start>

    if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 8001138:	210a      	movs	r1, #10
 800113a:	4810      	ldr	r0, [pc, #64]	@ (800117c <read_ADC_voltage+0x54>)
 800113c:	f001 fb68 	bl	8002810 <HAL_ADC_PollForConversion>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d103      	bne.n	800114e <read_ADC_voltage+0x26>
    {
        adcValue = HAL_ADC_GetValue(&hadc1);
 8001146:	480d      	ldr	r0, [pc, #52]	@ (800117c <read_ADC_voltage+0x54>)
 8001148:	f001 fcfe 	bl	8002b48 <HAL_ADC_GetValue>
 800114c:	6078      	str	r0, [r7, #4]
    }

    float voltage = (float)adcValue * 3.3f / 4095.0f;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	ee07 3a90 	vmov	s15, r3
 8001154:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001158:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001180 <read_ADC_voltage+0x58>
 800115c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001160:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8001184 <read_ADC_voltage+0x5c>
 8001164:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001168:	edc7 7a00 	vstr	s15, [r7]
    return voltage;
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	ee07 3a90 	vmov	s15, r3
}
 8001172:	eeb0 0a67 	vmov.f32	s0, s15
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	200002f0 	.word	0x200002f0
 8001180:	40533333 	.word	0x40533333
 8001184:	457ff000 	.word	0x457ff000

08001188 <read_voltage>:

#ifndef INC_READ_VOLTAGE_H_
#define INC_READ_VOLTAGE_H_

// Funkcja odczytu napięcia dla danego kanału ADC (RSIA, RSIB)
float read_voltage(ADC_HandleTypeDef *hadc, uint32_t channel) {
 8001188:	b580      	push	{r7, lr}
 800118a:	b088      	sub	sp, #32
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
    ADC_ChannelConfTypeDef sConfig = {0};
 8001192:	f107 0308 	add.w	r3, r7, #8
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
 800119e:	60da      	str	r2, [r3, #12]
    sConfig.Channel = channel;
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	60bb      	str	r3, [r7, #8]

    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011a4:	2300      	movs	r3, #0
 80011a6:	613b      	str	r3, [r7, #16]

    if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK) {
 80011a8:	f107 0308 	add.w	r3, r7, #8
 80011ac:	4619      	mov	r1, r3
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f001 fcec 	bl	8002b8c <HAL_ADC_ConfigChannel>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <read_voltage+0x36>
        Error_Handler();
 80011ba:	f000 fdd3 	bl	8001d64 <Error_Handler>
    }


    HAL_ADC_Start(hadc);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f001 fa54 	bl	800266c <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY) == HAL_OK) {
 80011c4:	f04f 31ff 	mov.w	r1, #4294967295
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f001 fb21 	bl	8002810 <HAL_ADC_PollForConversion>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d11e      	bne.n	8001212 <read_voltage+0x8a>
        uint32_t adcValue = HAL_ADC_GetValue(hadc);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f001 fcb7 	bl	8002b48 <HAL_ADC_GetValue>
 80011da:	61f8      	str	r0, [r7, #28]
        float voltage = (adcValue * 3.3) / 4096;
 80011dc:	69f8      	ldr	r0, [r7, #28]
 80011de:	f7ff f9b1 	bl	8000544 <__aeabi_ui2d>
 80011e2:	a312      	add	r3, pc, #72	@ (adr r3, 800122c <read_voltage+0xa4>)
 80011e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e8:	f7ff fa26 	bl	8000638 <__aeabi_dmul>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	4610      	mov	r0, r2
 80011f2:	4619      	mov	r1, r3
 80011f4:	f04f 0200 	mov.w	r2, #0
 80011f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001228 <read_voltage+0xa0>)
 80011fa:	f7ff fb47 	bl	800088c <__aeabi_ddiv>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	4610      	mov	r0, r2
 8001204:	4619      	mov	r1, r3
 8001206:	f7ff fd0f 	bl	8000c28 <__aeabi_d2f>
 800120a:	4603      	mov	r3, r0
 800120c:	61bb      	str	r3, [r7, #24]
        return voltage;
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	e001      	b.n	8001216 <read_voltage+0x8e>
    }

    return 0;
 8001212:	f04f 0300 	mov.w	r3, #0
}
 8001216:	ee07 3a90 	vmov	s15, r3
 800121a:	eeb0 0a67 	vmov.f32	s0, s15
 800121e:	3720      	adds	r7, #32
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	f3af 8000 	nop.w
 8001228:	40b00000 	.word	0x40b00000
 800122c:	66666666 	.word	0x66666666
 8001230:	400a6666 	.word	0x400a6666
 8001234:	00000000 	.word	0x00000000

08001238 <measure_frequency>:

TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

//FREQ_MEAS_A PA6
float measure_frequency() {
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
    __HAL_TIM_SET_COUNTER(&htim2, 0);
 800123e:	4b1a      	ldr	r3, [pc, #104]	@ (80012a8 <measure_frequency+0x70>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2200      	movs	r2, #0
 8001244:	625a      	str	r2, [r3, #36]	@ 0x24


    HAL_TIM_Base_Start(&htim3);
 8001246:	4819      	ldr	r0, [pc, #100]	@ (80012ac <measure_frequency+0x74>)
 8001248:	f005 fa34 	bl	80066b4 <HAL_TIM_Base_Start>
    HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 800124c:	2100      	movs	r1, #0
 800124e:	4816      	ldr	r0, [pc, #88]	@ (80012a8 <measure_frequency+0x70>)
 8001250:	f005 fb5e 	bl	8006910 <HAL_TIM_IC_Start>

    HAL_Delay(1);
 8001254:	2001      	movs	r0, #1
 8001256:	f001 f9a1 	bl	800259c <HAL_Delay>


    uint32_t pulse_count = __HAL_TIM_GET_COUNTER(&htim2);
 800125a:	4b13      	ldr	r3, [pc, #76]	@ (80012a8 <measure_frequency+0x70>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001260:	607b      	str	r3, [r7, #4]

    float frequency = pulse_count / 0.0001;
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff f96e 	bl	8000544 <__aeabi_ui2d>
 8001268:	a30d      	add	r3, pc, #52	@ (adr r3, 80012a0 <measure_frequency+0x68>)
 800126a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126e:	f7ff fb0d 	bl	800088c <__aeabi_ddiv>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	4610      	mov	r0, r2
 8001278:	4619      	mov	r1, r3
 800127a:	f7ff fcd5 	bl	8000c28 <__aeabi_d2f>
 800127e:	4603      	mov	r3, r0
 8001280:	603b      	str	r3, [r7, #0]

    HAL_TIM_Base_Stop(&htim3);
 8001282:	480a      	ldr	r0, [pc, #40]	@ (80012ac <measure_frequency+0x74>)
 8001284:	f005 fa7e 	bl	8006784 <HAL_TIM_Base_Stop>
    HAL_TIM_IC_Stop(&htim2, TIM_CHANNEL_1);
 8001288:	2100      	movs	r1, #0
 800128a:	4807      	ldr	r0, [pc, #28]	@ (80012a8 <measure_frequency+0x70>)
 800128c:	f005 fc1c 	bl	8006ac8 <HAL_TIM_IC_Stop>
    return frequency;
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	ee07 3a90 	vmov	s15, r3

}
 8001296:	eeb0 0a67 	vmov.f32	s0, s15
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	eb1c432d 	.word	0xeb1c432d
 80012a4:	3f1a36e2 	.word	0x3f1a36e2
 80012a8:	20000338 	.word	0x20000338
 80012ac:	20000380 	.word	0x20000380

080012b0 <calculate_angles>:
typedef struct {
    float azimuth;
    float elevation;
} AngleResults;

AngleResults calculate_angles(float cos_alpha, float cos_beta) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08e      	sub	sp, #56	@ 0x38
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	ed87 0a03 	vstr	s0, [r7, #12]
 80012ba:	edc7 0a02 	vstr	s1, [r7, #8]
    AngleResults results;

    float cos_alpha_squared = cos_alpha * cos_alpha;
 80012be:	edd7 7a03 	vldr	s15, [r7, #12]
 80012c2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80012c6:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    float cos_beta_squared = cos_beta * cos_beta;
 80012ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80012ce:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80012d2:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    if (cos_alpha_squared + cos_beta_squared > 1.0f) {
 80012d6:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80012da:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80012de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80012e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ee:	dd0e      	ble.n	800130e <calculate_angles+0x5e>
        results.azimuth = 0.0f;
 80012f0:	f04f 0300 	mov.w	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
        results.elevation = 0.0f;
 80012f6:	f04f 0300 	mov.w	r3, #0
 80012fa:	61bb      	str	r3, [r7, #24]
        return results;
 80012fc:	f107 031c 	add.w	r3, r7, #28
 8001300:	f107 0214 	add.w	r2, r7, #20
 8001304:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001308:	e883 0003 	stmia.w	r3, {r0, r1}
 800130c:	e05b      	b.n	80013c6 <calculate_angles+0x116>
    }


    float x = cos_alpha;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float y = cos_beta;
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	62bb      	str	r3, [r7, #40]	@ 0x28
    float z = sqrtf(1.0f - cos_alpha_squared - cos_beta_squared);
 8001316:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800131a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800131e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001322:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001326:	ee77 7a67 	vsub.f32	s15, s14, s15
 800132a:	eeb0 0a67 	vmov.f32	s0, s15
 800132e:	f00f facf 	bl	80108d0 <sqrtf>
 8001332:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24


    results.azimuth = atan2f(x, y) * (180.0f / M_PI);
 8001336:	edd7 0a0a 	vldr	s1, [r7, #40]	@ 0x28
 800133a:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 800133e:	f00f fac5 	bl	80108cc <atan2f>
 8001342:	ee10 3a10 	vmov	r3, s0
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff f91e 	bl	8000588 <__aeabi_f2d>
 800134c:	a324      	add	r3, pc, #144	@ (adr r3, 80013e0 <calculate_angles+0x130>)
 800134e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001352:	f7ff f971 	bl	8000638 <__aeabi_dmul>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4610      	mov	r0, r2
 800135c:	4619      	mov	r1, r3
 800135e:	f7ff fc63 	bl	8000c28 <__aeabi_d2f>
 8001362:	4603      	mov	r3, r0
 8001364:	617b      	str	r3, [r7, #20]


    results.elevation = atan2f(z, sqrtf(x * x + y * y)) * (180.0f / M_PI);
 8001366:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800136a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800136e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001372:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001376:	ee77 7a27 	vadd.f32	s15, s14, s15
 800137a:	eeb0 0a67 	vmov.f32	s0, s15
 800137e:	f00f faa7 	bl	80108d0 <sqrtf>
 8001382:	eef0 7a40 	vmov.f32	s15, s0
 8001386:	eef0 0a67 	vmov.f32	s1, s15
 800138a:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 800138e:	f00f fa9d 	bl	80108cc <atan2f>
 8001392:	ee10 3a10 	vmov	r3, s0
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff f8f6 	bl	8000588 <__aeabi_f2d>
 800139c:	a310      	add	r3, pc, #64	@ (adr r3, 80013e0 <calculate_angles+0x130>)
 800139e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a2:	f7ff f949 	bl	8000638 <__aeabi_dmul>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	4610      	mov	r0, r2
 80013ac:	4619      	mov	r1, r3
 80013ae:	f7ff fc3b 	bl	8000c28 <__aeabi_d2f>
 80013b2:	4603      	mov	r3, r0
 80013b4:	61bb      	str	r3, [r7, #24]


    return results;
 80013b6:	f107 031c 	add.w	r3, r7, #28
 80013ba:	f107 0214 	add.w	r2, r7, #20
 80013be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013c2:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80013c6:	69fa      	ldr	r2, [r7, #28]
 80013c8:	6a3b      	ldr	r3, [r7, #32]
 80013ca:	ee07 2a10 	vmov	s14, r2
 80013ce:	ee07 3a90 	vmov	s15, r3
 80013d2:	eeb0 0a47 	vmov.f32	s0, s14
 80013d6:	eef0 0a67 	vmov.f32	s1, s15
 80013da:	3738      	adds	r7, #56	@ 0x38
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	1a63c1f8 	.word	0x1a63c1f8
 80013e4:	404ca5dc 	.word	0x404ca5dc

080013e8 <_write>:
        }
    }
}

int _write(int file, char *ptr, int len)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	f04f 33ff 	mov.w	r3, #4294967295
 80013fc:	68b9      	ldr	r1, [r7, #8]
 80013fe:	4804      	ldr	r0, [pc, #16]	@ (8001410 <_write+0x28>)
 8001400:	f006 fac2 	bl	8007988 <HAL_UART_Transmit>
    return len;
 8001404:	687b      	ldr	r3, [r7, #4]
}
 8001406:	4618      	mov	r0, r3
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	2000056c 	.word	0x2000056c

08001414 <HAL_ADC_ConvCpltCallback>:
}




void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC2) {
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a05      	ldr	r2, [pc, #20]	@ (8001438 <HAL_ADC_ConvCpltCallback+0x24>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d102      	bne.n	800142c <HAL_ADC_ConvCpltCallback+0x18>
        adc_ready = 1;  // Set a flag to indicate data is ready for processing
 8001426:	4b05      	ldr	r3, [pc, #20]	@ (800143c <HAL_ADC_ConvCpltCallback+0x28>)
 8001428:	2201      	movs	r2, #1
 800142a:	701a      	strb	r2, [r3, #0]
    }
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	40012100 	.word	0x40012100
 800143c:	200005b4 	.word	0x200005b4

08001440 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001444:	b08d      	sub	sp, #52	@ 0x34
 8001446:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001448:	f001 f836 	bl	80024b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800144c:	f000 f912 	bl	8001674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001450:	f000 fbec 	bl	8001c2c <MX_GPIO_Init>
  MX_DMA_Init();
 8001454:	f000 fbca 	bl	8001bec <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001458:	f000 fb9e 	bl	8001b98 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800145c:	f000 f978 	bl	8001750 <MX_ADC1_Init>
  MX_DAC_Init();
 8001460:	f000 fa6c 	bl	800193c <MX_DAC_Init>
  MX_SPI2_Init();
 8001464:	f000 fa9e 	bl	80019a4 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 8001468:	f00a f948 	bl	800b6fc <MX_USB_DEVICE_Init>
  MX_ADC2_Init();
 800146c:	f000 f9c2 	bl	80017f4 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001470:	f000 fa12 	bl	8001898 <MX_ADC3_Init>
  MX_TIM3_Init();
 8001474:	f000 facc 	bl	8001a10 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001478:	f000 fb28 	bl	8001acc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc2, (uint32_t *)adc_buffer, NUM_SAMPLES);
 800147c:	2280      	movs	r2, #128	@ 0x80
 800147e:	4976      	ldr	r1, [pc, #472]	@ (8001658 <main+0x218>)
 8001480:	4876      	ldr	r0, [pc, #472]	@ (800165c <main+0x21c>)
 8001482:	f001 fa51 	bl	8002928 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t num =0;
 8001486:	2300      	movs	r3, #0
 8001488:	75fb      	strb	r3, [r7, #23]
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 800148a:	2100      	movs	r1, #0
 800148c:	4874      	ldr	r0, [pc, #464]	@ (8001660 <main+0x220>)
 800148e:	f005 fb7d 	bl	8006b8c <HAL_TIM_IC_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  for (uint8_t pair = 0; pair < 4; pair++) {
 8001492:	2300      	movs	r3, #0
 8001494:	75bb      	strb	r3, [r7, #22]
 8001496:	e0d6      	b.n	8001646 <main+0x206>
		  toggle_pins();
 8001498:	f7ff fdc4 	bl	8001024 <toggle_pins>
		  measurements[num].phaseSettinggs[pair].voltage_measurements=read_ADC_voltage();
 800149c:	7dfc      	ldrb	r4, [r7, #23]
 800149e:	7dbd      	ldrb	r5, [r7, #22]
 80014a0:	f7ff fe42 	bl	8001128 <read_ADC_voltage>
 80014a4:	eef0 7a40 	vmov.f32	s15, s0
 80014a8:	496e      	ldr	r1, [pc, #440]	@ (8001664 <main+0x224>)
 80014aa:	012a      	lsls	r2, r5, #4
 80014ac:	4623      	mov	r3, r4
 80014ae:	011b      	lsls	r3, r3, #4
 80014b0:	4423      	add	r3, r4
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	4413      	add	r3, r2
 80014b6:	440b      	add	r3, r1
 80014b8:	330c      	adds	r3, #12
 80014ba:	edc3 7a00 	vstr	s15, [r3]
		  measurements[num].phaseSettinggs[pair].rsia=read_voltage(&hadc2, ADC_CHANNEL_0);
 80014be:	7dfc      	ldrb	r4, [r7, #23]
 80014c0:	7dbd      	ldrb	r5, [r7, #22]
 80014c2:	2100      	movs	r1, #0
 80014c4:	4865      	ldr	r0, [pc, #404]	@ (800165c <main+0x21c>)
 80014c6:	f7ff fe5f 	bl	8001188 <read_voltage>
 80014ca:	eef0 7a40 	vmov.f32	s15, s0
 80014ce:	4965      	ldr	r1, [pc, #404]	@ (8001664 <main+0x224>)
 80014d0:	012a      	lsls	r2, r5, #4
 80014d2:	4623      	mov	r3, r4
 80014d4:	011b      	lsls	r3, r3, #4
 80014d6:	4423      	add	r3, r4
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	4413      	add	r3, r2
 80014dc:	440b      	add	r3, r1
 80014de:	3304      	adds	r3, #4
 80014e0:	edc3 7a00 	vstr	s15, [r3]
		  measurements[num].phaseSettinggs[pair].rsib=read_voltage(&hadc3, ADC_CHANNEL_1);
 80014e4:	7dfc      	ldrb	r4, [r7, #23]
 80014e6:	7dbd      	ldrb	r5, [r7, #22]
 80014e8:	2101      	movs	r1, #1
 80014ea:	485f      	ldr	r0, [pc, #380]	@ (8001668 <main+0x228>)
 80014ec:	f7ff fe4c 	bl	8001188 <read_voltage>
 80014f0:	eef0 7a40 	vmov.f32	s15, s0
 80014f4:	495b      	ldr	r1, [pc, #364]	@ (8001664 <main+0x224>)
 80014f6:	012a      	lsls	r2, r5, #4
 80014f8:	4623      	mov	r3, r4
 80014fa:	011b      	lsls	r3, r3, #4
 80014fc:	4423      	add	r3, r4
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	440b      	add	r3, r1
 8001504:	3308      	adds	r3, #8
 8001506:	edc3 7a00 	vstr	s15, [r3]
		  measurements[num].phaseSettinggs[pair].frequency=measure_frequency();
 800150a:	7dfc      	ldrb	r4, [r7, #23]
 800150c:	7dbd      	ldrb	r5, [r7, #22]
 800150e:	f7ff fe93 	bl	8001238 <measure_frequency>
 8001512:	eef0 7a40 	vmov.f32	s15, s0
 8001516:	4953      	ldr	r1, [pc, #332]	@ (8001664 <main+0x224>)
 8001518:	012a      	lsls	r2, r5, #4
 800151a:	4623      	mov	r3, r4
 800151c:	011b      	lsls	r3, r3, #4
 800151e:	4423      	add	r3, r4
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	4413      	add	r3, r2
 8001524:	440b      	add	r3, r1
 8001526:	3310      	adds	r3, #16
 8001528:	edc3 7a00 	vstr	s15, [r3]
		  float max_voltage = 3.3f;
 800152c:	4b4f      	ldr	r3, [pc, #316]	@ (800166c <main+0x22c>)
 800152e:	613b      	str	r3, [r7, #16]
		  float cos_alpha = measurements[num].phaseSettinggs[pair].rsia / max_voltage;
 8001530:	7dfa      	ldrb	r2, [r7, #23]
 8001532:	7dbb      	ldrb	r3, [r7, #22]
 8001534:	484b      	ldr	r0, [pc, #300]	@ (8001664 <main+0x224>)
 8001536:	0119      	lsls	r1, r3, #4
 8001538:	4613      	mov	r3, r2
 800153a:	011b      	lsls	r3, r3, #4
 800153c:	4413      	add	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	440b      	add	r3, r1
 8001542:	4403      	add	r3, r0
 8001544:	3304      	adds	r3, #4
 8001546:	edd3 6a00 	vldr	s13, [r3]
 800154a:	ed97 7a04 	vldr	s14, [r7, #16]
 800154e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001552:	edc7 7a03 	vstr	s15, [r7, #12]
		  float cos_beta = measurements[num].phaseSettinggs[pair].rsib / max_voltage;
 8001556:	7dfa      	ldrb	r2, [r7, #23]
 8001558:	7dbb      	ldrb	r3, [r7, #22]
 800155a:	4842      	ldr	r0, [pc, #264]	@ (8001664 <main+0x224>)
 800155c:	0119      	lsls	r1, r3, #4
 800155e:	4613      	mov	r3, r2
 8001560:	011b      	lsls	r3, r3, #4
 8001562:	4413      	add	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	440b      	add	r3, r1
 8001568:	4403      	add	r3, r0
 800156a:	3308      	adds	r3, #8
 800156c:	edd3 6a00 	vldr	s13, [r3]
 8001570:	ed97 7a04 	vldr	s14, [r7, #16]
 8001574:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001578:	edc7 7a02 	vstr	s15, [r7, #8]
		  AngleResults angles = calculate_angles(cos_alpha, cos_beta);
 800157c:	edd7 0a02 	vldr	s1, [r7, #8]
 8001580:	ed97 0a03 	vldr	s0, [r7, #12]
 8001584:	f7ff fe94 	bl	80012b0 <calculate_angles>
 8001588:	eeb0 7a40 	vmov.f32	s14, s0
 800158c:	eef0 7a60 	vmov.f32	s15, s1
 8001590:	ed87 7a00 	vstr	s14, [r7]
 8001594:	edc7 7a01 	vstr	s15, [r7, #4]
		  printf("Pair %d: Detector=%.2f V, RSSI_A=%.2f V, RSSI_B=%.2f V, Frequency=%.2f Hz\n",
 8001598:	7dbe      	ldrb	r6, [r7, #22]
				  pair,
				  measurements[num].phaseSettinggs[pair].voltage_measurements,
 800159a:	7dfa      	ldrb	r2, [r7, #23]
 800159c:	7dbb      	ldrb	r3, [r7, #22]
 800159e:	4831      	ldr	r0, [pc, #196]	@ (8001664 <main+0x224>)
 80015a0:	0119      	lsls	r1, r3, #4
 80015a2:	4613      	mov	r3, r2
 80015a4:	011b      	lsls	r3, r3, #4
 80015a6:	4413      	add	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	440b      	add	r3, r1
 80015ac:	4403      	add	r3, r0
 80015ae:	330c      	adds	r3, #12
 80015b0:	681b      	ldr	r3, [r3, #0]
		  printf("Pair %d: Detector=%.2f V, RSSI_A=%.2f V, RSSI_B=%.2f V, Frequency=%.2f Hz\n",
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7fe ffe8 	bl	8000588 <__aeabi_f2d>
 80015b8:	4682      	mov	sl, r0
 80015ba:	468b      	mov	fp, r1
				  measurements[num].phaseSettinggs[pair].rsia,
 80015bc:	7dfa      	ldrb	r2, [r7, #23]
 80015be:	7dbb      	ldrb	r3, [r7, #22]
 80015c0:	4828      	ldr	r0, [pc, #160]	@ (8001664 <main+0x224>)
 80015c2:	0119      	lsls	r1, r3, #4
 80015c4:	4613      	mov	r3, r2
 80015c6:	011b      	lsls	r3, r3, #4
 80015c8:	4413      	add	r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	440b      	add	r3, r1
 80015ce:	4403      	add	r3, r0
 80015d0:	3304      	adds	r3, #4
 80015d2:	681b      	ldr	r3, [r3, #0]
		  printf("Pair %d: Detector=%.2f V, RSSI_A=%.2f V, RSSI_B=%.2f V, Frequency=%.2f Hz\n",
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7fe ffd7 	bl	8000588 <__aeabi_f2d>
 80015da:	4604      	mov	r4, r0
 80015dc:	460d      	mov	r5, r1
				  measurements[num].phaseSettinggs[pair].rsib,
 80015de:	7dfa      	ldrb	r2, [r7, #23]
 80015e0:	7dbb      	ldrb	r3, [r7, #22]
 80015e2:	4820      	ldr	r0, [pc, #128]	@ (8001664 <main+0x224>)
 80015e4:	0119      	lsls	r1, r3, #4
 80015e6:	4613      	mov	r3, r2
 80015e8:	011b      	lsls	r3, r3, #4
 80015ea:	4413      	add	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	440b      	add	r3, r1
 80015f0:	4403      	add	r3, r0
 80015f2:	3308      	adds	r3, #8
 80015f4:	681b      	ldr	r3, [r3, #0]
		  printf("Pair %d: Detector=%.2f V, RSSI_A=%.2f V, RSSI_B=%.2f V, Frequency=%.2f Hz\n",
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe ffc6 	bl	8000588 <__aeabi_f2d>
 80015fc:	4680      	mov	r8, r0
 80015fe:	4689      	mov	r9, r1
				  measurements[num].phaseSettinggs[pair].frequency
 8001600:	7dfa      	ldrb	r2, [r7, #23]
 8001602:	7dbb      	ldrb	r3, [r7, #22]
 8001604:	4817      	ldr	r0, [pc, #92]	@ (8001664 <main+0x224>)
 8001606:	0119      	lsls	r1, r3, #4
 8001608:	4613      	mov	r3, r2
 800160a:	011b      	lsls	r3, r3, #4
 800160c:	4413      	add	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	440b      	add	r3, r1
 8001612:	4403      	add	r3, r0
 8001614:	3310      	adds	r3, #16
 8001616:	681b      	ldr	r3, [r3, #0]
		  printf("Pair %d: Detector=%.2f V, RSSI_A=%.2f V, RSSI_B=%.2f V, Frequency=%.2f Hz\n",
 8001618:	4618      	mov	r0, r3
 800161a:	f7fe ffb5 	bl	8000588 <__aeabi_f2d>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001626:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800162a:	e9cd 4500 	strd	r4, r5, [sp]
 800162e:	4652      	mov	r2, sl
 8001630:	465b      	mov	r3, fp
 8001632:	4631      	mov	r1, r6
 8001634:	480e      	ldr	r0, [pc, #56]	@ (8001670 <main+0x230>)
 8001636:	f00b fcf9 	bl	800d02c <iprintf>
				  );

		  //set_servo_pwm(&htim4, TIM_CHANNEL_3, angles.azimuth);
		  //set_servo_pwm(&htim4, TIM_CHANNEL_4, angles.elevation);
		  HAL_Delay(100);
 800163a:	2064      	movs	r0, #100	@ 0x64
 800163c:	f000 ffae 	bl	800259c <HAL_Delay>
	  for (uint8_t pair = 0; pair < 4; pair++) {
 8001640:	7dbb      	ldrb	r3, [r7, #22]
 8001642:	3301      	adds	r3, #1
 8001644:	75bb      	strb	r3, [r7, #22]
 8001646:	7dbb      	ldrb	r3, [r7, #22]
 8001648:	2b03      	cmp	r3, #3
 800164a:	f67f af25 	bls.w	8001498 <main+0x58>
	  }
	  num++;
 800164e:	7dfb      	ldrb	r3, [r7, #23]
 8001650:	3301      	adds	r3, #1
 8001652:	75fb      	strb	r3, [r7, #23]
	  for (uint8_t pair = 0; pair < 4; pair++) {
 8001654:	e71d      	b.n	8001492 <main+0x52>
 8001656:	bf00      	nop
 8001658:	200005b8 	.word	0x200005b8
 800165c:	200003c8 	.word	0x200003c8
 8001660:	20000380 	.word	0x20000380
 8001664:	200006b8 	.word	0x200006b8
 8001668:	20000410 	.word	0x20000410
 800166c:	40533333 	.word	0x40533333
 8001670:	08010c90 	.word	0x08010c90

08001674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b094      	sub	sp, #80	@ 0x50
 8001678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800167a:	f107 031c 	add.w	r3, r7, #28
 800167e:	2234      	movs	r2, #52	@ 0x34
 8001680:	2100      	movs	r1, #0
 8001682:	4618      	mov	r0, r3
 8001684:	f00b fddc 	bl	800d240 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001688:	f107 0308 	add.w	r3, r7, #8
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001698:	2300      	movs	r3, #0
 800169a:	607b      	str	r3, [r7, #4]
 800169c:	4b2a      	ldr	r3, [pc, #168]	@ (8001748 <SystemClock_Config+0xd4>)
 800169e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a0:	4a29      	ldr	r2, [pc, #164]	@ (8001748 <SystemClock_Config+0xd4>)
 80016a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80016a8:	4b27      	ldr	r3, [pc, #156]	@ (8001748 <SystemClock_Config+0xd4>)
 80016aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016b0:	607b      	str	r3, [r7, #4]
 80016b2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80016b4:	2300      	movs	r3, #0
 80016b6:	603b      	str	r3, [r7, #0]
 80016b8:	4b24      	ldr	r3, [pc, #144]	@ (800174c <SystemClock_Config+0xd8>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80016c0:	4a22      	ldr	r2, [pc, #136]	@ (800174c <SystemClock_Config+0xd8>)
 80016c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016c6:	6013      	str	r3, [r2, #0]
 80016c8:	4b20      	ldr	r3, [pc, #128]	@ (800174c <SystemClock_Config+0xd8>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80016d0:	603b      	str	r3, [r7, #0]
 80016d2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016d4:	2301      	movs	r3, #1
 80016d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016dc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016de:	2302      	movs	r3, #2
 80016e0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016e2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80016e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80016e8:	2308      	movs	r3, #8
 80016ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80016ec:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80016f0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80016f2:	2304      	movs	r3, #4
 80016f4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80016f6:	2307      	movs	r3, #7
 80016f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016fa:	2302      	movs	r3, #2
 80016fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016fe:	f107 031c 	add.w	r3, r7, #28
 8001702:	4618      	mov	r0, r3
 8001704:	f004 fcae 	bl	8006064 <HAL_RCC_OscConfig>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800170e:	f000 fb29 	bl	8001d64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001712:	230f      	movs	r3, #15
 8001714:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001716:	2302      	movs	r3, #2
 8001718:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800171e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001722:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001724:	2300      	movs	r3, #0
 8001726:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001728:	f107 0308 	add.w	r3, r7, #8
 800172c:	2102      	movs	r1, #2
 800172e:	4618      	mov	r0, r3
 8001730:	f003 fe24 	bl	800537c <HAL_RCC_ClockConfig>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800173a:	f000 fb13 	bl	8001d64 <Error_Handler>
  }
}
 800173e:	bf00      	nop
 8001740:	3750      	adds	r7, #80	@ 0x50
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40023800 	.word	0x40023800
 800174c:	40007000 	.word	0x40007000

08001750 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001756:	463b      	mov	r3, r7
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001762:	4b21      	ldr	r3, [pc, #132]	@ (80017e8 <MX_ADC1_Init+0x98>)
 8001764:	4a21      	ldr	r2, [pc, #132]	@ (80017ec <MX_ADC1_Init+0x9c>)
 8001766:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001768:	4b1f      	ldr	r3, [pc, #124]	@ (80017e8 <MX_ADC1_Init+0x98>)
 800176a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800176e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001770:	4b1d      	ldr	r3, [pc, #116]	@ (80017e8 <MX_ADC1_Init+0x98>)
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001776:	4b1c      	ldr	r3, [pc, #112]	@ (80017e8 <MX_ADC1_Init+0x98>)
 8001778:	2200      	movs	r2, #0
 800177a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800177c:	4b1a      	ldr	r3, [pc, #104]	@ (80017e8 <MX_ADC1_Init+0x98>)
 800177e:	2200      	movs	r2, #0
 8001780:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001782:	4b19      	ldr	r3, [pc, #100]	@ (80017e8 <MX_ADC1_Init+0x98>)
 8001784:	2200      	movs	r2, #0
 8001786:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800178a:	4b17      	ldr	r3, [pc, #92]	@ (80017e8 <MX_ADC1_Init+0x98>)
 800178c:	2200      	movs	r2, #0
 800178e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001790:	4b15      	ldr	r3, [pc, #84]	@ (80017e8 <MX_ADC1_Init+0x98>)
 8001792:	4a17      	ldr	r2, [pc, #92]	@ (80017f0 <MX_ADC1_Init+0xa0>)
 8001794:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001796:	4b14      	ldr	r3, [pc, #80]	@ (80017e8 <MX_ADC1_Init+0x98>)
 8001798:	2200      	movs	r2, #0
 800179a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800179c:	4b12      	ldr	r3, [pc, #72]	@ (80017e8 <MX_ADC1_Init+0x98>)
 800179e:	2201      	movs	r2, #1
 80017a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017a2:	4b11      	ldr	r3, [pc, #68]	@ (80017e8 <MX_ADC1_Init+0x98>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017aa:	4b0f      	ldr	r3, [pc, #60]	@ (80017e8 <MX_ADC1_Init+0x98>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017b0:	480d      	ldr	r0, [pc, #52]	@ (80017e8 <MX_ADC1_Init+0x98>)
 80017b2:	f000 ff17 	bl	80025e4 <HAL_ADC_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80017bc:	f000 fad2 	bl	8001d64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80017c0:	230a      	movs	r3, #10
 80017c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80017c4:	2301      	movs	r3, #1
 80017c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80017c8:	2300      	movs	r3, #0
 80017ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017cc:	463b      	mov	r3, r7
 80017ce:	4619      	mov	r1, r3
 80017d0:	4805      	ldr	r0, [pc, #20]	@ (80017e8 <MX_ADC1_Init+0x98>)
 80017d2:	f001 f9db 	bl	8002b8c <HAL_ADC_ConfigChannel>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80017dc:	f000 fac2 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017e0:	bf00      	nop
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	200002f0 	.word	0x200002f0
 80017ec:	40012000 	.word	0x40012000
 80017f0:	0f000001 	.word	0x0f000001

080017f4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017fa:	463b      	mov	r3, r7
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001806:	4b21      	ldr	r3, [pc, #132]	@ (800188c <MX_ADC2_Init+0x98>)
 8001808:	4a21      	ldr	r2, [pc, #132]	@ (8001890 <MX_ADC2_Init+0x9c>)
 800180a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800180c:	4b1f      	ldr	r3, [pc, #124]	@ (800188c <MX_ADC2_Init+0x98>)
 800180e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001812:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001814:	4b1d      	ldr	r3, [pc, #116]	@ (800188c <MX_ADC2_Init+0x98>)
 8001816:	2200      	movs	r2, #0
 8001818:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800181a:	4b1c      	ldr	r3, [pc, #112]	@ (800188c <MX_ADC2_Init+0x98>)
 800181c:	2200      	movs	r2, #0
 800181e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001820:	4b1a      	ldr	r3, [pc, #104]	@ (800188c <MX_ADC2_Init+0x98>)
 8001822:	2201      	movs	r2, #1
 8001824:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001826:	4b19      	ldr	r3, [pc, #100]	@ (800188c <MX_ADC2_Init+0x98>)
 8001828:	2200      	movs	r2, #0
 800182a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800182e:	4b17      	ldr	r3, [pc, #92]	@ (800188c <MX_ADC2_Init+0x98>)
 8001830:	2200      	movs	r2, #0
 8001832:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001834:	4b15      	ldr	r3, [pc, #84]	@ (800188c <MX_ADC2_Init+0x98>)
 8001836:	4a17      	ldr	r2, [pc, #92]	@ (8001894 <MX_ADC2_Init+0xa0>)
 8001838:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800183a:	4b14      	ldr	r3, [pc, #80]	@ (800188c <MX_ADC2_Init+0x98>)
 800183c:	2200      	movs	r2, #0
 800183e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001840:	4b12      	ldr	r3, [pc, #72]	@ (800188c <MX_ADC2_Init+0x98>)
 8001842:	2201      	movs	r2, #1
 8001844:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001846:	4b11      	ldr	r3, [pc, #68]	@ (800188c <MX_ADC2_Init+0x98>)
 8001848:	2200      	movs	r2, #0
 800184a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800184e:	4b0f      	ldr	r3, [pc, #60]	@ (800188c <MX_ADC2_Init+0x98>)
 8001850:	2201      	movs	r2, #1
 8001852:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001854:	480d      	ldr	r0, [pc, #52]	@ (800188c <MX_ADC2_Init+0x98>)
 8001856:	f000 fec5 	bl	80025e4 <HAL_ADC_Init>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001860:	f000 fa80 	bl	8001d64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001864:	2300      	movs	r3, #0
 8001866:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001868:	2301      	movs	r3, #1
 800186a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800186c:	2300      	movs	r3, #0
 800186e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001870:	463b      	mov	r3, r7
 8001872:	4619      	mov	r1, r3
 8001874:	4805      	ldr	r0, [pc, #20]	@ (800188c <MX_ADC2_Init+0x98>)
 8001876:	f001 f989 	bl	8002b8c <HAL_ADC_ConfigChannel>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001880:	f000 fa70 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001884:	bf00      	nop
 8001886:	3710      	adds	r7, #16
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	200003c8 	.word	0x200003c8
 8001890:	40012100 	.word	0x40012100
 8001894:	0f000001 	.word	0x0f000001

08001898 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800189e:	463b      	mov	r3, r7
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80018aa:	4b21      	ldr	r3, [pc, #132]	@ (8001930 <MX_ADC3_Init+0x98>)
 80018ac:	4a21      	ldr	r2, [pc, #132]	@ (8001934 <MX_ADC3_Init+0x9c>)
 80018ae:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80018b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001930 <MX_ADC3_Init+0x98>)
 80018b2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80018b6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80018b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001930 <MX_ADC3_Init+0x98>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80018be:	4b1c      	ldr	r3, [pc, #112]	@ (8001930 <MX_ADC3_Init+0x98>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80018c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001930 <MX_ADC3_Init+0x98>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80018ca:	4b19      	ldr	r3, [pc, #100]	@ (8001930 <MX_ADC3_Init+0x98>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018d2:	4b17      	ldr	r3, [pc, #92]	@ (8001930 <MX_ADC3_Init+0x98>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018d8:	4b15      	ldr	r3, [pc, #84]	@ (8001930 <MX_ADC3_Init+0x98>)
 80018da:	4a17      	ldr	r2, [pc, #92]	@ (8001938 <MX_ADC3_Init+0xa0>)
 80018dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018de:	4b14      	ldr	r3, [pc, #80]	@ (8001930 <MX_ADC3_Init+0x98>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80018e4:	4b12      	ldr	r3, [pc, #72]	@ (8001930 <MX_ADC3_Init+0x98>)
 80018e6:	2201      	movs	r2, #1
 80018e8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80018ea:	4b11      	ldr	r3, [pc, #68]	@ (8001930 <MX_ADC3_Init+0x98>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001930 <MX_ADC3_Init+0x98>)
 80018f4:	2201      	movs	r2, #1
 80018f6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80018f8:	480d      	ldr	r0, [pc, #52]	@ (8001930 <MX_ADC3_Init+0x98>)
 80018fa:	f000 fe73 	bl	80025e4 <HAL_ADC_Init>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001904:	f000 fa2e 	bl	8001d64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001908:	2301      	movs	r3, #1
 800190a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800190c:	2301      	movs	r3, #1
 800190e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001910:	2300      	movs	r3, #0
 8001912:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001914:	463b      	mov	r3, r7
 8001916:	4619      	mov	r1, r3
 8001918:	4805      	ldr	r0, [pc, #20]	@ (8001930 <MX_ADC3_Init+0x98>)
 800191a:	f001 f937 	bl	8002b8c <HAL_ADC_ConfigChannel>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001924:	f000 fa1e 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001928:	bf00      	nop
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20000410 	.word	0x20000410
 8001934:	40012200 	.word	0x40012200
 8001938:	0f000001 	.word	0x0f000001

0800193c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001942:	463b      	mov	r3, r7
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800194a:	4b14      	ldr	r3, [pc, #80]	@ (800199c <MX_DAC_Init+0x60>)
 800194c:	4a14      	ldr	r2, [pc, #80]	@ (80019a0 <MX_DAC_Init+0x64>)
 800194e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001950:	4812      	ldr	r0, [pc, #72]	@ (800199c <MX_DAC_Init+0x60>)
 8001952:	f001 fcdc 	bl	800330e <HAL_DAC_Init>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800195c:	f000 fa02 	bl	8001d64 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001960:	2300      	movs	r3, #0
 8001962:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001964:	2300      	movs	r3, #0
 8001966:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001968:	463b      	mov	r3, r7
 800196a:	2200      	movs	r2, #0
 800196c:	4619      	mov	r1, r3
 800196e:	480b      	ldr	r0, [pc, #44]	@ (800199c <MX_DAC_Init+0x60>)
 8001970:	f001 fcef 	bl	8003352 <HAL_DAC_ConfigChannel>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800197a:	f000 f9f3 	bl	8001d64 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800197e:	463b      	mov	r3, r7
 8001980:	2210      	movs	r2, #16
 8001982:	4619      	mov	r1, r3
 8001984:	4805      	ldr	r0, [pc, #20]	@ (800199c <MX_DAC_Init+0x60>)
 8001986:	f001 fce4 	bl	8003352 <HAL_DAC_ConfigChannel>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8001990:	f000 f9e8 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001994:	bf00      	nop
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	200004b8 	.word	0x200004b8
 80019a0:	40007400 	.word	0x40007400

080019a4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80019a8:	4b17      	ldr	r3, [pc, #92]	@ (8001a08 <MX_SPI2_Init+0x64>)
 80019aa:	4a18      	ldr	r2, [pc, #96]	@ (8001a0c <MX_SPI2_Init+0x68>)
 80019ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80019ae:	4b16      	ldr	r3, [pc, #88]	@ (8001a08 <MX_SPI2_Init+0x64>)
 80019b0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80019b4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80019b6:	4b14      	ldr	r3, [pc, #80]	@ (8001a08 <MX_SPI2_Init+0x64>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80019bc:	4b12      	ldr	r3, [pc, #72]	@ (8001a08 <MX_SPI2_Init+0x64>)
 80019be:	2200      	movs	r2, #0
 80019c0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019c2:	4b11      	ldr	r3, [pc, #68]	@ (8001a08 <MX_SPI2_Init+0x64>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001a08 <MX_SPI2_Init+0x64>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80019ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001a08 <MX_SPI2_Init+0x64>)
 80019d0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80019d4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001a08 <MX_SPI2_Init+0x64>)
 80019d8:	2200      	movs	r2, #0
 80019da:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001a08 <MX_SPI2_Init+0x64>)
 80019de:	2200      	movs	r2, #0
 80019e0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80019e2:	4b09      	ldr	r3, [pc, #36]	@ (8001a08 <MX_SPI2_Init+0x64>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019e8:	4b07      	ldr	r3, [pc, #28]	@ (8001a08 <MX_SPI2_Init+0x64>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80019ee:	4b06      	ldr	r3, [pc, #24]	@ (8001a08 <MX_SPI2_Init+0x64>)
 80019f0:	220a      	movs	r2, #10
 80019f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80019f4:	4804      	ldr	r0, [pc, #16]	@ (8001a08 <MX_SPI2_Init+0x64>)
 80019f6:	f004 fdd3 	bl	80065a0 <HAL_SPI_Init>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001a00:	f000 f9b0 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a04:	bf00      	nop
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	200004cc 	.word	0x200004cc
 8001a0c:	40003800 	.word	0x40003800

08001a10 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a16:	f107 0310 	add.w	r3, r7, #16
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a20:	463b      	mov	r3, r7
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	609a      	str	r2, [r3, #8]
 8001a2a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a2c:	4b25      	ldr	r3, [pc, #148]	@ (8001ac4 <MX_TIM3_Init+0xb4>)
 8001a2e:	4a26      	ldr	r2, [pc, #152]	@ (8001ac8 <MX_TIM3_Init+0xb8>)
 8001a30:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a32:	4b24      	ldr	r3, [pc, #144]	@ (8001ac4 <MX_TIM3_Init+0xb4>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a38:	4b22      	ldr	r3, [pc, #136]	@ (8001ac4 <MX_TIM3_Init+0xb4>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001a3e:	4b21      	ldr	r3, [pc, #132]	@ (8001ac4 <MX_TIM3_Init+0xb4>)
 8001a40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a44:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a46:	4b1f      	ldr	r3, [pc, #124]	@ (8001ac4 <MX_TIM3_Init+0xb4>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a4c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ac4 <MX_TIM3_Init+0xb4>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001a52:	481c      	ldr	r0, [pc, #112]	@ (8001ac4 <MX_TIM3_Init+0xb4>)
 8001a54:	f004 ff0c 	bl	8006870 <HAL_TIM_IC_Init>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001a5e:	f000 f981 	bl	8001d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a62:	2300      	movs	r3, #0
 8001a64:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a6a:	f107 0310 	add.w	r3, r7, #16
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4814      	ldr	r0, [pc, #80]	@ (8001ac4 <MX_TIM3_Init+0xb4>)
 8001a72:	f005 febd 	bl	80077f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001a7c:	f000 f972 	bl	8001d64 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001a80:	2300      	movs	r3, #0
 8001a82:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001a84:	2301      	movs	r3, #1
 8001a86:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001a90:	463b      	mov	r3, r7
 8001a92:	2200      	movs	r2, #0
 8001a94:	4619      	mov	r1, r3
 8001a96:	480b      	ldr	r0, [pc, #44]	@ (8001ac4 <MX_TIM3_Init+0xb4>)
 8001a98:	f005 f9a0 	bl	8006ddc <HAL_TIM_IC_ConfigChannel>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001aa2:	f000 f95f 	bl	8001d64 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001aa6:	463b      	mov	r3, r7
 8001aa8:	2204      	movs	r2, #4
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4805      	ldr	r0, [pc, #20]	@ (8001ac4 <MX_TIM3_Init+0xb4>)
 8001aae:	f005 f995 	bl	8006ddc <HAL_TIM_IC_ConfigChannel>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8001ab8:	f000 f954 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001abc:	bf00      	nop
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	20000380 	.word	0x20000380
 8001ac8:	40000400 	.word	0x40000400

08001acc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08a      	sub	sp, #40	@ 0x28
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad2:	f107 0320 	add.w	r3, r7, #32
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001adc:	1d3b      	adds	r3, r7, #4
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	605a      	str	r2, [r3, #4]
 8001ae4:	609a      	str	r2, [r3, #8]
 8001ae6:	60da      	str	r2, [r3, #12]
 8001ae8:	611a      	str	r2, [r3, #16]
 8001aea:	615a      	str	r2, [r3, #20]
 8001aec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001aee:	4b28      	ldr	r3, [pc, #160]	@ (8001b90 <MX_TIM4_Init+0xc4>)
 8001af0:	4a28      	ldr	r2, [pc, #160]	@ (8001b94 <MX_TIM4_Init+0xc8>)
 8001af2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8001af4:	4b26      	ldr	r3, [pc, #152]	@ (8001b90 <MX_TIM4_Init+0xc4>)
 8001af6:	2253      	movs	r2, #83	@ 0x53
 8001af8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001afa:	4b25      	ldr	r3, [pc, #148]	@ (8001b90 <MX_TIM4_Init+0xc4>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8001b00:	4b23      	ldr	r3, [pc, #140]	@ (8001b90 <MX_TIM4_Init+0xc4>)
 8001b02:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001b06:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b08:	4b21      	ldr	r3, [pc, #132]	@ (8001b90 <MX_TIM4_Init+0xc4>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b0e:	4b20      	ldr	r3, [pc, #128]	@ (8001b90 <MX_TIM4_Init+0xc4>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001b14:	481e      	ldr	r0, [pc, #120]	@ (8001b90 <MX_TIM4_Init+0xc4>)
 8001b16:	f004 fe5c 	bl	80067d2 <HAL_TIM_PWM_Init>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001b20:	f000 f920 	bl	8001d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b24:	2300      	movs	r3, #0
 8001b26:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b2c:	f107 0320 	add.w	r3, r7, #32
 8001b30:	4619      	mov	r1, r3
 8001b32:	4817      	ldr	r0, [pc, #92]	@ (8001b90 <MX_TIM4_Init+0xc4>)
 8001b34:	f005 fe5c 	bl	80077f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001b3e:	f000 f911 	bl	8001d64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b42:	2360      	movs	r3, #96	@ 0x60
 8001b44:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10000;
 8001b46:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001b4a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b54:	1d3b      	adds	r3, r7, #4
 8001b56:	2208      	movs	r2, #8
 8001b58:	4619      	mov	r1, r3
 8001b5a:	480d      	ldr	r0, [pc, #52]	@ (8001b90 <MX_TIM4_Init+0xc4>)
 8001b5c:	f005 f9da 	bl	8006f14 <HAL_TIM_PWM_ConfigChannel>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001b66:	f000 f8fd 	bl	8001d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b6a:	1d3b      	adds	r3, r7, #4
 8001b6c:	220c      	movs	r2, #12
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4807      	ldr	r0, [pc, #28]	@ (8001b90 <MX_TIM4_Init+0xc4>)
 8001b72:	f005 f9cf 	bl	8006f14 <HAL_TIM_PWM_ConfigChannel>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001b7c:	f000 f8f2 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001b80:	4803      	ldr	r0, [pc, #12]	@ (8001b90 <MX_TIM4_Init+0xc4>)
 8001b82:	f000 faed 	bl	8002160 <HAL_TIM_MspPostInit>

}
 8001b86:	bf00      	nop
 8001b88:	3728      	adds	r7, #40	@ 0x28
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000524 	.word	0x20000524
 8001b94:	40000800 	.word	0x40000800

08001b98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b9c:	4b11      	ldr	r3, [pc, #68]	@ (8001be4 <MX_USART2_UART_Init+0x4c>)
 8001b9e:	4a12      	ldr	r2, [pc, #72]	@ (8001be8 <MX_USART2_UART_Init+0x50>)
 8001ba0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ba2:	4b10      	ldr	r3, [pc, #64]	@ (8001be4 <MX_USART2_UART_Init+0x4c>)
 8001ba4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ba8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001baa:	4b0e      	ldr	r3, [pc, #56]	@ (8001be4 <MX_USART2_UART_Init+0x4c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001be4 <MX_USART2_UART_Init+0x4c>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8001be4 <MX_USART2_UART_Init+0x4c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bbc:	4b09      	ldr	r3, [pc, #36]	@ (8001be4 <MX_USART2_UART_Init+0x4c>)
 8001bbe:	220c      	movs	r2, #12
 8001bc0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bc2:	4b08      	ldr	r3, [pc, #32]	@ (8001be4 <MX_USART2_UART_Init+0x4c>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bc8:	4b06      	ldr	r3, [pc, #24]	@ (8001be4 <MX_USART2_UART_Init+0x4c>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bce:	4805      	ldr	r0, [pc, #20]	@ (8001be4 <MX_USART2_UART_Init+0x4c>)
 8001bd0:	f005 fe8a 	bl	80078e8 <HAL_UART_Init>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bda:	f000 f8c3 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	2000056c 	.word	0x2000056c
 8001be8:	40004400 	.word	0x40004400

08001bec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	607b      	str	r3, [r7, #4]
 8001bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8001c28 <MX_DMA_Init+0x3c>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfa:	4a0b      	ldr	r2, [pc, #44]	@ (8001c28 <MX_DMA_Init+0x3c>)
 8001bfc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c02:	4b09      	ldr	r3, [pc, #36]	@ (8001c28 <MX_DMA_Init+0x3c>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c0a:	607b      	str	r3, [r7, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2100      	movs	r1, #0
 8001c12:	203a      	movs	r0, #58	@ 0x3a
 8001c14:	f001 fb45 	bl	80032a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001c18:	203a      	movs	r0, #58	@ 0x3a
 8001c1a:	f001 fb5e 	bl	80032da <HAL_NVIC_EnableIRQ>

}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40023800 	.word	0x40023800

08001c2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08a      	sub	sp, #40	@ 0x28
 8001c30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c32:	f107 0314 	add.w	r3, r7, #20
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	605a      	str	r2, [r3, #4]
 8001c3c:	609a      	str	r2, [r3, #8]
 8001c3e:	60da      	str	r2, [r3, #12]
 8001c40:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	613b      	str	r3, [r7, #16]
 8001c46:	4b43      	ldr	r3, [pc, #268]	@ (8001d54 <MX_GPIO_Init+0x128>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4a:	4a42      	ldr	r2, [pc, #264]	@ (8001d54 <MX_GPIO_Init+0x128>)
 8001c4c:	f043 0304 	orr.w	r3, r3, #4
 8001c50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c52:	4b40      	ldr	r3, [pc, #256]	@ (8001d54 <MX_GPIO_Init+0x128>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c56:	f003 0304 	and.w	r3, r3, #4
 8001c5a:	613b      	str	r3, [r7, #16]
 8001c5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	4b3c      	ldr	r3, [pc, #240]	@ (8001d54 <MX_GPIO_Init+0x128>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c66:	4a3b      	ldr	r2, [pc, #236]	@ (8001d54 <MX_GPIO_Init+0x128>)
 8001c68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c6e:	4b39      	ldr	r3, [pc, #228]	@ (8001d54 <MX_GPIO_Init+0x128>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60bb      	str	r3, [r7, #8]
 8001c7e:	4b35      	ldr	r3, [pc, #212]	@ (8001d54 <MX_GPIO_Init+0x128>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c82:	4a34      	ldr	r2, [pc, #208]	@ (8001d54 <MX_GPIO_Init+0x128>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c8a:	4b32      	ldr	r3, [pc, #200]	@ (8001d54 <MX_GPIO_Init+0x128>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	60bb      	str	r3, [r7, #8]
 8001c94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	607b      	str	r3, [r7, #4]
 8001c9a:	4b2e      	ldr	r3, [pc, #184]	@ (8001d54 <MX_GPIO_Init+0x128>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9e:	4a2d      	ldr	r2, [pc, #180]	@ (8001d54 <MX_GPIO_Init+0x128>)
 8001ca0:	f043 0302 	orr.w	r3, r3, #2
 8001ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ca6:	4b2b      	ldr	r3, [pc, #172]	@ (8001d54 <MX_GPIO_Init+0x128>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	607b      	str	r3, [r7, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f240 4117 	movw	r1, #1047	@ 0x417
 8001cb8:	4827      	ldr	r0, [pc, #156]	@ (8001d58 <MX_GPIO_Init+0x12c>)
 8001cba:	f002 f8a7 	bl	8003e0c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_12, GPIO_PIN_RESET);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f44f 519c 	mov.w	r1, #4992	@ 0x1380
 8001cc4:	4825      	ldr	r0, [pc, #148]	@ (8001d5c <MX_GPIO_Init+0x130>)
 8001cc6:	f002 f8a1 	bl	8003e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8001cd0:	4823      	ldr	r0, [pc, #140]	@ (8001d60 <MX_GPIO_Init+0x134>)
 8001cd2:	f002 f89b 	bl	8003e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001cd6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001cdc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001ce0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ce6:	f107 0314 	add.w	r3, r7, #20
 8001cea:	4619      	mov	r1, r3
 8001cec:	481b      	ldr	r0, [pc, #108]	@ (8001d5c <MX_GPIO_Init+0x130>)
 8001cee:	f001 fef9 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001cf2:	f240 4317 	movw	r3, #1047	@ 0x417
 8001cf6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d00:	2300      	movs	r3, #0
 8001d02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d04:	f107 0314 	add.w	r3, r7, #20
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4813      	ldr	r0, [pc, #76]	@ (8001d58 <MX_GPIO_Init+0x12c>)
 8001d0c:	f001 feea 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC8 PC9 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_12;
 8001d10:	f44f 539c 	mov.w	r3, #4992	@ 0x1380
 8001d14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d16:	2301      	movs	r3, #1
 8001d18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d22:	f107 0314 	add.w	r3, r7, #20
 8001d26:	4619      	mov	r1, r3
 8001d28:	480c      	ldr	r0, [pc, #48]	@ (8001d5c <MX_GPIO_Init+0x130>)
 8001d2a:	f001 fedb 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001d2e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001d32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d34:	2301      	movs	r3, #1
 8001d36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d40:	f107 0314 	add.w	r3, r7, #20
 8001d44:	4619      	mov	r1, r3
 8001d46:	4806      	ldr	r0, [pc, #24]	@ (8001d60 <MX_GPIO_Init+0x134>)
 8001d48:	f001 fecc 	bl	8003ae4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d4c:	bf00      	nop
 8001d4e:	3728      	adds	r7, #40	@ 0x28
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40023800 	.word	0x40023800
 8001d58:	40020400 	.word	0x40020400
 8001d5c:	40020800 	.word	0x40020800
 8001d60:	40020000 	.word	0x40020000

08001d64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d68:	b672      	cpsid	i
}
 8001d6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d6c:	bf00      	nop
 8001d6e:	e7fd      	b.n	8001d6c <Error_Handler+0x8>

08001d70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	607b      	str	r3, [r7, #4]
 8001d7a:	4b10      	ldr	r3, [pc, #64]	@ (8001dbc <HAL_MspInit+0x4c>)
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d7e:	4a0f      	ldr	r2, [pc, #60]	@ (8001dbc <HAL_MspInit+0x4c>)
 8001d80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d86:	4b0d      	ldr	r3, [pc, #52]	@ (8001dbc <HAL_MspInit+0x4c>)
 8001d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d8e:	607b      	str	r3, [r7, #4]
 8001d90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	603b      	str	r3, [r7, #0]
 8001d96:	4b09      	ldr	r3, [pc, #36]	@ (8001dbc <HAL_MspInit+0x4c>)
 8001d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9a:	4a08      	ldr	r2, [pc, #32]	@ (8001dbc <HAL_MspInit+0x4c>)
 8001d9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001da0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001da2:	4b06      	ldr	r3, [pc, #24]	@ (8001dbc <HAL_MspInit+0x4c>)
 8001da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001daa:	603b      	str	r3, [r7, #0]
 8001dac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001dae:	2007      	movs	r0, #7
 8001db0:	f001 fa6c 	bl	800328c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001db4:	bf00      	nop
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40023800 	.word	0x40023800

08001dc0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08e      	sub	sp, #56	@ 0x38
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
 8001dd6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a5d      	ldr	r2, [pc, #372]	@ (8001f54 <HAL_ADC_MspInit+0x194>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d128      	bne.n	8001e34 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	623b      	str	r3, [r7, #32]
 8001de6:	4b5c      	ldr	r3, [pc, #368]	@ (8001f58 <HAL_ADC_MspInit+0x198>)
 8001de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dea:	4a5b      	ldr	r2, [pc, #364]	@ (8001f58 <HAL_ADC_MspInit+0x198>)
 8001dec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001df0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001df2:	4b59      	ldr	r3, [pc, #356]	@ (8001f58 <HAL_ADC_MspInit+0x198>)
 8001df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dfa:	623b      	str	r3, [r7, #32]
 8001dfc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	61fb      	str	r3, [r7, #28]
 8001e02:	4b55      	ldr	r3, [pc, #340]	@ (8001f58 <HAL_ADC_MspInit+0x198>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e06:	4a54      	ldr	r2, [pc, #336]	@ (8001f58 <HAL_ADC_MspInit+0x198>)
 8001e08:	f043 0304 	orr.w	r3, r3, #4
 8001e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e0e:	4b52      	ldr	r3, [pc, #328]	@ (8001f58 <HAL_ADC_MspInit+0x198>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e12:	f003 0304 	and.w	r3, r3, #4
 8001e16:	61fb      	str	r3, [r7, #28]
 8001e18:	69fb      	ldr	r3, [r7, #28]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001e1a:	230f      	movs	r3, #15
 8001e1c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	484b      	ldr	r0, [pc, #300]	@ (8001f5c <HAL_ADC_MspInit+0x19c>)
 8001e2e:	f001 fe59 	bl	8003ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001e32:	e08a      	b.n	8001f4a <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC2)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a49      	ldr	r2, [pc, #292]	@ (8001f60 <HAL_ADC_MspInit+0x1a0>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d158      	bne.n	8001ef0 <HAL_ADC_MspInit+0x130>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61bb      	str	r3, [r7, #24]
 8001e42:	4b45      	ldr	r3, [pc, #276]	@ (8001f58 <HAL_ADC_MspInit+0x198>)
 8001e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e46:	4a44      	ldr	r2, [pc, #272]	@ (8001f58 <HAL_ADC_MspInit+0x198>)
 8001e48:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e4e:	4b42      	ldr	r3, [pc, #264]	@ (8001f58 <HAL_ADC_MspInit+0x198>)
 8001e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e56:	61bb      	str	r3, [r7, #24]
 8001e58:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	617b      	str	r3, [r7, #20]
 8001e5e:	4b3e      	ldr	r3, [pc, #248]	@ (8001f58 <HAL_ADC_MspInit+0x198>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e62:	4a3d      	ldr	r2, [pc, #244]	@ (8001f58 <HAL_ADC_MspInit+0x198>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e6a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f58 <HAL_ADC_MspInit+0x198>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	617b      	str	r3, [r7, #20]
 8001e74:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e76:	2301      	movs	r3, #1
 8001e78:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e86:	4619      	mov	r1, r3
 8001e88:	4836      	ldr	r0, [pc, #216]	@ (8001f64 <HAL_ADC_MspInit+0x1a4>)
 8001e8a:	f001 fe2b 	bl	8003ae4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8001e8e:	4b36      	ldr	r3, [pc, #216]	@ (8001f68 <HAL_ADC_MspInit+0x1a8>)
 8001e90:	4a36      	ldr	r2, [pc, #216]	@ (8001f6c <HAL_ADC_MspInit+0x1ac>)
 8001e92:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8001e94:	4b34      	ldr	r3, [pc, #208]	@ (8001f68 <HAL_ADC_MspInit+0x1a8>)
 8001e96:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e9a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e9c:	4b32      	ldr	r3, [pc, #200]	@ (8001f68 <HAL_ADC_MspInit+0x1a8>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ea2:	4b31      	ldr	r3, [pc, #196]	@ (8001f68 <HAL_ADC_MspInit+0x1a8>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001ea8:	4b2f      	ldr	r3, [pc, #188]	@ (8001f68 <HAL_ADC_MspInit+0x1a8>)
 8001eaa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001eae:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001eb0:	4b2d      	ldr	r3, [pc, #180]	@ (8001f68 <HAL_ADC_MspInit+0x1a8>)
 8001eb2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001eb6:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001eb8:	4b2b      	ldr	r3, [pc, #172]	@ (8001f68 <HAL_ADC_MspInit+0x1a8>)
 8001eba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ebe:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8001ec0:	4b29      	ldr	r3, [pc, #164]	@ (8001f68 <HAL_ADC_MspInit+0x1a8>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001ec6:	4b28      	ldr	r3, [pc, #160]	@ (8001f68 <HAL_ADC_MspInit+0x1a8>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ecc:	4b26      	ldr	r3, [pc, #152]	@ (8001f68 <HAL_ADC_MspInit+0x1a8>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001ed2:	4825      	ldr	r0, [pc, #148]	@ (8001f68 <HAL_ADC_MspInit+0x1a8>)
 8001ed4:	f001 fa96 	bl	8003404 <HAL_DMA_Init>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_ADC_MspInit+0x122>
      Error_Handler();
 8001ede:	f7ff ff41 	bl	8001d64 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a20      	ldr	r2, [pc, #128]	@ (8001f68 <HAL_ADC_MspInit+0x1a8>)
 8001ee6:	639a      	str	r2, [r3, #56]	@ 0x38
 8001ee8:	4a1f      	ldr	r2, [pc, #124]	@ (8001f68 <HAL_ADC_MspInit+0x1a8>)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001eee:	e02c      	b.n	8001f4a <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a1e      	ldr	r2, [pc, #120]	@ (8001f70 <HAL_ADC_MspInit+0x1b0>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d127      	bne.n	8001f4a <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	613b      	str	r3, [r7, #16]
 8001efe:	4b16      	ldr	r3, [pc, #88]	@ (8001f58 <HAL_ADC_MspInit+0x198>)
 8001f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f02:	4a15      	ldr	r2, [pc, #84]	@ (8001f58 <HAL_ADC_MspInit+0x198>)
 8001f04:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f08:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f0a:	4b13      	ldr	r3, [pc, #76]	@ (8001f58 <HAL_ADC_MspInit+0x198>)
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f12:	613b      	str	r3, [r7, #16]
 8001f14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	4b0f      	ldr	r3, [pc, #60]	@ (8001f58 <HAL_ADC_MspInit+0x198>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1e:	4a0e      	ldr	r2, [pc, #56]	@ (8001f58 <HAL_ADC_MspInit+0x198>)
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f26:	4b0c      	ldr	r3, [pc, #48]	@ (8001f58 <HAL_ADC_MspInit+0x198>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001f32:	2302      	movs	r3, #2
 8001f34:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f36:	2303      	movs	r3, #3
 8001f38:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f42:	4619      	mov	r1, r3
 8001f44:	4807      	ldr	r0, [pc, #28]	@ (8001f64 <HAL_ADC_MspInit+0x1a4>)
 8001f46:	f001 fdcd 	bl	8003ae4 <HAL_GPIO_Init>
}
 8001f4a:	bf00      	nop
 8001f4c:	3738      	adds	r7, #56	@ 0x38
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40012000 	.word	0x40012000
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	40020800 	.word	0x40020800
 8001f60:	40012100 	.word	0x40012100
 8001f64:	40020000 	.word	0x40020000
 8001f68:	20000458 	.word	0x20000458
 8001f6c:	40026440 	.word	0x40026440
 8001f70:	40012200 	.word	0x40012200

08001f74 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08a      	sub	sp, #40	@ 0x28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7c:	f107 0314 	add.w	r3, r7, #20
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a17      	ldr	r2, [pc, #92]	@ (8001ff0 <HAL_DAC_MspInit+0x7c>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d127      	bne.n	8001fe6 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	613b      	str	r3, [r7, #16]
 8001f9a:	4b16      	ldr	r3, [pc, #88]	@ (8001ff4 <HAL_DAC_MspInit+0x80>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9e:	4a15      	ldr	r2, [pc, #84]	@ (8001ff4 <HAL_DAC_MspInit+0x80>)
 8001fa0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001fa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fa6:	4b13      	ldr	r3, [pc, #76]	@ (8001ff4 <HAL_DAC_MspInit+0x80>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001faa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001fae:	613b      	str	r3, [r7, #16]
 8001fb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	4b0f      	ldr	r3, [pc, #60]	@ (8001ff4 <HAL_DAC_MspInit+0x80>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fba:	4a0e      	ldr	r2, [pc, #56]	@ (8001ff4 <HAL_DAC_MspInit+0x80>)
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff4 <HAL_DAC_MspInit+0x80>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001fce:	2330      	movs	r3, #48	@ 0x30
 8001fd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fda:	f107 0314 	add.w	r3, r7, #20
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4805      	ldr	r0, [pc, #20]	@ (8001ff8 <HAL_DAC_MspInit+0x84>)
 8001fe2:	f001 fd7f 	bl	8003ae4 <HAL_GPIO_Init>

  /* USER CODE END DAC_MspInit 1 */

  }

}
 8001fe6:	bf00      	nop
 8001fe8:	3728      	adds	r7, #40	@ 0x28
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40007400 	.word	0x40007400
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	40020000 	.word	0x40020000

08001ffc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b08a      	sub	sp, #40	@ 0x28
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002004:	f107 0314 	add.w	r3, r7, #20
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	605a      	str	r2, [r3, #4]
 800200e:	609a      	str	r2, [r3, #8]
 8002010:	60da      	str	r2, [r3, #12]
 8002012:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a19      	ldr	r2, [pc, #100]	@ (8002080 <HAL_SPI_MspInit+0x84>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d12c      	bne.n	8002078 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	613b      	str	r3, [r7, #16]
 8002022:	4b18      	ldr	r3, [pc, #96]	@ (8002084 <HAL_SPI_MspInit+0x88>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002026:	4a17      	ldr	r2, [pc, #92]	@ (8002084 <HAL_SPI_MspInit+0x88>)
 8002028:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800202c:	6413      	str	r3, [r2, #64]	@ 0x40
 800202e:	4b15      	ldr	r3, [pc, #84]	@ (8002084 <HAL_SPI_MspInit+0x88>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002032:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002036:	613b      	str	r3, [r7, #16]
 8002038:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	4b11      	ldr	r3, [pc, #68]	@ (8002084 <HAL_SPI_MspInit+0x88>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002042:	4a10      	ldr	r2, [pc, #64]	@ (8002084 <HAL_SPI_MspInit+0x88>)
 8002044:	f043 0302 	orr.w	r3, r3, #2
 8002048:	6313      	str	r3, [r2, #48]	@ 0x30
 800204a:	4b0e      	ldr	r3, [pc, #56]	@ (8002084 <HAL_SPI_MspInit+0x88>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002056:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800205a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205c:	2302      	movs	r3, #2
 800205e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002060:	2300      	movs	r3, #0
 8002062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002064:	2303      	movs	r3, #3
 8002066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002068:	2305      	movs	r3, #5
 800206a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800206c:	f107 0314 	add.w	r3, r7, #20
 8002070:	4619      	mov	r1, r3
 8002072:	4805      	ldr	r0, [pc, #20]	@ (8002088 <HAL_SPI_MspInit+0x8c>)
 8002074:	f001 fd36 	bl	8003ae4 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002078:	bf00      	nop
 800207a:	3728      	adds	r7, #40	@ 0x28
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40003800 	.word	0x40003800
 8002084:	40023800 	.word	0x40023800
 8002088:	40020400 	.word	0x40020400

0800208c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b08a      	sub	sp, #40	@ 0x28
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002094:	f107 0314 	add.w	r3, r7, #20
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	60da      	str	r2, [r3, #12]
 80020a2:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a19      	ldr	r2, [pc, #100]	@ (8002110 <HAL_TIM_IC_MspInit+0x84>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d12b      	bne.n	8002106 <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	613b      	str	r3, [r7, #16]
 80020b2:	4b18      	ldr	r3, [pc, #96]	@ (8002114 <HAL_TIM_IC_MspInit+0x88>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b6:	4a17      	ldr	r2, [pc, #92]	@ (8002114 <HAL_TIM_IC_MspInit+0x88>)
 80020b8:	f043 0302 	orr.w	r3, r3, #2
 80020bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80020be:	4b15      	ldr	r3, [pc, #84]	@ (8002114 <HAL_TIM_IC_MspInit+0x88>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	613b      	str	r3, [r7, #16]
 80020c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	4b11      	ldr	r3, [pc, #68]	@ (8002114 <HAL_TIM_IC_MspInit+0x88>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d2:	4a10      	ldr	r2, [pc, #64]	@ (8002114 <HAL_TIM_IC_MspInit+0x88>)
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020da:	4b0e      	ldr	r3, [pc, #56]	@ (8002114 <HAL_TIM_IC_MspInit+0x88>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020e6:	23c0      	movs	r3, #192	@ 0xc0
 80020e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ea:	2302      	movs	r3, #2
 80020ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f2:	2300      	movs	r3, #0
 80020f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020f6:	2302      	movs	r3, #2
 80020f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020fa:	f107 0314 	add.w	r3, r7, #20
 80020fe:	4619      	mov	r1, r3
 8002100:	4805      	ldr	r0, [pc, #20]	@ (8002118 <HAL_TIM_IC_MspInit+0x8c>)
 8002102:	f001 fcef 	bl	8003ae4 <HAL_GPIO_Init>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002106:	bf00      	nop
 8002108:	3728      	adds	r7, #40	@ 0x28
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40000400 	.word	0x40000400
 8002114:	40023800 	.word	0x40023800
 8002118:	40020000 	.word	0x40020000

0800211c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a0b      	ldr	r2, [pc, #44]	@ (8002158 <HAL_TIM_PWM_MspInit+0x3c>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d10d      	bne.n	800214a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	4b0a      	ldr	r3, [pc, #40]	@ (800215c <HAL_TIM_PWM_MspInit+0x40>)
 8002134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002136:	4a09      	ldr	r2, [pc, #36]	@ (800215c <HAL_TIM_PWM_MspInit+0x40>)
 8002138:	f043 0304 	orr.w	r3, r3, #4
 800213c:	6413      	str	r3, [r2, #64]	@ 0x40
 800213e:	4b07      	ldr	r3, [pc, #28]	@ (800215c <HAL_TIM_PWM_MspInit+0x40>)
 8002140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002142:	f003 0304 	and.w	r3, r3, #4
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 800214a:	bf00      	nop
 800214c:	3714      	adds	r7, #20
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	40000800 	.word	0x40000800
 800215c:	40023800 	.word	0x40023800

08002160 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b088      	sub	sp, #32
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002168:	f107 030c 	add.w	r3, r7, #12
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
 8002176:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a12      	ldr	r2, [pc, #72]	@ (80021c8 <HAL_TIM_MspPostInit+0x68>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d11e      	bne.n	80021c0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	60bb      	str	r3, [r7, #8]
 8002186:	4b11      	ldr	r3, [pc, #68]	@ (80021cc <HAL_TIM_MspPostInit+0x6c>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218a:	4a10      	ldr	r2, [pc, #64]	@ (80021cc <HAL_TIM_MspPostInit+0x6c>)
 800218c:	f043 0302 	orr.w	r3, r3, #2
 8002190:	6313      	str	r3, [r2, #48]	@ 0x30
 8002192:	4b0e      	ldr	r3, [pc, #56]	@ (80021cc <HAL_TIM_MspPostInit+0x6c>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	60bb      	str	r3, [r7, #8]
 800219c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800219e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80021a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a4:	2302      	movs	r3, #2
 80021a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ac:	2300      	movs	r3, #0
 80021ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80021b0:	2302      	movs	r3, #2
 80021b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b4:	f107 030c 	add.w	r3, r7, #12
 80021b8:	4619      	mov	r1, r3
 80021ba:	4805      	ldr	r0, [pc, #20]	@ (80021d0 <HAL_TIM_MspPostInit+0x70>)
 80021bc:	f001 fc92 	bl	8003ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80021c0:	bf00      	nop
 80021c2:	3720      	adds	r7, #32
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40000800 	.word	0x40000800
 80021cc:	40023800 	.word	0x40023800
 80021d0:	40020400 	.word	0x40020400

080021d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b08a      	sub	sp, #40	@ 0x28
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021dc:	f107 0314 	add.w	r3, r7, #20
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	609a      	str	r2, [r3, #8]
 80021e8:	60da      	str	r2, [r3, #12]
 80021ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a19      	ldr	r2, [pc, #100]	@ (8002258 <HAL_UART_MspInit+0x84>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d12b      	bne.n	800224e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	613b      	str	r3, [r7, #16]
 80021fa:	4b18      	ldr	r3, [pc, #96]	@ (800225c <HAL_UART_MspInit+0x88>)
 80021fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fe:	4a17      	ldr	r2, [pc, #92]	@ (800225c <HAL_UART_MspInit+0x88>)
 8002200:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002204:	6413      	str	r3, [r2, #64]	@ 0x40
 8002206:	4b15      	ldr	r3, [pc, #84]	@ (800225c <HAL_UART_MspInit+0x88>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800220e:	613b      	str	r3, [r7, #16]
 8002210:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	4b11      	ldr	r3, [pc, #68]	@ (800225c <HAL_UART_MspInit+0x88>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221a:	4a10      	ldr	r2, [pc, #64]	@ (800225c <HAL_UART_MspInit+0x88>)
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	6313      	str	r3, [r2, #48]	@ 0x30
 8002222:	4b0e      	ldr	r3, [pc, #56]	@ (800225c <HAL_UART_MspInit+0x88>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800222e:	230c      	movs	r3, #12
 8002230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002232:	2302      	movs	r3, #2
 8002234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002236:	2300      	movs	r3, #0
 8002238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800223a:	2303      	movs	r3, #3
 800223c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800223e:	2307      	movs	r3, #7
 8002240:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002242:	f107 0314 	add.w	r3, r7, #20
 8002246:	4619      	mov	r1, r3
 8002248:	4805      	ldr	r0, [pc, #20]	@ (8002260 <HAL_UART_MspInit+0x8c>)
 800224a:	f001 fc4b 	bl	8003ae4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800224e:	bf00      	nop
 8002250:	3728      	adds	r7, #40	@ 0x28
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40004400 	.word	0x40004400
 800225c:	40023800 	.word	0x40023800
 8002260:	40020000 	.word	0x40020000

08002264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002268:	bf00      	nop
 800226a:	e7fd      	b.n	8002268 <NMI_Handler+0x4>

0800226c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002270:	bf00      	nop
 8002272:	e7fd      	b.n	8002270 <HardFault_Handler+0x4>

08002274 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002278:	bf00      	nop
 800227a:	e7fd      	b.n	8002278 <MemManage_Handler+0x4>

0800227c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002280:	bf00      	nop
 8002282:	e7fd      	b.n	8002280 <BusFault_Handler+0x4>

08002284 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002288:	bf00      	nop
 800228a:	e7fd      	b.n	8002288 <UsageFault_Handler+0x4>

0800228c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002290:	bf00      	nop
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800229a:	b480      	push	{r7}
 800229c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022ac:	bf00      	nop
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022ba:	f000 f94f 	bl	800255c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022be:	bf00      	nop
 80022c0:	bd80      	pop	{r7, pc}
	...

080022c4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80022c8:	4802      	ldr	r0, [pc, #8]	@ (80022d4 <DMA2_Stream2_IRQHandler+0x10>)
 80022ca:	f001 f9a1 	bl	8003610 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20000458 	.word	0x20000458

080022d8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80022dc:	4802      	ldr	r0, [pc, #8]	@ (80022e8 <OTG_FS_IRQHandler+0x10>)
 80022de:	f001 fef9 	bl	80040d4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	20012544 	.word	0x20012544

080022ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  return 1;
 80022f0:	2301      	movs	r3, #1
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <_kill>:

int _kill(int pid, int sig)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002306:	f00a ffed 	bl	800d2e4 <__errno>
 800230a:	4603      	mov	r3, r0
 800230c:	2216      	movs	r2, #22
 800230e:	601a      	str	r2, [r3, #0]
  return -1;
 8002310:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002314:	4618      	mov	r0, r3
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <_exit>:

void _exit (int status)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002324:	f04f 31ff 	mov.w	r1, #4294967295
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f7ff ffe7 	bl	80022fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800232e:	bf00      	nop
 8002330:	e7fd      	b.n	800232e <_exit+0x12>

08002332 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b086      	sub	sp, #24
 8002336:	af00      	add	r7, sp, #0
 8002338:	60f8      	str	r0, [r7, #12]
 800233a:	60b9      	str	r1, [r7, #8]
 800233c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]
 8002342:	e00a      	b.n	800235a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002344:	f3af 8000 	nop.w
 8002348:	4601      	mov	r1, r0
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	1c5a      	adds	r2, r3, #1
 800234e:	60ba      	str	r2, [r7, #8]
 8002350:	b2ca      	uxtb	r2, r1
 8002352:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	3301      	adds	r3, #1
 8002358:	617b      	str	r3, [r7, #20]
 800235a:	697a      	ldr	r2, [r7, #20]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	429a      	cmp	r2, r3
 8002360:	dbf0      	blt.n	8002344 <_read+0x12>
  }

  return len;
 8002362:	687b      	ldr	r3, [r7, #4]
}
 8002364:	4618      	mov	r0, r3
 8002366:	3718      	adds	r7, #24
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <_close>:
  }
  return len;
}

int _close(int file)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002374:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002378:	4618      	mov	r0, r3
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002394:	605a      	str	r2, [r3, #4]
  return 0;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <_isatty>:

int _isatty(int file)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023ac:	2301      	movs	r3, #1
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b085      	sub	sp, #20
 80023be:	af00      	add	r7, sp, #0
 80023c0:	60f8      	str	r0, [r7, #12]
 80023c2:	60b9      	str	r1, [r7, #8]
 80023c4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3714      	adds	r7, #20
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023dc:	4a14      	ldr	r2, [pc, #80]	@ (8002430 <_sbrk+0x5c>)
 80023de:	4b15      	ldr	r3, [pc, #84]	@ (8002434 <_sbrk+0x60>)
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023e8:	4b13      	ldr	r3, [pc, #76]	@ (8002438 <_sbrk+0x64>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d102      	bne.n	80023f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023f0:	4b11      	ldr	r3, [pc, #68]	@ (8002438 <_sbrk+0x64>)
 80023f2:	4a12      	ldr	r2, [pc, #72]	@ (800243c <_sbrk+0x68>)
 80023f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023f6:	4b10      	ldr	r3, [pc, #64]	@ (8002438 <_sbrk+0x64>)
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4413      	add	r3, r2
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	429a      	cmp	r2, r3
 8002402:	d207      	bcs.n	8002414 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002404:	f00a ff6e 	bl	800d2e4 <__errno>
 8002408:	4603      	mov	r3, r0
 800240a:	220c      	movs	r2, #12
 800240c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800240e:	f04f 33ff 	mov.w	r3, #4294967295
 8002412:	e009      	b.n	8002428 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002414:	4b08      	ldr	r3, [pc, #32]	@ (8002438 <_sbrk+0x64>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800241a:	4b07      	ldr	r3, [pc, #28]	@ (8002438 <_sbrk+0x64>)
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4413      	add	r3, r2
 8002422:	4a05      	ldr	r2, [pc, #20]	@ (8002438 <_sbrk+0x64>)
 8002424:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002426:	68fb      	ldr	r3, [r7, #12]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3718      	adds	r7, #24
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	20020000 	.word	0x20020000
 8002434:	00000400 	.word	0x00000400
 8002438:	2001105c 	.word	0x2001105c
 800243c:	20012d98 	.word	0x20012d98

08002440 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002444:	4b06      	ldr	r3, [pc, #24]	@ (8002460 <SystemInit+0x20>)
 8002446:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800244a:	4a05      	ldr	r2, [pc, #20]	@ (8002460 <SystemInit+0x20>)
 800244c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002450:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	e000ed00 	.word	0xe000ed00

08002464 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002464:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800249c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002468:	f7ff ffea 	bl	8002440 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800246c:	480c      	ldr	r0, [pc, #48]	@ (80024a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800246e:	490d      	ldr	r1, [pc, #52]	@ (80024a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002470:	4a0d      	ldr	r2, [pc, #52]	@ (80024a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002474:	e002      	b.n	800247c <LoopCopyDataInit>

08002476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800247a:	3304      	adds	r3, #4

0800247c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800247c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800247e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002480:	d3f9      	bcc.n	8002476 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002482:	4a0a      	ldr	r2, [pc, #40]	@ (80024ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002484:	4c0a      	ldr	r4, [pc, #40]	@ (80024b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002488:	e001      	b.n	800248e <LoopFillZerobss>

0800248a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800248a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800248c:	3204      	adds	r2, #4

0800248e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800248e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002490:	d3fb      	bcc.n	800248a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002492:	f00a ff2d 	bl	800d2f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002496:	f7fe ffd3 	bl	8001440 <main>
  bx  lr    
 800249a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800249c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024a4:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 80024a8:	080111b8 	.word	0x080111b8
  ldr r2, =_sbss
 80024ac:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 80024b0:	20012d94 	.word	0x20012d94

080024b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024b4:	e7fe      	b.n	80024b4 <ADC_IRQHandler>
	...

080024b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024bc:	4b0e      	ldr	r3, [pc, #56]	@ (80024f8 <HAL_Init+0x40>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a0d      	ldr	r2, [pc, #52]	@ (80024f8 <HAL_Init+0x40>)
 80024c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024c8:	4b0b      	ldr	r3, [pc, #44]	@ (80024f8 <HAL_Init+0x40>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a0a      	ldr	r2, [pc, #40]	@ (80024f8 <HAL_Init+0x40>)
 80024ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024d4:	4b08      	ldr	r3, [pc, #32]	@ (80024f8 <HAL_Init+0x40>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a07      	ldr	r2, [pc, #28]	@ (80024f8 <HAL_Init+0x40>)
 80024da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024e0:	2003      	movs	r0, #3
 80024e2:	f000 fed3 	bl	800328c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024e6:	2000      	movs	r0, #0
 80024e8:	f000 f808 	bl	80024fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024ec:	f7ff fc40 	bl	8001d70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40023c00 	.word	0x40023c00

080024fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002504:	4b12      	ldr	r3, [pc, #72]	@ (8002550 <HAL_InitTick+0x54>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4b12      	ldr	r3, [pc, #72]	@ (8002554 <HAL_InitTick+0x58>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	4619      	mov	r1, r3
 800250e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002512:	fbb3 f3f1 	udiv	r3, r3, r1
 8002516:	fbb2 f3f3 	udiv	r3, r2, r3
 800251a:	4618      	mov	r0, r3
 800251c:	f000 feeb 	bl	80032f6 <HAL_SYSTICK_Config>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e00e      	b.n	8002548 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b0f      	cmp	r3, #15
 800252e:	d80a      	bhi.n	8002546 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002530:	2200      	movs	r2, #0
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	f04f 30ff 	mov.w	r0, #4294967295
 8002538:	f000 feb3 	bl	80032a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800253c:	4a06      	ldr	r2, [pc, #24]	@ (8002558 <HAL_InitTick+0x5c>)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002542:	2300      	movs	r3, #0
 8002544:	e000      	b.n	8002548 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
}
 8002548:	4618      	mov	r0, r3
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	20000000 	.word	0x20000000
 8002554:	20000008 	.word	0x20000008
 8002558:	20000004 	.word	0x20000004

0800255c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002560:	4b06      	ldr	r3, [pc, #24]	@ (800257c <HAL_IncTick+0x20>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	461a      	mov	r2, r3
 8002566:	4b06      	ldr	r3, [pc, #24]	@ (8002580 <HAL_IncTick+0x24>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4413      	add	r3, r2
 800256c:	4a04      	ldr	r2, [pc, #16]	@ (8002580 <HAL_IncTick+0x24>)
 800256e:	6013      	str	r3, [r2, #0]
}
 8002570:	bf00      	nop
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	20000008 	.word	0x20000008
 8002580:	20011060 	.word	0x20011060

08002584 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  return uwTick;
 8002588:	4b03      	ldr	r3, [pc, #12]	@ (8002598 <HAL_GetTick+0x14>)
 800258a:	681b      	ldr	r3, [r3, #0]
}
 800258c:	4618      	mov	r0, r3
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	20011060 	.word	0x20011060

0800259c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025a4:	f7ff ffee 	bl	8002584 <HAL_GetTick>
 80025a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b4:	d005      	beq.n	80025c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025b6:	4b0a      	ldr	r3, [pc, #40]	@ (80025e0 <HAL_Delay+0x44>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	461a      	mov	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	4413      	add	r3, r2
 80025c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025c2:	bf00      	nop
 80025c4:	f7ff ffde 	bl	8002584 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d8f7      	bhi.n	80025c4 <HAL_Delay+0x28>
  {
  }
}
 80025d4:	bf00      	nop
 80025d6:	bf00      	nop
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	20000008 	.word	0x20000008

080025e4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ec:	2300      	movs	r3, #0
 80025ee:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e033      	b.n	8002662 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d109      	bne.n	8002616 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7ff fbdc 	bl	8001dc0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261a:	f003 0310 	and.w	r3, r3, #16
 800261e:	2b00      	cmp	r3, #0
 8002620:	d118      	bne.n	8002654 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002626:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800262a:	f023 0302 	bic.w	r3, r3, #2
 800262e:	f043 0202 	orr.w	r2, r3, #2
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 fbda 	bl	8002df0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002646:	f023 0303 	bic.w	r3, r3, #3
 800264a:	f043 0201 	orr.w	r2, r3, #1
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	641a      	str	r2, [r3, #64]	@ 0x40
 8002652:	e001      	b.n	8002658 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002660:	7bfb      	ldrb	r3, [r7, #15]
}
 8002662:	4618      	mov	r0, r3
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
	...

0800266c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002674:	2300      	movs	r3, #0
 8002676:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800267e:	2b01      	cmp	r3, #1
 8002680:	d101      	bne.n	8002686 <HAL_ADC_Start+0x1a>
 8002682:	2302      	movs	r3, #2
 8002684:	e0b2      	b.n	80027ec <HAL_ADC_Start+0x180>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	2b01      	cmp	r3, #1
 800269a:	d018      	beq.n	80026ce <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	689a      	ldr	r2, [r3, #8]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f042 0201 	orr.w	r2, r2, #1
 80026aa:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026ac:	4b52      	ldr	r3, [pc, #328]	@ (80027f8 <HAL_ADC_Start+0x18c>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a52      	ldr	r2, [pc, #328]	@ (80027fc <HAL_ADC_Start+0x190>)
 80026b2:	fba2 2303 	umull	r2, r3, r2, r3
 80026b6:	0c9a      	lsrs	r2, r3, #18
 80026b8:	4613      	mov	r3, r2
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	4413      	add	r3, r2
 80026be:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80026c0:	e002      	b.n	80026c8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	3b01      	subs	r3, #1
 80026c6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1f9      	bne.n	80026c2 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d17a      	bne.n	80027d2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80026e4:	f023 0301 	bic.w	r3, r3, #1
 80026e8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d007      	beq.n	800270e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002702:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002706:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002712:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002716:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800271a:	d106      	bne.n	800272a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002720:	f023 0206 	bic.w	r2, r3, #6
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	645a      	str	r2, [r3, #68]	@ 0x44
 8002728:	e002      	b.n	8002730 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002738:	4b31      	ldr	r3, [pc, #196]	@ (8002800 <HAL_ADC_Start+0x194>)
 800273a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002744:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f003 031f 	and.w	r3, r3, #31
 800274e:	2b00      	cmp	r3, #0
 8002750:	d12a      	bne.n	80027a8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a2b      	ldr	r2, [pc, #172]	@ (8002804 <HAL_ADC_Start+0x198>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d015      	beq.n	8002788 <HAL_ADC_Start+0x11c>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a29      	ldr	r2, [pc, #164]	@ (8002808 <HAL_ADC_Start+0x19c>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d105      	bne.n	8002772 <HAL_ADC_Start+0x106>
 8002766:	4b26      	ldr	r3, [pc, #152]	@ (8002800 <HAL_ADC_Start+0x194>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f003 031f 	and.w	r3, r3, #31
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00a      	beq.n	8002788 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a25      	ldr	r2, [pc, #148]	@ (800280c <HAL_ADC_Start+0x1a0>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d136      	bne.n	80027ea <HAL_ADC_Start+0x17e>
 800277c:	4b20      	ldr	r3, [pc, #128]	@ (8002800 <HAL_ADC_Start+0x194>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f003 0310 	and.w	r3, r3, #16
 8002784:	2b00      	cmp	r3, #0
 8002786:	d130      	bne.n	80027ea <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d129      	bne.n	80027ea <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80027a4:	609a      	str	r2, [r3, #8]
 80027a6:	e020      	b.n	80027ea <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a15      	ldr	r2, [pc, #84]	@ (8002804 <HAL_ADC_Start+0x198>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d11b      	bne.n	80027ea <HAL_ADC_Start+0x17e>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d114      	bne.n	80027ea <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689a      	ldr	r2, [r3, #8]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80027ce:	609a      	str	r2, [r3, #8]
 80027d0:	e00b      	b.n	80027ea <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d6:	f043 0210 	orr.w	r2, r3, #16
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e2:	f043 0201 	orr.w	r2, r3, #1
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	20000000 	.word	0x20000000
 80027fc:	431bde83 	.word	0x431bde83
 8002800:	40012300 	.word	0x40012300
 8002804:	40012000 	.word	0x40012000
 8002808:	40012100 	.word	0x40012100
 800280c:	40012200 	.word	0x40012200

08002810 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800281a:	2300      	movs	r3, #0
 800281c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002828:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800282c:	d113      	bne.n	8002856 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002838:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800283c:	d10b      	bne.n	8002856 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002842:	f043 0220 	orr.w	r2, r3, #32
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e063      	b.n	800291e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002856:	f7ff fe95 	bl	8002584 <HAL_GetTick>
 800285a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800285c:	e021      	b.n	80028a2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002864:	d01d      	beq.n	80028a2 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d007      	beq.n	800287c <HAL_ADC_PollForConversion+0x6c>
 800286c:	f7ff fe8a 	bl	8002584 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	429a      	cmp	r2, r3
 800287a:	d212      	bcs.n	80028a2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b02      	cmp	r3, #2
 8002888:	d00b      	beq.n	80028a2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288e:	f043 0204 	orr.w	r2, r3, #4
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e03d      	b.n	800291e <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d1d6      	bne.n	800285e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f06f 0212 	mvn.w	r2, #18
 80028b8:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028be:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d123      	bne.n	800291c <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d11f      	bne.n	800291c <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d006      	beq.n	80028f8 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d111      	bne.n	800291c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002908:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d105      	bne.n	800291c <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002914:	f043 0201 	orr.w	r2, r3, #1
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
	...

08002928 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002934:	2300      	movs	r3, #0
 8002936:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800293e:	2b01      	cmp	r3, #1
 8002940:	d101      	bne.n	8002946 <HAL_ADC_Start_DMA+0x1e>
 8002942:	2302      	movs	r3, #2
 8002944:	e0e9      	b.n	8002b1a <HAL_ADC_Start_DMA+0x1f2>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	2b01      	cmp	r3, #1
 800295a:	d018      	beq.n	800298e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689a      	ldr	r2, [r3, #8]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f042 0201 	orr.w	r2, r2, #1
 800296a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800296c:	4b6d      	ldr	r3, [pc, #436]	@ (8002b24 <HAL_ADC_Start_DMA+0x1fc>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a6d      	ldr	r2, [pc, #436]	@ (8002b28 <HAL_ADC_Start_DMA+0x200>)
 8002972:	fba2 2303 	umull	r2, r3, r2, r3
 8002976:	0c9a      	lsrs	r2, r3, #18
 8002978:	4613      	mov	r3, r2
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	4413      	add	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002980:	e002      	b.n	8002988 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	3b01      	subs	r3, #1
 8002986:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1f9      	bne.n	8002982 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002998:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800299c:	d107      	bne.n	80029ae <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029ac:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	f040 80a1 	bne.w	8002b00 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80029c6:	f023 0301 	bic.w	r3, r3, #1
 80029ca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d007      	beq.n	80029f0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80029e8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029fc:	d106      	bne.n	8002a0c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a02:	f023 0206 	bic.w	r2, r3, #6
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	645a      	str	r2, [r3, #68]	@ 0x44
 8002a0a:	e002      	b.n	8002a12 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a1a:	4b44      	ldr	r3, [pc, #272]	@ (8002b2c <HAL_ADC_Start_DMA+0x204>)
 8002a1c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a22:	4a43      	ldr	r2, [pc, #268]	@ (8002b30 <HAL_ADC_Start_DMA+0x208>)
 8002a24:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a2a:	4a42      	ldr	r2, [pc, #264]	@ (8002b34 <HAL_ADC_Start_DMA+0x20c>)
 8002a2c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a32:	4a41      	ldr	r2, [pc, #260]	@ (8002b38 <HAL_ADC_Start_DMA+0x210>)
 8002a34:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002a3e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002a4e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689a      	ldr	r2, [r3, #8]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a5e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	334c      	adds	r3, #76	@ 0x4c
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	68ba      	ldr	r2, [r7, #8]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f000 fd76 	bl	8003560 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f003 031f 	and.w	r3, r3, #31
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d12a      	bne.n	8002ad6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a2d      	ldr	r2, [pc, #180]	@ (8002b3c <HAL_ADC_Start_DMA+0x214>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d015      	beq.n	8002ab6 <HAL_ADC_Start_DMA+0x18e>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a2c      	ldr	r2, [pc, #176]	@ (8002b40 <HAL_ADC_Start_DMA+0x218>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d105      	bne.n	8002aa0 <HAL_ADC_Start_DMA+0x178>
 8002a94:	4b25      	ldr	r3, [pc, #148]	@ (8002b2c <HAL_ADC_Start_DMA+0x204>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f003 031f 	and.w	r3, r3, #31
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00a      	beq.n	8002ab6 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a27      	ldr	r2, [pc, #156]	@ (8002b44 <HAL_ADC_Start_DMA+0x21c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d136      	bne.n	8002b18 <HAL_ADC_Start_DMA+0x1f0>
 8002aaa:	4b20      	ldr	r3, [pc, #128]	@ (8002b2c <HAL_ADC_Start_DMA+0x204>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f003 0310 	and.w	r3, r3, #16
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d130      	bne.n	8002b18 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d129      	bne.n	8002b18 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689a      	ldr	r2, [r3, #8]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002ad2:	609a      	str	r2, [r3, #8]
 8002ad4:	e020      	b.n	8002b18 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a18      	ldr	r2, [pc, #96]	@ (8002b3c <HAL_ADC_Start_DMA+0x214>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d11b      	bne.n	8002b18 <HAL_ADC_Start_DMA+0x1f0>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d114      	bne.n	8002b18 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002afc:	609a      	str	r2, [r3, #8]
 8002afe:	e00b      	b.n	8002b18 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b04:	f043 0210 	orr.w	r2, r3, #16
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b10:	f043 0201 	orr.w	r2, r3, #1
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3718      	adds	r7, #24
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	20000000 	.word	0x20000000
 8002b28:	431bde83 	.word	0x431bde83
 8002b2c:	40012300 	.word	0x40012300
 8002b30:	08002fe9 	.word	0x08002fe9
 8002b34:	080030a3 	.word	0x080030a3
 8002b38:	080030bf 	.word	0x080030bf
 8002b3c:	40012000 	.word	0x40012000
 8002b40:	40012100 	.word	0x40012100
 8002b44:	40012200 	.word	0x40012200

08002b48 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
	...

08002b8c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002b96:	2300      	movs	r3, #0
 8002b98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d101      	bne.n	8002ba8 <HAL_ADC_ConfigChannel+0x1c>
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	e113      	b.n	8002dd0 <HAL_ADC_ConfigChannel+0x244>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2b09      	cmp	r3, #9
 8002bb6:	d925      	bls.n	8002c04 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68d9      	ldr	r1, [r3, #12]
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	4413      	add	r3, r2
 8002bcc:	3b1e      	subs	r3, #30
 8002bce:	2207      	movs	r2, #7
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	43da      	mvns	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	400a      	ands	r2, r1
 8002bdc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68d9      	ldr	r1, [r3, #12]
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	4618      	mov	r0, r3
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	4403      	add	r3, r0
 8002bf6:	3b1e      	subs	r3, #30
 8002bf8:	409a      	lsls	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	60da      	str	r2, [r3, #12]
 8002c02:	e022      	b.n	8002c4a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6919      	ldr	r1, [r3, #16]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	461a      	mov	r2, r3
 8002c12:	4613      	mov	r3, r2
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	4413      	add	r3, r2
 8002c18:	2207      	movs	r2, #7
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	43da      	mvns	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	400a      	ands	r2, r1
 8002c26:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6919      	ldr	r1, [r3, #16]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	689a      	ldr	r2, [r3, #8]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	4618      	mov	r0, r3
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	4403      	add	r3, r0
 8002c40:	409a      	lsls	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	430a      	orrs	r2, r1
 8002c48:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	2b06      	cmp	r3, #6
 8002c50:	d824      	bhi.n	8002c9c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685a      	ldr	r2, [r3, #4]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	3b05      	subs	r3, #5
 8002c64:	221f      	movs	r2, #31
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	43da      	mvns	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	400a      	ands	r2, r1
 8002c72:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	4618      	mov	r0, r3
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	4613      	mov	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	3b05      	subs	r3, #5
 8002c8e:	fa00 f203 	lsl.w	r2, r0, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c9a:	e04c      	b.n	8002d36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	2b0c      	cmp	r3, #12
 8002ca2:	d824      	bhi.n	8002cee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	3b23      	subs	r3, #35	@ 0x23
 8002cb6:	221f      	movs	r2, #31
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	43da      	mvns	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	400a      	ands	r2, r1
 8002cc4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4413      	add	r3, r2
 8002cde:	3b23      	subs	r3, #35	@ 0x23
 8002ce0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	631a      	str	r2, [r3, #48]	@ 0x30
 8002cec:	e023      	b.n	8002d36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685a      	ldr	r2, [r3, #4]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	4413      	add	r3, r2
 8002cfe:	3b41      	subs	r3, #65	@ 0x41
 8002d00:	221f      	movs	r2, #31
 8002d02:	fa02 f303 	lsl.w	r3, r2, r3
 8002d06:	43da      	mvns	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	400a      	ands	r2, r1
 8002d0e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	4613      	mov	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	4413      	add	r3, r2
 8002d28:	3b41      	subs	r3, #65	@ 0x41
 8002d2a:	fa00 f203 	lsl.w	r2, r0, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d36:	4b29      	ldr	r3, [pc, #164]	@ (8002ddc <HAL_ADC_ConfigChannel+0x250>)
 8002d38:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a28      	ldr	r2, [pc, #160]	@ (8002de0 <HAL_ADC_ConfigChannel+0x254>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d10f      	bne.n	8002d64 <HAL_ADC_ConfigChannel+0x1d8>
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2b12      	cmp	r3, #18
 8002d4a:	d10b      	bne.n	8002d64 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a1d      	ldr	r2, [pc, #116]	@ (8002de0 <HAL_ADC_ConfigChannel+0x254>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d12b      	bne.n	8002dc6 <HAL_ADC_ConfigChannel+0x23a>
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a1c      	ldr	r2, [pc, #112]	@ (8002de4 <HAL_ADC_ConfigChannel+0x258>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d003      	beq.n	8002d80 <HAL_ADC_ConfigChannel+0x1f4>
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2b11      	cmp	r3, #17
 8002d7e:	d122      	bne.n	8002dc6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a11      	ldr	r2, [pc, #68]	@ (8002de4 <HAL_ADC_ConfigChannel+0x258>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d111      	bne.n	8002dc6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002da2:	4b11      	ldr	r3, [pc, #68]	@ (8002de8 <HAL_ADC_ConfigChannel+0x25c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a11      	ldr	r2, [pc, #68]	@ (8002dec <HAL_ADC_ConfigChannel+0x260>)
 8002da8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dac:	0c9a      	lsrs	r2, r3, #18
 8002dae:	4613      	mov	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4413      	add	r3, r2
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002db8:	e002      	b.n	8002dc0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1f9      	bne.n	8002dba <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3714      	adds	r7, #20
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr
 8002ddc:	40012300 	.word	0x40012300
 8002de0:	40012000 	.word	0x40012000
 8002de4:	10000012 	.word	0x10000012
 8002de8:	20000000 	.word	0x20000000
 8002dec:	431bde83 	.word	0x431bde83

08002df0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002df8:	4b79      	ldr	r3, [pc, #484]	@ (8002fe0 <ADC_Init+0x1f0>)
 8002dfa:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	431a      	orrs	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	685a      	ldr	r2, [r3, #4]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	6859      	ldr	r1, [r3, #4]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	021a      	lsls	r2, r3, #8
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	430a      	orrs	r2, r1
 8002e38:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002e48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6859      	ldr	r1, [r3, #4]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689a      	ldr	r2, [r3, #8]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6899      	ldr	r1, [r3, #8]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68da      	ldr	r2, [r3, #12]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e82:	4a58      	ldr	r2, [pc, #352]	@ (8002fe4 <ADC_Init+0x1f4>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d022      	beq.n	8002ece <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689a      	ldr	r2, [r3, #8]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002e96:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6899      	ldr	r1, [r3, #8]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002eb8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6899      	ldr	r1, [r3, #8]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	609a      	str	r2, [r3, #8]
 8002ecc:	e00f      	b.n	8002eee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002edc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002eec:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 0202 	bic.w	r2, r2, #2
 8002efc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6899      	ldr	r1, [r3, #8]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	7e1b      	ldrb	r3, [r3, #24]
 8002f08:	005a      	lsls	r2, r3, #1
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d01b      	beq.n	8002f54 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f2a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002f3a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6859      	ldr	r1, [r3, #4]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f46:	3b01      	subs	r3, #1
 8002f48:	035a      	lsls	r2, r3, #13
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	605a      	str	r2, [r3, #4]
 8002f52:	e007      	b.n	8002f64 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	685a      	ldr	r2, [r3, #4]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f62:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002f72:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	051a      	lsls	r2, r3, #20
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002f98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6899      	ldr	r1, [r3, #8]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002fa6:	025a      	lsls	r2, r3, #9
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	689a      	ldr	r2, [r3, #8]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6899      	ldr	r1, [r3, #8]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	029a      	lsls	r2, r3, #10
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	609a      	str	r2, [r3, #8]
}
 8002fd4:	bf00      	nop
 8002fd6:	3714      	adds	r7, #20
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	40012300 	.word	0x40012300
 8002fe4:	0f000001 	.word	0x0f000001

08002fe8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffa:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d13c      	bne.n	800307c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003006:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d12b      	bne.n	8003074 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003020:	2b00      	cmp	r3, #0
 8003022:	d127      	bne.n	8003074 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800302a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800302e:	2b00      	cmp	r3, #0
 8003030:	d006      	beq.n	8003040 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800303c:	2b00      	cmp	r3, #0
 800303e:	d119      	bne.n	8003074 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 0220 	bic.w	r2, r2, #32
 800304e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003054:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003060:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d105      	bne.n	8003074 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306c:	f043 0201 	orr.w	r2, r3, #1
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f7fe f9cd 	bl	8001414 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800307a:	e00e      	b.n	800309a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003080:	f003 0310 	and.w	r3, r3, #16
 8003084:	2b00      	cmp	r3, #0
 8003086:	d003      	beq.n	8003090 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f7ff fd74 	bl	8002b76 <HAL_ADC_ErrorCallback>
}
 800308e:	e004      	b.n	800309a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003094:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	4798      	blx	r3
}
 800309a:	bf00      	nop
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b084      	sub	sp, #16
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ae:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f7ff fd56 	bl	8002b62 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80030b6:	bf00      	nop
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b084      	sub	sp, #16
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ca:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2240      	movs	r2, #64	@ 0x40
 80030d0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d6:	f043 0204 	orr.w	r2, r3, #4
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f7ff fd49 	bl	8002b76 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80030e4:	bf00      	nop
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003130 <__NVIC_SetPriorityGrouping+0x44>)
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003108:	4013      	ands	r3, r2
 800310a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003114:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003118:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800311c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800311e:	4a04      	ldr	r2, [pc, #16]	@ (8003130 <__NVIC_SetPriorityGrouping+0x44>)
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	60d3      	str	r3, [r2, #12]
}
 8003124:	bf00      	nop
 8003126:	3714      	adds	r7, #20
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	e000ed00 	.word	0xe000ed00

08003134 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003138:	4b04      	ldr	r3, [pc, #16]	@ (800314c <__NVIC_GetPriorityGrouping+0x18>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	0a1b      	lsrs	r3, r3, #8
 800313e:	f003 0307 	and.w	r3, r3, #7
}
 8003142:	4618      	mov	r0, r3
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	e000ed00 	.word	0xe000ed00

08003150 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	4603      	mov	r3, r0
 8003158:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800315a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315e:	2b00      	cmp	r3, #0
 8003160:	db0b      	blt.n	800317a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003162:	79fb      	ldrb	r3, [r7, #7]
 8003164:	f003 021f 	and.w	r2, r3, #31
 8003168:	4907      	ldr	r1, [pc, #28]	@ (8003188 <__NVIC_EnableIRQ+0x38>)
 800316a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316e:	095b      	lsrs	r3, r3, #5
 8003170:	2001      	movs	r0, #1
 8003172:	fa00 f202 	lsl.w	r2, r0, r2
 8003176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	e000e100 	.word	0xe000e100

0800318c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	4603      	mov	r3, r0
 8003194:	6039      	str	r1, [r7, #0]
 8003196:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319c:	2b00      	cmp	r3, #0
 800319e:	db0a      	blt.n	80031b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	b2da      	uxtb	r2, r3
 80031a4:	490c      	ldr	r1, [pc, #48]	@ (80031d8 <__NVIC_SetPriority+0x4c>)
 80031a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031aa:	0112      	lsls	r2, r2, #4
 80031ac:	b2d2      	uxtb	r2, r2
 80031ae:	440b      	add	r3, r1
 80031b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031b4:	e00a      	b.n	80031cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	4908      	ldr	r1, [pc, #32]	@ (80031dc <__NVIC_SetPriority+0x50>)
 80031bc:	79fb      	ldrb	r3, [r7, #7]
 80031be:	f003 030f 	and.w	r3, r3, #15
 80031c2:	3b04      	subs	r3, #4
 80031c4:	0112      	lsls	r2, r2, #4
 80031c6:	b2d2      	uxtb	r2, r2
 80031c8:	440b      	add	r3, r1
 80031ca:	761a      	strb	r2, [r3, #24]
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr
 80031d8:	e000e100 	.word	0xe000e100
 80031dc:	e000ed00 	.word	0xe000ed00

080031e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b089      	sub	sp, #36	@ 0x24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	f1c3 0307 	rsb	r3, r3, #7
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	bf28      	it	cs
 80031fe:	2304      	movcs	r3, #4
 8003200:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	3304      	adds	r3, #4
 8003206:	2b06      	cmp	r3, #6
 8003208:	d902      	bls.n	8003210 <NVIC_EncodePriority+0x30>
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	3b03      	subs	r3, #3
 800320e:	e000      	b.n	8003212 <NVIC_EncodePriority+0x32>
 8003210:	2300      	movs	r3, #0
 8003212:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003214:	f04f 32ff 	mov.w	r2, #4294967295
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	fa02 f303 	lsl.w	r3, r2, r3
 800321e:	43da      	mvns	r2, r3
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	401a      	ands	r2, r3
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003228:	f04f 31ff 	mov.w	r1, #4294967295
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	fa01 f303 	lsl.w	r3, r1, r3
 8003232:	43d9      	mvns	r1, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003238:	4313      	orrs	r3, r2
         );
}
 800323a:	4618      	mov	r0, r3
 800323c:	3724      	adds	r7, #36	@ 0x24
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
	...

08003248 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	3b01      	subs	r3, #1
 8003254:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003258:	d301      	bcc.n	800325e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800325a:	2301      	movs	r3, #1
 800325c:	e00f      	b.n	800327e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800325e:	4a0a      	ldr	r2, [pc, #40]	@ (8003288 <SysTick_Config+0x40>)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3b01      	subs	r3, #1
 8003264:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003266:	210f      	movs	r1, #15
 8003268:	f04f 30ff 	mov.w	r0, #4294967295
 800326c:	f7ff ff8e 	bl	800318c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003270:	4b05      	ldr	r3, [pc, #20]	@ (8003288 <SysTick_Config+0x40>)
 8003272:	2200      	movs	r2, #0
 8003274:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003276:	4b04      	ldr	r3, [pc, #16]	@ (8003288 <SysTick_Config+0x40>)
 8003278:	2207      	movs	r2, #7
 800327a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	e000e010 	.word	0xe000e010

0800328c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f7ff ff29 	bl	80030ec <__NVIC_SetPriorityGrouping>
}
 800329a:	bf00      	nop
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b086      	sub	sp, #24
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	4603      	mov	r3, r0
 80032aa:	60b9      	str	r1, [r7, #8]
 80032ac:	607a      	str	r2, [r7, #4]
 80032ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032b0:	2300      	movs	r3, #0
 80032b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032b4:	f7ff ff3e 	bl	8003134 <__NVIC_GetPriorityGrouping>
 80032b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	68b9      	ldr	r1, [r7, #8]
 80032be:	6978      	ldr	r0, [r7, #20]
 80032c0:	f7ff ff8e 	bl	80031e0 <NVIC_EncodePriority>
 80032c4:	4602      	mov	r2, r0
 80032c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032ca:	4611      	mov	r1, r2
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff ff5d 	bl	800318c <__NVIC_SetPriority>
}
 80032d2:	bf00      	nop
 80032d4:	3718      	adds	r7, #24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b082      	sub	sp, #8
 80032de:	af00      	add	r7, sp, #0
 80032e0:	4603      	mov	r3, r0
 80032e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff ff31 	bl	8003150 <__NVIC_EnableIRQ>
}
 80032ee:	bf00      	nop
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b082      	sub	sp, #8
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7ff ffa2 	bl	8003248 <SysTick_Config>
 8003304:	4603      	mov	r3, r0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3708      	adds	r7, #8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b082      	sub	sp, #8
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d101      	bne.n	8003320 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e014      	b.n	800334a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	791b      	ldrb	r3, [r3, #4]
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d105      	bne.n	8003336 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f7fe fe1f 	bl	8001f74 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2202      	movs	r2, #2
 800333a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2201      	movs	r2, #1
 8003346:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003352:	b480      	push	{r7}
 8003354:	b089      	sub	sp, #36	@ 0x24
 8003356:	af00      	add	r7, sp, #0
 8003358:	60f8      	str	r0, [r7, #12]
 800335a:	60b9      	str	r1, [r7, #8]
 800335c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800335e:	2300      	movs	r3, #0
 8003360:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d002      	beq.n	800336e <HAL_DAC_ConfigChannel+0x1c>
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e042      	b.n	80033f8 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	795b      	ldrb	r3, [r3, #5]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d101      	bne.n	800337e <HAL_DAC_ConfigChannel+0x2c>
 800337a:	2302      	movs	r3, #2
 800337c:	e03c      	b.n	80033f8 <HAL_DAC_ConfigChannel+0xa6>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2201      	movs	r2, #1
 8003382:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2202      	movs	r2, #2
 8003388:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f003 0310 	and.w	r3, r3, #16
 8003398:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 80033a0:	43db      	mvns	r3, r3
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	4013      	ands	r3, r2
 80033a6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f003 0310 	and.w	r3, r3, #16
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	6819      	ldr	r1, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f003 0310 	and.w	r3, r3, #16
 80033da:	22c0      	movs	r2, #192	@ 0xc0
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	43da      	mvns	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	400a      	ands	r2, r1
 80033e8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2201      	movs	r2, #1
 80033ee:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80033f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3724      	adds	r7, #36	@ 0x24
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800340c:	2300      	movs	r3, #0
 800340e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003410:	f7ff f8b8 	bl	8002584 <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d101      	bne.n	8003420 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e099      	b.n	8003554 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2202      	movs	r2, #2
 8003424:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0201 	bic.w	r2, r2, #1
 800343e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003440:	e00f      	b.n	8003462 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003442:	f7ff f89f 	bl	8002584 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b05      	cmp	r3, #5
 800344e:	d908      	bls.n	8003462 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2220      	movs	r2, #32
 8003454:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2203      	movs	r2, #3
 800345a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e078      	b.n	8003554 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1e8      	bne.n	8003442 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	4b38      	ldr	r3, [pc, #224]	@ (800355c <HAL_DMA_Init+0x158>)
 800347c:	4013      	ands	r3, r2
 800347e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800348e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800349a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d107      	bne.n	80034cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c4:	4313      	orrs	r3, r2
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	697a      	ldr	r2, [r7, #20]
 80034d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	f023 0307 	bic.w	r3, r3, #7
 80034e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f2:	2b04      	cmp	r3, #4
 80034f4:	d117      	bne.n	8003526 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00e      	beq.n	8003526 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 fa6f 	bl	80039ec <DMA_CheckFifoParam>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d008      	beq.n	8003526 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2240      	movs	r2, #64	@ 0x40
 8003518:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2201      	movs	r2, #1
 800351e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003522:	2301      	movs	r3, #1
 8003524:	e016      	b.n	8003554 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 fa26 	bl	8003980 <DMA_CalcBaseAndBitshift>
 8003534:	4603      	mov	r3, r0
 8003536:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800353c:	223f      	movs	r2, #63	@ 0x3f
 800353e:	409a      	lsls	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	3718      	adds	r7, #24
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	f010803f 	.word	0xf010803f

08003560 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
 800356c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800356e:	2300      	movs	r3, #0
 8003570:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003576:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800357e:	2b01      	cmp	r3, #1
 8003580:	d101      	bne.n	8003586 <HAL_DMA_Start_IT+0x26>
 8003582:	2302      	movs	r3, #2
 8003584:	e040      	b.n	8003608 <HAL_DMA_Start_IT+0xa8>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b01      	cmp	r3, #1
 8003598:	d12f      	bne.n	80035fa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2202      	movs	r2, #2
 800359e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	68b9      	ldr	r1, [r7, #8]
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f000 f9b8 	bl	8003924 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035b8:	223f      	movs	r2, #63	@ 0x3f
 80035ba:	409a      	lsls	r2, r3
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f042 0216 	orr.w	r2, r2, #22
 80035ce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d007      	beq.n	80035e8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f042 0208 	orr.w	r2, r2, #8
 80035e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 0201 	orr.w	r2, r2, #1
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	e005      	b.n	8003606 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003602:	2302      	movs	r3, #2
 8003604:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003606:	7dfb      	ldrb	r3, [r7, #23]
}
 8003608:	4618      	mov	r0, r3
 800360a:	3718      	adds	r7, #24
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003618:	2300      	movs	r3, #0
 800361a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800361c:	4b8e      	ldr	r3, [pc, #568]	@ (8003858 <HAL_DMA_IRQHandler+0x248>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a8e      	ldr	r2, [pc, #568]	@ (800385c <HAL_DMA_IRQHandler+0x24c>)
 8003622:	fba2 2303 	umull	r2, r3, r2, r3
 8003626:	0a9b      	lsrs	r3, r3, #10
 8003628:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800362e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800363a:	2208      	movs	r2, #8
 800363c:	409a      	lsls	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	4013      	ands	r3, r2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d01a      	beq.n	800367c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b00      	cmp	r3, #0
 8003652:	d013      	beq.n	800367c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 0204 	bic.w	r2, r2, #4
 8003662:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003668:	2208      	movs	r2, #8
 800366a:	409a      	lsls	r2, r3
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003674:	f043 0201 	orr.w	r2, r3, #1
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003680:	2201      	movs	r2, #1
 8003682:	409a      	lsls	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	4013      	ands	r3, r2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d012      	beq.n	80036b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00b      	beq.n	80036b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800369e:	2201      	movs	r2, #1
 80036a0:	409a      	lsls	r2, r3
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036aa:	f043 0202 	orr.w	r2, r3, #2
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036b6:	2204      	movs	r2, #4
 80036b8:	409a      	lsls	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	4013      	ands	r3, r2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d012      	beq.n	80036e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00b      	beq.n	80036e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d4:	2204      	movs	r2, #4
 80036d6:	409a      	lsls	r2, r3
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036e0:	f043 0204 	orr.w	r2, r3, #4
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ec:	2210      	movs	r2, #16
 80036ee:	409a      	lsls	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	4013      	ands	r3, r2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d043      	beq.n	8003780 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0308 	and.w	r3, r3, #8
 8003702:	2b00      	cmp	r3, #0
 8003704:	d03c      	beq.n	8003780 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800370a:	2210      	movs	r2, #16
 800370c:	409a      	lsls	r2, r3
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d018      	beq.n	8003752 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d108      	bne.n	8003740 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003732:	2b00      	cmp	r3, #0
 8003734:	d024      	beq.n	8003780 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	4798      	blx	r3
 800373e:	e01f      	b.n	8003780 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003744:	2b00      	cmp	r3, #0
 8003746:	d01b      	beq.n	8003780 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	4798      	blx	r3
 8003750:	e016      	b.n	8003780 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800375c:	2b00      	cmp	r3, #0
 800375e:	d107      	bne.n	8003770 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 0208 	bic.w	r2, r2, #8
 800376e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003784:	2220      	movs	r2, #32
 8003786:	409a      	lsls	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	4013      	ands	r3, r2
 800378c:	2b00      	cmp	r3, #0
 800378e:	f000 808f 	beq.w	80038b0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0310 	and.w	r3, r3, #16
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 8087 	beq.w	80038b0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037a6:	2220      	movs	r2, #32
 80037a8:	409a      	lsls	r2, r3
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b05      	cmp	r3, #5
 80037b8:	d136      	bne.n	8003828 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0216 	bic.w	r2, r2, #22
 80037c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	695a      	ldr	r2, [r3, #20]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d103      	bne.n	80037ea <HAL_DMA_IRQHandler+0x1da>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d007      	beq.n	80037fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0208 	bic.w	r2, r2, #8
 80037f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037fe:	223f      	movs	r2, #63	@ 0x3f
 8003800:	409a      	lsls	r2, r3
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800381a:	2b00      	cmp	r3, #0
 800381c:	d07e      	beq.n	800391c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	4798      	blx	r3
        }
        return;
 8003826:	e079      	b.n	800391c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d01d      	beq.n	8003872 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10d      	bne.n	8003860 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003848:	2b00      	cmp	r3, #0
 800384a:	d031      	beq.n	80038b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	4798      	blx	r3
 8003854:	e02c      	b.n	80038b0 <HAL_DMA_IRQHandler+0x2a0>
 8003856:	bf00      	nop
 8003858:	20000000 	.word	0x20000000
 800385c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003864:	2b00      	cmp	r3, #0
 8003866:	d023      	beq.n	80038b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	4798      	blx	r3
 8003870:	e01e      	b.n	80038b0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10f      	bne.n	80038a0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 0210 	bic.w	r2, r2, #16
 800388e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d003      	beq.n	80038b0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d032      	beq.n	800391e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d022      	beq.n	800390a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2205      	movs	r2, #5
 80038c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0201 	bic.w	r2, r2, #1
 80038da:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	3301      	adds	r3, #1
 80038e0:	60bb      	str	r3, [r7, #8]
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d307      	bcc.n	80038f8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1f2      	bne.n	80038dc <HAL_DMA_IRQHandler+0x2cc>
 80038f6:	e000      	b.n	80038fa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80038f8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800390e:	2b00      	cmp	r3, #0
 8003910:	d005      	beq.n	800391e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	4798      	blx	r3
 800391a:	e000      	b.n	800391e <HAL_DMA_IRQHandler+0x30e>
        return;
 800391c:	bf00      	nop
    }
  }
}
 800391e:	3718      	adds	r7, #24
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
 8003930:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003940:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	2b40      	cmp	r3, #64	@ 0x40
 8003950:	d108      	bne.n	8003964 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003962:	e007      	b.n	8003974 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	60da      	str	r2, [r3, #12]
}
 8003974:	bf00      	nop
 8003976:	3714      	adds	r7, #20
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	b2db      	uxtb	r3, r3
 800398e:	3b10      	subs	r3, #16
 8003990:	4a14      	ldr	r2, [pc, #80]	@ (80039e4 <DMA_CalcBaseAndBitshift+0x64>)
 8003992:	fba2 2303 	umull	r2, r3, r2, r3
 8003996:	091b      	lsrs	r3, r3, #4
 8003998:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800399a:	4a13      	ldr	r2, [pc, #76]	@ (80039e8 <DMA_CalcBaseAndBitshift+0x68>)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4413      	add	r3, r2
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	461a      	mov	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2b03      	cmp	r3, #3
 80039ac:	d909      	bls.n	80039c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80039b6:	f023 0303 	bic.w	r3, r3, #3
 80039ba:	1d1a      	adds	r2, r3, #4
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	659a      	str	r2, [r3, #88]	@ 0x58
 80039c0:	e007      	b.n	80039d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80039ca:	f023 0303 	bic.w	r3, r3, #3
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	aaaaaaab 	.word	0xaaaaaaab
 80039e8:	08010d3c 	.word	0x08010d3c

080039ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039f4:	2300      	movs	r3, #0
 80039f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d11f      	bne.n	8003a46 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	2b03      	cmp	r3, #3
 8003a0a:	d856      	bhi.n	8003aba <DMA_CheckFifoParam+0xce>
 8003a0c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a14 <DMA_CheckFifoParam+0x28>)
 8003a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a12:	bf00      	nop
 8003a14:	08003a25 	.word	0x08003a25
 8003a18:	08003a37 	.word	0x08003a37
 8003a1c:	08003a25 	.word	0x08003a25
 8003a20:	08003abb 	.word	0x08003abb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d046      	beq.n	8003abe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a34:	e043      	b.n	8003abe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a3a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003a3e:	d140      	bne.n	8003ac2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a44:	e03d      	b.n	8003ac2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a4e:	d121      	bne.n	8003a94 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	2b03      	cmp	r3, #3
 8003a54:	d837      	bhi.n	8003ac6 <DMA_CheckFifoParam+0xda>
 8003a56:	a201      	add	r2, pc, #4	@ (adr r2, 8003a5c <DMA_CheckFifoParam+0x70>)
 8003a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5c:	08003a6d 	.word	0x08003a6d
 8003a60:	08003a73 	.word	0x08003a73
 8003a64:	08003a6d 	.word	0x08003a6d
 8003a68:	08003a85 	.word	0x08003a85
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a70:	e030      	b.n	8003ad4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a76:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d025      	beq.n	8003aca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a82:	e022      	b.n	8003aca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a88:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003a8c:	d11f      	bne.n	8003ace <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a92:	e01c      	b.n	8003ace <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d903      	bls.n	8003aa2 <DMA_CheckFifoParam+0xb6>
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	2b03      	cmp	r3, #3
 8003a9e:	d003      	beq.n	8003aa8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003aa0:	e018      	b.n	8003ad4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	73fb      	strb	r3, [r7, #15]
      break;
 8003aa6:	e015      	b.n	8003ad4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00e      	beq.n	8003ad2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ab8:	e00b      	b.n	8003ad2 <DMA_CheckFifoParam+0xe6>
      break;
 8003aba:	bf00      	nop
 8003abc:	e00a      	b.n	8003ad4 <DMA_CheckFifoParam+0xe8>
      break;
 8003abe:	bf00      	nop
 8003ac0:	e008      	b.n	8003ad4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ac2:	bf00      	nop
 8003ac4:	e006      	b.n	8003ad4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ac6:	bf00      	nop
 8003ac8:	e004      	b.n	8003ad4 <DMA_CheckFifoParam+0xe8>
      break;
 8003aca:	bf00      	nop
 8003acc:	e002      	b.n	8003ad4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003ace:	bf00      	nop
 8003ad0:	e000      	b.n	8003ad4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ad2:	bf00      	nop
    }
  } 
  
  return status; 
 8003ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3714      	adds	r7, #20
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop

08003ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b089      	sub	sp, #36	@ 0x24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003aee:	2300      	movs	r3, #0
 8003af0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003af2:	2300      	movs	r3, #0
 8003af4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003af6:	2300      	movs	r3, #0
 8003af8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003afa:	2300      	movs	r3, #0
 8003afc:	61fb      	str	r3, [r7, #28]
 8003afe:	e165      	b.n	8003dcc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b00:	2201      	movs	r2, #1
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	fa02 f303 	lsl.w	r3, r2, r3
 8003b08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	4013      	ands	r3, r2
 8003b12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	f040 8154 	bne.w	8003dc6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f003 0303 	and.w	r3, r3, #3
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d005      	beq.n	8003b36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d130      	bne.n	8003b98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	2203      	movs	r2, #3
 8003b42:	fa02 f303 	lsl.w	r3, r2, r3
 8003b46:	43db      	mvns	r3, r3
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	68da      	ldr	r2, [r3, #12]
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	005b      	lsls	r3, r3, #1
 8003b56:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	fa02 f303 	lsl.w	r3, r2, r3
 8003b74:	43db      	mvns	r3, r3
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	091b      	lsrs	r3, r3, #4
 8003b82:	f003 0201 	and.w	r2, r3, #1
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f003 0303 	and.w	r3, r3, #3
 8003ba0:	2b03      	cmp	r3, #3
 8003ba2:	d017      	beq.n	8003bd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	2203      	movs	r2, #3
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	43db      	mvns	r3, r3
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f003 0303 	and.w	r3, r3, #3
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d123      	bne.n	8003c28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	08da      	lsrs	r2, r3, #3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	3208      	adds	r2, #8
 8003be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	f003 0307 	and.w	r3, r3, #7
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	220f      	movs	r2, #15
 8003bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfc:	43db      	mvns	r3, r3
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	4013      	ands	r3, r2
 8003c02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	691a      	ldr	r2, [r3, #16]
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	f003 0307 	and.w	r3, r3, #7
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	fa02 f303 	lsl.w	r3, r2, r3
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	08da      	lsrs	r2, r3, #3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	3208      	adds	r2, #8
 8003c22:	69b9      	ldr	r1, [r7, #24]
 8003c24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	2203      	movs	r2, #3
 8003c34:	fa02 f303 	lsl.w	r3, r2, r3
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	69ba      	ldr	r2, [r7, #24]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f003 0203 	and.w	r2, r3, #3
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 80ae 	beq.w	8003dc6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	60fb      	str	r3, [r7, #12]
 8003c6e:	4b5d      	ldr	r3, [pc, #372]	@ (8003de4 <HAL_GPIO_Init+0x300>)
 8003c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c72:	4a5c      	ldr	r2, [pc, #368]	@ (8003de4 <HAL_GPIO_Init+0x300>)
 8003c74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c78:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c7a:	4b5a      	ldr	r3, [pc, #360]	@ (8003de4 <HAL_GPIO_Init+0x300>)
 8003c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c82:	60fb      	str	r3, [r7, #12]
 8003c84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c86:	4a58      	ldr	r2, [pc, #352]	@ (8003de8 <HAL_GPIO_Init+0x304>)
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	089b      	lsrs	r3, r3, #2
 8003c8c:	3302      	adds	r3, #2
 8003c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	220f      	movs	r2, #15
 8003c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca2:	43db      	mvns	r3, r3
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a4f      	ldr	r2, [pc, #316]	@ (8003dec <HAL_GPIO_Init+0x308>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d025      	beq.n	8003cfe <HAL_GPIO_Init+0x21a>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a4e      	ldr	r2, [pc, #312]	@ (8003df0 <HAL_GPIO_Init+0x30c>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d01f      	beq.n	8003cfa <HAL_GPIO_Init+0x216>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a4d      	ldr	r2, [pc, #308]	@ (8003df4 <HAL_GPIO_Init+0x310>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d019      	beq.n	8003cf6 <HAL_GPIO_Init+0x212>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a4c      	ldr	r2, [pc, #304]	@ (8003df8 <HAL_GPIO_Init+0x314>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d013      	beq.n	8003cf2 <HAL_GPIO_Init+0x20e>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a4b      	ldr	r2, [pc, #300]	@ (8003dfc <HAL_GPIO_Init+0x318>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d00d      	beq.n	8003cee <HAL_GPIO_Init+0x20a>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a4a      	ldr	r2, [pc, #296]	@ (8003e00 <HAL_GPIO_Init+0x31c>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d007      	beq.n	8003cea <HAL_GPIO_Init+0x206>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a49      	ldr	r2, [pc, #292]	@ (8003e04 <HAL_GPIO_Init+0x320>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d101      	bne.n	8003ce6 <HAL_GPIO_Init+0x202>
 8003ce2:	2306      	movs	r3, #6
 8003ce4:	e00c      	b.n	8003d00 <HAL_GPIO_Init+0x21c>
 8003ce6:	2307      	movs	r3, #7
 8003ce8:	e00a      	b.n	8003d00 <HAL_GPIO_Init+0x21c>
 8003cea:	2305      	movs	r3, #5
 8003cec:	e008      	b.n	8003d00 <HAL_GPIO_Init+0x21c>
 8003cee:	2304      	movs	r3, #4
 8003cf0:	e006      	b.n	8003d00 <HAL_GPIO_Init+0x21c>
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e004      	b.n	8003d00 <HAL_GPIO_Init+0x21c>
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	e002      	b.n	8003d00 <HAL_GPIO_Init+0x21c>
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e000      	b.n	8003d00 <HAL_GPIO_Init+0x21c>
 8003cfe:	2300      	movs	r3, #0
 8003d00:	69fa      	ldr	r2, [r7, #28]
 8003d02:	f002 0203 	and.w	r2, r2, #3
 8003d06:	0092      	lsls	r2, r2, #2
 8003d08:	4093      	lsls	r3, r2
 8003d0a:	69ba      	ldr	r2, [r7, #24]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d10:	4935      	ldr	r1, [pc, #212]	@ (8003de8 <HAL_GPIO_Init+0x304>)
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	089b      	lsrs	r3, r3, #2
 8003d16:	3302      	adds	r3, #2
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d1e:	4b3a      	ldr	r3, [pc, #232]	@ (8003e08 <HAL_GPIO_Init+0x324>)
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	43db      	mvns	r3, r3
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d003      	beq.n	8003d42 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d42:	4a31      	ldr	r2, [pc, #196]	@ (8003e08 <HAL_GPIO_Init+0x324>)
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d48:	4b2f      	ldr	r3, [pc, #188]	@ (8003e08 <HAL_GPIO_Init+0x324>)
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	43db      	mvns	r3, r3
 8003d52:	69ba      	ldr	r2, [r7, #24]
 8003d54:	4013      	ands	r3, r2
 8003d56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d003      	beq.n	8003d6c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d6c:	4a26      	ldr	r2, [pc, #152]	@ (8003e08 <HAL_GPIO_Init+0x324>)
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d72:	4b25      	ldr	r3, [pc, #148]	@ (8003e08 <HAL_GPIO_Init+0x324>)
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	43db      	mvns	r3, r3
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	4013      	ands	r3, r2
 8003d80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d003      	beq.n	8003d96 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d96:	4a1c      	ldr	r2, [pc, #112]	@ (8003e08 <HAL_GPIO_Init+0x324>)
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d9c:	4b1a      	ldr	r3, [pc, #104]	@ (8003e08 <HAL_GPIO_Init+0x324>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	43db      	mvns	r3, r3
 8003da6:	69ba      	ldr	r2, [r7, #24]
 8003da8:	4013      	ands	r3, r2
 8003daa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d003      	beq.n	8003dc0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003dc0:	4a11      	ldr	r2, [pc, #68]	@ (8003e08 <HAL_GPIO_Init+0x324>)
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	61fb      	str	r3, [r7, #28]
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	2b0f      	cmp	r3, #15
 8003dd0:	f67f ae96 	bls.w	8003b00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003dd4:	bf00      	nop
 8003dd6:	bf00      	nop
 8003dd8:	3724      	adds	r7, #36	@ 0x24
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	40023800 	.word	0x40023800
 8003de8:	40013800 	.word	0x40013800
 8003dec:	40020000 	.word	0x40020000
 8003df0:	40020400 	.word	0x40020400
 8003df4:	40020800 	.word	0x40020800
 8003df8:	40020c00 	.word	0x40020c00
 8003dfc:	40021000 	.word	0x40021000
 8003e00:	40021400 	.word	0x40021400
 8003e04:	40021800 	.word	0x40021800
 8003e08:	40013c00 	.word	0x40013c00

08003e0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	460b      	mov	r3, r1
 8003e16:	807b      	strh	r3, [r7, #2]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e1c:	787b      	ldrb	r3, [r7, #1]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d003      	beq.n	8003e2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e22:	887a      	ldrh	r2, [r7, #2]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e28:	e003      	b.n	8003e32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e2a:	887b      	ldrh	r3, [r7, #2]
 8003e2c:	041a      	lsls	r2, r3, #16
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	619a      	str	r2, [r3, #24]
}
 8003e32:	bf00      	nop
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr

08003e3e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b086      	sub	sp, #24
 8003e42:	af02      	add	r7, sp, #8
 8003e44:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d101      	bne.n	8003e50 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e108      	b.n	8004062 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d106      	bne.n	8003e70 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f007 fe38 	bl	800bae0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2203      	movs	r2, #3
 8003e74:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e7e:	d102      	bne.n	8003e86 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f004 fa4f 	bl	800832e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6818      	ldr	r0, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	7c1a      	ldrb	r2, [r3, #16]
 8003e98:	f88d 2000 	strb.w	r2, [sp]
 8003e9c:	3304      	adds	r3, #4
 8003e9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ea0:	f004 f92e 	bl	8008100 <USB_CoreInit>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d005      	beq.n	8003eb6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2202      	movs	r2, #2
 8003eae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e0d5      	b.n	8004062 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2100      	movs	r1, #0
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f004 fa47 	bl	8008350 <USB_SetCurrentMode>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d005      	beq.n	8003ed4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2202      	movs	r2, #2
 8003ecc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e0c6      	b.n	8004062 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	73fb      	strb	r3, [r7, #15]
 8003ed8:	e04a      	b.n	8003f70 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003eda:	7bfa      	ldrb	r2, [r7, #15]
 8003edc:	6879      	ldr	r1, [r7, #4]
 8003ede:	4613      	mov	r3, r2
 8003ee0:	00db      	lsls	r3, r3, #3
 8003ee2:	4413      	add	r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	440b      	add	r3, r1
 8003ee8:	3315      	adds	r3, #21
 8003eea:	2201      	movs	r2, #1
 8003eec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003eee:	7bfa      	ldrb	r2, [r7, #15]
 8003ef0:	6879      	ldr	r1, [r7, #4]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	00db      	lsls	r3, r3, #3
 8003ef6:	4413      	add	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	440b      	add	r3, r1
 8003efc:	3314      	adds	r3, #20
 8003efe:	7bfa      	ldrb	r2, [r7, #15]
 8003f00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003f02:	7bfa      	ldrb	r2, [r7, #15]
 8003f04:	7bfb      	ldrb	r3, [r7, #15]
 8003f06:	b298      	uxth	r0, r3
 8003f08:	6879      	ldr	r1, [r7, #4]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	00db      	lsls	r3, r3, #3
 8003f0e:	4413      	add	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	440b      	add	r3, r1
 8003f14:	332e      	adds	r3, #46	@ 0x2e
 8003f16:	4602      	mov	r2, r0
 8003f18:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003f1a:	7bfa      	ldrb	r2, [r7, #15]
 8003f1c:	6879      	ldr	r1, [r7, #4]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	00db      	lsls	r3, r3, #3
 8003f22:	4413      	add	r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	440b      	add	r3, r1
 8003f28:	3318      	adds	r3, #24
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003f2e:	7bfa      	ldrb	r2, [r7, #15]
 8003f30:	6879      	ldr	r1, [r7, #4]
 8003f32:	4613      	mov	r3, r2
 8003f34:	00db      	lsls	r3, r3, #3
 8003f36:	4413      	add	r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	440b      	add	r3, r1
 8003f3c:	331c      	adds	r3, #28
 8003f3e:	2200      	movs	r2, #0
 8003f40:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003f42:	7bfa      	ldrb	r2, [r7, #15]
 8003f44:	6879      	ldr	r1, [r7, #4]
 8003f46:	4613      	mov	r3, r2
 8003f48:	00db      	lsls	r3, r3, #3
 8003f4a:	4413      	add	r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	440b      	add	r3, r1
 8003f50:	3320      	adds	r3, #32
 8003f52:	2200      	movs	r2, #0
 8003f54:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003f56:	7bfa      	ldrb	r2, [r7, #15]
 8003f58:	6879      	ldr	r1, [r7, #4]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	00db      	lsls	r3, r3, #3
 8003f5e:	4413      	add	r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	440b      	add	r3, r1
 8003f64:	3324      	adds	r3, #36	@ 0x24
 8003f66:	2200      	movs	r2, #0
 8003f68:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f6a:	7bfb      	ldrb	r3, [r7, #15]
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	73fb      	strb	r3, [r7, #15]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	791b      	ldrb	r3, [r3, #4]
 8003f74:	7bfa      	ldrb	r2, [r7, #15]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d3af      	bcc.n	8003eda <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	73fb      	strb	r3, [r7, #15]
 8003f7e:	e044      	b.n	800400a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003f80:	7bfa      	ldrb	r2, [r7, #15]
 8003f82:	6879      	ldr	r1, [r7, #4]
 8003f84:	4613      	mov	r3, r2
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	4413      	add	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	440b      	add	r3, r1
 8003f8e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003f92:	2200      	movs	r2, #0
 8003f94:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003f96:	7bfa      	ldrb	r2, [r7, #15]
 8003f98:	6879      	ldr	r1, [r7, #4]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	00db      	lsls	r3, r3, #3
 8003f9e:	4413      	add	r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	440b      	add	r3, r1
 8003fa4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003fa8:	7bfa      	ldrb	r2, [r7, #15]
 8003faa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003fac:	7bfa      	ldrb	r2, [r7, #15]
 8003fae:	6879      	ldr	r1, [r7, #4]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	4413      	add	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	440b      	add	r3, r1
 8003fba:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003fc2:	7bfa      	ldrb	r2, [r7, #15]
 8003fc4:	6879      	ldr	r1, [r7, #4]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	4413      	add	r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	440b      	add	r3, r1
 8003fd0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003fd8:	7bfa      	ldrb	r2, [r7, #15]
 8003fda:	6879      	ldr	r1, [r7, #4]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	4413      	add	r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	440b      	add	r3, r1
 8003fe6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003fea:	2200      	movs	r2, #0
 8003fec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003fee:	7bfa      	ldrb	r2, [r7, #15]
 8003ff0:	6879      	ldr	r1, [r7, #4]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	00db      	lsls	r3, r3, #3
 8003ff6:	4413      	add	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	440b      	add	r3, r1
 8003ffc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004000:	2200      	movs	r2, #0
 8004002:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004004:	7bfb      	ldrb	r3, [r7, #15]
 8004006:	3301      	adds	r3, #1
 8004008:	73fb      	strb	r3, [r7, #15]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	791b      	ldrb	r3, [r3, #4]
 800400e:	7bfa      	ldrb	r2, [r7, #15]
 8004010:	429a      	cmp	r2, r3
 8004012:	d3b5      	bcc.n	8003f80 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6818      	ldr	r0, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	7c1a      	ldrb	r2, [r3, #16]
 800401c:	f88d 2000 	strb.w	r2, [sp]
 8004020:	3304      	adds	r3, #4
 8004022:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004024:	f004 f9e0 	bl	80083e8 <USB_DevInit>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d005      	beq.n	800403a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2202      	movs	r2, #2
 8004032:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e013      	b.n	8004062 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	7b1b      	ldrb	r3, [r3, #12]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d102      	bne.n	8004056 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f001 f96f 	bl	8005334 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4618      	mov	r0, r3
 800405c:	f005 fa1d 	bl	800949a <USB_DevDisconnect>

  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800406a:	b580      	push	{r7, lr}
 800406c:	b084      	sub	sp, #16
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800407e:	2b01      	cmp	r3, #1
 8004080:	d101      	bne.n	8004086 <HAL_PCD_Start+0x1c>
 8004082:	2302      	movs	r3, #2
 8004084:	e022      	b.n	80040cc <HAL_PCD_Start+0x62>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2201      	movs	r2, #1
 800408a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004096:	2b00      	cmp	r3, #0
 8004098:	d009      	beq.n	80040ae <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d105      	bne.n	80040ae <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040a6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f004 f92a 	bl	800830c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4618      	mov	r0, r3
 80040be:	f005 f9cb 	bl	8009458 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80040d4:	b590      	push	{r4, r7, lr}
 80040d6:	b08d      	sub	sp, #52	@ 0x34
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040e2:	6a3b      	ldr	r3, [r7, #32]
 80040e4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4618      	mov	r0, r3
 80040ec:	f005 fa89 	bl	8009602 <USB_GetMode>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f040 84b9 	bne.w	8004a6a <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f005 f9ed 	bl	80094dc <USB_ReadInterrupts>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	f000 84af 	beq.w	8004a68 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	0a1b      	lsrs	r3, r3, #8
 8004114:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	f005 f9da 	bl	80094dc <USB_ReadInterrupts>
 8004128:	4603      	mov	r3, r0
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b02      	cmp	r3, #2
 8004130:	d107      	bne.n	8004142 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	695a      	ldr	r2, [r3, #20]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f002 0202 	and.w	r2, r2, #2
 8004140:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4618      	mov	r0, r3
 8004148:	f005 f9c8 	bl	80094dc <USB_ReadInterrupts>
 800414c:	4603      	mov	r3, r0
 800414e:	f003 0310 	and.w	r3, r3, #16
 8004152:	2b10      	cmp	r3, #16
 8004154:	d161      	bne.n	800421a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	699a      	ldr	r2, [r3, #24]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f022 0210 	bic.w	r2, r2, #16
 8004164:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004166:	6a3b      	ldr	r3, [r7, #32]
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	f003 020f 	and.w	r2, r3, #15
 8004172:	4613      	mov	r3, r2
 8004174:	00db      	lsls	r3, r3, #3
 8004176:	4413      	add	r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	4413      	add	r3, r2
 8004182:	3304      	adds	r3, #4
 8004184:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	0c5b      	lsrs	r3, r3, #17
 800418a:	f003 030f 	and.w	r3, r3, #15
 800418e:	2b02      	cmp	r3, #2
 8004190:	d124      	bne.n	80041dc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004192:	69ba      	ldr	r2, [r7, #24]
 8004194:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004198:	4013      	ands	r3, r2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d035      	beq.n	800420a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	091b      	lsrs	r3, r3, #4
 80041a6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80041a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	461a      	mov	r2, r3
 80041b0:	6a38      	ldr	r0, [r7, #32]
 80041b2:	f004 ffff 	bl	80091b4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	68da      	ldr	r2, [r3, #12]
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	091b      	lsrs	r3, r3, #4
 80041be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041c2:	441a      	add	r2, r3
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	695a      	ldr	r2, [r3, #20]
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	091b      	lsrs	r3, r3, #4
 80041d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041d4:	441a      	add	r2, r3
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	615a      	str	r2, [r3, #20]
 80041da:	e016      	b.n	800420a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	0c5b      	lsrs	r3, r3, #17
 80041e0:	f003 030f 	and.w	r3, r3, #15
 80041e4:	2b06      	cmp	r3, #6
 80041e6:	d110      	bne.n	800420a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80041ee:	2208      	movs	r2, #8
 80041f0:	4619      	mov	r1, r3
 80041f2:	6a38      	ldr	r0, [r7, #32]
 80041f4:	f004 ffde 	bl	80091b4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	695a      	ldr	r2, [r3, #20]
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	091b      	lsrs	r3, r3, #4
 8004200:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004204:	441a      	add	r2, r3
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	699a      	ldr	r2, [r3, #24]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f042 0210 	orr.w	r2, r2, #16
 8004218:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4618      	mov	r0, r3
 8004220:	f005 f95c 	bl	80094dc <USB_ReadInterrupts>
 8004224:	4603      	mov	r3, r0
 8004226:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800422a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800422e:	f040 80a7 	bne.w	8004380 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004232:	2300      	movs	r3, #0
 8004234:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4618      	mov	r0, r3
 800423c:	f005 f961 	bl	8009502 <USB_ReadDevAllOutEpInterrupt>
 8004240:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004242:	e099      	b.n	8004378 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	f000 808e 	beq.w	800436c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004256:	b2d2      	uxtb	r2, r2
 8004258:	4611      	mov	r1, r2
 800425a:	4618      	mov	r0, r3
 800425c:	f005 f985 	bl	800956a <USB_ReadDevOutEPInterrupt>
 8004260:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	f003 0301 	and.w	r3, r3, #1
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00c      	beq.n	8004286 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800426c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800426e:	015a      	lsls	r2, r3, #5
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	4413      	add	r3, r2
 8004274:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004278:	461a      	mov	r2, r3
 800427a:	2301      	movs	r3, #1
 800427c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800427e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 fed1 	bl	8005028 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	f003 0308 	and.w	r3, r3, #8
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00c      	beq.n	80042aa <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004292:	015a      	lsls	r2, r3, #5
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	4413      	add	r3, r2
 8004298:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800429c:	461a      	mov	r2, r3
 800429e:	2308      	movs	r3, #8
 80042a0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80042a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 ffa7 	bl	80051f8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	f003 0310 	and.w	r3, r3, #16
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d008      	beq.n	80042c6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80042b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b6:	015a      	lsls	r2, r3, #5
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	4413      	add	r3, r2
 80042bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042c0:	461a      	mov	r2, r3
 80042c2:	2310      	movs	r3, #16
 80042c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d030      	beq.n	8004332 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80042d0:	6a3b      	ldr	r3, [r7, #32]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042d8:	2b80      	cmp	r3, #128	@ 0x80
 80042da:	d109      	bne.n	80042f0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	69fa      	ldr	r2, [r7, #28]
 80042e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80042ee:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80042f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042f2:	4613      	mov	r3, r2
 80042f4:	00db      	lsls	r3, r3, #3
 80042f6:	4413      	add	r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	4413      	add	r3, r2
 8004302:	3304      	adds	r3, #4
 8004304:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	78db      	ldrb	r3, [r3, #3]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d108      	bne.n	8004320 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	2200      	movs	r2, #0
 8004312:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004316:	b2db      	uxtb	r3, r3
 8004318:	4619      	mov	r1, r3
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f007 fcfc 	bl	800bd18 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004322:	015a      	lsls	r2, r3, #5
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	4413      	add	r3, r2
 8004328:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800432c:	461a      	mov	r2, r3
 800432e:	2302      	movs	r3, #2
 8004330:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	f003 0320 	and.w	r3, r3, #32
 8004338:	2b00      	cmp	r3, #0
 800433a:	d008      	beq.n	800434e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800433c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433e:	015a      	lsls	r2, r3, #5
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	4413      	add	r3, r2
 8004344:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004348:	461a      	mov	r2, r3
 800434a:	2320      	movs	r3, #32
 800434c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d009      	beq.n	800436c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435a:	015a      	lsls	r2, r3, #5
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	4413      	add	r3, r2
 8004360:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004364:	461a      	mov	r2, r3
 8004366:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800436a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800436c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800436e:	3301      	adds	r3, #1
 8004370:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004374:	085b      	lsrs	r3, r3, #1
 8004376:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800437a:	2b00      	cmp	r3, #0
 800437c:	f47f af62 	bne.w	8004244 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4618      	mov	r0, r3
 8004386:	f005 f8a9 	bl	80094dc <USB_ReadInterrupts>
 800438a:	4603      	mov	r3, r0
 800438c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004390:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004394:	f040 80db 	bne.w	800454e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4618      	mov	r0, r3
 800439e:	f005 f8ca 	bl	8009536 <USB_ReadDevAllInEpInterrupt>
 80043a2:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80043a4:	2300      	movs	r3, #0
 80043a6:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80043a8:	e0cd      	b.n	8004546 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80043aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 80c2 	beq.w	800453a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043bc:	b2d2      	uxtb	r2, r2
 80043be:	4611      	mov	r1, r2
 80043c0:	4618      	mov	r0, r3
 80043c2:	f005 f8f0 	bl	80095a6 <USB_ReadDevInEPInterrupt>
 80043c6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d057      	beq.n	8004482 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80043d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d4:	f003 030f 	and.w	r3, r3, #15
 80043d8:	2201      	movs	r2, #1
 80043da:	fa02 f303 	lsl.w	r3, r2, r3
 80043de:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	43db      	mvns	r3, r3
 80043ec:	69f9      	ldr	r1, [r7, #28]
 80043ee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80043f2:	4013      	ands	r3, r2
 80043f4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80043f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f8:	015a      	lsls	r2, r3, #5
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	4413      	add	r3, r2
 80043fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004402:	461a      	mov	r2, r3
 8004404:	2301      	movs	r3, #1
 8004406:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	799b      	ldrb	r3, [r3, #6]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d132      	bne.n	8004476 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004410:	6879      	ldr	r1, [r7, #4]
 8004412:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004414:	4613      	mov	r3, r2
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	4413      	add	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	440b      	add	r3, r1
 800441e:	3320      	adds	r3, #32
 8004420:	6819      	ldr	r1, [r3, #0]
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004426:	4613      	mov	r3, r2
 8004428:	00db      	lsls	r3, r3, #3
 800442a:	4413      	add	r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	4403      	add	r3, r0
 8004430:	331c      	adds	r3, #28
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4419      	add	r1, r3
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800443a:	4613      	mov	r3, r2
 800443c:	00db      	lsls	r3, r3, #3
 800443e:	4413      	add	r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	4403      	add	r3, r0
 8004444:	3320      	adds	r3, #32
 8004446:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800444a:	2b00      	cmp	r3, #0
 800444c:	d113      	bne.n	8004476 <HAL_PCD_IRQHandler+0x3a2>
 800444e:	6879      	ldr	r1, [r7, #4]
 8004450:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004452:	4613      	mov	r3, r2
 8004454:	00db      	lsls	r3, r3, #3
 8004456:	4413      	add	r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	440b      	add	r3, r1
 800445c:	3324      	adds	r3, #36	@ 0x24
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d108      	bne.n	8004476 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6818      	ldr	r0, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800446e:	461a      	mov	r2, r3
 8004470:	2101      	movs	r1, #1
 8004472:	f005 f8f7 	bl	8009664 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004478:	b2db      	uxtb	r3, r3
 800447a:	4619      	mov	r1, r3
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f007 fbc6 	bl	800bc0e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	f003 0308 	and.w	r3, r3, #8
 8004488:	2b00      	cmp	r3, #0
 800448a:	d008      	beq.n	800449e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800448c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448e:	015a      	lsls	r2, r3, #5
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	4413      	add	r3, r2
 8004494:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004498:	461a      	mov	r2, r3
 800449a:	2308      	movs	r3, #8
 800449c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	f003 0310 	and.w	r3, r3, #16
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d008      	beq.n	80044ba <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80044a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044aa:	015a      	lsls	r2, r3, #5
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	4413      	add	r3, r2
 80044b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044b4:	461a      	mov	r2, r3
 80044b6:	2310      	movs	r3, #16
 80044b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d008      	beq.n	80044d6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80044c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c6:	015a      	lsls	r2, r3, #5
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	4413      	add	r3, r2
 80044cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044d0:	461a      	mov	r2, r3
 80044d2:	2340      	movs	r3, #64	@ 0x40
 80044d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d023      	beq.n	8004528 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80044e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044e2:	6a38      	ldr	r0, [r7, #32]
 80044e4:	f004 f8de 	bl	80086a4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80044e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044ea:	4613      	mov	r3, r2
 80044ec:	00db      	lsls	r3, r3, #3
 80044ee:	4413      	add	r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	3310      	adds	r3, #16
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	4413      	add	r3, r2
 80044f8:	3304      	adds	r3, #4
 80044fa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	78db      	ldrb	r3, [r3, #3]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d108      	bne.n	8004516 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	2200      	movs	r2, #0
 8004508:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800450a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800450c:	b2db      	uxtb	r3, r3
 800450e:	4619      	mov	r1, r3
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f007 fc13 	bl	800bd3c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004518:	015a      	lsls	r2, r3, #5
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	4413      	add	r3, r2
 800451e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004522:	461a      	mov	r2, r3
 8004524:	2302      	movs	r3, #2
 8004526:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800452e:	2b00      	cmp	r3, #0
 8004530:	d003      	beq.n	800453a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004532:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 fcea 	bl	8004f0e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800453a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453c:	3301      	adds	r3, #1
 800453e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004542:	085b      	lsrs	r3, r3, #1
 8004544:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004548:	2b00      	cmp	r3, #0
 800454a:	f47f af2e 	bne.w	80043aa <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4618      	mov	r0, r3
 8004554:	f004 ffc2 	bl	80094dc <USB_ReadInterrupts>
 8004558:	4603      	mov	r3, r0
 800455a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800455e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004562:	d122      	bne.n	80045aa <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	69fa      	ldr	r2, [r7, #28]
 800456e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004572:	f023 0301 	bic.w	r3, r3, #1
 8004576:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800457e:	2b01      	cmp	r3, #1
 8004580:	d108      	bne.n	8004594 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800458a:	2100      	movs	r1, #0
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f007 fd8d 	bl	800c0ac <HAL_PCDEx_LPM_Callback>
 8004592:	e002      	b.n	800459a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f007 fbb1 	bl	800bcfc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	695a      	ldr	r2, [r3, #20]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80045a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f004 ff94 	bl	80094dc <USB_ReadInterrupts>
 80045b4:	4603      	mov	r3, r0
 80045b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045be:	d112      	bne.n	80045e6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d102      	bne.n	80045d6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f007 fb6d 	bl	800bcb0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	695a      	ldr	r2, [r3, #20]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80045e4:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f004 ff76 	bl	80094dc <USB_ReadInterrupts>
 80045f0:	4603      	mov	r3, r0
 80045f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045fa:	d121      	bne.n	8004640 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	695a      	ldr	r2, [r3, #20]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800460a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004612:	2b00      	cmp	r3, #0
 8004614:	d111      	bne.n	800463a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2201      	movs	r2, #1
 800461a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004624:	089b      	lsrs	r3, r3, #2
 8004626:	f003 020f 	and.w	r2, r3, #15
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004630:	2101      	movs	r1, #1
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f007 fd3a 	bl	800c0ac <HAL_PCDEx_LPM_Callback>
 8004638:	e002      	b.n	8004640 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f007 fb38 	bl	800bcb0 <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4618      	mov	r0, r3
 8004646:	f004 ff49 	bl	80094dc <USB_ReadInterrupts>
 800464a:	4603      	mov	r3, r0
 800464c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004650:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004654:	f040 80b7 	bne.w	80047c6 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	69fa      	ldr	r2, [r7, #28]
 8004662:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004666:	f023 0301 	bic.w	r3, r3, #1
 800466a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2110      	movs	r1, #16
 8004672:	4618      	mov	r0, r3
 8004674:	f004 f816 	bl	80086a4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004678:	2300      	movs	r3, #0
 800467a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800467c:	e046      	b.n	800470c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800467e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004680:	015a      	lsls	r2, r3, #5
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	4413      	add	r3, r2
 8004686:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800468a:	461a      	mov	r2, r3
 800468c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004690:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004694:	015a      	lsls	r2, r3, #5
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	4413      	add	r3, r2
 800469a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046a2:	0151      	lsls	r1, r2, #5
 80046a4:	69fa      	ldr	r2, [r7, #28]
 80046a6:	440a      	add	r2, r1
 80046a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046ac:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80046b0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80046b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046b4:	015a      	lsls	r2, r3, #5
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	4413      	add	r3, r2
 80046ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046be:	461a      	mov	r2, r3
 80046c0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80046c4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80046c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046c8:	015a      	lsls	r2, r3, #5
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	4413      	add	r3, r2
 80046ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046d6:	0151      	lsls	r1, r2, #5
 80046d8:	69fa      	ldr	r2, [r7, #28]
 80046da:	440a      	add	r2, r1
 80046dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80046e0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80046e4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80046e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046e8:	015a      	lsls	r2, r3, #5
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	4413      	add	r3, r2
 80046ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046f6:	0151      	lsls	r1, r2, #5
 80046f8:	69fa      	ldr	r2, [r7, #28]
 80046fa:	440a      	add	r2, r1
 80046fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004700:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004704:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004708:	3301      	adds	r3, #1
 800470a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	791b      	ldrb	r3, [r3, #4]
 8004710:	461a      	mov	r2, r3
 8004712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004714:	4293      	cmp	r3, r2
 8004716:	d3b2      	bcc.n	800467e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800471e:	69db      	ldr	r3, [r3, #28]
 8004720:	69fa      	ldr	r2, [r7, #28]
 8004722:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004726:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800472a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	7bdb      	ldrb	r3, [r3, #15]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d016      	beq.n	8004762 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800473a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800473e:	69fa      	ldr	r2, [r7, #28]
 8004740:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004744:	f043 030b 	orr.w	r3, r3, #11
 8004748:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004752:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004754:	69fa      	ldr	r2, [r7, #28]
 8004756:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800475a:	f043 030b 	orr.w	r3, r3, #11
 800475e:	6453      	str	r3, [r2, #68]	@ 0x44
 8004760:	e015      	b.n	800478e <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	69fa      	ldr	r2, [r7, #28]
 800476c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004770:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004774:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004778:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	69fa      	ldr	r2, [r7, #28]
 8004784:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004788:	f043 030b 	orr.w	r3, r3, #11
 800478c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	69fa      	ldr	r2, [r7, #28]
 8004798:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800479c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80047a0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6818      	ldr	r0, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80047b0:	461a      	mov	r2, r3
 80047b2:	f004 ff57 	bl	8009664 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	695a      	ldr	r2, [r3, #20]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80047c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f004 fe86 	bl	80094dc <USB_ReadInterrupts>
 80047d0:	4603      	mov	r3, r0
 80047d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047da:	d123      	bne.n	8004824 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f004 ff1c 	bl	800961e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4618      	mov	r0, r3
 80047ec:	f003 ffd3 	bl	8008796 <USB_GetDevSpeed>
 80047f0:	4603      	mov	r3, r0
 80047f2:	461a      	mov	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681c      	ldr	r4, [r3, #0]
 80047fc:	f000 fea4 	bl	8005548 <HAL_RCC_GetHCLKFreq>
 8004800:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004806:	461a      	mov	r2, r3
 8004808:	4620      	mov	r0, r4
 800480a:	f003 fcdd 	bl	80081c8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f007 fa25 	bl	800bc5e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	695a      	ldr	r2, [r3, #20]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004822:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4618      	mov	r0, r3
 800482a:	f004 fe57 	bl	80094dc <USB_ReadInterrupts>
 800482e:	4603      	mov	r3, r0
 8004830:	f003 0308 	and.w	r3, r3, #8
 8004834:	2b08      	cmp	r3, #8
 8004836:	d10a      	bne.n	800484e <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f007 fa02 	bl	800bc42 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	695a      	ldr	r2, [r3, #20]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f002 0208 	and.w	r2, r2, #8
 800484c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4618      	mov	r0, r3
 8004854:	f004 fe42 	bl	80094dc <USB_ReadInterrupts>
 8004858:	4603      	mov	r3, r0
 800485a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800485e:	2b80      	cmp	r3, #128	@ 0x80
 8004860:	d123      	bne.n	80048aa <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004862:	6a3b      	ldr	r3, [r7, #32]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800486a:	6a3b      	ldr	r3, [r7, #32]
 800486c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800486e:	2301      	movs	r3, #1
 8004870:	627b      	str	r3, [r7, #36]	@ 0x24
 8004872:	e014      	b.n	800489e <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004874:	6879      	ldr	r1, [r7, #4]
 8004876:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004878:	4613      	mov	r3, r2
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	4413      	add	r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	440b      	add	r3, r1
 8004882:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d105      	bne.n	8004898 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800488c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800488e:	b2db      	uxtb	r3, r3
 8004890:	4619      	mov	r1, r3
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 fb0a 	bl	8004eac <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800489a:	3301      	adds	r3, #1
 800489c:	627b      	str	r3, [r7, #36]	@ 0x24
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	791b      	ldrb	r3, [r3, #4]
 80048a2:	461a      	mov	r2, r3
 80048a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d3e4      	bcc.n	8004874 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f004 fe14 	bl	80094dc <USB_ReadInterrupts>
 80048b4:	4603      	mov	r3, r0
 80048b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048be:	d13c      	bne.n	800493a <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80048c0:	2301      	movs	r3, #1
 80048c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80048c4:	e02b      	b.n	800491e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80048c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c8:	015a      	lsls	r2, r3, #5
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	4413      	add	r3, r2
 80048ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80048d6:	6879      	ldr	r1, [r7, #4]
 80048d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048da:	4613      	mov	r3, r2
 80048dc:	00db      	lsls	r3, r3, #3
 80048de:	4413      	add	r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	440b      	add	r3, r1
 80048e4:	3318      	adds	r3, #24
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d115      	bne.n	8004918 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80048ec:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	da12      	bge.n	8004918 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80048f2:	6879      	ldr	r1, [r7, #4]
 80048f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048f6:	4613      	mov	r3, r2
 80048f8:	00db      	lsls	r3, r3, #3
 80048fa:	4413      	add	r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	440b      	add	r3, r1
 8004900:	3317      	adds	r3, #23
 8004902:	2201      	movs	r2, #1
 8004904:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004908:	b2db      	uxtb	r3, r3
 800490a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800490e:	b2db      	uxtb	r3, r3
 8004910:	4619      	mov	r1, r3
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 faca 	bl	8004eac <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800491a:	3301      	adds	r3, #1
 800491c:	627b      	str	r3, [r7, #36]	@ 0x24
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	791b      	ldrb	r3, [r3, #4]
 8004922:	461a      	mov	r2, r3
 8004924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004926:	4293      	cmp	r3, r2
 8004928:	d3cd      	bcc.n	80048c6 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	695a      	ldr	r2, [r3, #20]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004938:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4618      	mov	r0, r3
 8004940:	f004 fdcc 	bl	80094dc <USB_ReadInterrupts>
 8004944:	4603      	mov	r3, r0
 8004946:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800494a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800494e:	d156      	bne.n	80049fe <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004950:	2301      	movs	r3, #1
 8004952:	627b      	str	r3, [r7, #36]	@ 0x24
 8004954:	e045      	b.n	80049e2 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004958:	015a      	lsls	r2, r3, #5
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	4413      	add	r3, r2
 800495e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004966:	6879      	ldr	r1, [r7, #4]
 8004968:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800496a:	4613      	mov	r3, r2
 800496c:	00db      	lsls	r3, r3, #3
 800496e:	4413      	add	r3, r2
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	440b      	add	r3, r1
 8004974:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d12e      	bne.n	80049dc <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800497e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004980:	2b00      	cmp	r3, #0
 8004982:	da2b      	bge.n	80049dc <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004990:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004994:	429a      	cmp	r2, r3
 8004996:	d121      	bne.n	80049dc <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004998:	6879      	ldr	r1, [r7, #4]
 800499a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800499c:	4613      	mov	r3, r2
 800499e:	00db      	lsls	r3, r3, #3
 80049a0:	4413      	add	r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	440b      	add	r3, r1
 80049a6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80049aa:	2201      	movs	r2, #1
 80049ac:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80049ae:	6a3b      	ldr	r3, [r7, #32]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80049b6:	6a3b      	ldr	r3, [r7, #32]
 80049b8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80049ba:	6a3b      	ldr	r3, [r7, #32]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10a      	bne.n	80049dc <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	69fa      	ldr	r2, [r7, #28]
 80049d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049d4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80049d8:	6053      	str	r3, [r2, #4]
            break;
 80049da:	e008      	b.n	80049ee <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80049dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049de:	3301      	adds	r3, #1
 80049e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	791b      	ldrb	r3, [r3, #4]
 80049e6:	461a      	mov	r2, r3
 80049e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d3b3      	bcc.n	8004956 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	695a      	ldr	r2, [r3, #20]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80049fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f004 fd6a 	bl	80094dc <USB_ReadInterrupts>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a12:	d10a      	bne.n	8004a2a <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f007 f9a3 	bl	800bd60 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	695a      	ldr	r2, [r3, #20]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004a28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f004 fd54 	bl	80094dc <USB_ReadInterrupts>
 8004a34:	4603      	mov	r3, r0
 8004a36:	f003 0304 	and.w	r3, r3, #4
 8004a3a:	2b04      	cmp	r3, #4
 8004a3c:	d115      	bne.n	8004a6a <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	f003 0304 	and.w	r3, r3, #4
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d002      	beq.n	8004a56 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f007 f993 	bl	800bd7c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	6859      	ldr	r1, [r3, #4]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	430a      	orrs	r2, r1
 8004a64:	605a      	str	r2, [r3, #4]
 8004a66:	e000      	b.n	8004a6a <HAL_PCD_IRQHandler+0x996>
      return;
 8004a68:	bf00      	nop
    }
  }
}
 8004a6a:	3734      	adds	r7, #52	@ 0x34
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd90      	pop	{r4, r7, pc}

08004a70 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	460b      	mov	r3, r1
 8004a7a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d101      	bne.n	8004a8a <HAL_PCD_SetAddress+0x1a>
 8004a86:	2302      	movs	r3, #2
 8004a88:	e012      	b.n	8004ab0 <HAL_PCD_SetAddress+0x40>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	78fa      	ldrb	r2, [r7, #3]
 8004a96:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	78fa      	ldrb	r2, [r7, #3]
 8004a9e:	4611      	mov	r1, r2
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f004 fcb3 	bl	800940c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3708      	adds	r7, #8
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	4608      	mov	r0, r1
 8004ac2:	4611      	mov	r1, r2
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	70fb      	strb	r3, [r7, #3]
 8004aca:	460b      	mov	r3, r1
 8004acc:	803b      	strh	r3, [r7, #0]
 8004ace:	4613      	mov	r3, r2
 8004ad0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004ad6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	da0f      	bge.n	8004afe <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ade:	78fb      	ldrb	r3, [r7, #3]
 8004ae0:	f003 020f 	and.w	r2, r3, #15
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	00db      	lsls	r3, r3, #3
 8004ae8:	4413      	add	r3, r2
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	3310      	adds	r3, #16
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	4413      	add	r3, r2
 8004af2:	3304      	adds	r3, #4
 8004af4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2201      	movs	r2, #1
 8004afa:	705a      	strb	r2, [r3, #1]
 8004afc:	e00f      	b.n	8004b1e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004afe:	78fb      	ldrb	r3, [r7, #3]
 8004b00:	f003 020f 	and.w	r2, r3, #15
 8004b04:	4613      	mov	r3, r2
 8004b06:	00db      	lsls	r3, r3, #3
 8004b08:	4413      	add	r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	4413      	add	r3, r2
 8004b14:	3304      	adds	r3, #4
 8004b16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004b1e:	78fb      	ldrb	r3, [r7, #3]
 8004b20:	f003 030f 	and.w	r3, r3, #15
 8004b24:	b2da      	uxtb	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004b2a:	883b      	ldrh	r3, [r7, #0]
 8004b2c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	78ba      	ldrb	r2, [r7, #2]
 8004b38:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	785b      	ldrb	r3, [r3, #1]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d004      	beq.n	8004b4c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	461a      	mov	r2, r3
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004b4c:	78bb      	ldrb	r3, [r7, #2]
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d102      	bne.n	8004b58 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d101      	bne.n	8004b66 <HAL_PCD_EP_Open+0xae>
 8004b62:	2302      	movs	r3, #2
 8004b64:	e00e      	b.n	8004b84 <HAL_PCD_EP_Open+0xcc>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68f9      	ldr	r1, [r7, #12]
 8004b74:	4618      	mov	r0, r3
 8004b76:	f003 fe33 	bl	80087e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004b82:	7afb      	ldrb	r3, [r7, #11]
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3710      	adds	r7, #16
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	460b      	mov	r3, r1
 8004b96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	da0f      	bge.n	8004bc0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ba0:	78fb      	ldrb	r3, [r7, #3]
 8004ba2:	f003 020f 	and.w	r2, r3, #15
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	00db      	lsls	r3, r3, #3
 8004baa:	4413      	add	r3, r2
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	3310      	adds	r3, #16
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	3304      	adds	r3, #4
 8004bb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	705a      	strb	r2, [r3, #1]
 8004bbe:	e00f      	b.n	8004be0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004bc0:	78fb      	ldrb	r3, [r7, #3]
 8004bc2:	f003 020f 	and.w	r2, r3, #15
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	00db      	lsls	r3, r3, #3
 8004bca:	4413      	add	r3, r2
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	3304      	adds	r3, #4
 8004bd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004be0:	78fb      	ldrb	r3, [r7, #3]
 8004be2:	f003 030f 	and.w	r3, r3, #15
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d101      	bne.n	8004bfa <HAL_PCD_EP_Close+0x6e>
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	e00e      	b.n	8004c18 <HAL_PCD_EP_Close+0x8c>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68f9      	ldr	r1, [r7, #12]
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f003 fe71 	bl	80088f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b086      	sub	sp, #24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	607a      	str	r2, [r7, #4]
 8004c2a:	603b      	str	r3, [r7, #0]
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c30:	7afb      	ldrb	r3, [r7, #11]
 8004c32:	f003 020f 	and.w	r2, r3, #15
 8004c36:	4613      	mov	r3, r2
 8004c38:	00db      	lsls	r3, r3, #3
 8004c3a:	4413      	add	r3, r2
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	4413      	add	r3, r2
 8004c46:	3304      	adds	r3, #4
 8004c48:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	683a      	ldr	r2, [r7, #0]
 8004c54:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c62:	7afb      	ldrb	r3, [r7, #11]
 8004c64:	f003 030f 	and.w	r3, r3, #15
 8004c68:	b2da      	uxtb	r2, r3
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	799b      	ldrb	r3, [r3, #6]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d102      	bne.n	8004c7c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6818      	ldr	r0, [r3, #0]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	799b      	ldrb	r3, [r3, #6]
 8004c84:	461a      	mov	r2, r3
 8004c86:	6979      	ldr	r1, [r7, #20]
 8004c88:	f003 ff0e 	bl	8008aa8 <USB_EPStartXfer>

  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3718      	adds	r7, #24
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004c96:	b480      	push	{r7}
 8004c98:	b083      	sub	sp, #12
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004ca2:	78fb      	ldrb	r3, [r7, #3]
 8004ca4:	f003 020f 	and.w	r2, r3, #15
 8004ca8:	6879      	ldr	r1, [r7, #4]
 8004caa:	4613      	mov	r3, r2
 8004cac:	00db      	lsls	r3, r3, #3
 8004cae:	4413      	add	r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	440b      	add	r3, r1
 8004cb4:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004cb8:	681b      	ldr	r3, [r3, #0]
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	370c      	adds	r7, #12
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr

08004cc6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b086      	sub	sp, #24
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	60f8      	str	r0, [r7, #12]
 8004cce:	607a      	str	r2, [r7, #4]
 8004cd0:	603b      	str	r3, [r7, #0]
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cd6:	7afb      	ldrb	r3, [r7, #11]
 8004cd8:	f003 020f 	and.w	r2, r3, #15
 8004cdc:	4613      	mov	r3, r2
 8004cde:	00db      	lsls	r3, r3, #3
 8004ce0:	4413      	add	r3, r2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	3310      	adds	r3, #16
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	4413      	add	r3, r2
 8004cea:	3304      	adds	r3, #4
 8004cec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	683a      	ldr	r2, [r7, #0]
 8004cf8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	2201      	movs	r2, #1
 8004d04:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d06:	7afb      	ldrb	r3, [r7, #11]
 8004d08:	f003 030f 	and.w	r3, r3, #15
 8004d0c:	b2da      	uxtb	r2, r3
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	799b      	ldrb	r3, [r3, #6]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d102      	bne.n	8004d20 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6818      	ldr	r0, [r3, #0]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	799b      	ldrb	r3, [r3, #6]
 8004d28:	461a      	mov	r2, r3
 8004d2a:	6979      	ldr	r1, [r7, #20]
 8004d2c:	f003 febc 	bl	8008aa8 <USB_EPStartXfer>

  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3718      	adds	r7, #24
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b084      	sub	sp, #16
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
 8004d42:	460b      	mov	r3, r1
 8004d44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004d46:	78fb      	ldrb	r3, [r7, #3]
 8004d48:	f003 030f 	and.w	r3, r3, #15
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	7912      	ldrb	r2, [r2, #4]
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d901      	bls.n	8004d58 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e04f      	b.n	8004df8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	da0f      	bge.n	8004d80 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d60:	78fb      	ldrb	r3, [r7, #3]
 8004d62:	f003 020f 	and.w	r2, r3, #15
 8004d66:	4613      	mov	r3, r2
 8004d68:	00db      	lsls	r3, r3, #3
 8004d6a:	4413      	add	r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	3310      	adds	r3, #16
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	4413      	add	r3, r2
 8004d74:	3304      	adds	r3, #4
 8004d76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	705a      	strb	r2, [r3, #1]
 8004d7e:	e00d      	b.n	8004d9c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004d80:	78fa      	ldrb	r2, [r7, #3]
 8004d82:	4613      	mov	r3, r2
 8004d84:	00db      	lsls	r3, r3, #3
 8004d86:	4413      	add	r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	4413      	add	r3, r2
 8004d92:	3304      	adds	r3, #4
 8004d94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004da2:	78fb      	ldrb	r3, [r7, #3]
 8004da4:	f003 030f 	and.w	r3, r3, #15
 8004da8:	b2da      	uxtb	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d101      	bne.n	8004dbc <HAL_PCD_EP_SetStall+0x82>
 8004db8:	2302      	movs	r3, #2
 8004dba:	e01d      	b.n	8004df8 <HAL_PCD_EP_SetStall+0xbe>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68f9      	ldr	r1, [r7, #12]
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f004 fa4a 	bl	8009264 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004dd0:	78fb      	ldrb	r3, [r7, #3]
 8004dd2:	f003 030f 	and.w	r3, r3, #15
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d109      	bne.n	8004dee <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6818      	ldr	r0, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	7999      	ldrb	r1, [r3, #6]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004de8:	461a      	mov	r2, r3
 8004dea:	f004 fc3b 	bl	8009664 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	460b      	mov	r3, r1
 8004e0a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004e0c:	78fb      	ldrb	r3, [r7, #3]
 8004e0e:	f003 030f 	and.w	r3, r3, #15
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	7912      	ldrb	r2, [r2, #4]
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d901      	bls.n	8004e1e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e042      	b.n	8004ea4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004e1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	da0f      	bge.n	8004e46 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e26:	78fb      	ldrb	r3, [r7, #3]
 8004e28:	f003 020f 	and.w	r2, r3, #15
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	00db      	lsls	r3, r3, #3
 8004e30:	4413      	add	r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	3310      	adds	r3, #16
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	4413      	add	r3, r2
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2201      	movs	r2, #1
 8004e42:	705a      	strb	r2, [r3, #1]
 8004e44:	e00f      	b.n	8004e66 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e46:	78fb      	ldrb	r3, [r7, #3]
 8004e48:	f003 020f 	and.w	r2, r3, #15
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	00db      	lsls	r3, r3, #3
 8004e50:	4413      	add	r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	3304      	adds	r3, #4
 8004e5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e6c:	78fb      	ldrb	r3, [r7, #3]
 8004e6e:	f003 030f 	and.w	r3, r3, #15
 8004e72:	b2da      	uxtb	r2, r3
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d101      	bne.n	8004e86 <HAL_PCD_EP_ClrStall+0x86>
 8004e82:	2302      	movs	r3, #2
 8004e84:	e00e      	b.n	8004ea4 <HAL_PCD_EP_ClrStall+0xa4>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68f9      	ldr	r1, [r7, #12]
 8004e94:	4618      	mov	r0, r3
 8004e96:	f004 fa53 	bl	8009340 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004eb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	da0c      	bge.n	8004eda <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ec0:	78fb      	ldrb	r3, [r7, #3]
 8004ec2:	f003 020f 	and.w	r2, r3, #15
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	00db      	lsls	r3, r3, #3
 8004eca:	4413      	add	r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	3310      	adds	r3, #16
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	3304      	adds	r3, #4
 8004ed6:	60fb      	str	r3, [r7, #12]
 8004ed8:	e00c      	b.n	8004ef4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004eda:	78fb      	ldrb	r3, [r7, #3]
 8004edc:	f003 020f 	and.w	r2, r3, #15
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	00db      	lsls	r3, r3, #3
 8004ee4:	4413      	add	r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	4413      	add	r3, r2
 8004ef0:	3304      	adds	r3, #4
 8004ef2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68f9      	ldr	r1, [r7, #12]
 8004efa:	4618      	mov	r0, r3
 8004efc:	f004 f872 	bl	8008fe4 <USB_EPStopXfer>
 8004f00:	4603      	mov	r3, r0
 8004f02:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004f04:	7afb      	ldrb	r3, [r7, #11]
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3710      	adds	r7, #16
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b08a      	sub	sp, #40	@ 0x28
 8004f12:	af02      	add	r7, sp, #8
 8004f14:	6078      	str	r0, [r7, #4]
 8004f16:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004f22:	683a      	ldr	r2, [r7, #0]
 8004f24:	4613      	mov	r3, r2
 8004f26:	00db      	lsls	r3, r3, #3
 8004f28:	4413      	add	r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	3310      	adds	r3, #16
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	4413      	add	r3, r2
 8004f32:	3304      	adds	r3, #4
 8004f34:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	695a      	ldr	r2, [r3, #20]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d901      	bls.n	8004f46 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e06b      	b.n	800501e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	691a      	ldr	r2, [r3, #16]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	69fa      	ldr	r2, [r7, #28]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d902      	bls.n	8004f62 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	3303      	adds	r3, #3
 8004f66:	089b      	lsrs	r3, r3, #2
 8004f68:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004f6a:	e02a      	b.n	8004fc2 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	691a      	ldr	r2, [r3, #16]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	695b      	ldr	r3, [r3, #20]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	69fa      	ldr	r2, [r7, #28]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d902      	bls.n	8004f88 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	3303      	adds	r3, #3
 8004f8c:	089b      	lsrs	r3, r3, #2
 8004f8e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	68d9      	ldr	r1, [r3, #12]
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	b2da      	uxtb	r2, r3
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004fa0:	9300      	str	r3, [sp, #0]
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	6978      	ldr	r0, [r7, #20]
 8004fa6:	f004 f8c7 	bl	8009138 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	68da      	ldr	r2, [r3, #12]
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	441a      	add	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	695a      	ldr	r2, [r3, #20]
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	441a      	add	r2, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	015a      	lsls	r2, r3, #5
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	4413      	add	r3, r2
 8004fca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fce:	699b      	ldr	r3, [r3, #24]
 8004fd0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004fd2:	69ba      	ldr	r2, [r7, #24]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d809      	bhi.n	8004fec <PCD_WriteEmptyTxFifo+0xde>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	695a      	ldr	r2, [r3, #20]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d203      	bcs.n	8004fec <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1bf      	bne.n	8004f6c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	691a      	ldr	r2, [r3, #16]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	695b      	ldr	r3, [r3, #20]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d811      	bhi.n	800501c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	f003 030f 	and.w	r3, r3, #15
 8004ffe:	2201      	movs	r2, #1
 8005000:	fa02 f303 	lsl.w	r3, r2, r3
 8005004:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800500c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	43db      	mvns	r3, r3
 8005012:	6939      	ldr	r1, [r7, #16]
 8005014:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005018:	4013      	ands	r3, r2
 800501a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3720      	adds	r7, #32
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
	...

08005028 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b088      	sub	sp, #32
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	333c      	adds	r3, #60	@ 0x3c
 8005040:	3304      	adds	r3, #4
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	015a      	lsls	r2, r3, #5
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	4413      	add	r3, r2
 800504e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	799b      	ldrb	r3, [r3, #6]
 800505a:	2b01      	cmp	r3, #1
 800505c:	d17b      	bne.n	8005156 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	f003 0308 	and.w	r3, r3, #8
 8005064:	2b00      	cmp	r3, #0
 8005066:	d015      	beq.n	8005094 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	4a61      	ldr	r2, [pc, #388]	@ (80051f0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800506c:	4293      	cmp	r3, r2
 800506e:	f240 80b9 	bls.w	80051e4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005078:	2b00      	cmp	r3, #0
 800507a:	f000 80b3 	beq.w	80051e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	015a      	lsls	r2, r3, #5
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	4413      	add	r3, r2
 8005086:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800508a:	461a      	mov	r2, r3
 800508c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005090:	6093      	str	r3, [r2, #8]
 8005092:	e0a7      	b.n	80051e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	f003 0320 	and.w	r3, r3, #32
 800509a:	2b00      	cmp	r3, #0
 800509c:	d009      	beq.n	80050b2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	015a      	lsls	r2, r3, #5
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	4413      	add	r3, r2
 80050a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050aa:	461a      	mov	r2, r3
 80050ac:	2320      	movs	r3, #32
 80050ae:	6093      	str	r3, [r2, #8]
 80050b0:	e098      	b.n	80051e4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f040 8093 	bne.w	80051e4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	4a4b      	ldr	r2, [pc, #300]	@ (80051f0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d90f      	bls.n	80050e6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00a      	beq.n	80050e6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050dc:	461a      	mov	r2, r3
 80050de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050e2:	6093      	str	r3, [r2, #8]
 80050e4:	e07e      	b.n	80051e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80050e6:	683a      	ldr	r2, [r7, #0]
 80050e8:	4613      	mov	r3, r2
 80050ea:	00db      	lsls	r3, r3, #3
 80050ec:	4413      	add	r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	4413      	add	r3, r2
 80050f8:	3304      	adds	r3, #4
 80050fa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6a1a      	ldr	r2, [r3, #32]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	0159      	lsls	r1, r3, #5
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	440b      	add	r3, r1
 8005108:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005112:	1ad2      	subs	r2, r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d114      	bne.n	8005148 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d109      	bne.n	800513a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6818      	ldr	r0, [r3, #0]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005130:	461a      	mov	r2, r3
 8005132:	2101      	movs	r1, #1
 8005134:	f004 fa96 	bl	8009664 <USB_EP0_OutStart>
 8005138:	e006      	b.n	8005148 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	68da      	ldr	r2, [r3, #12]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	441a      	add	r2, r3
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	b2db      	uxtb	r3, r3
 800514c:	4619      	mov	r1, r3
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f006 fd42 	bl	800bbd8 <HAL_PCD_DataOutStageCallback>
 8005154:	e046      	b.n	80051e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	4a26      	ldr	r2, [pc, #152]	@ (80051f4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d124      	bne.n	80051a8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d00a      	beq.n	800517e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	015a      	lsls	r2, r3, #5
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	4413      	add	r3, r2
 8005170:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005174:	461a      	mov	r2, r3
 8005176:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800517a:	6093      	str	r3, [r2, #8]
 800517c:	e032      	b.n	80051e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	f003 0320 	and.w	r3, r3, #32
 8005184:	2b00      	cmp	r3, #0
 8005186:	d008      	beq.n	800519a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	015a      	lsls	r2, r3, #5
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	4413      	add	r3, r2
 8005190:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005194:	461a      	mov	r2, r3
 8005196:	2320      	movs	r3, #32
 8005198:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	b2db      	uxtb	r3, r3
 800519e:	4619      	mov	r1, r3
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f006 fd19 	bl	800bbd8 <HAL_PCD_DataOutStageCallback>
 80051a6:	e01d      	b.n	80051e4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d114      	bne.n	80051d8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80051ae:	6879      	ldr	r1, [r7, #4]
 80051b0:	683a      	ldr	r2, [r7, #0]
 80051b2:	4613      	mov	r3, r2
 80051b4:	00db      	lsls	r3, r3, #3
 80051b6:	4413      	add	r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	440b      	add	r3, r1
 80051bc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d108      	bne.n	80051d8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6818      	ldr	r0, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80051d0:	461a      	mov	r2, r3
 80051d2:	2100      	movs	r1, #0
 80051d4:	f004 fa46 	bl	8009664 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	4619      	mov	r1, r3
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f006 fcfa 	bl	800bbd8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3720      	adds	r7, #32
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	4f54300a 	.word	0x4f54300a
 80051f4:	4f54310a 	.word	0x4f54310a

080051f8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b086      	sub	sp, #24
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	333c      	adds	r3, #60	@ 0x3c
 8005210:	3304      	adds	r3, #4
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	015a      	lsls	r2, r3, #5
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	4413      	add	r3, r2
 800521e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	4a15      	ldr	r2, [pc, #84]	@ (8005280 <PCD_EP_OutSetupPacket_int+0x88>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d90e      	bls.n	800524c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005234:	2b00      	cmp	r3, #0
 8005236:	d009      	beq.n	800524c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	015a      	lsls	r2, r3, #5
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	4413      	add	r3, r2
 8005240:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005244:	461a      	mov	r2, r3
 8005246:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800524a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f006 fcb1 	bl	800bbb4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	4a0a      	ldr	r2, [pc, #40]	@ (8005280 <PCD_EP_OutSetupPacket_int+0x88>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d90c      	bls.n	8005274 <PCD_EP_OutSetupPacket_int+0x7c>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	799b      	ldrb	r3, [r3, #6]
 800525e:	2b01      	cmp	r3, #1
 8005260:	d108      	bne.n	8005274 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6818      	ldr	r0, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800526c:	461a      	mov	r2, r3
 800526e:	2101      	movs	r1, #1
 8005270:	f004 f9f8 	bl	8009664 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3718      	adds	r7, #24
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	4f54300a 	.word	0x4f54300a

08005284 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	460b      	mov	r3, r1
 800528e:	70fb      	strb	r3, [r7, #3]
 8005290:	4613      	mov	r3, r2
 8005292:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800529a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800529c:	78fb      	ldrb	r3, [r7, #3]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d107      	bne.n	80052b2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80052a2:	883b      	ldrh	r3, [r7, #0]
 80052a4:	0419      	lsls	r1, r3, #16
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68ba      	ldr	r2, [r7, #8]
 80052ac:	430a      	orrs	r2, r1
 80052ae:	629a      	str	r2, [r3, #40]	@ 0x28
 80052b0:	e028      	b.n	8005304 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052b8:	0c1b      	lsrs	r3, r3, #16
 80052ba:	68ba      	ldr	r2, [r7, #8]
 80052bc:	4413      	add	r3, r2
 80052be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80052c0:	2300      	movs	r3, #0
 80052c2:	73fb      	strb	r3, [r7, #15]
 80052c4:	e00d      	b.n	80052e2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	7bfb      	ldrb	r3, [r7, #15]
 80052cc:	3340      	adds	r3, #64	@ 0x40
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	4413      	add	r3, r2
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	0c1b      	lsrs	r3, r3, #16
 80052d6:	68ba      	ldr	r2, [r7, #8]
 80052d8:	4413      	add	r3, r2
 80052da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80052dc:	7bfb      	ldrb	r3, [r7, #15]
 80052de:	3301      	adds	r3, #1
 80052e0:	73fb      	strb	r3, [r7, #15]
 80052e2:	7bfa      	ldrb	r2, [r7, #15]
 80052e4:	78fb      	ldrb	r3, [r7, #3]
 80052e6:	3b01      	subs	r3, #1
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d3ec      	bcc.n	80052c6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80052ec:	883b      	ldrh	r3, [r7, #0]
 80052ee:	0418      	lsls	r0, r3, #16
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6819      	ldr	r1, [r3, #0]
 80052f4:	78fb      	ldrb	r3, [r7, #3]
 80052f6:	3b01      	subs	r3, #1
 80052f8:	68ba      	ldr	r2, [r7, #8]
 80052fa:	4302      	orrs	r2, r0
 80052fc:	3340      	adds	r3, #64	@ 0x40
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	440b      	add	r3, r1
 8005302:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3714      	adds	r7, #20
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr

08005312 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005312:	b480      	push	{r7}
 8005314:	b083      	sub	sp, #12
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
 800531a:	460b      	mov	r3, r1
 800531c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	887a      	ldrh	r2, [r7, #2]
 8005324:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2201      	movs	r2, #1
 8005346:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005362:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005366:	f043 0303 	orr.w	r3, r3, #3
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3714      	adds	r7, #20
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d101      	bne.n	8005390 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e0cc      	b.n	800552a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005390:	4b68      	ldr	r3, [pc, #416]	@ (8005534 <HAL_RCC_ClockConfig+0x1b8>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 030f 	and.w	r3, r3, #15
 8005398:	683a      	ldr	r2, [r7, #0]
 800539a:	429a      	cmp	r2, r3
 800539c:	d90c      	bls.n	80053b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800539e:	4b65      	ldr	r3, [pc, #404]	@ (8005534 <HAL_RCC_ClockConfig+0x1b8>)
 80053a0:	683a      	ldr	r2, [r7, #0]
 80053a2:	b2d2      	uxtb	r2, r2
 80053a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053a6:	4b63      	ldr	r3, [pc, #396]	@ (8005534 <HAL_RCC_ClockConfig+0x1b8>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 030f 	and.w	r3, r3, #15
 80053ae:	683a      	ldr	r2, [r7, #0]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d001      	beq.n	80053b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e0b8      	b.n	800552a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0302 	and.w	r3, r3, #2
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d020      	beq.n	8005406 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0304 	and.w	r3, r3, #4
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d005      	beq.n	80053dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053d0:	4b59      	ldr	r3, [pc, #356]	@ (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	4a58      	ldr	r2, [pc, #352]	@ (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 80053d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80053da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0308 	and.w	r3, r3, #8
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d005      	beq.n	80053f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053e8:	4b53      	ldr	r3, [pc, #332]	@ (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	4a52      	ldr	r2, [pc, #328]	@ (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 80053ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80053f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053f4:	4b50      	ldr	r3, [pc, #320]	@ (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	494d      	ldr	r1, [pc, #308]	@ (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 8005402:	4313      	orrs	r3, r2
 8005404:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0301 	and.w	r3, r3, #1
 800540e:	2b00      	cmp	r3, #0
 8005410:	d044      	beq.n	800549c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	2b01      	cmp	r3, #1
 8005418:	d107      	bne.n	800542a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800541a:	4b47      	ldr	r3, [pc, #284]	@ (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d119      	bne.n	800545a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e07f      	b.n	800552a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	2b02      	cmp	r3, #2
 8005430:	d003      	beq.n	800543a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005436:	2b03      	cmp	r3, #3
 8005438:	d107      	bne.n	800544a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800543a:	4b3f      	ldr	r3, [pc, #252]	@ (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d109      	bne.n	800545a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e06f      	b.n	800552a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800544a:	4b3b      	ldr	r3, [pc, #236]	@ (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e067      	b.n	800552a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800545a:	4b37      	ldr	r3, [pc, #220]	@ (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f023 0203 	bic.w	r2, r3, #3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	4934      	ldr	r1, [pc, #208]	@ (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 8005468:	4313      	orrs	r3, r2
 800546a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800546c:	f7fd f88a 	bl	8002584 <HAL_GetTick>
 8005470:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005472:	e00a      	b.n	800548a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005474:	f7fd f886 	bl	8002584 <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005482:	4293      	cmp	r3, r2
 8005484:	d901      	bls.n	800548a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e04f      	b.n	800552a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800548a:	4b2b      	ldr	r3, [pc, #172]	@ (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f003 020c 	and.w	r2, r3, #12
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	429a      	cmp	r2, r3
 800549a:	d1eb      	bne.n	8005474 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800549c:	4b25      	ldr	r3, [pc, #148]	@ (8005534 <HAL_RCC_ClockConfig+0x1b8>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 030f 	and.w	r3, r3, #15
 80054a4:	683a      	ldr	r2, [r7, #0]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d20c      	bcs.n	80054c4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054aa:	4b22      	ldr	r3, [pc, #136]	@ (8005534 <HAL_RCC_ClockConfig+0x1b8>)
 80054ac:	683a      	ldr	r2, [r7, #0]
 80054ae:	b2d2      	uxtb	r2, r2
 80054b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054b2:	4b20      	ldr	r3, [pc, #128]	@ (8005534 <HAL_RCC_ClockConfig+0x1b8>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 030f 	and.w	r3, r3, #15
 80054ba:	683a      	ldr	r2, [r7, #0]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d001      	beq.n	80054c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e032      	b.n	800552a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0304 	and.w	r3, r3, #4
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d008      	beq.n	80054e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054d0:	4b19      	ldr	r3, [pc, #100]	@ (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	4916      	ldr	r1, [pc, #88]	@ (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 80054de:	4313      	orrs	r3, r2
 80054e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0308 	and.w	r3, r3, #8
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d009      	beq.n	8005502 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054ee:	4b12      	ldr	r3, [pc, #72]	@ (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	00db      	lsls	r3, r3, #3
 80054fc:	490e      	ldr	r1, [pc, #56]	@ (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005502:	f000 fb7f 	bl	8005c04 <HAL_RCC_GetSysClockFreq>
 8005506:	4602      	mov	r2, r0
 8005508:	4b0b      	ldr	r3, [pc, #44]	@ (8005538 <HAL_RCC_ClockConfig+0x1bc>)
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	091b      	lsrs	r3, r3, #4
 800550e:	f003 030f 	and.w	r3, r3, #15
 8005512:	490a      	ldr	r1, [pc, #40]	@ (800553c <HAL_RCC_ClockConfig+0x1c0>)
 8005514:	5ccb      	ldrb	r3, [r1, r3]
 8005516:	fa22 f303 	lsr.w	r3, r2, r3
 800551a:	4a09      	ldr	r2, [pc, #36]	@ (8005540 <HAL_RCC_ClockConfig+0x1c4>)
 800551c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800551e:	4b09      	ldr	r3, [pc, #36]	@ (8005544 <HAL_RCC_ClockConfig+0x1c8>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4618      	mov	r0, r3
 8005524:	f7fc ffea 	bl	80024fc <HAL_InitTick>

  return HAL_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3710      	adds	r7, #16
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	40023c00 	.word	0x40023c00
 8005538:	40023800 	.word	0x40023800
 800553c:	08010d24 	.word	0x08010d24
 8005540:	20000000 	.word	0x20000000
 8005544:	20000004 	.word	0x20000004

08005548 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005548:	b480      	push	{r7}
 800554a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800554c:	4b03      	ldr	r3, [pc, #12]	@ (800555c <HAL_RCC_GetHCLKFreq+0x14>)
 800554e:	681b      	ldr	r3, [r3, #0]
}
 8005550:	4618      	mov	r0, r3
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	20000000 	.word	0x20000000

08005560 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005564:	f7ff fff0 	bl	8005548 <HAL_RCC_GetHCLKFreq>
 8005568:	4602      	mov	r2, r0
 800556a:	4b05      	ldr	r3, [pc, #20]	@ (8005580 <HAL_RCC_GetPCLK1Freq+0x20>)
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	0a9b      	lsrs	r3, r3, #10
 8005570:	f003 0307 	and.w	r3, r3, #7
 8005574:	4903      	ldr	r1, [pc, #12]	@ (8005584 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005576:	5ccb      	ldrb	r3, [r1, r3]
 8005578:	fa22 f303 	lsr.w	r3, r2, r3
}
 800557c:	4618      	mov	r0, r3
 800557e:	bd80      	pop	{r7, pc}
 8005580:	40023800 	.word	0x40023800
 8005584:	08010d34 	.word	0x08010d34

08005588 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800558c:	f7ff ffdc 	bl	8005548 <HAL_RCC_GetHCLKFreq>
 8005590:	4602      	mov	r2, r0
 8005592:	4b05      	ldr	r3, [pc, #20]	@ (80055a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	0b5b      	lsrs	r3, r3, #13
 8005598:	f003 0307 	and.w	r3, r3, #7
 800559c:	4903      	ldr	r1, [pc, #12]	@ (80055ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800559e:	5ccb      	ldrb	r3, [r1, r3]
 80055a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	40023800 	.word	0x40023800
 80055ac:	08010d34 	.word	0x08010d34

080055b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b08c      	sub	sp, #48	@ 0x30
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80055b8:	2300      	movs	r3, #0
 80055ba:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 80055bc:	2300      	movs	r3, #0
 80055be:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80055c0:	2300      	movs	r3, #0
 80055c2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80055c4:	2300      	movs	r3, #0
 80055c6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80055c8:	2300      	movs	r3, #0
 80055ca:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80055cc:	2300      	movs	r3, #0
 80055ce:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80055d0:	2300      	movs	r3, #0
 80055d2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80055d4:	2300      	movs	r3, #0
 80055d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 80055d8:	2300      	movs	r3, #0
 80055da:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0301 	and.w	r3, r3, #1
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d010      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80055e8:	4b6f      	ldr	r3, [pc, #444]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80055ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055ee:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055f6:	496c      	ldr	r1, [pc, #432]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8005606:	2301      	movs	r3, #1
 8005608:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0302 	and.w	r3, r3, #2
 8005612:	2b00      	cmp	r3, #0
 8005614:	d010      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8005616:	4b64      	ldr	r3, [pc, #400]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005618:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800561c:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005624:	4960      	ldr	r1, [pc, #384]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005626:	4313      	orrs	r3, r2
 8005628:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005630:	2b00      	cmp	r3, #0
 8005632:	d101      	bne.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8005634:	2301      	movs	r3, #1
 8005636:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0304 	and.w	r3, r3, #4
 8005640:	2b00      	cmp	r3, #0
 8005642:	d017      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005644:	4b58      	ldr	r3, [pc, #352]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005646:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800564a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005652:	4955      	ldr	r1, [pc, #340]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005654:	4313      	orrs	r3, r2
 8005656:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800565e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005662:	d101      	bne.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8005664:	2301      	movs	r3, #1
 8005666:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800566c:	2b00      	cmp	r3, #0
 800566e:	d101      	bne.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8005670:	2301      	movs	r3, #1
 8005672:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0308 	and.w	r3, r3, #8
 800567c:	2b00      	cmp	r3, #0
 800567e:	d017      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005680:	4b49      	ldr	r3, [pc, #292]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005682:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005686:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800568e:	4946      	ldr	r1, [pc, #280]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005690:	4313      	orrs	r3, r2
 8005692:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800569a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800569e:	d101      	bne.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80056a0:	2301      	movs	r3, #1
 80056a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d101      	bne.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80056ac:	2301      	movs	r3, #1
 80056ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0320 	and.w	r3, r3, #32
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	f000 808a 	beq.w	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80056be:	2300      	movs	r3, #0
 80056c0:	60bb      	str	r3, [r7, #8]
 80056c2:	4b39      	ldr	r3, [pc, #228]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80056c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056c6:	4a38      	ldr	r2, [pc, #224]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80056c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80056ce:	4b36      	ldr	r3, [pc, #216]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80056d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056d6:	60bb      	str	r3, [r7, #8]
 80056d8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80056da:	4b34      	ldr	r3, [pc, #208]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a33      	ldr	r2, [pc, #204]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80056e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056e4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80056e6:	f7fc ff4d 	bl	8002584 <HAL_GetTick>
 80056ea:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80056ec:	e008      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056ee:	f7fc ff49 	bl	8002584 <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d901      	bls.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e278      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005700:	4b2a      	ldr	r3, [pc, #168]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005708:	2b00      	cmp	r3, #0
 800570a:	d0f0      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800570c:	4b26      	ldr	r3, [pc, #152]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800570e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005710:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005714:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005716:	6a3b      	ldr	r3, [r7, #32]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d02f      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005720:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005724:	6a3a      	ldr	r2, [r7, #32]
 8005726:	429a      	cmp	r2, r3
 8005728:	d028      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800572a:	4b1f      	ldr	r3, [pc, #124]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800572c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800572e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005732:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005734:	4b1e      	ldr	r3, [pc, #120]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005736:	2201      	movs	r2, #1
 8005738:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800573a:	4b1d      	ldr	r3, [pc, #116]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800573c:	2200      	movs	r2, #0
 800573e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005740:	4a19      	ldr	r2, [pc, #100]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005742:	6a3b      	ldr	r3, [r7, #32]
 8005744:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005746:	4b18      	ldr	r3, [pc, #96]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	2b01      	cmp	r3, #1
 8005750:	d114      	bne.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005752:	f7fc ff17 	bl	8002584 <HAL_GetTick>
 8005756:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005758:	e00a      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800575a:	f7fc ff13 	bl	8002584 <HAL_GetTick>
 800575e:	4602      	mov	r2, r0
 8005760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005768:	4293      	cmp	r3, r2
 800576a:	d901      	bls.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e240      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005770:	4b0d      	ldr	r3, [pc, #52]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005772:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005774:	f003 0302 	and.w	r3, r3, #2
 8005778:	2b00      	cmp	r3, #0
 800577a:	d0ee      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005780:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005784:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005788:	d114      	bne.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800578a:	4b07      	ldr	r3, [pc, #28]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005796:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800579a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800579e:	4902      	ldr	r1, [pc, #8]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80057a0:	4313      	orrs	r3, r2
 80057a2:	608b      	str	r3, [r1, #8]
 80057a4:	e00c      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80057a6:	bf00      	nop
 80057a8:	40023800 	.word	0x40023800
 80057ac:	40007000 	.word	0x40007000
 80057b0:	42470e40 	.word	0x42470e40
 80057b4:	4b4a      	ldr	r3, [pc, #296]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	4a49      	ldr	r2, [pc, #292]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80057ba:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80057be:	6093      	str	r3, [r2, #8]
 80057c0:	4b47      	ldr	r3, [pc, #284]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80057c2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057cc:	4944      	ldr	r1, [pc, #272]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0310 	and.w	r3, r3, #16
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d004      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80057e4:	4b3f      	ldr	r3, [pc, #252]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80057e6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00a      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80057f4:	4b3a      	ldr	r3, [pc, #232]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80057f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057fa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005802:	4937      	ldr	r1, [pc, #220]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005804:	4313      	orrs	r3, r2
 8005806:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00a      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005816:	4b32      	ldr	r3, [pc, #200]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005818:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800581c:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005824:	492e      	ldr	r1, [pc, #184]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005826:	4313      	orrs	r3, r2
 8005828:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005834:	2b00      	cmp	r3, #0
 8005836:	d011      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005838:	4b29      	ldr	r3, [pc, #164]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800583a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800583e:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005846:	4926      	ldr	r1, [pc, #152]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005848:	4313      	orrs	r3, r2
 800584a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005852:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005856:	d101      	bne.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8005858:	2301      	movs	r3, #1
 800585a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00a      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005868:	4b1d      	ldr	r3, [pc, #116]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800586a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800586e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005876:	491a      	ldr	r1, [pc, #104]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005878:	4313      	orrs	r3, r2
 800587a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005886:	2b00      	cmp	r3, #0
 8005888:	d011      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800588a:	4b15      	ldr	r3, [pc, #84]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800588c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005890:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005898:	4911      	ldr	r1, [pc, #68]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800589a:	4313      	orrs	r3, r2
 800589c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058a8:	d101      	bne.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80058aa:	2301      	movs	r3, #1
 80058ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80058ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d005      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058bc:	f040 80ff 	bne.w	8005abe <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80058c0:	4b09      	ldr	r3, [pc, #36]	@ (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058c2:	2200      	movs	r2, #0
 80058c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80058c6:	f7fc fe5d 	bl	8002584 <HAL_GetTick>
 80058ca:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058cc:	e00e      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80058ce:	f7fc fe59 	bl	8002584 <HAL_GetTick>
 80058d2:	4602      	mov	r2, r0
 80058d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d907      	bls.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	e188      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80058e0:	40023800 	.word	0x40023800
 80058e4:	424711e0 	.word	0x424711e0
 80058e8:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058ec:	4b7e      	ldr	r3, [pc, #504]	@ (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d1ea      	bne.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0301 	and.w	r3, r3, #1
 8005900:	2b00      	cmp	r3, #0
 8005902:	d003      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005908:	2b00      	cmp	r3, #0
 800590a:	d009      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005914:	2b00      	cmp	r3, #0
 8005916:	d028      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800591c:	2b00      	cmp	r3, #0
 800591e:	d124      	bne.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005920:	4b71      	ldr	r3, [pc, #452]	@ (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005922:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005926:	0c1b      	lsrs	r3, r3, #16
 8005928:	f003 0303 	and.w	r3, r3, #3
 800592c:	3301      	adds	r3, #1
 800592e:	005b      	lsls	r3, r3, #1
 8005930:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005932:	4b6d      	ldr	r3, [pc, #436]	@ (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005934:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005938:	0e1b      	lsrs	r3, r3, #24
 800593a:	f003 030f 	and.w	r3, r3, #15
 800593e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	685a      	ldr	r2, [r3, #4]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	019b      	lsls	r3, r3, #6
 800594a:	431a      	orrs	r2, r3
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	085b      	lsrs	r3, r3, #1
 8005950:	3b01      	subs	r3, #1
 8005952:	041b      	lsls	r3, r3, #16
 8005954:	431a      	orrs	r2, r3
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	061b      	lsls	r3, r3, #24
 800595a:	431a      	orrs	r2, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	695b      	ldr	r3, [r3, #20]
 8005960:	071b      	lsls	r3, r3, #28
 8005962:	4961      	ldr	r1, [pc, #388]	@ (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005964:	4313      	orrs	r3, r2
 8005966:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0304 	and.w	r3, r3, #4
 8005972:	2b00      	cmp	r3, #0
 8005974:	d004      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800597a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800597e:	d00a      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005988:	2b00      	cmp	r3, #0
 800598a:	d035      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005990:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005994:	d130      	bne.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005996:	4b54      	ldr	r3, [pc, #336]	@ (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005998:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800599c:	0c1b      	lsrs	r3, r3, #16
 800599e:	f003 0303 	and.w	r3, r3, #3
 80059a2:	3301      	adds	r3, #1
 80059a4:	005b      	lsls	r3, r3, #1
 80059a6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80059a8:	4b4f      	ldr	r3, [pc, #316]	@ (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80059aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059ae:	0f1b      	lsrs	r3, r3, #28
 80059b0:	f003 0307 	and.w	r3, r3, #7
 80059b4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685a      	ldr	r2, [r3, #4]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	019b      	lsls	r3, r3, #6
 80059c0:	431a      	orrs	r2, r3
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	085b      	lsrs	r3, r3, #1
 80059c6:	3b01      	subs	r3, #1
 80059c8:	041b      	lsls	r3, r3, #16
 80059ca:	431a      	orrs	r2, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	061b      	lsls	r3, r3, #24
 80059d2:	431a      	orrs	r2, r3
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	071b      	lsls	r3, r3, #28
 80059d8:	4943      	ldr	r1, [pc, #268]	@ (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80059da:	4313      	orrs	r3, r2
 80059dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80059e0:	4b41      	ldr	r3, [pc, #260]	@ (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80059e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80059e6:	f023 021f 	bic.w	r2, r3, #31
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ee:	3b01      	subs	r3, #1
 80059f0:	493d      	ldr	r1, [pc, #244]	@ (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d029      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a0c:	d124      	bne.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005a0e:	4b36      	ldr	r3, [pc, #216]	@ (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005a10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a14:	0c1b      	lsrs	r3, r3, #16
 8005a16:	f003 0303 	and.w	r3, r3, #3
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	005b      	lsls	r3, r3, #1
 8005a1e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005a20:	4b31      	ldr	r3, [pc, #196]	@ (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a26:	0f1b      	lsrs	r3, r3, #28
 8005a28:	f003 0307 	and.w	r3, r3, #7
 8005a2c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685a      	ldr	r2, [r3, #4]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	019b      	lsls	r3, r3, #6
 8005a38:	431a      	orrs	r2, r3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	085b      	lsrs	r3, r3, #1
 8005a40:	3b01      	subs	r3, #1
 8005a42:	041b      	lsls	r3, r3, #16
 8005a44:	431a      	orrs	r2, r3
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	061b      	lsls	r3, r3, #24
 8005a4a:	431a      	orrs	r2, r3
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	071b      	lsls	r3, r3, #28
 8005a50:	4925      	ldr	r1, [pc, #148]	@ (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005a52:	4313      	orrs	r3, r2
 8005a54:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d016      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	685a      	ldr	r2, [r3, #4]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	019b      	lsls	r3, r3, #6
 8005a6e:	431a      	orrs	r2, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	085b      	lsrs	r3, r3, #1
 8005a76:	3b01      	subs	r3, #1
 8005a78:	041b      	lsls	r3, r3, #16
 8005a7a:	431a      	orrs	r2, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	061b      	lsls	r3, r3, #24
 8005a82:	431a      	orrs	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	695b      	ldr	r3, [r3, #20]
 8005a88:	071b      	lsls	r3, r3, #28
 8005a8a:	4917      	ldr	r1, [pc, #92]	@ (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005a92:	4b16      	ldr	r3, [pc, #88]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8005a94:	2201      	movs	r2, #1
 8005a96:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a98:	f7fc fd74 	bl	8002584 <HAL_GetTick>
 8005a9c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a9e:	e008      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005aa0:	f7fc fd70 	bl	8002584 <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d901      	bls.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e09f      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d0f0      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8005abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	f040 8095 	bne.w	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005ac8:	2200      	movs	r2, #0
 8005aca:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005acc:	f7fc fd5a 	bl	8002584 <HAL_GetTick>
 8005ad0:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ad2:	e00f      	b.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005ad4:	f7fc fd56 	bl	8002584 <HAL_GetTick>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d908      	bls.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e085      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005ae6:	bf00      	nop
 8005ae8:	40023800 	.word	0x40023800
 8005aec:	42470068 	.word	0x42470068
 8005af0:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005af4:	4b41      	ldr	r3, [pc, #260]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005afc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b00:	d0e8      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0304 	and.w	r3, r3, #4
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d003      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d009      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d02b      	beq.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d127      	bne.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8005b2a:	4b34      	ldr	r3, [pc, #208]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b30:	0c1b      	lsrs	r3, r3, #16
 8005b32:	f003 0303 	and.w	r3, r3, #3
 8005b36:	3301      	adds	r3, #1
 8005b38:	005b      	lsls	r3, r3, #1
 8005b3a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	699a      	ldr	r2, [r3, #24]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	69db      	ldr	r3, [r3, #28]
 8005b44:	019b      	lsls	r3, r3, #6
 8005b46:	431a      	orrs	r2, r3
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	085b      	lsrs	r3, r3, #1
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	041b      	lsls	r3, r3, #16
 8005b50:	431a      	orrs	r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b56:	061b      	lsls	r3, r3, #24
 8005b58:	4928      	ldr	r1, [pc, #160]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005b60:	4b26      	ldr	r3, [pc, #152]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005b62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b66:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	021b      	lsls	r3, r3, #8
 8005b72:	4922      	ldr	r1, [pc, #136]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d01d      	beq.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b8e:	d118      	bne.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005b90:	4b1a      	ldr	r3, [pc, #104]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b96:	0e1b      	lsrs	r3, r3, #24
 8005b98:	f003 030f 	and.w	r3, r3, #15
 8005b9c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	699a      	ldr	r2, [r3, #24]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	69db      	ldr	r3, [r3, #28]
 8005ba6:	019b      	lsls	r3, r3, #6
 8005ba8:	431a      	orrs	r2, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	085b      	lsrs	r3, r3, #1
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	041b      	lsls	r3, r3, #16
 8005bb4:	431a      	orrs	r2, r3
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	061b      	lsls	r3, r3, #24
 8005bba:	4910      	ldr	r1, [pc, #64]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005bc2:	4b0f      	ldr	r3, [pc, #60]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005bc8:	f7fc fcdc 	bl	8002584 <HAL_GetTick>
 8005bcc:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005bce:	e008      	b.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005bd0:	f7fc fcd8 	bl	8002584 <HAL_GetTick>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d901      	bls.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e007      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005be2:	4b06      	ldr	r3, [pc, #24]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005bea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bee:	d1ef      	bne.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3730      	adds	r7, #48	@ 0x30
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	40023800 	.word	0x40023800
 8005c00:	42470070 	.word	0x42470070

08005c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c08:	b0ae      	sub	sp, #184	@ 0xb8
 8005c0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8005c12:	2300      	movs	r3, #0
 8005c14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8005c24:	2300      	movs	r3, #0
 8005c26:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c2a:	4bcb      	ldr	r3, [pc, #812]	@ (8005f58 <HAL_RCC_GetSysClockFreq+0x354>)
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f003 030c 	and.w	r3, r3, #12
 8005c32:	2b0c      	cmp	r3, #12
 8005c34:	f200 8206 	bhi.w	8006044 <HAL_RCC_GetSysClockFreq+0x440>
 8005c38:	a201      	add	r2, pc, #4	@ (adr r2, 8005c40 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c3e:	bf00      	nop
 8005c40:	08005c75 	.word	0x08005c75
 8005c44:	08006045 	.word	0x08006045
 8005c48:	08006045 	.word	0x08006045
 8005c4c:	08006045 	.word	0x08006045
 8005c50:	08005c7d 	.word	0x08005c7d
 8005c54:	08006045 	.word	0x08006045
 8005c58:	08006045 	.word	0x08006045
 8005c5c:	08006045 	.word	0x08006045
 8005c60:	08005c85 	.word	0x08005c85
 8005c64:	08006045 	.word	0x08006045
 8005c68:	08006045 	.word	0x08006045
 8005c6c:	08006045 	.word	0x08006045
 8005c70:	08005e75 	.word	0x08005e75
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c74:	4bb9      	ldr	r3, [pc, #740]	@ (8005f5c <HAL_RCC_GetSysClockFreq+0x358>)
 8005c76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005c7a:	e1e7      	b.n	800604c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c7c:	4bb8      	ldr	r3, [pc, #736]	@ (8005f60 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005c7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005c82:	e1e3      	b.n	800604c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c84:	4bb4      	ldr	r3, [pc, #720]	@ (8005f58 <HAL_RCC_GetSysClockFreq+0x354>)
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c90:	4bb1      	ldr	r3, [pc, #708]	@ (8005f58 <HAL_RCC_GetSysClockFreq+0x354>)
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d071      	beq.n	8005d80 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c9c:	4bae      	ldr	r3, [pc, #696]	@ (8005f58 <HAL_RCC_GetSysClockFreq+0x354>)
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	099b      	lsrs	r3, r3, #6
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005ca8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005cac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005cb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cb4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005cb8:	2300      	movs	r3, #0
 8005cba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005cbe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005cc2:	4622      	mov	r2, r4
 8005cc4:	462b      	mov	r3, r5
 8005cc6:	f04f 0000 	mov.w	r0, #0
 8005cca:	f04f 0100 	mov.w	r1, #0
 8005cce:	0159      	lsls	r1, r3, #5
 8005cd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005cd4:	0150      	lsls	r0, r2, #5
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	460b      	mov	r3, r1
 8005cda:	4621      	mov	r1, r4
 8005cdc:	1a51      	subs	r1, r2, r1
 8005cde:	6439      	str	r1, [r7, #64]	@ 0x40
 8005ce0:	4629      	mov	r1, r5
 8005ce2:	eb63 0301 	sbc.w	r3, r3, r1
 8005ce6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ce8:	f04f 0200 	mov.w	r2, #0
 8005cec:	f04f 0300 	mov.w	r3, #0
 8005cf0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8005cf4:	4649      	mov	r1, r9
 8005cf6:	018b      	lsls	r3, r1, #6
 8005cf8:	4641      	mov	r1, r8
 8005cfa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005cfe:	4641      	mov	r1, r8
 8005d00:	018a      	lsls	r2, r1, #6
 8005d02:	4641      	mov	r1, r8
 8005d04:	1a51      	subs	r1, r2, r1
 8005d06:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005d08:	4649      	mov	r1, r9
 8005d0a:	eb63 0301 	sbc.w	r3, r3, r1
 8005d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d10:	f04f 0200 	mov.w	r2, #0
 8005d14:	f04f 0300 	mov.w	r3, #0
 8005d18:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8005d1c:	4649      	mov	r1, r9
 8005d1e:	00cb      	lsls	r3, r1, #3
 8005d20:	4641      	mov	r1, r8
 8005d22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d26:	4641      	mov	r1, r8
 8005d28:	00ca      	lsls	r2, r1, #3
 8005d2a:	4610      	mov	r0, r2
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	4603      	mov	r3, r0
 8005d30:	4622      	mov	r2, r4
 8005d32:	189b      	adds	r3, r3, r2
 8005d34:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d36:	462b      	mov	r3, r5
 8005d38:	460a      	mov	r2, r1
 8005d3a:	eb42 0303 	adc.w	r3, r2, r3
 8005d3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d40:	f04f 0200 	mov.w	r2, #0
 8005d44:	f04f 0300 	mov.w	r3, #0
 8005d48:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005d4c:	4629      	mov	r1, r5
 8005d4e:	024b      	lsls	r3, r1, #9
 8005d50:	4621      	mov	r1, r4
 8005d52:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005d56:	4621      	mov	r1, r4
 8005d58:	024a      	lsls	r2, r1, #9
 8005d5a:	4610      	mov	r0, r2
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005d62:	2200      	movs	r2, #0
 8005d64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005d68:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005d6c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8005d70:	f7fa ffaa 	bl	8000cc8 <__aeabi_uldivmod>
 8005d74:	4602      	mov	r2, r0
 8005d76:	460b      	mov	r3, r1
 8005d78:	4613      	mov	r3, r2
 8005d7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d7e:	e067      	b.n	8005e50 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d80:	4b75      	ldr	r3, [pc, #468]	@ (8005f58 <HAL_RCC_GetSysClockFreq+0x354>)
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	099b      	lsrs	r3, r3, #6
 8005d86:	2200      	movs	r2, #0
 8005d88:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005d8c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8005d90:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005d94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d98:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005d9e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8005da2:	4622      	mov	r2, r4
 8005da4:	462b      	mov	r3, r5
 8005da6:	f04f 0000 	mov.w	r0, #0
 8005daa:	f04f 0100 	mov.w	r1, #0
 8005dae:	0159      	lsls	r1, r3, #5
 8005db0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005db4:	0150      	lsls	r0, r2, #5
 8005db6:	4602      	mov	r2, r0
 8005db8:	460b      	mov	r3, r1
 8005dba:	4621      	mov	r1, r4
 8005dbc:	1a51      	subs	r1, r2, r1
 8005dbe:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005dc0:	4629      	mov	r1, r5
 8005dc2:	eb63 0301 	sbc.w	r3, r3, r1
 8005dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005dc8:	f04f 0200 	mov.w	r2, #0
 8005dcc:	f04f 0300 	mov.w	r3, #0
 8005dd0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8005dd4:	4649      	mov	r1, r9
 8005dd6:	018b      	lsls	r3, r1, #6
 8005dd8:	4641      	mov	r1, r8
 8005dda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005dde:	4641      	mov	r1, r8
 8005de0:	018a      	lsls	r2, r1, #6
 8005de2:	4641      	mov	r1, r8
 8005de4:	ebb2 0a01 	subs.w	sl, r2, r1
 8005de8:	4649      	mov	r1, r9
 8005dea:	eb63 0b01 	sbc.w	fp, r3, r1
 8005dee:	f04f 0200 	mov.w	r2, #0
 8005df2:	f04f 0300 	mov.w	r3, #0
 8005df6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005dfa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005dfe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e02:	4692      	mov	sl, r2
 8005e04:	469b      	mov	fp, r3
 8005e06:	4623      	mov	r3, r4
 8005e08:	eb1a 0303 	adds.w	r3, sl, r3
 8005e0c:	623b      	str	r3, [r7, #32]
 8005e0e:	462b      	mov	r3, r5
 8005e10:	eb4b 0303 	adc.w	r3, fp, r3
 8005e14:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e16:	f04f 0200 	mov.w	r2, #0
 8005e1a:	f04f 0300 	mov.w	r3, #0
 8005e1e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005e22:	4629      	mov	r1, r5
 8005e24:	028b      	lsls	r3, r1, #10
 8005e26:	4621      	mov	r1, r4
 8005e28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005e2c:	4621      	mov	r1, r4
 8005e2e:	028a      	lsls	r2, r1, #10
 8005e30:	4610      	mov	r0, r2
 8005e32:	4619      	mov	r1, r3
 8005e34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005e38:	2200      	movs	r2, #0
 8005e3a:	673b      	str	r3, [r7, #112]	@ 0x70
 8005e3c:	677a      	str	r2, [r7, #116]	@ 0x74
 8005e3e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8005e42:	f7fa ff41 	bl	8000cc8 <__aeabi_uldivmod>
 8005e46:	4602      	mov	r2, r0
 8005e48:	460b      	mov	r3, r1
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005e50:	4b41      	ldr	r3, [pc, #260]	@ (8005f58 <HAL_RCC_GetSysClockFreq+0x354>)
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	0c1b      	lsrs	r3, r3, #16
 8005e56:	f003 0303 	and.w	r3, r3, #3
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	005b      	lsls	r3, r3, #1
 8005e5e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8005e62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005e66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005e72:	e0eb      	b.n	800604c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e74:	4b38      	ldr	r3, [pc, #224]	@ (8005f58 <HAL_RCC_GetSysClockFreq+0x354>)
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e80:	4b35      	ldr	r3, [pc, #212]	@ (8005f58 <HAL_RCC_GetSysClockFreq+0x354>)
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d06b      	beq.n	8005f64 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e8c:	4b32      	ldr	r3, [pc, #200]	@ (8005f58 <HAL_RCC_GetSysClockFreq+0x354>)
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	099b      	lsrs	r3, r3, #6
 8005e92:	2200      	movs	r2, #0
 8005e94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e96:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005e98:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e9e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	667b      	str	r3, [r7, #100]	@ 0x64
 8005ea4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005ea8:	4622      	mov	r2, r4
 8005eaa:	462b      	mov	r3, r5
 8005eac:	f04f 0000 	mov.w	r0, #0
 8005eb0:	f04f 0100 	mov.w	r1, #0
 8005eb4:	0159      	lsls	r1, r3, #5
 8005eb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005eba:	0150      	lsls	r0, r2, #5
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	4621      	mov	r1, r4
 8005ec2:	1a51      	subs	r1, r2, r1
 8005ec4:	61b9      	str	r1, [r7, #24]
 8005ec6:	4629      	mov	r1, r5
 8005ec8:	eb63 0301 	sbc.w	r3, r3, r1
 8005ecc:	61fb      	str	r3, [r7, #28]
 8005ece:	f04f 0200 	mov.w	r2, #0
 8005ed2:	f04f 0300 	mov.w	r3, #0
 8005ed6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005eda:	4659      	mov	r1, fp
 8005edc:	018b      	lsls	r3, r1, #6
 8005ede:	4651      	mov	r1, sl
 8005ee0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005ee4:	4651      	mov	r1, sl
 8005ee6:	018a      	lsls	r2, r1, #6
 8005ee8:	4651      	mov	r1, sl
 8005eea:	ebb2 0801 	subs.w	r8, r2, r1
 8005eee:	4659      	mov	r1, fp
 8005ef0:	eb63 0901 	sbc.w	r9, r3, r1
 8005ef4:	f04f 0200 	mov.w	r2, #0
 8005ef8:	f04f 0300 	mov.w	r3, #0
 8005efc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f00:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f04:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f08:	4690      	mov	r8, r2
 8005f0a:	4699      	mov	r9, r3
 8005f0c:	4623      	mov	r3, r4
 8005f0e:	eb18 0303 	adds.w	r3, r8, r3
 8005f12:	613b      	str	r3, [r7, #16]
 8005f14:	462b      	mov	r3, r5
 8005f16:	eb49 0303 	adc.w	r3, r9, r3
 8005f1a:	617b      	str	r3, [r7, #20]
 8005f1c:	f04f 0200 	mov.w	r2, #0
 8005f20:	f04f 0300 	mov.w	r3, #0
 8005f24:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005f28:	4629      	mov	r1, r5
 8005f2a:	024b      	lsls	r3, r1, #9
 8005f2c:	4621      	mov	r1, r4
 8005f2e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005f32:	4621      	mov	r1, r4
 8005f34:	024a      	lsls	r2, r1, #9
 8005f36:	4610      	mov	r0, r2
 8005f38:	4619      	mov	r1, r3
 8005f3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005f3e:	2200      	movs	r2, #0
 8005f40:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f42:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005f44:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005f48:	f7fa febe 	bl	8000cc8 <__aeabi_uldivmod>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	460b      	mov	r3, r1
 8005f50:	4613      	mov	r3, r2
 8005f52:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f56:	e065      	b.n	8006024 <HAL_RCC_GetSysClockFreq+0x420>
 8005f58:	40023800 	.word	0x40023800
 8005f5c:	00f42400 	.word	0x00f42400
 8005f60:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f64:	4b3d      	ldr	r3, [pc, #244]	@ (800605c <HAL_RCC_GetSysClockFreq+0x458>)
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	099b      	lsrs	r3, r3, #6
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	4611      	mov	r1, r2
 8005f70:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005f74:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f76:	2300      	movs	r3, #0
 8005f78:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f7a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8005f7e:	4642      	mov	r2, r8
 8005f80:	464b      	mov	r3, r9
 8005f82:	f04f 0000 	mov.w	r0, #0
 8005f86:	f04f 0100 	mov.w	r1, #0
 8005f8a:	0159      	lsls	r1, r3, #5
 8005f8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f90:	0150      	lsls	r0, r2, #5
 8005f92:	4602      	mov	r2, r0
 8005f94:	460b      	mov	r3, r1
 8005f96:	4641      	mov	r1, r8
 8005f98:	1a51      	subs	r1, r2, r1
 8005f9a:	60b9      	str	r1, [r7, #8]
 8005f9c:	4649      	mov	r1, r9
 8005f9e:	eb63 0301 	sbc.w	r3, r3, r1
 8005fa2:	60fb      	str	r3, [r7, #12]
 8005fa4:	f04f 0200 	mov.w	r2, #0
 8005fa8:	f04f 0300 	mov.w	r3, #0
 8005fac:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005fb0:	4659      	mov	r1, fp
 8005fb2:	018b      	lsls	r3, r1, #6
 8005fb4:	4651      	mov	r1, sl
 8005fb6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005fba:	4651      	mov	r1, sl
 8005fbc:	018a      	lsls	r2, r1, #6
 8005fbe:	4651      	mov	r1, sl
 8005fc0:	1a54      	subs	r4, r2, r1
 8005fc2:	4659      	mov	r1, fp
 8005fc4:	eb63 0501 	sbc.w	r5, r3, r1
 8005fc8:	f04f 0200 	mov.w	r2, #0
 8005fcc:	f04f 0300 	mov.w	r3, #0
 8005fd0:	00eb      	lsls	r3, r5, #3
 8005fd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005fd6:	00e2      	lsls	r2, r4, #3
 8005fd8:	4614      	mov	r4, r2
 8005fda:	461d      	mov	r5, r3
 8005fdc:	4643      	mov	r3, r8
 8005fde:	18e3      	adds	r3, r4, r3
 8005fe0:	603b      	str	r3, [r7, #0]
 8005fe2:	464b      	mov	r3, r9
 8005fe4:	eb45 0303 	adc.w	r3, r5, r3
 8005fe8:	607b      	str	r3, [r7, #4]
 8005fea:	f04f 0200 	mov.w	r2, #0
 8005fee:	f04f 0300 	mov.w	r3, #0
 8005ff2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005ff6:	4629      	mov	r1, r5
 8005ff8:	028b      	lsls	r3, r1, #10
 8005ffa:	4621      	mov	r1, r4
 8005ffc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006000:	4621      	mov	r1, r4
 8006002:	028a      	lsls	r2, r1, #10
 8006004:	4610      	mov	r0, r2
 8006006:	4619      	mov	r1, r3
 8006008:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800600c:	2200      	movs	r2, #0
 800600e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006010:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006012:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006016:	f7fa fe57 	bl	8000cc8 <__aeabi_uldivmod>
 800601a:	4602      	mov	r2, r0
 800601c:	460b      	mov	r3, r1
 800601e:	4613      	mov	r3, r2
 8006020:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006024:	4b0d      	ldr	r3, [pc, #52]	@ (800605c <HAL_RCC_GetSysClockFreq+0x458>)
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	0f1b      	lsrs	r3, r3, #28
 800602a:	f003 0307 	and.w	r3, r3, #7
 800602e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8006032:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006036:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800603a:	fbb2 f3f3 	udiv	r3, r2, r3
 800603e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006042:	e003      	b.n	800604c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006044:	4b06      	ldr	r3, [pc, #24]	@ (8006060 <HAL_RCC_GetSysClockFreq+0x45c>)
 8006046:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800604a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800604c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8006050:	4618      	mov	r0, r3
 8006052:	37b8      	adds	r7, #184	@ 0xb8
 8006054:	46bd      	mov	sp, r7
 8006056:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800605a:	bf00      	nop
 800605c:	40023800 	.word	0x40023800
 8006060:	00f42400 	.word	0x00f42400

08006064 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b086      	sub	sp, #24
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d101      	bne.n	8006076 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e28d      	b.n	8006592 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 0301 	and.w	r3, r3, #1
 800607e:	2b00      	cmp	r3, #0
 8006080:	f000 8083 	beq.w	800618a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006084:	4b94      	ldr	r3, [pc, #592]	@ (80062d8 <HAL_RCC_OscConfig+0x274>)
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	f003 030c 	and.w	r3, r3, #12
 800608c:	2b04      	cmp	r3, #4
 800608e:	d019      	beq.n	80060c4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006090:	4b91      	ldr	r3, [pc, #580]	@ (80062d8 <HAL_RCC_OscConfig+0x274>)
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	f003 030c 	and.w	r3, r3, #12
        || \
 8006098:	2b08      	cmp	r3, #8
 800609a:	d106      	bne.n	80060aa <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800609c:	4b8e      	ldr	r3, [pc, #568]	@ (80062d8 <HAL_RCC_OscConfig+0x274>)
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80060a8:	d00c      	beq.n	80060c4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80060aa:	4b8b      	ldr	r3, [pc, #556]	@ (80062d8 <HAL_RCC_OscConfig+0x274>)
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80060b2:	2b0c      	cmp	r3, #12
 80060b4:	d112      	bne.n	80060dc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80060b6:	4b88      	ldr	r3, [pc, #544]	@ (80062d8 <HAL_RCC_OscConfig+0x274>)
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80060c2:	d10b      	bne.n	80060dc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060c4:	4b84      	ldr	r3, [pc, #528]	@ (80062d8 <HAL_RCC_OscConfig+0x274>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d05b      	beq.n	8006188 <HAL_RCC_OscConfig+0x124>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d157      	bne.n	8006188 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	e25a      	b.n	8006592 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060e4:	d106      	bne.n	80060f4 <HAL_RCC_OscConfig+0x90>
 80060e6:	4b7c      	ldr	r3, [pc, #496]	@ (80062d8 <HAL_RCC_OscConfig+0x274>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a7b      	ldr	r2, [pc, #492]	@ (80062d8 <HAL_RCC_OscConfig+0x274>)
 80060ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060f0:	6013      	str	r3, [r2, #0]
 80060f2:	e01d      	b.n	8006130 <HAL_RCC_OscConfig+0xcc>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80060fc:	d10c      	bne.n	8006118 <HAL_RCC_OscConfig+0xb4>
 80060fe:	4b76      	ldr	r3, [pc, #472]	@ (80062d8 <HAL_RCC_OscConfig+0x274>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a75      	ldr	r2, [pc, #468]	@ (80062d8 <HAL_RCC_OscConfig+0x274>)
 8006104:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006108:	6013      	str	r3, [r2, #0]
 800610a:	4b73      	ldr	r3, [pc, #460]	@ (80062d8 <HAL_RCC_OscConfig+0x274>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a72      	ldr	r2, [pc, #456]	@ (80062d8 <HAL_RCC_OscConfig+0x274>)
 8006110:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006114:	6013      	str	r3, [r2, #0]
 8006116:	e00b      	b.n	8006130 <HAL_RCC_OscConfig+0xcc>
 8006118:	4b6f      	ldr	r3, [pc, #444]	@ (80062d8 <HAL_RCC_OscConfig+0x274>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a6e      	ldr	r2, [pc, #440]	@ (80062d8 <HAL_RCC_OscConfig+0x274>)
 800611e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006122:	6013      	str	r3, [r2, #0]
 8006124:	4b6c      	ldr	r3, [pc, #432]	@ (80062d8 <HAL_RCC_OscConfig+0x274>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a6b      	ldr	r2, [pc, #428]	@ (80062d8 <HAL_RCC_OscConfig+0x274>)
 800612a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800612e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d013      	beq.n	8006160 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006138:	f7fc fa24 	bl	8002584 <HAL_GetTick>
 800613c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800613e:	e008      	b.n	8006152 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006140:	f7fc fa20 	bl	8002584 <HAL_GetTick>
 8006144:	4602      	mov	r2, r0
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	2b64      	cmp	r3, #100	@ 0x64
 800614c:	d901      	bls.n	8006152 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	e21f      	b.n	8006592 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006152:	4b61      	ldr	r3, [pc, #388]	@ (80062d8 <HAL_RCC_OscConfig+0x274>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800615a:	2b00      	cmp	r3, #0
 800615c:	d0f0      	beq.n	8006140 <HAL_RCC_OscConfig+0xdc>
 800615e:	e014      	b.n	800618a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006160:	f7fc fa10 	bl	8002584 <HAL_GetTick>
 8006164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006166:	e008      	b.n	800617a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006168:	f7fc fa0c 	bl	8002584 <HAL_GetTick>
 800616c:	4602      	mov	r2, r0
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	1ad3      	subs	r3, r2, r3
 8006172:	2b64      	cmp	r3, #100	@ 0x64
 8006174:	d901      	bls.n	800617a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	e20b      	b.n	8006592 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800617a:	4b57      	ldr	r3, [pc, #348]	@ (80062d8 <HAL_RCC_OscConfig+0x274>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1f0      	bne.n	8006168 <HAL_RCC_OscConfig+0x104>
 8006186:	e000      	b.n	800618a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 0302 	and.w	r3, r3, #2
 8006192:	2b00      	cmp	r3, #0
 8006194:	d06f      	beq.n	8006276 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006196:	4b50      	ldr	r3, [pc, #320]	@ (80062d8 <HAL_RCC_OscConfig+0x274>)
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	f003 030c 	and.w	r3, r3, #12
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d017      	beq.n	80061d2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80061a2:	4b4d      	ldr	r3, [pc, #308]	@ (80062d8 <HAL_RCC_OscConfig+0x274>)
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	f003 030c 	and.w	r3, r3, #12
        || \
 80061aa:	2b08      	cmp	r3, #8
 80061ac:	d105      	bne.n	80061ba <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80061ae:	4b4a      	ldr	r3, [pc, #296]	@ (80062d8 <HAL_RCC_OscConfig+0x274>)
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00b      	beq.n	80061d2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061ba:	4b47      	ldr	r3, [pc, #284]	@ (80062d8 <HAL_RCC_OscConfig+0x274>)
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80061c2:	2b0c      	cmp	r3, #12
 80061c4:	d11c      	bne.n	8006200 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061c6:	4b44      	ldr	r3, [pc, #272]	@ (80062d8 <HAL_RCC_OscConfig+0x274>)
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d116      	bne.n	8006200 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061d2:	4b41      	ldr	r3, [pc, #260]	@ (80062d8 <HAL_RCC_OscConfig+0x274>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 0302 	and.w	r3, r3, #2
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d005      	beq.n	80061ea <HAL_RCC_OscConfig+0x186>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d001      	beq.n	80061ea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e1d3      	b.n	8006592 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061ea:	4b3b      	ldr	r3, [pc, #236]	@ (80062d8 <HAL_RCC_OscConfig+0x274>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	00db      	lsls	r3, r3, #3
 80061f8:	4937      	ldr	r1, [pc, #220]	@ (80062d8 <HAL_RCC_OscConfig+0x274>)
 80061fa:	4313      	orrs	r3, r2
 80061fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061fe:	e03a      	b.n	8006276 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d020      	beq.n	800624a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006208:	4b34      	ldr	r3, [pc, #208]	@ (80062dc <HAL_RCC_OscConfig+0x278>)
 800620a:	2201      	movs	r2, #1
 800620c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800620e:	f7fc f9b9 	bl	8002584 <HAL_GetTick>
 8006212:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006214:	e008      	b.n	8006228 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006216:	f7fc f9b5 	bl	8002584 <HAL_GetTick>
 800621a:	4602      	mov	r2, r0
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	2b02      	cmp	r3, #2
 8006222:	d901      	bls.n	8006228 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006224:	2303      	movs	r3, #3
 8006226:	e1b4      	b.n	8006592 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006228:	4b2b      	ldr	r3, [pc, #172]	@ (80062d8 <HAL_RCC_OscConfig+0x274>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 0302 	and.w	r3, r3, #2
 8006230:	2b00      	cmp	r3, #0
 8006232:	d0f0      	beq.n	8006216 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006234:	4b28      	ldr	r3, [pc, #160]	@ (80062d8 <HAL_RCC_OscConfig+0x274>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	00db      	lsls	r3, r3, #3
 8006242:	4925      	ldr	r1, [pc, #148]	@ (80062d8 <HAL_RCC_OscConfig+0x274>)
 8006244:	4313      	orrs	r3, r2
 8006246:	600b      	str	r3, [r1, #0]
 8006248:	e015      	b.n	8006276 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800624a:	4b24      	ldr	r3, [pc, #144]	@ (80062dc <HAL_RCC_OscConfig+0x278>)
 800624c:	2200      	movs	r2, #0
 800624e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006250:	f7fc f998 	bl	8002584 <HAL_GetTick>
 8006254:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006256:	e008      	b.n	800626a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006258:	f7fc f994 	bl	8002584 <HAL_GetTick>
 800625c:	4602      	mov	r2, r0
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	2b02      	cmp	r3, #2
 8006264:	d901      	bls.n	800626a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006266:	2303      	movs	r3, #3
 8006268:	e193      	b.n	8006592 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800626a:	4b1b      	ldr	r3, [pc, #108]	@ (80062d8 <HAL_RCC_OscConfig+0x274>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 0302 	and.w	r3, r3, #2
 8006272:	2b00      	cmp	r3, #0
 8006274:	d1f0      	bne.n	8006258 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 0308 	and.w	r3, r3, #8
 800627e:	2b00      	cmp	r3, #0
 8006280:	d036      	beq.n	80062f0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d016      	beq.n	80062b8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800628a:	4b15      	ldr	r3, [pc, #84]	@ (80062e0 <HAL_RCC_OscConfig+0x27c>)
 800628c:	2201      	movs	r2, #1
 800628e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006290:	f7fc f978 	bl	8002584 <HAL_GetTick>
 8006294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006296:	e008      	b.n	80062aa <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006298:	f7fc f974 	bl	8002584 <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d901      	bls.n	80062aa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e173      	b.n	8006592 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062aa:	4b0b      	ldr	r3, [pc, #44]	@ (80062d8 <HAL_RCC_OscConfig+0x274>)
 80062ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062ae:	f003 0302 	and.w	r3, r3, #2
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d0f0      	beq.n	8006298 <HAL_RCC_OscConfig+0x234>
 80062b6:	e01b      	b.n	80062f0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062b8:	4b09      	ldr	r3, [pc, #36]	@ (80062e0 <HAL_RCC_OscConfig+0x27c>)
 80062ba:	2200      	movs	r2, #0
 80062bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062be:	f7fc f961 	bl	8002584 <HAL_GetTick>
 80062c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062c4:	e00e      	b.n	80062e4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062c6:	f7fc f95d 	bl	8002584 <HAL_GetTick>
 80062ca:	4602      	mov	r2, r0
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	1ad3      	subs	r3, r2, r3
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	d907      	bls.n	80062e4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e15c      	b.n	8006592 <HAL_RCC_OscConfig+0x52e>
 80062d8:	40023800 	.word	0x40023800
 80062dc:	42470000 	.word	0x42470000
 80062e0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062e4:	4b8a      	ldr	r3, [pc, #552]	@ (8006510 <HAL_RCC_OscConfig+0x4ac>)
 80062e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062e8:	f003 0302 	and.w	r3, r3, #2
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d1ea      	bne.n	80062c6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 0304 	and.w	r3, r3, #4
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f000 8097 	beq.w	800642c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062fe:	2300      	movs	r3, #0
 8006300:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006302:	4b83      	ldr	r3, [pc, #524]	@ (8006510 <HAL_RCC_OscConfig+0x4ac>)
 8006304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800630a:	2b00      	cmp	r3, #0
 800630c:	d10f      	bne.n	800632e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800630e:	2300      	movs	r3, #0
 8006310:	60bb      	str	r3, [r7, #8]
 8006312:	4b7f      	ldr	r3, [pc, #508]	@ (8006510 <HAL_RCC_OscConfig+0x4ac>)
 8006314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006316:	4a7e      	ldr	r2, [pc, #504]	@ (8006510 <HAL_RCC_OscConfig+0x4ac>)
 8006318:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800631c:	6413      	str	r3, [r2, #64]	@ 0x40
 800631e:	4b7c      	ldr	r3, [pc, #496]	@ (8006510 <HAL_RCC_OscConfig+0x4ac>)
 8006320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006322:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006326:	60bb      	str	r3, [r7, #8]
 8006328:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800632a:	2301      	movs	r3, #1
 800632c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800632e:	4b79      	ldr	r3, [pc, #484]	@ (8006514 <HAL_RCC_OscConfig+0x4b0>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006336:	2b00      	cmp	r3, #0
 8006338:	d118      	bne.n	800636c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800633a:	4b76      	ldr	r3, [pc, #472]	@ (8006514 <HAL_RCC_OscConfig+0x4b0>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a75      	ldr	r2, [pc, #468]	@ (8006514 <HAL_RCC_OscConfig+0x4b0>)
 8006340:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006344:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006346:	f7fc f91d 	bl	8002584 <HAL_GetTick>
 800634a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800634c:	e008      	b.n	8006360 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800634e:	f7fc f919 	bl	8002584 <HAL_GetTick>
 8006352:	4602      	mov	r2, r0
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	2b02      	cmp	r3, #2
 800635a:	d901      	bls.n	8006360 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	e118      	b.n	8006592 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006360:	4b6c      	ldr	r3, [pc, #432]	@ (8006514 <HAL_RCC_OscConfig+0x4b0>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006368:	2b00      	cmp	r3, #0
 800636a:	d0f0      	beq.n	800634e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	2b01      	cmp	r3, #1
 8006372:	d106      	bne.n	8006382 <HAL_RCC_OscConfig+0x31e>
 8006374:	4b66      	ldr	r3, [pc, #408]	@ (8006510 <HAL_RCC_OscConfig+0x4ac>)
 8006376:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006378:	4a65      	ldr	r2, [pc, #404]	@ (8006510 <HAL_RCC_OscConfig+0x4ac>)
 800637a:	f043 0301 	orr.w	r3, r3, #1
 800637e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006380:	e01c      	b.n	80063bc <HAL_RCC_OscConfig+0x358>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	2b05      	cmp	r3, #5
 8006388:	d10c      	bne.n	80063a4 <HAL_RCC_OscConfig+0x340>
 800638a:	4b61      	ldr	r3, [pc, #388]	@ (8006510 <HAL_RCC_OscConfig+0x4ac>)
 800638c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800638e:	4a60      	ldr	r2, [pc, #384]	@ (8006510 <HAL_RCC_OscConfig+0x4ac>)
 8006390:	f043 0304 	orr.w	r3, r3, #4
 8006394:	6713      	str	r3, [r2, #112]	@ 0x70
 8006396:	4b5e      	ldr	r3, [pc, #376]	@ (8006510 <HAL_RCC_OscConfig+0x4ac>)
 8006398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800639a:	4a5d      	ldr	r2, [pc, #372]	@ (8006510 <HAL_RCC_OscConfig+0x4ac>)
 800639c:	f043 0301 	orr.w	r3, r3, #1
 80063a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80063a2:	e00b      	b.n	80063bc <HAL_RCC_OscConfig+0x358>
 80063a4:	4b5a      	ldr	r3, [pc, #360]	@ (8006510 <HAL_RCC_OscConfig+0x4ac>)
 80063a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063a8:	4a59      	ldr	r2, [pc, #356]	@ (8006510 <HAL_RCC_OscConfig+0x4ac>)
 80063aa:	f023 0301 	bic.w	r3, r3, #1
 80063ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80063b0:	4b57      	ldr	r3, [pc, #348]	@ (8006510 <HAL_RCC_OscConfig+0x4ac>)
 80063b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063b4:	4a56      	ldr	r2, [pc, #344]	@ (8006510 <HAL_RCC_OscConfig+0x4ac>)
 80063b6:	f023 0304 	bic.w	r3, r3, #4
 80063ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d015      	beq.n	80063f0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063c4:	f7fc f8de 	bl	8002584 <HAL_GetTick>
 80063c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063ca:	e00a      	b.n	80063e2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063cc:	f7fc f8da 	bl	8002584 <HAL_GetTick>
 80063d0:	4602      	mov	r2, r0
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	1ad3      	subs	r3, r2, r3
 80063d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063da:	4293      	cmp	r3, r2
 80063dc:	d901      	bls.n	80063e2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80063de:	2303      	movs	r3, #3
 80063e0:	e0d7      	b.n	8006592 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063e2:	4b4b      	ldr	r3, [pc, #300]	@ (8006510 <HAL_RCC_OscConfig+0x4ac>)
 80063e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063e6:	f003 0302 	and.w	r3, r3, #2
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d0ee      	beq.n	80063cc <HAL_RCC_OscConfig+0x368>
 80063ee:	e014      	b.n	800641a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063f0:	f7fc f8c8 	bl	8002584 <HAL_GetTick>
 80063f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063f6:	e00a      	b.n	800640e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063f8:	f7fc f8c4 	bl	8002584 <HAL_GetTick>
 80063fc:	4602      	mov	r2, r0
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006406:	4293      	cmp	r3, r2
 8006408:	d901      	bls.n	800640e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800640a:	2303      	movs	r3, #3
 800640c:	e0c1      	b.n	8006592 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800640e:	4b40      	ldr	r3, [pc, #256]	@ (8006510 <HAL_RCC_OscConfig+0x4ac>)
 8006410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006412:	f003 0302 	and.w	r3, r3, #2
 8006416:	2b00      	cmp	r3, #0
 8006418:	d1ee      	bne.n	80063f8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800641a:	7dfb      	ldrb	r3, [r7, #23]
 800641c:	2b01      	cmp	r3, #1
 800641e:	d105      	bne.n	800642c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006420:	4b3b      	ldr	r3, [pc, #236]	@ (8006510 <HAL_RCC_OscConfig+0x4ac>)
 8006422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006424:	4a3a      	ldr	r2, [pc, #232]	@ (8006510 <HAL_RCC_OscConfig+0x4ac>)
 8006426:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800642a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	699b      	ldr	r3, [r3, #24]
 8006430:	2b00      	cmp	r3, #0
 8006432:	f000 80ad 	beq.w	8006590 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006436:	4b36      	ldr	r3, [pc, #216]	@ (8006510 <HAL_RCC_OscConfig+0x4ac>)
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	f003 030c 	and.w	r3, r3, #12
 800643e:	2b08      	cmp	r3, #8
 8006440:	d060      	beq.n	8006504 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	699b      	ldr	r3, [r3, #24]
 8006446:	2b02      	cmp	r3, #2
 8006448:	d145      	bne.n	80064d6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800644a:	4b33      	ldr	r3, [pc, #204]	@ (8006518 <HAL_RCC_OscConfig+0x4b4>)
 800644c:	2200      	movs	r2, #0
 800644e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006450:	f7fc f898 	bl	8002584 <HAL_GetTick>
 8006454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006456:	e008      	b.n	800646a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006458:	f7fc f894 	bl	8002584 <HAL_GetTick>
 800645c:	4602      	mov	r2, r0
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	2b02      	cmp	r3, #2
 8006464:	d901      	bls.n	800646a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	e093      	b.n	8006592 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800646a:	4b29      	ldr	r3, [pc, #164]	@ (8006510 <HAL_RCC_OscConfig+0x4ac>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1f0      	bne.n	8006458 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	69da      	ldr	r2, [r3, #28]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	431a      	orrs	r2, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006484:	019b      	lsls	r3, r3, #6
 8006486:	431a      	orrs	r2, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800648c:	085b      	lsrs	r3, r3, #1
 800648e:	3b01      	subs	r3, #1
 8006490:	041b      	lsls	r3, r3, #16
 8006492:	431a      	orrs	r2, r3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006498:	061b      	lsls	r3, r3, #24
 800649a:	431a      	orrs	r2, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064a0:	071b      	lsls	r3, r3, #28
 80064a2:	491b      	ldr	r1, [pc, #108]	@ (8006510 <HAL_RCC_OscConfig+0x4ac>)
 80064a4:	4313      	orrs	r3, r2
 80064a6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064a8:	4b1b      	ldr	r3, [pc, #108]	@ (8006518 <HAL_RCC_OscConfig+0x4b4>)
 80064aa:	2201      	movs	r2, #1
 80064ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ae:	f7fc f869 	bl	8002584 <HAL_GetTick>
 80064b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064b4:	e008      	b.n	80064c8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064b6:	f7fc f865 	bl	8002584 <HAL_GetTick>
 80064ba:	4602      	mov	r2, r0
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	1ad3      	subs	r3, r2, r3
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d901      	bls.n	80064c8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80064c4:	2303      	movs	r3, #3
 80064c6:	e064      	b.n	8006592 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064c8:	4b11      	ldr	r3, [pc, #68]	@ (8006510 <HAL_RCC_OscConfig+0x4ac>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d0f0      	beq.n	80064b6 <HAL_RCC_OscConfig+0x452>
 80064d4:	e05c      	b.n	8006590 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064d6:	4b10      	ldr	r3, [pc, #64]	@ (8006518 <HAL_RCC_OscConfig+0x4b4>)
 80064d8:	2200      	movs	r2, #0
 80064da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064dc:	f7fc f852 	bl	8002584 <HAL_GetTick>
 80064e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064e2:	e008      	b.n	80064f6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064e4:	f7fc f84e 	bl	8002584 <HAL_GetTick>
 80064e8:	4602      	mov	r2, r0
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	1ad3      	subs	r3, r2, r3
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	d901      	bls.n	80064f6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	e04d      	b.n	8006592 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064f6:	4b06      	ldr	r3, [pc, #24]	@ (8006510 <HAL_RCC_OscConfig+0x4ac>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d1f0      	bne.n	80064e4 <HAL_RCC_OscConfig+0x480>
 8006502:	e045      	b.n	8006590 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	699b      	ldr	r3, [r3, #24]
 8006508:	2b01      	cmp	r3, #1
 800650a:	d107      	bne.n	800651c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	e040      	b.n	8006592 <HAL_RCC_OscConfig+0x52e>
 8006510:	40023800 	.word	0x40023800
 8006514:	40007000 	.word	0x40007000
 8006518:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800651c:	4b1f      	ldr	r3, [pc, #124]	@ (800659c <HAL_RCC_OscConfig+0x538>)
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	699b      	ldr	r3, [r3, #24]
 8006526:	2b01      	cmp	r3, #1
 8006528:	d030      	beq.n	800658c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006534:	429a      	cmp	r2, r3
 8006536:	d129      	bne.n	800658c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006542:	429a      	cmp	r2, r3
 8006544:	d122      	bne.n	800658c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006546:	68fa      	ldr	r2, [r7, #12]
 8006548:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800654c:	4013      	ands	r3, r2
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006552:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006554:	4293      	cmp	r3, r2
 8006556:	d119      	bne.n	800658c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006562:	085b      	lsrs	r3, r3, #1
 8006564:	3b01      	subs	r3, #1
 8006566:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006568:	429a      	cmp	r2, r3
 800656a:	d10f      	bne.n	800658c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006576:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006578:	429a      	cmp	r2, r3
 800657a:	d107      	bne.n	800658c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006586:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006588:	429a      	cmp	r2, r3
 800658a:	d001      	beq.n	8006590 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	e000      	b.n	8006592 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3718      	adds	r7, #24
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	40023800 	.word	0x40023800

080065a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b082      	sub	sp, #8
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d101      	bne.n	80065b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e07b      	b.n	80066aa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d108      	bne.n	80065cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80065c2:	d009      	beq.n	80065d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	61da      	str	r2, [r3, #28]
 80065ca:	e005      	b.n	80065d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d106      	bne.n	80065f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f7fb fd02 	bl	8001ffc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2202      	movs	r2, #2
 80065fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800660e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006620:	431a      	orrs	r2, r3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800662a:	431a      	orrs	r2, r3
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	f003 0302 	and.w	r3, r3, #2
 8006634:	431a      	orrs	r2, r3
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	f003 0301 	and.w	r3, r3, #1
 800663e:	431a      	orrs	r2, r3
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006648:	431a      	orrs	r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	69db      	ldr	r3, [r3, #28]
 800664e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006652:	431a      	orrs	r2, r3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6a1b      	ldr	r3, [r3, #32]
 8006658:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800665c:	ea42 0103 	orr.w	r1, r2, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006664:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	430a      	orrs	r2, r1
 800666e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	699b      	ldr	r3, [r3, #24]
 8006674:	0c1b      	lsrs	r3, r3, #16
 8006676:	f003 0104 	and.w	r1, r3, #4
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800667e:	f003 0210 	and.w	r2, r3, #16
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	430a      	orrs	r2, r1
 8006688:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	69da      	ldr	r2, [r3, #28]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006698:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3708      	adds	r7, #8
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
	...

080066b4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b085      	sub	sp, #20
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d001      	beq.n	80066cc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e046      	b.n	800675a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2202      	movs	r2, #2
 80066d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a23      	ldr	r2, [pc, #140]	@ (8006768 <HAL_TIM_Base_Start+0xb4>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d022      	beq.n	8006724 <HAL_TIM_Base_Start+0x70>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066e6:	d01d      	beq.n	8006724 <HAL_TIM_Base_Start+0x70>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a1f      	ldr	r2, [pc, #124]	@ (800676c <HAL_TIM_Base_Start+0xb8>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d018      	beq.n	8006724 <HAL_TIM_Base_Start+0x70>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a1e      	ldr	r2, [pc, #120]	@ (8006770 <HAL_TIM_Base_Start+0xbc>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d013      	beq.n	8006724 <HAL_TIM_Base_Start+0x70>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a1c      	ldr	r2, [pc, #112]	@ (8006774 <HAL_TIM_Base_Start+0xc0>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d00e      	beq.n	8006724 <HAL_TIM_Base_Start+0x70>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a1b      	ldr	r2, [pc, #108]	@ (8006778 <HAL_TIM_Base_Start+0xc4>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d009      	beq.n	8006724 <HAL_TIM_Base_Start+0x70>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a19      	ldr	r2, [pc, #100]	@ (800677c <HAL_TIM_Base_Start+0xc8>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d004      	beq.n	8006724 <HAL_TIM_Base_Start+0x70>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a18      	ldr	r2, [pc, #96]	@ (8006780 <HAL_TIM_Base_Start+0xcc>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d111      	bne.n	8006748 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	f003 0307 	and.w	r3, r3, #7
 800672e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2b06      	cmp	r3, #6
 8006734:	d010      	beq.n	8006758 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f042 0201 	orr.w	r2, r2, #1
 8006744:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006746:	e007      	b.n	8006758 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f042 0201 	orr.w	r2, r2, #1
 8006756:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3714      	adds	r7, #20
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	40010000 	.word	0x40010000
 800676c:	40000400 	.word	0x40000400
 8006770:	40000800 	.word	0x40000800
 8006774:	40000c00 	.word	0x40000c00
 8006778:	40010400 	.word	0x40010400
 800677c:	40014000 	.word	0x40014000
 8006780:	40001800 	.word	0x40001800

08006784 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	6a1a      	ldr	r2, [r3, #32]
 8006792:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006796:	4013      	ands	r3, r2
 8006798:	2b00      	cmp	r3, #0
 800679a:	d10f      	bne.n	80067bc <HAL_TIM_Base_Stop+0x38>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	6a1a      	ldr	r2, [r3, #32]
 80067a2:	f240 4344 	movw	r3, #1092	@ 0x444
 80067a6:	4013      	ands	r3, r2
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d107      	bne.n	80067bc <HAL_TIM_Base_Stop+0x38>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f022 0201 	bic.w	r2, r2, #1
 80067ba:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	370c      	adds	r7, #12
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr

080067d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80067d2:	b580      	push	{r7, lr}
 80067d4:	b082      	sub	sp, #8
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d101      	bne.n	80067e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	e041      	b.n	8006868 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d106      	bne.n	80067fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f7fb fc8f 	bl	800211c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2202      	movs	r2, #2
 8006802:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	3304      	adds	r3, #4
 800680e:	4619      	mov	r1, r3
 8006810:	4610      	mov	r0, r2
 8006812:	f000 fc41 	bl	8007098 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2201      	movs	r2, #1
 800681a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2201      	movs	r2, #1
 8006822:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2201      	movs	r2, #1
 800682a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2201      	movs	r2, #1
 8006832:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2201      	movs	r2, #1
 800683a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2201      	movs	r2, #1
 8006842:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2201      	movs	r2, #1
 800684a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2201      	movs	r2, #1
 8006852:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2201      	movs	r2, #1
 800685a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2201      	movs	r2, #1
 8006862:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006866:	2300      	movs	r3, #0
}
 8006868:	4618      	mov	r0, r3
 800686a:	3708      	adds	r7, #8
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d101      	bne.n	8006882 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e041      	b.n	8006906 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006888:	b2db      	uxtb	r3, r3
 800688a:	2b00      	cmp	r3, #0
 800688c:	d106      	bne.n	800689c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f7fb fbf8 	bl	800208c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2202      	movs	r2, #2
 80068a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	3304      	adds	r3, #4
 80068ac:	4619      	mov	r1, r3
 80068ae:	4610      	mov	r0, r2
 80068b0:	f000 fbf2 	bl	8007098 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3708      	adds	r7, #8
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
	...

08006910 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d104      	bne.n	800692a <HAL_TIM_IC_Start+0x1a>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006926:	b2db      	uxtb	r3, r3
 8006928:	e013      	b.n	8006952 <HAL_TIM_IC_Start+0x42>
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	2b04      	cmp	r3, #4
 800692e:	d104      	bne.n	800693a <HAL_TIM_IC_Start+0x2a>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006936:	b2db      	uxtb	r3, r3
 8006938:	e00b      	b.n	8006952 <HAL_TIM_IC_Start+0x42>
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	2b08      	cmp	r3, #8
 800693e:	d104      	bne.n	800694a <HAL_TIM_IC_Start+0x3a>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006946:	b2db      	uxtb	r3, r3
 8006948:	e003      	b.n	8006952 <HAL_TIM_IC_Start+0x42>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006950:	b2db      	uxtb	r3, r3
 8006952:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d104      	bne.n	8006964 <HAL_TIM_IC_Start+0x54>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006960:	b2db      	uxtb	r3, r3
 8006962:	e013      	b.n	800698c <HAL_TIM_IC_Start+0x7c>
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	2b04      	cmp	r3, #4
 8006968:	d104      	bne.n	8006974 <HAL_TIM_IC_Start+0x64>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006970:	b2db      	uxtb	r3, r3
 8006972:	e00b      	b.n	800698c <HAL_TIM_IC_Start+0x7c>
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	2b08      	cmp	r3, #8
 8006978:	d104      	bne.n	8006984 <HAL_TIM_IC_Start+0x74>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006980:	b2db      	uxtb	r3, r3
 8006982:	e003      	b.n	800698c <HAL_TIM_IC_Start+0x7c>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800698a:	b2db      	uxtb	r3, r3
 800698c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800698e:	7bfb      	ldrb	r3, [r7, #15]
 8006990:	2b01      	cmp	r3, #1
 8006992:	d102      	bne.n	800699a <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006994:	7bbb      	ldrb	r3, [r7, #14]
 8006996:	2b01      	cmp	r3, #1
 8006998:	d001      	beq.n	800699e <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	e081      	b.n	8006aa2 <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d104      	bne.n	80069ae <HAL_TIM_IC_Start+0x9e>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2202      	movs	r2, #2
 80069a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80069ac:	e013      	b.n	80069d6 <HAL_TIM_IC_Start+0xc6>
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	2b04      	cmp	r3, #4
 80069b2:	d104      	bne.n	80069be <HAL_TIM_IC_Start+0xae>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2202      	movs	r2, #2
 80069b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80069bc:	e00b      	b.n	80069d6 <HAL_TIM_IC_Start+0xc6>
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	2b08      	cmp	r3, #8
 80069c2:	d104      	bne.n	80069ce <HAL_TIM_IC_Start+0xbe>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2202      	movs	r2, #2
 80069c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80069cc:	e003      	b.n	80069d6 <HAL_TIM_IC_Start+0xc6>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2202      	movs	r2, #2
 80069d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d104      	bne.n	80069e6 <HAL_TIM_IC_Start+0xd6>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2202      	movs	r2, #2
 80069e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80069e4:	e013      	b.n	8006a0e <HAL_TIM_IC_Start+0xfe>
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	2b04      	cmp	r3, #4
 80069ea:	d104      	bne.n	80069f6 <HAL_TIM_IC_Start+0xe6>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2202      	movs	r2, #2
 80069f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80069f4:	e00b      	b.n	8006a0e <HAL_TIM_IC_Start+0xfe>
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	2b08      	cmp	r3, #8
 80069fa:	d104      	bne.n	8006a06 <HAL_TIM_IC_Start+0xf6>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2202      	movs	r2, #2
 8006a00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a04:	e003      	b.n	8006a0e <HAL_TIM_IC_Start+0xfe>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2202      	movs	r2, #2
 8006a0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2201      	movs	r2, #1
 8006a14:	6839      	ldr	r1, [r7, #0]
 8006a16:	4618      	mov	r0, r3
 8006a18:	f000 fec4 	bl	80077a4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a22      	ldr	r2, [pc, #136]	@ (8006aac <HAL_TIM_IC_Start+0x19c>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d022      	beq.n	8006a6c <HAL_TIM_IC_Start+0x15c>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a2e:	d01d      	beq.n	8006a6c <HAL_TIM_IC_Start+0x15c>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a1e      	ldr	r2, [pc, #120]	@ (8006ab0 <HAL_TIM_IC_Start+0x1a0>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d018      	beq.n	8006a6c <HAL_TIM_IC_Start+0x15c>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a1d      	ldr	r2, [pc, #116]	@ (8006ab4 <HAL_TIM_IC_Start+0x1a4>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d013      	beq.n	8006a6c <HAL_TIM_IC_Start+0x15c>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a1b      	ldr	r2, [pc, #108]	@ (8006ab8 <HAL_TIM_IC_Start+0x1a8>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d00e      	beq.n	8006a6c <HAL_TIM_IC_Start+0x15c>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a1a      	ldr	r2, [pc, #104]	@ (8006abc <HAL_TIM_IC_Start+0x1ac>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d009      	beq.n	8006a6c <HAL_TIM_IC_Start+0x15c>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a18      	ldr	r2, [pc, #96]	@ (8006ac0 <HAL_TIM_IC_Start+0x1b0>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d004      	beq.n	8006a6c <HAL_TIM_IC_Start+0x15c>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a17      	ldr	r2, [pc, #92]	@ (8006ac4 <HAL_TIM_IC_Start+0x1b4>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d111      	bne.n	8006a90 <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	f003 0307 	and.w	r3, r3, #7
 8006a76:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	2b06      	cmp	r3, #6
 8006a7c:	d010      	beq.n	8006aa0 <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f042 0201 	orr.w	r2, r2, #1
 8006a8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a8e:	e007      	b.n	8006aa0 <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f042 0201 	orr.w	r2, r2, #1
 8006a9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	40010000 	.word	0x40010000
 8006ab0:	40000400 	.word	0x40000400
 8006ab4:	40000800 	.word	0x40000800
 8006ab8:	40000c00 	.word	0x40000c00
 8006abc:	40010400 	.word	0x40010400
 8006ac0:	40014000 	.word	0x40014000
 8006ac4:	40001800 	.word	0x40001800

08006ac8 <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	6839      	ldr	r1, [r7, #0]
 8006ada:	4618      	mov	r0, r3
 8006adc:	f000 fe62 	bl	80077a4 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	6a1a      	ldr	r2, [r3, #32]
 8006ae6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006aea:	4013      	ands	r3, r2
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d10f      	bne.n	8006b10 <HAL_TIM_IC_Stop+0x48>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	6a1a      	ldr	r2, [r3, #32]
 8006af6:	f240 4344 	movw	r3, #1092	@ 0x444
 8006afa:	4013      	ands	r3, r2
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d107      	bne.n	8006b10 <HAL_TIM_IC_Stop+0x48>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f022 0201 	bic.w	r2, r2, #1
 8006b0e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d104      	bne.n	8006b20 <HAL_TIM_IC_Stop+0x58>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b1e:	e013      	b.n	8006b48 <HAL_TIM_IC_Stop+0x80>
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	2b04      	cmp	r3, #4
 8006b24:	d104      	bne.n	8006b30 <HAL_TIM_IC_Stop+0x68>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2201      	movs	r2, #1
 8006b2a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b2e:	e00b      	b.n	8006b48 <HAL_TIM_IC_Stop+0x80>
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	2b08      	cmp	r3, #8
 8006b34:	d104      	bne.n	8006b40 <HAL_TIM_IC_Stop+0x78>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b3e:	e003      	b.n	8006b48 <HAL_TIM_IC_Stop+0x80>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d104      	bne.n	8006b58 <HAL_TIM_IC_Stop+0x90>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2201      	movs	r2, #1
 8006b52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b56:	e013      	b.n	8006b80 <HAL_TIM_IC_Stop+0xb8>
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	2b04      	cmp	r3, #4
 8006b5c:	d104      	bne.n	8006b68 <HAL_TIM_IC_Stop+0xa0>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2201      	movs	r2, #1
 8006b62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006b66:	e00b      	b.n	8006b80 <HAL_TIM_IC_Stop+0xb8>
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	2b08      	cmp	r3, #8
 8006b6c:	d104      	bne.n	8006b78 <HAL_TIM_IC_Stop+0xb0>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2201      	movs	r2, #1
 8006b72:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b76:	e003      	b.n	8006b80 <HAL_TIM_IC_Stop+0xb8>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3708      	adds	r7, #8
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
	...

08006b8c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b96:	2300      	movs	r3, #0
 8006b98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d104      	bne.n	8006baa <HAL_TIM_IC_Start_IT+0x1e>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	e013      	b.n	8006bd2 <HAL_TIM_IC_Start_IT+0x46>
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	2b04      	cmp	r3, #4
 8006bae:	d104      	bne.n	8006bba <HAL_TIM_IC_Start_IT+0x2e>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	e00b      	b.n	8006bd2 <HAL_TIM_IC_Start_IT+0x46>
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	2b08      	cmp	r3, #8
 8006bbe:	d104      	bne.n	8006bca <HAL_TIM_IC_Start_IT+0x3e>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	e003      	b.n	8006bd2 <HAL_TIM_IC_Start_IT+0x46>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d104      	bne.n	8006be4 <HAL_TIM_IC_Start_IT+0x58>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	e013      	b.n	8006c0c <HAL_TIM_IC_Start_IT+0x80>
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	2b04      	cmp	r3, #4
 8006be8:	d104      	bne.n	8006bf4 <HAL_TIM_IC_Start_IT+0x68>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	e00b      	b.n	8006c0c <HAL_TIM_IC_Start_IT+0x80>
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	2b08      	cmp	r3, #8
 8006bf8:	d104      	bne.n	8006c04 <HAL_TIM_IC_Start_IT+0x78>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	e003      	b.n	8006c0c <HAL_TIM_IC_Start_IT+0x80>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c0e:	7bbb      	ldrb	r3, [r7, #14]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d102      	bne.n	8006c1a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c14:	7b7b      	ldrb	r3, [r7, #13]
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d001      	beq.n	8006c1e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e0cc      	b.n	8006db8 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d104      	bne.n	8006c2e <HAL_TIM_IC_Start_IT+0xa2>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2202      	movs	r2, #2
 8006c28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c2c:	e013      	b.n	8006c56 <HAL_TIM_IC_Start_IT+0xca>
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	2b04      	cmp	r3, #4
 8006c32:	d104      	bne.n	8006c3e <HAL_TIM_IC_Start_IT+0xb2>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2202      	movs	r2, #2
 8006c38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c3c:	e00b      	b.n	8006c56 <HAL_TIM_IC_Start_IT+0xca>
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	2b08      	cmp	r3, #8
 8006c42:	d104      	bne.n	8006c4e <HAL_TIM_IC_Start_IT+0xc2>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2202      	movs	r2, #2
 8006c48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c4c:	e003      	b.n	8006c56 <HAL_TIM_IC_Start_IT+0xca>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2202      	movs	r2, #2
 8006c52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d104      	bne.n	8006c66 <HAL_TIM_IC_Start_IT+0xda>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2202      	movs	r2, #2
 8006c60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c64:	e013      	b.n	8006c8e <HAL_TIM_IC_Start_IT+0x102>
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	2b04      	cmp	r3, #4
 8006c6a:	d104      	bne.n	8006c76 <HAL_TIM_IC_Start_IT+0xea>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2202      	movs	r2, #2
 8006c70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006c74:	e00b      	b.n	8006c8e <HAL_TIM_IC_Start_IT+0x102>
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	2b08      	cmp	r3, #8
 8006c7a:	d104      	bne.n	8006c86 <HAL_TIM_IC_Start_IT+0xfa>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2202      	movs	r2, #2
 8006c80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c84:	e003      	b.n	8006c8e <HAL_TIM_IC_Start_IT+0x102>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2202      	movs	r2, #2
 8006c8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	2b0c      	cmp	r3, #12
 8006c92:	d841      	bhi.n	8006d18 <HAL_TIM_IC_Start_IT+0x18c>
 8006c94:	a201      	add	r2, pc, #4	@ (adr r2, 8006c9c <HAL_TIM_IC_Start_IT+0x110>)
 8006c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c9a:	bf00      	nop
 8006c9c:	08006cd1 	.word	0x08006cd1
 8006ca0:	08006d19 	.word	0x08006d19
 8006ca4:	08006d19 	.word	0x08006d19
 8006ca8:	08006d19 	.word	0x08006d19
 8006cac:	08006ce3 	.word	0x08006ce3
 8006cb0:	08006d19 	.word	0x08006d19
 8006cb4:	08006d19 	.word	0x08006d19
 8006cb8:	08006d19 	.word	0x08006d19
 8006cbc:	08006cf5 	.word	0x08006cf5
 8006cc0:	08006d19 	.word	0x08006d19
 8006cc4:	08006d19 	.word	0x08006d19
 8006cc8:	08006d19 	.word	0x08006d19
 8006ccc:	08006d07 	.word	0x08006d07
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	68da      	ldr	r2, [r3, #12]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f042 0202 	orr.w	r2, r2, #2
 8006cde:	60da      	str	r2, [r3, #12]
      break;
 8006ce0:	e01d      	b.n	8006d1e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	68da      	ldr	r2, [r3, #12]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f042 0204 	orr.w	r2, r2, #4
 8006cf0:	60da      	str	r2, [r3, #12]
      break;
 8006cf2:	e014      	b.n	8006d1e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68da      	ldr	r2, [r3, #12]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f042 0208 	orr.w	r2, r2, #8
 8006d02:	60da      	str	r2, [r3, #12]
      break;
 8006d04:	e00b      	b.n	8006d1e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	68da      	ldr	r2, [r3, #12]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f042 0210 	orr.w	r2, r2, #16
 8006d14:	60da      	str	r2, [r3, #12]
      break;
 8006d16:	e002      	b.n	8006d1e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	73fb      	strb	r3, [r7, #15]
      break;
 8006d1c:	bf00      	nop
  }

  if (status == HAL_OK)
 8006d1e:	7bfb      	ldrb	r3, [r7, #15]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d148      	bne.n	8006db6 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	6839      	ldr	r1, [r7, #0]
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f000 fd39 	bl	80077a4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a22      	ldr	r2, [pc, #136]	@ (8006dc0 <HAL_TIM_IC_Start_IT+0x234>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d022      	beq.n	8006d82 <HAL_TIM_IC_Start_IT+0x1f6>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d44:	d01d      	beq.n	8006d82 <HAL_TIM_IC_Start_IT+0x1f6>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a1e      	ldr	r2, [pc, #120]	@ (8006dc4 <HAL_TIM_IC_Start_IT+0x238>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d018      	beq.n	8006d82 <HAL_TIM_IC_Start_IT+0x1f6>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a1c      	ldr	r2, [pc, #112]	@ (8006dc8 <HAL_TIM_IC_Start_IT+0x23c>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d013      	beq.n	8006d82 <HAL_TIM_IC_Start_IT+0x1f6>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a1b      	ldr	r2, [pc, #108]	@ (8006dcc <HAL_TIM_IC_Start_IT+0x240>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d00e      	beq.n	8006d82 <HAL_TIM_IC_Start_IT+0x1f6>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a19      	ldr	r2, [pc, #100]	@ (8006dd0 <HAL_TIM_IC_Start_IT+0x244>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d009      	beq.n	8006d82 <HAL_TIM_IC_Start_IT+0x1f6>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a18      	ldr	r2, [pc, #96]	@ (8006dd4 <HAL_TIM_IC_Start_IT+0x248>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d004      	beq.n	8006d82 <HAL_TIM_IC_Start_IT+0x1f6>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a16      	ldr	r2, [pc, #88]	@ (8006dd8 <HAL_TIM_IC_Start_IT+0x24c>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d111      	bne.n	8006da6 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	f003 0307 	and.w	r3, r3, #7
 8006d8c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	2b06      	cmp	r3, #6
 8006d92:	d010      	beq.n	8006db6 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f042 0201 	orr.w	r2, r2, #1
 8006da2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006da4:	e007      	b.n	8006db6 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f042 0201 	orr.w	r2, r2, #1
 8006db4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3710      	adds	r7, #16
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	40010000 	.word	0x40010000
 8006dc4:	40000400 	.word	0x40000400
 8006dc8:	40000800 	.word	0x40000800
 8006dcc:	40000c00 	.word	0x40000c00
 8006dd0:	40010400 	.word	0x40010400
 8006dd4:	40014000 	.word	0x40014000
 8006dd8:	40001800 	.word	0x40001800

08006ddc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b086      	sub	sp, #24
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006de8:	2300      	movs	r3, #0
 8006dea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d101      	bne.n	8006dfa <HAL_TIM_IC_ConfigChannel+0x1e>
 8006df6:	2302      	movs	r3, #2
 8006df8:	e088      	b.n	8006f0c <HAL_TIM_IC_ConfigChannel+0x130>
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d11b      	bne.n	8006e40 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006e18:	f000 fb9a 	bl	8007550 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	699a      	ldr	r2, [r3, #24]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f022 020c 	bic.w	r2, r2, #12
 8006e2a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	6999      	ldr	r1, [r3, #24]
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	689a      	ldr	r2, [r3, #8]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	430a      	orrs	r2, r1
 8006e3c:	619a      	str	r2, [r3, #24]
 8006e3e:	e060      	b.n	8006f02 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2b04      	cmp	r3, #4
 8006e44:	d11c      	bne.n	8006e80 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006e56:	f000 fbef 	bl	8007638 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	699a      	ldr	r2, [r3, #24]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006e68:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	6999      	ldr	r1, [r3, #24]
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	021a      	lsls	r2, r3, #8
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	430a      	orrs	r2, r1
 8006e7c:	619a      	str	r2, [r3, #24]
 8006e7e:	e040      	b.n	8006f02 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2b08      	cmp	r3, #8
 8006e84:	d11b      	bne.n	8006ebe <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006e96:	f000 fc0c 	bl	80076b2 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	69da      	ldr	r2, [r3, #28]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f022 020c 	bic.w	r2, r2, #12
 8006ea8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	69d9      	ldr	r1, [r3, #28]
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	689a      	ldr	r2, [r3, #8]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	430a      	orrs	r2, r1
 8006eba:	61da      	str	r2, [r3, #28]
 8006ebc:	e021      	b.n	8006f02 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2b0c      	cmp	r3, #12
 8006ec2:	d11c      	bne.n	8006efe <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006ed4:	f000 fc29 	bl	800772a <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	69da      	ldr	r2, [r3, #28]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006ee6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	69d9      	ldr	r1, [r3, #28]
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	021a      	lsls	r2, r3, #8
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	430a      	orrs	r2, r1
 8006efa:	61da      	str	r2, [r3, #28]
 8006efc:	e001      	b.n	8006f02 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3718      	adds	r7, #24
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b086      	sub	sp, #24
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	60b9      	str	r1, [r7, #8]
 8006f1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f20:	2300      	movs	r3, #0
 8006f22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d101      	bne.n	8006f32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006f2e:	2302      	movs	r3, #2
 8006f30:	e0ae      	b.n	8007090 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2201      	movs	r2, #1
 8006f36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2b0c      	cmp	r3, #12
 8006f3e:	f200 809f 	bhi.w	8007080 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006f42:	a201      	add	r2, pc, #4	@ (adr r2, 8006f48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f48:	08006f7d 	.word	0x08006f7d
 8006f4c:	08007081 	.word	0x08007081
 8006f50:	08007081 	.word	0x08007081
 8006f54:	08007081 	.word	0x08007081
 8006f58:	08006fbd 	.word	0x08006fbd
 8006f5c:	08007081 	.word	0x08007081
 8006f60:	08007081 	.word	0x08007081
 8006f64:	08007081 	.word	0x08007081
 8006f68:	08006fff 	.word	0x08006fff
 8006f6c:	08007081 	.word	0x08007081
 8006f70:	08007081 	.word	0x08007081
 8006f74:	08007081 	.word	0x08007081
 8006f78:	0800703f 	.word	0x0800703f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	68b9      	ldr	r1, [r7, #8]
 8006f82:	4618      	mov	r0, r3
 8006f84:	f000 f934 	bl	80071f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	699a      	ldr	r2, [r3, #24]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f042 0208 	orr.w	r2, r2, #8
 8006f96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	699a      	ldr	r2, [r3, #24]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f022 0204 	bic.w	r2, r2, #4
 8006fa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	6999      	ldr	r1, [r3, #24]
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	691a      	ldr	r2, [r3, #16]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	430a      	orrs	r2, r1
 8006fb8:	619a      	str	r2, [r3, #24]
      break;
 8006fba:	e064      	b.n	8007086 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	68b9      	ldr	r1, [r7, #8]
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f000 f984 	bl	80072d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	699a      	ldr	r2, [r3, #24]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006fd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	699a      	ldr	r2, [r3, #24]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006fe6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	6999      	ldr	r1, [r3, #24]
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	021a      	lsls	r2, r3, #8
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	430a      	orrs	r2, r1
 8006ffa:	619a      	str	r2, [r3, #24]
      break;
 8006ffc:	e043      	b.n	8007086 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	68b9      	ldr	r1, [r7, #8]
 8007004:	4618      	mov	r0, r3
 8007006:	f000 f9d9 	bl	80073bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	69da      	ldr	r2, [r3, #28]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f042 0208 	orr.w	r2, r2, #8
 8007018:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	69da      	ldr	r2, [r3, #28]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f022 0204 	bic.w	r2, r2, #4
 8007028:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	69d9      	ldr	r1, [r3, #28]
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	691a      	ldr	r2, [r3, #16]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	430a      	orrs	r2, r1
 800703a:	61da      	str	r2, [r3, #28]
      break;
 800703c:	e023      	b.n	8007086 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68b9      	ldr	r1, [r7, #8]
 8007044:	4618      	mov	r0, r3
 8007046:	f000 fa2d 	bl	80074a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	69da      	ldr	r2, [r3, #28]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007058:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	69da      	ldr	r2, [r3, #28]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007068:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	69d9      	ldr	r1, [r3, #28]
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	021a      	lsls	r2, r3, #8
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	430a      	orrs	r2, r1
 800707c:	61da      	str	r2, [r3, #28]
      break;
 800707e:	e002      	b.n	8007086 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007080:	2301      	movs	r3, #1
 8007082:	75fb      	strb	r3, [r7, #23]
      break;
 8007084:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2200      	movs	r2, #0
 800708a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800708e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007090:	4618      	mov	r0, r3
 8007092:	3718      	adds	r7, #24
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007098:	b480      	push	{r7}
 800709a:	b085      	sub	sp, #20
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	4a46      	ldr	r2, [pc, #280]	@ (80071c4 <TIM_Base_SetConfig+0x12c>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d013      	beq.n	80070d8 <TIM_Base_SetConfig+0x40>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070b6:	d00f      	beq.n	80070d8 <TIM_Base_SetConfig+0x40>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	4a43      	ldr	r2, [pc, #268]	@ (80071c8 <TIM_Base_SetConfig+0x130>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d00b      	beq.n	80070d8 <TIM_Base_SetConfig+0x40>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	4a42      	ldr	r2, [pc, #264]	@ (80071cc <TIM_Base_SetConfig+0x134>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d007      	beq.n	80070d8 <TIM_Base_SetConfig+0x40>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	4a41      	ldr	r2, [pc, #260]	@ (80071d0 <TIM_Base_SetConfig+0x138>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d003      	beq.n	80070d8 <TIM_Base_SetConfig+0x40>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	4a40      	ldr	r2, [pc, #256]	@ (80071d4 <TIM_Base_SetConfig+0x13c>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d108      	bne.n	80070ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4a35      	ldr	r2, [pc, #212]	@ (80071c4 <TIM_Base_SetConfig+0x12c>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d02b      	beq.n	800714a <TIM_Base_SetConfig+0xb2>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070f8:	d027      	beq.n	800714a <TIM_Base_SetConfig+0xb2>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4a32      	ldr	r2, [pc, #200]	@ (80071c8 <TIM_Base_SetConfig+0x130>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d023      	beq.n	800714a <TIM_Base_SetConfig+0xb2>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4a31      	ldr	r2, [pc, #196]	@ (80071cc <TIM_Base_SetConfig+0x134>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d01f      	beq.n	800714a <TIM_Base_SetConfig+0xb2>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4a30      	ldr	r2, [pc, #192]	@ (80071d0 <TIM_Base_SetConfig+0x138>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d01b      	beq.n	800714a <TIM_Base_SetConfig+0xb2>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4a2f      	ldr	r2, [pc, #188]	@ (80071d4 <TIM_Base_SetConfig+0x13c>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d017      	beq.n	800714a <TIM_Base_SetConfig+0xb2>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4a2e      	ldr	r2, [pc, #184]	@ (80071d8 <TIM_Base_SetConfig+0x140>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d013      	beq.n	800714a <TIM_Base_SetConfig+0xb2>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4a2d      	ldr	r2, [pc, #180]	@ (80071dc <TIM_Base_SetConfig+0x144>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d00f      	beq.n	800714a <TIM_Base_SetConfig+0xb2>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a2c      	ldr	r2, [pc, #176]	@ (80071e0 <TIM_Base_SetConfig+0x148>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d00b      	beq.n	800714a <TIM_Base_SetConfig+0xb2>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a2b      	ldr	r2, [pc, #172]	@ (80071e4 <TIM_Base_SetConfig+0x14c>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d007      	beq.n	800714a <TIM_Base_SetConfig+0xb2>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4a2a      	ldr	r2, [pc, #168]	@ (80071e8 <TIM_Base_SetConfig+0x150>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d003      	beq.n	800714a <TIM_Base_SetConfig+0xb2>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4a29      	ldr	r2, [pc, #164]	@ (80071ec <TIM_Base_SetConfig+0x154>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d108      	bne.n	800715c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007150:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	68db      	ldr	r3, [r3, #12]
 8007156:	68fa      	ldr	r2, [r7, #12]
 8007158:	4313      	orrs	r3, r2
 800715a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	695b      	ldr	r3, [r3, #20]
 8007166:	4313      	orrs	r3, r2
 8007168:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	689a      	ldr	r2, [r3, #8]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a10      	ldr	r2, [pc, #64]	@ (80071c4 <TIM_Base_SetConfig+0x12c>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d003      	beq.n	8007190 <TIM_Base_SetConfig+0xf8>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	4a12      	ldr	r2, [pc, #72]	@ (80071d4 <TIM_Base_SetConfig+0x13c>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d103      	bne.n	8007198 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	691a      	ldr	r2, [r3, #16]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	f003 0301 	and.w	r3, r3, #1
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d105      	bne.n	80071b6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	f023 0201 	bic.w	r2, r3, #1
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	611a      	str	r2, [r3, #16]
  }
}
 80071b6:	bf00      	nop
 80071b8:	3714      	adds	r7, #20
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr
 80071c2:	bf00      	nop
 80071c4:	40010000 	.word	0x40010000
 80071c8:	40000400 	.word	0x40000400
 80071cc:	40000800 	.word	0x40000800
 80071d0:	40000c00 	.word	0x40000c00
 80071d4:	40010400 	.word	0x40010400
 80071d8:	40014000 	.word	0x40014000
 80071dc:	40014400 	.word	0x40014400
 80071e0:	40014800 	.word	0x40014800
 80071e4:	40001800 	.word	0x40001800
 80071e8:	40001c00 	.word	0x40001c00
 80071ec:	40002000 	.word	0x40002000

080071f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b087      	sub	sp, #28
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a1b      	ldr	r3, [r3, #32]
 80071fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6a1b      	ldr	r3, [r3, #32]
 8007204:	f023 0201 	bic.w	r2, r3, #1
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	699b      	ldr	r3, [r3, #24]
 8007216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800721e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f023 0303 	bic.w	r3, r3, #3
 8007226:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	4313      	orrs	r3, r2
 8007230:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	f023 0302 	bic.w	r3, r3, #2
 8007238:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	697a      	ldr	r2, [r7, #20]
 8007240:	4313      	orrs	r3, r2
 8007242:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	4a20      	ldr	r2, [pc, #128]	@ (80072c8 <TIM_OC1_SetConfig+0xd8>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d003      	beq.n	8007254 <TIM_OC1_SetConfig+0x64>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	4a1f      	ldr	r2, [pc, #124]	@ (80072cc <TIM_OC1_SetConfig+0xdc>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d10c      	bne.n	800726e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	f023 0308 	bic.w	r3, r3, #8
 800725a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	697a      	ldr	r2, [r7, #20]
 8007262:	4313      	orrs	r3, r2
 8007264:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	f023 0304 	bic.w	r3, r3, #4
 800726c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	4a15      	ldr	r2, [pc, #84]	@ (80072c8 <TIM_OC1_SetConfig+0xd8>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d003      	beq.n	800727e <TIM_OC1_SetConfig+0x8e>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	4a14      	ldr	r2, [pc, #80]	@ (80072cc <TIM_OC1_SetConfig+0xdc>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d111      	bne.n	80072a2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007284:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800728c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	695b      	ldr	r3, [r3, #20]
 8007292:	693a      	ldr	r2, [r7, #16]
 8007294:	4313      	orrs	r3, r2
 8007296:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	699b      	ldr	r3, [r3, #24]
 800729c:	693a      	ldr	r2, [r7, #16]
 800729e:	4313      	orrs	r3, r2
 80072a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	693a      	ldr	r2, [r7, #16]
 80072a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	68fa      	ldr	r2, [r7, #12]
 80072ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	685a      	ldr	r2, [r3, #4]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	697a      	ldr	r2, [r7, #20]
 80072ba:	621a      	str	r2, [r3, #32]
}
 80072bc:	bf00      	nop
 80072be:	371c      	adds	r7, #28
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr
 80072c8:	40010000 	.word	0x40010000
 80072cc:	40010400 	.word	0x40010400

080072d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b087      	sub	sp, #28
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a1b      	ldr	r3, [r3, #32]
 80072de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6a1b      	ldr	r3, [r3, #32]
 80072e4:	f023 0210 	bic.w	r2, r3, #16
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	699b      	ldr	r3, [r3, #24]
 80072f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007306:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	021b      	lsls	r3, r3, #8
 800730e:	68fa      	ldr	r2, [r7, #12]
 8007310:	4313      	orrs	r3, r2
 8007312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	f023 0320 	bic.w	r3, r3, #32
 800731a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	011b      	lsls	r3, r3, #4
 8007322:	697a      	ldr	r2, [r7, #20]
 8007324:	4313      	orrs	r3, r2
 8007326:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4a22      	ldr	r2, [pc, #136]	@ (80073b4 <TIM_OC2_SetConfig+0xe4>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d003      	beq.n	8007338 <TIM_OC2_SetConfig+0x68>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	4a21      	ldr	r2, [pc, #132]	@ (80073b8 <TIM_OC2_SetConfig+0xe8>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d10d      	bne.n	8007354 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800733e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	011b      	lsls	r3, r3, #4
 8007346:	697a      	ldr	r2, [r7, #20]
 8007348:	4313      	orrs	r3, r2
 800734a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007352:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	4a17      	ldr	r2, [pc, #92]	@ (80073b4 <TIM_OC2_SetConfig+0xe4>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d003      	beq.n	8007364 <TIM_OC2_SetConfig+0x94>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	4a16      	ldr	r2, [pc, #88]	@ (80073b8 <TIM_OC2_SetConfig+0xe8>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d113      	bne.n	800738c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800736a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007372:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	695b      	ldr	r3, [r3, #20]
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	693a      	ldr	r2, [r7, #16]
 800737c:	4313      	orrs	r3, r2
 800737e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	699b      	ldr	r3, [r3, #24]
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	693a      	ldr	r2, [r7, #16]
 8007388:	4313      	orrs	r3, r2
 800738a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	693a      	ldr	r2, [r7, #16]
 8007390:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	685a      	ldr	r2, [r3, #4]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	697a      	ldr	r2, [r7, #20]
 80073a4:	621a      	str	r2, [r3, #32]
}
 80073a6:	bf00      	nop
 80073a8:	371c      	adds	r7, #28
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop
 80073b4:	40010000 	.word	0x40010000
 80073b8:	40010400 	.word	0x40010400

080073bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80073bc:	b480      	push	{r7}
 80073be:	b087      	sub	sp, #28
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6a1b      	ldr	r3, [r3, #32]
 80073ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6a1b      	ldr	r3, [r3, #32]
 80073d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	69db      	ldr	r3, [r3, #28]
 80073e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f023 0303 	bic.w	r3, r3, #3
 80073f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	68fa      	ldr	r2, [r7, #12]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007404:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	021b      	lsls	r3, r3, #8
 800740c:	697a      	ldr	r2, [r7, #20]
 800740e:	4313      	orrs	r3, r2
 8007410:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a21      	ldr	r2, [pc, #132]	@ (800749c <TIM_OC3_SetConfig+0xe0>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d003      	beq.n	8007422 <TIM_OC3_SetConfig+0x66>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a20      	ldr	r2, [pc, #128]	@ (80074a0 <TIM_OC3_SetConfig+0xe4>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d10d      	bne.n	800743e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007428:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	021b      	lsls	r3, r3, #8
 8007430:	697a      	ldr	r2, [r7, #20]
 8007432:	4313      	orrs	r3, r2
 8007434:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800743c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4a16      	ldr	r2, [pc, #88]	@ (800749c <TIM_OC3_SetConfig+0xe0>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d003      	beq.n	800744e <TIM_OC3_SetConfig+0x92>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	4a15      	ldr	r2, [pc, #84]	@ (80074a0 <TIM_OC3_SetConfig+0xe4>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d113      	bne.n	8007476 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007454:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800745c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	695b      	ldr	r3, [r3, #20]
 8007462:	011b      	lsls	r3, r3, #4
 8007464:	693a      	ldr	r2, [r7, #16]
 8007466:	4313      	orrs	r3, r2
 8007468:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	699b      	ldr	r3, [r3, #24]
 800746e:	011b      	lsls	r3, r3, #4
 8007470:	693a      	ldr	r2, [r7, #16]
 8007472:	4313      	orrs	r3, r2
 8007474:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	693a      	ldr	r2, [r7, #16]
 800747a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	68fa      	ldr	r2, [r7, #12]
 8007480:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	685a      	ldr	r2, [r3, #4]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	697a      	ldr	r2, [r7, #20]
 800748e:	621a      	str	r2, [r3, #32]
}
 8007490:	bf00      	nop
 8007492:	371c      	adds	r7, #28
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr
 800749c:	40010000 	.word	0x40010000
 80074a0:	40010400 	.word	0x40010400

080074a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b087      	sub	sp, #28
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a1b      	ldr	r3, [r3, #32]
 80074b2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6a1b      	ldr	r3, [r3, #32]
 80074b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	69db      	ldr	r3, [r3, #28]
 80074ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	021b      	lsls	r3, r3, #8
 80074e2:	68fa      	ldr	r2, [r7, #12]
 80074e4:	4313      	orrs	r3, r2
 80074e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80074ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	031b      	lsls	r3, r3, #12
 80074f6:	693a      	ldr	r2, [r7, #16]
 80074f8:	4313      	orrs	r3, r2
 80074fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	4a12      	ldr	r2, [pc, #72]	@ (8007548 <TIM_OC4_SetConfig+0xa4>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d003      	beq.n	800750c <TIM_OC4_SetConfig+0x68>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	4a11      	ldr	r2, [pc, #68]	@ (800754c <TIM_OC4_SetConfig+0xa8>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d109      	bne.n	8007520 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007512:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	695b      	ldr	r3, [r3, #20]
 8007518:	019b      	lsls	r3, r3, #6
 800751a:	697a      	ldr	r2, [r7, #20]
 800751c:	4313      	orrs	r3, r2
 800751e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	697a      	ldr	r2, [r7, #20]
 8007524:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	68fa      	ldr	r2, [r7, #12]
 800752a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	685a      	ldr	r2, [r3, #4]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	693a      	ldr	r2, [r7, #16]
 8007538:	621a      	str	r2, [r3, #32]
}
 800753a:	bf00      	nop
 800753c:	371c      	adds	r7, #28
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr
 8007546:	bf00      	nop
 8007548:	40010000 	.word	0x40010000
 800754c:	40010400 	.word	0x40010400

08007550 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007550:	b480      	push	{r7}
 8007552:	b087      	sub	sp, #28
 8007554:	af00      	add	r7, sp, #0
 8007556:	60f8      	str	r0, [r7, #12]
 8007558:	60b9      	str	r1, [r7, #8]
 800755a:	607a      	str	r2, [r7, #4]
 800755c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6a1b      	ldr	r3, [r3, #32]
 8007562:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6a1b      	ldr	r3, [r3, #32]
 8007568:	f023 0201 	bic.w	r2, r3, #1
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	699b      	ldr	r3, [r3, #24]
 8007574:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	4a28      	ldr	r2, [pc, #160]	@ (800761c <TIM_TI1_SetConfig+0xcc>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d01b      	beq.n	80075b6 <TIM_TI1_SetConfig+0x66>
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007584:	d017      	beq.n	80075b6 <TIM_TI1_SetConfig+0x66>
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	4a25      	ldr	r2, [pc, #148]	@ (8007620 <TIM_TI1_SetConfig+0xd0>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d013      	beq.n	80075b6 <TIM_TI1_SetConfig+0x66>
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	4a24      	ldr	r2, [pc, #144]	@ (8007624 <TIM_TI1_SetConfig+0xd4>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d00f      	beq.n	80075b6 <TIM_TI1_SetConfig+0x66>
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	4a23      	ldr	r2, [pc, #140]	@ (8007628 <TIM_TI1_SetConfig+0xd8>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d00b      	beq.n	80075b6 <TIM_TI1_SetConfig+0x66>
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	4a22      	ldr	r2, [pc, #136]	@ (800762c <TIM_TI1_SetConfig+0xdc>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d007      	beq.n	80075b6 <TIM_TI1_SetConfig+0x66>
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	4a21      	ldr	r2, [pc, #132]	@ (8007630 <TIM_TI1_SetConfig+0xe0>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d003      	beq.n	80075b6 <TIM_TI1_SetConfig+0x66>
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	4a20      	ldr	r2, [pc, #128]	@ (8007634 <TIM_TI1_SetConfig+0xe4>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d101      	bne.n	80075ba <TIM_TI1_SetConfig+0x6a>
 80075b6:	2301      	movs	r3, #1
 80075b8:	e000      	b.n	80075bc <TIM_TI1_SetConfig+0x6c>
 80075ba:	2300      	movs	r3, #0
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d008      	beq.n	80075d2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	f023 0303 	bic.w	r3, r3, #3
 80075c6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80075c8:	697a      	ldr	r2, [r7, #20]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4313      	orrs	r3, r2
 80075ce:	617b      	str	r3, [r7, #20]
 80075d0:	e003      	b.n	80075da <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	f043 0301 	orr.w	r3, r3, #1
 80075d8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80075e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	011b      	lsls	r3, r3, #4
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	697a      	ldr	r2, [r7, #20]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	f023 030a 	bic.w	r3, r3, #10
 80075f4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	f003 030a 	and.w	r3, r3, #10
 80075fc:	693a      	ldr	r2, [r7, #16]
 80075fe:	4313      	orrs	r3, r2
 8007600:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	697a      	ldr	r2, [r7, #20]
 8007606:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	693a      	ldr	r2, [r7, #16]
 800760c:	621a      	str	r2, [r3, #32]
}
 800760e:	bf00      	nop
 8007610:	371c      	adds	r7, #28
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr
 800761a:	bf00      	nop
 800761c:	40010000 	.word	0x40010000
 8007620:	40000400 	.word	0x40000400
 8007624:	40000800 	.word	0x40000800
 8007628:	40000c00 	.word	0x40000c00
 800762c:	40010400 	.word	0x40010400
 8007630:	40014000 	.word	0x40014000
 8007634:	40001800 	.word	0x40001800

08007638 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007638:	b480      	push	{r7}
 800763a:	b087      	sub	sp, #28
 800763c:	af00      	add	r7, sp, #0
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	60b9      	str	r1, [r7, #8]
 8007642:	607a      	str	r2, [r7, #4]
 8007644:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	6a1b      	ldr	r3, [r3, #32]
 800764a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	6a1b      	ldr	r3, [r3, #32]
 8007650:	f023 0210 	bic.w	r2, r3, #16
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	699b      	ldr	r3, [r3, #24]
 800765c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007664:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	021b      	lsls	r3, r3, #8
 800766a:	693a      	ldr	r2, [r7, #16]
 800766c:	4313      	orrs	r3, r2
 800766e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007676:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	031b      	lsls	r3, r3, #12
 800767c:	b29b      	uxth	r3, r3
 800767e:	693a      	ldr	r2, [r7, #16]
 8007680:	4313      	orrs	r3, r2
 8007682:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800768a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	011b      	lsls	r3, r3, #4
 8007690:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8007694:	697a      	ldr	r2, [r7, #20]
 8007696:	4313      	orrs	r3, r2
 8007698:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	693a      	ldr	r2, [r7, #16]
 800769e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	697a      	ldr	r2, [r7, #20]
 80076a4:	621a      	str	r2, [r3, #32]
}
 80076a6:	bf00      	nop
 80076a8:	371c      	adds	r7, #28
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr

080076b2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80076b2:	b480      	push	{r7}
 80076b4:	b087      	sub	sp, #28
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	60f8      	str	r0, [r7, #12]
 80076ba:	60b9      	str	r1, [r7, #8]
 80076bc:	607a      	str	r2, [r7, #4]
 80076be:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6a1b      	ldr	r3, [r3, #32]
 80076c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	6a1b      	ldr	r3, [r3, #32]
 80076ca:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	69db      	ldr	r3, [r3, #28]
 80076d6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	f023 0303 	bic.w	r3, r3, #3
 80076de:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80076e0:	693a      	ldr	r2, [r7, #16]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4313      	orrs	r3, r2
 80076e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80076ee:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	011b      	lsls	r3, r3, #4
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	693a      	ldr	r2, [r7, #16]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8007702:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	021b      	lsls	r3, r3, #8
 8007708:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800770c:	697a      	ldr	r2, [r7, #20]
 800770e:	4313      	orrs	r3, r2
 8007710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	693a      	ldr	r2, [r7, #16]
 8007716:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	697a      	ldr	r2, [r7, #20]
 800771c:	621a      	str	r2, [r3, #32]
}
 800771e:	bf00      	nop
 8007720:	371c      	adds	r7, #28
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr

0800772a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800772a:	b480      	push	{r7}
 800772c:	b087      	sub	sp, #28
 800772e:	af00      	add	r7, sp, #0
 8007730:	60f8      	str	r0, [r7, #12]
 8007732:	60b9      	str	r1, [r7, #8]
 8007734:	607a      	str	r2, [r7, #4]
 8007736:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6a1b      	ldr	r3, [r3, #32]
 800773c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	6a1b      	ldr	r3, [r3, #32]
 8007742:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	69db      	ldr	r3, [r3, #28]
 800774e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007756:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	021b      	lsls	r3, r3, #8
 800775c:	693a      	ldr	r2, [r7, #16]
 800775e:	4313      	orrs	r3, r2
 8007760:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007768:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	031b      	lsls	r3, r3, #12
 800776e:	b29b      	uxth	r3, r3
 8007770:	693a      	ldr	r2, [r7, #16]
 8007772:	4313      	orrs	r3, r2
 8007774:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800777c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	031b      	lsls	r3, r3, #12
 8007782:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8007786:	697a      	ldr	r2, [r7, #20]
 8007788:	4313      	orrs	r3, r2
 800778a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	693a      	ldr	r2, [r7, #16]
 8007790:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	697a      	ldr	r2, [r7, #20]
 8007796:	621a      	str	r2, [r3, #32]
}
 8007798:	bf00      	nop
 800779a:	371c      	adds	r7, #28
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr

080077a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b087      	sub	sp, #28
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	60f8      	str	r0, [r7, #12]
 80077ac:	60b9      	str	r1, [r7, #8]
 80077ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	f003 031f 	and.w	r3, r3, #31
 80077b6:	2201      	movs	r2, #1
 80077b8:	fa02 f303 	lsl.w	r3, r2, r3
 80077bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	6a1a      	ldr	r2, [r3, #32]
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	43db      	mvns	r3, r3
 80077c6:	401a      	ands	r2, r3
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6a1a      	ldr	r2, [r3, #32]
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	f003 031f 	and.w	r3, r3, #31
 80077d6:	6879      	ldr	r1, [r7, #4]
 80077d8:	fa01 f303 	lsl.w	r3, r1, r3
 80077dc:	431a      	orrs	r2, r3
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	621a      	str	r2, [r3, #32]
}
 80077e2:	bf00      	nop
 80077e4:	371c      	adds	r7, #28
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr
	...

080077f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b085      	sub	sp, #20
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007800:	2b01      	cmp	r3, #1
 8007802:	d101      	bne.n	8007808 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007804:	2302      	movs	r3, #2
 8007806:	e05a      	b.n	80078be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2202      	movs	r2, #2
 8007814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800782e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	68fa      	ldr	r2, [r7, #12]
 8007836:	4313      	orrs	r3, r2
 8007838:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	68fa      	ldr	r2, [r7, #12]
 8007840:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a21      	ldr	r2, [pc, #132]	@ (80078cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d022      	beq.n	8007892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007854:	d01d      	beq.n	8007892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a1d      	ldr	r2, [pc, #116]	@ (80078d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d018      	beq.n	8007892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a1b      	ldr	r2, [pc, #108]	@ (80078d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d013      	beq.n	8007892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a1a      	ldr	r2, [pc, #104]	@ (80078d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d00e      	beq.n	8007892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a18      	ldr	r2, [pc, #96]	@ (80078dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d009      	beq.n	8007892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a17      	ldr	r2, [pc, #92]	@ (80078e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d004      	beq.n	8007892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a15      	ldr	r2, [pc, #84]	@ (80078e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d10c      	bne.n	80078ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007898:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	68ba      	ldr	r2, [r7, #8]
 80078a0:	4313      	orrs	r3, r2
 80078a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	68ba      	ldr	r2, [r7, #8]
 80078aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80078bc:	2300      	movs	r3, #0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3714      	adds	r7, #20
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr
 80078ca:	bf00      	nop
 80078cc:	40010000 	.word	0x40010000
 80078d0:	40000400 	.word	0x40000400
 80078d4:	40000800 	.word	0x40000800
 80078d8:	40000c00 	.word	0x40000c00
 80078dc:	40010400 	.word	0x40010400
 80078e0:	40014000 	.word	0x40014000
 80078e4:	40001800 	.word	0x40001800

080078e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d101      	bne.n	80078fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e042      	b.n	8007980 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007900:	b2db      	uxtb	r3, r3
 8007902:	2b00      	cmp	r3, #0
 8007904:	d106      	bne.n	8007914 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f7fa fc60 	bl	80021d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2224      	movs	r2, #36	@ 0x24
 8007918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	68da      	ldr	r2, [r3, #12]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800792a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 f973 	bl	8007c18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	691a      	ldr	r2, [r3, #16]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007940:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	695a      	ldr	r2, [r3, #20]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007950:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	68da      	ldr	r2, [r3, #12]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007960:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2220      	movs	r2, #32
 800796c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2220      	movs	r2, #32
 8007974:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2200      	movs	r2, #0
 800797c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800797e:	2300      	movs	r3, #0
}
 8007980:	4618      	mov	r0, r3
 8007982:	3708      	adds	r7, #8
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b08a      	sub	sp, #40	@ 0x28
 800798c:	af02      	add	r7, sp, #8
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	603b      	str	r3, [r7, #0]
 8007994:	4613      	mov	r3, r2
 8007996:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007998:	2300      	movs	r3, #0
 800799a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	2b20      	cmp	r3, #32
 80079a6:	d175      	bne.n	8007a94 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d002      	beq.n	80079b4 <HAL_UART_Transmit+0x2c>
 80079ae:	88fb      	ldrh	r3, [r7, #6]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d101      	bne.n	80079b8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	e06e      	b.n	8007a96 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2200      	movs	r2, #0
 80079bc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2221      	movs	r2, #33	@ 0x21
 80079c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80079c6:	f7fa fddd 	bl	8002584 <HAL_GetTick>
 80079ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	88fa      	ldrh	r2, [r7, #6]
 80079d0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	88fa      	ldrh	r2, [r7, #6]
 80079d6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079e0:	d108      	bne.n	80079f4 <HAL_UART_Transmit+0x6c>
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	691b      	ldr	r3, [r3, #16]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d104      	bne.n	80079f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80079ea:	2300      	movs	r3, #0
 80079ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	61bb      	str	r3, [r7, #24]
 80079f2:	e003      	b.n	80079fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80079f8:	2300      	movs	r3, #0
 80079fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80079fc:	e02e      	b.n	8007a5c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	9300      	str	r3, [sp, #0]
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	2200      	movs	r2, #0
 8007a06:	2180      	movs	r1, #128	@ 0x80
 8007a08:	68f8      	ldr	r0, [r7, #12]
 8007a0a:	f000 f848 	bl	8007a9e <UART_WaitOnFlagUntilTimeout>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d005      	beq.n	8007a20 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2220      	movs	r2, #32
 8007a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007a1c:	2303      	movs	r3, #3
 8007a1e:	e03a      	b.n	8007a96 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d10b      	bne.n	8007a3e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a26:	69bb      	ldr	r3, [r7, #24]
 8007a28:	881b      	ldrh	r3, [r3, #0]
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007a36:	69bb      	ldr	r3, [r7, #24]
 8007a38:	3302      	adds	r3, #2
 8007a3a:	61bb      	str	r3, [r7, #24]
 8007a3c:	e007      	b.n	8007a4e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	781a      	ldrb	r2, [r3, #0]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	3b01      	subs	r3, #1
 8007a56:	b29a      	uxth	r2, r3
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d1cb      	bne.n	80079fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	9300      	str	r3, [sp, #0]
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	2140      	movs	r1, #64	@ 0x40
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	f000 f814 	bl	8007a9e <UART_WaitOnFlagUntilTimeout>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d005      	beq.n	8007a88 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2220      	movs	r2, #32
 8007a80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007a84:	2303      	movs	r3, #3
 8007a86:	e006      	b.n	8007a96 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2220      	movs	r2, #32
 8007a8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007a90:	2300      	movs	r3, #0
 8007a92:	e000      	b.n	8007a96 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007a94:	2302      	movs	r3, #2
  }
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3720      	adds	r7, #32
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}

08007a9e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007a9e:	b580      	push	{r7, lr}
 8007aa0:	b086      	sub	sp, #24
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	60f8      	str	r0, [r7, #12]
 8007aa6:	60b9      	str	r1, [r7, #8]
 8007aa8:	603b      	str	r3, [r7, #0]
 8007aaa:	4613      	mov	r3, r2
 8007aac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007aae:	e03b      	b.n	8007b28 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ab0:	6a3b      	ldr	r3, [r7, #32]
 8007ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ab6:	d037      	beq.n	8007b28 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ab8:	f7fa fd64 	bl	8002584 <HAL_GetTick>
 8007abc:	4602      	mov	r2, r0
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	1ad3      	subs	r3, r2, r3
 8007ac2:	6a3a      	ldr	r2, [r7, #32]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d302      	bcc.n	8007ace <UART_WaitOnFlagUntilTimeout+0x30>
 8007ac8:	6a3b      	ldr	r3, [r7, #32]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d101      	bne.n	8007ad2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007ace:	2303      	movs	r3, #3
 8007ad0:	e03a      	b.n	8007b48 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	f003 0304 	and.w	r3, r3, #4
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d023      	beq.n	8007b28 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	2b80      	cmp	r3, #128	@ 0x80
 8007ae4:	d020      	beq.n	8007b28 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	2b40      	cmp	r3, #64	@ 0x40
 8007aea:	d01d      	beq.n	8007b28 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f003 0308 	and.w	r3, r3, #8
 8007af6:	2b08      	cmp	r3, #8
 8007af8:	d116      	bne.n	8007b28 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007afa:	2300      	movs	r3, #0
 8007afc:	617b      	str	r3, [r7, #20]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	617b      	str	r3, [r7, #20]
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	617b      	str	r3, [r7, #20]
 8007b0e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b10:	68f8      	ldr	r0, [r7, #12]
 8007b12:	f000 f81d 	bl	8007b50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2208      	movs	r2, #8
 8007b1a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007b24:	2301      	movs	r3, #1
 8007b26:	e00f      	b.n	8007b48 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	4013      	ands	r3, r2
 8007b32:	68ba      	ldr	r2, [r7, #8]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	bf0c      	ite	eq
 8007b38:	2301      	moveq	r3, #1
 8007b3a:	2300      	movne	r3, #0
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	461a      	mov	r2, r3
 8007b40:	79fb      	ldrb	r3, [r7, #7]
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d0b4      	beq.n	8007ab0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b46:	2300      	movs	r3, #0
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3718      	adds	r7, #24
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b095      	sub	sp, #84	@ 0x54
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	330c      	adds	r3, #12
 8007b5e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b62:	e853 3f00 	ldrex	r3, [r3]
 8007b66:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	330c      	adds	r3, #12
 8007b76:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007b78:	643a      	str	r2, [r7, #64]	@ 0x40
 8007b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b7c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007b7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007b80:	e841 2300 	strex	r3, r2, [r1]
 8007b84:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d1e5      	bne.n	8007b58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	3314      	adds	r3, #20
 8007b92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b94:	6a3b      	ldr	r3, [r7, #32]
 8007b96:	e853 3f00 	ldrex	r3, [r3]
 8007b9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	f023 0301 	bic.w	r3, r3, #1
 8007ba2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	3314      	adds	r3, #20
 8007baa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007bac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007bae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007bb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bb4:	e841 2300 	strex	r3, r2, [r1]
 8007bb8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d1e5      	bne.n	8007b8c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d119      	bne.n	8007bfc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	330c      	adds	r3, #12
 8007bce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	e853 3f00 	ldrex	r3, [r3]
 8007bd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	f023 0310 	bic.w	r3, r3, #16
 8007bde:	647b      	str	r3, [r7, #68]	@ 0x44
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	330c      	adds	r3, #12
 8007be6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007be8:	61ba      	str	r2, [r7, #24]
 8007bea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bec:	6979      	ldr	r1, [r7, #20]
 8007bee:	69ba      	ldr	r2, [r7, #24]
 8007bf0:	e841 2300 	strex	r3, r2, [r1]
 8007bf4:	613b      	str	r3, [r7, #16]
   return(result);
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d1e5      	bne.n	8007bc8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2220      	movs	r2, #32
 8007c00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007c0a:	bf00      	nop
 8007c0c:	3754      	adds	r7, #84	@ 0x54
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr
	...

08007c18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c1c:	b0c0      	sub	sp, #256	@ 0x100
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	691b      	ldr	r3, [r3, #16]
 8007c2c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c34:	68d9      	ldr	r1, [r3, #12]
 8007c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	ea40 0301 	orr.w	r3, r0, r1
 8007c40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c46:	689a      	ldr	r2, [r3, #8]
 8007c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c4c:	691b      	ldr	r3, [r3, #16]
 8007c4e:	431a      	orrs	r2, r3
 8007c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c54:	695b      	ldr	r3, [r3, #20]
 8007c56:	431a      	orrs	r2, r3
 8007c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c5c:	69db      	ldr	r3, [r3, #28]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007c70:	f021 010c 	bic.w	r1, r1, #12
 8007c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007c7e:	430b      	orrs	r3, r1
 8007c80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	695b      	ldr	r3, [r3, #20]
 8007c8a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c92:	6999      	ldr	r1, [r3, #24]
 8007c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	ea40 0301 	orr.w	r3, r0, r1
 8007c9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	4b8f      	ldr	r3, [pc, #572]	@ (8007ee4 <UART_SetConfig+0x2cc>)
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d005      	beq.n	8007cb8 <UART_SetConfig+0xa0>
 8007cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	4b8d      	ldr	r3, [pc, #564]	@ (8007ee8 <UART_SetConfig+0x2d0>)
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d104      	bne.n	8007cc2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007cb8:	f7fd fc66 	bl	8005588 <HAL_RCC_GetPCLK2Freq>
 8007cbc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007cc0:	e003      	b.n	8007cca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007cc2:	f7fd fc4d 	bl	8005560 <HAL_RCC_GetPCLK1Freq>
 8007cc6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cce:	69db      	ldr	r3, [r3, #28]
 8007cd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007cd4:	f040 810c 	bne.w	8007ef0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007cd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007ce2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007ce6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007cea:	4622      	mov	r2, r4
 8007cec:	462b      	mov	r3, r5
 8007cee:	1891      	adds	r1, r2, r2
 8007cf0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007cf2:	415b      	adcs	r3, r3
 8007cf4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007cf6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007cfa:	4621      	mov	r1, r4
 8007cfc:	eb12 0801 	adds.w	r8, r2, r1
 8007d00:	4629      	mov	r1, r5
 8007d02:	eb43 0901 	adc.w	r9, r3, r1
 8007d06:	f04f 0200 	mov.w	r2, #0
 8007d0a:	f04f 0300 	mov.w	r3, #0
 8007d0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007d12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007d16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007d1a:	4690      	mov	r8, r2
 8007d1c:	4699      	mov	r9, r3
 8007d1e:	4623      	mov	r3, r4
 8007d20:	eb18 0303 	adds.w	r3, r8, r3
 8007d24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007d28:	462b      	mov	r3, r5
 8007d2a:	eb49 0303 	adc.w	r3, r9, r3
 8007d2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007d3e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007d42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007d46:	460b      	mov	r3, r1
 8007d48:	18db      	adds	r3, r3, r3
 8007d4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d4c:	4613      	mov	r3, r2
 8007d4e:	eb42 0303 	adc.w	r3, r2, r3
 8007d52:	657b      	str	r3, [r7, #84]	@ 0x54
 8007d54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007d58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007d5c:	f7f8 ffb4 	bl	8000cc8 <__aeabi_uldivmod>
 8007d60:	4602      	mov	r2, r0
 8007d62:	460b      	mov	r3, r1
 8007d64:	4b61      	ldr	r3, [pc, #388]	@ (8007eec <UART_SetConfig+0x2d4>)
 8007d66:	fba3 2302 	umull	r2, r3, r3, r2
 8007d6a:	095b      	lsrs	r3, r3, #5
 8007d6c:	011c      	lsls	r4, r3, #4
 8007d6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d72:	2200      	movs	r2, #0
 8007d74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007d78:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007d7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007d80:	4642      	mov	r2, r8
 8007d82:	464b      	mov	r3, r9
 8007d84:	1891      	adds	r1, r2, r2
 8007d86:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007d88:	415b      	adcs	r3, r3
 8007d8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007d90:	4641      	mov	r1, r8
 8007d92:	eb12 0a01 	adds.w	sl, r2, r1
 8007d96:	4649      	mov	r1, r9
 8007d98:	eb43 0b01 	adc.w	fp, r3, r1
 8007d9c:	f04f 0200 	mov.w	r2, #0
 8007da0:	f04f 0300 	mov.w	r3, #0
 8007da4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007da8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007dac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007db0:	4692      	mov	sl, r2
 8007db2:	469b      	mov	fp, r3
 8007db4:	4643      	mov	r3, r8
 8007db6:	eb1a 0303 	adds.w	r3, sl, r3
 8007dba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007dbe:	464b      	mov	r3, r9
 8007dc0:	eb4b 0303 	adc.w	r3, fp, r3
 8007dc4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007dd4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007dd8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007ddc:	460b      	mov	r3, r1
 8007dde:	18db      	adds	r3, r3, r3
 8007de0:	643b      	str	r3, [r7, #64]	@ 0x40
 8007de2:	4613      	mov	r3, r2
 8007de4:	eb42 0303 	adc.w	r3, r2, r3
 8007de8:	647b      	str	r3, [r7, #68]	@ 0x44
 8007dea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007dee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007df2:	f7f8 ff69 	bl	8000cc8 <__aeabi_uldivmod>
 8007df6:	4602      	mov	r2, r0
 8007df8:	460b      	mov	r3, r1
 8007dfa:	4611      	mov	r1, r2
 8007dfc:	4b3b      	ldr	r3, [pc, #236]	@ (8007eec <UART_SetConfig+0x2d4>)
 8007dfe:	fba3 2301 	umull	r2, r3, r3, r1
 8007e02:	095b      	lsrs	r3, r3, #5
 8007e04:	2264      	movs	r2, #100	@ 0x64
 8007e06:	fb02 f303 	mul.w	r3, r2, r3
 8007e0a:	1acb      	subs	r3, r1, r3
 8007e0c:	00db      	lsls	r3, r3, #3
 8007e0e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007e12:	4b36      	ldr	r3, [pc, #216]	@ (8007eec <UART_SetConfig+0x2d4>)
 8007e14:	fba3 2302 	umull	r2, r3, r3, r2
 8007e18:	095b      	lsrs	r3, r3, #5
 8007e1a:	005b      	lsls	r3, r3, #1
 8007e1c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007e20:	441c      	add	r4, r3
 8007e22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e26:	2200      	movs	r2, #0
 8007e28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007e2c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007e30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007e34:	4642      	mov	r2, r8
 8007e36:	464b      	mov	r3, r9
 8007e38:	1891      	adds	r1, r2, r2
 8007e3a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007e3c:	415b      	adcs	r3, r3
 8007e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007e44:	4641      	mov	r1, r8
 8007e46:	1851      	adds	r1, r2, r1
 8007e48:	6339      	str	r1, [r7, #48]	@ 0x30
 8007e4a:	4649      	mov	r1, r9
 8007e4c:	414b      	adcs	r3, r1
 8007e4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e50:	f04f 0200 	mov.w	r2, #0
 8007e54:	f04f 0300 	mov.w	r3, #0
 8007e58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007e5c:	4659      	mov	r1, fp
 8007e5e:	00cb      	lsls	r3, r1, #3
 8007e60:	4651      	mov	r1, sl
 8007e62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e66:	4651      	mov	r1, sl
 8007e68:	00ca      	lsls	r2, r1, #3
 8007e6a:	4610      	mov	r0, r2
 8007e6c:	4619      	mov	r1, r3
 8007e6e:	4603      	mov	r3, r0
 8007e70:	4642      	mov	r2, r8
 8007e72:	189b      	adds	r3, r3, r2
 8007e74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007e78:	464b      	mov	r3, r9
 8007e7a:	460a      	mov	r2, r1
 8007e7c:	eb42 0303 	adc.w	r3, r2, r3
 8007e80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007e90:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007e94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007e98:	460b      	mov	r3, r1
 8007e9a:	18db      	adds	r3, r3, r3
 8007e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e9e:	4613      	mov	r3, r2
 8007ea0:	eb42 0303 	adc.w	r3, r2, r3
 8007ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ea6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007eaa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007eae:	f7f8 ff0b 	bl	8000cc8 <__aeabi_uldivmod>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8007eec <UART_SetConfig+0x2d4>)
 8007eb8:	fba3 1302 	umull	r1, r3, r3, r2
 8007ebc:	095b      	lsrs	r3, r3, #5
 8007ebe:	2164      	movs	r1, #100	@ 0x64
 8007ec0:	fb01 f303 	mul.w	r3, r1, r3
 8007ec4:	1ad3      	subs	r3, r2, r3
 8007ec6:	00db      	lsls	r3, r3, #3
 8007ec8:	3332      	adds	r3, #50	@ 0x32
 8007eca:	4a08      	ldr	r2, [pc, #32]	@ (8007eec <UART_SetConfig+0x2d4>)
 8007ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8007ed0:	095b      	lsrs	r3, r3, #5
 8007ed2:	f003 0207 	and.w	r2, r3, #7
 8007ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4422      	add	r2, r4
 8007ede:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007ee0:	e106      	b.n	80080f0 <UART_SetConfig+0x4d8>
 8007ee2:	bf00      	nop
 8007ee4:	40011000 	.word	0x40011000
 8007ee8:	40011400 	.word	0x40011400
 8007eec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ef0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007efa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007efe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007f02:	4642      	mov	r2, r8
 8007f04:	464b      	mov	r3, r9
 8007f06:	1891      	adds	r1, r2, r2
 8007f08:	6239      	str	r1, [r7, #32]
 8007f0a:	415b      	adcs	r3, r3
 8007f0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007f12:	4641      	mov	r1, r8
 8007f14:	1854      	adds	r4, r2, r1
 8007f16:	4649      	mov	r1, r9
 8007f18:	eb43 0501 	adc.w	r5, r3, r1
 8007f1c:	f04f 0200 	mov.w	r2, #0
 8007f20:	f04f 0300 	mov.w	r3, #0
 8007f24:	00eb      	lsls	r3, r5, #3
 8007f26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f2a:	00e2      	lsls	r2, r4, #3
 8007f2c:	4614      	mov	r4, r2
 8007f2e:	461d      	mov	r5, r3
 8007f30:	4643      	mov	r3, r8
 8007f32:	18e3      	adds	r3, r4, r3
 8007f34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007f38:	464b      	mov	r3, r9
 8007f3a:	eb45 0303 	adc.w	r3, r5, r3
 8007f3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007f4e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007f52:	f04f 0200 	mov.w	r2, #0
 8007f56:	f04f 0300 	mov.w	r3, #0
 8007f5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007f5e:	4629      	mov	r1, r5
 8007f60:	008b      	lsls	r3, r1, #2
 8007f62:	4621      	mov	r1, r4
 8007f64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f68:	4621      	mov	r1, r4
 8007f6a:	008a      	lsls	r2, r1, #2
 8007f6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007f70:	f7f8 feaa 	bl	8000cc8 <__aeabi_uldivmod>
 8007f74:	4602      	mov	r2, r0
 8007f76:	460b      	mov	r3, r1
 8007f78:	4b60      	ldr	r3, [pc, #384]	@ (80080fc <UART_SetConfig+0x4e4>)
 8007f7a:	fba3 2302 	umull	r2, r3, r3, r2
 8007f7e:	095b      	lsrs	r3, r3, #5
 8007f80:	011c      	lsls	r4, r3, #4
 8007f82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f86:	2200      	movs	r2, #0
 8007f88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007f8c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007f90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007f94:	4642      	mov	r2, r8
 8007f96:	464b      	mov	r3, r9
 8007f98:	1891      	adds	r1, r2, r2
 8007f9a:	61b9      	str	r1, [r7, #24]
 8007f9c:	415b      	adcs	r3, r3
 8007f9e:	61fb      	str	r3, [r7, #28]
 8007fa0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007fa4:	4641      	mov	r1, r8
 8007fa6:	1851      	adds	r1, r2, r1
 8007fa8:	6139      	str	r1, [r7, #16]
 8007faa:	4649      	mov	r1, r9
 8007fac:	414b      	adcs	r3, r1
 8007fae:	617b      	str	r3, [r7, #20]
 8007fb0:	f04f 0200 	mov.w	r2, #0
 8007fb4:	f04f 0300 	mov.w	r3, #0
 8007fb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007fbc:	4659      	mov	r1, fp
 8007fbe:	00cb      	lsls	r3, r1, #3
 8007fc0:	4651      	mov	r1, sl
 8007fc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fc6:	4651      	mov	r1, sl
 8007fc8:	00ca      	lsls	r2, r1, #3
 8007fca:	4610      	mov	r0, r2
 8007fcc:	4619      	mov	r1, r3
 8007fce:	4603      	mov	r3, r0
 8007fd0:	4642      	mov	r2, r8
 8007fd2:	189b      	adds	r3, r3, r2
 8007fd4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007fd8:	464b      	mov	r3, r9
 8007fda:	460a      	mov	r2, r1
 8007fdc:	eb42 0303 	adc.w	r3, r2, r3
 8007fe0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007fee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007ff0:	f04f 0200 	mov.w	r2, #0
 8007ff4:	f04f 0300 	mov.w	r3, #0
 8007ff8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007ffc:	4649      	mov	r1, r9
 8007ffe:	008b      	lsls	r3, r1, #2
 8008000:	4641      	mov	r1, r8
 8008002:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008006:	4641      	mov	r1, r8
 8008008:	008a      	lsls	r2, r1, #2
 800800a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800800e:	f7f8 fe5b 	bl	8000cc8 <__aeabi_uldivmod>
 8008012:	4602      	mov	r2, r0
 8008014:	460b      	mov	r3, r1
 8008016:	4611      	mov	r1, r2
 8008018:	4b38      	ldr	r3, [pc, #224]	@ (80080fc <UART_SetConfig+0x4e4>)
 800801a:	fba3 2301 	umull	r2, r3, r3, r1
 800801e:	095b      	lsrs	r3, r3, #5
 8008020:	2264      	movs	r2, #100	@ 0x64
 8008022:	fb02 f303 	mul.w	r3, r2, r3
 8008026:	1acb      	subs	r3, r1, r3
 8008028:	011b      	lsls	r3, r3, #4
 800802a:	3332      	adds	r3, #50	@ 0x32
 800802c:	4a33      	ldr	r2, [pc, #204]	@ (80080fc <UART_SetConfig+0x4e4>)
 800802e:	fba2 2303 	umull	r2, r3, r2, r3
 8008032:	095b      	lsrs	r3, r3, #5
 8008034:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008038:	441c      	add	r4, r3
 800803a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800803e:	2200      	movs	r2, #0
 8008040:	673b      	str	r3, [r7, #112]	@ 0x70
 8008042:	677a      	str	r2, [r7, #116]	@ 0x74
 8008044:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008048:	4642      	mov	r2, r8
 800804a:	464b      	mov	r3, r9
 800804c:	1891      	adds	r1, r2, r2
 800804e:	60b9      	str	r1, [r7, #8]
 8008050:	415b      	adcs	r3, r3
 8008052:	60fb      	str	r3, [r7, #12]
 8008054:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008058:	4641      	mov	r1, r8
 800805a:	1851      	adds	r1, r2, r1
 800805c:	6039      	str	r1, [r7, #0]
 800805e:	4649      	mov	r1, r9
 8008060:	414b      	adcs	r3, r1
 8008062:	607b      	str	r3, [r7, #4]
 8008064:	f04f 0200 	mov.w	r2, #0
 8008068:	f04f 0300 	mov.w	r3, #0
 800806c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008070:	4659      	mov	r1, fp
 8008072:	00cb      	lsls	r3, r1, #3
 8008074:	4651      	mov	r1, sl
 8008076:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800807a:	4651      	mov	r1, sl
 800807c:	00ca      	lsls	r2, r1, #3
 800807e:	4610      	mov	r0, r2
 8008080:	4619      	mov	r1, r3
 8008082:	4603      	mov	r3, r0
 8008084:	4642      	mov	r2, r8
 8008086:	189b      	adds	r3, r3, r2
 8008088:	66bb      	str	r3, [r7, #104]	@ 0x68
 800808a:	464b      	mov	r3, r9
 800808c:	460a      	mov	r2, r1
 800808e:	eb42 0303 	adc.w	r3, r2, r3
 8008092:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	663b      	str	r3, [r7, #96]	@ 0x60
 800809e:	667a      	str	r2, [r7, #100]	@ 0x64
 80080a0:	f04f 0200 	mov.w	r2, #0
 80080a4:	f04f 0300 	mov.w	r3, #0
 80080a8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80080ac:	4649      	mov	r1, r9
 80080ae:	008b      	lsls	r3, r1, #2
 80080b0:	4641      	mov	r1, r8
 80080b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80080b6:	4641      	mov	r1, r8
 80080b8:	008a      	lsls	r2, r1, #2
 80080ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80080be:	f7f8 fe03 	bl	8000cc8 <__aeabi_uldivmod>
 80080c2:	4602      	mov	r2, r0
 80080c4:	460b      	mov	r3, r1
 80080c6:	4b0d      	ldr	r3, [pc, #52]	@ (80080fc <UART_SetConfig+0x4e4>)
 80080c8:	fba3 1302 	umull	r1, r3, r3, r2
 80080cc:	095b      	lsrs	r3, r3, #5
 80080ce:	2164      	movs	r1, #100	@ 0x64
 80080d0:	fb01 f303 	mul.w	r3, r1, r3
 80080d4:	1ad3      	subs	r3, r2, r3
 80080d6:	011b      	lsls	r3, r3, #4
 80080d8:	3332      	adds	r3, #50	@ 0x32
 80080da:	4a08      	ldr	r2, [pc, #32]	@ (80080fc <UART_SetConfig+0x4e4>)
 80080dc:	fba2 2303 	umull	r2, r3, r2, r3
 80080e0:	095b      	lsrs	r3, r3, #5
 80080e2:	f003 020f 	and.w	r2, r3, #15
 80080e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4422      	add	r2, r4
 80080ee:	609a      	str	r2, [r3, #8]
}
 80080f0:	bf00      	nop
 80080f2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80080f6:	46bd      	mov	sp, r7
 80080f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080fc:	51eb851f 	.word	0x51eb851f

08008100 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008100:	b084      	sub	sp, #16
 8008102:	b580      	push	{r7, lr}
 8008104:	b084      	sub	sp, #16
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
 800810a:	f107 001c 	add.w	r0, r7, #28
 800810e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008112:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008116:	2b01      	cmp	r3, #1
 8008118:	d123      	bne.n	8008162 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800811e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	68db      	ldr	r3, [r3, #12]
 800812a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800812e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008142:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008146:	2b01      	cmp	r3, #1
 8008148:	d105      	bne.n	8008156 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	68db      	ldr	r3, [r3, #12]
 800814e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f001 fae2 	bl	8009720 <USB_CoreReset>
 800815c:	4603      	mov	r3, r0
 800815e:	73fb      	strb	r3, [r7, #15]
 8008160:	e01b      	b.n	800819a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	68db      	ldr	r3, [r3, #12]
 8008166:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f001 fad6 	bl	8009720 <USB_CoreReset>
 8008174:	4603      	mov	r3, r0
 8008176:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008178:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800817c:	2b00      	cmp	r3, #0
 800817e:	d106      	bne.n	800818e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008184:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	639a      	str	r2, [r3, #56]	@ 0x38
 800818c:	e005      	b.n	800819a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008192:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800819a:	7fbb      	ldrb	r3, [r7, #30]
 800819c:	2b01      	cmp	r3, #1
 800819e:	d10b      	bne.n	80081b8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	f043 0206 	orr.w	r2, r3, #6
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	f043 0220 	orr.w	r2, r3, #32
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80081b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3710      	adds	r7, #16
 80081be:	46bd      	mov	sp, r7
 80081c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80081c4:	b004      	add	sp, #16
 80081c6:	4770      	bx	lr

080081c8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b087      	sub	sp, #28
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	4613      	mov	r3, r2
 80081d4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80081d6:	79fb      	ldrb	r3, [r7, #7]
 80081d8:	2b02      	cmp	r3, #2
 80081da:	d165      	bne.n	80082a8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	4a41      	ldr	r2, [pc, #260]	@ (80082e4 <USB_SetTurnaroundTime+0x11c>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d906      	bls.n	80081f2 <USB_SetTurnaroundTime+0x2a>
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	4a40      	ldr	r2, [pc, #256]	@ (80082e8 <USB_SetTurnaroundTime+0x120>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d202      	bcs.n	80081f2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80081ec:	230f      	movs	r3, #15
 80081ee:	617b      	str	r3, [r7, #20]
 80081f0:	e062      	b.n	80082b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	4a3c      	ldr	r2, [pc, #240]	@ (80082e8 <USB_SetTurnaroundTime+0x120>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d306      	bcc.n	8008208 <USB_SetTurnaroundTime+0x40>
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	4a3b      	ldr	r2, [pc, #236]	@ (80082ec <USB_SetTurnaroundTime+0x124>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d202      	bcs.n	8008208 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008202:	230e      	movs	r3, #14
 8008204:	617b      	str	r3, [r7, #20]
 8008206:	e057      	b.n	80082b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	4a38      	ldr	r2, [pc, #224]	@ (80082ec <USB_SetTurnaroundTime+0x124>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d306      	bcc.n	800821e <USB_SetTurnaroundTime+0x56>
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	4a37      	ldr	r2, [pc, #220]	@ (80082f0 <USB_SetTurnaroundTime+0x128>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d202      	bcs.n	800821e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008218:	230d      	movs	r3, #13
 800821a:	617b      	str	r3, [r7, #20]
 800821c:	e04c      	b.n	80082b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	4a33      	ldr	r2, [pc, #204]	@ (80082f0 <USB_SetTurnaroundTime+0x128>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d306      	bcc.n	8008234 <USB_SetTurnaroundTime+0x6c>
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	4a32      	ldr	r2, [pc, #200]	@ (80082f4 <USB_SetTurnaroundTime+0x12c>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d802      	bhi.n	8008234 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800822e:	230c      	movs	r3, #12
 8008230:	617b      	str	r3, [r7, #20]
 8008232:	e041      	b.n	80082b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	4a2f      	ldr	r2, [pc, #188]	@ (80082f4 <USB_SetTurnaroundTime+0x12c>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d906      	bls.n	800824a <USB_SetTurnaroundTime+0x82>
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	4a2e      	ldr	r2, [pc, #184]	@ (80082f8 <USB_SetTurnaroundTime+0x130>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d802      	bhi.n	800824a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008244:	230b      	movs	r3, #11
 8008246:	617b      	str	r3, [r7, #20]
 8008248:	e036      	b.n	80082b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	4a2a      	ldr	r2, [pc, #168]	@ (80082f8 <USB_SetTurnaroundTime+0x130>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d906      	bls.n	8008260 <USB_SetTurnaroundTime+0x98>
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	4a29      	ldr	r2, [pc, #164]	@ (80082fc <USB_SetTurnaroundTime+0x134>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d802      	bhi.n	8008260 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800825a:	230a      	movs	r3, #10
 800825c:	617b      	str	r3, [r7, #20]
 800825e:	e02b      	b.n	80082b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	4a26      	ldr	r2, [pc, #152]	@ (80082fc <USB_SetTurnaroundTime+0x134>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d906      	bls.n	8008276 <USB_SetTurnaroundTime+0xae>
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	4a25      	ldr	r2, [pc, #148]	@ (8008300 <USB_SetTurnaroundTime+0x138>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d202      	bcs.n	8008276 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008270:	2309      	movs	r3, #9
 8008272:	617b      	str	r3, [r7, #20]
 8008274:	e020      	b.n	80082b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	4a21      	ldr	r2, [pc, #132]	@ (8008300 <USB_SetTurnaroundTime+0x138>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d306      	bcc.n	800828c <USB_SetTurnaroundTime+0xc4>
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	4a20      	ldr	r2, [pc, #128]	@ (8008304 <USB_SetTurnaroundTime+0x13c>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d802      	bhi.n	800828c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008286:	2308      	movs	r3, #8
 8008288:	617b      	str	r3, [r7, #20]
 800828a:	e015      	b.n	80082b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	4a1d      	ldr	r2, [pc, #116]	@ (8008304 <USB_SetTurnaroundTime+0x13c>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d906      	bls.n	80082a2 <USB_SetTurnaroundTime+0xda>
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	4a1c      	ldr	r2, [pc, #112]	@ (8008308 <USB_SetTurnaroundTime+0x140>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d202      	bcs.n	80082a2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800829c:	2307      	movs	r3, #7
 800829e:	617b      	str	r3, [r7, #20]
 80082a0:	e00a      	b.n	80082b8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80082a2:	2306      	movs	r3, #6
 80082a4:	617b      	str	r3, [r7, #20]
 80082a6:	e007      	b.n	80082b8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80082a8:	79fb      	ldrb	r3, [r7, #7]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d102      	bne.n	80082b4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80082ae:	2309      	movs	r3, #9
 80082b0:	617b      	str	r3, [r7, #20]
 80082b2:	e001      	b.n	80082b8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80082b4:	2309      	movs	r3, #9
 80082b6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	68db      	ldr	r3, [r3, #12]
 80082bc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	68da      	ldr	r2, [r3, #12]
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	029b      	lsls	r3, r3, #10
 80082cc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80082d0:	431a      	orrs	r2, r3
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80082d6:	2300      	movs	r3, #0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	371c      	adds	r7, #28
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr
 80082e4:	00d8acbf 	.word	0x00d8acbf
 80082e8:	00e4e1c0 	.word	0x00e4e1c0
 80082ec:	00f42400 	.word	0x00f42400
 80082f0:	01067380 	.word	0x01067380
 80082f4:	011a499f 	.word	0x011a499f
 80082f8:	01312cff 	.word	0x01312cff
 80082fc:	014ca43f 	.word	0x014ca43f
 8008300:	016e3600 	.word	0x016e3600
 8008304:	01a6ab1f 	.word	0x01a6ab1f
 8008308:	01e84800 	.word	0x01e84800

0800830c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800830c:	b480      	push	{r7}
 800830e:	b083      	sub	sp, #12
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	f043 0201 	orr.w	r2, r3, #1
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008320:	2300      	movs	r3, #0
}
 8008322:	4618      	mov	r0, r3
 8008324:	370c      	adds	r7, #12
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr

0800832e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800832e:	b480      	push	{r7}
 8008330:	b083      	sub	sp, #12
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	f023 0201 	bic.w	r2, r3, #1
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008342:	2300      	movs	r3, #0
}
 8008344:	4618      	mov	r0, r3
 8008346:	370c      	adds	r7, #12
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	460b      	mov	r3, r1
 800835a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800835c:	2300      	movs	r3, #0
 800835e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	68db      	ldr	r3, [r3, #12]
 8008364:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800836c:	78fb      	ldrb	r3, [r7, #3]
 800836e:	2b01      	cmp	r3, #1
 8008370:	d115      	bne.n	800839e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	68db      	ldr	r3, [r3, #12]
 8008376:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800837e:	200a      	movs	r0, #10
 8008380:	f7fa f90c 	bl	800259c <HAL_Delay>
      ms += 10U;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	330a      	adds	r3, #10
 8008388:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f001 f939 	bl	8009602 <USB_GetMode>
 8008390:	4603      	mov	r3, r0
 8008392:	2b01      	cmp	r3, #1
 8008394:	d01e      	beq.n	80083d4 <USB_SetCurrentMode+0x84>
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2bc7      	cmp	r3, #199	@ 0xc7
 800839a:	d9f0      	bls.n	800837e <USB_SetCurrentMode+0x2e>
 800839c:	e01a      	b.n	80083d4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800839e:	78fb      	ldrb	r3, [r7, #3]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d115      	bne.n	80083d0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80083b0:	200a      	movs	r0, #10
 80083b2:	f7fa f8f3 	bl	800259c <HAL_Delay>
      ms += 10U;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	330a      	adds	r3, #10
 80083ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f001 f920 	bl	8009602 <USB_GetMode>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d005      	beq.n	80083d4 <USB_SetCurrentMode+0x84>
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2bc7      	cmp	r3, #199	@ 0xc7
 80083cc:	d9f0      	bls.n	80083b0 <USB_SetCurrentMode+0x60>
 80083ce:	e001      	b.n	80083d4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80083d0:	2301      	movs	r3, #1
 80083d2:	e005      	b.n	80083e0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2bc8      	cmp	r3, #200	@ 0xc8
 80083d8:	d101      	bne.n	80083de <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80083da:	2301      	movs	r3, #1
 80083dc:	e000      	b.n	80083e0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80083de:	2300      	movs	r3, #0
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3710      	adds	r7, #16
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80083e8:	b084      	sub	sp, #16
 80083ea:	b580      	push	{r7, lr}
 80083ec:	b086      	sub	sp, #24
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
 80083f2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80083f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80083fa:	2300      	movs	r3, #0
 80083fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008402:	2300      	movs	r3, #0
 8008404:	613b      	str	r3, [r7, #16]
 8008406:	e009      	b.n	800841c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008408:	687a      	ldr	r2, [r7, #4]
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	3340      	adds	r3, #64	@ 0x40
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	4413      	add	r3, r2
 8008412:	2200      	movs	r2, #0
 8008414:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	3301      	adds	r3, #1
 800841a:	613b      	str	r3, [r7, #16]
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	2b0e      	cmp	r3, #14
 8008420:	d9f2      	bls.n	8008408 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008422:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008426:	2b00      	cmp	r3, #0
 8008428:	d11c      	bne.n	8008464 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	68fa      	ldr	r2, [r7, #12]
 8008434:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008438:	f043 0302 	orr.w	r3, r3, #2
 800843c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008442:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	601a      	str	r2, [r3, #0]
 8008462:	e005      	b.n	8008470 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008468:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008476:	461a      	mov	r2, r3
 8008478:	2300      	movs	r3, #0
 800847a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800847c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008480:	2b01      	cmp	r3, #1
 8008482:	d10d      	bne.n	80084a0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008484:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008488:	2b00      	cmp	r3, #0
 800848a:	d104      	bne.n	8008496 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800848c:	2100      	movs	r1, #0
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 f968 	bl	8008764 <USB_SetDevSpeed>
 8008494:	e008      	b.n	80084a8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008496:	2101      	movs	r1, #1
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f000 f963 	bl	8008764 <USB_SetDevSpeed>
 800849e:	e003      	b.n	80084a8 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80084a0:	2103      	movs	r1, #3
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 f95e 	bl	8008764 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80084a8:	2110      	movs	r1, #16
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 f8fa 	bl	80086a4 <USB_FlushTxFifo>
 80084b0:	4603      	mov	r3, r0
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d001      	beq.n	80084ba <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80084b6:	2301      	movs	r3, #1
 80084b8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 f924 	bl	8008708 <USB_FlushRxFifo>
 80084c0:	4603      	mov	r3, r0
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d001      	beq.n	80084ca <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084d0:	461a      	mov	r2, r3
 80084d2:	2300      	movs	r3, #0
 80084d4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084dc:	461a      	mov	r2, r3
 80084de:	2300      	movs	r3, #0
 80084e0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084e8:	461a      	mov	r2, r3
 80084ea:	2300      	movs	r3, #0
 80084ec:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084ee:	2300      	movs	r3, #0
 80084f0:	613b      	str	r3, [r7, #16]
 80084f2:	e043      	b.n	800857c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	015a      	lsls	r2, r3, #5
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	4413      	add	r3, r2
 80084fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008506:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800850a:	d118      	bne.n	800853e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d10a      	bne.n	8008528 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	015a      	lsls	r2, r3, #5
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	4413      	add	r3, r2
 800851a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800851e:	461a      	mov	r2, r3
 8008520:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008524:	6013      	str	r3, [r2, #0]
 8008526:	e013      	b.n	8008550 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	015a      	lsls	r2, r3, #5
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	4413      	add	r3, r2
 8008530:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008534:	461a      	mov	r2, r3
 8008536:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800853a:	6013      	str	r3, [r2, #0]
 800853c:	e008      	b.n	8008550 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	015a      	lsls	r2, r3, #5
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	4413      	add	r3, r2
 8008546:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800854a:	461a      	mov	r2, r3
 800854c:	2300      	movs	r3, #0
 800854e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	015a      	lsls	r2, r3, #5
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	4413      	add	r3, r2
 8008558:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800855c:	461a      	mov	r2, r3
 800855e:	2300      	movs	r3, #0
 8008560:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	015a      	lsls	r2, r3, #5
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	4413      	add	r3, r2
 800856a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800856e:	461a      	mov	r2, r3
 8008570:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008574:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	3301      	adds	r3, #1
 800857a:	613b      	str	r3, [r7, #16]
 800857c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008580:	461a      	mov	r2, r3
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	4293      	cmp	r3, r2
 8008586:	d3b5      	bcc.n	80084f4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008588:	2300      	movs	r3, #0
 800858a:	613b      	str	r3, [r7, #16]
 800858c:	e043      	b.n	8008616 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	015a      	lsls	r2, r3, #5
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	4413      	add	r3, r2
 8008596:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80085a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80085a4:	d118      	bne.n	80085d8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d10a      	bne.n	80085c2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	015a      	lsls	r2, r3, #5
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	4413      	add	r3, r2
 80085b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085b8:	461a      	mov	r2, r3
 80085ba:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80085be:	6013      	str	r3, [r2, #0]
 80085c0:	e013      	b.n	80085ea <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	015a      	lsls	r2, r3, #5
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	4413      	add	r3, r2
 80085ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085ce:	461a      	mov	r2, r3
 80085d0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80085d4:	6013      	str	r3, [r2, #0]
 80085d6:	e008      	b.n	80085ea <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	015a      	lsls	r2, r3, #5
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	4413      	add	r3, r2
 80085e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085e4:	461a      	mov	r2, r3
 80085e6:	2300      	movs	r3, #0
 80085e8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	015a      	lsls	r2, r3, #5
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	4413      	add	r3, r2
 80085f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085f6:	461a      	mov	r2, r3
 80085f8:	2300      	movs	r3, #0
 80085fa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	015a      	lsls	r2, r3, #5
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	4413      	add	r3, r2
 8008604:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008608:	461a      	mov	r2, r3
 800860a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800860e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	3301      	adds	r3, #1
 8008614:	613b      	str	r3, [r7, #16]
 8008616:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800861a:	461a      	mov	r2, r3
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	4293      	cmp	r3, r2
 8008620:	d3b5      	bcc.n	800858e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008628:	691b      	ldr	r3, [r3, #16]
 800862a:	68fa      	ldr	r2, [r7, #12]
 800862c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008630:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008634:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2200      	movs	r2, #0
 800863a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008642:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008644:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008648:	2b00      	cmp	r3, #0
 800864a:	d105      	bne.n	8008658 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	699b      	ldr	r3, [r3, #24]
 8008650:	f043 0210 	orr.w	r2, r3, #16
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	699a      	ldr	r2, [r3, #24]
 800865c:	4b10      	ldr	r3, [pc, #64]	@ (80086a0 <USB_DevInit+0x2b8>)
 800865e:	4313      	orrs	r3, r2
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008664:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008668:	2b00      	cmp	r3, #0
 800866a:	d005      	beq.n	8008678 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	699b      	ldr	r3, [r3, #24]
 8008670:	f043 0208 	orr.w	r2, r3, #8
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008678:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800867c:	2b01      	cmp	r3, #1
 800867e:	d107      	bne.n	8008690 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	699b      	ldr	r3, [r3, #24]
 8008684:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008688:	f043 0304 	orr.w	r3, r3, #4
 800868c:	687a      	ldr	r2, [r7, #4]
 800868e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008690:	7dfb      	ldrb	r3, [r7, #23]
}
 8008692:	4618      	mov	r0, r3
 8008694:	3718      	adds	r7, #24
 8008696:	46bd      	mov	sp, r7
 8008698:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800869c:	b004      	add	sp, #16
 800869e:	4770      	bx	lr
 80086a0:	803c3800 	.word	0x803c3800

080086a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b085      	sub	sp, #20
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80086ae:	2300      	movs	r3, #0
 80086b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	3301      	adds	r3, #1
 80086b6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80086be:	d901      	bls.n	80086c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80086c0:	2303      	movs	r3, #3
 80086c2:	e01b      	b.n	80086fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	691b      	ldr	r3, [r3, #16]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	daf2      	bge.n	80086b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80086cc:	2300      	movs	r3, #0
 80086ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	019b      	lsls	r3, r3, #6
 80086d4:	f043 0220 	orr.w	r2, r3, #32
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	3301      	adds	r3, #1
 80086e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80086e8:	d901      	bls.n	80086ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80086ea:	2303      	movs	r3, #3
 80086ec:	e006      	b.n	80086fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	691b      	ldr	r3, [r3, #16]
 80086f2:	f003 0320 	and.w	r3, r3, #32
 80086f6:	2b20      	cmp	r3, #32
 80086f8:	d0f0      	beq.n	80086dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80086fa:	2300      	movs	r3, #0
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3714      	adds	r7, #20
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr

08008708 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008708:	b480      	push	{r7}
 800870a:	b085      	sub	sp, #20
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008710:	2300      	movs	r3, #0
 8008712:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	3301      	adds	r3, #1
 8008718:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008720:	d901      	bls.n	8008726 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008722:	2303      	movs	r3, #3
 8008724:	e018      	b.n	8008758 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	691b      	ldr	r3, [r3, #16]
 800872a:	2b00      	cmp	r3, #0
 800872c:	daf2      	bge.n	8008714 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800872e:	2300      	movs	r3, #0
 8008730:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2210      	movs	r2, #16
 8008736:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	3301      	adds	r3, #1
 800873c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008744:	d901      	bls.n	800874a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008746:	2303      	movs	r3, #3
 8008748:	e006      	b.n	8008758 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	691b      	ldr	r3, [r3, #16]
 800874e:	f003 0310 	and.w	r3, r3, #16
 8008752:	2b10      	cmp	r3, #16
 8008754:	d0f0      	beq.n	8008738 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008756:	2300      	movs	r3, #0
}
 8008758:	4618      	mov	r0, r3
 800875a:	3714      	adds	r7, #20
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr

08008764 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008764:	b480      	push	{r7}
 8008766:	b085      	sub	sp, #20
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	460b      	mov	r3, r1
 800876e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800877a:	681a      	ldr	r2, [r3, #0]
 800877c:	78fb      	ldrb	r3, [r7, #3]
 800877e:	68f9      	ldr	r1, [r7, #12]
 8008780:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008784:	4313      	orrs	r3, r2
 8008786:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008788:	2300      	movs	r3, #0
}
 800878a:	4618      	mov	r0, r3
 800878c:	3714      	adds	r7, #20
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr

08008796 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8008796:	b480      	push	{r7}
 8008798:	b087      	sub	sp, #28
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	f003 0306 	and.w	r3, r3, #6
 80087ae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d102      	bne.n	80087bc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80087b6:	2300      	movs	r3, #0
 80087b8:	75fb      	strb	r3, [r7, #23]
 80087ba:	e00a      	b.n	80087d2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2b02      	cmp	r3, #2
 80087c0:	d002      	beq.n	80087c8 <USB_GetDevSpeed+0x32>
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2b06      	cmp	r3, #6
 80087c6:	d102      	bne.n	80087ce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80087c8:	2302      	movs	r3, #2
 80087ca:	75fb      	strb	r3, [r7, #23]
 80087cc:	e001      	b.n	80087d2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80087ce:	230f      	movs	r3, #15
 80087d0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80087d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	371c      	adds	r7, #28
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b085      	sub	sp, #20
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	785b      	ldrb	r3, [r3, #1]
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d13a      	bne.n	8008872 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008802:	69da      	ldr	r2, [r3, #28]
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	f003 030f 	and.w	r3, r3, #15
 800880c:	2101      	movs	r1, #1
 800880e:	fa01 f303 	lsl.w	r3, r1, r3
 8008812:	b29b      	uxth	r3, r3
 8008814:	68f9      	ldr	r1, [r7, #12]
 8008816:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800881a:	4313      	orrs	r3, r2
 800881c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	015a      	lsls	r2, r3, #5
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	4413      	add	r3, r2
 8008826:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008830:	2b00      	cmp	r3, #0
 8008832:	d155      	bne.n	80088e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	015a      	lsls	r2, r3, #5
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	4413      	add	r3, r2
 800883c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	689b      	ldr	r3, [r3, #8]
 8008846:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	791b      	ldrb	r3, [r3, #4]
 800884e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008850:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	059b      	lsls	r3, r3, #22
 8008856:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008858:	4313      	orrs	r3, r2
 800885a:	68ba      	ldr	r2, [r7, #8]
 800885c:	0151      	lsls	r1, r2, #5
 800885e:	68fa      	ldr	r2, [r7, #12]
 8008860:	440a      	add	r2, r1
 8008862:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008866:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800886a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800886e:	6013      	str	r3, [r2, #0]
 8008870:	e036      	b.n	80088e0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008878:	69da      	ldr	r2, [r3, #28]
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	f003 030f 	and.w	r3, r3, #15
 8008882:	2101      	movs	r1, #1
 8008884:	fa01 f303 	lsl.w	r3, r1, r3
 8008888:	041b      	lsls	r3, r3, #16
 800888a:	68f9      	ldr	r1, [r7, #12]
 800888c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008890:	4313      	orrs	r3, r2
 8008892:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	015a      	lsls	r2, r3, #5
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	4413      	add	r3, r2
 800889c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d11a      	bne.n	80088e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	015a      	lsls	r2, r3, #5
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	4413      	add	r3, r2
 80088b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088b6:	681a      	ldr	r2, [r3, #0]
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	689b      	ldr	r3, [r3, #8]
 80088bc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	791b      	ldrb	r3, [r3, #4]
 80088c4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80088c6:	430b      	orrs	r3, r1
 80088c8:	4313      	orrs	r3, r2
 80088ca:	68ba      	ldr	r2, [r7, #8]
 80088cc:	0151      	lsls	r1, r2, #5
 80088ce:	68fa      	ldr	r2, [r7, #12]
 80088d0:	440a      	add	r2, r1
 80088d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80088d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80088da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088de:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80088e0:	2300      	movs	r3, #0
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3714      	adds	r7, #20
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr
	...

080088f0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b085      	sub	sp, #20
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	785b      	ldrb	r3, [r3, #1]
 8008908:	2b01      	cmp	r3, #1
 800890a:	d161      	bne.n	80089d0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	015a      	lsls	r2, r3, #5
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	4413      	add	r3, r2
 8008914:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800891e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008922:	d11f      	bne.n	8008964 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	015a      	lsls	r2, r3, #5
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	4413      	add	r3, r2
 800892c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	68ba      	ldr	r2, [r7, #8]
 8008934:	0151      	lsls	r1, r2, #5
 8008936:	68fa      	ldr	r2, [r7, #12]
 8008938:	440a      	add	r2, r1
 800893a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800893e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008942:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	015a      	lsls	r2, r3, #5
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	4413      	add	r3, r2
 800894c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	68ba      	ldr	r2, [r7, #8]
 8008954:	0151      	lsls	r1, r2, #5
 8008956:	68fa      	ldr	r2, [r7, #12]
 8008958:	440a      	add	r2, r1
 800895a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800895e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008962:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800896a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	781b      	ldrb	r3, [r3, #0]
 8008970:	f003 030f 	and.w	r3, r3, #15
 8008974:	2101      	movs	r1, #1
 8008976:	fa01 f303 	lsl.w	r3, r1, r3
 800897a:	b29b      	uxth	r3, r3
 800897c:	43db      	mvns	r3, r3
 800897e:	68f9      	ldr	r1, [r7, #12]
 8008980:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008984:	4013      	ands	r3, r2
 8008986:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800898e:	69da      	ldr	r2, [r3, #28]
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	f003 030f 	and.w	r3, r3, #15
 8008998:	2101      	movs	r1, #1
 800899a:	fa01 f303 	lsl.w	r3, r1, r3
 800899e:	b29b      	uxth	r3, r3
 80089a0:	43db      	mvns	r3, r3
 80089a2:	68f9      	ldr	r1, [r7, #12]
 80089a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80089a8:	4013      	ands	r3, r2
 80089aa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	015a      	lsls	r2, r3, #5
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	4413      	add	r3, r2
 80089b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	0159      	lsls	r1, r3, #5
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	440b      	add	r3, r1
 80089c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089c6:	4619      	mov	r1, r3
 80089c8:	4b35      	ldr	r3, [pc, #212]	@ (8008aa0 <USB_DeactivateEndpoint+0x1b0>)
 80089ca:	4013      	ands	r3, r2
 80089cc:	600b      	str	r3, [r1, #0]
 80089ce:	e060      	b.n	8008a92 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	015a      	lsls	r2, r3, #5
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	4413      	add	r3, r2
 80089d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80089e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80089e6:	d11f      	bne.n	8008a28 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	015a      	lsls	r2, r3, #5
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	4413      	add	r3, r2
 80089f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	68ba      	ldr	r2, [r7, #8]
 80089f8:	0151      	lsls	r1, r2, #5
 80089fa:	68fa      	ldr	r2, [r7, #12]
 80089fc:	440a      	add	r2, r1
 80089fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a02:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008a06:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	015a      	lsls	r2, r3, #5
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	4413      	add	r3, r2
 8008a10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	68ba      	ldr	r2, [r7, #8]
 8008a18:	0151      	lsls	r1, r2, #5
 8008a1a:	68fa      	ldr	r2, [r7, #12]
 8008a1c:	440a      	add	r2, r1
 8008a1e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a22:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008a26:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	781b      	ldrb	r3, [r3, #0]
 8008a34:	f003 030f 	and.w	r3, r3, #15
 8008a38:	2101      	movs	r1, #1
 8008a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8008a3e:	041b      	lsls	r3, r3, #16
 8008a40:	43db      	mvns	r3, r3
 8008a42:	68f9      	ldr	r1, [r7, #12]
 8008a44:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008a48:	4013      	ands	r3, r2
 8008a4a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a52:	69da      	ldr	r2, [r3, #28]
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	f003 030f 	and.w	r3, r3, #15
 8008a5c:	2101      	movs	r1, #1
 8008a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8008a62:	041b      	lsls	r3, r3, #16
 8008a64:	43db      	mvns	r3, r3
 8008a66:	68f9      	ldr	r1, [r7, #12]
 8008a68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008a6c:	4013      	ands	r3, r2
 8008a6e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	015a      	lsls	r2, r3, #5
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	4413      	add	r3, r2
 8008a78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a7c:	681a      	ldr	r2, [r3, #0]
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	0159      	lsls	r1, r3, #5
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	440b      	add	r3, r1
 8008a86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	4b05      	ldr	r3, [pc, #20]	@ (8008aa4 <USB_DeactivateEndpoint+0x1b4>)
 8008a8e:	4013      	ands	r3, r2
 8008a90:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008a92:	2300      	movs	r3, #0
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3714      	adds	r7, #20
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr
 8008aa0:	ec337800 	.word	0xec337800
 8008aa4:	eff37800 	.word	0xeff37800

08008aa8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b08a      	sub	sp, #40	@ 0x28
 8008aac:	af02      	add	r7, sp, #8
 8008aae:	60f8      	str	r0, [r7, #12]
 8008ab0:	60b9      	str	r1, [r7, #8]
 8008ab2:	4613      	mov	r3, r2
 8008ab4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	785b      	ldrb	r3, [r3, #1]
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	f040 817f 	bne.w	8008dc8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	691b      	ldr	r3, [r3, #16]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d132      	bne.n	8008b38 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	015a      	lsls	r2, r3, #5
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	4413      	add	r3, r2
 8008ada:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ade:	691b      	ldr	r3, [r3, #16]
 8008ae0:	69ba      	ldr	r2, [r7, #24]
 8008ae2:	0151      	lsls	r1, r2, #5
 8008ae4:	69fa      	ldr	r2, [r7, #28]
 8008ae6:	440a      	add	r2, r1
 8008ae8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008aec:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008af0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008af4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008af6:	69bb      	ldr	r3, [r7, #24]
 8008af8:	015a      	lsls	r2, r3, #5
 8008afa:	69fb      	ldr	r3, [r7, #28]
 8008afc:	4413      	add	r3, r2
 8008afe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b02:	691b      	ldr	r3, [r3, #16]
 8008b04:	69ba      	ldr	r2, [r7, #24]
 8008b06:	0151      	lsls	r1, r2, #5
 8008b08:	69fa      	ldr	r2, [r7, #28]
 8008b0a:	440a      	add	r2, r1
 8008b0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b10:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008b14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008b16:	69bb      	ldr	r3, [r7, #24]
 8008b18:	015a      	lsls	r2, r3, #5
 8008b1a:	69fb      	ldr	r3, [r7, #28]
 8008b1c:	4413      	add	r3, r2
 8008b1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b22:	691b      	ldr	r3, [r3, #16]
 8008b24:	69ba      	ldr	r2, [r7, #24]
 8008b26:	0151      	lsls	r1, r2, #5
 8008b28:	69fa      	ldr	r2, [r7, #28]
 8008b2a:	440a      	add	r2, r1
 8008b2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b30:	0cdb      	lsrs	r3, r3, #19
 8008b32:	04db      	lsls	r3, r3, #19
 8008b34:	6113      	str	r3, [r2, #16]
 8008b36:	e097      	b.n	8008c68 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008b38:	69bb      	ldr	r3, [r7, #24]
 8008b3a:	015a      	lsls	r2, r3, #5
 8008b3c:	69fb      	ldr	r3, [r7, #28]
 8008b3e:	4413      	add	r3, r2
 8008b40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b44:	691b      	ldr	r3, [r3, #16]
 8008b46:	69ba      	ldr	r2, [r7, #24]
 8008b48:	0151      	lsls	r1, r2, #5
 8008b4a:	69fa      	ldr	r2, [r7, #28]
 8008b4c:	440a      	add	r2, r1
 8008b4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b52:	0cdb      	lsrs	r3, r3, #19
 8008b54:	04db      	lsls	r3, r3, #19
 8008b56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008b58:	69bb      	ldr	r3, [r7, #24]
 8008b5a:	015a      	lsls	r2, r3, #5
 8008b5c:	69fb      	ldr	r3, [r7, #28]
 8008b5e:	4413      	add	r3, r2
 8008b60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b64:	691b      	ldr	r3, [r3, #16]
 8008b66:	69ba      	ldr	r2, [r7, #24]
 8008b68:	0151      	lsls	r1, r2, #5
 8008b6a:	69fa      	ldr	r2, [r7, #28]
 8008b6c:	440a      	add	r2, r1
 8008b6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b72:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008b76:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008b7a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008b7c:	69bb      	ldr	r3, [r7, #24]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d11a      	bne.n	8008bb8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	691a      	ldr	r2, [r3, #16]
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	689b      	ldr	r3, [r3, #8]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d903      	bls.n	8008b96 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	689a      	ldr	r2, [r3, #8]
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008b96:	69bb      	ldr	r3, [r7, #24]
 8008b98:	015a      	lsls	r2, r3, #5
 8008b9a:	69fb      	ldr	r3, [r7, #28]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ba2:	691b      	ldr	r3, [r3, #16]
 8008ba4:	69ba      	ldr	r2, [r7, #24]
 8008ba6:	0151      	lsls	r1, r2, #5
 8008ba8:	69fa      	ldr	r2, [r7, #28]
 8008baa:	440a      	add	r2, r1
 8008bac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008bb0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008bb4:	6113      	str	r3, [r2, #16]
 8008bb6:	e044      	b.n	8008c42 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	691a      	ldr	r2, [r3, #16]
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	689b      	ldr	r3, [r3, #8]
 8008bc0:	4413      	add	r3, r2
 8008bc2:	1e5a      	subs	r2, r3, #1
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	689b      	ldr	r3, [r3, #8]
 8008bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bcc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	015a      	lsls	r2, r3, #5
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	4413      	add	r3, r2
 8008bd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bda:	691a      	ldr	r2, [r3, #16]
 8008bdc:	8afb      	ldrh	r3, [r7, #22]
 8008bde:	04d9      	lsls	r1, r3, #19
 8008be0:	4ba4      	ldr	r3, [pc, #656]	@ (8008e74 <USB_EPStartXfer+0x3cc>)
 8008be2:	400b      	ands	r3, r1
 8008be4:	69b9      	ldr	r1, [r7, #24]
 8008be6:	0148      	lsls	r0, r1, #5
 8008be8:	69f9      	ldr	r1, [r7, #28]
 8008bea:	4401      	add	r1, r0
 8008bec:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	791b      	ldrb	r3, [r3, #4]
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d122      	bne.n	8008c42 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008bfc:	69bb      	ldr	r3, [r7, #24]
 8008bfe:	015a      	lsls	r2, r3, #5
 8008c00:	69fb      	ldr	r3, [r7, #28]
 8008c02:	4413      	add	r3, r2
 8008c04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c08:	691b      	ldr	r3, [r3, #16]
 8008c0a:	69ba      	ldr	r2, [r7, #24]
 8008c0c:	0151      	lsls	r1, r2, #5
 8008c0e:	69fa      	ldr	r2, [r7, #28]
 8008c10:	440a      	add	r2, r1
 8008c12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c16:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008c1a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8008c1c:	69bb      	ldr	r3, [r7, #24]
 8008c1e:	015a      	lsls	r2, r3, #5
 8008c20:	69fb      	ldr	r3, [r7, #28]
 8008c22:	4413      	add	r3, r2
 8008c24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c28:	691a      	ldr	r2, [r3, #16]
 8008c2a:	8afb      	ldrh	r3, [r7, #22]
 8008c2c:	075b      	lsls	r3, r3, #29
 8008c2e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8008c32:	69b9      	ldr	r1, [r7, #24]
 8008c34:	0148      	lsls	r0, r1, #5
 8008c36:	69f9      	ldr	r1, [r7, #28]
 8008c38:	4401      	add	r1, r0
 8008c3a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008c42:	69bb      	ldr	r3, [r7, #24]
 8008c44:	015a      	lsls	r2, r3, #5
 8008c46:	69fb      	ldr	r3, [r7, #28]
 8008c48:	4413      	add	r3, r2
 8008c4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c4e:	691a      	ldr	r2, [r3, #16]
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	691b      	ldr	r3, [r3, #16]
 8008c54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c58:	69b9      	ldr	r1, [r7, #24]
 8008c5a:	0148      	lsls	r0, r1, #5
 8008c5c:	69f9      	ldr	r1, [r7, #28]
 8008c5e:	4401      	add	r1, r0
 8008c60:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008c64:	4313      	orrs	r3, r2
 8008c66:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008c68:	79fb      	ldrb	r3, [r7, #7]
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d14b      	bne.n	8008d06 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	69db      	ldr	r3, [r3, #28]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d009      	beq.n	8008c8a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008c76:	69bb      	ldr	r3, [r7, #24]
 8008c78:	015a      	lsls	r2, r3, #5
 8008c7a:	69fb      	ldr	r3, [r7, #28]
 8008c7c:	4413      	add	r3, r2
 8008c7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c82:	461a      	mov	r2, r3
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	69db      	ldr	r3, [r3, #28]
 8008c88:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	791b      	ldrb	r3, [r3, #4]
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d128      	bne.n	8008ce4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008c92:	69fb      	ldr	r3, [r7, #28]
 8008c94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c98:	689b      	ldr	r3, [r3, #8]
 8008c9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d110      	bne.n	8008cc4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008ca2:	69bb      	ldr	r3, [r7, #24]
 8008ca4:	015a      	lsls	r2, r3, #5
 8008ca6:	69fb      	ldr	r3, [r7, #28]
 8008ca8:	4413      	add	r3, r2
 8008caa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	69ba      	ldr	r2, [r7, #24]
 8008cb2:	0151      	lsls	r1, r2, #5
 8008cb4:	69fa      	ldr	r2, [r7, #28]
 8008cb6:	440a      	add	r2, r1
 8008cb8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008cbc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008cc0:	6013      	str	r3, [r2, #0]
 8008cc2:	e00f      	b.n	8008ce4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008cc4:	69bb      	ldr	r3, [r7, #24]
 8008cc6:	015a      	lsls	r2, r3, #5
 8008cc8:	69fb      	ldr	r3, [r7, #28]
 8008cca:	4413      	add	r3, r2
 8008ccc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	69ba      	ldr	r2, [r7, #24]
 8008cd4:	0151      	lsls	r1, r2, #5
 8008cd6:	69fa      	ldr	r2, [r7, #28]
 8008cd8:	440a      	add	r2, r1
 8008cda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008cde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ce2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008ce4:	69bb      	ldr	r3, [r7, #24]
 8008ce6:	015a      	lsls	r2, r3, #5
 8008ce8:	69fb      	ldr	r3, [r7, #28]
 8008cea:	4413      	add	r3, r2
 8008cec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	69ba      	ldr	r2, [r7, #24]
 8008cf4:	0151      	lsls	r1, r2, #5
 8008cf6:	69fa      	ldr	r2, [r7, #28]
 8008cf8:	440a      	add	r2, r1
 8008cfa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008cfe:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008d02:	6013      	str	r3, [r2, #0]
 8008d04:	e166      	b.n	8008fd4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008d06:	69bb      	ldr	r3, [r7, #24]
 8008d08:	015a      	lsls	r2, r3, #5
 8008d0a:	69fb      	ldr	r3, [r7, #28]
 8008d0c:	4413      	add	r3, r2
 8008d0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	69ba      	ldr	r2, [r7, #24]
 8008d16:	0151      	lsls	r1, r2, #5
 8008d18:	69fa      	ldr	r2, [r7, #28]
 8008d1a:	440a      	add	r2, r1
 8008d1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d20:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008d24:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	791b      	ldrb	r3, [r3, #4]
 8008d2a:	2b01      	cmp	r3, #1
 8008d2c:	d015      	beq.n	8008d5a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	691b      	ldr	r3, [r3, #16]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	f000 814e 	beq.w	8008fd4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008d38:	69fb      	ldr	r3, [r7, #28]
 8008d3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	f003 030f 	and.w	r3, r3, #15
 8008d48:	2101      	movs	r1, #1
 8008d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8008d4e:	69f9      	ldr	r1, [r7, #28]
 8008d50:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008d54:	4313      	orrs	r3, r2
 8008d56:	634b      	str	r3, [r1, #52]	@ 0x34
 8008d58:	e13c      	b.n	8008fd4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008d5a:	69fb      	ldr	r3, [r7, #28]
 8008d5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d60:	689b      	ldr	r3, [r3, #8]
 8008d62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d110      	bne.n	8008d8c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008d6a:	69bb      	ldr	r3, [r7, #24]
 8008d6c:	015a      	lsls	r2, r3, #5
 8008d6e:	69fb      	ldr	r3, [r7, #28]
 8008d70:	4413      	add	r3, r2
 8008d72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	69ba      	ldr	r2, [r7, #24]
 8008d7a:	0151      	lsls	r1, r2, #5
 8008d7c:	69fa      	ldr	r2, [r7, #28]
 8008d7e:	440a      	add	r2, r1
 8008d80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d84:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008d88:	6013      	str	r3, [r2, #0]
 8008d8a:	e00f      	b.n	8008dac <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008d8c:	69bb      	ldr	r3, [r7, #24]
 8008d8e:	015a      	lsls	r2, r3, #5
 8008d90:	69fb      	ldr	r3, [r7, #28]
 8008d92:	4413      	add	r3, r2
 8008d94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	69ba      	ldr	r2, [r7, #24]
 8008d9c:	0151      	lsls	r1, r2, #5
 8008d9e:	69fa      	ldr	r2, [r7, #28]
 8008da0:	440a      	add	r2, r1
 8008da2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008da6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008daa:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	68d9      	ldr	r1, [r3, #12]
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	781a      	ldrb	r2, [r3, #0]
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	691b      	ldr	r3, [r3, #16]
 8008db8:	b298      	uxth	r0, r3
 8008dba:	79fb      	ldrb	r3, [r7, #7]
 8008dbc:	9300      	str	r3, [sp, #0]
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	68f8      	ldr	r0, [r7, #12]
 8008dc2:	f000 f9b9 	bl	8009138 <USB_WritePacket>
 8008dc6:	e105      	b.n	8008fd4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008dc8:	69bb      	ldr	r3, [r7, #24]
 8008dca:	015a      	lsls	r2, r3, #5
 8008dcc:	69fb      	ldr	r3, [r7, #28]
 8008dce:	4413      	add	r3, r2
 8008dd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dd4:	691b      	ldr	r3, [r3, #16]
 8008dd6:	69ba      	ldr	r2, [r7, #24]
 8008dd8:	0151      	lsls	r1, r2, #5
 8008dda:	69fa      	ldr	r2, [r7, #28]
 8008ddc:	440a      	add	r2, r1
 8008dde:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008de2:	0cdb      	lsrs	r3, r3, #19
 8008de4:	04db      	lsls	r3, r3, #19
 8008de6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008de8:	69bb      	ldr	r3, [r7, #24]
 8008dea:	015a      	lsls	r2, r3, #5
 8008dec:	69fb      	ldr	r3, [r7, #28]
 8008dee:	4413      	add	r3, r2
 8008df0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008df4:	691b      	ldr	r3, [r3, #16]
 8008df6:	69ba      	ldr	r2, [r7, #24]
 8008df8:	0151      	lsls	r1, r2, #5
 8008dfa:	69fa      	ldr	r2, [r7, #28]
 8008dfc:	440a      	add	r2, r1
 8008dfe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e02:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008e06:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008e0a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8008e0c:	69bb      	ldr	r3, [r7, #24]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d132      	bne.n	8008e78 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	691b      	ldr	r3, [r3, #16]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d003      	beq.n	8008e22 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	689a      	ldr	r2, [r3, #8]
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	689a      	ldr	r2, [r3, #8]
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008e2a:	69bb      	ldr	r3, [r7, #24]
 8008e2c:	015a      	lsls	r2, r3, #5
 8008e2e:	69fb      	ldr	r3, [r7, #28]
 8008e30:	4413      	add	r3, r2
 8008e32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e36:	691a      	ldr	r2, [r3, #16]
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	6a1b      	ldr	r3, [r3, #32]
 8008e3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e40:	69b9      	ldr	r1, [r7, #24]
 8008e42:	0148      	lsls	r0, r1, #5
 8008e44:	69f9      	ldr	r1, [r7, #28]
 8008e46:	4401      	add	r1, r0
 8008e48:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008e50:	69bb      	ldr	r3, [r7, #24]
 8008e52:	015a      	lsls	r2, r3, #5
 8008e54:	69fb      	ldr	r3, [r7, #28]
 8008e56:	4413      	add	r3, r2
 8008e58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e5c:	691b      	ldr	r3, [r3, #16]
 8008e5e:	69ba      	ldr	r2, [r7, #24]
 8008e60:	0151      	lsls	r1, r2, #5
 8008e62:	69fa      	ldr	r2, [r7, #28]
 8008e64:	440a      	add	r2, r1
 8008e66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e6a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008e6e:	6113      	str	r3, [r2, #16]
 8008e70:	e062      	b.n	8008f38 <USB_EPStartXfer+0x490>
 8008e72:	bf00      	nop
 8008e74:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	691b      	ldr	r3, [r3, #16]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d123      	bne.n	8008ec8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008e80:	69bb      	ldr	r3, [r7, #24]
 8008e82:	015a      	lsls	r2, r3, #5
 8008e84:	69fb      	ldr	r3, [r7, #28]
 8008e86:	4413      	add	r3, r2
 8008e88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e8c:	691a      	ldr	r2, [r3, #16]
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	689b      	ldr	r3, [r3, #8]
 8008e92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e96:	69b9      	ldr	r1, [r7, #24]
 8008e98:	0148      	lsls	r0, r1, #5
 8008e9a:	69f9      	ldr	r1, [r7, #28]
 8008e9c:	4401      	add	r1, r0
 8008e9e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008ea6:	69bb      	ldr	r3, [r7, #24]
 8008ea8:	015a      	lsls	r2, r3, #5
 8008eaa:	69fb      	ldr	r3, [r7, #28]
 8008eac:	4413      	add	r3, r2
 8008eae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008eb2:	691b      	ldr	r3, [r3, #16]
 8008eb4:	69ba      	ldr	r2, [r7, #24]
 8008eb6:	0151      	lsls	r1, r2, #5
 8008eb8:	69fa      	ldr	r2, [r7, #28]
 8008eba:	440a      	add	r2, r1
 8008ebc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ec0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008ec4:	6113      	str	r3, [r2, #16]
 8008ec6:	e037      	b.n	8008f38 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	691a      	ldr	r2, [r3, #16]
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	4413      	add	r3, r2
 8008ed2:	1e5a      	subs	r2, r3, #1
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	689b      	ldr	r3, [r3, #8]
 8008ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008edc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	689b      	ldr	r3, [r3, #8]
 8008ee2:	8afa      	ldrh	r2, [r7, #22]
 8008ee4:	fb03 f202 	mul.w	r2, r3, r2
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008eec:	69bb      	ldr	r3, [r7, #24]
 8008eee:	015a      	lsls	r2, r3, #5
 8008ef0:	69fb      	ldr	r3, [r7, #28]
 8008ef2:	4413      	add	r3, r2
 8008ef4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ef8:	691a      	ldr	r2, [r3, #16]
 8008efa:	8afb      	ldrh	r3, [r7, #22]
 8008efc:	04d9      	lsls	r1, r3, #19
 8008efe:	4b38      	ldr	r3, [pc, #224]	@ (8008fe0 <USB_EPStartXfer+0x538>)
 8008f00:	400b      	ands	r3, r1
 8008f02:	69b9      	ldr	r1, [r7, #24]
 8008f04:	0148      	lsls	r0, r1, #5
 8008f06:	69f9      	ldr	r1, [r7, #28]
 8008f08:	4401      	add	r1, r0
 8008f0a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008f12:	69bb      	ldr	r3, [r7, #24]
 8008f14:	015a      	lsls	r2, r3, #5
 8008f16:	69fb      	ldr	r3, [r7, #28]
 8008f18:	4413      	add	r3, r2
 8008f1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f1e:	691a      	ldr	r2, [r3, #16]
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	6a1b      	ldr	r3, [r3, #32]
 8008f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f28:	69b9      	ldr	r1, [r7, #24]
 8008f2a:	0148      	lsls	r0, r1, #5
 8008f2c:	69f9      	ldr	r1, [r7, #28]
 8008f2e:	4401      	add	r1, r0
 8008f30:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008f34:	4313      	orrs	r3, r2
 8008f36:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008f38:	79fb      	ldrb	r3, [r7, #7]
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	d10d      	bne.n	8008f5a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	68db      	ldr	r3, [r3, #12]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d009      	beq.n	8008f5a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	68d9      	ldr	r1, [r3, #12]
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	015a      	lsls	r2, r3, #5
 8008f4e:	69fb      	ldr	r3, [r7, #28]
 8008f50:	4413      	add	r3, r2
 8008f52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f56:	460a      	mov	r2, r1
 8008f58:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	791b      	ldrb	r3, [r3, #4]
 8008f5e:	2b01      	cmp	r3, #1
 8008f60:	d128      	bne.n	8008fb4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008f62:	69fb      	ldr	r3, [r7, #28]
 8008f64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f68:	689b      	ldr	r3, [r3, #8]
 8008f6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d110      	bne.n	8008f94 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008f72:	69bb      	ldr	r3, [r7, #24]
 8008f74:	015a      	lsls	r2, r3, #5
 8008f76:	69fb      	ldr	r3, [r7, #28]
 8008f78:	4413      	add	r3, r2
 8008f7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	69ba      	ldr	r2, [r7, #24]
 8008f82:	0151      	lsls	r1, r2, #5
 8008f84:	69fa      	ldr	r2, [r7, #28]
 8008f86:	440a      	add	r2, r1
 8008f88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f8c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008f90:	6013      	str	r3, [r2, #0]
 8008f92:	e00f      	b.n	8008fb4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008f94:	69bb      	ldr	r3, [r7, #24]
 8008f96:	015a      	lsls	r2, r3, #5
 8008f98:	69fb      	ldr	r3, [r7, #28]
 8008f9a:	4413      	add	r3, r2
 8008f9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	69ba      	ldr	r2, [r7, #24]
 8008fa4:	0151      	lsls	r1, r2, #5
 8008fa6:	69fa      	ldr	r2, [r7, #28]
 8008fa8:	440a      	add	r2, r1
 8008faa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008fae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008fb2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008fb4:	69bb      	ldr	r3, [r7, #24]
 8008fb6:	015a      	lsls	r2, r3, #5
 8008fb8:	69fb      	ldr	r3, [r7, #28]
 8008fba:	4413      	add	r3, r2
 8008fbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	69ba      	ldr	r2, [r7, #24]
 8008fc4:	0151      	lsls	r1, r2, #5
 8008fc6:	69fa      	ldr	r2, [r7, #28]
 8008fc8:	440a      	add	r2, r1
 8008fca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008fce:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008fd2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008fd4:	2300      	movs	r3, #0
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3720      	adds	r7, #32
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	1ff80000 	.word	0x1ff80000

08008fe4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b087      	sub	sp, #28
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	785b      	ldrb	r3, [r3, #1]
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d14a      	bne.n	8009098 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	781b      	ldrb	r3, [r3, #0]
 8009006:	015a      	lsls	r2, r3, #5
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	4413      	add	r3, r2
 800900c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009016:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800901a:	f040 8086 	bne.w	800912a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	781b      	ldrb	r3, [r3, #0]
 8009022:	015a      	lsls	r2, r3, #5
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	4413      	add	r3, r2
 8009028:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	683a      	ldr	r2, [r7, #0]
 8009030:	7812      	ldrb	r2, [r2, #0]
 8009032:	0151      	lsls	r1, r2, #5
 8009034:	693a      	ldr	r2, [r7, #16]
 8009036:	440a      	add	r2, r1
 8009038:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800903c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009040:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	015a      	lsls	r2, r3, #5
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	4413      	add	r3, r2
 800904c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	683a      	ldr	r2, [r7, #0]
 8009054:	7812      	ldrb	r2, [r2, #0]
 8009056:	0151      	lsls	r1, r2, #5
 8009058:	693a      	ldr	r2, [r7, #16]
 800905a:	440a      	add	r2, r1
 800905c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009060:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009064:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	3301      	adds	r3, #1
 800906a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009072:	4293      	cmp	r3, r2
 8009074:	d902      	bls.n	800907c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009076:	2301      	movs	r3, #1
 8009078:	75fb      	strb	r3, [r7, #23]
          break;
 800907a:	e056      	b.n	800912a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	781b      	ldrb	r3, [r3, #0]
 8009080:	015a      	lsls	r2, r3, #5
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	4413      	add	r3, r2
 8009086:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009090:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009094:	d0e7      	beq.n	8009066 <USB_EPStopXfer+0x82>
 8009096:	e048      	b.n	800912a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	781b      	ldrb	r3, [r3, #0]
 800909c:	015a      	lsls	r2, r3, #5
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	4413      	add	r3, r2
 80090a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80090ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80090b0:	d13b      	bne.n	800912a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	781b      	ldrb	r3, [r3, #0]
 80090b6:	015a      	lsls	r2, r3, #5
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	4413      	add	r3, r2
 80090bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	683a      	ldr	r2, [r7, #0]
 80090c4:	7812      	ldrb	r2, [r2, #0]
 80090c6:	0151      	lsls	r1, r2, #5
 80090c8:	693a      	ldr	r2, [r7, #16]
 80090ca:	440a      	add	r2, r1
 80090cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80090d0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80090d4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	781b      	ldrb	r3, [r3, #0]
 80090da:	015a      	lsls	r2, r3, #5
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	4413      	add	r3, r2
 80090e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	683a      	ldr	r2, [r7, #0]
 80090e8:	7812      	ldrb	r2, [r2, #0]
 80090ea:	0151      	lsls	r1, r2, #5
 80090ec:	693a      	ldr	r2, [r7, #16]
 80090ee:	440a      	add	r2, r1
 80090f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80090f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80090f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	3301      	adds	r3, #1
 80090fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009106:	4293      	cmp	r3, r2
 8009108:	d902      	bls.n	8009110 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	75fb      	strb	r3, [r7, #23]
          break;
 800910e:	e00c      	b.n	800912a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	015a      	lsls	r2, r3, #5
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	4413      	add	r3, r2
 800911a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009124:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009128:	d0e7      	beq.n	80090fa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800912a:	7dfb      	ldrb	r3, [r7, #23]
}
 800912c:	4618      	mov	r0, r3
 800912e:	371c      	adds	r7, #28
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr

08009138 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009138:	b480      	push	{r7}
 800913a:	b089      	sub	sp, #36	@ 0x24
 800913c:	af00      	add	r7, sp, #0
 800913e:	60f8      	str	r0, [r7, #12]
 8009140:	60b9      	str	r1, [r7, #8]
 8009142:	4611      	mov	r1, r2
 8009144:	461a      	mov	r2, r3
 8009146:	460b      	mov	r3, r1
 8009148:	71fb      	strb	r3, [r7, #7]
 800914a:	4613      	mov	r3, r2
 800914c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009156:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800915a:	2b00      	cmp	r3, #0
 800915c:	d123      	bne.n	80091a6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800915e:	88bb      	ldrh	r3, [r7, #4]
 8009160:	3303      	adds	r3, #3
 8009162:	089b      	lsrs	r3, r3, #2
 8009164:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009166:	2300      	movs	r3, #0
 8009168:	61bb      	str	r3, [r7, #24]
 800916a:	e018      	b.n	800919e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800916c:	79fb      	ldrb	r3, [r7, #7]
 800916e:	031a      	lsls	r2, r3, #12
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	4413      	add	r3, r2
 8009174:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009178:	461a      	mov	r2, r3
 800917a:	69fb      	ldr	r3, [r7, #28]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009180:	69fb      	ldr	r3, [r7, #28]
 8009182:	3301      	adds	r3, #1
 8009184:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009186:	69fb      	ldr	r3, [r7, #28]
 8009188:	3301      	adds	r3, #1
 800918a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800918c:	69fb      	ldr	r3, [r7, #28]
 800918e:	3301      	adds	r3, #1
 8009190:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009192:	69fb      	ldr	r3, [r7, #28]
 8009194:	3301      	adds	r3, #1
 8009196:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009198:	69bb      	ldr	r3, [r7, #24]
 800919a:	3301      	adds	r3, #1
 800919c:	61bb      	str	r3, [r7, #24]
 800919e:	69ba      	ldr	r2, [r7, #24]
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d3e2      	bcc.n	800916c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80091a6:	2300      	movs	r3, #0
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3724      	adds	r7, #36	@ 0x24
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr

080091b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b08b      	sub	sp, #44	@ 0x2c
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	60f8      	str	r0, [r7, #12]
 80091bc:	60b9      	str	r1, [r7, #8]
 80091be:	4613      	mov	r3, r2
 80091c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80091ca:	88fb      	ldrh	r3, [r7, #6]
 80091cc:	089b      	lsrs	r3, r3, #2
 80091ce:	b29b      	uxth	r3, r3
 80091d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80091d2:	88fb      	ldrh	r3, [r7, #6]
 80091d4:	f003 0303 	and.w	r3, r3, #3
 80091d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80091da:	2300      	movs	r3, #0
 80091dc:	623b      	str	r3, [r7, #32]
 80091de:	e014      	b.n	800920a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80091e0:	69bb      	ldr	r3, [r7, #24]
 80091e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80091e6:	681a      	ldr	r2, [r3, #0]
 80091e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80091ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ee:	3301      	adds	r3, #1
 80091f0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80091f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091f4:	3301      	adds	r3, #1
 80091f6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80091f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091fa:	3301      	adds	r3, #1
 80091fc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80091fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009200:	3301      	adds	r3, #1
 8009202:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009204:	6a3b      	ldr	r3, [r7, #32]
 8009206:	3301      	adds	r3, #1
 8009208:	623b      	str	r3, [r7, #32]
 800920a:	6a3a      	ldr	r2, [r7, #32]
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	429a      	cmp	r2, r3
 8009210:	d3e6      	bcc.n	80091e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009212:	8bfb      	ldrh	r3, [r7, #30]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d01e      	beq.n	8009256 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009218:	2300      	movs	r3, #0
 800921a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800921c:	69bb      	ldr	r3, [r7, #24]
 800921e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009222:	461a      	mov	r2, r3
 8009224:	f107 0310 	add.w	r3, r7, #16
 8009228:	6812      	ldr	r2, [r2, #0]
 800922a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800922c:	693a      	ldr	r2, [r7, #16]
 800922e:	6a3b      	ldr	r3, [r7, #32]
 8009230:	b2db      	uxtb	r3, r3
 8009232:	00db      	lsls	r3, r3, #3
 8009234:	fa22 f303 	lsr.w	r3, r2, r3
 8009238:	b2da      	uxtb	r2, r3
 800923a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800923c:	701a      	strb	r2, [r3, #0]
      i++;
 800923e:	6a3b      	ldr	r3, [r7, #32]
 8009240:	3301      	adds	r3, #1
 8009242:	623b      	str	r3, [r7, #32]
      pDest++;
 8009244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009246:	3301      	adds	r3, #1
 8009248:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800924a:	8bfb      	ldrh	r3, [r7, #30]
 800924c:	3b01      	subs	r3, #1
 800924e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009250:	8bfb      	ldrh	r3, [r7, #30]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d1ea      	bne.n	800922c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009258:	4618      	mov	r0, r3
 800925a:	372c      	adds	r7, #44	@ 0x2c
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr

08009264 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009264:	b480      	push	{r7}
 8009266:	b085      	sub	sp, #20
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	785b      	ldrb	r3, [r3, #1]
 800927c:	2b01      	cmp	r3, #1
 800927e:	d12c      	bne.n	80092da <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	015a      	lsls	r2, r3, #5
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	4413      	add	r3, r2
 8009288:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	2b00      	cmp	r3, #0
 8009290:	db12      	blt.n	80092b8 <USB_EPSetStall+0x54>
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d00f      	beq.n	80092b8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	015a      	lsls	r2, r3, #5
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	4413      	add	r3, r2
 80092a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	68ba      	ldr	r2, [r7, #8]
 80092a8:	0151      	lsls	r1, r2, #5
 80092aa:	68fa      	ldr	r2, [r7, #12]
 80092ac:	440a      	add	r2, r1
 80092ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80092b2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80092b6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	015a      	lsls	r2, r3, #5
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	4413      	add	r3, r2
 80092c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	68ba      	ldr	r2, [r7, #8]
 80092c8:	0151      	lsls	r1, r2, #5
 80092ca:	68fa      	ldr	r2, [r7, #12]
 80092cc:	440a      	add	r2, r1
 80092ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80092d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80092d6:	6013      	str	r3, [r2, #0]
 80092d8:	e02b      	b.n	8009332 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	015a      	lsls	r2, r3, #5
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	4413      	add	r3, r2
 80092e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	db12      	blt.n	8009312 <USB_EPSetStall+0xae>
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d00f      	beq.n	8009312 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	015a      	lsls	r2, r3, #5
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	4413      	add	r3, r2
 80092fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	68ba      	ldr	r2, [r7, #8]
 8009302:	0151      	lsls	r1, r2, #5
 8009304:	68fa      	ldr	r2, [r7, #12]
 8009306:	440a      	add	r2, r1
 8009308:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800930c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009310:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	015a      	lsls	r2, r3, #5
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	4413      	add	r3, r2
 800931a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	68ba      	ldr	r2, [r7, #8]
 8009322:	0151      	lsls	r1, r2, #5
 8009324:	68fa      	ldr	r2, [r7, #12]
 8009326:	440a      	add	r2, r1
 8009328:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800932c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009330:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009332:	2300      	movs	r3, #0
}
 8009334:	4618      	mov	r0, r3
 8009336:	3714      	adds	r7, #20
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr

08009340 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009340:	b480      	push	{r7}
 8009342:	b085      	sub	sp, #20
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	785b      	ldrb	r3, [r3, #1]
 8009358:	2b01      	cmp	r3, #1
 800935a:	d128      	bne.n	80093ae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	015a      	lsls	r2, r3, #5
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	4413      	add	r3, r2
 8009364:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	68ba      	ldr	r2, [r7, #8]
 800936c:	0151      	lsls	r1, r2, #5
 800936e:	68fa      	ldr	r2, [r7, #12]
 8009370:	440a      	add	r2, r1
 8009372:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009376:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800937a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	791b      	ldrb	r3, [r3, #4]
 8009380:	2b03      	cmp	r3, #3
 8009382:	d003      	beq.n	800938c <USB_EPClearStall+0x4c>
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	791b      	ldrb	r3, [r3, #4]
 8009388:	2b02      	cmp	r3, #2
 800938a:	d138      	bne.n	80093fe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	015a      	lsls	r2, r3, #5
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	4413      	add	r3, r2
 8009394:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	68ba      	ldr	r2, [r7, #8]
 800939c:	0151      	lsls	r1, r2, #5
 800939e:	68fa      	ldr	r2, [r7, #12]
 80093a0:	440a      	add	r2, r1
 80093a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80093a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80093aa:	6013      	str	r3, [r2, #0]
 80093ac:	e027      	b.n	80093fe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	015a      	lsls	r2, r3, #5
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	4413      	add	r3, r2
 80093b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	68ba      	ldr	r2, [r7, #8]
 80093be:	0151      	lsls	r1, r2, #5
 80093c0:	68fa      	ldr	r2, [r7, #12]
 80093c2:	440a      	add	r2, r1
 80093c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80093c8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80093cc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	791b      	ldrb	r3, [r3, #4]
 80093d2:	2b03      	cmp	r3, #3
 80093d4:	d003      	beq.n	80093de <USB_EPClearStall+0x9e>
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	791b      	ldrb	r3, [r3, #4]
 80093da:	2b02      	cmp	r3, #2
 80093dc:	d10f      	bne.n	80093fe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	015a      	lsls	r2, r3, #5
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	4413      	add	r3, r2
 80093e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	68ba      	ldr	r2, [r7, #8]
 80093ee:	0151      	lsls	r1, r2, #5
 80093f0:	68fa      	ldr	r2, [r7, #12]
 80093f2:	440a      	add	r2, r1
 80093f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80093f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80093fc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80093fe:	2300      	movs	r3, #0
}
 8009400:	4618      	mov	r0, r3
 8009402:	3714      	adds	r7, #20
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr

0800940c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800940c:	b480      	push	{r7}
 800940e:	b085      	sub	sp, #20
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	460b      	mov	r3, r1
 8009416:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	68fa      	ldr	r2, [r7, #12]
 8009426:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800942a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800942e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	78fb      	ldrb	r3, [r7, #3]
 800943a:	011b      	lsls	r3, r3, #4
 800943c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8009440:	68f9      	ldr	r1, [r7, #12]
 8009442:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009446:	4313      	orrs	r3, r2
 8009448:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800944a:	2300      	movs	r3, #0
}
 800944c:	4618      	mov	r0, r3
 800944e:	3714      	adds	r7, #20
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr

08009458 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009458:	b480      	push	{r7}
 800945a:	b085      	sub	sp, #20
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	68fa      	ldr	r2, [r7, #12]
 800946e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009472:	f023 0303 	bic.w	r3, r3, #3
 8009476:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	68fa      	ldr	r2, [r7, #12]
 8009482:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009486:	f023 0302 	bic.w	r3, r3, #2
 800948a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800948c:	2300      	movs	r3, #0
}
 800948e:	4618      	mov	r0, r3
 8009490:	3714      	adds	r7, #20
 8009492:	46bd      	mov	sp, r7
 8009494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009498:	4770      	bx	lr

0800949a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800949a:	b480      	push	{r7}
 800949c:	b085      	sub	sp, #20
 800949e:	af00      	add	r7, sp, #0
 80094a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	68fa      	ldr	r2, [r7, #12]
 80094b0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80094b4:	f023 0303 	bic.w	r3, r3, #3
 80094b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	68fa      	ldr	r2, [r7, #12]
 80094c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80094c8:	f043 0302 	orr.w	r3, r3, #2
 80094cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80094ce:	2300      	movs	r3, #0
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3714      	adds	r7, #20
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr

080094dc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80094dc:	b480      	push	{r7}
 80094de:	b085      	sub	sp, #20
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	695b      	ldr	r3, [r3, #20]
 80094e8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	699b      	ldr	r3, [r3, #24]
 80094ee:	68fa      	ldr	r2, [r7, #12]
 80094f0:	4013      	ands	r3, r2
 80094f2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80094f4:	68fb      	ldr	r3, [r7, #12]
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3714      	adds	r7, #20
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr

08009502 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009502:	b480      	push	{r7}
 8009504:	b085      	sub	sp, #20
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009514:	699b      	ldr	r3, [r3, #24]
 8009516:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800951e:	69db      	ldr	r3, [r3, #28]
 8009520:	68ba      	ldr	r2, [r7, #8]
 8009522:	4013      	ands	r3, r2
 8009524:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	0c1b      	lsrs	r3, r3, #16
}
 800952a:	4618      	mov	r0, r3
 800952c:	3714      	adds	r7, #20
 800952e:	46bd      	mov	sp, r7
 8009530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009534:	4770      	bx	lr

08009536 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009536:	b480      	push	{r7}
 8009538:	b085      	sub	sp, #20
 800953a:	af00      	add	r7, sp, #0
 800953c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009548:	699b      	ldr	r3, [r3, #24]
 800954a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009552:	69db      	ldr	r3, [r3, #28]
 8009554:	68ba      	ldr	r2, [r7, #8]
 8009556:	4013      	ands	r3, r2
 8009558:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	b29b      	uxth	r3, r3
}
 800955e:	4618      	mov	r0, r3
 8009560:	3714      	adds	r7, #20
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr

0800956a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800956a:	b480      	push	{r7}
 800956c:	b085      	sub	sp, #20
 800956e:	af00      	add	r7, sp, #0
 8009570:	6078      	str	r0, [r7, #4]
 8009572:	460b      	mov	r3, r1
 8009574:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800957a:	78fb      	ldrb	r3, [r7, #3]
 800957c:	015a      	lsls	r2, r3, #5
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	4413      	add	r3, r2
 8009582:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009586:	689b      	ldr	r3, [r3, #8]
 8009588:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009590:	695b      	ldr	r3, [r3, #20]
 8009592:	68ba      	ldr	r2, [r7, #8]
 8009594:	4013      	ands	r3, r2
 8009596:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009598:	68bb      	ldr	r3, [r7, #8]
}
 800959a:	4618      	mov	r0, r3
 800959c:	3714      	adds	r7, #20
 800959e:	46bd      	mov	sp, r7
 80095a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a4:	4770      	bx	lr

080095a6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80095a6:	b480      	push	{r7}
 80095a8:	b087      	sub	sp, #28
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	6078      	str	r0, [r7, #4]
 80095ae:	460b      	mov	r3, r1
 80095b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095bc:	691b      	ldr	r3, [r3, #16]
 80095be:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095c8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80095ca:	78fb      	ldrb	r3, [r7, #3]
 80095cc:	f003 030f 	and.w	r3, r3, #15
 80095d0:	68fa      	ldr	r2, [r7, #12]
 80095d2:	fa22 f303 	lsr.w	r3, r2, r3
 80095d6:	01db      	lsls	r3, r3, #7
 80095d8:	b2db      	uxtb	r3, r3
 80095da:	693a      	ldr	r2, [r7, #16]
 80095dc:	4313      	orrs	r3, r2
 80095de:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80095e0:	78fb      	ldrb	r3, [r7, #3]
 80095e2:	015a      	lsls	r2, r3, #5
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	4413      	add	r3, r2
 80095e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095ec:	689b      	ldr	r3, [r3, #8]
 80095ee:	693a      	ldr	r2, [r7, #16]
 80095f0:	4013      	ands	r3, r2
 80095f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80095f4:	68bb      	ldr	r3, [r7, #8]
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	371c      	adds	r7, #28
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr

08009602 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009602:	b480      	push	{r7}
 8009604:	b083      	sub	sp, #12
 8009606:	af00      	add	r7, sp, #0
 8009608:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	695b      	ldr	r3, [r3, #20]
 800960e:	f003 0301 	and.w	r3, r3, #1
}
 8009612:	4618      	mov	r0, r3
 8009614:	370c      	adds	r7, #12
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr

0800961e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800961e:	b480      	push	{r7}
 8009620:	b085      	sub	sp, #20
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	68fa      	ldr	r2, [r7, #12]
 8009634:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009638:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800963c:	f023 0307 	bic.w	r3, r3, #7
 8009640:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009648:	685b      	ldr	r3, [r3, #4]
 800964a:	68fa      	ldr	r2, [r7, #12]
 800964c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009654:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009656:	2300      	movs	r3, #0
}
 8009658:	4618      	mov	r0, r3
 800965a:	3714      	adds	r7, #20
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr

08009664 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8009664:	b480      	push	{r7}
 8009666:	b087      	sub	sp, #28
 8009668:	af00      	add	r7, sp, #0
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	460b      	mov	r3, r1
 800966e:	607a      	str	r2, [r7, #4]
 8009670:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	333c      	adds	r3, #60	@ 0x3c
 800967a:	3304      	adds	r3, #4
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	4a26      	ldr	r2, [pc, #152]	@ (800971c <USB_EP0_OutStart+0xb8>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d90a      	bls.n	800969e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009694:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009698:	d101      	bne.n	800969e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800969a:	2300      	movs	r3, #0
 800969c:	e037      	b.n	800970e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096a4:	461a      	mov	r2, r3
 80096a6:	2300      	movs	r3, #0
 80096a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096b0:	691b      	ldr	r3, [r3, #16]
 80096b2:	697a      	ldr	r2, [r7, #20]
 80096b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80096b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80096bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096c4:	691b      	ldr	r3, [r3, #16]
 80096c6:	697a      	ldr	r2, [r7, #20]
 80096c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80096cc:	f043 0318 	orr.w	r3, r3, #24
 80096d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096d8:	691b      	ldr	r3, [r3, #16]
 80096da:	697a      	ldr	r2, [r7, #20]
 80096dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80096e0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80096e4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80096e6:	7afb      	ldrb	r3, [r7, #11]
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d10f      	bne.n	800970c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096f2:	461a      	mov	r2, r3
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	697a      	ldr	r2, [r7, #20]
 8009702:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009706:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800970a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800970c:	2300      	movs	r3, #0
}
 800970e:	4618      	mov	r0, r3
 8009710:	371c      	adds	r7, #28
 8009712:	46bd      	mov	sp, r7
 8009714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009718:	4770      	bx	lr
 800971a:	bf00      	nop
 800971c:	4f54300a 	.word	0x4f54300a

08009720 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009720:	b480      	push	{r7}
 8009722:	b085      	sub	sp, #20
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009728:	2300      	movs	r3, #0
 800972a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	3301      	adds	r3, #1
 8009730:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009738:	d901      	bls.n	800973e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800973a:	2303      	movs	r3, #3
 800973c:	e01b      	b.n	8009776 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	691b      	ldr	r3, [r3, #16]
 8009742:	2b00      	cmp	r3, #0
 8009744:	daf2      	bge.n	800972c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009746:	2300      	movs	r3, #0
 8009748:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	691b      	ldr	r3, [r3, #16]
 800974e:	f043 0201 	orr.w	r2, r3, #1
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	3301      	adds	r3, #1
 800975a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009762:	d901      	bls.n	8009768 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009764:	2303      	movs	r3, #3
 8009766:	e006      	b.n	8009776 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	691b      	ldr	r3, [r3, #16]
 800976c:	f003 0301 	and.w	r3, r3, #1
 8009770:	2b01      	cmp	r3, #1
 8009772:	d0f0      	beq.n	8009756 <USB_CoreReset+0x36>

  return HAL_OK;
 8009774:	2300      	movs	r3, #0
}
 8009776:	4618      	mov	r0, r3
 8009778:	3714      	adds	r7, #20
 800977a:	46bd      	mov	sp, r7
 800977c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009780:	4770      	bx	lr
	...

08009784 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b084      	sub	sp, #16
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	460b      	mov	r3, r1
 800978e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009790:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009794:	f002 fcd8 	bl	800c148 <USBD_static_malloc>
 8009798:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d109      	bne.n	80097b4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	32b0      	adds	r2, #176	@ 0xb0
 80097aa:	2100      	movs	r1, #0
 80097ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80097b0:	2302      	movs	r3, #2
 80097b2:	e0d4      	b.n	800995e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80097b4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80097b8:	2100      	movs	r1, #0
 80097ba:	68f8      	ldr	r0, [r7, #12]
 80097bc:	f003 fd40 	bl	800d240 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	32b0      	adds	r2, #176	@ 0xb0
 80097ca:	68f9      	ldr	r1, [r7, #12]
 80097cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	32b0      	adds	r2, #176	@ 0xb0
 80097da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	7c1b      	ldrb	r3, [r3, #16]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d138      	bne.n	800985e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80097ec:	4b5e      	ldr	r3, [pc, #376]	@ (8009968 <USBD_CDC_Init+0x1e4>)
 80097ee:	7819      	ldrb	r1, [r3, #0]
 80097f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80097f4:	2202      	movs	r2, #2
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f002 fb35 	bl	800be66 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80097fc:	4b5a      	ldr	r3, [pc, #360]	@ (8009968 <USBD_CDC_Init+0x1e4>)
 80097fe:	781b      	ldrb	r3, [r3, #0]
 8009800:	f003 020f 	and.w	r2, r3, #15
 8009804:	6879      	ldr	r1, [r7, #4]
 8009806:	4613      	mov	r3, r2
 8009808:	009b      	lsls	r3, r3, #2
 800980a:	4413      	add	r3, r2
 800980c:	009b      	lsls	r3, r3, #2
 800980e:	440b      	add	r3, r1
 8009810:	3324      	adds	r3, #36	@ 0x24
 8009812:	2201      	movs	r2, #1
 8009814:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009816:	4b55      	ldr	r3, [pc, #340]	@ (800996c <USBD_CDC_Init+0x1e8>)
 8009818:	7819      	ldrb	r1, [r3, #0]
 800981a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800981e:	2202      	movs	r2, #2
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f002 fb20 	bl	800be66 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009826:	4b51      	ldr	r3, [pc, #324]	@ (800996c <USBD_CDC_Init+0x1e8>)
 8009828:	781b      	ldrb	r3, [r3, #0]
 800982a:	f003 020f 	and.w	r2, r3, #15
 800982e:	6879      	ldr	r1, [r7, #4]
 8009830:	4613      	mov	r3, r2
 8009832:	009b      	lsls	r3, r3, #2
 8009834:	4413      	add	r3, r2
 8009836:	009b      	lsls	r3, r3, #2
 8009838:	440b      	add	r3, r1
 800983a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800983e:	2201      	movs	r2, #1
 8009840:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009842:	4b4b      	ldr	r3, [pc, #300]	@ (8009970 <USBD_CDC_Init+0x1ec>)
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	f003 020f 	and.w	r2, r3, #15
 800984a:	6879      	ldr	r1, [r7, #4]
 800984c:	4613      	mov	r3, r2
 800984e:	009b      	lsls	r3, r3, #2
 8009850:	4413      	add	r3, r2
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	440b      	add	r3, r1
 8009856:	3326      	adds	r3, #38	@ 0x26
 8009858:	2210      	movs	r2, #16
 800985a:	801a      	strh	r2, [r3, #0]
 800985c:	e035      	b.n	80098ca <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800985e:	4b42      	ldr	r3, [pc, #264]	@ (8009968 <USBD_CDC_Init+0x1e4>)
 8009860:	7819      	ldrb	r1, [r3, #0]
 8009862:	2340      	movs	r3, #64	@ 0x40
 8009864:	2202      	movs	r2, #2
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f002 fafd 	bl	800be66 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800986c:	4b3e      	ldr	r3, [pc, #248]	@ (8009968 <USBD_CDC_Init+0x1e4>)
 800986e:	781b      	ldrb	r3, [r3, #0]
 8009870:	f003 020f 	and.w	r2, r3, #15
 8009874:	6879      	ldr	r1, [r7, #4]
 8009876:	4613      	mov	r3, r2
 8009878:	009b      	lsls	r3, r3, #2
 800987a:	4413      	add	r3, r2
 800987c:	009b      	lsls	r3, r3, #2
 800987e:	440b      	add	r3, r1
 8009880:	3324      	adds	r3, #36	@ 0x24
 8009882:	2201      	movs	r2, #1
 8009884:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009886:	4b39      	ldr	r3, [pc, #228]	@ (800996c <USBD_CDC_Init+0x1e8>)
 8009888:	7819      	ldrb	r1, [r3, #0]
 800988a:	2340      	movs	r3, #64	@ 0x40
 800988c:	2202      	movs	r2, #2
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f002 fae9 	bl	800be66 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009894:	4b35      	ldr	r3, [pc, #212]	@ (800996c <USBD_CDC_Init+0x1e8>)
 8009896:	781b      	ldrb	r3, [r3, #0]
 8009898:	f003 020f 	and.w	r2, r3, #15
 800989c:	6879      	ldr	r1, [r7, #4]
 800989e:	4613      	mov	r3, r2
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	4413      	add	r3, r2
 80098a4:	009b      	lsls	r3, r3, #2
 80098a6:	440b      	add	r3, r1
 80098a8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80098ac:	2201      	movs	r2, #1
 80098ae:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80098b0:	4b2f      	ldr	r3, [pc, #188]	@ (8009970 <USBD_CDC_Init+0x1ec>)
 80098b2:	781b      	ldrb	r3, [r3, #0]
 80098b4:	f003 020f 	and.w	r2, r3, #15
 80098b8:	6879      	ldr	r1, [r7, #4]
 80098ba:	4613      	mov	r3, r2
 80098bc:	009b      	lsls	r3, r3, #2
 80098be:	4413      	add	r3, r2
 80098c0:	009b      	lsls	r3, r3, #2
 80098c2:	440b      	add	r3, r1
 80098c4:	3326      	adds	r3, #38	@ 0x26
 80098c6:	2210      	movs	r2, #16
 80098c8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80098ca:	4b29      	ldr	r3, [pc, #164]	@ (8009970 <USBD_CDC_Init+0x1ec>)
 80098cc:	7819      	ldrb	r1, [r3, #0]
 80098ce:	2308      	movs	r3, #8
 80098d0:	2203      	movs	r2, #3
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f002 fac7 	bl	800be66 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80098d8:	4b25      	ldr	r3, [pc, #148]	@ (8009970 <USBD_CDC_Init+0x1ec>)
 80098da:	781b      	ldrb	r3, [r3, #0]
 80098dc:	f003 020f 	and.w	r2, r3, #15
 80098e0:	6879      	ldr	r1, [r7, #4]
 80098e2:	4613      	mov	r3, r2
 80098e4:	009b      	lsls	r3, r3, #2
 80098e6:	4413      	add	r3, r2
 80098e8:	009b      	lsls	r3, r3, #2
 80098ea:	440b      	add	r3, r1
 80098ec:	3324      	adds	r3, #36	@ 0x24
 80098ee:	2201      	movs	r2, #1
 80098f0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2200      	movs	r2, #0
 80098f6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	33b0      	adds	r3, #176	@ 0xb0
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	4413      	add	r3, r2
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2200      	movs	r2, #0
 8009912:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	2200      	movs	r2, #0
 800991a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009924:	2b00      	cmp	r3, #0
 8009926:	d101      	bne.n	800992c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009928:	2302      	movs	r3, #2
 800992a:	e018      	b.n	800995e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	7c1b      	ldrb	r3, [r3, #16]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d10a      	bne.n	800994a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009934:	4b0d      	ldr	r3, [pc, #52]	@ (800996c <USBD_CDC_Init+0x1e8>)
 8009936:	7819      	ldrb	r1, [r3, #0]
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800993e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f002 fb7e 	bl	800c044 <USBD_LL_PrepareReceive>
 8009948:	e008      	b.n	800995c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800994a:	4b08      	ldr	r3, [pc, #32]	@ (800996c <USBD_CDC_Init+0x1e8>)
 800994c:	7819      	ldrb	r1, [r3, #0]
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009954:	2340      	movs	r3, #64	@ 0x40
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f002 fb74 	bl	800c044 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800995c:	2300      	movs	r3, #0
}
 800995e:	4618      	mov	r0, r3
 8009960:	3710      	adds	r7, #16
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	20000093 	.word	0x20000093
 800996c:	20000094 	.word	0x20000094
 8009970:	20000095 	.word	0x20000095

08009974 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b082      	sub	sp, #8
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	460b      	mov	r3, r1
 800997e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009980:	4b3a      	ldr	r3, [pc, #232]	@ (8009a6c <USBD_CDC_DeInit+0xf8>)
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	4619      	mov	r1, r3
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f002 fa93 	bl	800beb2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800998c:	4b37      	ldr	r3, [pc, #220]	@ (8009a6c <USBD_CDC_DeInit+0xf8>)
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	f003 020f 	and.w	r2, r3, #15
 8009994:	6879      	ldr	r1, [r7, #4]
 8009996:	4613      	mov	r3, r2
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	4413      	add	r3, r2
 800999c:	009b      	lsls	r3, r3, #2
 800999e:	440b      	add	r3, r1
 80099a0:	3324      	adds	r3, #36	@ 0x24
 80099a2:	2200      	movs	r2, #0
 80099a4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80099a6:	4b32      	ldr	r3, [pc, #200]	@ (8009a70 <USBD_CDC_DeInit+0xfc>)
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	4619      	mov	r1, r3
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f002 fa80 	bl	800beb2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80099b2:	4b2f      	ldr	r3, [pc, #188]	@ (8009a70 <USBD_CDC_DeInit+0xfc>)
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	f003 020f 	and.w	r2, r3, #15
 80099ba:	6879      	ldr	r1, [r7, #4]
 80099bc:	4613      	mov	r3, r2
 80099be:	009b      	lsls	r3, r3, #2
 80099c0:	4413      	add	r3, r2
 80099c2:	009b      	lsls	r3, r3, #2
 80099c4:	440b      	add	r3, r1
 80099c6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80099ca:	2200      	movs	r2, #0
 80099cc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80099ce:	4b29      	ldr	r3, [pc, #164]	@ (8009a74 <USBD_CDC_DeInit+0x100>)
 80099d0:	781b      	ldrb	r3, [r3, #0]
 80099d2:	4619      	mov	r1, r3
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f002 fa6c 	bl	800beb2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80099da:	4b26      	ldr	r3, [pc, #152]	@ (8009a74 <USBD_CDC_DeInit+0x100>)
 80099dc:	781b      	ldrb	r3, [r3, #0]
 80099de:	f003 020f 	and.w	r2, r3, #15
 80099e2:	6879      	ldr	r1, [r7, #4]
 80099e4:	4613      	mov	r3, r2
 80099e6:	009b      	lsls	r3, r3, #2
 80099e8:	4413      	add	r3, r2
 80099ea:	009b      	lsls	r3, r3, #2
 80099ec:	440b      	add	r3, r1
 80099ee:	3324      	adds	r3, #36	@ 0x24
 80099f0:	2200      	movs	r2, #0
 80099f2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80099f4:	4b1f      	ldr	r3, [pc, #124]	@ (8009a74 <USBD_CDC_DeInit+0x100>)
 80099f6:	781b      	ldrb	r3, [r3, #0]
 80099f8:	f003 020f 	and.w	r2, r3, #15
 80099fc:	6879      	ldr	r1, [r7, #4]
 80099fe:	4613      	mov	r3, r2
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	4413      	add	r3, r2
 8009a04:	009b      	lsls	r3, r3, #2
 8009a06:	440b      	add	r3, r1
 8009a08:	3326      	adds	r3, #38	@ 0x26
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	32b0      	adds	r2, #176	@ 0xb0
 8009a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d01f      	beq.n	8009a60 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a26:	687a      	ldr	r2, [r7, #4]
 8009a28:	33b0      	adds	r3, #176	@ 0xb0
 8009a2a:	009b      	lsls	r3, r3, #2
 8009a2c:	4413      	add	r3, r2
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	685b      	ldr	r3, [r3, #4]
 8009a32:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	32b0      	adds	r2, #176	@ 0xb0
 8009a3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a42:	4618      	mov	r0, r3
 8009a44:	f002 fb8e 	bl	800c164 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	32b0      	adds	r2, #176	@ 0xb0
 8009a52:	2100      	movs	r1, #0
 8009a54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009a60:	2300      	movs	r3, #0
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3708      	adds	r7, #8
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
 8009a6a:	bf00      	nop
 8009a6c:	20000093 	.word	0x20000093
 8009a70:	20000094 	.word	0x20000094
 8009a74:	20000095 	.word	0x20000095

08009a78 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b086      	sub	sp, #24
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	32b0      	adds	r2, #176	@ 0xb0
 8009a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a90:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009a92:	2300      	movs	r3, #0
 8009a94:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009a96:	2300      	movs	r3, #0
 8009a98:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d101      	bne.n	8009aa8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009aa4:	2303      	movs	r3, #3
 8009aa6:	e0bf      	b.n	8009c28 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	781b      	ldrb	r3, [r3, #0]
 8009aac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d050      	beq.n	8009b56 <USBD_CDC_Setup+0xde>
 8009ab4:	2b20      	cmp	r3, #32
 8009ab6:	f040 80af 	bne.w	8009c18 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	88db      	ldrh	r3, [r3, #6]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d03a      	beq.n	8009b38 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	b25b      	sxtb	r3, r3
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	da1b      	bge.n	8009b04 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009ad2:	687a      	ldr	r2, [r7, #4]
 8009ad4:	33b0      	adds	r3, #176	@ 0xb0
 8009ad6:	009b      	lsls	r3, r3, #2
 8009ad8:	4413      	add	r3, r2
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	689b      	ldr	r3, [r3, #8]
 8009ade:	683a      	ldr	r2, [r7, #0]
 8009ae0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009ae2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009ae4:	683a      	ldr	r2, [r7, #0]
 8009ae6:	88d2      	ldrh	r2, [r2, #6]
 8009ae8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	88db      	ldrh	r3, [r3, #6]
 8009aee:	2b07      	cmp	r3, #7
 8009af0:	bf28      	it	cs
 8009af2:	2307      	movcs	r3, #7
 8009af4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	89fa      	ldrh	r2, [r7, #14]
 8009afa:	4619      	mov	r1, r3
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f001 fd7d 	bl	800b5fc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009b02:	e090      	b.n	8009c26 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	785a      	ldrb	r2, [r3, #1]
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	88db      	ldrh	r3, [r3, #6]
 8009b12:	2b3f      	cmp	r3, #63	@ 0x3f
 8009b14:	d803      	bhi.n	8009b1e <USBD_CDC_Setup+0xa6>
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	88db      	ldrh	r3, [r3, #6]
 8009b1a:	b2da      	uxtb	r2, r3
 8009b1c:	e000      	b.n	8009b20 <USBD_CDC_Setup+0xa8>
 8009b1e:	2240      	movs	r2, #64	@ 0x40
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009b26:	6939      	ldr	r1, [r7, #16]
 8009b28:	693b      	ldr	r3, [r7, #16]
 8009b2a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009b2e:	461a      	mov	r2, r3
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f001 fd8f 	bl	800b654 <USBD_CtlPrepareRx>
      break;
 8009b36:	e076      	b.n	8009c26 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009b3e:	687a      	ldr	r2, [r7, #4]
 8009b40:	33b0      	adds	r3, #176	@ 0xb0
 8009b42:	009b      	lsls	r3, r3, #2
 8009b44:	4413      	add	r3, r2
 8009b46:	685b      	ldr	r3, [r3, #4]
 8009b48:	689b      	ldr	r3, [r3, #8]
 8009b4a:	683a      	ldr	r2, [r7, #0]
 8009b4c:	7850      	ldrb	r0, [r2, #1]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	6839      	ldr	r1, [r7, #0]
 8009b52:	4798      	blx	r3
      break;
 8009b54:	e067      	b.n	8009c26 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	785b      	ldrb	r3, [r3, #1]
 8009b5a:	2b0b      	cmp	r3, #11
 8009b5c:	d851      	bhi.n	8009c02 <USBD_CDC_Setup+0x18a>
 8009b5e:	a201      	add	r2, pc, #4	@ (adr r2, 8009b64 <USBD_CDC_Setup+0xec>)
 8009b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b64:	08009b95 	.word	0x08009b95
 8009b68:	08009c11 	.word	0x08009c11
 8009b6c:	08009c03 	.word	0x08009c03
 8009b70:	08009c03 	.word	0x08009c03
 8009b74:	08009c03 	.word	0x08009c03
 8009b78:	08009c03 	.word	0x08009c03
 8009b7c:	08009c03 	.word	0x08009c03
 8009b80:	08009c03 	.word	0x08009c03
 8009b84:	08009c03 	.word	0x08009c03
 8009b88:	08009c03 	.word	0x08009c03
 8009b8c:	08009bbf 	.word	0x08009bbf
 8009b90:	08009be9 	.word	0x08009be9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b9a:	b2db      	uxtb	r3, r3
 8009b9c:	2b03      	cmp	r3, #3
 8009b9e:	d107      	bne.n	8009bb0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009ba0:	f107 030a 	add.w	r3, r7, #10
 8009ba4:	2202      	movs	r2, #2
 8009ba6:	4619      	mov	r1, r3
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f001 fd27 	bl	800b5fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009bae:	e032      	b.n	8009c16 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009bb0:	6839      	ldr	r1, [r7, #0]
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f001 fca5 	bl	800b502 <USBD_CtlError>
            ret = USBD_FAIL;
 8009bb8:	2303      	movs	r3, #3
 8009bba:	75fb      	strb	r3, [r7, #23]
          break;
 8009bbc:	e02b      	b.n	8009c16 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bc4:	b2db      	uxtb	r3, r3
 8009bc6:	2b03      	cmp	r3, #3
 8009bc8:	d107      	bne.n	8009bda <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009bca:	f107 030d 	add.w	r3, r7, #13
 8009bce:	2201      	movs	r2, #1
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f001 fd12 	bl	800b5fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009bd8:	e01d      	b.n	8009c16 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009bda:	6839      	ldr	r1, [r7, #0]
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f001 fc90 	bl	800b502 <USBD_CtlError>
            ret = USBD_FAIL;
 8009be2:	2303      	movs	r3, #3
 8009be4:	75fb      	strb	r3, [r7, #23]
          break;
 8009be6:	e016      	b.n	8009c16 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bee:	b2db      	uxtb	r3, r3
 8009bf0:	2b03      	cmp	r3, #3
 8009bf2:	d00f      	beq.n	8009c14 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009bf4:	6839      	ldr	r1, [r7, #0]
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f001 fc83 	bl	800b502 <USBD_CtlError>
            ret = USBD_FAIL;
 8009bfc:	2303      	movs	r3, #3
 8009bfe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009c00:	e008      	b.n	8009c14 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009c02:	6839      	ldr	r1, [r7, #0]
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f001 fc7c 	bl	800b502 <USBD_CtlError>
          ret = USBD_FAIL;
 8009c0a:	2303      	movs	r3, #3
 8009c0c:	75fb      	strb	r3, [r7, #23]
          break;
 8009c0e:	e002      	b.n	8009c16 <USBD_CDC_Setup+0x19e>
          break;
 8009c10:	bf00      	nop
 8009c12:	e008      	b.n	8009c26 <USBD_CDC_Setup+0x1ae>
          break;
 8009c14:	bf00      	nop
      }
      break;
 8009c16:	e006      	b.n	8009c26 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009c18:	6839      	ldr	r1, [r7, #0]
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f001 fc71 	bl	800b502 <USBD_CtlError>
      ret = USBD_FAIL;
 8009c20:	2303      	movs	r3, #3
 8009c22:	75fb      	strb	r3, [r7, #23]
      break;
 8009c24:	bf00      	nop
  }

  return (uint8_t)ret;
 8009c26:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3718      	adds	r7, #24
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b084      	sub	sp, #16
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
 8009c38:	460b      	mov	r3, r1
 8009c3a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009c42:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	32b0      	adds	r2, #176	@ 0xb0
 8009c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d101      	bne.n	8009c5a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009c56:	2303      	movs	r3, #3
 8009c58:	e065      	b.n	8009d26 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	32b0      	adds	r2, #176	@ 0xb0
 8009c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c68:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009c6a:	78fb      	ldrb	r3, [r7, #3]
 8009c6c:	f003 020f 	and.w	r2, r3, #15
 8009c70:	6879      	ldr	r1, [r7, #4]
 8009c72:	4613      	mov	r3, r2
 8009c74:	009b      	lsls	r3, r3, #2
 8009c76:	4413      	add	r3, r2
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	440b      	add	r3, r1
 8009c7c:	3318      	adds	r3, #24
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d02f      	beq.n	8009ce4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009c84:	78fb      	ldrb	r3, [r7, #3]
 8009c86:	f003 020f 	and.w	r2, r3, #15
 8009c8a:	6879      	ldr	r1, [r7, #4]
 8009c8c:	4613      	mov	r3, r2
 8009c8e:	009b      	lsls	r3, r3, #2
 8009c90:	4413      	add	r3, r2
 8009c92:	009b      	lsls	r3, r3, #2
 8009c94:	440b      	add	r3, r1
 8009c96:	3318      	adds	r3, #24
 8009c98:	681a      	ldr	r2, [r3, #0]
 8009c9a:	78fb      	ldrb	r3, [r7, #3]
 8009c9c:	f003 010f 	and.w	r1, r3, #15
 8009ca0:	68f8      	ldr	r0, [r7, #12]
 8009ca2:	460b      	mov	r3, r1
 8009ca4:	00db      	lsls	r3, r3, #3
 8009ca6:	440b      	add	r3, r1
 8009ca8:	009b      	lsls	r3, r3, #2
 8009caa:	4403      	add	r3, r0
 8009cac:	331c      	adds	r3, #28
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	fbb2 f1f3 	udiv	r1, r2, r3
 8009cb4:	fb01 f303 	mul.w	r3, r1, r3
 8009cb8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d112      	bne.n	8009ce4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009cbe:	78fb      	ldrb	r3, [r7, #3]
 8009cc0:	f003 020f 	and.w	r2, r3, #15
 8009cc4:	6879      	ldr	r1, [r7, #4]
 8009cc6:	4613      	mov	r3, r2
 8009cc8:	009b      	lsls	r3, r3, #2
 8009cca:	4413      	add	r3, r2
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	440b      	add	r3, r1
 8009cd0:	3318      	adds	r3, #24
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009cd6:	78f9      	ldrb	r1, [r7, #3]
 8009cd8:	2300      	movs	r3, #0
 8009cda:	2200      	movs	r2, #0
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f002 f990 	bl	800c002 <USBD_LL_Transmit>
 8009ce2:	e01f      	b.n	8009d24 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009cf2:	687a      	ldr	r2, [r7, #4]
 8009cf4:	33b0      	adds	r3, #176	@ 0xb0
 8009cf6:	009b      	lsls	r3, r3, #2
 8009cf8:	4413      	add	r3, r2
 8009cfa:	685b      	ldr	r3, [r3, #4]
 8009cfc:	691b      	ldr	r3, [r3, #16]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d010      	beq.n	8009d24 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009d08:	687a      	ldr	r2, [r7, #4]
 8009d0a:	33b0      	adds	r3, #176	@ 0xb0
 8009d0c:	009b      	lsls	r3, r3, #2
 8009d0e:	4413      	add	r3, r2
 8009d10:	685b      	ldr	r3, [r3, #4]
 8009d12:	691b      	ldr	r3, [r3, #16]
 8009d14:	68ba      	ldr	r2, [r7, #8]
 8009d16:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009d1a:	68ba      	ldr	r2, [r7, #8]
 8009d1c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009d20:	78fa      	ldrb	r2, [r7, #3]
 8009d22:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009d24:	2300      	movs	r3, #0
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3710      	adds	r7, #16
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}

08009d2e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009d2e:	b580      	push	{r7, lr}
 8009d30:	b084      	sub	sp, #16
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	6078      	str	r0, [r7, #4]
 8009d36:	460b      	mov	r3, r1
 8009d38:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	32b0      	adds	r2, #176	@ 0xb0
 8009d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d48:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	32b0      	adds	r2, #176	@ 0xb0
 8009d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d101      	bne.n	8009d60 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009d5c:	2303      	movs	r3, #3
 8009d5e:	e01a      	b.n	8009d96 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009d60:	78fb      	ldrb	r3, [r7, #3]
 8009d62:	4619      	mov	r1, r3
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f002 f98e 	bl	800c086 <USBD_LL_GetRxDataSize>
 8009d6a:	4602      	mov	r2, r0
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009d78:	687a      	ldr	r2, [r7, #4]
 8009d7a:	33b0      	adds	r3, #176	@ 0xb0
 8009d7c:	009b      	lsls	r3, r3, #2
 8009d7e:	4413      	add	r3, r2
 8009d80:	685b      	ldr	r3, [r3, #4]
 8009d82:	68db      	ldr	r3, [r3, #12]
 8009d84:	68fa      	ldr	r2, [r7, #12]
 8009d86:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009d8a:	68fa      	ldr	r2, [r7, #12]
 8009d8c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009d90:	4611      	mov	r1, r2
 8009d92:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009d94:	2300      	movs	r3, #0
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3710      	adds	r7, #16
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}

08009d9e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009d9e:	b580      	push	{r7, lr}
 8009da0:	b084      	sub	sp, #16
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	32b0      	adds	r2, #176	@ 0xb0
 8009db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009db4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d101      	bne.n	8009dc0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009dbc:	2303      	movs	r3, #3
 8009dbe:	e024      	b.n	8009e0a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009dc6:	687a      	ldr	r2, [r7, #4]
 8009dc8:	33b0      	adds	r3, #176	@ 0xb0
 8009dca:	009b      	lsls	r3, r3, #2
 8009dcc:	4413      	add	r3, r2
 8009dce:	685b      	ldr	r3, [r3, #4]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d019      	beq.n	8009e08 <USBD_CDC_EP0_RxReady+0x6a>
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009dda:	2bff      	cmp	r3, #255	@ 0xff
 8009ddc:	d014      	beq.n	8009e08 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009de4:	687a      	ldr	r2, [r7, #4]
 8009de6:	33b0      	adds	r3, #176	@ 0xb0
 8009de8:	009b      	lsls	r3, r3, #2
 8009dea:	4413      	add	r3, r2
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	689b      	ldr	r3, [r3, #8]
 8009df0:	68fa      	ldr	r2, [r7, #12]
 8009df2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8009df6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009df8:	68fa      	ldr	r2, [r7, #12]
 8009dfa:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009dfe:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	22ff      	movs	r2, #255	@ 0xff
 8009e04:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009e08:	2300      	movs	r3, #0
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3710      	adds	r7, #16
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
	...

08009e14 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b086      	sub	sp, #24
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009e1c:	2182      	movs	r1, #130	@ 0x82
 8009e1e:	4818      	ldr	r0, [pc, #96]	@ (8009e80 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009e20:	f000 fd0f 	bl	800a842 <USBD_GetEpDesc>
 8009e24:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009e26:	2101      	movs	r1, #1
 8009e28:	4815      	ldr	r0, [pc, #84]	@ (8009e80 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009e2a:	f000 fd0a 	bl	800a842 <USBD_GetEpDesc>
 8009e2e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009e30:	2181      	movs	r1, #129	@ 0x81
 8009e32:	4813      	ldr	r0, [pc, #76]	@ (8009e80 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009e34:	f000 fd05 	bl	800a842 <USBD_GetEpDesc>
 8009e38:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d002      	beq.n	8009e46 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	2210      	movs	r2, #16
 8009e44:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d006      	beq.n	8009e5a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009e54:	711a      	strb	r2, [r3, #4]
 8009e56:	2200      	movs	r2, #0
 8009e58:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d006      	beq.n	8009e6e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	2200      	movs	r2, #0
 8009e64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009e68:	711a      	strb	r2, [r3, #4]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2243      	movs	r2, #67	@ 0x43
 8009e72:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009e74:	4b02      	ldr	r3, [pc, #8]	@ (8009e80 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3718      	adds	r7, #24
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}
 8009e7e:	bf00      	nop
 8009e80:	20000050 	.word	0x20000050

08009e84 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b086      	sub	sp, #24
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009e8c:	2182      	movs	r1, #130	@ 0x82
 8009e8e:	4818      	ldr	r0, [pc, #96]	@ (8009ef0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009e90:	f000 fcd7 	bl	800a842 <USBD_GetEpDesc>
 8009e94:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009e96:	2101      	movs	r1, #1
 8009e98:	4815      	ldr	r0, [pc, #84]	@ (8009ef0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009e9a:	f000 fcd2 	bl	800a842 <USBD_GetEpDesc>
 8009e9e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009ea0:	2181      	movs	r1, #129	@ 0x81
 8009ea2:	4813      	ldr	r0, [pc, #76]	@ (8009ef0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009ea4:	f000 fccd 	bl	800a842 <USBD_GetEpDesc>
 8009ea8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d002      	beq.n	8009eb6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	2210      	movs	r2, #16
 8009eb4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d006      	beq.n	8009eca <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	711a      	strb	r2, [r3, #4]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	f042 0202 	orr.w	r2, r2, #2
 8009ec8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d006      	beq.n	8009ede <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	711a      	strb	r2, [r3, #4]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	f042 0202 	orr.w	r2, r2, #2
 8009edc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2243      	movs	r2, #67	@ 0x43
 8009ee2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009ee4:	4b02      	ldr	r3, [pc, #8]	@ (8009ef0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3718      	adds	r7, #24
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
 8009eee:	bf00      	nop
 8009ef0:	20000050 	.word	0x20000050

08009ef4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b086      	sub	sp, #24
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009efc:	2182      	movs	r1, #130	@ 0x82
 8009efe:	4818      	ldr	r0, [pc, #96]	@ (8009f60 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009f00:	f000 fc9f 	bl	800a842 <USBD_GetEpDesc>
 8009f04:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009f06:	2101      	movs	r1, #1
 8009f08:	4815      	ldr	r0, [pc, #84]	@ (8009f60 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009f0a:	f000 fc9a 	bl	800a842 <USBD_GetEpDesc>
 8009f0e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009f10:	2181      	movs	r1, #129	@ 0x81
 8009f12:	4813      	ldr	r0, [pc, #76]	@ (8009f60 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009f14:	f000 fc95 	bl	800a842 <USBD_GetEpDesc>
 8009f18:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d002      	beq.n	8009f26 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	2210      	movs	r2, #16
 8009f24:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d006      	beq.n	8009f3a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009f34:	711a      	strb	r2, [r3, #4]
 8009f36:	2200      	movs	r2, #0
 8009f38:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d006      	beq.n	8009f4e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	2200      	movs	r2, #0
 8009f44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009f48:	711a      	strb	r2, [r3, #4]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2243      	movs	r2, #67	@ 0x43
 8009f52:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009f54:	4b02      	ldr	r3, [pc, #8]	@ (8009f60 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3718      	adds	r7, #24
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}
 8009f5e:	bf00      	nop
 8009f60:	20000050 	.word	0x20000050

08009f64 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b083      	sub	sp, #12
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	220a      	movs	r2, #10
 8009f70:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009f72:	4b03      	ldr	r3, [pc, #12]	@ (8009f80 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	370c      	adds	r7, #12
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr
 8009f80:	2000000c 	.word	0x2000000c

08009f84 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b083      	sub	sp, #12
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d101      	bne.n	8009f98 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009f94:	2303      	movs	r3, #3
 8009f96:	e009      	b.n	8009fac <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009f9e:	687a      	ldr	r2, [r7, #4]
 8009fa0:	33b0      	adds	r3, #176	@ 0xb0
 8009fa2:	009b      	lsls	r3, r3, #2
 8009fa4:	4413      	add	r3, r2
 8009fa6:	683a      	ldr	r2, [r7, #0]
 8009fa8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009faa:	2300      	movs	r3, #0
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	370c      	adds	r7, #12
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb6:	4770      	bx	lr

08009fb8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b087      	sub	sp, #28
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	60f8      	str	r0, [r7, #12]
 8009fc0:	60b9      	str	r1, [r7, #8]
 8009fc2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	32b0      	adds	r2, #176	@ 0xb0
 8009fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fd2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d101      	bne.n	8009fde <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009fda:	2303      	movs	r3, #3
 8009fdc:	e008      	b.n	8009ff0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	68ba      	ldr	r2, [r7, #8]
 8009fe2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	687a      	ldr	r2, [r7, #4]
 8009fea:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009fee:	2300      	movs	r3, #0
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	371c      	adds	r7, #28
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr

08009ffc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b085      	sub	sp, #20
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	32b0      	adds	r2, #176	@ 0xb0
 800a010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a014:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d101      	bne.n	800a020 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a01c:	2303      	movs	r3, #3
 800a01e:	e004      	b.n	800a02a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	683a      	ldr	r2, [r7, #0]
 800a024:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a028:	2300      	movs	r3, #0
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3714      	adds	r7, #20
 800a02e:	46bd      	mov	sp, r7
 800a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a034:	4770      	bx	lr
	...

0800a038 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b084      	sub	sp, #16
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	32b0      	adds	r2, #176	@ 0xb0
 800a04a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a04e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	32b0      	adds	r2, #176	@ 0xb0
 800a05a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d101      	bne.n	800a066 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a062:	2303      	movs	r3, #3
 800a064:	e018      	b.n	800a098 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	7c1b      	ldrb	r3, [r3, #16]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d10a      	bne.n	800a084 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a06e:	4b0c      	ldr	r3, [pc, #48]	@ (800a0a0 <USBD_CDC_ReceivePacket+0x68>)
 800a070:	7819      	ldrb	r1, [r3, #0]
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a078:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f001 ffe1 	bl	800c044 <USBD_LL_PrepareReceive>
 800a082:	e008      	b.n	800a096 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a084:	4b06      	ldr	r3, [pc, #24]	@ (800a0a0 <USBD_CDC_ReceivePacket+0x68>)
 800a086:	7819      	ldrb	r1, [r3, #0]
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a08e:	2340      	movs	r3, #64	@ 0x40
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f001 ffd7 	bl	800c044 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a096:	2300      	movs	r3, #0
}
 800a098:	4618      	mov	r0, r3
 800a09a:	3710      	adds	r7, #16
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}
 800a0a0:	20000094 	.word	0x20000094

0800a0a4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b086      	sub	sp, #24
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	60f8      	str	r0, [r7, #12]
 800a0ac:	60b9      	str	r1, [r7, #8]
 800a0ae:	4613      	mov	r3, r2
 800a0b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d101      	bne.n	800a0bc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a0b8:	2303      	movs	r3, #3
 800a0ba:	e01f      	b.n	800a0fc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d003      	beq.n	800a0e2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	68ba      	ldr	r2, [r7, #8]
 800a0de:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	2201      	movs	r2, #1
 800a0e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	79fa      	ldrb	r2, [r7, #7]
 800a0ee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a0f0:	68f8      	ldr	r0, [r7, #12]
 800a0f2:	f001 fe51 	bl	800bd98 <USBD_LL_Init>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a0fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3718      	adds	r7, #24
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b084      	sub	sp, #16
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a10e:	2300      	movs	r3, #0
 800a110:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d101      	bne.n	800a11c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a118:	2303      	movs	r3, #3
 800a11a:	e025      	b.n	800a168 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	683a      	ldr	r2, [r7, #0]
 800a120:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	32ae      	adds	r2, #174	@ 0xae
 800a12e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a134:	2b00      	cmp	r3, #0
 800a136:	d00f      	beq.n	800a158 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	32ae      	adds	r2, #174	@ 0xae
 800a142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a148:	f107 020e 	add.w	r2, r7, #14
 800a14c:	4610      	mov	r0, r2
 800a14e:	4798      	blx	r3
 800a150:	4602      	mov	r2, r0
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a15e:	1c5a      	adds	r2, r3, #1
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800a166:	2300      	movs	r3, #0
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3710      	adds	r7, #16
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b082      	sub	sp, #8
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f001 fe59 	bl	800be30 <USBD_LL_Start>
 800a17e:	4603      	mov	r3, r0
}
 800a180:	4618      	mov	r0, r3
 800a182:	3708      	adds	r7, #8
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}

0800a188 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a188:	b480      	push	{r7}
 800a18a:	b083      	sub	sp, #12
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a190:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a192:	4618      	mov	r0, r3
 800a194:	370c      	adds	r7, #12
 800a196:	46bd      	mov	sp, r7
 800a198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19c:	4770      	bx	lr

0800a19e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a19e:	b580      	push	{r7, lr}
 800a1a0:	b084      	sub	sp, #16
 800a1a2:	af00      	add	r7, sp, #0
 800a1a4:	6078      	str	r0, [r7, #4]
 800a1a6:	460b      	mov	r3, r1
 800a1a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d009      	beq.n	800a1cc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	78fa      	ldrb	r2, [r7, #3]
 800a1c2:	4611      	mov	r1, r2
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	4798      	blx	r3
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a1cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3710      	adds	r7, #16
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}

0800a1d6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a1d6:	b580      	push	{r7, lr}
 800a1d8:	b084      	sub	sp, #16
 800a1da:	af00      	add	r7, sp, #0
 800a1dc:	6078      	str	r0, [r7, #4]
 800a1de:	460b      	mov	r3, r1
 800a1e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	78fa      	ldrb	r2, [r7, #3]
 800a1f0:	4611      	mov	r1, r2
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	4798      	blx	r3
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d001      	beq.n	800a200 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a1fc:	2303      	movs	r3, #3
 800a1fe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a200:	7bfb      	ldrb	r3, [r7, #15]
}
 800a202:	4618      	mov	r0, r3
 800a204:	3710      	adds	r7, #16
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}

0800a20a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a20a:	b580      	push	{r7, lr}
 800a20c:	b084      	sub	sp, #16
 800a20e:	af00      	add	r7, sp, #0
 800a210:	6078      	str	r0, [r7, #4]
 800a212:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a21a:	6839      	ldr	r1, [r7, #0]
 800a21c:	4618      	mov	r0, r3
 800a21e:	f001 f936 	bl	800b48e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2201      	movs	r2, #1
 800a226:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a230:	461a      	mov	r2, r3
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a23e:	f003 031f 	and.w	r3, r3, #31
 800a242:	2b02      	cmp	r3, #2
 800a244:	d01a      	beq.n	800a27c <USBD_LL_SetupStage+0x72>
 800a246:	2b02      	cmp	r3, #2
 800a248:	d822      	bhi.n	800a290 <USBD_LL_SetupStage+0x86>
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d002      	beq.n	800a254 <USBD_LL_SetupStage+0x4a>
 800a24e:	2b01      	cmp	r3, #1
 800a250:	d00a      	beq.n	800a268 <USBD_LL_SetupStage+0x5e>
 800a252:	e01d      	b.n	800a290 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a25a:	4619      	mov	r1, r3
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f000 fb63 	bl	800a928 <USBD_StdDevReq>
 800a262:	4603      	mov	r3, r0
 800a264:	73fb      	strb	r3, [r7, #15]
      break;
 800a266:	e020      	b.n	800a2aa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a26e:	4619      	mov	r1, r3
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f000 fbcb 	bl	800aa0c <USBD_StdItfReq>
 800a276:	4603      	mov	r3, r0
 800a278:	73fb      	strb	r3, [r7, #15]
      break;
 800a27a:	e016      	b.n	800a2aa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a282:	4619      	mov	r1, r3
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f000 fc2d 	bl	800aae4 <USBD_StdEPReq>
 800a28a:	4603      	mov	r3, r0
 800a28c:	73fb      	strb	r3, [r7, #15]
      break;
 800a28e:	e00c      	b.n	800a2aa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a296:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a29a:	b2db      	uxtb	r3, r3
 800a29c:	4619      	mov	r1, r3
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f001 fe26 	bl	800bef0 <USBD_LL_StallEP>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	73fb      	strb	r3, [r7, #15]
      break;
 800a2a8:	bf00      	nop
  }

  return ret;
 800a2aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3710      	adds	r7, #16
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}

0800a2b4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b086      	sub	sp, #24
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	60f8      	str	r0, [r7, #12]
 800a2bc:	460b      	mov	r3, r1
 800a2be:	607a      	str	r2, [r7, #4]
 800a2c0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a2c6:	7afb      	ldrb	r3, [r7, #11]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d16e      	bne.n	800a3aa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a2d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a2da:	2b03      	cmp	r3, #3
 800a2dc:	f040 8098 	bne.w	800a410 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	689a      	ldr	r2, [r3, #8]
 800a2e4:	693b      	ldr	r3, [r7, #16]
 800a2e6:	68db      	ldr	r3, [r3, #12]
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d913      	bls.n	800a314 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a2ec:	693b      	ldr	r3, [r7, #16]
 800a2ee:	689a      	ldr	r2, [r3, #8]
 800a2f0:	693b      	ldr	r3, [r7, #16]
 800a2f2:	68db      	ldr	r3, [r3, #12]
 800a2f4:	1ad2      	subs	r2, r2, r3
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	68da      	ldr	r2, [r3, #12]
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	689b      	ldr	r3, [r3, #8]
 800a302:	4293      	cmp	r3, r2
 800a304:	bf28      	it	cs
 800a306:	4613      	movcs	r3, r2
 800a308:	461a      	mov	r2, r3
 800a30a:	6879      	ldr	r1, [r7, #4]
 800a30c:	68f8      	ldr	r0, [r7, #12]
 800a30e:	f001 f9be 	bl	800b68e <USBD_CtlContinueRx>
 800a312:	e07d      	b.n	800a410 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a31a:	f003 031f 	and.w	r3, r3, #31
 800a31e:	2b02      	cmp	r3, #2
 800a320:	d014      	beq.n	800a34c <USBD_LL_DataOutStage+0x98>
 800a322:	2b02      	cmp	r3, #2
 800a324:	d81d      	bhi.n	800a362 <USBD_LL_DataOutStage+0xae>
 800a326:	2b00      	cmp	r3, #0
 800a328:	d002      	beq.n	800a330 <USBD_LL_DataOutStage+0x7c>
 800a32a:	2b01      	cmp	r3, #1
 800a32c:	d003      	beq.n	800a336 <USBD_LL_DataOutStage+0x82>
 800a32e:	e018      	b.n	800a362 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a330:	2300      	movs	r3, #0
 800a332:	75bb      	strb	r3, [r7, #22]
            break;
 800a334:	e018      	b.n	800a368 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a33c:	b2db      	uxtb	r3, r3
 800a33e:	4619      	mov	r1, r3
 800a340:	68f8      	ldr	r0, [r7, #12]
 800a342:	f000 fa64 	bl	800a80e <USBD_CoreFindIF>
 800a346:	4603      	mov	r3, r0
 800a348:	75bb      	strb	r3, [r7, #22]
            break;
 800a34a:	e00d      	b.n	800a368 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a352:	b2db      	uxtb	r3, r3
 800a354:	4619      	mov	r1, r3
 800a356:	68f8      	ldr	r0, [r7, #12]
 800a358:	f000 fa66 	bl	800a828 <USBD_CoreFindEP>
 800a35c:	4603      	mov	r3, r0
 800a35e:	75bb      	strb	r3, [r7, #22]
            break;
 800a360:	e002      	b.n	800a368 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a362:	2300      	movs	r3, #0
 800a364:	75bb      	strb	r3, [r7, #22]
            break;
 800a366:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a368:	7dbb      	ldrb	r3, [r7, #22]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d119      	bne.n	800a3a2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a374:	b2db      	uxtb	r3, r3
 800a376:	2b03      	cmp	r3, #3
 800a378:	d113      	bne.n	800a3a2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a37a:	7dba      	ldrb	r2, [r7, #22]
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	32ae      	adds	r2, #174	@ 0xae
 800a380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a384:	691b      	ldr	r3, [r3, #16]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d00b      	beq.n	800a3a2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a38a:	7dba      	ldrb	r2, [r7, #22]
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a392:	7dba      	ldrb	r2, [r7, #22]
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	32ae      	adds	r2, #174	@ 0xae
 800a398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a39c:	691b      	ldr	r3, [r3, #16]
 800a39e:	68f8      	ldr	r0, [r7, #12]
 800a3a0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a3a2:	68f8      	ldr	r0, [r7, #12]
 800a3a4:	f001 f984 	bl	800b6b0 <USBD_CtlSendStatus>
 800a3a8:	e032      	b.n	800a410 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a3aa:	7afb      	ldrb	r3, [r7, #11]
 800a3ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a3b0:	b2db      	uxtb	r3, r3
 800a3b2:	4619      	mov	r1, r3
 800a3b4:	68f8      	ldr	r0, [r7, #12]
 800a3b6:	f000 fa37 	bl	800a828 <USBD_CoreFindEP>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a3be:	7dbb      	ldrb	r3, [r7, #22]
 800a3c0:	2bff      	cmp	r3, #255	@ 0xff
 800a3c2:	d025      	beq.n	800a410 <USBD_LL_DataOutStage+0x15c>
 800a3c4:	7dbb      	ldrb	r3, [r7, #22]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d122      	bne.n	800a410 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3d0:	b2db      	uxtb	r3, r3
 800a3d2:	2b03      	cmp	r3, #3
 800a3d4:	d117      	bne.n	800a406 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a3d6:	7dba      	ldrb	r2, [r7, #22]
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	32ae      	adds	r2, #174	@ 0xae
 800a3dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3e0:	699b      	ldr	r3, [r3, #24]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d00f      	beq.n	800a406 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a3e6:	7dba      	ldrb	r2, [r7, #22]
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a3ee:	7dba      	ldrb	r2, [r7, #22]
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	32ae      	adds	r2, #174	@ 0xae
 800a3f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3f8:	699b      	ldr	r3, [r3, #24]
 800a3fa:	7afa      	ldrb	r2, [r7, #11]
 800a3fc:	4611      	mov	r1, r2
 800a3fe:	68f8      	ldr	r0, [r7, #12]
 800a400:	4798      	blx	r3
 800a402:	4603      	mov	r3, r0
 800a404:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a406:	7dfb      	ldrb	r3, [r7, #23]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d001      	beq.n	800a410 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a40c:	7dfb      	ldrb	r3, [r7, #23]
 800a40e:	e000      	b.n	800a412 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a410:	2300      	movs	r3, #0
}
 800a412:	4618      	mov	r0, r3
 800a414:	3718      	adds	r7, #24
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}

0800a41a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a41a:	b580      	push	{r7, lr}
 800a41c:	b086      	sub	sp, #24
 800a41e:	af00      	add	r7, sp, #0
 800a420:	60f8      	str	r0, [r7, #12]
 800a422:	460b      	mov	r3, r1
 800a424:	607a      	str	r2, [r7, #4]
 800a426:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a428:	7afb      	ldrb	r3, [r7, #11]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d16f      	bne.n	800a50e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	3314      	adds	r3, #20
 800a432:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a43a:	2b02      	cmp	r3, #2
 800a43c:	d15a      	bne.n	800a4f4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	689a      	ldr	r2, [r3, #8]
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	68db      	ldr	r3, [r3, #12]
 800a446:	429a      	cmp	r2, r3
 800a448:	d914      	bls.n	800a474 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	689a      	ldr	r2, [r3, #8]
 800a44e:	693b      	ldr	r3, [r7, #16]
 800a450:	68db      	ldr	r3, [r3, #12]
 800a452:	1ad2      	subs	r2, r2, r3
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	689b      	ldr	r3, [r3, #8]
 800a45c:	461a      	mov	r2, r3
 800a45e:	6879      	ldr	r1, [r7, #4]
 800a460:	68f8      	ldr	r0, [r7, #12]
 800a462:	f001 f8e6 	bl	800b632 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a466:	2300      	movs	r3, #0
 800a468:	2200      	movs	r2, #0
 800a46a:	2100      	movs	r1, #0
 800a46c:	68f8      	ldr	r0, [r7, #12]
 800a46e:	f001 fde9 	bl	800c044 <USBD_LL_PrepareReceive>
 800a472:	e03f      	b.n	800a4f4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	68da      	ldr	r2, [r3, #12]
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	689b      	ldr	r3, [r3, #8]
 800a47c:	429a      	cmp	r2, r3
 800a47e:	d11c      	bne.n	800a4ba <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	685a      	ldr	r2, [r3, #4]
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a488:	429a      	cmp	r2, r3
 800a48a:	d316      	bcc.n	800a4ba <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	685a      	ldr	r2, [r3, #4]
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a496:	429a      	cmp	r2, r3
 800a498:	d20f      	bcs.n	800a4ba <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a49a:	2200      	movs	r2, #0
 800a49c:	2100      	movs	r1, #0
 800a49e:	68f8      	ldr	r0, [r7, #12]
 800a4a0:	f001 f8c7 	bl	800b632 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	2100      	movs	r1, #0
 800a4b2:	68f8      	ldr	r0, [r7, #12]
 800a4b4:	f001 fdc6 	bl	800c044 <USBD_LL_PrepareReceive>
 800a4b8:	e01c      	b.n	800a4f4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4c0:	b2db      	uxtb	r3, r3
 800a4c2:	2b03      	cmp	r3, #3
 800a4c4:	d10f      	bne.n	800a4e6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4cc:	68db      	ldr	r3, [r3, #12]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d009      	beq.n	800a4e6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4e0:	68db      	ldr	r3, [r3, #12]
 800a4e2:	68f8      	ldr	r0, [r7, #12]
 800a4e4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a4e6:	2180      	movs	r1, #128	@ 0x80
 800a4e8:	68f8      	ldr	r0, [r7, #12]
 800a4ea:	f001 fd01 	bl	800bef0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a4ee:	68f8      	ldr	r0, [r7, #12]
 800a4f0:	f001 f8f1 	bl	800b6d6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d03a      	beq.n	800a574 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a4fe:	68f8      	ldr	r0, [r7, #12]
 800a500:	f7ff fe42 	bl	800a188 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2200      	movs	r2, #0
 800a508:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a50c:	e032      	b.n	800a574 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a50e:	7afb      	ldrb	r3, [r7, #11]
 800a510:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a514:	b2db      	uxtb	r3, r3
 800a516:	4619      	mov	r1, r3
 800a518:	68f8      	ldr	r0, [r7, #12]
 800a51a:	f000 f985 	bl	800a828 <USBD_CoreFindEP>
 800a51e:	4603      	mov	r3, r0
 800a520:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a522:	7dfb      	ldrb	r3, [r7, #23]
 800a524:	2bff      	cmp	r3, #255	@ 0xff
 800a526:	d025      	beq.n	800a574 <USBD_LL_DataInStage+0x15a>
 800a528:	7dfb      	ldrb	r3, [r7, #23]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d122      	bne.n	800a574 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a534:	b2db      	uxtb	r3, r3
 800a536:	2b03      	cmp	r3, #3
 800a538:	d11c      	bne.n	800a574 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a53a:	7dfa      	ldrb	r2, [r7, #23]
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	32ae      	adds	r2, #174	@ 0xae
 800a540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a544:	695b      	ldr	r3, [r3, #20]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d014      	beq.n	800a574 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a54a:	7dfa      	ldrb	r2, [r7, #23]
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a552:	7dfa      	ldrb	r2, [r7, #23]
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	32ae      	adds	r2, #174	@ 0xae
 800a558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a55c:	695b      	ldr	r3, [r3, #20]
 800a55e:	7afa      	ldrb	r2, [r7, #11]
 800a560:	4611      	mov	r1, r2
 800a562:	68f8      	ldr	r0, [r7, #12]
 800a564:	4798      	blx	r3
 800a566:	4603      	mov	r3, r0
 800a568:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a56a:	7dbb      	ldrb	r3, [r7, #22]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d001      	beq.n	800a574 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a570:	7dbb      	ldrb	r3, [r7, #22]
 800a572:	e000      	b.n	800a576 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a574:	2300      	movs	r3, #0
}
 800a576:	4618      	mov	r0, r3
 800a578:	3718      	adds	r7, #24
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}

0800a57e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a57e:	b580      	push	{r7, lr}
 800a580:	b084      	sub	sp, #16
 800a582:	af00      	add	r7, sp, #0
 800a584:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a586:	2300      	movs	r3, #0
 800a588:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2201      	movs	r2, #1
 800a58e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2200      	movs	r2, #0
 800a596:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2200      	movs	r2, #0
 800a59e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d014      	beq.n	800a5e4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d00e      	beq.n	800a5e4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5cc:	685b      	ldr	r3, [r3, #4]
 800a5ce:	687a      	ldr	r2, [r7, #4]
 800a5d0:	6852      	ldr	r2, [r2, #4]
 800a5d2:	b2d2      	uxtb	r2, r2
 800a5d4:	4611      	mov	r1, r2
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	4798      	blx	r3
 800a5da:	4603      	mov	r3, r0
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d001      	beq.n	800a5e4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a5e0:	2303      	movs	r3, #3
 800a5e2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a5e4:	2340      	movs	r3, #64	@ 0x40
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	2100      	movs	r1, #0
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f001 fc3b 	bl	800be66 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2240      	movs	r2, #64	@ 0x40
 800a5fc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a600:	2340      	movs	r3, #64	@ 0x40
 800a602:	2200      	movs	r2, #0
 800a604:	2180      	movs	r1, #128	@ 0x80
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f001 fc2d 	bl	800be66 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2201      	movs	r2, #1
 800a610:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2240      	movs	r2, #64	@ 0x40
 800a616:	621a      	str	r2, [r3, #32]

  return ret;
 800a618:	7bfb      	ldrb	r3, [r7, #15]
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3710      	adds	r7, #16
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}

0800a622 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a622:	b480      	push	{r7}
 800a624:	b083      	sub	sp, #12
 800a626:	af00      	add	r7, sp, #0
 800a628:	6078      	str	r0, [r7, #4]
 800a62a:	460b      	mov	r3, r1
 800a62c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	78fa      	ldrb	r2, [r7, #3]
 800a632:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a634:	2300      	movs	r3, #0
}
 800a636:	4618      	mov	r0, r3
 800a638:	370c      	adds	r7, #12
 800a63a:	46bd      	mov	sp, r7
 800a63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a640:	4770      	bx	lr

0800a642 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a642:	b480      	push	{r7}
 800a644:	b083      	sub	sp, #12
 800a646:	af00      	add	r7, sp, #0
 800a648:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a650:	b2db      	uxtb	r3, r3
 800a652:	2b04      	cmp	r3, #4
 800a654:	d006      	beq.n	800a664 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a65c:	b2da      	uxtb	r2, r3
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2204      	movs	r2, #4
 800a668:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a66c:	2300      	movs	r3, #0
}
 800a66e:	4618      	mov	r0, r3
 800a670:	370c      	adds	r7, #12
 800a672:	46bd      	mov	sp, r7
 800a674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a678:	4770      	bx	lr

0800a67a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a67a:	b480      	push	{r7}
 800a67c:	b083      	sub	sp, #12
 800a67e:	af00      	add	r7, sp, #0
 800a680:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a688:	b2db      	uxtb	r3, r3
 800a68a:	2b04      	cmp	r3, #4
 800a68c:	d106      	bne.n	800a69c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a694:	b2da      	uxtb	r2, r3
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a69c:	2300      	movs	r3, #0
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	370c      	adds	r7, #12
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a8:	4770      	bx	lr

0800a6aa <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a6aa:	b580      	push	{r7, lr}
 800a6ac:	b082      	sub	sp, #8
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6b8:	b2db      	uxtb	r3, r3
 800a6ba:	2b03      	cmp	r3, #3
 800a6bc:	d110      	bne.n	800a6e0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d00b      	beq.n	800a6e0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6ce:	69db      	ldr	r3, [r3, #28]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d005      	beq.n	800a6e0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6da:	69db      	ldr	r3, [r3, #28]
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a6e0:	2300      	movs	r3, #0
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3708      	adds	r7, #8
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}

0800a6ea <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a6ea:	b580      	push	{r7, lr}
 800a6ec:	b082      	sub	sp, #8
 800a6ee:	af00      	add	r7, sp, #0
 800a6f0:	6078      	str	r0, [r7, #4]
 800a6f2:	460b      	mov	r3, r1
 800a6f4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	32ae      	adds	r2, #174	@ 0xae
 800a700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d101      	bne.n	800a70c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a708:	2303      	movs	r3, #3
 800a70a:	e01c      	b.n	800a746 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a712:	b2db      	uxtb	r3, r3
 800a714:	2b03      	cmp	r3, #3
 800a716:	d115      	bne.n	800a744 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	32ae      	adds	r2, #174	@ 0xae
 800a722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a726:	6a1b      	ldr	r3, [r3, #32]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d00b      	beq.n	800a744 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	32ae      	adds	r2, #174	@ 0xae
 800a736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a73a:	6a1b      	ldr	r3, [r3, #32]
 800a73c:	78fa      	ldrb	r2, [r7, #3]
 800a73e:	4611      	mov	r1, r2
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a744:	2300      	movs	r3, #0
}
 800a746:	4618      	mov	r0, r3
 800a748:	3708      	adds	r7, #8
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}

0800a74e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a74e:	b580      	push	{r7, lr}
 800a750:	b082      	sub	sp, #8
 800a752:	af00      	add	r7, sp, #0
 800a754:	6078      	str	r0, [r7, #4]
 800a756:	460b      	mov	r3, r1
 800a758:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	32ae      	adds	r2, #174	@ 0xae
 800a764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d101      	bne.n	800a770 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a76c:	2303      	movs	r3, #3
 800a76e:	e01c      	b.n	800a7aa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a776:	b2db      	uxtb	r3, r3
 800a778:	2b03      	cmp	r3, #3
 800a77a:	d115      	bne.n	800a7a8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	32ae      	adds	r2, #174	@ 0xae
 800a786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a78a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d00b      	beq.n	800a7a8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	32ae      	adds	r2, #174	@ 0xae
 800a79a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a79e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7a0:	78fa      	ldrb	r2, [r7, #3]
 800a7a2:	4611      	mov	r1, r2
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a7a8:	2300      	movs	r3, #0
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3708      	adds	r7, #8
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}

0800a7b2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a7b2:	b480      	push	{r7}
 800a7b4:	b083      	sub	sp, #12
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a7ba:	2300      	movs	r3, #0
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	370c      	adds	r7, #12
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c6:	4770      	bx	lr

0800a7c8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b084      	sub	sp, #16
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d00e      	beq.n	800a804 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	687a      	ldr	r2, [r7, #4]
 800a7f0:	6852      	ldr	r2, [r2, #4]
 800a7f2:	b2d2      	uxtb	r2, r2
 800a7f4:	4611      	mov	r1, r2
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	4798      	blx	r3
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d001      	beq.n	800a804 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a800:	2303      	movs	r3, #3
 800a802:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a804:	7bfb      	ldrb	r3, [r7, #15]
}
 800a806:	4618      	mov	r0, r3
 800a808:	3710      	adds	r7, #16
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}

0800a80e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a80e:	b480      	push	{r7}
 800a810:	b083      	sub	sp, #12
 800a812:	af00      	add	r7, sp, #0
 800a814:	6078      	str	r0, [r7, #4]
 800a816:	460b      	mov	r3, r1
 800a818:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a81a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	370c      	adds	r7, #12
 800a820:	46bd      	mov	sp, r7
 800a822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a826:	4770      	bx	lr

0800a828 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a828:	b480      	push	{r7}
 800a82a:	b083      	sub	sp, #12
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
 800a830:	460b      	mov	r3, r1
 800a832:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a834:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a836:	4618      	mov	r0, r3
 800a838:	370c      	adds	r7, #12
 800a83a:	46bd      	mov	sp, r7
 800a83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a840:	4770      	bx	lr

0800a842 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a842:	b580      	push	{r7, lr}
 800a844:	b086      	sub	sp, #24
 800a846:	af00      	add	r7, sp, #0
 800a848:	6078      	str	r0, [r7, #4]
 800a84a:	460b      	mov	r3, r1
 800a84c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a856:	2300      	movs	r3, #0
 800a858:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	885b      	ldrh	r3, [r3, #2]
 800a85e:	b29b      	uxth	r3, r3
 800a860:	68fa      	ldr	r2, [r7, #12]
 800a862:	7812      	ldrb	r2, [r2, #0]
 800a864:	4293      	cmp	r3, r2
 800a866:	d91f      	bls.n	800a8a8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	781b      	ldrb	r3, [r3, #0]
 800a86c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a86e:	e013      	b.n	800a898 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a870:	f107 030a 	add.w	r3, r7, #10
 800a874:	4619      	mov	r1, r3
 800a876:	6978      	ldr	r0, [r7, #20]
 800a878:	f000 f81b 	bl	800a8b2 <USBD_GetNextDesc>
 800a87c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	785b      	ldrb	r3, [r3, #1]
 800a882:	2b05      	cmp	r3, #5
 800a884:	d108      	bne.n	800a898 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a88a:	693b      	ldr	r3, [r7, #16]
 800a88c:	789b      	ldrb	r3, [r3, #2]
 800a88e:	78fa      	ldrb	r2, [r7, #3]
 800a890:	429a      	cmp	r2, r3
 800a892:	d008      	beq.n	800a8a6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a894:	2300      	movs	r3, #0
 800a896:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	885b      	ldrh	r3, [r3, #2]
 800a89c:	b29a      	uxth	r2, r3
 800a89e:	897b      	ldrh	r3, [r7, #10]
 800a8a0:	429a      	cmp	r2, r3
 800a8a2:	d8e5      	bhi.n	800a870 <USBD_GetEpDesc+0x2e>
 800a8a4:	e000      	b.n	800a8a8 <USBD_GetEpDesc+0x66>
          break;
 800a8a6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a8a8:	693b      	ldr	r3, [r7, #16]
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3718      	adds	r7, #24
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}

0800a8b2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a8b2:	b480      	push	{r7}
 800a8b4:	b085      	sub	sp, #20
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	6078      	str	r0, [r7, #4]
 800a8ba:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	881b      	ldrh	r3, [r3, #0]
 800a8c4:	68fa      	ldr	r2, [r7, #12]
 800a8c6:	7812      	ldrb	r2, [r2, #0]
 800a8c8:	4413      	add	r3, r2
 800a8ca:	b29a      	uxth	r2, r3
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	781b      	ldrb	r3, [r3, #0]
 800a8d4:	461a      	mov	r2, r3
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	4413      	add	r3, r2
 800a8da:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a8dc:	68fb      	ldr	r3, [r7, #12]
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3714      	adds	r7, #20
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e8:	4770      	bx	lr

0800a8ea <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a8ea:	b480      	push	{r7}
 800a8ec:	b087      	sub	sp, #28
 800a8ee:	af00      	add	r7, sp, #0
 800a8f0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	781b      	ldrb	r3, [r3, #0]
 800a8fa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	3301      	adds	r3, #1
 800a900:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	781b      	ldrb	r3, [r3, #0]
 800a906:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a908:	8a3b      	ldrh	r3, [r7, #16]
 800a90a:	021b      	lsls	r3, r3, #8
 800a90c:	b21a      	sxth	r2, r3
 800a90e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a912:	4313      	orrs	r3, r2
 800a914:	b21b      	sxth	r3, r3
 800a916:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a918:	89fb      	ldrh	r3, [r7, #14]
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	371c      	adds	r7, #28
 800a91e:	46bd      	mov	sp, r7
 800a920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a924:	4770      	bx	lr
	...

0800a928 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b084      	sub	sp, #16
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
 800a930:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a932:	2300      	movs	r3, #0
 800a934:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	781b      	ldrb	r3, [r3, #0]
 800a93a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a93e:	2b40      	cmp	r3, #64	@ 0x40
 800a940:	d005      	beq.n	800a94e <USBD_StdDevReq+0x26>
 800a942:	2b40      	cmp	r3, #64	@ 0x40
 800a944:	d857      	bhi.n	800a9f6 <USBD_StdDevReq+0xce>
 800a946:	2b00      	cmp	r3, #0
 800a948:	d00f      	beq.n	800a96a <USBD_StdDevReq+0x42>
 800a94a:	2b20      	cmp	r3, #32
 800a94c:	d153      	bne.n	800a9f6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	32ae      	adds	r2, #174	@ 0xae
 800a958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a95c:	689b      	ldr	r3, [r3, #8]
 800a95e:	6839      	ldr	r1, [r7, #0]
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	4798      	blx	r3
 800a964:	4603      	mov	r3, r0
 800a966:	73fb      	strb	r3, [r7, #15]
      break;
 800a968:	e04a      	b.n	800aa00 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	785b      	ldrb	r3, [r3, #1]
 800a96e:	2b09      	cmp	r3, #9
 800a970:	d83b      	bhi.n	800a9ea <USBD_StdDevReq+0xc2>
 800a972:	a201      	add	r2, pc, #4	@ (adr r2, 800a978 <USBD_StdDevReq+0x50>)
 800a974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a978:	0800a9cd 	.word	0x0800a9cd
 800a97c:	0800a9e1 	.word	0x0800a9e1
 800a980:	0800a9eb 	.word	0x0800a9eb
 800a984:	0800a9d7 	.word	0x0800a9d7
 800a988:	0800a9eb 	.word	0x0800a9eb
 800a98c:	0800a9ab 	.word	0x0800a9ab
 800a990:	0800a9a1 	.word	0x0800a9a1
 800a994:	0800a9eb 	.word	0x0800a9eb
 800a998:	0800a9c3 	.word	0x0800a9c3
 800a99c:	0800a9b5 	.word	0x0800a9b5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a9a0:	6839      	ldr	r1, [r7, #0]
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f000 fa3c 	bl	800ae20 <USBD_GetDescriptor>
          break;
 800a9a8:	e024      	b.n	800a9f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a9aa:	6839      	ldr	r1, [r7, #0]
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f000 fbcb 	bl	800b148 <USBD_SetAddress>
          break;
 800a9b2:	e01f      	b.n	800a9f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a9b4:	6839      	ldr	r1, [r7, #0]
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f000 fc0a 	bl	800b1d0 <USBD_SetConfig>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	73fb      	strb	r3, [r7, #15]
          break;
 800a9c0:	e018      	b.n	800a9f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a9c2:	6839      	ldr	r1, [r7, #0]
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f000 fcad 	bl	800b324 <USBD_GetConfig>
          break;
 800a9ca:	e013      	b.n	800a9f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a9cc:	6839      	ldr	r1, [r7, #0]
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f000 fcde 	bl	800b390 <USBD_GetStatus>
          break;
 800a9d4:	e00e      	b.n	800a9f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a9d6:	6839      	ldr	r1, [r7, #0]
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f000 fd0d 	bl	800b3f8 <USBD_SetFeature>
          break;
 800a9de:	e009      	b.n	800a9f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a9e0:	6839      	ldr	r1, [r7, #0]
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f000 fd31 	bl	800b44a <USBD_ClrFeature>
          break;
 800a9e8:	e004      	b.n	800a9f4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a9ea:	6839      	ldr	r1, [r7, #0]
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f000 fd88 	bl	800b502 <USBD_CtlError>
          break;
 800a9f2:	bf00      	nop
      }
      break;
 800a9f4:	e004      	b.n	800aa00 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a9f6:	6839      	ldr	r1, [r7, #0]
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f000 fd82 	bl	800b502 <USBD_CtlError>
      break;
 800a9fe:	bf00      	nop
  }

  return ret;
 800aa00:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3710      	adds	r7, #16
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}
 800aa0a:	bf00      	nop

0800aa0c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b084      	sub	sp, #16
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
 800aa14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa16:	2300      	movs	r3, #0
 800aa18:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	781b      	ldrb	r3, [r3, #0]
 800aa1e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aa22:	2b40      	cmp	r3, #64	@ 0x40
 800aa24:	d005      	beq.n	800aa32 <USBD_StdItfReq+0x26>
 800aa26:	2b40      	cmp	r3, #64	@ 0x40
 800aa28:	d852      	bhi.n	800aad0 <USBD_StdItfReq+0xc4>
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d001      	beq.n	800aa32 <USBD_StdItfReq+0x26>
 800aa2e:	2b20      	cmp	r3, #32
 800aa30:	d14e      	bne.n	800aad0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa38:	b2db      	uxtb	r3, r3
 800aa3a:	3b01      	subs	r3, #1
 800aa3c:	2b02      	cmp	r3, #2
 800aa3e:	d840      	bhi.n	800aac2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	889b      	ldrh	r3, [r3, #4]
 800aa44:	b2db      	uxtb	r3, r3
 800aa46:	2b01      	cmp	r3, #1
 800aa48:	d836      	bhi.n	800aab8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	889b      	ldrh	r3, [r3, #4]
 800aa4e:	b2db      	uxtb	r3, r3
 800aa50:	4619      	mov	r1, r3
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f7ff fedb 	bl	800a80e <USBD_CoreFindIF>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aa5c:	7bbb      	ldrb	r3, [r7, #14]
 800aa5e:	2bff      	cmp	r3, #255	@ 0xff
 800aa60:	d01d      	beq.n	800aa9e <USBD_StdItfReq+0x92>
 800aa62:	7bbb      	ldrb	r3, [r7, #14]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d11a      	bne.n	800aa9e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800aa68:	7bba      	ldrb	r2, [r7, #14]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	32ae      	adds	r2, #174	@ 0xae
 800aa6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa72:	689b      	ldr	r3, [r3, #8]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d00f      	beq.n	800aa98 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800aa78:	7bba      	ldrb	r2, [r7, #14]
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800aa80:	7bba      	ldrb	r2, [r7, #14]
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	32ae      	adds	r2, #174	@ 0xae
 800aa86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa8a:	689b      	ldr	r3, [r3, #8]
 800aa8c:	6839      	ldr	r1, [r7, #0]
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	4798      	blx	r3
 800aa92:	4603      	mov	r3, r0
 800aa94:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800aa96:	e004      	b.n	800aaa2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800aa98:	2303      	movs	r3, #3
 800aa9a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800aa9c:	e001      	b.n	800aaa2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800aa9e:	2303      	movs	r3, #3
 800aaa0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	88db      	ldrh	r3, [r3, #6]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d110      	bne.n	800aacc <USBD_StdItfReq+0xc0>
 800aaaa:	7bfb      	ldrb	r3, [r7, #15]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d10d      	bne.n	800aacc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f000 fdfd 	bl	800b6b0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800aab6:	e009      	b.n	800aacc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800aab8:	6839      	ldr	r1, [r7, #0]
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f000 fd21 	bl	800b502 <USBD_CtlError>
          break;
 800aac0:	e004      	b.n	800aacc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800aac2:	6839      	ldr	r1, [r7, #0]
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f000 fd1c 	bl	800b502 <USBD_CtlError>
          break;
 800aaca:	e000      	b.n	800aace <USBD_StdItfReq+0xc2>
          break;
 800aacc:	bf00      	nop
      }
      break;
 800aace:	e004      	b.n	800aada <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800aad0:	6839      	ldr	r1, [r7, #0]
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f000 fd15 	bl	800b502 <USBD_CtlError>
      break;
 800aad8:	bf00      	nop
  }

  return ret;
 800aada:	7bfb      	ldrb	r3, [r7, #15]
}
 800aadc:	4618      	mov	r0, r3
 800aade:	3710      	adds	r7, #16
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}

0800aae4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b084      	sub	sp, #16
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
 800aaec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	889b      	ldrh	r3, [r3, #4]
 800aaf6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	781b      	ldrb	r3, [r3, #0]
 800aafc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ab00:	2b40      	cmp	r3, #64	@ 0x40
 800ab02:	d007      	beq.n	800ab14 <USBD_StdEPReq+0x30>
 800ab04:	2b40      	cmp	r3, #64	@ 0x40
 800ab06:	f200 817f 	bhi.w	800ae08 <USBD_StdEPReq+0x324>
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d02a      	beq.n	800ab64 <USBD_StdEPReq+0x80>
 800ab0e:	2b20      	cmp	r3, #32
 800ab10:	f040 817a 	bne.w	800ae08 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ab14:	7bbb      	ldrb	r3, [r7, #14]
 800ab16:	4619      	mov	r1, r3
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f7ff fe85 	bl	800a828 <USBD_CoreFindEP>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ab22:	7b7b      	ldrb	r3, [r7, #13]
 800ab24:	2bff      	cmp	r3, #255	@ 0xff
 800ab26:	f000 8174 	beq.w	800ae12 <USBD_StdEPReq+0x32e>
 800ab2a:	7b7b      	ldrb	r3, [r7, #13]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	f040 8170 	bne.w	800ae12 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ab32:	7b7a      	ldrb	r2, [r7, #13]
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ab3a:	7b7a      	ldrb	r2, [r7, #13]
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	32ae      	adds	r2, #174	@ 0xae
 800ab40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab44:	689b      	ldr	r3, [r3, #8]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	f000 8163 	beq.w	800ae12 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ab4c:	7b7a      	ldrb	r2, [r7, #13]
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	32ae      	adds	r2, #174	@ 0xae
 800ab52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab56:	689b      	ldr	r3, [r3, #8]
 800ab58:	6839      	ldr	r1, [r7, #0]
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	4798      	blx	r3
 800ab5e:	4603      	mov	r3, r0
 800ab60:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ab62:	e156      	b.n	800ae12 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	785b      	ldrb	r3, [r3, #1]
 800ab68:	2b03      	cmp	r3, #3
 800ab6a:	d008      	beq.n	800ab7e <USBD_StdEPReq+0x9a>
 800ab6c:	2b03      	cmp	r3, #3
 800ab6e:	f300 8145 	bgt.w	800adfc <USBD_StdEPReq+0x318>
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	f000 809b 	beq.w	800acae <USBD_StdEPReq+0x1ca>
 800ab78:	2b01      	cmp	r3, #1
 800ab7a:	d03c      	beq.n	800abf6 <USBD_StdEPReq+0x112>
 800ab7c:	e13e      	b.n	800adfc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab84:	b2db      	uxtb	r3, r3
 800ab86:	2b02      	cmp	r3, #2
 800ab88:	d002      	beq.n	800ab90 <USBD_StdEPReq+0xac>
 800ab8a:	2b03      	cmp	r3, #3
 800ab8c:	d016      	beq.n	800abbc <USBD_StdEPReq+0xd8>
 800ab8e:	e02c      	b.n	800abea <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab90:	7bbb      	ldrb	r3, [r7, #14]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d00d      	beq.n	800abb2 <USBD_StdEPReq+0xce>
 800ab96:	7bbb      	ldrb	r3, [r7, #14]
 800ab98:	2b80      	cmp	r3, #128	@ 0x80
 800ab9a:	d00a      	beq.n	800abb2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ab9c:	7bbb      	ldrb	r3, [r7, #14]
 800ab9e:	4619      	mov	r1, r3
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f001 f9a5 	bl	800bef0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aba6:	2180      	movs	r1, #128	@ 0x80
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f001 f9a1 	bl	800bef0 <USBD_LL_StallEP>
 800abae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800abb0:	e020      	b.n	800abf4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800abb2:	6839      	ldr	r1, [r7, #0]
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f000 fca4 	bl	800b502 <USBD_CtlError>
              break;
 800abba:	e01b      	b.n	800abf4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	885b      	ldrh	r3, [r3, #2]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d10e      	bne.n	800abe2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800abc4:	7bbb      	ldrb	r3, [r7, #14]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d00b      	beq.n	800abe2 <USBD_StdEPReq+0xfe>
 800abca:	7bbb      	ldrb	r3, [r7, #14]
 800abcc:	2b80      	cmp	r3, #128	@ 0x80
 800abce:	d008      	beq.n	800abe2 <USBD_StdEPReq+0xfe>
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	88db      	ldrh	r3, [r3, #6]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d104      	bne.n	800abe2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800abd8:	7bbb      	ldrb	r3, [r7, #14]
 800abda:	4619      	mov	r1, r3
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f001 f987 	bl	800bef0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f000 fd64 	bl	800b6b0 <USBD_CtlSendStatus>

              break;
 800abe8:	e004      	b.n	800abf4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800abea:	6839      	ldr	r1, [r7, #0]
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f000 fc88 	bl	800b502 <USBD_CtlError>
              break;
 800abf2:	bf00      	nop
          }
          break;
 800abf4:	e107      	b.n	800ae06 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800abfc:	b2db      	uxtb	r3, r3
 800abfe:	2b02      	cmp	r3, #2
 800ac00:	d002      	beq.n	800ac08 <USBD_StdEPReq+0x124>
 800ac02:	2b03      	cmp	r3, #3
 800ac04:	d016      	beq.n	800ac34 <USBD_StdEPReq+0x150>
 800ac06:	e04b      	b.n	800aca0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac08:	7bbb      	ldrb	r3, [r7, #14]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d00d      	beq.n	800ac2a <USBD_StdEPReq+0x146>
 800ac0e:	7bbb      	ldrb	r3, [r7, #14]
 800ac10:	2b80      	cmp	r3, #128	@ 0x80
 800ac12:	d00a      	beq.n	800ac2a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ac14:	7bbb      	ldrb	r3, [r7, #14]
 800ac16:	4619      	mov	r1, r3
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f001 f969 	bl	800bef0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac1e:	2180      	movs	r1, #128	@ 0x80
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f001 f965 	bl	800bef0 <USBD_LL_StallEP>
 800ac26:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ac28:	e040      	b.n	800acac <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ac2a:	6839      	ldr	r1, [r7, #0]
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f000 fc68 	bl	800b502 <USBD_CtlError>
              break;
 800ac32:	e03b      	b.n	800acac <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	885b      	ldrh	r3, [r3, #2]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d136      	bne.n	800acaa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ac3c:	7bbb      	ldrb	r3, [r7, #14]
 800ac3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d004      	beq.n	800ac50 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ac46:	7bbb      	ldrb	r3, [r7, #14]
 800ac48:	4619      	mov	r1, r3
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f001 f96f 	bl	800bf2e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f000 fd2d 	bl	800b6b0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ac56:	7bbb      	ldrb	r3, [r7, #14]
 800ac58:	4619      	mov	r1, r3
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f7ff fde4 	bl	800a828 <USBD_CoreFindEP>
 800ac60:	4603      	mov	r3, r0
 800ac62:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ac64:	7b7b      	ldrb	r3, [r7, #13]
 800ac66:	2bff      	cmp	r3, #255	@ 0xff
 800ac68:	d01f      	beq.n	800acaa <USBD_StdEPReq+0x1c6>
 800ac6a:	7b7b      	ldrb	r3, [r7, #13]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d11c      	bne.n	800acaa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ac70:	7b7a      	ldrb	r2, [r7, #13]
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ac78:	7b7a      	ldrb	r2, [r7, #13]
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	32ae      	adds	r2, #174	@ 0xae
 800ac7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac82:	689b      	ldr	r3, [r3, #8]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d010      	beq.n	800acaa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ac88:	7b7a      	ldrb	r2, [r7, #13]
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	32ae      	adds	r2, #174	@ 0xae
 800ac8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac92:	689b      	ldr	r3, [r3, #8]
 800ac94:	6839      	ldr	r1, [r7, #0]
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	4798      	blx	r3
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ac9e:	e004      	b.n	800acaa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800aca0:	6839      	ldr	r1, [r7, #0]
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f000 fc2d 	bl	800b502 <USBD_CtlError>
              break;
 800aca8:	e000      	b.n	800acac <USBD_StdEPReq+0x1c8>
              break;
 800acaa:	bf00      	nop
          }
          break;
 800acac:	e0ab      	b.n	800ae06 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800acb4:	b2db      	uxtb	r3, r3
 800acb6:	2b02      	cmp	r3, #2
 800acb8:	d002      	beq.n	800acc0 <USBD_StdEPReq+0x1dc>
 800acba:	2b03      	cmp	r3, #3
 800acbc:	d032      	beq.n	800ad24 <USBD_StdEPReq+0x240>
 800acbe:	e097      	b.n	800adf0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800acc0:	7bbb      	ldrb	r3, [r7, #14]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d007      	beq.n	800acd6 <USBD_StdEPReq+0x1f2>
 800acc6:	7bbb      	ldrb	r3, [r7, #14]
 800acc8:	2b80      	cmp	r3, #128	@ 0x80
 800acca:	d004      	beq.n	800acd6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800accc:	6839      	ldr	r1, [r7, #0]
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f000 fc17 	bl	800b502 <USBD_CtlError>
                break;
 800acd4:	e091      	b.n	800adfa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800acd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	da0b      	bge.n	800acf6 <USBD_StdEPReq+0x212>
 800acde:	7bbb      	ldrb	r3, [r7, #14]
 800ace0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ace4:	4613      	mov	r3, r2
 800ace6:	009b      	lsls	r3, r3, #2
 800ace8:	4413      	add	r3, r2
 800acea:	009b      	lsls	r3, r3, #2
 800acec:	3310      	adds	r3, #16
 800acee:	687a      	ldr	r2, [r7, #4]
 800acf0:	4413      	add	r3, r2
 800acf2:	3304      	adds	r3, #4
 800acf4:	e00b      	b.n	800ad0e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800acf6:	7bbb      	ldrb	r3, [r7, #14]
 800acf8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800acfc:	4613      	mov	r3, r2
 800acfe:	009b      	lsls	r3, r3, #2
 800ad00:	4413      	add	r3, r2
 800ad02:	009b      	lsls	r3, r3, #2
 800ad04:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ad08:	687a      	ldr	r2, [r7, #4]
 800ad0a:	4413      	add	r3, r2
 800ad0c:	3304      	adds	r3, #4
 800ad0e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	2200      	movs	r2, #0
 800ad14:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	2202      	movs	r2, #2
 800ad1a:	4619      	mov	r1, r3
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f000 fc6d 	bl	800b5fc <USBD_CtlSendData>
              break;
 800ad22:	e06a      	b.n	800adfa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ad24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	da11      	bge.n	800ad50 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ad2c:	7bbb      	ldrb	r3, [r7, #14]
 800ad2e:	f003 020f 	and.w	r2, r3, #15
 800ad32:	6879      	ldr	r1, [r7, #4]
 800ad34:	4613      	mov	r3, r2
 800ad36:	009b      	lsls	r3, r3, #2
 800ad38:	4413      	add	r3, r2
 800ad3a:	009b      	lsls	r3, r3, #2
 800ad3c:	440b      	add	r3, r1
 800ad3e:	3324      	adds	r3, #36	@ 0x24
 800ad40:	881b      	ldrh	r3, [r3, #0]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d117      	bne.n	800ad76 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ad46:	6839      	ldr	r1, [r7, #0]
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f000 fbda 	bl	800b502 <USBD_CtlError>
                  break;
 800ad4e:	e054      	b.n	800adfa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ad50:	7bbb      	ldrb	r3, [r7, #14]
 800ad52:	f003 020f 	and.w	r2, r3, #15
 800ad56:	6879      	ldr	r1, [r7, #4]
 800ad58:	4613      	mov	r3, r2
 800ad5a:	009b      	lsls	r3, r3, #2
 800ad5c:	4413      	add	r3, r2
 800ad5e:	009b      	lsls	r3, r3, #2
 800ad60:	440b      	add	r3, r1
 800ad62:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ad66:	881b      	ldrh	r3, [r3, #0]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d104      	bne.n	800ad76 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ad6c:	6839      	ldr	r1, [r7, #0]
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f000 fbc7 	bl	800b502 <USBD_CtlError>
                  break;
 800ad74:	e041      	b.n	800adfa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	da0b      	bge.n	800ad96 <USBD_StdEPReq+0x2b2>
 800ad7e:	7bbb      	ldrb	r3, [r7, #14]
 800ad80:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ad84:	4613      	mov	r3, r2
 800ad86:	009b      	lsls	r3, r3, #2
 800ad88:	4413      	add	r3, r2
 800ad8a:	009b      	lsls	r3, r3, #2
 800ad8c:	3310      	adds	r3, #16
 800ad8e:	687a      	ldr	r2, [r7, #4]
 800ad90:	4413      	add	r3, r2
 800ad92:	3304      	adds	r3, #4
 800ad94:	e00b      	b.n	800adae <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ad96:	7bbb      	ldrb	r3, [r7, #14]
 800ad98:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad9c:	4613      	mov	r3, r2
 800ad9e:	009b      	lsls	r3, r3, #2
 800ada0:	4413      	add	r3, r2
 800ada2:	009b      	lsls	r3, r3, #2
 800ada4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ada8:	687a      	ldr	r2, [r7, #4]
 800adaa:	4413      	add	r3, r2
 800adac:	3304      	adds	r3, #4
 800adae:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800adb0:	7bbb      	ldrb	r3, [r7, #14]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d002      	beq.n	800adbc <USBD_StdEPReq+0x2d8>
 800adb6:	7bbb      	ldrb	r3, [r7, #14]
 800adb8:	2b80      	cmp	r3, #128	@ 0x80
 800adba:	d103      	bne.n	800adc4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	2200      	movs	r2, #0
 800adc0:	601a      	str	r2, [r3, #0]
 800adc2:	e00e      	b.n	800ade2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800adc4:	7bbb      	ldrb	r3, [r7, #14]
 800adc6:	4619      	mov	r1, r3
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f001 f8cf 	bl	800bf6c <USBD_LL_IsStallEP>
 800adce:	4603      	mov	r3, r0
 800add0:	2b00      	cmp	r3, #0
 800add2:	d003      	beq.n	800addc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	2201      	movs	r2, #1
 800add8:	601a      	str	r2, [r3, #0]
 800adda:	e002      	b.n	800ade2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	2200      	movs	r2, #0
 800ade0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	2202      	movs	r2, #2
 800ade6:	4619      	mov	r1, r3
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f000 fc07 	bl	800b5fc <USBD_CtlSendData>
              break;
 800adee:	e004      	b.n	800adfa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800adf0:	6839      	ldr	r1, [r7, #0]
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f000 fb85 	bl	800b502 <USBD_CtlError>
              break;
 800adf8:	bf00      	nop
          }
          break;
 800adfa:	e004      	b.n	800ae06 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800adfc:	6839      	ldr	r1, [r7, #0]
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f000 fb7f 	bl	800b502 <USBD_CtlError>
          break;
 800ae04:	bf00      	nop
      }
      break;
 800ae06:	e005      	b.n	800ae14 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ae08:	6839      	ldr	r1, [r7, #0]
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f000 fb79 	bl	800b502 <USBD_CtlError>
      break;
 800ae10:	e000      	b.n	800ae14 <USBD_StdEPReq+0x330>
      break;
 800ae12:	bf00      	nop
  }

  return ret;
 800ae14:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3710      	adds	r7, #16
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}
	...

0800ae20 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b084      	sub	sp, #16
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
 800ae28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ae32:	2300      	movs	r3, #0
 800ae34:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	885b      	ldrh	r3, [r3, #2]
 800ae3a:	0a1b      	lsrs	r3, r3, #8
 800ae3c:	b29b      	uxth	r3, r3
 800ae3e:	3b01      	subs	r3, #1
 800ae40:	2b0e      	cmp	r3, #14
 800ae42:	f200 8152 	bhi.w	800b0ea <USBD_GetDescriptor+0x2ca>
 800ae46:	a201      	add	r2, pc, #4	@ (adr r2, 800ae4c <USBD_GetDescriptor+0x2c>)
 800ae48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae4c:	0800aebd 	.word	0x0800aebd
 800ae50:	0800aed5 	.word	0x0800aed5
 800ae54:	0800af15 	.word	0x0800af15
 800ae58:	0800b0eb 	.word	0x0800b0eb
 800ae5c:	0800b0eb 	.word	0x0800b0eb
 800ae60:	0800b08b 	.word	0x0800b08b
 800ae64:	0800b0b7 	.word	0x0800b0b7
 800ae68:	0800b0eb 	.word	0x0800b0eb
 800ae6c:	0800b0eb 	.word	0x0800b0eb
 800ae70:	0800b0eb 	.word	0x0800b0eb
 800ae74:	0800b0eb 	.word	0x0800b0eb
 800ae78:	0800b0eb 	.word	0x0800b0eb
 800ae7c:	0800b0eb 	.word	0x0800b0eb
 800ae80:	0800b0eb 	.word	0x0800b0eb
 800ae84:	0800ae89 	.word	0x0800ae89
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae8e:	69db      	ldr	r3, [r3, #28]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d00b      	beq.n	800aeac <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae9a:	69db      	ldr	r3, [r3, #28]
 800ae9c:	687a      	ldr	r2, [r7, #4]
 800ae9e:	7c12      	ldrb	r2, [r2, #16]
 800aea0:	f107 0108 	add.w	r1, r7, #8
 800aea4:	4610      	mov	r0, r2
 800aea6:	4798      	blx	r3
 800aea8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aeaa:	e126      	b.n	800b0fa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800aeac:	6839      	ldr	r1, [r7, #0]
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f000 fb27 	bl	800b502 <USBD_CtlError>
        err++;
 800aeb4:	7afb      	ldrb	r3, [r7, #11]
 800aeb6:	3301      	adds	r3, #1
 800aeb8:	72fb      	strb	r3, [r7, #11]
      break;
 800aeba:	e11e      	b.n	800b0fa <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	687a      	ldr	r2, [r7, #4]
 800aec6:	7c12      	ldrb	r2, [r2, #16]
 800aec8:	f107 0108 	add.w	r1, r7, #8
 800aecc:	4610      	mov	r0, r2
 800aece:	4798      	blx	r3
 800aed0:	60f8      	str	r0, [r7, #12]
      break;
 800aed2:	e112      	b.n	800b0fa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	7c1b      	ldrb	r3, [r3, #16]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d10d      	bne.n	800aef8 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aee4:	f107 0208 	add.w	r2, r7, #8
 800aee8:	4610      	mov	r0, r2
 800aeea:	4798      	blx	r3
 800aeec:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	3301      	adds	r3, #1
 800aef2:	2202      	movs	r2, #2
 800aef4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800aef6:	e100      	b.n	800b0fa <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aefe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af00:	f107 0208 	add.w	r2, r7, #8
 800af04:	4610      	mov	r0, r2
 800af06:	4798      	blx	r3
 800af08:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	3301      	adds	r3, #1
 800af0e:	2202      	movs	r2, #2
 800af10:	701a      	strb	r2, [r3, #0]
      break;
 800af12:	e0f2      	b.n	800b0fa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	885b      	ldrh	r3, [r3, #2]
 800af18:	b2db      	uxtb	r3, r3
 800af1a:	2b05      	cmp	r3, #5
 800af1c:	f200 80ac 	bhi.w	800b078 <USBD_GetDescriptor+0x258>
 800af20:	a201      	add	r2, pc, #4	@ (adr r2, 800af28 <USBD_GetDescriptor+0x108>)
 800af22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af26:	bf00      	nop
 800af28:	0800af41 	.word	0x0800af41
 800af2c:	0800af75 	.word	0x0800af75
 800af30:	0800afa9 	.word	0x0800afa9
 800af34:	0800afdd 	.word	0x0800afdd
 800af38:	0800b011 	.word	0x0800b011
 800af3c:	0800b045 	.word	0x0800b045
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af46:	685b      	ldr	r3, [r3, #4]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d00b      	beq.n	800af64 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af52:	685b      	ldr	r3, [r3, #4]
 800af54:	687a      	ldr	r2, [r7, #4]
 800af56:	7c12      	ldrb	r2, [r2, #16]
 800af58:	f107 0108 	add.w	r1, r7, #8
 800af5c:	4610      	mov	r0, r2
 800af5e:	4798      	blx	r3
 800af60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af62:	e091      	b.n	800b088 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800af64:	6839      	ldr	r1, [r7, #0]
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f000 facb 	bl	800b502 <USBD_CtlError>
            err++;
 800af6c:	7afb      	ldrb	r3, [r7, #11]
 800af6e:	3301      	adds	r3, #1
 800af70:	72fb      	strb	r3, [r7, #11]
          break;
 800af72:	e089      	b.n	800b088 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af7a:	689b      	ldr	r3, [r3, #8]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d00b      	beq.n	800af98 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af86:	689b      	ldr	r3, [r3, #8]
 800af88:	687a      	ldr	r2, [r7, #4]
 800af8a:	7c12      	ldrb	r2, [r2, #16]
 800af8c:	f107 0108 	add.w	r1, r7, #8
 800af90:	4610      	mov	r0, r2
 800af92:	4798      	blx	r3
 800af94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af96:	e077      	b.n	800b088 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800af98:	6839      	ldr	r1, [r7, #0]
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 fab1 	bl	800b502 <USBD_CtlError>
            err++;
 800afa0:	7afb      	ldrb	r3, [r7, #11]
 800afa2:	3301      	adds	r3, #1
 800afa4:	72fb      	strb	r3, [r7, #11]
          break;
 800afa6:	e06f      	b.n	800b088 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800afae:	68db      	ldr	r3, [r3, #12]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d00b      	beq.n	800afcc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800afba:	68db      	ldr	r3, [r3, #12]
 800afbc:	687a      	ldr	r2, [r7, #4]
 800afbe:	7c12      	ldrb	r2, [r2, #16]
 800afc0:	f107 0108 	add.w	r1, r7, #8
 800afc4:	4610      	mov	r0, r2
 800afc6:	4798      	blx	r3
 800afc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800afca:	e05d      	b.n	800b088 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800afcc:	6839      	ldr	r1, [r7, #0]
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f000 fa97 	bl	800b502 <USBD_CtlError>
            err++;
 800afd4:	7afb      	ldrb	r3, [r7, #11]
 800afd6:	3301      	adds	r3, #1
 800afd8:	72fb      	strb	r3, [r7, #11]
          break;
 800afda:	e055      	b.n	800b088 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800afe2:	691b      	ldr	r3, [r3, #16]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d00b      	beq.n	800b000 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800afee:	691b      	ldr	r3, [r3, #16]
 800aff0:	687a      	ldr	r2, [r7, #4]
 800aff2:	7c12      	ldrb	r2, [r2, #16]
 800aff4:	f107 0108 	add.w	r1, r7, #8
 800aff8:	4610      	mov	r0, r2
 800affa:	4798      	blx	r3
 800affc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800affe:	e043      	b.n	800b088 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b000:	6839      	ldr	r1, [r7, #0]
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f000 fa7d 	bl	800b502 <USBD_CtlError>
            err++;
 800b008:	7afb      	ldrb	r3, [r7, #11]
 800b00a:	3301      	adds	r3, #1
 800b00c:	72fb      	strb	r3, [r7, #11]
          break;
 800b00e:	e03b      	b.n	800b088 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b016:	695b      	ldr	r3, [r3, #20]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d00b      	beq.n	800b034 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b022:	695b      	ldr	r3, [r3, #20]
 800b024:	687a      	ldr	r2, [r7, #4]
 800b026:	7c12      	ldrb	r2, [r2, #16]
 800b028:	f107 0108 	add.w	r1, r7, #8
 800b02c:	4610      	mov	r0, r2
 800b02e:	4798      	blx	r3
 800b030:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b032:	e029      	b.n	800b088 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b034:	6839      	ldr	r1, [r7, #0]
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 fa63 	bl	800b502 <USBD_CtlError>
            err++;
 800b03c:	7afb      	ldrb	r3, [r7, #11]
 800b03e:	3301      	adds	r3, #1
 800b040:	72fb      	strb	r3, [r7, #11]
          break;
 800b042:	e021      	b.n	800b088 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b04a:	699b      	ldr	r3, [r3, #24]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d00b      	beq.n	800b068 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b056:	699b      	ldr	r3, [r3, #24]
 800b058:	687a      	ldr	r2, [r7, #4]
 800b05a:	7c12      	ldrb	r2, [r2, #16]
 800b05c:	f107 0108 	add.w	r1, r7, #8
 800b060:	4610      	mov	r0, r2
 800b062:	4798      	blx	r3
 800b064:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b066:	e00f      	b.n	800b088 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b068:	6839      	ldr	r1, [r7, #0]
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f000 fa49 	bl	800b502 <USBD_CtlError>
            err++;
 800b070:	7afb      	ldrb	r3, [r7, #11]
 800b072:	3301      	adds	r3, #1
 800b074:	72fb      	strb	r3, [r7, #11]
          break;
 800b076:	e007      	b.n	800b088 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b078:	6839      	ldr	r1, [r7, #0]
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f000 fa41 	bl	800b502 <USBD_CtlError>
          err++;
 800b080:	7afb      	ldrb	r3, [r7, #11]
 800b082:	3301      	adds	r3, #1
 800b084:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b086:	bf00      	nop
      }
      break;
 800b088:	e037      	b.n	800b0fa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	7c1b      	ldrb	r3, [r3, #16]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d109      	bne.n	800b0a6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b098:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b09a:	f107 0208 	add.w	r2, r7, #8
 800b09e:	4610      	mov	r0, r2
 800b0a0:	4798      	blx	r3
 800b0a2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b0a4:	e029      	b.n	800b0fa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b0a6:	6839      	ldr	r1, [r7, #0]
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f000 fa2a 	bl	800b502 <USBD_CtlError>
        err++;
 800b0ae:	7afb      	ldrb	r3, [r7, #11]
 800b0b0:	3301      	adds	r3, #1
 800b0b2:	72fb      	strb	r3, [r7, #11]
      break;
 800b0b4:	e021      	b.n	800b0fa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	7c1b      	ldrb	r3, [r3, #16]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d10d      	bne.n	800b0da <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0c6:	f107 0208 	add.w	r2, r7, #8
 800b0ca:	4610      	mov	r0, r2
 800b0cc:	4798      	blx	r3
 800b0ce:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	3301      	adds	r3, #1
 800b0d4:	2207      	movs	r2, #7
 800b0d6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b0d8:	e00f      	b.n	800b0fa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b0da:	6839      	ldr	r1, [r7, #0]
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f000 fa10 	bl	800b502 <USBD_CtlError>
        err++;
 800b0e2:	7afb      	ldrb	r3, [r7, #11]
 800b0e4:	3301      	adds	r3, #1
 800b0e6:	72fb      	strb	r3, [r7, #11]
      break;
 800b0e8:	e007      	b.n	800b0fa <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b0ea:	6839      	ldr	r1, [r7, #0]
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f000 fa08 	bl	800b502 <USBD_CtlError>
      err++;
 800b0f2:	7afb      	ldrb	r3, [r7, #11]
 800b0f4:	3301      	adds	r3, #1
 800b0f6:	72fb      	strb	r3, [r7, #11]
      break;
 800b0f8:	bf00      	nop
  }

  if (err != 0U)
 800b0fa:	7afb      	ldrb	r3, [r7, #11]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d11e      	bne.n	800b13e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	88db      	ldrh	r3, [r3, #6]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d016      	beq.n	800b136 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b108:	893b      	ldrh	r3, [r7, #8]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d00e      	beq.n	800b12c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	88da      	ldrh	r2, [r3, #6]
 800b112:	893b      	ldrh	r3, [r7, #8]
 800b114:	4293      	cmp	r3, r2
 800b116:	bf28      	it	cs
 800b118:	4613      	movcs	r3, r2
 800b11a:	b29b      	uxth	r3, r3
 800b11c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b11e:	893b      	ldrh	r3, [r7, #8]
 800b120:	461a      	mov	r2, r3
 800b122:	68f9      	ldr	r1, [r7, #12]
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f000 fa69 	bl	800b5fc <USBD_CtlSendData>
 800b12a:	e009      	b.n	800b140 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b12c:	6839      	ldr	r1, [r7, #0]
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f000 f9e7 	bl	800b502 <USBD_CtlError>
 800b134:	e004      	b.n	800b140 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f000 faba 	bl	800b6b0 <USBD_CtlSendStatus>
 800b13c:	e000      	b.n	800b140 <USBD_GetDescriptor+0x320>
    return;
 800b13e:	bf00      	nop
  }
}
 800b140:	3710      	adds	r7, #16
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}
 800b146:	bf00      	nop

0800b148 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b084      	sub	sp, #16
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
 800b150:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	889b      	ldrh	r3, [r3, #4]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d131      	bne.n	800b1be <USBD_SetAddress+0x76>
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	88db      	ldrh	r3, [r3, #6]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d12d      	bne.n	800b1be <USBD_SetAddress+0x76>
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	885b      	ldrh	r3, [r3, #2]
 800b166:	2b7f      	cmp	r3, #127	@ 0x7f
 800b168:	d829      	bhi.n	800b1be <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	885b      	ldrh	r3, [r3, #2]
 800b16e:	b2db      	uxtb	r3, r3
 800b170:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b174:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b17c:	b2db      	uxtb	r3, r3
 800b17e:	2b03      	cmp	r3, #3
 800b180:	d104      	bne.n	800b18c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b182:	6839      	ldr	r1, [r7, #0]
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f000 f9bc 	bl	800b502 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b18a:	e01d      	b.n	800b1c8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	7bfa      	ldrb	r2, [r7, #15]
 800b190:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b194:	7bfb      	ldrb	r3, [r7, #15]
 800b196:	4619      	mov	r1, r3
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f000 ff13 	bl	800bfc4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f000 fa86 	bl	800b6b0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b1a4:	7bfb      	ldrb	r3, [r7, #15]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d004      	beq.n	800b1b4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2202      	movs	r2, #2
 800b1ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1b2:	e009      	b.n	800b1c8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2201      	movs	r2, #1
 800b1b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1bc:	e004      	b.n	800b1c8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b1be:	6839      	ldr	r1, [r7, #0]
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f000 f99e 	bl	800b502 <USBD_CtlError>
  }
}
 800b1c6:	bf00      	nop
 800b1c8:	bf00      	nop
 800b1ca:	3710      	adds	r7, #16
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}

0800b1d0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b084      	sub	sp, #16
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	885b      	ldrh	r3, [r3, #2]
 800b1e2:	b2da      	uxtb	r2, r3
 800b1e4:	4b4e      	ldr	r3, [pc, #312]	@ (800b320 <USBD_SetConfig+0x150>)
 800b1e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b1e8:	4b4d      	ldr	r3, [pc, #308]	@ (800b320 <USBD_SetConfig+0x150>)
 800b1ea:	781b      	ldrb	r3, [r3, #0]
 800b1ec:	2b01      	cmp	r3, #1
 800b1ee:	d905      	bls.n	800b1fc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b1f0:	6839      	ldr	r1, [r7, #0]
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f000 f985 	bl	800b502 <USBD_CtlError>
    return USBD_FAIL;
 800b1f8:	2303      	movs	r3, #3
 800b1fa:	e08c      	b.n	800b316 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b202:	b2db      	uxtb	r3, r3
 800b204:	2b02      	cmp	r3, #2
 800b206:	d002      	beq.n	800b20e <USBD_SetConfig+0x3e>
 800b208:	2b03      	cmp	r3, #3
 800b20a:	d029      	beq.n	800b260 <USBD_SetConfig+0x90>
 800b20c:	e075      	b.n	800b2fa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b20e:	4b44      	ldr	r3, [pc, #272]	@ (800b320 <USBD_SetConfig+0x150>)
 800b210:	781b      	ldrb	r3, [r3, #0]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d020      	beq.n	800b258 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b216:	4b42      	ldr	r3, [pc, #264]	@ (800b320 <USBD_SetConfig+0x150>)
 800b218:	781b      	ldrb	r3, [r3, #0]
 800b21a:	461a      	mov	r2, r3
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b220:	4b3f      	ldr	r3, [pc, #252]	@ (800b320 <USBD_SetConfig+0x150>)
 800b222:	781b      	ldrb	r3, [r3, #0]
 800b224:	4619      	mov	r1, r3
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f7fe ffb9 	bl	800a19e <USBD_SetClassConfig>
 800b22c:	4603      	mov	r3, r0
 800b22e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b230:	7bfb      	ldrb	r3, [r7, #15]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d008      	beq.n	800b248 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b236:	6839      	ldr	r1, [r7, #0]
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f000 f962 	bl	800b502 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2202      	movs	r2, #2
 800b242:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b246:	e065      	b.n	800b314 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f000 fa31 	bl	800b6b0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2203      	movs	r2, #3
 800b252:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b256:	e05d      	b.n	800b314 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f000 fa29 	bl	800b6b0 <USBD_CtlSendStatus>
      break;
 800b25e:	e059      	b.n	800b314 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b260:	4b2f      	ldr	r3, [pc, #188]	@ (800b320 <USBD_SetConfig+0x150>)
 800b262:	781b      	ldrb	r3, [r3, #0]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d112      	bne.n	800b28e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2202      	movs	r2, #2
 800b26c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b270:	4b2b      	ldr	r3, [pc, #172]	@ (800b320 <USBD_SetConfig+0x150>)
 800b272:	781b      	ldrb	r3, [r3, #0]
 800b274:	461a      	mov	r2, r3
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b27a:	4b29      	ldr	r3, [pc, #164]	@ (800b320 <USBD_SetConfig+0x150>)
 800b27c:	781b      	ldrb	r3, [r3, #0]
 800b27e:	4619      	mov	r1, r3
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f7fe ffa8 	bl	800a1d6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f000 fa12 	bl	800b6b0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b28c:	e042      	b.n	800b314 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b28e:	4b24      	ldr	r3, [pc, #144]	@ (800b320 <USBD_SetConfig+0x150>)
 800b290:	781b      	ldrb	r3, [r3, #0]
 800b292:	461a      	mov	r2, r3
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	685b      	ldr	r3, [r3, #4]
 800b298:	429a      	cmp	r2, r3
 800b29a:	d02a      	beq.n	800b2f2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	b2db      	uxtb	r3, r3
 800b2a2:	4619      	mov	r1, r3
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f7fe ff96 	bl	800a1d6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b2aa:	4b1d      	ldr	r3, [pc, #116]	@ (800b320 <USBD_SetConfig+0x150>)
 800b2ac:	781b      	ldrb	r3, [r3, #0]
 800b2ae:	461a      	mov	r2, r3
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b2b4:	4b1a      	ldr	r3, [pc, #104]	@ (800b320 <USBD_SetConfig+0x150>)
 800b2b6:	781b      	ldrb	r3, [r3, #0]
 800b2b8:	4619      	mov	r1, r3
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f7fe ff6f 	bl	800a19e <USBD_SetClassConfig>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b2c4:	7bfb      	ldrb	r3, [r7, #15]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d00f      	beq.n	800b2ea <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b2ca:	6839      	ldr	r1, [r7, #0]
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f000 f918 	bl	800b502 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	685b      	ldr	r3, [r3, #4]
 800b2d6:	b2db      	uxtb	r3, r3
 800b2d8:	4619      	mov	r1, r3
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f7fe ff7b 	bl	800a1d6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2202      	movs	r2, #2
 800b2e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b2e8:	e014      	b.n	800b314 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f000 f9e0 	bl	800b6b0 <USBD_CtlSendStatus>
      break;
 800b2f0:	e010      	b.n	800b314 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f000 f9dc 	bl	800b6b0 <USBD_CtlSendStatus>
      break;
 800b2f8:	e00c      	b.n	800b314 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b2fa:	6839      	ldr	r1, [r7, #0]
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f000 f900 	bl	800b502 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b302:	4b07      	ldr	r3, [pc, #28]	@ (800b320 <USBD_SetConfig+0x150>)
 800b304:	781b      	ldrb	r3, [r3, #0]
 800b306:	4619      	mov	r1, r3
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f7fe ff64 	bl	800a1d6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b30e:	2303      	movs	r3, #3
 800b310:	73fb      	strb	r3, [r7, #15]
      break;
 800b312:	bf00      	nop
  }

  return ret;
 800b314:	7bfb      	ldrb	r3, [r7, #15]
}
 800b316:	4618      	mov	r0, r3
 800b318:	3710      	adds	r7, #16
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}
 800b31e:	bf00      	nop
 800b320:	20011064 	.word	0x20011064

0800b324 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b082      	sub	sp, #8
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
 800b32c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	88db      	ldrh	r3, [r3, #6]
 800b332:	2b01      	cmp	r3, #1
 800b334:	d004      	beq.n	800b340 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b336:	6839      	ldr	r1, [r7, #0]
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f000 f8e2 	bl	800b502 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b33e:	e023      	b.n	800b388 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b346:	b2db      	uxtb	r3, r3
 800b348:	2b02      	cmp	r3, #2
 800b34a:	dc02      	bgt.n	800b352 <USBD_GetConfig+0x2e>
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	dc03      	bgt.n	800b358 <USBD_GetConfig+0x34>
 800b350:	e015      	b.n	800b37e <USBD_GetConfig+0x5a>
 800b352:	2b03      	cmp	r3, #3
 800b354:	d00b      	beq.n	800b36e <USBD_GetConfig+0x4a>
 800b356:	e012      	b.n	800b37e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2200      	movs	r2, #0
 800b35c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	3308      	adds	r3, #8
 800b362:	2201      	movs	r2, #1
 800b364:	4619      	mov	r1, r3
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f000 f948 	bl	800b5fc <USBD_CtlSendData>
        break;
 800b36c:	e00c      	b.n	800b388 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	3304      	adds	r3, #4
 800b372:	2201      	movs	r2, #1
 800b374:	4619      	mov	r1, r3
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f000 f940 	bl	800b5fc <USBD_CtlSendData>
        break;
 800b37c:	e004      	b.n	800b388 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b37e:	6839      	ldr	r1, [r7, #0]
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f000 f8be 	bl	800b502 <USBD_CtlError>
        break;
 800b386:	bf00      	nop
}
 800b388:	bf00      	nop
 800b38a:	3708      	adds	r7, #8
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b082      	sub	sp, #8
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
 800b398:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3a0:	b2db      	uxtb	r3, r3
 800b3a2:	3b01      	subs	r3, #1
 800b3a4:	2b02      	cmp	r3, #2
 800b3a6:	d81e      	bhi.n	800b3e6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	88db      	ldrh	r3, [r3, #6]
 800b3ac:	2b02      	cmp	r3, #2
 800b3ae:	d004      	beq.n	800b3ba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b3b0:	6839      	ldr	r1, [r7, #0]
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f000 f8a5 	bl	800b502 <USBD_CtlError>
        break;
 800b3b8:	e01a      	b.n	800b3f0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2201      	movs	r2, #1
 800b3be:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d005      	beq.n	800b3d6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	68db      	ldr	r3, [r3, #12]
 800b3ce:	f043 0202 	orr.w	r2, r3, #2
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	330c      	adds	r3, #12
 800b3da:	2202      	movs	r2, #2
 800b3dc:	4619      	mov	r1, r3
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f000 f90c 	bl	800b5fc <USBD_CtlSendData>
      break;
 800b3e4:	e004      	b.n	800b3f0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b3e6:	6839      	ldr	r1, [r7, #0]
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	f000 f88a 	bl	800b502 <USBD_CtlError>
      break;
 800b3ee:	bf00      	nop
  }
}
 800b3f0:	bf00      	nop
 800b3f2:	3708      	adds	r7, #8
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}

0800b3f8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b082      	sub	sp, #8
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
 800b400:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	885b      	ldrh	r3, [r3, #2]
 800b406:	2b01      	cmp	r3, #1
 800b408:	d107      	bne.n	800b41a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2201      	movs	r2, #1
 800b40e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f000 f94c 	bl	800b6b0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b418:	e013      	b.n	800b442 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	885b      	ldrh	r3, [r3, #2]
 800b41e:	2b02      	cmp	r3, #2
 800b420:	d10b      	bne.n	800b43a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	889b      	ldrh	r3, [r3, #4]
 800b426:	0a1b      	lsrs	r3, r3, #8
 800b428:	b29b      	uxth	r3, r3
 800b42a:	b2da      	uxtb	r2, r3
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f000 f93c 	bl	800b6b0 <USBD_CtlSendStatus>
}
 800b438:	e003      	b.n	800b442 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b43a:	6839      	ldr	r1, [r7, #0]
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	f000 f860 	bl	800b502 <USBD_CtlError>
}
 800b442:	bf00      	nop
 800b444:	3708      	adds	r7, #8
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}

0800b44a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b44a:	b580      	push	{r7, lr}
 800b44c:	b082      	sub	sp, #8
 800b44e:	af00      	add	r7, sp, #0
 800b450:	6078      	str	r0, [r7, #4]
 800b452:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b45a:	b2db      	uxtb	r3, r3
 800b45c:	3b01      	subs	r3, #1
 800b45e:	2b02      	cmp	r3, #2
 800b460:	d80b      	bhi.n	800b47a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	885b      	ldrh	r3, [r3, #2]
 800b466:	2b01      	cmp	r3, #1
 800b468:	d10c      	bne.n	800b484 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2200      	movs	r2, #0
 800b46e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f000 f91c 	bl	800b6b0 <USBD_CtlSendStatus>
      }
      break;
 800b478:	e004      	b.n	800b484 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b47a:	6839      	ldr	r1, [r7, #0]
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f000 f840 	bl	800b502 <USBD_CtlError>
      break;
 800b482:	e000      	b.n	800b486 <USBD_ClrFeature+0x3c>
      break;
 800b484:	bf00      	nop
  }
}
 800b486:	bf00      	nop
 800b488:	3708      	adds	r7, #8
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}

0800b48e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b48e:	b580      	push	{r7, lr}
 800b490:	b084      	sub	sp, #16
 800b492:	af00      	add	r7, sp, #0
 800b494:	6078      	str	r0, [r7, #4]
 800b496:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	781a      	ldrb	r2, [r3, #0]
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	3301      	adds	r3, #1
 800b4a8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	781a      	ldrb	r2, [r3, #0]
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	3301      	adds	r3, #1
 800b4b6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b4b8:	68f8      	ldr	r0, [r7, #12]
 800b4ba:	f7ff fa16 	bl	800a8ea <SWAPBYTE>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	461a      	mov	r2, r3
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	3301      	adds	r3, #1
 800b4ca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	3301      	adds	r3, #1
 800b4d0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b4d2:	68f8      	ldr	r0, [r7, #12]
 800b4d4:	f7ff fa09 	bl	800a8ea <SWAPBYTE>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	461a      	mov	r2, r3
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	3301      	adds	r3, #1
 800b4e4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	3301      	adds	r3, #1
 800b4ea:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b4ec:	68f8      	ldr	r0, [r7, #12]
 800b4ee:	f7ff f9fc 	bl	800a8ea <SWAPBYTE>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	461a      	mov	r2, r3
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	80da      	strh	r2, [r3, #6]
}
 800b4fa:	bf00      	nop
 800b4fc:	3710      	adds	r7, #16
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}

0800b502 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b502:	b580      	push	{r7, lr}
 800b504:	b082      	sub	sp, #8
 800b506:	af00      	add	r7, sp, #0
 800b508:	6078      	str	r0, [r7, #4]
 800b50a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b50c:	2180      	movs	r1, #128	@ 0x80
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f000 fcee 	bl	800bef0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b514:	2100      	movs	r1, #0
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f000 fcea 	bl	800bef0 <USBD_LL_StallEP>
}
 800b51c:	bf00      	nop
 800b51e:	3708      	adds	r7, #8
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}

0800b524 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b086      	sub	sp, #24
 800b528:	af00      	add	r7, sp, #0
 800b52a:	60f8      	str	r0, [r7, #12]
 800b52c:	60b9      	str	r1, [r7, #8]
 800b52e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b530:	2300      	movs	r3, #0
 800b532:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d042      	beq.n	800b5c0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800b53e:	6938      	ldr	r0, [r7, #16]
 800b540:	f000 f842 	bl	800b5c8 <USBD_GetLen>
 800b544:	4603      	mov	r3, r0
 800b546:	3301      	adds	r3, #1
 800b548:	005b      	lsls	r3, r3, #1
 800b54a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b54e:	d808      	bhi.n	800b562 <USBD_GetString+0x3e>
 800b550:	6938      	ldr	r0, [r7, #16]
 800b552:	f000 f839 	bl	800b5c8 <USBD_GetLen>
 800b556:	4603      	mov	r3, r0
 800b558:	3301      	adds	r3, #1
 800b55a:	b29b      	uxth	r3, r3
 800b55c:	005b      	lsls	r3, r3, #1
 800b55e:	b29a      	uxth	r2, r3
 800b560:	e001      	b.n	800b566 <USBD_GetString+0x42>
 800b562:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b56a:	7dfb      	ldrb	r3, [r7, #23]
 800b56c:	68ba      	ldr	r2, [r7, #8]
 800b56e:	4413      	add	r3, r2
 800b570:	687a      	ldr	r2, [r7, #4]
 800b572:	7812      	ldrb	r2, [r2, #0]
 800b574:	701a      	strb	r2, [r3, #0]
  idx++;
 800b576:	7dfb      	ldrb	r3, [r7, #23]
 800b578:	3301      	adds	r3, #1
 800b57a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b57c:	7dfb      	ldrb	r3, [r7, #23]
 800b57e:	68ba      	ldr	r2, [r7, #8]
 800b580:	4413      	add	r3, r2
 800b582:	2203      	movs	r2, #3
 800b584:	701a      	strb	r2, [r3, #0]
  idx++;
 800b586:	7dfb      	ldrb	r3, [r7, #23]
 800b588:	3301      	adds	r3, #1
 800b58a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b58c:	e013      	b.n	800b5b6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800b58e:	7dfb      	ldrb	r3, [r7, #23]
 800b590:	68ba      	ldr	r2, [r7, #8]
 800b592:	4413      	add	r3, r2
 800b594:	693a      	ldr	r2, [r7, #16]
 800b596:	7812      	ldrb	r2, [r2, #0]
 800b598:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b59a:	693b      	ldr	r3, [r7, #16]
 800b59c:	3301      	adds	r3, #1
 800b59e:	613b      	str	r3, [r7, #16]
    idx++;
 800b5a0:	7dfb      	ldrb	r3, [r7, #23]
 800b5a2:	3301      	adds	r3, #1
 800b5a4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b5a6:	7dfb      	ldrb	r3, [r7, #23]
 800b5a8:	68ba      	ldr	r2, [r7, #8]
 800b5aa:	4413      	add	r3, r2
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	701a      	strb	r2, [r3, #0]
    idx++;
 800b5b0:	7dfb      	ldrb	r3, [r7, #23]
 800b5b2:	3301      	adds	r3, #1
 800b5b4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b5b6:	693b      	ldr	r3, [r7, #16]
 800b5b8:	781b      	ldrb	r3, [r3, #0]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d1e7      	bne.n	800b58e <USBD_GetString+0x6a>
 800b5be:	e000      	b.n	800b5c2 <USBD_GetString+0x9e>
    return;
 800b5c0:	bf00      	nop
  }
}
 800b5c2:	3718      	adds	r7, #24
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}

0800b5c8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	b085      	sub	sp, #20
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b5d8:	e005      	b.n	800b5e6 <USBD_GetLen+0x1e>
  {
    len++;
 800b5da:	7bfb      	ldrb	r3, [r7, #15]
 800b5dc:	3301      	adds	r3, #1
 800b5de:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	3301      	adds	r3, #1
 800b5e4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	781b      	ldrb	r3, [r3, #0]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d1f5      	bne.n	800b5da <USBD_GetLen+0x12>
  }

  return len;
 800b5ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	3714      	adds	r7, #20
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fa:	4770      	bx	lr

0800b5fc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b084      	sub	sp, #16
 800b600:	af00      	add	r7, sp, #0
 800b602:	60f8      	str	r0, [r7, #12]
 800b604:	60b9      	str	r1, [r7, #8]
 800b606:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	2202      	movs	r2, #2
 800b60c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	687a      	ldr	r2, [r7, #4]
 800b614:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	687a      	ldr	r2, [r7, #4]
 800b61a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	68ba      	ldr	r2, [r7, #8]
 800b620:	2100      	movs	r1, #0
 800b622:	68f8      	ldr	r0, [r7, #12]
 800b624:	f000 fced 	bl	800c002 <USBD_LL_Transmit>

  return USBD_OK;
 800b628:	2300      	movs	r3, #0
}
 800b62a:	4618      	mov	r0, r3
 800b62c:	3710      	adds	r7, #16
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd80      	pop	{r7, pc}

0800b632 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b632:	b580      	push	{r7, lr}
 800b634:	b084      	sub	sp, #16
 800b636:	af00      	add	r7, sp, #0
 800b638:	60f8      	str	r0, [r7, #12]
 800b63a:	60b9      	str	r1, [r7, #8]
 800b63c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	68ba      	ldr	r2, [r7, #8]
 800b642:	2100      	movs	r1, #0
 800b644:	68f8      	ldr	r0, [r7, #12]
 800b646:	f000 fcdc 	bl	800c002 <USBD_LL_Transmit>

  return USBD_OK;
 800b64a:	2300      	movs	r3, #0
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3710      	adds	r7, #16
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}

0800b654 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b084      	sub	sp, #16
 800b658:	af00      	add	r7, sp, #0
 800b65a:	60f8      	str	r0, [r7, #12]
 800b65c:	60b9      	str	r1, [r7, #8]
 800b65e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	2203      	movs	r2, #3
 800b664:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	687a      	ldr	r2, [r7, #4]
 800b66c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	687a      	ldr	r2, [r7, #4]
 800b674:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	68ba      	ldr	r2, [r7, #8]
 800b67c:	2100      	movs	r1, #0
 800b67e:	68f8      	ldr	r0, [r7, #12]
 800b680:	f000 fce0 	bl	800c044 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b684:	2300      	movs	r3, #0
}
 800b686:	4618      	mov	r0, r3
 800b688:	3710      	adds	r7, #16
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}

0800b68e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b68e:	b580      	push	{r7, lr}
 800b690:	b084      	sub	sp, #16
 800b692:	af00      	add	r7, sp, #0
 800b694:	60f8      	str	r0, [r7, #12]
 800b696:	60b9      	str	r1, [r7, #8]
 800b698:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	68ba      	ldr	r2, [r7, #8]
 800b69e:	2100      	movs	r1, #0
 800b6a0:	68f8      	ldr	r0, [r7, #12]
 800b6a2:	f000 fccf 	bl	800c044 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b6a6:	2300      	movs	r3, #0
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3710      	adds	r7, #16
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}

0800b6b0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b082      	sub	sp, #8
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2204      	movs	r2, #4
 800b6bc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	2100      	movs	r1, #0
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f000 fc9b 	bl	800c002 <USBD_LL_Transmit>

  return USBD_OK;
 800b6cc:	2300      	movs	r3, #0
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3708      	adds	r7, #8
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}

0800b6d6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b6d6:	b580      	push	{r7, lr}
 800b6d8:	b082      	sub	sp, #8
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2205      	movs	r2, #5
 800b6e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	2100      	movs	r1, #0
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f000 fca9 	bl	800c044 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b6f2:	2300      	movs	r3, #0
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	3708      	adds	r7, #8
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}

0800b6fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b700:	2200      	movs	r2, #0
 800b702:	4912      	ldr	r1, [pc, #72]	@ (800b74c <MX_USB_DEVICE_Init+0x50>)
 800b704:	4812      	ldr	r0, [pc, #72]	@ (800b750 <MX_USB_DEVICE_Init+0x54>)
 800b706:	f7fe fccd 	bl	800a0a4 <USBD_Init>
 800b70a:	4603      	mov	r3, r0
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d001      	beq.n	800b714 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b710:	f7f6 fb28 	bl	8001d64 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b714:	490f      	ldr	r1, [pc, #60]	@ (800b754 <MX_USB_DEVICE_Init+0x58>)
 800b716:	480e      	ldr	r0, [pc, #56]	@ (800b750 <MX_USB_DEVICE_Init+0x54>)
 800b718:	f7fe fcf4 	bl	800a104 <USBD_RegisterClass>
 800b71c:	4603      	mov	r3, r0
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d001      	beq.n	800b726 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b722:	f7f6 fb1f 	bl	8001d64 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b726:	490c      	ldr	r1, [pc, #48]	@ (800b758 <MX_USB_DEVICE_Init+0x5c>)
 800b728:	4809      	ldr	r0, [pc, #36]	@ (800b750 <MX_USB_DEVICE_Init+0x54>)
 800b72a:	f7fe fc2b 	bl	8009f84 <USBD_CDC_RegisterInterface>
 800b72e:	4603      	mov	r3, r0
 800b730:	2b00      	cmp	r3, #0
 800b732:	d001      	beq.n	800b738 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b734:	f7f6 fb16 	bl	8001d64 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b738:	4805      	ldr	r0, [pc, #20]	@ (800b750 <MX_USB_DEVICE_Init+0x54>)
 800b73a:	f7fe fd19 	bl	800a170 <USBD_Start>
 800b73e:	4603      	mov	r3, r0
 800b740:	2b00      	cmp	r3, #0
 800b742:	d001      	beq.n	800b748 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b744:	f7f6 fb0e 	bl	8001d64 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b748:	bf00      	nop
 800b74a:	bd80      	pop	{r7, pc}
 800b74c:	200000ac 	.word	0x200000ac
 800b750:	20011068 	.word	0x20011068
 800b754:	20000018 	.word	0x20000018
 800b758:	20000098 	.word	0x20000098

0800b75c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b760:	2200      	movs	r2, #0
 800b762:	4905      	ldr	r1, [pc, #20]	@ (800b778 <CDC_Init_FS+0x1c>)
 800b764:	4805      	ldr	r0, [pc, #20]	@ (800b77c <CDC_Init_FS+0x20>)
 800b766:	f7fe fc27 	bl	8009fb8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b76a:	4905      	ldr	r1, [pc, #20]	@ (800b780 <CDC_Init_FS+0x24>)
 800b76c:	4803      	ldr	r0, [pc, #12]	@ (800b77c <CDC_Init_FS+0x20>)
 800b76e:	f7fe fc45 	bl	8009ffc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b772:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b774:	4618      	mov	r0, r3
 800b776:	bd80      	pop	{r7, pc}
 800b778:	20011b44 	.word	0x20011b44
 800b77c:	20011068 	.word	0x20011068
 800b780:	20011344 	.word	0x20011344

0800b784 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b784:	b480      	push	{r7}
 800b786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b788:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	46bd      	mov	sp, r7
 800b78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b792:	4770      	bx	lr

0800b794 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b794:	b480      	push	{r7}
 800b796:	b083      	sub	sp, #12
 800b798:	af00      	add	r7, sp, #0
 800b79a:	4603      	mov	r3, r0
 800b79c:	6039      	str	r1, [r7, #0]
 800b79e:	71fb      	strb	r3, [r7, #7]
 800b7a0:	4613      	mov	r3, r2
 800b7a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b7a4:	79fb      	ldrb	r3, [r7, #7]
 800b7a6:	2b23      	cmp	r3, #35	@ 0x23
 800b7a8:	d84a      	bhi.n	800b840 <CDC_Control_FS+0xac>
 800b7aa:	a201      	add	r2, pc, #4	@ (adr r2, 800b7b0 <CDC_Control_FS+0x1c>)
 800b7ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7b0:	0800b841 	.word	0x0800b841
 800b7b4:	0800b841 	.word	0x0800b841
 800b7b8:	0800b841 	.word	0x0800b841
 800b7bc:	0800b841 	.word	0x0800b841
 800b7c0:	0800b841 	.word	0x0800b841
 800b7c4:	0800b841 	.word	0x0800b841
 800b7c8:	0800b841 	.word	0x0800b841
 800b7cc:	0800b841 	.word	0x0800b841
 800b7d0:	0800b841 	.word	0x0800b841
 800b7d4:	0800b841 	.word	0x0800b841
 800b7d8:	0800b841 	.word	0x0800b841
 800b7dc:	0800b841 	.word	0x0800b841
 800b7e0:	0800b841 	.word	0x0800b841
 800b7e4:	0800b841 	.word	0x0800b841
 800b7e8:	0800b841 	.word	0x0800b841
 800b7ec:	0800b841 	.word	0x0800b841
 800b7f0:	0800b841 	.word	0x0800b841
 800b7f4:	0800b841 	.word	0x0800b841
 800b7f8:	0800b841 	.word	0x0800b841
 800b7fc:	0800b841 	.word	0x0800b841
 800b800:	0800b841 	.word	0x0800b841
 800b804:	0800b841 	.word	0x0800b841
 800b808:	0800b841 	.word	0x0800b841
 800b80c:	0800b841 	.word	0x0800b841
 800b810:	0800b841 	.word	0x0800b841
 800b814:	0800b841 	.word	0x0800b841
 800b818:	0800b841 	.word	0x0800b841
 800b81c:	0800b841 	.word	0x0800b841
 800b820:	0800b841 	.word	0x0800b841
 800b824:	0800b841 	.word	0x0800b841
 800b828:	0800b841 	.word	0x0800b841
 800b82c:	0800b841 	.word	0x0800b841
 800b830:	0800b841 	.word	0x0800b841
 800b834:	0800b841 	.word	0x0800b841
 800b838:	0800b841 	.word	0x0800b841
 800b83c:	0800b841 	.word	0x0800b841
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b840:	bf00      	nop
  }

  return (USBD_OK);
 800b842:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b844:	4618      	mov	r0, r3
 800b846:	370c      	adds	r7, #12
 800b848:	46bd      	mov	sp, r7
 800b84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84e:	4770      	bx	lr

0800b850 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b082      	sub	sp, #8
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
 800b858:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b85a:	6879      	ldr	r1, [r7, #4]
 800b85c:	4805      	ldr	r0, [pc, #20]	@ (800b874 <CDC_Receive_FS+0x24>)
 800b85e:	f7fe fbcd 	bl	8009ffc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b862:	4804      	ldr	r0, [pc, #16]	@ (800b874 <CDC_Receive_FS+0x24>)
 800b864:	f7fe fbe8 	bl	800a038 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b868:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	3708      	adds	r7, #8
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}
 800b872:	bf00      	nop
 800b874:	20011068 	.word	0x20011068

0800b878 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b878:	b480      	push	{r7}
 800b87a:	b087      	sub	sp, #28
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	60f8      	str	r0, [r7, #12]
 800b880:	60b9      	str	r1, [r7, #8]
 800b882:	4613      	mov	r3, r2
 800b884:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b886:	2300      	movs	r3, #0
 800b888:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b88a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b88e:	4618      	mov	r0, r3
 800b890:	371c      	adds	r7, #28
 800b892:	46bd      	mov	sp, r7
 800b894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b898:	4770      	bx	lr
	...

0800b89c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b89c:	b480      	push	{r7}
 800b89e:	b083      	sub	sp, #12
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	6039      	str	r1, [r7, #0]
 800b8a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	2212      	movs	r2, #18
 800b8ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b8ae:	4b03      	ldr	r3, [pc, #12]	@ (800b8bc <USBD_FS_DeviceDescriptor+0x20>)
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	370c      	adds	r7, #12
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ba:	4770      	bx	lr
 800b8bc:	200000cc 	.word	0x200000cc

0800b8c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b083      	sub	sp, #12
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	6039      	str	r1, [r7, #0]
 800b8ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	2204      	movs	r2, #4
 800b8d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b8d2:	4b03      	ldr	r3, [pc, #12]	@ (800b8e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	370c      	adds	r7, #12
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8de:	4770      	bx	lr
 800b8e0:	200000ec 	.word	0x200000ec

0800b8e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b082      	sub	sp, #8
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	6039      	str	r1, [r7, #0]
 800b8ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b8f0:	79fb      	ldrb	r3, [r7, #7]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d105      	bne.n	800b902 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b8f6:	683a      	ldr	r2, [r7, #0]
 800b8f8:	4907      	ldr	r1, [pc, #28]	@ (800b918 <USBD_FS_ProductStrDescriptor+0x34>)
 800b8fa:	4808      	ldr	r0, [pc, #32]	@ (800b91c <USBD_FS_ProductStrDescriptor+0x38>)
 800b8fc:	f7ff fe12 	bl	800b524 <USBD_GetString>
 800b900:	e004      	b.n	800b90c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b902:	683a      	ldr	r2, [r7, #0]
 800b904:	4904      	ldr	r1, [pc, #16]	@ (800b918 <USBD_FS_ProductStrDescriptor+0x34>)
 800b906:	4805      	ldr	r0, [pc, #20]	@ (800b91c <USBD_FS_ProductStrDescriptor+0x38>)
 800b908:	f7ff fe0c 	bl	800b524 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b90c:	4b02      	ldr	r3, [pc, #8]	@ (800b918 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b90e:	4618      	mov	r0, r3
 800b910:	3708      	adds	r7, #8
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}
 800b916:	bf00      	nop
 800b918:	20012344 	.word	0x20012344
 800b91c:	08010cdc 	.word	0x08010cdc

0800b920 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b082      	sub	sp, #8
 800b924:	af00      	add	r7, sp, #0
 800b926:	4603      	mov	r3, r0
 800b928:	6039      	str	r1, [r7, #0]
 800b92a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b92c:	683a      	ldr	r2, [r7, #0]
 800b92e:	4904      	ldr	r1, [pc, #16]	@ (800b940 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b930:	4804      	ldr	r0, [pc, #16]	@ (800b944 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b932:	f7ff fdf7 	bl	800b524 <USBD_GetString>
  return USBD_StrDesc;
 800b936:	4b02      	ldr	r3, [pc, #8]	@ (800b940 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3708      	adds	r7, #8
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}
 800b940:	20012344 	.word	0x20012344
 800b944:	08010cf4 	.word	0x08010cf4

0800b948 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b082      	sub	sp, #8
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	4603      	mov	r3, r0
 800b950:	6039      	str	r1, [r7, #0]
 800b952:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	221a      	movs	r2, #26
 800b958:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b95a:	f000 f855 	bl	800ba08 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b95e:	4b02      	ldr	r3, [pc, #8]	@ (800b968 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b960:	4618      	mov	r0, r3
 800b962:	3708      	adds	r7, #8
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}
 800b968:	200000f0 	.word	0x200000f0

0800b96c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b082      	sub	sp, #8
 800b970:	af00      	add	r7, sp, #0
 800b972:	4603      	mov	r3, r0
 800b974:	6039      	str	r1, [r7, #0]
 800b976:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b978:	79fb      	ldrb	r3, [r7, #7]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d105      	bne.n	800b98a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b97e:	683a      	ldr	r2, [r7, #0]
 800b980:	4907      	ldr	r1, [pc, #28]	@ (800b9a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b982:	4808      	ldr	r0, [pc, #32]	@ (800b9a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b984:	f7ff fdce 	bl	800b524 <USBD_GetString>
 800b988:	e004      	b.n	800b994 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b98a:	683a      	ldr	r2, [r7, #0]
 800b98c:	4904      	ldr	r1, [pc, #16]	@ (800b9a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b98e:	4805      	ldr	r0, [pc, #20]	@ (800b9a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b990:	f7ff fdc8 	bl	800b524 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b994:	4b02      	ldr	r3, [pc, #8]	@ (800b9a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b996:	4618      	mov	r0, r3
 800b998:	3708      	adds	r7, #8
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}
 800b99e:	bf00      	nop
 800b9a0:	20012344 	.word	0x20012344
 800b9a4:	08010d08 	.word	0x08010d08

0800b9a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b082      	sub	sp, #8
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	6039      	str	r1, [r7, #0]
 800b9b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b9b4:	79fb      	ldrb	r3, [r7, #7]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d105      	bne.n	800b9c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b9ba:	683a      	ldr	r2, [r7, #0]
 800b9bc:	4907      	ldr	r1, [pc, #28]	@ (800b9dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b9be:	4808      	ldr	r0, [pc, #32]	@ (800b9e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b9c0:	f7ff fdb0 	bl	800b524 <USBD_GetString>
 800b9c4:	e004      	b.n	800b9d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b9c6:	683a      	ldr	r2, [r7, #0]
 800b9c8:	4904      	ldr	r1, [pc, #16]	@ (800b9dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b9ca:	4805      	ldr	r0, [pc, #20]	@ (800b9e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b9cc:	f7ff fdaa 	bl	800b524 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b9d0:	4b02      	ldr	r3, [pc, #8]	@ (800b9dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3708      	adds	r7, #8
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}
 800b9da:	bf00      	nop
 800b9dc:	20012344 	.word	0x20012344
 800b9e0:	08010d14 	.word	0x08010d14

0800b9e4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b083      	sub	sp, #12
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	6039      	str	r1, [r7, #0]
 800b9ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	220c      	movs	r2, #12
 800b9f4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b9f6:	4b03      	ldr	r3, [pc, #12]	@ (800ba04 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	370c      	adds	r7, #12
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba02:	4770      	bx	lr
 800ba04:	200000e0 	.word	0x200000e0

0800ba08 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b084      	sub	sp, #16
 800ba0c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ba0e:	4b0f      	ldr	r3, [pc, #60]	@ (800ba4c <Get_SerialNum+0x44>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ba14:	4b0e      	ldr	r3, [pc, #56]	@ (800ba50 <Get_SerialNum+0x48>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ba1a:	4b0e      	ldr	r3, [pc, #56]	@ (800ba54 <Get_SerialNum+0x4c>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ba20:	68fa      	ldr	r2, [r7, #12]
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	4413      	add	r3, r2
 800ba26:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d009      	beq.n	800ba42 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ba2e:	2208      	movs	r2, #8
 800ba30:	4909      	ldr	r1, [pc, #36]	@ (800ba58 <Get_SerialNum+0x50>)
 800ba32:	68f8      	ldr	r0, [r7, #12]
 800ba34:	f000 f814 	bl	800ba60 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ba38:	2204      	movs	r2, #4
 800ba3a:	4908      	ldr	r1, [pc, #32]	@ (800ba5c <Get_SerialNum+0x54>)
 800ba3c:	68b8      	ldr	r0, [r7, #8]
 800ba3e:	f000 f80f 	bl	800ba60 <IntToUnicode>
  }
}
 800ba42:	bf00      	nop
 800ba44:	3710      	adds	r7, #16
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}
 800ba4a:	bf00      	nop
 800ba4c:	1fff7a10 	.word	0x1fff7a10
 800ba50:	1fff7a14 	.word	0x1fff7a14
 800ba54:	1fff7a18 	.word	0x1fff7a18
 800ba58:	200000f2 	.word	0x200000f2
 800ba5c:	20000102 	.word	0x20000102

0800ba60 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ba60:	b480      	push	{r7}
 800ba62:	b087      	sub	sp, #28
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	60f8      	str	r0, [r7, #12]
 800ba68:	60b9      	str	r1, [r7, #8]
 800ba6a:	4613      	mov	r3, r2
 800ba6c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ba6e:	2300      	movs	r3, #0
 800ba70:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ba72:	2300      	movs	r3, #0
 800ba74:	75fb      	strb	r3, [r7, #23]
 800ba76:	e027      	b.n	800bac8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	0f1b      	lsrs	r3, r3, #28
 800ba7c:	2b09      	cmp	r3, #9
 800ba7e:	d80b      	bhi.n	800ba98 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	0f1b      	lsrs	r3, r3, #28
 800ba84:	b2da      	uxtb	r2, r3
 800ba86:	7dfb      	ldrb	r3, [r7, #23]
 800ba88:	005b      	lsls	r3, r3, #1
 800ba8a:	4619      	mov	r1, r3
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	440b      	add	r3, r1
 800ba90:	3230      	adds	r2, #48	@ 0x30
 800ba92:	b2d2      	uxtb	r2, r2
 800ba94:	701a      	strb	r2, [r3, #0]
 800ba96:	e00a      	b.n	800baae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	0f1b      	lsrs	r3, r3, #28
 800ba9c:	b2da      	uxtb	r2, r3
 800ba9e:	7dfb      	ldrb	r3, [r7, #23]
 800baa0:	005b      	lsls	r3, r3, #1
 800baa2:	4619      	mov	r1, r3
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	440b      	add	r3, r1
 800baa8:	3237      	adds	r2, #55	@ 0x37
 800baaa:	b2d2      	uxtb	r2, r2
 800baac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	011b      	lsls	r3, r3, #4
 800bab2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bab4:	7dfb      	ldrb	r3, [r7, #23]
 800bab6:	005b      	lsls	r3, r3, #1
 800bab8:	3301      	adds	r3, #1
 800baba:	68ba      	ldr	r2, [r7, #8]
 800babc:	4413      	add	r3, r2
 800babe:	2200      	movs	r2, #0
 800bac0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bac2:	7dfb      	ldrb	r3, [r7, #23]
 800bac4:	3301      	adds	r3, #1
 800bac6:	75fb      	strb	r3, [r7, #23]
 800bac8:	7dfa      	ldrb	r2, [r7, #23]
 800baca:	79fb      	ldrb	r3, [r7, #7]
 800bacc:	429a      	cmp	r2, r3
 800bace:	d3d3      	bcc.n	800ba78 <IntToUnicode+0x18>
  }
}
 800bad0:	bf00      	nop
 800bad2:	bf00      	nop
 800bad4:	371c      	adds	r7, #28
 800bad6:	46bd      	mov	sp, r7
 800bad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800badc:	4770      	bx	lr
	...

0800bae0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b0a0      	sub	sp, #128	@ 0x80
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bae8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800baec:	2200      	movs	r2, #0
 800baee:	601a      	str	r2, [r3, #0]
 800baf0:	605a      	str	r2, [r3, #4]
 800baf2:	609a      	str	r2, [r3, #8]
 800baf4:	60da      	str	r2, [r3, #12]
 800baf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800baf8:	f107 0310 	add.w	r3, r7, #16
 800bafc:	225c      	movs	r2, #92	@ 0x5c
 800bafe:	2100      	movs	r1, #0
 800bb00:	4618      	mov	r0, r3
 800bb02:	f001 fb9d 	bl	800d240 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bb0e:	d149      	bne.n	800bba4 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800bb10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bb14:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800bb16:	2300      	movs	r3, #0
 800bb18:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800bb1a:	f107 0310 	add.w	r3, r7, #16
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f7f9 fd46 	bl	80055b0 <HAL_RCCEx_PeriphCLKConfig>
 800bb24:	4603      	mov	r3, r0
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d001      	beq.n	800bb2e <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800bb2a:	f7f6 f91b 	bl	8001d64 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bb2e:	2300      	movs	r3, #0
 800bb30:	60fb      	str	r3, [r7, #12]
 800bb32:	4b1e      	ldr	r3, [pc, #120]	@ (800bbac <HAL_PCD_MspInit+0xcc>)
 800bb34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb36:	4a1d      	ldr	r2, [pc, #116]	@ (800bbac <HAL_PCD_MspInit+0xcc>)
 800bb38:	f043 0301 	orr.w	r3, r3, #1
 800bb3c:	6313      	str	r3, [r2, #48]	@ 0x30
 800bb3e:	4b1b      	ldr	r3, [pc, #108]	@ (800bbac <HAL_PCD_MspInit+0xcc>)
 800bb40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb42:	f003 0301 	and.w	r3, r3, #1
 800bb46:	60fb      	str	r3, [r7, #12]
 800bb48:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bb4a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800bb4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bb50:	2302      	movs	r3, #2
 800bb52:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb54:	2300      	movs	r3, #0
 800bb56:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bb58:	2303      	movs	r3, #3
 800bb5a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bb5c:	230a      	movs	r3, #10
 800bb5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bb60:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800bb64:	4619      	mov	r1, r3
 800bb66:	4812      	ldr	r0, [pc, #72]	@ (800bbb0 <HAL_PCD_MspInit+0xd0>)
 800bb68:	f7f7 ffbc 	bl	8003ae4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bb6c:	4b0f      	ldr	r3, [pc, #60]	@ (800bbac <HAL_PCD_MspInit+0xcc>)
 800bb6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb70:	4a0e      	ldr	r2, [pc, #56]	@ (800bbac <HAL_PCD_MspInit+0xcc>)
 800bb72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb76:	6353      	str	r3, [r2, #52]	@ 0x34
 800bb78:	2300      	movs	r3, #0
 800bb7a:	60bb      	str	r3, [r7, #8]
 800bb7c:	4b0b      	ldr	r3, [pc, #44]	@ (800bbac <HAL_PCD_MspInit+0xcc>)
 800bb7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb80:	4a0a      	ldr	r2, [pc, #40]	@ (800bbac <HAL_PCD_MspInit+0xcc>)
 800bb82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800bb86:	6453      	str	r3, [r2, #68]	@ 0x44
 800bb88:	4b08      	ldr	r3, [pc, #32]	@ (800bbac <HAL_PCD_MspInit+0xcc>)
 800bb8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bb90:	60bb      	str	r3, [r7, #8]
 800bb92:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bb94:	2200      	movs	r2, #0
 800bb96:	2100      	movs	r1, #0
 800bb98:	2043      	movs	r0, #67	@ 0x43
 800bb9a:	f7f7 fb82 	bl	80032a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bb9e:	2043      	movs	r0, #67	@ 0x43
 800bba0:	f7f7 fb9b 	bl	80032da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bba4:	bf00      	nop
 800bba6:	3780      	adds	r7, #128	@ 0x80
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}
 800bbac:	40023800 	.word	0x40023800
 800bbb0:	40020000 	.word	0x40020000

0800bbb4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b082      	sub	sp, #8
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bbc8:	4619      	mov	r1, r3
 800bbca:	4610      	mov	r0, r2
 800bbcc:	f7fe fb1d 	bl	800a20a <USBD_LL_SetupStage>
}
 800bbd0:	bf00      	nop
 800bbd2:	3708      	adds	r7, #8
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}

0800bbd8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b082      	sub	sp, #8
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
 800bbe0:	460b      	mov	r3, r1
 800bbe2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800bbea:	78fa      	ldrb	r2, [r7, #3]
 800bbec:	6879      	ldr	r1, [r7, #4]
 800bbee:	4613      	mov	r3, r2
 800bbf0:	00db      	lsls	r3, r3, #3
 800bbf2:	4413      	add	r3, r2
 800bbf4:	009b      	lsls	r3, r3, #2
 800bbf6:	440b      	add	r3, r1
 800bbf8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800bbfc:	681a      	ldr	r2, [r3, #0]
 800bbfe:	78fb      	ldrb	r3, [r7, #3]
 800bc00:	4619      	mov	r1, r3
 800bc02:	f7fe fb57 	bl	800a2b4 <USBD_LL_DataOutStage>
}
 800bc06:	bf00      	nop
 800bc08:	3708      	adds	r7, #8
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}

0800bc0e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc0e:	b580      	push	{r7, lr}
 800bc10:	b082      	sub	sp, #8
 800bc12:	af00      	add	r7, sp, #0
 800bc14:	6078      	str	r0, [r7, #4]
 800bc16:	460b      	mov	r3, r1
 800bc18:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800bc20:	78fa      	ldrb	r2, [r7, #3]
 800bc22:	6879      	ldr	r1, [r7, #4]
 800bc24:	4613      	mov	r3, r2
 800bc26:	00db      	lsls	r3, r3, #3
 800bc28:	4413      	add	r3, r2
 800bc2a:	009b      	lsls	r3, r3, #2
 800bc2c:	440b      	add	r3, r1
 800bc2e:	3320      	adds	r3, #32
 800bc30:	681a      	ldr	r2, [r3, #0]
 800bc32:	78fb      	ldrb	r3, [r7, #3]
 800bc34:	4619      	mov	r1, r3
 800bc36:	f7fe fbf0 	bl	800a41a <USBD_LL_DataInStage>
}
 800bc3a:	bf00      	nop
 800bc3c:	3708      	adds	r7, #8
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}

0800bc42 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc42:	b580      	push	{r7, lr}
 800bc44:	b082      	sub	sp, #8
 800bc46:	af00      	add	r7, sp, #0
 800bc48:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bc50:	4618      	mov	r0, r3
 800bc52:	f7fe fd2a 	bl	800a6aa <USBD_LL_SOF>
}
 800bc56:	bf00      	nop
 800bc58:	3708      	adds	r7, #8
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}

0800bc5e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc5e:	b580      	push	{r7, lr}
 800bc60:	b084      	sub	sp, #16
 800bc62:	af00      	add	r7, sp, #0
 800bc64:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bc66:	2301      	movs	r3, #1
 800bc68:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	79db      	ldrb	r3, [r3, #7]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d102      	bne.n	800bc78 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800bc72:	2300      	movs	r3, #0
 800bc74:	73fb      	strb	r3, [r7, #15]
 800bc76:	e008      	b.n	800bc8a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	79db      	ldrb	r3, [r3, #7]
 800bc7c:	2b02      	cmp	r3, #2
 800bc7e:	d102      	bne.n	800bc86 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800bc80:	2301      	movs	r3, #1
 800bc82:	73fb      	strb	r3, [r7, #15]
 800bc84:	e001      	b.n	800bc8a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800bc86:	f7f6 f86d 	bl	8001d64 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bc90:	7bfa      	ldrb	r2, [r7, #15]
 800bc92:	4611      	mov	r1, r2
 800bc94:	4618      	mov	r0, r3
 800bc96:	f7fe fcc4 	bl	800a622 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bca0:	4618      	mov	r0, r3
 800bca2:	f7fe fc6c 	bl	800a57e <USBD_LL_Reset>
}
 800bca6:	bf00      	nop
 800bca8:	3710      	adds	r7, #16
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	bd80      	pop	{r7, pc}
	...

0800bcb0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b082      	sub	sp, #8
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f7fe fcbf 	bl	800a642 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	687a      	ldr	r2, [r7, #4]
 800bcd0:	6812      	ldr	r2, [r2, #0]
 800bcd2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bcd6:	f043 0301 	orr.w	r3, r3, #1
 800bcda:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	7adb      	ldrb	r3, [r3, #11]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d005      	beq.n	800bcf0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bce4:	4b04      	ldr	r3, [pc, #16]	@ (800bcf8 <HAL_PCD_SuspendCallback+0x48>)
 800bce6:	691b      	ldr	r3, [r3, #16]
 800bce8:	4a03      	ldr	r2, [pc, #12]	@ (800bcf8 <HAL_PCD_SuspendCallback+0x48>)
 800bcea:	f043 0306 	orr.w	r3, r3, #6
 800bcee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bcf0:	bf00      	nop
 800bcf2:	3708      	adds	r7, #8
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}
 800bcf8:	e000ed00 	.word	0xe000ed00

0800bcfc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b082      	sub	sp, #8
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f7fe fcb5 	bl	800a67a <USBD_LL_Resume>
}
 800bd10:	bf00      	nop
 800bd12:	3708      	adds	r7, #8
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}

0800bd18 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b082      	sub	sp, #8
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
 800bd20:	460b      	mov	r3, r1
 800bd22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bd2a:	78fa      	ldrb	r2, [r7, #3]
 800bd2c:	4611      	mov	r1, r2
 800bd2e:	4618      	mov	r0, r3
 800bd30:	f7fe fd0d 	bl	800a74e <USBD_LL_IsoOUTIncomplete>
}
 800bd34:	bf00      	nop
 800bd36:	3708      	adds	r7, #8
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}

0800bd3c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b082      	sub	sp, #8
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	460b      	mov	r3, r1
 800bd46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bd4e:	78fa      	ldrb	r2, [r7, #3]
 800bd50:	4611      	mov	r1, r2
 800bd52:	4618      	mov	r0, r3
 800bd54:	f7fe fcc9 	bl	800a6ea <USBD_LL_IsoINIncomplete>
}
 800bd58:	bf00      	nop
 800bd5a:	3708      	adds	r7, #8
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}

0800bd60 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b082      	sub	sp, #8
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f7fe fd1f 	bl	800a7b2 <USBD_LL_DevConnected>
}
 800bd74:	bf00      	nop
 800bd76:	3708      	adds	r7, #8
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}

0800bd7c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b082      	sub	sp, #8
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f7fe fd1c 	bl	800a7c8 <USBD_LL_DevDisconnected>
}
 800bd90:	bf00      	nop
 800bd92:	3708      	adds	r7, #8
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}

0800bd98 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b082      	sub	sp, #8
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	781b      	ldrb	r3, [r3, #0]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d13c      	bne.n	800be22 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bda8:	4a20      	ldr	r2, [pc, #128]	@ (800be2c <USBD_LL_Init+0x94>)
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	4a1e      	ldr	r2, [pc, #120]	@ (800be2c <USBD_LL_Init+0x94>)
 800bdb4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bdb8:	4b1c      	ldr	r3, [pc, #112]	@ (800be2c <USBD_LL_Init+0x94>)
 800bdba:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800bdbe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800bdc0:	4b1a      	ldr	r3, [pc, #104]	@ (800be2c <USBD_LL_Init+0x94>)
 800bdc2:	2206      	movs	r2, #6
 800bdc4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bdc6:	4b19      	ldr	r3, [pc, #100]	@ (800be2c <USBD_LL_Init+0x94>)
 800bdc8:	2202      	movs	r2, #2
 800bdca:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bdcc:	4b17      	ldr	r3, [pc, #92]	@ (800be2c <USBD_LL_Init+0x94>)
 800bdce:	2200      	movs	r2, #0
 800bdd0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bdd2:	4b16      	ldr	r3, [pc, #88]	@ (800be2c <USBD_LL_Init+0x94>)
 800bdd4:	2202      	movs	r2, #2
 800bdd6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bdd8:	4b14      	ldr	r3, [pc, #80]	@ (800be2c <USBD_LL_Init+0x94>)
 800bdda:	2200      	movs	r2, #0
 800bddc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bdde:	4b13      	ldr	r3, [pc, #76]	@ (800be2c <USBD_LL_Init+0x94>)
 800bde0:	2200      	movs	r2, #0
 800bde2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bde4:	4b11      	ldr	r3, [pc, #68]	@ (800be2c <USBD_LL_Init+0x94>)
 800bde6:	2200      	movs	r2, #0
 800bde8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800bdea:	4b10      	ldr	r3, [pc, #64]	@ (800be2c <USBD_LL_Init+0x94>)
 800bdec:	2200      	movs	r2, #0
 800bdee:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bdf0:	4b0e      	ldr	r3, [pc, #56]	@ (800be2c <USBD_LL_Init+0x94>)
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bdf6:	480d      	ldr	r0, [pc, #52]	@ (800be2c <USBD_LL_Init+0x94>)
 800bdf8:	f7f8 f821 	bl	8003e3e <HAL_PCD_Init>
 800bdfc:	4603      	mov	r3, r0
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d001      	beq.n	800be06 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800be02:	f7f5 ffaf 	bl	8001d64 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800be06:	2180      	movs	r1, #128	@ 0x80
 800be08:	4808      	ldr	r0, [pc, #32]	@ (800be2c <USBD_LL_Init+0x94>)
 800be0a:	f7f9 fa82 	bl	8005312 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800be0e:	2240      	movs	r2, #64	@ 0x40
 800be10:	2100      	movs	r1, #0
 800be12:	4806      	ldr	r0, [pc, #24]	@ (800be2c <USBD_LL_Init+0x94>)
 800be14:	f7f9 fa36 	bl	8005284 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800be18:	2280      	movs	r2, #128	@ 0x80
 800be1a:	2101      	movs	r1, #1
 800be1c:	4803      	ldr	r0, [pc, #12]	@ (800be2c <USBD_LL_Init+0x94>)
 800be1e:	f7f9 fa31 	bl	8005284 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800be22:	2300      	movs	r3, #0
}
 800be24:	4618      	mov	r0, r3
 800be26:	3708      	adds	r7, #8
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}
 800be2c:	20012544 	.word	0x20012544

0800be30 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b084      	sub	sp, #16
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be38:	2300      	movs	r3, #0
 800be3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be3c:	2300      	movs	r3, #0
 800be3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800be46:	4618      	mov	r0, r3
 800be48:	f7f8 f90f 	bl	800406a <HAL_PCD_Start>
 800be4c:	4603      	mov	r3, r0
 800be4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be50:	7bfb      	ldrb	r3, [r7, #15]
 800be52:	4618      	mov	r0, r3
 800be54:	f000 f990 	bl	800c178 <USBD_Get_USB_Status>
 800be58:	4603      	mov	r3, r0
 800be5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be5c:	7bbb      	ldrb	r3, [r7, #14]
}
 800be5e:	4618      	mov	r0, r3
 800be60:	3710      	adds	r7, #16
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}

0800be66 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800be66:	b580      	push	{r7, lr}
 800be68:	b084      	sub	sp, #16
 800be6a:	af00      	add	r7, sp, #0
 800be6c:	6078      	str	r0, [r7, #4]
 800be6e:	4608      	mov	r0, r1
 800be70:	4611      	mov	r1, r2
 800be72:	461a      	mov	r2, r3
 800be74:	4603      	mov	r3, r0
 800be76:	70fb      	strb	r3, [r7, #3]
 800be78:	460b      	mov	r3, r1
 800be7a:	70bb      	strb	r3, [r7, #2]
 800be7c:	4613      	mov	r3, r2
 800be7e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be80:	2300      	movs	r3, #0
 800be82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be84:	2300      	movs	r3, #0
 800be86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800be8e:	78bb      	ldrb	r3, [r7, #2]
 800be90:	883a      	ldrh	r2, [r7, #0]
 800be92:	78f9      	ldrb	r1, [r7, #3]
 800be94:	f7f8 fe10 	bl	8004ab8 <HAL_PCD_EP_Open>
 800be98:	4603      	mov	r3, r0
 800be9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be9c:	7bfb      	ldrb	r3, [r7, #15]
 800be9e:	4618      	mov	r0, r3
 800bea0:	f000 f96a 	bl	800c178 <USBD_Get_USB_Status>
 800bea4:	4603      	mov	r3, r0
 800bea6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bea8:	7bbb      	ldrb	r3, [r7, #14]
}
 800beaa:	4618      	mov	r0, r3
 800beac:	3710      	adds	r7, #16
 800beae:	46bd      	mov	sp, r7
 800beb0:	bd80      	pop	{r7, pc}

0800beb2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800beb2:	b580      	push	{r7, lr}
 800beb4:	b084      	sub	sp, #16
 800beb6:	af00      	add	r7, sp, #0
 800beb8:	6078      	str	r0, [r7, #4]
 800beba:	460b      	mov	r3, r1
 800bebc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bebe:	2300      	movs	r3, #0
 800bec0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bec2:	2300      	movs	r3, #0
 800bec4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800becc:	78fa      	ldrb	r2, [r7, #3]
 800bece:	4611      	mov	r1, r2
 800bed0:	4618      	mov	r0, r3
 800bed2:	f7f8 fe5b 	bl	8004b8c <HAL_PCD_EP_Close>
 800bed6:	4603      	mov	r3, r0
 800bed8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800beda:	7bfb      	ldrb	r3, [r7, #15]
 800bedc:	4618      	mov	r0, r3
 800bede:	f000 f94b 	bl	800c178 <USBD_Get_USB_Status>
 800bee2:	4603      	mov	r3, r0
 800bee4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bee6:	7bbb      	ldrb	r3, [r7, #14]
}
 800bee8:	4618      	mov	r0, r3
 800beea:	3710      	adds	r7, #16
 800beec:	46bd      	mov	sp, r7
 800beee:	bd80      	pop	{r7, pc}

0800bef0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b084      	sub	sp, #16
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
 800bef8:	460b      	mov	r3, r1
 800befa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800befc:	2300      	movs	r3, #0
 800befe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf00:	2300      	movs	r3, #0
 800bf02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bf0a:	78fa      	ldrb	r2, [r7, #3]
 800bf0c:	4611      	mov	r1, r2
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f7f8 ff13 	bl	8004d3a <HAL_PCD_EP_SetStall>
 800bf14:	4603      	mov	r3, r0
 800bf16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf18:	7bfb      	ldrb	r3, [r7, #15]
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	f000 f92c 	bl	800c178 <USBD_Get_USB_Status>
 800bf20:	4603      	mov	r3, r0
 800bf22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf24:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	3710      	adds	r7, #16
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}

0800bf2e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf2e:	b580      	push	{r7, lr}
 800bf30:	b084      	sub	sp, #16
 800bf32:	af00      	add	r7, sp, #0
 800bf34:	6078      	str	r0, [r7, #4]
 800bf36:	460b      	mov	r3, r1
 800bf38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bf48:	78fa      	ldrb	r2, [r7, #3]
 800bf4a:	4611      	mov	r1, r2
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	f7f8 ff57 	bl	8004e00 <HAL_PCD_EP_ClrStall>
 800bf52:	4603      	mov	r3, r0
 800bf54:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf56:	7bfb      	ldrb	r3, [r7, #15]
 800bf58:	4618      	mov	r0, r3
 800bf5a:	f000 f90d 	bl	800c178 <USBD_Get_USB_Status>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf62:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf64:	4618      	mov	r0, r3
 800bf66:	3710      	adds	r7, #16
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}

0800bf6c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf6c:	b480      	push	{r7}
 800bf6e:	b085      	sub	sp, #20
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
 800bf74:	460b      	mov	r3, r1
 800bf76:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bf7e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bf80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	da0b      	bge.n	800bfa0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bf88:	78fb      	ldrb	r3, [r7, #3]
 800bf8a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bf8e:	68f9      	ldr	r1, [r7, #12]
 800bf90:	4613      	mov	r3, r2
 800bf92:	00db      	lsls	r3, r3, #3
 800bf94:	4413      	add	r3, r2
 800bf96:	009b      	lsls	r3, r3, #2
 800bf98:	440b      	add	r3, r1
 800bf9a:	3316      	adds	r3, #22
 800bf9c:	781b      	ldrb	r3, [r3, #0]
 800bf9e:	e00b      	b.n	800bfb8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bfa0:	78fb      	ldrb	r3, [r7, #3]
 800bfa2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bfa6:	68f9      	ldr	r1, [r7, #12]
 800bfa8:	4613      	mov	r3, r2
 800bfaa:	00db      	lsls	r3, r3, #3
 800bfac:	4413      	add	r3, r2
 800bfae:	009b      	lsls	r3, r3, #2
 800bfb0:	440b      	add	r3, r1
 800bfb2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800bfb6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	3714      	adds	r7, #20
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc2:	4770      	bx	lr

0800bfc4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b084      	sub	sp, #16
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
 800bfcc:	460b      	mov	r3, r1
 800bfce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bfde:	78fa      	ldrb	r2, [r7, #3]
 800bfe0:	4611      	mov	r1, r2
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f7f8 fd44 	bl	8004a70 <HAL_PCD_SetAddress>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bfec:	7bfb      	ldrb	r3, [r7, #15]
 800bfee:	4618      	mov	r0, r3
 800bff0:	f000 f8c2 	bl	800c178 <USBD_Get_USB_Status>
 800bff4:	4603      	mov	r3, r0
 800bff6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bff8:	7bbb      	ldrb	r3, [r7, #14]
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	3710      	adds	r7, #16
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}

0800c002 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c002:	b580      	push	{r7, lr}
 800c004:	b086      	sub	sp, #24
 800c006:	af00      	add	r7, sp, #0
 800c008:	60f8      	str	r0, [r7, #12]
 800c00a:	607a      	str	r2, [r7, #4]
 800c00c:	603b      	str	r3, [r7, #0]
 800c00e:	460b      	mov	r3, r1
 800c010:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c012:	2300      	movs	r3, #0
 800c014:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c016:	2300      	movs	r3, #0
 800c018:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c020:	7af9      	ldrb	r1, [r7, #11]
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	687a      	ldr	r2, [r7, #4]
 800c026:	f7f8 fe4e 	bl	8004cc6 <HAL_PCD_EP_Transmit>
 800c02a:	4603      	mov	r3, r0
 800c02c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c02e:	7dfb      	ldrb	r3, [r7, #23]
 800c030:	4618      	mov	r0, r3
 800c032:	f000 f8a1 	bl	800c178 <USBD_Get_USB_Status>
 800c036:	4603      	mov	r3, r0
 800c038:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c03a:	7dbb      	ldrb	r3, [r7, #22]
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	3718      	adds	r7, #24
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}

0800c044 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b086      	sub	sp, #24
 800c048:	af00      	add	r7, sp, #0
 800c04a:	60f8      	str	r0, [r7, #12]
 800c04c:	607a      	str	r2, [r7, #4]
 800c04e:	603b      	str	r3, [r7, #0]
 800c050:	460b      	mov	r3, r1
 800c052:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c054:	2300      	movs	r3, #0
 800c056:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c058:	2300      	movs	r3, #0
 800c05a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c062:	7af9      	ldrb	r1, [r7, #11]
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	687a      	ldr	r2, [r7, #4]
 800c068:	f7f8 fdda 	bl	8004c20 <HAL_PCD_EP_Receive>
 800c06c:	4603      	mov	r3, r0
 800c06e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c070:	7dfb      	ldrb	r3, [r7, #23]
 800c072:	4618      	mov	r0, r3
 800c074:	f000 f880 	bl	800c178 <USBD_Get_USB_Status>
 800c078:	4603      	mov	r3, r0
 800c07a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c07c:	7dbb      	ldrb	r3, [r7, #22]
}
 800c07e:	4618      	mov	r0, r3
 800c080:	3718      	adds	r7, #24
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}

0800c086 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c086:	b580      	push	{r7, lr}
 800c088:	b082      	sub	sp, #8
 800c08a:	af00      	add	r7, sp, #0
 800c08c:	6078      	str	r0, [r7, #4]
 800c08e:	460b      	mov	r3, r1
 800c090:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c098:	78fa      	ldrb	r2, [r7, #3]
 800c09a:	4611      	mov	r1, r2
 800c09c:	4618      	mov	r0, r3
 800c09e:	f7f8 fdfa 	bl	8004c96 <HAL_PCD_EP_GetRxCount>
 800c0a2:	4603      	mov	r3, r0
}
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	3708      	adds	r7, #8
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bd80      	pop	{r7, pc}

0800c0ac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b082      	sub	sp, #8
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
 800c0b4:	460b      	mov	r3, r1
 800c0b6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800c0b8:	78fb      	ldrb	r3, [r7, #3]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d002      	beq.n	800c0c4 <HAL_PCDEx_LPM_Callback+0x18>
 800c0be:	2b01      	cmp	r3, #1
 800c0c0:	d01f      	beq.n	800c102 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800c0c2:	e03b      	b.n	800c13c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	7adb      	ldrb	r3, [r3, #11]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d007      	beq.n	800c0dc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800c0cc:	f7f5 fad2 	bl	8001674 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c0d0:	4b1c      	ldr	r3, [pc, #112]	@ (800c144 <HAL_PCDEx_LPM_Callback+0x98>)
 800c0d2:	691b      	ldr	r3, [r3, #16]
 800c0d4:	4a1b      	ldr	r2, [pc, #108]	@ (800c144 <HAL_PCDEx_LPM_Callback+0x98>)
 800c0d6:	f023 0306 	bic.w	r3, r3, #6
 800c0da:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	687a      	ldr	r2, [r7, #4]
 800c0e8:	6812      	ldr	r2, [r2, #0]
 800c0ea:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c0ee:	f023 0301 	bic.w	r3, r3, #1
 800c0f2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	f7fe fabd 	bl	800a67a <USBD_LL_Resume>
    break;
 800c100:	e01c      	b.n	800c13c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	687a      	ldr	r2, [r7, #4]
 800c10e:	6812      	ldr	r2, [r2, #0]
 800c110:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c114:	f043 0301 	orr.w	r3, r3, #1
 800c118:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c120:	4618      	mov	r0, r3
 800c122:	f7fe fa8e 	bl	800a642 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	7adb      	ldrb	r3, [r3, #11]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d005      	beq.n	800c13a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c12e:	4b05      	ldr	r3, [pc, #20]	@ (800c144 <HAL_PCDEx_LPM_Callback+0x98>)
 800c130:	691b      	ldr	r3, [r3, #16]
 800c132:	4a04      	ldr	r2, [pc, #16]	@ (800c144 <HAL_PCDEx_LPM_Callback+0x98>)
 800c134:	f043 0306 	orr.w	r3, r3, #6
 800c138:	6113      	str	r3, [r2, #16]
    break;
 800c13a:	bf00      	nop
}
 800c13c:	bf00      	nop
 800c13e:	3708      	adds	r7, #8
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}
 800c144:	e000ed00 	.word	0xe000ed00

0800c148 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c148:	b480      	push	{r7}
 800c14a:	b083      	sub	sp, #12
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c150:	4b03      	ldr	r3, [pc, #12]	@ (800c160 <USBD_static_malloc+0x18>)
}
 800c152:	4618      	mov	r0, r3
 800c154:	370c      	adds	r7, #12
 800c156:	46bd      	mov	sp, r7
 800c158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15c:	4770      	bx	lr
 800c15e:	bf00      	nop
 800c160:	20012a28 	.word	0x20012a28

0800c164 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c164:	b480      	push	{r7}
 800c166:	b083      	sub	sp, #12
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]

}
 800c16c:	bf00      	nop
 800c16e:	370c      	adds	r7, #12
 800c170:	46bd      	mov	sp, r7
 800c172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c176:	4770      	bx	lr

0800c178 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c178:	b480      	push	{r7}
 800c17a:	b085      	sub	sp, #20
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	4603      	mov	r3, r0
 800c180:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c182:	2300      	movs	r3, #0
 800c184:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c186:	79fb      	ldrb	r3, [r7, #7]
 800c188:	2b03      	cmp	r3, #3
 800c18a:	d817      	bhi.n	800c1bc <USBD_Get_USB_Status+0x44>
 800c18c:	a201      	add	r2, pc, #4	@ (adr r2, 800c194 <USBD_Get_USB_Status+0x1c>)
 800c18e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c192:	bf00      	nop
 800c194:	0800c1a5 	.word	0x0800c1a5
 800c198:	0800c1ab 	.word	0x0800c1ab
 800c19c:	0800c1b1 	.word	0x0800c1b1
 800c1a0:	0800c1b7 	.word	0x0800c1b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	73fb      	strb	r3, [r7, #15]
    break;
 800c1a8:	e00b      	b.n	800c1c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c1aa:	2303      	movs	r3, #3
 800c1ac:	73fb      	strb	r3, [r7, #15]
    break;
 800c1ae:	e008      	b.n	800c1c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c1b0:	2301      	movs	r3, #1
 800c1b2:	73fb      	strb	r3, [r7, #15]
    break;
 800c1b4:	e005      	b.n	800c1c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c1b6:	2303      	movs	r3, #3
 800c1b8:	73fb      	strb	r3, [r7, #15]
    break;
 800c1ba:	e002      	b.n	800c1c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c1bc:	2303      	movs	r3, #3
 800c1be:	73fb      	strb	r3, [r7, #15]
    break;
 800c1c0:	bf00      	nop
  }
  return usb_status;
 800c1c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	3714      	adds	r7, #20
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ce:	4770      	bx	lr

0800c1d0 <__cvt>:
 800c1d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c1d4:	ec57 6b10 	vmov	r6, r7, d0
 800c1d8:	2f00      	cmp	r7, #0
 800c1da:	460c      	mov	r4, r1
 800c1dc:	4619      	mov	r1, r3
 800c1de:	463b      	mov	r3, r7
 800c1e0:	bfbb      	ittet	lt
 800c1e2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c1e6:	461f      	movlt	r7, r3
 800c1e8:	2300      	movge	r3, #0
 800c1ea:	232d      	movlt	r3, #45	@ 0x2d
 800c1ec:	700b      	strb	r3, [r1, #0]
 800c1ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c1f0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c1f4:	4691      	mov	r9, r2
 800c1f6:	f023 0820 	bic.w	r8, r3, #32
 800c1fa:	bfbc      	itt	lt
 800c1fc:	4632      	movlt	r2, r6
 800c1fe:	4616      	movlt	r6, r2
 800c200:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c204:	d005      	beq.n	800c212 <__cvt+0x42>
 800c206:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c20a:	d100      	bne.n	800c20e <__cvt+0x3e>
 800c20c:	3401      	adds	r4, #1
 800c20e:	2102      	movs	r1, #2
 800c210:	e000      	b.n	800c214 <__cvt+0x44>
 800c212:	2103      	movs	r1, #3
 800c214:	ab03      	add	r3, sp, #12
 800c216:	9301      	str	r3, [sp, #4]
 800c218:	ab02      	add	r3, sp, #8
 800c21a:	9300      	str	r3, [sp, #0]
 800c21c:	ec47 6b10 	vmov	d0, r6, r7
 800c220:	4653      	mov	r3, sl
 800c222:	4622      	mov	r2, r4
 800c224:	f001 f91c 	bl	800d460 <_dtoa_r>
 800c228:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c22c:	4605      	mov	r5, r0
 800c22e:	d119      	bne.n	800c264 <__cvt+0x94>
 800c230:	f019 0f01 	tst.w	r9, #1
 800c234:	d00e      	beq.n	800c254 <__cvt+0x84>
 800c236:	eb00 0904 	add.w	r9, r0, r4
 800c23a:	2200      	movs	r2, #0
 800c23c:	2300      	movs	r3, #0
 800c23e:	4630      	mov	r0, r6
 800c240:	4639      	mov	r1, r7
 800c242:	f7f4 fc61 	bl	8000b08 <__aeabi_dcmpeq>
 800c246:	b108      	cbz	r0, 800c24c <__cvt+0x7c>
 800c248:	f8cd 900c 	str.w	r9, [sp, #12]
 800c24c:	2230      	movs	r2, #48	@ 0x30
 800c24e:	9b03      	ldr	r3, [sp, #12]
 800c250:	454b      	cmp	r3, r9
 800c252:	d31e      	bcc.n	800c292 <__cvt+0xc2>
 800c254:	9b03      	ldr	r3, [sp, #12]
 800c256:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c258:	1b5b      	subs	r3, r3, r5
 800c25a:	4628      	mov	r0, r5
 800c25c:	6013      	str	r3, [r2, #0]
 800c25e:	b004      	add	sp, #16
 800c260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c264:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c268:	eb00 0904 	add.w	r9, r0, r4
 800c26c:	d1e5      	bne.n	800c23a <__cvt+0x6a>
 800c26e:	7803      	ldrb	r3, [r0, #0]
 800c270:	2b30      	cmp	r3, #48	@ 0x30
 800c272:	d10a      	bne.n	800c28a <__cvt+0xba>
 800c274:	2200      	movs	r2, #0
 800c276:	2300      	movs	r3, #0
 800c278:	4630      	mov	r0, r6
 800c27a:	4639      	mov	r1, r7
 800c27c:	f7f4 fc44 	bl	8000b08 <__aeabi_dcmpeq>
 800c280:	b918      	cbnz	r0, 800c28a <__cvt+0xba>
 800c282:	f1c4 0401 	rsb	r4, r4, #1
 800c286:	f8ca 4000 	str.w	r4, [sl]
 800c28a:	f8da 3000 	ldr.w	r3, [sl]
 800c28e:	4499      	add	r9, r3
 800c290:	e7d3      	b.n	800c23a <__cvt+0x6a>
 800c292:	1c59      	adds	r1, r3, #1
 800c294:	9103      	str	r1, [sp, #12]
 800c296:	701a      	strb	r2, [r3, #0]
 800c298:	e7d9      	b.n	800c24e <__cvt+0x7e>

0800c29a <__exponent>:
 800c29a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c29c:	2900      	cmp	r1, #0
 800c29e:	bfba      	itte	lt
 800c2a0:	4249      	neglt	r1, r1
 800c2a2:	232d      	movlt	r3, #45	@ 0x2d
 800c2a4:	232b      	movge	r3, #43	@ 0x2b
 800c2a6:	2909      	cmp	r1, #9
 800c2a8:	7002      	strb	r2, [r0, #0]
 800c2aa:	7043      	strb	r3, [r0, #1]
 800c2ac:	dd29      	ble.n	800c302 <__exponent+0x68>
 800c2ae:	f10d 0307 	add.w	r3, sp, #7
 800c2b2:	461d      	mov	r5, r3
 800c2b4:	270a      	movs	r7, #10
 800c2b6:	461a      	mov	r2, r3
 800c2b8:	fbb1 f6f7 	udiv	r6, r1, r7
 800c2bc:	fb07 1416 	mls	r4, r7, r6, r1
 800c2c0:	3430      	adds	r4, #48	@ 0x30
 800c2c2:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c2c6:	460c      	mov	r4, r1
 800c2c8:	2c63      	cmp	r4, #99	@ 0x63
 800c2ca:	f103 33ff 	add.w	r3, r3, #4294967295
 800c2ce:	4631      	mov	r1, r6
 800c2d0:	dcf1      	bgt.n	800c2b6 <__exponent+0x1c>
 800c2d2:	3130      	adds	r1, #48	@ 0x30
 800c2d4:	1e94      	subs	r4, r2, #2
 800c2d6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c2da:	1c41      	adds	r1, r0, #1
 800c2dc:	4623      	mov	r3, r4
 800c2de:	42ab      	cmp	r3, r5
 800c2e0:	d30a      	bcc.n	800c2f8 <__exponent+0x5e>
 800c2e2:	f10d 0309 	add.w	r3, sp, #9
 800c2e6:	1a9b      	subs	r3, r3, r2
 800c2e8:	42ac      	cmp	r4, r5
 800c2ea:	bf88      	it	hi
 800c2ec:	2300      	movhi	r3, #0
 800c2ee:	3302      	adds	r3, #2
 800c2f0:	4403      	add	r3, r0
 800c2f2:	1a18      	subs	r0, r3, r0
 800c2f4:	b003      	add	sp, #12
 800c2f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2f8:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c2fc:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c300:	e7ed      	b.n	800c2de <__exponent+0x44>
 800c302:	2330      	movs	r3, #48	@ 0x30
 800c304:	3130      	adds	r1, #48	@ 0x30
 800c306:	7083      	strb	r3, [r0, #2]
 800c308:	70c1      	strb	r1, [r0, #3]
 800c30a:	1d03      	adds	r3, r0, #4
 800c30c:	e7f1      	b.n	800c2f2 <__exponent+0x58>
	...

0800c310 <_printf_float>:
 800c310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c314:	b08d      	sub	sp, #52	@ 0x34
 800c316:	460c      	mov	r4, r1
 800c318:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c31c:	4616      	mov	r6, r2
 800c31e:	461f      	mov	r7, r3
 800c320:	4605      	mov	r5, r0
 800c322:	f000 ff95 	bl	800d250 <_localeconv_r>
 800c326:	6803      	ldr	r3, [r0, #0]
 800c328:	9304      	str	r3, [sp, #16]
 800c32a:	4618      	mov	r0, r3
 800c32c:	f7f3 ffc0 	bl	80002b0 <strlen>
 800c330:	2300      	movs	r3, #0
 800c332:	930a      	str	r3, [sp, #40]	@ 0x28
 800c334:	f8d8 3000 	ldr.w	r3, [r8]
 800c338:	9005      	str	r0, [sp, #20]
 800c33a:	3307      	adds	r3, #7
 800c33c:	f023 0307 	bic.w	r3, r3, #7
 800c340:	f103 0208 	add.w	r2, r3, #8
 800c344:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c348:	f8d4 b000 	ldr.w	fp, [r4]
 800c34c:	f8c8 2000 	str.w	r2, [r8]
 800c350:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c354:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c358:	9307      	str	r3, [sp, #28]
 800c35a:	f8cd 8018 	str.w	r8, [sp, #24]
 800c35e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c362:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c366:	4b9c      	ldr	r3, [pc, #624]	@ (800c5d8 <_printf_float+0x2c8>)
 800c368:	f04f 32ff 	mov.w	r2, #4294967295
 800c36c:	f7f4 fbfe 	bl	8000b6c <__aeabi_dcmpun>
 800c370:	bb70      	cbnz	r0, 800c3d0 <_printf_float+0xc0>
 800c372:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c376:	4b98      	ldr	r3, [pc, #608]	@ (800c5d8 <_printf_float+0x2c8>)
 800c378:	f04f 32ff 	mov.w	r2, #4294967295
 800c37c:	f7f4 fbd8 	bl	8000b30 <__aeabi_dcmple>
 800c380:	bb30      	cbnz	r0, 800c3d0 <_printf_float+0xc0>
 800c382:	2200      	movs	r2, #0
 800c384:	2300      	movs	r3, #0
 800c386:	4640      	mov	r0, r8
 800c388:	4649      	mov	r1, r9
 800c38a:	f7f4 fbc7 	bl	8000b1c <__aeabi_dcmplt>
 800c38e:	b110      	cbz	r0, 800c396 <_printf_float+0x86>
 800c390:	232d      	movs	r3, #45	@ 0x2d
 800c392:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c396:	4a91      	ldr	r2, [pc, #580]	@ (800c5dc <_printf_float+0x2cc>)
 800c398:	4b91      	ldr	r3, [pc, #580]	@ (800c5e0 <_printf_float+0x2d0>)
 800c39a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c39e:	bf94      	ite	ls
 800c3a0:	4690      	movls	r8, r2
 800c3a2:	4698      	movhi	r8, r3
 800c3a4:	2303      	movs	r3, #3
 800c3a6:	6123      	str	r3, [r4, #16]
 800c3a8:	f02b 0304 	bic.w	r3, fp, #4
 800c3ac:	6023      	str	r3, [r4, #0]
 800c3ae:	f04f 0900 	mov.w	r9, #0
 800c3b2:	9700      	str	r7, [sp, #0]
 800c3b4:	4633      	mov	r3, r6
 800c3b6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c3b8:	4621      	mov	r1, r4
 800c3ba:	4628      	mov	r0, r5
 800c3bc:	f000 f9d2 	bl	800c764 <_printf_common>
 800c3c0:	3001      	adds	r0, #1
 800c3c2:	f040 808d 	bne.w	800c4e0 <_printf_float+0x1d0>
 800c3c6:	f04f 30ff 	mov.w	r0, #4294967295
 800c3ca:	b00d      	add	sp, #52	@ 0x34
 800c3cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3d0:	4642      	mov	r2, r8
 800c3d2:	464b      	mov	r3, r9
 800c3d4:	4640      	mov	r0, r8
 800c3d6:	4649      	mov	r1, r9
 800c3d8:	f7f4 fbc8 	bl	8000b6c <__aeabi_dcmpun>
 800c3dc:	b140      	cbz	r0, 800c3f0 <_printf_float+0xe0>
 800c3de:	464b      	mov	r3, r9
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	bfbc      	itt	lt
 800c3e4:	232d      	movlt	r3, #45	@ 0x2d
 800c3e6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c3ea:	4a7e      	ldr	r2, [pc, #504]	@ (800c5e4 <_printf_float+0x2d4>)
 800c3ec:	4b7e      	ldr	r3, [pc, #504]	@ (800c5e8 <_printf_float+0x2d8>)
 800c3ee:	e7d4      	b.n	800c39a <_printf_float+0x8a>
 800c3f0:	6863      	ldr	r3, [r4, #4]
 800c3f2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c3f6:	9206      	str	r2, [sp, #24]
 800c3f8:	1c5a      	adds	r2, r3, #1
 800c3fa:	d13b      	bne.n	800c474 <_printf_float+0x164>
 800c3fc:	2306      	movs	r3, #6
 800c3fe:	6063      	str	r3, [r4, #4]
 800c400:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c404:	2300      	movs	r3, #0
 800c406:	6022      	str	r2, [r4, #0]
 800c408:	9303      	str	r3, [sp, #12]
 800c40a:	ab0a      	add	r3, sp, #40	@ 0x28
 800c40c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c410:	ab09      	add	r3, sp, #36	@ 0x24
 800c412:	9300      	str	r3, [sp, #0]
 800c414:	6861      	ldr	r1, [r4, #4]
 800c416:	ec49 8b10 	vmov	d0, r8, r9
 800c41a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c41e:	4628      	mov	r0, r5
 800c420:	f7ff fed6 	bl	800c1d0 <__cvt>
 800c424:	9b06      	ldr	r3, [sp, #24]
 800c426:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c428:	2b47      	cmp	r3, #71	@ 0x47
 800c42a:	4680      	mov	r8, r0
 800c42c:	d129      	bne.n	800c482 <_printf_float+0x172>
 800c42e:	1cc8      	adds	r0, r1, #3
 800c430:	db02      	blt.n	800c438 <_printf_float+0x128>
 800c432:	6863      	ldr	r3, [r4, #4]
 800c434:	4299      	cmp	r1, r3
 800c436:	dd41      	ble.n	800c4bc <_printf_float+0x1ac>
 800c438:	f1aa 0a02 	sub.w	sl, sl, #2
 800c43c:	fa5f fa8a 	uxtb.w	sl, sl
 800c440:	3901      	subs	r1, #1
 800c442:	4652      	mov	r2, sl
 800c444:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c448:	9109      	str	r1, [sp, #36]	@ 0x24
 800c44a:	f7ff ff26 	bl	800c29a <__exponent>
 800c44e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c450:	1813      	adds	r3, r2, r0
 800c452:	2a01      	cmp	r2, #1
 800c454:	4681      	mov	r9, r0
 800c456:	6123      	str	r3, [r4, #16]
 800c458:	dc02      	bgt.n	800c460 <_printf_float+0x150>
 800c45a:	6822      	ldr	r2, [r4, #0]
 800c45c:	07d2      	lsls	r2, r2, #31
 800c45e:	d501      	bpl.n	800c464 <_printf_float+0x154>
 800c460:	3301      	adds	r3, #1
 800c462:	6123      	str	r3, [r4, #16]
 800c464:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d0a2      	beq.n	800c3b2 <_printf_float+0xa2>
 800c46c:	232d      	movs	r3, #45	@ 0x2d
 800c46e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c472:	e79e      	b.n	800c3b2 <_printf_float+0xa2>
 800c474:	9a06      	ldr	r2, [sp, #24]
 800c476:	2a47      	cmp	r2, #71	@ 0x47
 800c478:	d1c2      	bne.n	800c400 <_printf_float+0xf0>
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d1c0      	bne.n	800c400 <_printf_float+0xf0>
 800c47e:	2301      	movs	r3, #1
 800c480:	e7bd      	b.n	800c3fe <_printf_float+0xee>
 800c482:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c486:	d9db      	bls.n	800c440 <_printf_float+0x130>
 800c488:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c48c:	d118      	bne.n	800c4c0 <_printf_float+0x1b0>
 800c48e:	2900      	cmp	r1, #0
 800c490:	6863      	ldr	r3, [r4, #4]
 800c492:	dd0b      	ble.n	800c4ac <_printf_float+0x19c>
 800c494:	6121      	str	r1, [r4, #16]
 800c496:	b913      	cbnz	r3, 800c49e <_printf_float+0x18e>
 800c498:	6822      	ldr	r2, [r4, #0]
 800c49a:	07d0      	lsls	r0, r2, #31
 800c49c:	d502      	bpl.n	800c4a4 <_printf_float+0x194>
 800c49e:	3301      	adds	r3, #1
 800c4a0:	440b      	add	r3, r1
 800c4a2:	6123      	str	r3, [r4, #16]
 800c4a4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c4a6:	f04f 0900 	mov.w	r9, #0
 800c4aa:	e7db      	b.n	800c464 <_printf_float+0x154>
 800c4ac:	b913      	cbnz	r3, 800c4b4 <_printf_float+0x1a4>
 800c4ae:	6822      	ldr	r2, [r4, #0]
 800c4b0:	07d2      	lsls	r2, r2, #31
 800c4b2:	d501      	bpl.n	800c4b8 <_printf_float+0x1a8>
 800c4b4:	3302      	adds	r3, #2
 800c4b6:	e7f4      	b.n	800c4a2 <_printf_float+0x192>
 800c4b8:	2301      	movs	r3, #1
 800c4ba:	e7f2      	b.n	800c4a2 <_printf_float+0x192>
 800c4bc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c4c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c4c2:	4299      	cmp	r1, r3
 800c4c4:	db05      	blt.n	800c4d2 <_printf_float+0x1c2>
 800c4c6:	6823      	ldr	r3, [r4, #0]
 800c4c8:	6121      	str	r1, [r4, #16]
 800c4ca:	07d8      	lsls	r0, r3, #31
 800c4cc:	d5ea      	bpl.n	800c4a4 <_printf_float+0x194>
 800c4ce:	1c4b      	adds	r3, r1, #1
 800c4d0:	e7e7      	b.n	800c4a2 <_printf_float+0x192>
 800c4d2:	2900      	cmp	r1, #0
 800c4d4:	bfd4      	ite	le
 800c4d6:	f1c1 0202 	rsble	r2, r1, #2
 800c4da:	2201      	movgt	r2, #1
 800c4dc:	4413      	add	r3, r2
 800c4de:	e7e0      	b.n	800c4a2 <_printf_float+0x192>
 800c4e0:	6823      	ldr	r3, [r4, #0]
 800c4e2:	055a      	lsls	r2, r3, #21
 800c4e4:	d407      	bmi.n	800c4f6 <_printf_float+0x1e6>
 800c4e6:	6923      	ldr	r3, [r4, #16]
 800c4e8:	4642      	mov	r2, r8
 800c4ea:	4631      	mov	r1, r6
 800c4ec:	4628      	mov	r0, r5
 800c4ee:	47b8      	blx	r7
 800c4f0:	3001      	adds	r0, #1
 800c4f2:	d12b      	bne.n	800c54c <_printf_float+0x23c>
 800c4f4:	e767      	b.n	800c3c6 <_printf_float+0xb6>
 800c4f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c4fa:	f240 80dd 	bls.w	800c6b8 <_printf_float+0x3a8>
 800c4fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c502:	2200      	movs	r2, #0
 800c504:	2300      	movs	r3, #0
 800c506:	f7f4 faff 	bl	8000b08 <__aeabi_dcmpeq>
 800c50a:	2800      	cmp	r0, #0
 800c50c:	d033      	beq.n	800c576 <_printf_float+0x266>
 800c50e:	4a37      	ldr	r2, [pc, #220]	@ (800c5ec <_printf_float+0x2dc>)
 800c510:	2301      	movs	r3, #1
 800c512:	4631      	mov	r1, r6
 800c514:	4628      	mov	r0, r5
 800c516:	47b8      	blx	r7
 800c518:	3001      	adds	r0, #1
 800c51a:	f43f af54 	beq.w	800c3c6 <_printf_float+0xb6>
 800c51e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c522:	4543      	cmp	r3, r8
 800c524:	db02      	blt.n	800c52c <_printf_float+0x21c>
 800c526:	6823      	ldr	r3, [r4, #0]
 800c528:	07d8      	lsls	r0, r3, #31
 800c52a:	d50f      	bpl.n	800c54c <_printf_float+0x23c>
 800c52c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c530:	4631      	mov	r1, r6
 800c532:	4628      	mov	r0, r5
 800c534:	47b8      	blx	r7
 800c536:	3001      	adds	r0, #1
 800c538:	f43f af45 	beq.w	800c3c6 <_printf_float+0xb6>
 800c53c:	f04f 0900 	mov.w	r9, #0
 800c540:	f108 38ff 	add.w	r8, r8, #4294967295
 800c544:	f104 0a1a 	add.w	sl, r4, #26
 800c548:	45c8      	cmp	r8, r9
 800c54a:	dc09      	bgt.n	800c560 <_printf_float+0x250>
 800c54c:	6823      	ldr	r3, [r4, #0]
 800c54e:	079b      	lsls	r3, r3, #30
 800c550:	f100 8103 	bmi.w	800c75a <_printf_float+0x44a>
 800c554:	68e0      	ldr	r0, [r4, #12]
 800c556:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c558:	4298      	cmp	r0, r3
 800c55a:	bfb8      	it	lt
 800c55c:	4618      	movlt	r0, r3
 800c55e:	e734      	b.n	800c3ca <_printf_float+0xba>
 800c560:	2301      	movs	r3, #1
 800c562:	4652      	mov	r2, sl
 800c564:	4631      	mov	r1, r6
 800c566:	4628      	mov	r0, r5
 800c568:	47b8      	blx	r7
 800c56a:	3001      	adds	r0, #1
 800c56c:	f43f af2b 	beq.w	800c3c6 <_printf_float+0xb6>
 800c570:	f109 0901 	add.w	r9, r9, #1
 800c574:	e7e8      	b.n	800c548 <_printf_float+0x238>
 800c576:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c578:	2b00      	cmp	r3, #0
 800c57a:	dc39      	bgt.n	800c5f0 <_printf_float+0x2e0>
 800c57c:	4a1b      	ldr	r2, [pc, #108]	@ (800c5ec <_printf_float+0x2dc>)
 800c57e:	2301      	movs	r3, #1
 800c580:	4631      	mov	r1, r6
 800c582:	4628      	mov	r0, r5
 800c584:	47b8      	blx	r7
 800c586:	3001      	adds	r0, #1
 800c588:	f43f af1d 	beq.w	800c3c6 <_printf_float+0xb6>
 800c58c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c590:	ea59 0303 	orrs.w	r3, r9, r3
 800c594:	d102      	bne.n	800c59c <_printf_float+0x28c>
 800c596:	6823      	ldr	r3, [r4, #0]
 800c598:	07d9      	lsls	r1, r3, #31
 800c59a:	d5d7      	bpl.n	800c54c <_printf_float+0x23c>
 800c59c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c5a0:	4631      	mov	r1, r6
 800c5a2:	4628      	mov	r0, r5
 800c5a4:	47b8      	blx	r7
 800c5a6:	3001      	adds	r0, #1
 800c5a8:	f43f af0d 	beq.w	800c3c6 <_printf_float+0xb6>
 800c5ac:	f04f 0a00 	mov.w	sl, #0
 800c5b0:	f104 0b1a 	add.w	fp, r4, #26
 800c5b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5b6:	425b      	negs	r3, r3
 800c5b8:	4553      	cmp	r3, sl
 800c5ba:	dc01      	bgt.n	800c5c0 <_printf_float+0x2b0>
 800c5bc:	464b      	mov	r3, r9
 800c5be:	e793      	b.n	800c4e8 <_printf_float+0x1d8>
 800c5c0:	2301      	movs	r3, #1
 800c5c2:	465a      	mov	r2, fp
 800c5c4:	4631      	mov	r1, r6
 800c5c6:	4628      	mov	r0, r5
 800c5c8:	47b8      	blx	r7
 800c5ca:	3001      	adds	r0, #1
 800c5cc:	f43f aefb 	beq.w	800c3c6 <_printf_float+0xb6>
 800c5d0:	f10a 0a01 	add.w	sl, sl, #1
 800c5d4:	e7ee      	b.n	800c5b4 <_printf_float+0x2a4>
 800c5d6:	bf00      	nop
 800c5d8:	7fefffff 	.word	0x7fefffff
 800c5dc:	08010d44 	.word	0x08010d44
 800c5e0:	08010d48 	.word	0x08010d48
 800c5e4:	08010d4c 	.word	0x08010d4c
 800c5e8:	08010d50 	.word	0x08010d50
 800c5ec:	08010d54 	.word	0x08010d54
 800c5f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c5f2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c5f6:	4553      	cmp	r3, sl
 800c5f8:	bfa8      	it	ge
 800c5fa:	4653      	movge	r3, sl
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	4699      	mov	r9, r3
 800c600:	dc36      	bgt.n	800c670 <_printf_float+0x360>
 800c602:	f04f 0b00 	mov.w	fp, #0
 800c606:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c60a:	f104 021a 	add.w	r2, r4, #26
 800c60e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c610:	9306      	str	r3, [sp, #24]
 800c612:	eba3 0309 	sub.w	r3, r3, r9
 800c616:	455b      	cmp	r3, fp
 800c618:	dc31      	bgt.n	800c67e <_printf_float+0x36e>
 800c61a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c61c:	459a      	cmp	sl, r3
 800c61e:	dc3a      	bgt.n	800c696 <_printf_float+0x386>
 800c620:	6823      	ldr	r3, [r4, #0]
 800c622:	07da      	lsls	r2, r3, #31
 800c624:	d437      	bmi.n	800c696 <_printf_float+0x386>
 800c626:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c628:	ebaa 0903 	sub.w	r9, sl, r3
 800c62c:	9b06      	ldr	r3, [sp, #24]
 800c62e:	ebaa 0303 	sub.w	r3, sl, r3
 800c632:	4599      	cmp	r9, r3
 800c634:	bfa8      	it	ge
 800c636:	4699      	movge	r9, r3
 800c638:	f1b9 0f00 	cmp.w	r9, #0
 800c63c:	dc33      	bgt.n	800c6a6 <_printf_float+0x396>
 800c63e:	f04f 0800 	mov.w	r8, #0
 800c642:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c646:	f104 0b1a 	add.w	fp, r4, #26
 800c64a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c64c:	ebaa 0303 	sub.w	r3, sl, r3
 800c650:	eba3 0309 	sub.w	r3, r3, r9
 800c654:	4543      	cmp	r3, r8
 800c656:	f77f af79 	ble.w	800c54c <_printf_float+0x23c>
 800c65a:	2301      	movs	r3, #1
 800c65c:	465a      	mov	r2, fp
 800c65e:	4631      	mov	r1, r6
 800c660:	4628      	mov	r0, r5
 800c662:	47b8      	blx	r7
 800c664:	3001      	adds	r0, #1
 800c666:	f43f aeae 	beq.w	800c3c6 <_printf_float+0xb6>
 800c66a:	f108 0801 	add.w	r8, r8, #1
 800c66e:	e7ec      	b.n	800c64a <_printf_float+0x33a>
 800c670:	4642      	mov	r2, r8
 800c672:	4631      	mov	r1, r6
 800c674:	4628      	mov	r0, r5
 800c676:	47b8      	blx	r7
 800c678:	3001      	adds	r0, #1
 800c67a:	d1c2      	bne.n	800c602 <_printf_float+0x2f2>
 800c67c:	e6a3      	b.n	800c3c6 <_printf_float+0xb6>
 800c67e:	2301      	movs	r3, #1
 800c680:	4631      	mov	r1, r6
 800c682:	4628      	mov	r0, r5
 800c684:	9206      	str	r2, [sp, #24]
 800c686:	47b8      	blx	r7
 800c688:	3001      	adds	r0, #1
 800c68a:	f43f ae9c 	beq.w	800c3c6 <_printf_float+0xb6>
 800c68e:	9a06      	ldr	r2, [sp, #24]
 800c690:	f10b 0b01 	add.w	fp, fp, #1
 800c694:	e7bb      	b.n	800c60e <_printf_float+0x2fe>
 800c696:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c69a:	4631      	mov	r1, r6
 800c69c:	4628      	mov	r0, r5
 800c69e:	47b8      	blx	r7
 800c6a0:	3001      	adds	r0, #1
 800c6a2:	d1c0      	bne.n	800c626 <_printf_float+0x316>
 800c6a4:	e68f      	b.n	800c3c6 <_printf_float+0xb6>
 800c6a6:	9a06      	ldr	r2, [sp, #24]
 800c6a8:	464b      	mov	r3, r9
 800c6aa:	4442      	add	r2, r8
 800c6ac:	4631      	mov	r1, r6
 800c6ae:	4628      	mov	r0, r5
 800c6b0:	47b8      	blx	r7
 800c6b2:	3001      	adds	r0, #1
 800c6b4:	d1c3      	bne.n	800c63e <_printf_float+0x32e>
 800c6b6:	e686      	b.n	800c3c6 <_printf_float+0xb6>
 800c6b8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c6bc:	f1ba 0f01 	cmp.w	sl, #1
 800c6c0:	dc01      	bgt.n	800c6c6 <_printf_float+0x3b6>
 800c6c2:	07db      	lsls	r3, r3, #31
 800c6c4:	d536      	bpl.n	800c734 <_printf_float+0x424>
 800c6c6:	2301      	movs	r3, #1
 800c6c8:	4642      	mov	r2, r8
 800c6ca:	4631      	mov	r1, r6
 800c6cc:	4628      	mov	r0, r5
 800c6ce:	47b8      	blx	r7
 800c6d0:	3001      	adds	r0, #1
 800c6d2:	f43f ae78 	beq.w	800c3c6 <_printf_float+0xb6>
 800c6d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c6da:	4631      	mov	r1, r6
 800c6dc:	4628      	mov	r0, r5
 800c6de:	47b8      	blx	r7
 800c6e0:	3001      	adds	r0, #1
 800c6e2:	f43f ae70 	beq.w	800c3c6 <_printf_float+0xb6>
 800c6e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c6f2:	f7f4 fa09 	bl	8000b08 <__aeabi_dcmpeq>
 800c6f6:	b9c0      	cbnz	r0, 800c72a <_printf_float+0x41a>
 800c6f8:	4653      	mov	r3, sl
 800c6fa:	f108 0201 	add.w	r2, r8, #1
 800c6fe:	4631      	mov	r1, r6
 800c700:	4628      	mov	r0, r5
 800c702:	47b8      	blx	r7
 800c704:	3001      	adds	r0, #1
 800c706:	d10c      	bne.n	800c722 <_printf_float+0x412>
 800c708:	e65d      	b.n	800c3c6 <_printf_float+0xb6>
 800c70a:	2301      	movs	r3, #1
 800c70c:	465a      	mov	r2, fp
 800c70e:	4631      	mov	r1, r6
 800c710:	4628      	mov	r0, r5
 800c712:	47b8      	blx	r7
 800c714:	3001      	adds	r0, #1
 800c716:	f43f ae56 	beq.w	800c3c6 <_printf_float+0xb6>
 800c71a:	f108 0801 	add.w	r8, r8, #1
 800c71e:	45d0      	cmp	r8, sl
 800c720:	dbf3      	blt.n	800c70a <_printf_float+0x3fa>
 800c722:	464b      	mov	r3, r9
 800c724:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c728:	e6df      	b.n	800c4ea <_printf_float+0x1da>
 800c72a:	f04f 0800 	mov.w	r8, #0
 800c72e:	f104 0b1a 	add.w	fp, r4, #26
 800c732:	e7f4      	b.n	800c71e <_printf_float+0x40e>
 800c734:	2301      	movs	r3, #1
 800c736:	4642      	mov	r2, r8
 800c738:	e7e1      	b.n	800c6fe <_printf_float+0x3ee>
 800c73a:	2301      	movs	r3, #1
 800c73c:	464a      	mov	r2, r9
 800c73e:	4631      	mov	r1, r6
 800c740:	4628      	mov	r0, r5
 800c742:	47b8      	blx	r7
 800c744:	3001      	adds	r0, #1
 800c746:	f43f ae3e 	beq.w	800c3c6 <_printf_float+0xb6>
 800c74a:	f108 0801 	add.w	r8, r8, #1
 800c74e:	68e3      	ldr	r3, [r4, #12]
 800c750:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c752:	1a5b      	subs	r3, r3, r1
 800c754:	4543      	cmp	r3, r8
 800c756:	dcf0      	bgt.n	800c73a <_printf_float+0x42a>
 800c758:	e6fc      	b.n	800c554 <_printf_float+0x244>
 800c75a:	f04f 0800 	mov.w	r8, #0
 800c75e:	f104 0919 	add.w	r9, r4, #25
 800c762:	e7f4      	b.n	800c74e <_printf_float+0x43e>

0800c764 <_printf_common>:
 800c764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c768:	4616      	mov	r6, r2
 800c76a:	4698      	mov	r8, r3
 800c76c:	688a      	ldr	r2, [r1, #8]
 800c76e:	690b      	ldr	r3, [r1, #16]
 800c770:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c774:	4293      	cmp	r3, r2
 800c776:	bfb8      	it	lt
 800c778:	4613      	movlt	r3, r2
 800c77a:	6033      	str	r3, [r6, #0]
 800c77c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c780:	4607      	mov	r7, r0
 800c782:	460c      	mov	r4, r1
 800c784:	b10a      	cbz	r2, 800c78a <_printf_common+0x26>
 800c786:	3301      	adds	r3, #1
 800c788:	6033      	str	r3, [r6, #0]
 800c78a:	6823      	ldr	r3, [r4, #0]
 800c78c:	0699      	lsls	r1, r3, #26
 800c78e:	bf42      	ittt	mi
 800c790:	6833      	ldrmi	r3, [r6, #0]
 800c792:	3302      	addmi	r3, #2
 800c794:	6033      	strmi	r3, [r6, #0]
 800c796:	6825      	ldr	r5, [r4, #0]
 800c798:	f015 0506 	ands.w	r5, r5, #6
 800c79c:	d106      	bne.n	800c7ac <_printf_common+0x48>
 800c79e:	f104 0a19 	add.w	sl, r4, #25
 800c7a2:	68e3      	ldr	r3, [r4, #12]
 800c7a4:	6832      	ldr	r2, [r6, #0]
 800c7a6:	1a9b      	subs	r3, r3, r2
 800c7a8:	42ab      	cmp	r3, r5
 800c7aa:	dc26      	bgt.n	800c7fa <_printf_common+0x96>
 800c7ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c7b0:	6822      	ldr	r2, [r4, #0]
 800c7b2:	3b00      	subs	r3, #0
 800c7b4:	bf18      	it	ne
 800c7b6:	2301      	movne	r3, #1
 800c7b8:	0692      	lsls	r2, r2, #26
 800c7ba:	d42b      	bmi.n	800c814 <_printf_common+0xb0>
 800c7bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c7c0:	4641      	mov	r1, r8
 800c7c2:	4638      	mov	r0, r7
 800c7c4:	47c8      	blx	r9
 800c7c6:	3001      	adds	r0, #1
 800c7c8:	d01e      	beq.n	800c808 <_printf_common+0xa4>
 800c7ca:	6823      	ldr	r3, [r4, #0]
 800c7cc:	6922      	ldr	r2, [r4, #16]
 800c7ce:	f003 0306 	and.w	r3, r3, #6
 800c7d2:	2b04      	cmp	r3, #4
 800c7d4:	bf02      	ittt	eq
 800c7d6:	68e5      	ldreq	r5, [r4, #12]
 800c7d8:	6833      	ldreq	r3, [r6, #0]
 800c7da:	1aed      	subeq	r5, r5, r3
 800c7dc:	68a3      	ldr	r3, [r4, #8]
 800c7de:	bf0c      	ite	eq
 800c7e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c7e4:	2500      	movne	r5, #0
 800c7e6:	4293      	cmp	r3, r2
 800c7e8:	bfc4      	itt	gt
 800c7ea:	1a9b      	subgt	r3, r3, r2
 800c7ec:	18ed      	addgt	r5, r5, r3
 800c7ee:	2600      	movs	r6, #0
 800c7f0:	341a      	adds	r4, #26
 800c7f2:	42b5      	cmp	r5, r6
 800c7f4:	d11a      	bne.n	800c82c <_printf_common+0xc8>
 800c7f6:	2000      	movs	r0, #0
 800c7f8:	e008      	b.n	800c80c <_printf_common+0xa8>
 800c7fa:	2301      	movs	r3, #1
 800c7fc:	4652      	mov	r2, sl
 800c7fe:	4641      	mov	r1, r8
 800c800:	4638      	mov	r0, r7
 800c802:	47c8      	blx	r9
 800c804:	3001      	adds	r0, #1
 800c806:	d103      	bne.n	800c810 <_printf_common+0xac>
 800c808:	f04f 30ff 	mov.w	r0, #4294967295
 800c80c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c810:	3501      	adds	r5, #1
 800c812:	e7c6      	b.n	800c7a2 <_printf_common+0x3e>
 800c814:	18e1      	adds	r1, r4, r3
 800c816:	1c5a      	adds	r2, r3, #1
 800c818:	2030      	movs	r0, #48	@ 0x30
 800c81a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c81e:	4422      	add	r2, r4
 800c820:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c824:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c828:	3302      	adds	r3, #2
 800c82a:	e7c7      	b.n	800c7bc <_printf_common+0x58>
 800c82c:	2301      	movs	r3, #1
 800c82e:	4622      	mov	r2, r4
 800c830:	4641      	mov	r1, r8
 800c832:	4638      	mov	r0, r7
 800c834:	47c8      	blx	r9
 800c836:	3001      	adds	r0, #1
 800c838:	d0e6      	beq.n	800c808 <_printf_common+0xa4>
 800c83a:	3601      	adds	r6, #1
 800c83c:	e7d9      	b.n	800c7f2 <_printf_common+0x8e>
	...

0800c840 <_printf_i>:
 800c840:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c844:	7e0f      	ldrb	r7, [r1, #24]
 800c846:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c848:	2f78      	cmp	r7, #120	@ 0x78
 800c84a:	4691      	mov	r9, r2
 800c84c:	4680      	mov	r8, r0
 800c84e:	460c      	mov	r4, r1
 800c850:	469a      	mov	sl, r3
 800c852:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c856:	d807      	bhi.n	800c868 <_printf_i+0x28>
 800c858:	2f62      	cmp	r7, #98	@ 0x62
 800c85a:	d80a      	bhi.n	800c872 <_printf_i+0x32>
 800c85c:	2f00      	cmp	r7, #0
 800c85e:	f000 80d2 	beq.w	800ca06 <_printf_i+0x1c6>
 800c862:	2f58      	cmp	r7, #88	@ 0x58
 800c864:	f000 80b9 	beq.w	800c9da <_printf_i+0x19a>
 800c868:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c86c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c870:	e03a      	b.n	800c8e8 <_printf_i+0xa8>
 800c872:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c876:	2b15      	cmp	r3, #21
 800c878:	d8f6      	bhi.n	800c868 <_printf_i+0x28>
 800c87a:	a101      	add	r1, pc, #4	@ (adr r1, 800c880 <_printf_i+0x40>)
 800c87c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c880:	0800c8d9 	.word	0x0800c8d9
 800c884:	0800c8ed 	.word	0x0800c8ed
 800c888:	0800c869 	.word	0x0800c869
 800c88c:	0800c869 	.word	0x0800c869
 800c890:	0800c869 	.word	0x0800c869
 800c894:	0800c869 	.word	0x0800c869
 800c898:	0800c8ed 	.word	0x0800c8ed
 800c89c:	0800c869 	.word	0x0800c869
 800c8a0:	0800c869 	.word	0x0800c869
 800c8a4:	0800c869 	.word	0x0800c869
 800c8a8:	0800c869 	.word	0x0800c869
 800c8ac:	0800c9ed 	.word	0x0800c9ed
 800c8b0:	0800c917 	.word	0x0800c917
 800c8b4:	0800c9a7 	.word	0x0800c9a7
 800c8b8:	0800c869 	.word	0x0800c869
 800c8bc:	0800c869 	.word	0x0800c869
 800c8c0:	0800ca0f 	.word	0x0800ca0f
 800c8c4:	0800c869 	.word	0x0800c869
 800c8c8:	0800c917 	.word	0x0800c917
 800c8cc:	0800c869 	.word	0x0800c869
 800c8d0:	0800c869 	.word	0x0800c869
 800c8d4:	0800c9af 	.word	0x0800c9af
 800c8d8:	6833      	ldr	r3, [r6, #0]
 800c8da:	1d1a      	adds	r2, r3, #4
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	6032      	str	r2, [r6, #0]
 800c8e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c8e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c8e8:	2301      	movs	r3, #1
 800c8ea:	e09d      	b.n	800ca28 <_printf_i+0x1e8>
 800c8ec:	6833      	ldr	r3, [r6, #0]
 800c8ee:	6820      	ldr	r0, [r4, #0]
 800c8f0:	1d19      	adds	r1, r3, #4
 800c8f2:	6031      	str	r1, [r6, #0]
 800c8f4:	0606      	lsls	r6, r0, #24
 800c8f6:	d501      	bpl.n	800c8fc <_printf_i+0xbc>
 800c8f8:	681d      	ldr	r5, [r3, #0]
 800c8fa:	e003      	b.n	800c904 <_printf_i+0xc4>
 800c8fc:	0645      	lsls	r5, r0, #25
 800c8fe:	d5fb      	bpl.n	800c8f8 <_printf_i+0xb8>
 800c900:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c904:	2d00      	cmp	r5, #0
 800c906:	da03      	bge.n	800c910 <_printf_i+0xd0>
 800c908:	232d      	movs	r3, #45	@ 0x2d
 800c90a:	426d      	negs	r5, r5
 800c90c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c910:	4859      	ldr	r0, [pc, #356]	@ (800ca78 <_printf_i+0x238>)
 800c912:	230a      	movs	r3, #10
 800c914:	e011      	b.n	800c93a <_printf_i+0xfa>
 800c916:	6821      	ldr	r1, [r4, #0]
 800c918:	6833      	ldr	r3, [r6, #0]
 800c91a:	0608      	lsls	r0, r1, #24
 800c91c:	f853 5b04 	ldr.w	r5, [r3], #4
 800c920:	d402      	bmi.n	800c928 <_printf_i+0xe8>
 800c922:	0649      	lsls	r1, r1, #25
 800c924:	bf48      	it	mi
 800c926:	b2ad      	uxthmi	r5, r5
 800c928:	2f6f      	cmp	r7, #111	@ 0x6f
 800c92a:	4853      	ldr	r0, [pc, #332]	@ (800ca78 <_printf_i+0x238>)
 800c92c:	6033      	str	r3, [r6, #0]
 800c92e:	bf14      	ite	ne
 800c930:	230a      	movne	r3, #10
 800c932:	2308      	moveq	r3, #8
 800c934:	2100      	movs	r1, #0
 800c936:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c93a:	6866      	ldr	r6, [r4, #4]
 800c93c:	60a6      	str	r6, [r4, #8]
 800c93e:	2e00      	cmp	r6, #0
 800c940:	bfa2      	ittt	ge
 800c942:	6821      	ldrge	r1, [r4, #0]
 800c944:	f021 0104 	bicge.w	r1, r1, #4
 800c948:	6021      	strge	r1, [r4, #0]
 800c94a:	b90d      	cbnz	r5, 800c950 <_printf_i+0x110>
 800c94c:	2e00      	cmp	r6, #0
 800c94e:	d04b      	beq.n	800c9e8 <_printf_i+0x1a8>
 800c950:	4616      	mov	r6, r2
 800c952:	fbb5 f1f3 	udiv	r1, r5, r3
 800c956:	fb03 5711 	mls	r7, r3, r1, r5
 800c95a:	5dc7      	ldrb	r7, [r0, r7]
 800c95c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c960:	462f      	mov	r7, r5
 800c962:	42bb      	cmp	r3, r7
 800c964:	460d      	mov	r5, r1
 800c966:	d9f4      	bls.n	800c952 <_printf_i+0x112>
 800c968:	2b08      	cmp	r3, #8
 800c96a:	d10b      	bne.n	800c984 <_printf_i+0x144>
 800c96c:	6823      	ldr	r3, [r4, #0]
 800c96e:	07df      	lsls	r7, r3, #31
 800c970:	d508      	bpl.n	800c984 <_printf_i+0x144>
 800c972:	6923      	ldr	r3, [r4, #16]
 800c974:	6861      	ldr	r1, [r4, #4]
 800c976:	4299      	cmp	r1, r3
 800c978:	bfde      	ittt	le
 800c97a:	2330      	movle	r3, #48	@ 0x30
 800c97c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c980:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c984:	1b92      	subs	r2, r2, r6
 800c986:	6122      	str	r2, [r4, #16]
 800c988:	f8cd a000 	str.w	sl, [sp]
 800c98c:	464b      	mov	r3, r9
 800c98e:	aa03      	add	r2, sp, #12
 800c990:	4621      	mov	r1, r4
 800c992:	4640      	mov	r0, r8
 800c994:	f7ff fee6 	bl	800c764 <_printf_common>
 800c998:	3001      	adds	r0, #1
 800c99a:	d14a      	bne.n	800ca32 <_printf_i+0x1f2>
 800c99c:	f04f 30ff 	mov.w	r0, #4294967295
 800c9a0:	b004      	add	sp, #16
 800c9a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9a6:	6823      	ldr	r3, [r4, #0]
 800c9a8:	f043 0320 	orr.w	r3, r3, #32
 800c9ac:	6023      	str	r3, [r4, #0]
 800c9ae:	4833      	ldr	r0, [pc, #204]	@ (800ca7c <_printf_i+0x23c>)
 800c9b0:	2778      	movs	r7, #120	@ 0x78
 800c9b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c9b6:	6823      	ldr	r3, [r4, #0]
 800c9b8:	6831      	ldr	r1, [r6, #0]
 800c9ba:	061f      	lsls	r7, r3, #24
 800c9bc:	f851 5b04 	ldr.w	r5, [r1], #4
 800c9c0:	d402      	bmi.n	800c9c8 <_printf_i+0x188>
 800c9c2:	065f      	lsls	r7, r3, #25
 800c9c4:	bf48      	it	mi
 800c9c6:	b2ad      	uxthmi	r5, r5
 800c9c8:	6031      	str	r1, [r6, #0]
 800c9ca:	07d9      	lsls	r1, r3, #31
 800c9cc:	bf44      	itt	mi
 800c9ce:	f043 0320 	orrmi.w	r3, r3, #32
 800c9d2:	6023      	strmi	r3, [r4, #0]
 800c9d4:	b11d      	cbz	r5, 800c9de <_printf_i+0x19e>
 800c9d6:	2310      	movs	r3, #16
 800c9d8:	e7ac      	b.n	800c934 <_printf_i+0xf4>
 800c9da:	4827      	ldr	r0, [pc, #156]	@ (800ca78 <_printf_i+0x238>)
 800c9dc:	e7e9      	b.n	800c9b2 <_printf_i+0x172>
 800c9de:	6823      	ldr	r3, [r4, #0]
 800c9e0:	f023 0320 	bic.w	r3, r3, #32
 800c9e4:	6023      	str	r3, [r4, #0]
 800c9e6:	e7f6      	b.n	800c9d6 <_printf_i+0x196>
 800c9e8:	4616      	mov	r6, r2
 800c9ea:	e7bd      	b.n	800c968 <_printf_i+0x128>
 800c9ec:	6833      	ldr	r3, [r6, #0]
 800c9ee:	6825      	ldr	r5, [r4, #0]
 800c9f0:	6961      	ldr	r1, [r4, #20]
 800c9f2:	1d18      	adds	r0, r3, #4
 800c9f4:	6030      	str	r0, [r6, #0]
 800c9f6:	062e      	lsls	r6, r5, #24
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	d501      	bpl.n	800ca00 <_printf_i+0x1c0>
 800c9fc:	6019      	str	r1, [r3, #0]
 800c9fe:	e002      	b.n	800ca06 <_printf_i+0x1c6>
 800ca00:	0668      	lsls	r0, r5, #25
 800ca02:	d5fb      	bpl.n	800c9fc <_printf_i+0x1bc>
 800ca04:	8019      	strh	r1, [r3, #0]
 800ca06:	2300      	movs	r3, #0
 800ca08:	6123      	str	r3, [r4, #16]
 800ca0a:	4616      	mov	r6, r2
 800ca0c:	e7bc      	b.n	800c988 <_printf_i+0x148>
 800ca0e:	6833      	ldr	r3, [r6, #0]
 800ca10:	1d1a      	adds	r2, r3, #4
 800ca12:	6032      	str	r2, [r6, #0]
 800ca14:	681e      	ldr	r6, [r3, #0]
 800ca16:	6862      	ldr	r2, [r4, #4]
 800ca18:	2100      	movs	r1, #0
 800ca1a:	4630      	mov	r0, r6
 800ca1c:	f7f3 fbf8 	bl	8000210 <memchr>
 800ca20:	b108      	cbz	r0, 800ca26 <_printf_i+0x1e6>
 800ca22:	1b80      	subs	r0, r0, r6
 800ca24:	6060      	str	r0, [r4, #4]
 800ca26:	6863      	ldr	r3, [r4, #4]
 800ca28:	6123      	str	r3, [r4, #16]
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ca30:	e7aa      	b.n	800c988 <_printf_i+0x148>
 800ca32:	6923      	ldr	r3, [r4, #16]
 800ca34:	4632      	mov	r2, r6
 800ca36:	4649      	mov	r1, r9
 800ca38:	4640      	mov	r0, r8
 800ca3a:	47d0      	blx	sl
 800ca3c:	3001      	adds	r0, #1
 800ca3e:	d0ad      	beq.n	800c99c <_printf_i+0x15c>
 800ca40:	6823      	ldr	r3, [r4, #0]
 800ca42:	079b      	lsls	r3, r3, #30
 800ca44:	d413      	bmi.n	800ca6e <_printf_i+0x22e>
 800ca46:	68e0      	ldr	r0, [r4, #12]
 800ca48:	9b03      	ldr	r3, [sp, #12]
 800ca4a:	4298      	cmp	r0, r3
 800ca4c:	bfb8      	it	lt
 800ca4e:	4618      	movlt	r0, r3
 800ca50:	e7a6      	b.n	800c9a0 <_printf_i+0x160>
 800ca52:	2301      	movs	r3, #1
 800ca54:	4632      	mov	r2, r6
 800ca56:	4649      	mov	r1, r9
 800ca58:	4640      	mov	r0, r8
 800ca5a:	47d0      	blx	sl
 800ca5c:	3001      	adds	r0, #1
 800ca5e:	d09d      	beq.n	800c99c <_printf_i+0x15c>
 800ca60:	3501      	adds	r5, #1
 800ca62:	68e3      	ldr	r3, [r4, #12]
 800ca64:	9903      	ldr	r1, [sp, #12]
 800ca66:	1a5b      	subs	r3, r3, r1
 800ca68:	42ab      	cmp	r3, r5
 800ca6a:	dcf2      	bgt.n	800ca52 <_printf_i+0x212>
 800ca6c:	e7eb      	b.n	800ca46 <_printf_i+0x206>
 800ca6e:	2500      	movs	r5, #0
 800ca70:	f104 0619 	add.w	r6, r4, #25
 800ca74:	e7f5      	b.n	800ca62 <_printf_i+0x222>
 800ca76:	bf00      	nop
 800ca78:	08010d56 	.word	0x08010d56
 800ca7c:	08010d67 	.word	0x08010d67

0800ca80 <_scanf_float>:
 800ca80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca84:	b087      	sub	sp, #28
 800ca86:	4617      	mov	r7, r2
 800ca88:	9303      	str	r3, [sp, #12]
 800ca8a:	688b      	ldr	r3, [r1, #8]
 800ca8c:	1e5a      	subs	r2, r3, #1
 800ca8e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ca92:	bf81      	itttt	hi
 800ca94:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ca98:	eb03 0b05 	addhi.w	fp, r3, r5
 800ca9c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800caa0:	608b      	strhi	r3, [r1, #8]
 800caa2:	680b      	ldr	r3, [r1, #0]
 800caa4:	460a      	mov	r2, r1
 800caa6:	f04f 0500 	mov.w	r5, #0
 800caaa:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800caae:	f842 3b1c 	str.w	r3, [r2], #28
 800cab2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800cab6:	4680      	mov	r8, r0
 800cab8:	460c      	mov	r4, r1
 800caba:	bf98      	it	ls
 800cabc:	f04f 0b00 	movls.w	fp, #0
 800cac0:	9201      	str	r2, [sp, #4]
 800cac2:	4616      	mov	r6, r2
 800cac4:	46aa      	mov	sl, r5
 800cac6:	46a9      	mov	r9, r5
 800cac8:	9502      	str	r5, [sp, #8]
 800caca:	68a2      	ldr	r2, [r4, #8]
 800cacc:	b152      	cbz	r2, 800cae4 <_scanf_float+0x64>
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	781b      	ldrb	r3, [r3, #0]
 800cad2:	2b4e      	cmp	r3, #78	@ 0x4e
 800cad4:	d864      	bhi.n	800cba0 <_scanf_float+0x120>
 800cad6:	2b40      	cmp	r3, #64	@ 0x40
 800cad8:	d83c      	bhi.n	800cb54 <_scanf_float+0xd4>
 800cada:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800cade:	b2c8      	uxtb	r0, r1
 800cae0:	280e      	cmp	r0, #14
 800cae2:	d93a      	bls.n	800cb5a <_scanf_float+0xda>
 800cae4:	f1b9 0f00 	cmp.w	r9, #0
 800cae8:	d003      	beq.n	800caf2 <_scanf_float+0x72>
 800caea:	6823      	ldr	r3, [r4, #0]
 800caec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800caf0:	6023      	str	r3, [r4, #0]
 800caf2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800caf6:	f1ba 0f01 	cmp.w	sl, #1
 800cafa:	f200 8117 	bhi.w	800cd2c <_scanf_float+0x2ac>
 800cafe:	9b01      	ldr	r3, [sp, #4]
 800cb00:	429e      	cmp	r6, r3
 800cb02:	f200 8108 	bhi.w	800cd16 <_scanf_float+0x296>
 800cb06:	2001      	movs	r0, #1
 800cb08:	b007      	add	sp, #28
 800cb0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb0e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800cb12:	2a0d      	cmp	r2, #13
 800cb14:	d8e6      	bhi.n	800cae4 <_scanf_float+0x64>
 800cb16:	a101      	add	r1, pc, #4	@ (adr r1, 800cb1c <_scanf_float+0x9c>)
 800cb18:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cb1c:	0800cc63 	.word	0x0800cc63
 800cb20:	0800cae5 	.word	0x0800cae5
 800cb24:	0800cae5 	.word	0x0800cae5
 800cb28:	0800cae5 	.word	0x0800cae5
 800cb2c:	0800ccc3 	.word	0x0800ccc3
 800cb30:	0800cc9b 	.word	0x0800cc9b
 800cb34:	0800cae5 	.word	0x0800cae5
 800cb38:	0800cae5 	.word	0x0800cae5
 800cb3c:	0800cc71 	.word	0x0800cc71
 800cb40:	0800cae5 	.word	0x0800cae5
 800cb44:	0800cae5 	.word	0x0800cae5
 800cb48:	0800cae5 	.word	0x0800cae5
 800cb4c:	0800cae5 	.word	0x0800cae5
 800cb50:	0800cc29 	.word	0x0800cc29
 800cb54:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800cb58:	e7db      	b.n	800cb12 <_scanf_float+0x92>
 800cb5a:	290e      	cmp	r1, #14
 800cb5c:	d8c2      	bhi.n	800cae4 <_scanf_float+0x64>
 800cb5e:	a001      	add	r0, pc, #4	@ (adr r0, 800cb64 <_scanf_float+0xe4>)
 800cb60:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800cb64:	0800cc19 	.word	0x0800cc19
 800cb68:	0800cae5 	.word	0x0800cae5
 800cb6c:	0800cc19 	.word	0x0800cc19
 800cb70:	0800ccaf 	.word	0x0800ccaf
 800cb74:	0800cae5 	.word	0x0800cae5
 800cb78:	0800cbc1 	.word	0x0800cbc1
 800cb7c:	0800cbff 	.word	0x0800cbff
 800cb80:	0800cbff 	.word	0x0800cbff
 800cb84:	0800cbff 	.word	0x0800cbff
 800cb88:	0800cbff 	.word	0x0800cbff
 800cb8c:	0800cbff 	.word	0x0800cbff
 800cb90:	0800cbff 	.word	0x0800cbff
 800cb94:	0800cbff 	.word	0x0800cbff
 800cb98:	0800cbff 	.word	0x0800cbff
 800cb9c:	0800cbff 	.word	0x0800cbff
 800cba0:	2b6e      	cmp	r3, #110	@ 0x6e
 800cba2:	d809      	bhi.n	800cbb8 <_scanf_float+0x138>
 800cba4:	2b60      	cmp	r3, #96	@ 0x60
 800cba6:	d8b2      	bhi.n	800cb0e <_scanf_float+0x8e>
 800cba8:	2b54      	cmp	r3, #84	@ 0x54
 800cbaa:	d07b      	beq.n	800cca4 <_scanf_float+0x224>
 800cbac:	2b59      	cmp	r3, #89	@ 0x59
 800cbae:	d199      	bne.n	800cae4 <_scanf_float+0x64>
 800cbb0:	2d07      	cmp	r5, #7
 800cbb2:	d197      	bne.n	800cae4 <_scanf_float+0x64>
 800cbb4:	2508      	movs	r5, #8
 800cbb6:	e02c      	b.n	800cc12 <_scanf_float+0x192>
 800cbb8:	2b74      	cmp	r3, #116	@ 0x74
 800cbba:	d073      	beq.n	800cca4 <_scanf_float+0x224>
 800cbbc:	2b79      	cmp	r3, #121	@ 0x79
 800cbbe:	e7f6      	b.n	800cbae <_scanf_float+0x12e>
 800cbc0:	6821      	ldr	r1, [r4, #0]
 800cbc2:	05c8      	lsls	r0, r1, #23
 800cbc4:	d51b      	bpl.n	800cbfe <_scanf_float+0x17e>
 800cbc6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800cbca:	6021      	str	r1, [r4, #0]
 800cbcc:	f109 0901 	add.w	r9, r9, #1
 800cbd0:	f1bb 0f00 	cmp.w	fp, #0
 800cbd4:	d003      	beq.n	800cbde <_scanf_float+0x15e>
 800cbd6:	3201      	adds	r2, #1
 800cbd8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cbdc:	60a2      	str	r2, [r4, #8]
 800cbde:	68a3      	ldr	r3, [r4, #8]
 800cbe0:	3b01      	subs	r3, #1
 800cbe2:	60a3      	str	r3, [r4, #8]
 800cbe4:	6923      	ldr	r3, [r4, #16]
 800cbe6:	3301      	adds	r3, #1
 800cbe8:	6123      	str	r3, [r4, #16]
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	3b01      	subs	r3, #1
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	607b      	str	r3, [r7, #4]
 800cbf2:	f340 8087 	ble.w	800cd04 <_scanf_float+0x284>
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	3301      	adds	r3, #1
 800cbfa:	603b      	str	r3, [r7, #0]
 800cbfc:	e765      	b.n	800caca <_scanf_float+0x4a>
 800cbfe:	eb1a 0105 	adds.w	r1, sl, r5
 800cc02:	f47f af6f 	bne.w	800cae4 <_scanf_float+0x64>
 800cc06:	6822      	ldr	r2, [r4, #0]
 800cc08:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800cc0c:	6022      	str	r2, [r4, #0]
 800cc0e:	460d      	mov	r5, r1
 800cc10:	468a      	mov	sl, r1
 800cc12:	f806 3b01 	strb.w	r3, [r6], #1
 800cc16:	e7e2      	b.n	800cbde <_scanf_float+0x15e>
 800cc18:	6822      	ldr	r2, [r4, #0]
 800cc1a:	0610      	lsls	r0, r2, #24
 800cc1c:	f57f af62 	bpl.w	800cae4 <_scanf_float+0x64>
 800cc20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cc24:	6022      	str	r2, [r4, #0]
 800cc26:	e7f4      	b.n	800cc12 <_scanf_float+0x192>
 800cc28:	f1ba 0f00 	cmp.w	sl, #0
 800cc2c:	d10e      	bne.n	800cc4c <_scanf_float+0x1cc>
 800cc2e:	f1b9 0f00 	cmp.w	r9, #0
 800cc32:	d10e      	bne.n	800cc52 <_scanf_float+0x1d2>
 800cc34:	6822      	ldr	r2, [r4, #0]
 800cc36:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800cc3a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800cc3e:	d108      	bne.n	800cc52 <_scanf_float+0x1d2>
 800cc40:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cc44:	6022      	str	r2, [r4, #0]
 800cc46:	f04f 0a01 	mov.w	sl, #1
 800cc4a:	e7e2      	b.n	800cc12 <_scanf_float+0x192>
 800cc4c:	f1ba 0f02 	cmp.w	sl, #2
 800cc50:	d055      	beq.n	800ccfe <_scanf_float+0x27e>
 800cc52:	2d01      	cmp	r5, #1
 800cc54:	d002      	beq.n	800cc5c <_scanf_float+0x1dc>
 800cc56:	2d04      	cmp	r5, #4
 800cc58:	f47f af44 	bne.w	800cae4 <_scanf_float+0x64>
 800cc5c:	3501      	adds	r5, #1
 800cc5e:	b2ed      	uxtb	r5, r5
 800cc60:	e7d7      	b.n	800cc12 <_scanf_float+0x192>
 800cc62:	f1ba 0f01 	cmp.w	sl, #1
 800cc66:	f47f af3d 	bne.w	800cae4 <_scanf_float+0x64>
 800cc6a:	f04f 0a02 	mov.w	sl, #2
 800cc6e:	e7d0      	b.n	800cc12 <_scanf_float+0x192>
 800cc70:	b97d      	cbnz	r5, 800cc92 <_scanf_float+0x212>
 800cc72:	f1b9 0f00 	cmp.w	r9, #0
 800cc76:	f47f af38 	bne.w	800caea <_scanf_float+0x6a>
 800cc7a:	6822      	ldr	r2, [r4, #0]
 800cc7c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800cc80:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800cc84:	f040 8108 	bne.w	800ce98 <_scanf_float+0x418>
 800cc88:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cc8c:	6022      	str	r2, [r4, #0]
 800cc8e:	2501      	movs	r5, #1
 800cc90:	e7bf      	b.n	800cc12 <_scanf_float+0x192>
 800cc92:	2d03      	cmp	r5, #3
 800cc94:	d0e2      	beq.n	800cc5c <_scanf_float+0x1dc>
 800cc96:	2d05      	cmp	r5, #5
 800cc98:	e7de      	b.n	800cc58 <_scanf_float+0x1d8>
 800cc9a:	2d02      	cmp	r5, #2
 800cc9c:	f47f af22 	bne.w	800cae4 <_scanf_float+0x64>
 800cca0:	2503      	movs	r5, #3
 800cca2:	e7b6      	b.n	800cc12 <_scanf_float+0x192>
 800cca4:	2d06      	cmp	r5, #6
 800cca6:	f47f af1d 	bne.w	800cae4 <_scanf_float+0x64>
 800ccaa:	2507      	movs	r5, #7
 800ccac:	e7b1      	b.n	800cc12 <_scanf_float+0x192>
 800ccae:	6822      	ldr	r2, [r4, #0]
 800ccb0:	0591      	lsls	r1, r2, #22
 800ccb2:	f57f af17 	bpl.w	800cae4 <_scanf_float+0x64>
 800ccb6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800ccba:	6022      	str	r2, [r4, #0]
 800ccbc:	f8cd 9008 	str.w	r9, [sp, #8]
 800ccc0:	e7a7      	b.n	800cc12 <_scanf_float+0x192>
 800ccc2:	6822      	ldr	r2, [r4, #0]
 800ccc4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800ccc8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800cccc:	d006      	beq.n	800ccdc <_scanf_float+0x25c>
 800ccce:	0550      	lsls	r0, r2, #21
 800ccd0:	f57f af08 	bpl.w	800cae4 <_scanf_float+0x64>
 800ccd4:	f1b9 0f00 	cmp.w	r9, #0
 800ccd8:	f000 80de 	beq.w	800ce98 <_scanf_float+0x418>
 800ccdc:	0591      	lsls	r1, r2, #22
 800ccde:	bf58      	it	pl
 800cce0:	9902      	ldrpl	r1, [sp, #8]
 800cce2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cce6:	bf58      	it	pl
 800cce8:	eba9 0101 	subpl.w	r1, r9, r1
 800ccec:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800ccf0:	bf58      	it	pl
 800ccf2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ccf6:	6022      	str	r2, [r4, #0]
 800ccf8:	f04f 0900 	mov.w	r9, #0
 800ccfc:	e789      	b.n	800cc12 <_scanf_float+0x192>
 800ccfe:	f04f 0a03 	mov.w	sl, #3
 800cd02:	e786      	b.n	800cc12 <_scanf_float+0x192>
 800cd04:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800cd08:	4639      	mov	r1, r7
 800cd0a:	4640      	mov	r0, r8
 800cd0c:	4798      	blx	r3
 800cd0e:	2800      	cmp	r0, #0
 800cd10:	f43f aedb 	beq.w	800caca <_scanf_float+0x4a>
 800cd14:	e6e6      	b.n	800cae4 <_scanf_float+0x64>
 800cd16:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cd1a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cd1e:	463a      	mov	r2, r7
 800cd20:	4640      	mov	r0, r8
 800cd22:	4798      	blx	r3
 800cd24:	6923      	ldr	r3, [r4, #16]
 800cd26:	3b01      	subs	r3, #1
 800cd28:	6123      	str	r3, [r4, #16]
 800cd2a:	e6e8      	b.n	800cafe <_scanf_float+0x7e>
 800cd2c:	1e6b      	subs	r3, r5, #1
 800cd2e:	2b06      	cmp	r3, #6
 800cd30:	d824      	bhi.n	800cd7c <_scanf_float+0x2fc>
 800cd32:	2d02      	cmp	r5, #2
 800cd34:	d836      	bhi.n	800cda4 <_scanf_float+0x324>
 800cd36:	9b01      	ldr	r3, [sp, #4]
 800cd38:	429e      	cmp	r6, r3
 800cd3a:	f67f aee4 	bls.w	800cb06 <_scanf_float+0x86>
 800cd3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cd42:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cd46:	463a      	mov	r2, r7
 800cd48:	4640      	mov	r0, r8
 800cd4a:	4798      	blx	r3
 800cd4c:	6923      	ldr	r3, [r4, #16]
 800cd4e:	3b01      	subs	r3, #1
 800cd50:	6123      	str	r3, [r4, #16]
 800cd52:	e7f0      	b.n	800cd36 <_scanf_float+0x2b6>
 800cd54:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cd58:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800cd5c:	463a      	mov	r2, r7
 800cd5e:	4640      	mov	r0, r8
 800cd60:	4798      	blx	r3
 800cd62:	6923      	ldr	r3, [r4, #16]
 800cd64:	3b01      	subs	r3, #1
 800cd66:	6123      	str	r3, [r4, #16]
 800cd68:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cd6c:	fa5f fa8a 	uxtb.w	sl, sl
 800cd70:	f1ba 0f02 	cmp.w	sl, #2
 800cd74:	d1ee      	bne.n	800cd54 <_scanf_float+0x2d4>
 800cd76:	3d03      	subs	r5, #3
 800cd78:	b2ed      	uxtb	r5, r5
 800cd7a:	1b76      	subs	r6, r6, r5
 800cd7c:	6823      	ldr	r3, [r4, #0]
 800cd7e:	05da      	lsls	r2, r3, #23
 800cd80:	d530      	bpl.n	800cde4 <_scanf_float+0x364>
 800cd82:	055b      	lsls	r3, r3, #21
 800cd84:	d511      	bpl.n	800cdaa <_scanf_float+0x32a>
 800cd86:	9b01      	ldr	r3, [sp, #4]
 800cd88:	429e      	cmp	r6, r3
 800cd8a:	f67f aebc 	bls.w	800cb06 <_scanf_float+0x86>
 800cd8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cd92:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cd96:	463a      	mov	r2, r7
 800cd98:	4640      	mov	r0, r8
 800cd9a:	4798      	blx	r3
 800cd9c:	6923      	ldr	r3, [r4, #16]
 800cd9e:	3b01      	subs	r3, #1
 800cda0:	6123      	str	r3, [r4, #16]
 800cda2:	e7f0      	b.n	800cd86 <_scanf_float+0x306>
 800cda4:	46aa      	mov	sl, r5
 800cda6:	46b3      	mov	fp, r6
 800cda8:	e7de      	b.n	800cd68 <_scanf_float+0x2e8>
 800cdaa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800cdae:	6923      	ldr	r3, [r4, #16]
 800cdb0:	2965      	cmp	r1, #101	@ 0x65
 800cdb2:	f103 33ff 	add.w	r3, r3, #4294967295
 800cdb6:	f106 35ff 	add.w	r5, r6, #4294967295
 800cdba:	6123      	str	r3, [r4, #16]
 800cdbc:	d00c      	beq.n	800cdd8 <_scanf_float+0x358>
 800cdbe:	2945      	cmp	r1, #69	@ 0x45
 800cdc0:	d00a      	beq.n	800cdd8 <_scanf_float+0x358>
 800cdc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cdc6:	463a      	mov	r2, r7
 800cdc8:	4640      	mov	r0, r8
 800cdca:	4798      	blx	r3
 800cdcc:	6923      	ldr	r3, [r4, #16]
 800cdce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800cdd2:	3b01      	subs	r3, #1
 800cdd4:	1eb5      	subs	r5, r6, #2
 800cdd6:	6123      	str	r3, [r4, #16]
 800cdd8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cddc:	463a      	mov	r2, r7
 800cdde:	4640      	mov	r0, r8
 800cde0:	4798      	blx	r3
 800cde2:	462e      	mov	r6, r5
 800cde4:	6822      	ldr	r2, [r4, #0]
 800cde6:	f012 0210 	ands.w	r2, r2, #16
 800cdea:	d001      	beq.n	800cdf0 <_scanf_float+0x370>
 800cdec:	2000      	movs	r0, #0
 800cdee:	e68b      	b.n	800cb08 <_scanf_float+0x88>
 800cdf0:	7032      	strb	r2, [r6, #0]
 800cdf2:	6823      	ldr	r3, [r4, #0]
 800cdf4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800cdf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cdfc:	d11c      	bne.n	800ce38 <_scanf_float+0x3b8>
 800cdfe:	9b02      	ldr	r3, [sp, #8]
 800ce00:	454b      	cmp	r3, r9
 800ce02:	eba3 0209 	sub.w	r2, r3, r9
 800ce06:	d123      	bne.n	800ce50 <_scanf_float+0x3d0>
 800ce08:	9901      	ldr	r1, [sp, #4]
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	4640      	mov	r0, r8
 800ce0e:	f002 fc9f 	bl	800f750 <_strtod_r>
 800ce12:	9b03      	ldr	r3, [sp, #12]
 800ce14:	6821      	ldr	r1, [r4, #0]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	f011 0f02 	tst.w	r1, #2
 800ce1c:	ec57 6b10 	vmov	r6, r7, d0
 800ce20:	f103 0204 	add.w	r2, r3, #4
 800ce24:	d01f      	beq.n	800ce66 <_scanf_float+0x3e6>
 800ce26:	9903      	ldr	r1, [sp, #12]
 800ce28:	600a      	str	r2, [r1, #0]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	e9c3 6700 	strd	r6, r7, [r3]
 800ce30:	68e3      	ldr	r3, [r4, #12]
 800ce32:	3301      	adds	r3, #1
 800ce34:	60e3      	str	r3, [r4, #12]
 800ce36:	e7d9      	b.n	800cdec <_scanf_float+0x36c>
 800ce38:	9b04      	ldr	r3, [sp, #16]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d0e4      	beq.n	800ce08 <_scanf_float+0x388>
 800ce3e:	9905      	ldr	r1, [sp, #20]
 800ce40:	230a      	movs	r3, #10
 800ce42:	3101      	adds	r1, #1
 800ce44:	4640      	mov	r0, r8
 800ce46:	f002 fd03 	bl	800f850 <_strtol_r>
 800ce4a:	9b04      	ldr	r3, [sp, #16]
 800ce4c:	9e05      	ldr	r6, [sp, #20]
 800ce4e:	1ac2      	subs	r2, r0, r3
 800ce50:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800ce54:	429e      	cmp	r6, r3
 800ce56:	bf28      	it	cs
 800ce58:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800ce5c:	4910      	ldr	r1, [pc, #64]	@ (800cea0 <_scanf_float+0x420>)
 800ce5e:	4630      	mov	r0, r6
 800ce60:	f000 f8f6 	bl	800d050 <siprintf>
 800ce64:	e7d0      	b.n	800ce08 <_scanf_float+0x388>
 800ce66:	f011 0f04 	tst.w	r1, #4
 800ce6a:	9903      	ldr	r1, [sp, #12]
 800ce6c:	600a      	str	r2, [r1, #0]
 800ce6e:	d1dc      	bne.n	800ce2a <_scanf_float+0x3aa>
 800ce70:	681d      	ldr	r5, [r3, #0]
 800ce72:	4632      	mov	r2, r6
 800ce74:	463b      	mov	r3, r7
 800ce76:	4630      	mov	r0, r6
 800ce78:	4639      	mov	r1, r7
 800ce7a:	f7f3 fe77 	bl	8000b6c <__aeabi_dcmpun>
 800ce7e:	b128      	cbz	r0, 800ce8c <_scanf_float+0x40c>
 800ce80:	4808      	ldr	r0, [pc, #32]	@ (800cea4 <_scanf_float+0x424>)
 800ce82:	f000 fa5d 	bl	800d340 <nanf>
 800ce86:	ed85 0a00 	vstr	s0, [r5]
 800ce8a:	e7d1      	b.n	800ce30 <_scanf_float+0x3b0>
 800ce8c:	4630      	mov	r0, r6
 800ce8e:	4639      	mov	r1, r7
 800ce90:	f7f3 feca 	bl	8000c28 <__aeabi_d2f>
 800ce94:	6028      	str	r0, [r5, #0]
 800ce96:	e7cb      	b.n	800ce30 <_scanf_float+0x3b0>
 800ce98:	f04f 0900 	mov.w	r9, #0
 800ce9c:	e629      	b.n	800caf2 <_scanf_float+0x72>
 800ce9e:	bf00      	nop
 800cea0:	08010d78 	.word	0x08010d78
 800cea4:	0801110d 	.word	0x0801110d

0800cea8 <std>:
 800cea8:	2300      	movs	r3, #0
 800ceaa:	b510      	push	{r4, lr}
 800ceac:	4604      	mov	r4, r0
 800ceae:	e9c0 3300 	strd	r3, r3, [r0]
 800ceb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ceb6:	6083      	str	r3, [r0, #8]
 800ceb8:	8181      	strh	r1, [r0, #12]
 800ceba:	6643      	str	r3, [r0, #100]	@ 0x64
 800cebc:	81c2      	strh	r2, [r0, #14]
 800cebe:	6183      	str	r3, [r0, #24]
 800cec0:	4619      	mov	r1, r3
 800cec2:	2208      	movs	r2, #8
 800cec4:	305c      	adds	r0, #92	@ 0x5c
 800cec6:	f000 f9bb 	bl	800d240 <memset>
 800ceca:	4b0d      	ldr	r3, [pc, #52]	@ (800cf00 <std+0x58>)
 800cecc:	6263      	str	r3, [r4, #36]	@ 0x24
 800cece:	4b0d      	ldr	r3, [pc, #52]	@ (800cf04 <std+0x5c>)
 800ced0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ced2:	4b0d      	ldr	r3, [pc, #52]	@ (800cf08 <std+0x60>)
 800ced4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ced6:	4b0d      	ldr	r3, [pc, #52]	@ (800cf0c <std+0x64>)
 800ced8:	6323      	str	r3, [r4, #48]	@ 0x30
 800ceda:	4b0d      	ldr	r3, [pc, #52]	@ (800cf10 <std+0x68>)
 800cedc:	6224      	str	r4, [r4, #32]
 800cede:	429c      	cmp	r4, r3
 800cee0:	d006      	beq.n	800cef0 <std+0x48>
 800cee2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cee6:	4294      	cmp	r4, r2
 800cee8:	d002      	beq.n	800cef0 <std+0x48>
 800ceea:	33d0      	adds	r3, #208	@ 0xd0
 800ceec:	429c      	cmp	r4, r3
 800ceee:	d105      	bne.n	800cefc <std+0x54>
 800cef0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cef8:	f000 ba1e 	b.w	800d338 <__retarget_lock_init_recursive>
 800cefc:	bd10      	pop	{r4, pc}
 800cefe:	bf00      	nop
 800cf00:	0800d091 	.word	0x0800d091
 800cf04:	0800d0b3 	.word	0x0800d0b3
 800cf08:	0800d0eb 	.word	0x0800d0eb
 800cf0c:	0800d10f 	.word	0x0800d10f
 800cf10:	20012c48 	.word	0x20012c48

0800cf14 <stdio_exit_handler>:
 800cf14:	4a02      	ldr	r2, [pc, #8]	@ (800cf20 <stdio_exit_handler+0xc>)
 800cf16:	4903      	ldr	r1, [pc, #12]	@ (800cf24 <stdio_exit_handler+0x10>)
 800cf18:	4803      	ldr	r0, [pc, #12]	@ (800cf28 <stdio_exit_handler+0x14>)
 800cf1a:	f000 b869 	b.w	800cff0 <_fwalk_sglue>
 800cf1e:	bf00      	nop
 800cf20:	2000010c 	.word	0x2000010c
 800cf24:	0800fe91 	.word	0x0800fe91
 800cf28:	2000011c 	.word	0x2000011c

0800cf2c <cleanup_stdio>:
 800cf2c:	6841      	ldr	r1, [r0, #4]
 800cf2e:	4b0c      	ldr	r3, [pc, #48]	@ (800cf60 <cleanup_stdio+0x34>)
 800cf30:	4299      	cmp	r1, r3
 800cf32:	b510      	push	{r4, lr}
 800cf34:	4604      	mov	r4, r0
 800cf36:	d001      	beq.n	800cf3c <cleanup_stdio+0x10>
 800cf38:	f002 ffaa 	bl	800fe90 <_fflush_r>
 800cf3c:	68a1      	ldr	r1, [r4, #8]
 800cf3e:	4b09      	ldr	r3, [pc, #36]	@ (800cf64 <cleanup_stdio+0x38>)
 800cf40:	4299      	cmp	r1, r3
 800cf42:	d002      	beq.n	800cf4a <cleanup_stdio+0x1e>
 800cf44:	4620      	mov	r0, r4
 800cf46:	f002 ffa3 	bl	800fe90 <_fflush_r>
 800cf4a:	68e1      	ldr	r1, [r4, #12]
 800cf4c:	4b06      	ldr	r3, [pc, #24]	@ (800cf68 <cleanup_stdio+0x3c>)
 800cf4e:	4299      	cmp	r1, r3
 800cf50:	d004      	beq.n	800cf5c <cleanup_stdio+0x30>
 800cf52:	4620      	mov	r0, r4
 800cf54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf58:	f002 bf9a 	b.w	800fe90 <_fflush_r>
 800cf5c:	bd10      	pop	{r4, pc}
 800cf5e:	bf00      	nop
 800cf60:	20012c48 	.word	0x20012c48
 800cf64:	20012cb0 	.word	0x20012cb0
 800cf68:	20012d18 	.word	0x20012d18

0800cf6c <global_stdio_init.part.0>:
 800cf6c:	b510      	push	{r4, lr}
 800cf6e:	4b0b      	ldr	r3, [pc, #44]	@ (800cf9c <global_stdio_init.part.0+0x30>)
 800cf70:	4c0b      	ldr	r4, [pc, #44]	@ (800cfa0 <global_stdio_init.part.0+0x34>)
 800cf72:	4a0c      	ldr	r2, [pc, #48]	@ (800cfa4 <global_stdio_init.part.0+0x38>)
 800cf74:	601a      	str	r2, [r3, #0]
 800cf76:	4620      	mov	r0, r4
 800cf78:	2200      	movs	r2, #0
 800cf7a:	2104      	movs	r1, #4
 800cf7c:	f7ff ff94 	bl	800cea8 <std>
 800cf80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cf84:	2201      	movs	r2, #1
 800cf86:	2109      	movs	r1, #9
 800cf88:	f7ff ff8e 	bl	800cea8 <std>
 800cf8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cf90:	2202      	movs	r2, #2
 800cf92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf96:	2112      	movs	r1, #18
 800cf98:	f7ff bf86 	b.w	800cea8 <std>
 800cf9c:	20012d80 	.word	0x20012d80
 800cfa0:	20012c48 	.word	0x20012c48
 800cfa4:	0800cf15 	.word	0x0800cf15

0800cfa8 <__sfp_lock_acquire>:
 800cfa8:	4801      	ldr	r0, [pc, #4]	@ (800cfb0 <__sfp_lock_acquire+0x8>)
 800cfaa:	f000 b9c6 	b.w	800d33a <__retarget_lock_acquire_recursive>
 800cfae:	bf00      	nop
 800cfb0:	20012d89 	.word	0x20012d89

0800cfb4 <__sfp_lock_release>:
 800cfb4:	4801      	ldr	r0, [pc, #4]	@ (800cfbc <__sfp_lock_release+0x8>)
 800cfb6:	f000 b9c1 	b.w	800d33c <__retarget_lock_release_recursive>
 800cfba:	bf00      	nop
 800cfbc:	20012d89 	.word	0x20012d89

0800cfc0 <__sinit>:
 800cfc0:	b510      	push	{r4, lr}
 800cfc2:	4604      	mov	r4, r0
 800cfc4:	f7ff fff0 	bl	800cfa8 <__sfp_lock_acquire>
 800cfc8:	6a23      	ldr	r3, [r4, #32]
 800cfca:	b11b      	cbz	r3, 800cfd4 <__sinit+0x14>
 800cfcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfd0:	f7ff bff0 	b.w	800cfb4 <__sfp_lock_release>
 800cfd4:	4b04      	ldr	r3, [pc, #16]	@ (800cfe8 <__sinit+0x28>)
 800cfd6:	6223      	str	r3, [r4, #32]
 800cfd8:	4b04      	ldr	r3, [pc, #16]	@ (800cfec <__sinit+0x2c>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d1f5      	bne.n	800cfcc <__sinit+0xc>
 800cfe0:	f7ff ffc4 	bl	800cf6c <global_stdio_init.part.0>
 800cfe4:	e7f2      	b.n	800cfcc <__sinit+0xc>
 800cfe6:	bf00      	nop
 800cfe8:	0800cf2d 	.word	0x0800cf2d
 800cfec:	20012d80 	.word	0x20012d80

0800cff0 <_fwalk_sglue>:
 800cff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cff4:	4607      	mov	r7, r0
 800cff6:	4688      	mov	r8, r1
 800cff8:	4614      	mov	r4, r2
 800cffa:	2600      	movs	r6, #0
 800cffc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d000:	f1b9 0901 	subs.w	r9, r9, #1
 800d004:	d505      	bpl.n	800d012 <_fwalk_sglue+0x22>
 800d006:	6824      	ldr	r4, [r4, #0]
 800d008:	2c00      	cmp	r4, #0
 800d00a:	d1f7      	bne.n	800cffc <_fwalk_sglue+0xc>
 800d00c:	4630      	mov	r0, r6
 800d00e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d012:	89ab      	ldrh	r3, [r5, #12]
 800d014:	2b01      	cmp	r3, #1
 800d016:	d907      	bls.n	800d028 <_fwalk_sglue+0x38>
 800d018:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d01c:	3301      	adds	r3, #1
 800d01e:	d003      	beq.n	800d028 <_fwalk_sglue+0x38>
 800d020:	4629      	mov	r1, r5
 800d022:	4638      	mov	r0, r7
 800d024:	47c0      	blx	r8
 800d026:	4306      	orrs	r6, r0
 800d028:	3568      	adds	r5, #104	@ 0x68
 800d02a:	e7e9      	b.n	800d000 <_fwalk_sglue+0x10>

0800d02c <iprintf>:
 800d02c:	b40f      	push	{r0, r1, r2, r3}
 800d02e:	b507      	push	{r0, r1, r2, lr}
 800d030:	4906      	ldr	r1, [pc, #24]	@ (800d04c <iprintf+0x20>)
 800d032:	ab04      	add	r3, sp, #16
 800d034:	6808      	ldr	r0, [r1, #0]
 800d036:	f853 2b04 	ldr.w	r2, [r3], #4
 800d03a:	6881      	ldr	r1, [r0, #8]
 800d03c:	9301      	str	r3, [sp, #4]
 800d03e:	f002 fd8b 	bl	800fb58 <_vfiprintf_r>
 800d042:	b003      	add	sp, #12
 800d044:	f85d eb04 	ldr.w	lr, [sp], #4
 800d048:	b004      	add	sp, #16
 800d04a:	4770      	bx	lr
 800d04c:	20000118 	.word	0x20000118

0800d050 <siprintf>:
 800d050:	b40e      	push	{r1, r2, r3}
 800d052:	b500      	push	{lr}
 800d054:	b09c      	sub	sp, #112	@ 0x70
 800d056:	ab1d      	add	r3, sp, #116	@ 0x74
 800d058:	9002      	str	r0, [sp, #8]
 800d05a:	9006      	str	r0, [sp, #24]
 800d05c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d060:	4809      	ldr	r0, [pc, #36]	@ (800d088 <siprintf+0x38>)
 800d062:	9107      	str	r1, [sp, #28]
 800d064:	9104      	str	r1, [sp, #16]
 800d066:	4909      	ldr	r1, [pc, #36]	@ (800d08c <siprintf+0x3c>)
 800d068:	f853 2b04 	ldr.w	r2, [r3], #4
 800d06c:	9105      	str	r1, [sp, #20]
 800d06e:	6800      	ldr	r0, [r0, #0]
 800d070:	9301      	str	r3, [sp, #4]
 800d072:	a902      	add	r1, sp, #8
 800d074:	f002 fc4a 	bl	800f90c <_svfiprintf_r>
 800d078:	9b02      	ldr	r3, [sp, #8]
 800d07a:	2200      	movs	r2, #0
 800d07c:	701a      	strb	r2, [r3, #0]
 800d07e:	b01c      	add	sp, #112	@ 0x70
 800d080:	f85d eb04 	ldr.w	lr, [sp], #4
 800d084:	b003      	add	sp, #12
 800d086:	4770      	bx	lr
 800d088:	20000118 	.word	0x20000118
 800d08c:	ffff0208 	.word	0xffff0208

0800d090 <__sread>:
 800d090:	b510      	push	{r4, lr}
 800d092:	460c      	mov	r4, r1
 800d094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d098:	f000 f900 	bl	800d29c <_read_r>
 800d09c:	2800      	cmp	r0, #0
 800d09e:	bfab      	itete	ge
 800d0a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d0a2:	89a3      	ldrhlt	r3, [r4, #12]
 800d0a4:	181b      	addge	r3, r3, r0
 800d0a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d0aa:	bfac      	ite	ge
 800d0ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d0ae:	81a3      	strhlt	r3, [r4, #12]
 800d0b0:	bd10      	pop	{r4, pc}

0800d0b2 <__swrite>:
 800d0b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0b6:	461f      	mov	r7, r3
 800d0b8:	898b      	ldrh	r3, [r1, #12]
 800d0ba:	05db      	lsls	r3, r3, #23
 800d0bc:	4605      	mov	r5, r0
 800d0be:	460c      	mov	r4, r1
 800d0c0:	4616      	mov	r6, r2
 800d0c2:	d505      	bpl.n	800d0d0 <__swrite+0x1e>
 800d0c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0c8:	2302      	movs	r3, #2
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	f000 f8d4 	bl	800d278 <_lseek_r>
 800d0d0:	89a3      	ldrh	r3, [r4, #12]
 800d0d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d0d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d0da:	81a3      	strh	r3, [r4, #12]
 800d0dc:	4632      	mov	r2, r6
 800d0de:	463b      	mov	r3, r7
 800d0e0:	4628      	mov	r0, r5
 800d0e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0e6:	f000 b8eb 	b.w	800d2c0 <_write_r>

0800d0ea <__sseek>:
 800d0ea:	b510      	push	{r4, lr}
 800d0ec:	460c      	mov	r4, r1
 800d0ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0f2:	f000 f8c1 	bl	800d278 <_lseek_r>
 800d0f6:	1c43      	adds	r3, r0, #1
 800d0f8:	89a3      	ldrh	r3, [r4, #12]
 800d0fa:	bf15      	itete	ne
 800d0fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d0fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d102:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d106:	81a3      	strheq	r3, [r4, #12]
 800d108:	bf18      	it	ne
 800d10a:	81a3      	strhne	r3, [r4, #12]
 800d10c:	bd10      	pop	{r4, pc}

0800d10e <__sclose>:
 800d10e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d112:	f000 b8a1 	b.w	800d258 <_close_r>

0800d116 <__swbuf_r>:
 800d116:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d118:	460e      	mov	r6, r1
 800d11a:	4614      	mov	r4, r2
 800d11c:	4605      	mov	r5, r0
 800d11e:	b118      	cbz	r0, 800d128 <__swbuf_r+0x12>
 800d120:	6a03      	ldr	r3, [r0, #32]
 800d122:	b90b      	cbnz	r3, 800d128 <__swbuf_r+0x12>
 800d124:	f7ff ff4c 	bl	800cfc0 <__sinit>
 800d128:	69a3      	ldr	r3, [r4, #24]
 800d12a:	60a3      	str	r3, [r4, #8]
 800d12c:	89a3      	ldrh	r3, [r4, #12]
 800d12e:	071a      	lsls	r2, r3, #28
 800d130:	d501      	bpl.n	800d136 <__swbuf_r+0x20>
 800d132:	6923      	ldr	r3, [r4, #16]
 800d134:	b943      	cbnz	r3, 800d148 <__swbuf_r+0x32>
 800d136:	4621      	mov	r1, r4
 800d138:	4628      	mov	r0, r5
 800d13a:	f000 f82b 	bl	800d194 <__swsetup_r>
 800d13e:	b118      	cbz	r0, 800d148 <__swbuf_r+0x32>
 800d140:	f04f 37ff 	mov.w	r7, #4294967295
 800d144:	4638      	mov	r0, r7
 800d146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d148:	6823      	ldr	r3, [r4, #0]
 800d14a:	6922      	ldr	r2, [r4, #16]
 800d14c:	1a98      	subs	r0, r3, r2
 800d14e:	6963      	ldr	r3, [r4, #20]
 800d150:	b2f6      	uxtb	r6, r6
 800d152:	4283      	cmp	r3, r0
 800d154:	4637      	mov	r7, r6
 800d156:	dc05      	bgt.n	800d164 <__swbuf_r+0x4e>
 800d158:	4621      	mov	r1, r4
 800d15a:	4628      	mov	r0, r5
 800d15c:	f002 fe98 	bl	800fe90 <_fflush_r>
 800d160:	2800      	cmp	r0, #0
 800d162:	d1ed      	bne.n	800d140 <__swbuf_r+0x2a>
 800d164:	68a3      	ldr	r3, [r4, #8]
 800d166:	3b01      	subs	r3, #1
 800d168:	60a3      	str	r3, [r4, #8]
 800d16a:	6823      	ldr	r3, [r4, #0]
 800d16c:	1c5a      	adds	r2, r3, #1
 800d16e:	6022      	str	r2, [r4, #0]
 800d170:	701e      	strb	r6, [r3, #0]
 800d172:	6962      	ldr	r2, [r4, #20]
 800d174:	1c43      	adds	r3, r0, #1
 800d176:	429a      	cmp	r2, r3
 800d178:	d004      	beq.n	800d184 <__swbuf_r+0x6e>
 800d17a:	89a3      	ldrh	r3, [r4, #12]
 800d17c:	07db      	lsls	r3, r3, #31
 800d17e:	d5e1      	bpl.n	800d144 <__swbuf_r+0x2e>
 800d180:	2e0a      	cmp	r6, #10
 800d182:	d1df      	bne.n	800d144 <__swbuf_r+0x2e>
 800d184:	4621      	mov	r1, r4
 800d186:	4628      	mov	r0, r5
 800d188:	f002 fe82 	bl	800fe90 <_fflush_r>
 800d18c:	2800      	cmp	r0, #0
 800d18e:	d0d9      	beq.n	800d144 <__swbuf_r+0x2e>
 800d190:	e7d6      	b.n	800d140 <__swbuf_r+0x2a>
	...

0800d194 <__swsetup_r>:
 800d194:	b538      	push	{r3, r4, r5, lr}
 800d196:	4b29      	ldr	r3, [pc, #164]	@ (800d23c <__swsetup_r+0xa8>)
 800d198:	4605      	mov	r5, r0
 800d19a:	6818      	ldr	r0, [r3, #0]
 800d19c:	460c      	mov	r4, r1
 800d19e:	b118      	cbz	r0, 800d1a8 <__swsetup_r+0x14>
 800d1a0:	6a03      	ldr	r3, [r0, #32]
 800d1a2:	b90b      	cbnz	r3, 800d1a8 <__swsetup_r+0x14>
 800d1a4:	f7ff ff0c 	bl	800cfc0 <__sinit>
 800d1a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1ac:	0719      	lsls	r1, r3, #28
 800d1ae:	d422      	bmi.n	800d1f6 <__swsetup_r+0x62>
 800d1b0:	06da      	lsls	r2, r3, #27
 800d1b2:	d407      	bmi.n	800d1c4 <__swsetup_r+0x30>
 800d1b4:	2209      	movs	r2, #9
 800d1b6:	602a      	str	r2, [r5, #0]
 800d1b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d1bc:	81a3      	strh	r3, [r4, #12]
 800d1be:	f04f 30ff 	mov.w	r0, #4294967295
 800d1c2:	e033      	b.n	800d22c <__swsetup_r+0x98>
 800d1c4:	0758      	lsls	r0, r3, #29
 800d1c6:	d512      	bpl.n	800d1ee <__swsetup_r+0x5a>
 800d1c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d1ca:	b141      	cbz	r1, 800d1de <__swsetup_r+0x4a>
 800d1cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d1d0:	4299      	cmp	r1, r3
 800d1d2:	d002      	beq.n	800d1da <__swsetup_r+0x46>
 800d1d4:	4628      	mov	r0, r5
 800d1d6:	f000 ff07 	bl	800dfe8 <_free_r>
 800d1da:	2300      	movs	r3, #0
 800d1dc:	6363      	str	r3, [r4, #52]	@ 0x34
 800d1de:	89a3      	ldrh	r3, [r4, #12]
 800d1e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d1e4:	81a3      	strh	r3, [r4, #12]
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	6063      	str	r3, [r4, #4]
 800d1ea:	6923      	ldr	r3, [r4, #16]
 800d1ec:	6023      	str	r3, [r4, #0]
 800d1ee:	89a3      	ldrh	r3, [r4, #12]
 800d1f0:	f043 0308 	orr.w	r3, r3, #8
 800d1f4:	81a3      	strh	r3, [r4, #12]
 800d1f6:	6923      	ldr	r3, [r4, #16]
 800d1f8:	b94b      	cbnz	r3, 800d20e <__swsetup_r+0x7a>
 800d1fa:	89a3      	ldrh	r3, [r4, #12]
 800d1fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d200:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d204:	d003      	beq.n	800d20e <__swsetup_r+0x7a>
 800d206:	4621      	mov	r1, r4
 800d208:	4628      	mov	r0, r5
 800d20a:	f002 fe8f 	bl	800ff2c <__smakebuf_r>
 800d20e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d212:	f013 0201 	ands.w	r2, r3, #1
 800d216:	d00a      	beq.n	800d22e <__swsetup_r+0x9a>
 800d218:	2200      	movs	r2, #0
 800d21a:	60a2      	str	r2, [r4, #8]
 800d21c:	6962      	ldr	r2, [r4, #20]
 800d21e:	4252      	negs	r2, r2
 800d220:	61a2      	str	r2, [r4, #24]
 800d222:	6922      	ldr	r2, [r4, #16]
 800d224:	b942      	cbnz	r2, 800d238 <__swsetup_r+0xa4>
 800d226:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d22a:	d1c5      	bne.n	800d1b8 <__swsetup_r+0x24>
 800d22c:	bd38      	pop	{r3, r4, r5, pc}
 800d22e:	0799      	lsls	r1, r3, #30
 800d230:	bf58      	it	pl
 800d232:	6962      	ldrpl	r2, [r4, #20]
 800d234:	60a2      	str	r2, [r4, #8]
 800d236:	e7f4      	b.n	800d222 <__swsetup_r+0x8e>
 800d238:	2000      	movs	r0, #0
 800d23a:	e7f7      	b.n	800d22c <__swsetup_r+0x98>
 800d23c:	20000118 	.word	0x20000118

0800d240 <memset>:
 800d240:	4402      	add	r2, r0
 800d242:	4603      	mov	r3, r0
 800d244:	4293      	cmp	r3, r2
 800d246:	d100      	bne.n	800d24a <memset+0xa>
 800d248:	4770      	bx	lr
 800d24a:	f803 1b01 	strb.w	r1, [r3], #1
 800d24e:	e7f9      	b.n	800d244 <memset+0x4>

0800d250 <_localeconv_r>:
 800d250:	4800      	ldr	r0, [pc, #0]	@ (800d254 <_localeconv_r+0x4>)
 800d252:	4770      	bx	lr
 800d254:	20000258 	.word	0x20000258

0800d258 <_close_r>:
 800d258:	b538      	push	{r3, r4, r5, lr}
 800d25a:	4d06      	ldr	r5, [pc, #24]	@ (800d274 <_close_r+0x1c>)
 800d25c:	2300      	movs	r3, #0
 800d25e:	4604      	mov	r4, r0
 800d260:	4608      	mov	r0, r1
 800d262:	602b      	str	r3, [r5, #0]
 800d264:	f7f5 f882 	bl	800236c <_close>
 800d268:	1c43      	adds	r3, r0, #1
 800d26a:	d102      	bne.n	800d272 <_close_r+0x1a>
 800d26c:	682b      	ldr	r3, [r5, #0]
 800d26e:	b103      	cbz	r3, 800d272 <_close_r+0x1a>
 800d270:	6023      	str	r3, [r4, #0]
 800d272:	bd38      	pop	{r3, r4, r5, pc}
 800d274:	20012d84 	.word	0x20012d84

0800d278 <_lseek_r>:
 800d278:	b538      	push	{r3, r4, r5, lr}
 800d27a:	4d07      	ldr	r5, [pc, #28]	@ (800d298 <_lseek_r+0x20>)
 800d27c:	4604      	mov	r4, r0
 800d27e:	4608      	mov	r0, r1
 800d280:	4611      	mov	r1, r2
 800d282:	2200      	movs	r2, #0
 800d284:	602a      	str	r2, [r5, #0]
 800d286:	461a      	mov	r2, r3
 800d288:	f7f5 f897 	bl	80023ba <_lseek>
 800d28c:	1c43      	adds	r3, r0, #1
 800d28e:	d102      	bne.n	800d296 <_lseek_r+0x1e>
 800d290:	682b      	ldr	r3, [r5, #0]
 800d292:	b103      	cbz	r3, 800d296 <_lseek_r+0x1e>
 800d294:	6023      	str	r3, [r4, #0]
 800d296:	bd38      	pop	{r3, r4, r5, pc}
 800d298:	20012d84 	.word	0x20012d84

0800d29c <_read_r>:
 800d29c:	b538      	push	{r3, r4, r5, lr}
 800d29e:	4d07      	ldr	r5, [pc, #28]	@ (800d2bc <_read_r+0x20>)
 800d2a0:	4604      	mov	r4, r0
 800d2a2:	4608      	mov	r0, r1
 800d2a4:	4611      	mov	r1, r2
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	602a      	str	r2, [r5, #0]
 800d2aa:	461a      	mov	r2, r3
 800d2ac:	f7f5 f841 	bl	8002332 <_read>
 800d2b0:	1c43      	adds	r3, r0, #1
 800d2b2:	d102      	bne.n	800d2ba <_read_r+0x1e>
 800d2b4:	682b      	ldr	r3, [r5, #0]
 800d2b6:	b103      	cbz	r3, 800d2ba <_read_r+0x1e>
 800d2b8:	6023      	str	r3, [r4, #0]
 800d2ba:	bd38      	pop	{r3, r4, r5, pc}
 800d2bc:	20012d84 	.word	0x20012d84

0800d2c0 <_write_r>:
 800d2c0:	b538      	push	{r3, r4, r5, lr}
 800d2c2:	4d07      	ldr	r5, [pc, #28]	@ (800d2e0 <_write_r+0x20>)
 800d2c4:	4604      	mov	r4, r0
 800d2c6:	4608      	mov	r0, r1
 800d2c8:	4611      	mov	r1, r2
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	602a      	str	r2, [r5, #0]
 800d2ce:	461a      	mov	r2, r3
 800d2d0:	f7f4 f88a 	bl	80013e8 <_write>
 800d2d4:	1c43      	adds	r3, r0, #1
 800d2d6:	d102      	bne.n	800d2de <_write_r+0x1e>
 800d2d8:	682b      	ldr	r3, [r5, #0]
 800d2da:	b103      	cbz	r3, 800d2de <_write_r+0x1e>
 800d2dc:	6023      	str	r3, [r4, #0]
 800d2de:	bd38      	pop	{r3, r4, r5, pc}
 800d2e0:	20012d84 	.word	0x20012d84

0800d2e4 <__errno>:
 800d2e4:	4b01      	ldr	r3, [pc, #4]	@ (800d2ec <__errno+0x8>)
 800d2e6:	6818      	ldr	r0, [r3, #0]
 800d2e8:	4770      	bx	lr
 800d2ea:	bf00      	nop
 800d2ec:	20000118 	.word	0x20000118

0800d2f0 <__libc_init_array>:
 800d2f0:	b570      	push	{r4, r5, r6, lr}
 800d2f2:	4d0d      	ldr	r5, [pc, #52]	@ (800d328 <__libc_init_array+0x38>)
 800d2f4:	4c0d      	ldr	r4, [pc, #52]	@ (800d32c <__libc_init_array+0x3c>)
 800d2f6:	1b64      	subs	r4, r4, r5
 800d2f8:	10a4      	asrs	r4, r4, #2
 800d2fa:	2600      	movs	r6, #0
 800d2fc:	42a6      	cmp	r6, r4
 800d2fe:	d109      	bne.n	800d314 <__libc_init_array+0x24>
 800d300:	4d0b      	ldr	r5, [pc, #44]	@ (800d330 <__libc_init_array+0x40>)
 800d302:	4c0c      	ldr	r4, [pc, #48]	@ (800d334 <__libc_init_array+0x44>)
 800d304:	f003 fc82 	bl	8010c0c <_init>
 800d308:	1b64      	subs	r4, r4, r5
 800d30a:	10a4      	asrs	r4, r4, #2
 800d30c:	2600      	movs	r6, #0
 800d30e:	42a6      	cmp	r6, r4
 800d310:	d105      	bne.n	800d31e <__libc_init_array+0x2e>
 800d312:	bd70      	pop	{r4, r5, r6, pc}
 800d314:	f855 3b04 	ldr.w	r3, [r5], #4
 800d318:	4798      	blx	r3
 800d31a:	3601      	adds	r6, #1
 800d31c:	e7ee      	b.n	800d2fc <__libc_init_array+0xc>
 800d31e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d322:	4798      	blx	r3
 800d324:	3601      	adds	r6, #1
 800d326:	e7f2      	b.n	800d30e <__libc_init_array+0x1e>
 800d328:	080111b0 	.word	0x080111b0
 800d32c:	080111b0 	.word	0x080111b0
 800d330:	080111b0 	.word	0x080111b0
 800d334:	080111b4 	.word	0x080111b4

0800d338 <__retarget_lock_init_recursive>:
 800d338:	4770      	bx	lr

0800d33a <__retarget_lock_acquire_recursive>:
 800d33a:	4770      	bx	lr

0800d33c <__retarget_lock_release_recursive>:
 800d33c:	4770      	bx	lr
	...

0800d340 <nanf>:
 800d340:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d348 <nanf+0x8>
 800d344:	4770      	bx	lr
 800d346:	bf00      	nop
 800d348:	7fc00000 	.word	0x7fc00000

0800d34c <quorem>:
 800d34c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d350:	6903      	ldr	r3, [r0, #16]
 800d352:	690c      	ldr	r4, [r1, #16]
 800d354:	42a3      	cmp	r3, r4
 800d356:	4607      	mov	r7, r0
 800d358:	db7e      	blt.n	800d458 <quorem+0x10c>
 800d35a:	3c01      	subs	r4, #1
 800d35c:	f101 0814 	add.w	r8, r1, #20
 800d360:	00a3      	lsls	r3, r4, #2
 800d362:	f100 0514 	add.w	r5, r0, #20
 800d366:	9300      	str	r3, [sp, #0]
 800d368:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d36c:	9301      	str	r3, [sp, #4]
 800d36e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d372:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d376:	3301      	adds	r3, #1
 800d378:	429a      	cmp	r2, r3
 800d37a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d37e:	fbb2 f6f3 	udiv	r6, r2, r3
 800d382:	d32e      	bcc.n	800d3e2 <quorem+0x96>
 800d384:	f04f 0a00 	mov.w	sl, #0
 800d388:	46c4      	mov	ip, r8
 800d38a:	46ae      	mov	lr, r5
 800d38c:	46d3      	mov	fp, sl
 800d38e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d392:	b298      	uxth	r0, r3
 800d394:	fb06 a000 	mla	r0, r6, r0, sl
 800d398:	0c02      	lsrs	r2, r0, #16
 800d39a:	0c1b      	lsrs	r3, r3, #16
 800d39c:	fb06 2303 	mla	r3, r6, r3, r2
 800d3a0:	f8de 2000 	ldr.w	r2, [lr]
 800d3a4:	b280      	uxth	r0, r0
 800d3a6:	b292      	uxth	r2, r2
 800d3a8:	1a12      	subs	r2, r2, r0
 800d3aa:	445a      	add	r2, fp
 800d3ac:	f8de 0000 	ldr.w	r0, [lr]
 800d3b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d3b4:	b29b      	uxth	r3, r3
 800d3b6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d3ba:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d3be:	b292      	uxth	r2, r2
 800d3c0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d3c4:	45e1      	cmp	r9, ip
 800d3c6:	f84e 2b04 	str.w	r2, [lr], #4
 800d3ca:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d3ce:	d2de      	bcs.n	800d38e <quorem+0x42>
 800d3d0:	9b00      	ldr	r3, [sp, #0]
 800d3d2:	58eb      	ldr	r3, [r5, r3]
 800d3d4:	b92b      	cbnz	r3, 800d3e2 <quorem+0x96>
 800d3d6:	9b01      	ldr	r3, [sp, #4]
 800d3d8:	3b04      	subs	r3, #4
 800d3da:	429d      	cmp	r5, r3
 800d3dc:	461a      	mov	r2, r3
 800d3de:	d32f      	bcc.n	800d440 <quorem+0xf4>
 800d3e0:	613c      	str	r4, [r7, #16]
 800d3e2:	4638      	mov	r0, r7
 800d3e4:	f001 f9c4 	bl	800e770 <__mcmp>
 800d3e8:	2800      	cmp	r0, #0
 800d3ea:	db25      	blt.n	800d438 <quorem+0xec>
 800d3ec:	4629      	mov	r1, r5
 800d3ee:	2000      	movs	r0, #0
 800d3f0:	f858 2b04 	ldr.w	r2, [r8], #4
 800d3f4:	f8d1 c000 	ldr.w	ip, [r1]
 800d3f8:	fa1f fe82 	uxth.w	lr, r2
 800d3fc:	fa1f f38c 	uxth.w	r3, ip
 800d400:	eba3 030e 	sub.w	r3, r3, lr
 800d404:	4403      	add	r3, r0
 800d406:	0c12      	lsrs	r2, r2, #16
 800d408:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d40c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d410:	b29b      	uxth	r3, r3
 800d412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d416:	45c1      	cmp	r9, r8
 800d418:	f841 3b04 	str.w	r3, [r1], #4
 800d41c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d420:	d2e6      	bcs.n	800d3f0 <quorem+0xa4>
 800d422:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d426:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d42a:	b922      	cbnz	r2, 800d436 <quorem+0xea>
 800d42c:	3b04      	subs	r3, #4
 800d42e:	429d      	cmp	r5, r3
 800d430:	461a      	mov	r2, r3
 800d432:	d30b      	bcc.n	800d44c <quorem+0x100>
 800d434:	613c      	str	r4, [r7, #16]
 800d436:	3601      	adds	r6, #1
 800d438:	4630      	mov	r0, r6
 800d43a:	b003      	add	sp, #12
 800d43c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d440:	6812      	ldr	r2, [r2, #0]
 800d442:	3b04      	subs	r3, #4
 800d444:	2a00      	cmp	r2, #0
 800d446:	d1cb      	bne.n	800d3e0 <quorem+0x94>
 800d448:	3c01      	subs	r4, #1
 800d44a:	e7c6      	b.n	800d3da <quorem+0x8e>
 800d44c:	6812      	ldr	r2, [r2, #0]
 800d44e:	3b04      	subs	r3, #4
 800d450:	2a00      	cmp	r2, #0
 800d452:	d1ef      	bne.n	800d434 <quorem+0xe8>
 800d454:	3c01      	subs	r4, #1
 800d456:	e7ea      	b.n	800d42e <quorem+0xe2>
 800d458:	2000      	movs	r0, #0
 800d45a:	e7ee      	b.n	800d43a <quorem+0xee>
 800d45c:	0000      	movs	r0, r0
	...

0800d460 <_dtoa_r>:
 800d460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d464:	69c7      	ldr	r7, [r0, #28]
 800d466:	b099      	sub	sp, #100	@ 0x64
 800d468:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d46c:	ec55 4b10 	vmov	r4, r5, d0
 800d470:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d472:	9109      	str	r1, [sp, #36]	@ 0x24
 800d474:	4683      	mov	fp, r0
 800d476:	920e      	str	r2, [sp, #56]	@ 0x38
 800d478:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d47a:	b97f      	cbnz	r7, 800d49c <_dtoa_r+0x3c>
 800d47c:	2010      	movs	r0, #16
 800d47e:	f000 fdfd 	bl	800e07c <malloc>
 800d482:	4602      	mov	r2, r0
 800d484:	f8cb 001c 	str.w	r0, [fp, #28]
 800d488:	b920      	cbnz	r0, 800d494 <_dtoa_r+0x34>
 800d48a:	4ba7      	ldr	r3, [pc, #668]	@ (800d728 <_dtoa_r+0x2c8>)
 800d48c:	21ef      	movs	r1, #239	@ 0xef
 800d48e:	48a7      	ldr	r0, [pc, #668]	@ (800d72c <_dtoa_r+0x2cc>)
 800d490:	f002 fdfe 	bl	8010090 <__assert_func>
 800d494:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d498:	6007      	str	r7, [r0, #0]
 800d49a:	60c7      	str	r7, [r0, #12]
 800d49c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d4a0:	6819      	ldr	r1, [r3, #0]
 800d4a2:	b159      	cbz	r1, 800d4bc <_dtoa_r+0x5c>
 800d4a4:	685a      	ldr	r2, [r3, #4]
 800d4a6:	604a      	str	r2, [r1, #4]
 800d4a8:	2301      	movs	r3, #1
 800d4aa:	4093      	lsls	r3, r2
 800d4ac:	608b      	str	r3, [r1, #8]
 800d4ae:	4658      	mov	r0, fp
 800d4b0:	f000 feda 	bl	800e268 <_Bfree>
 800d4b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	601a      	str	r2, [r3, #0]
 800d4bc:	1e2b      	subs	r3, r5, #0
 800d4be:	bfb9      	ittee	lt
 800d4c0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d4c4:	9303      	strlt	r3, [sp, #12]
 800d4c6:	2300      	movge	r3, #0
 800d4c8:	6033      	strge	r3, [r6, #0]
 800d4ca:	9f03      	ldr	r7, [sp, #12]
 800d4cc:	4b98      	ldr	r3, [pc, #608]	@ (800d730 <_dtoa_r+0x2d0>)
 800d4ce:	bfbc      	itt	lt
 800d4d0:	2201      	movlt	r2, #1
 800d4d2:	6032      	strlt	r2, [r6, #0]
 800d4d4:	43bb      	bics	r3, r7
 800d4d6:	d112      	bne.n	800d4fe <_dtoa_r+0x9e>
 800d4d8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d4da:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d4de:	6013      	str	r3, [r2, #0]
 800d4e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d4e4:	4323      	orrs	r3, r4
 800d4e6:	f000 854d 	beq.w	800df84 <_dtoa_r+0xb24>
 800d4ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d4ec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d744 <_dtoa_r+0x2e4>
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	f000 854f 	beq.w	800df94 <_dtoa_r+0xb34>
 800d4f6:	f10a 0303 	add.w	r3, sl, #3
 800d4fa:	f000 bd49 	b.w	800df90 <_dtoa_r+0xb30>
 800d4fe:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d502:	2200      	movs	r2, #0
 800d504:	ec51 0b17 	vmov	r0, r1, d7
 800d508:	2300      	movs	r3, #0
 800d50a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d50e:	f7f3 fafb 	bl	8000b08 <__aeabi_dcmpeq>
 800d512:	4680      	mov	r8, r0
 800d514:	b158      	cbz	r0, 800d52e <_dtoa_r+0xce>
 800d516:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d518:	2301      	movs	r3, #1
 800d51a:	6013      	str	r3, [r2, #0]
 800d51c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d51e:	b113      	cbz	r3, 800d526 <_dtoa_r+0xc6>
 800d520:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d522:	4b84      	ldr	r3, [pc, #528]	@ (800d734 <_dtoa_r+0x2d4>)
 800d524:	6013      	str	r3, [r2, #0]
 800d526:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d748 <_dtoa_r+0x2e8>
 800d52a:	f000 bd33 	b.w	800df94 <_dtoa_r+0xb34>
 800d52e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d532:	aa16      	add	r2, sp, #88	@ 0x58
 800d534:	a917      	add	r1, sp, #92	@ 0x5c
 800d536:	4658      	mov	r0, fp
 800d538:	f001 fa3a 	bl	800e9b0 <__d2b>
 800d53c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d540:	4681      	mov	r9, r0
 800d542:	2e00      	cmp	r6, #0
 800d544:	d077      	beq.n	800d636 <_dtoa_r+0x1d6>
 800d546:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d548:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d54c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d550:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d554:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d558:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d55c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d560:	4619      	mov	r1, r3
 800d562:	2200      	movs	r2, #0
 800d564:	4b74      	ldr	r3, [pc, #464]	@ (800d738 <_dtoa_r+0x2d8>)
 800d566:	f7f2 feaf 	bl	80002c8 <__aeabi_dsub>
 800d56a:	a369      	add	r3, pc, #420	@ (adr r3, 800d710 <_dtoa_r+0x2b0>)
 800d56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d570:	f7f3 f862 	bl	8000638 <__aeabi_dmul>
 800d574:	a368      	add	r3, pc, #416	@ (adr r3, 800d718 <_dtoa_r+0x2b8>)
 800d576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d57a:	f7f2 fea7 	bl	80002cc <__adddf3>
 800d57e:	4604      	mov	r4, r0
 800d580:	4630      	mov	r0, r6
 800d582:	460d      	mov	r5, r1
 800d584:	f7f2 ffee 	bl	8000564 <__aeabi_i2d>
 800d588:	a365      	add	r3, pc, #404	@ (adr r3, 800d720 <_dtoa_r+0x2c0>)
 800d58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d58e:	f7f3 f853 	bl	8000638 <__aeabi_dmul>
 800d592:	4602      	mov	r2, r0
 800d594:	460b      	mov	r3, r1
 800d596:	4620      	mov	r0, r4
 800d598:	4629      	mov	r1, r5
 800d59a:	f7f2 fe97 	bl	80002cc <__adddf3>
 800d59e:	4604      	mov	r4, r0
 800d5a0:	460d      	mov	r5, r1
 800d5a2:	f7f3 faf9 	bl	8000b98 <__aeabi_d2iz>
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	4607      	mov	r7, r0
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	4620      	mov	r0, r4
 800d5ae:	4629      	mov	r1, r5
 800d5b0:	f7f3 fab4 	bl	8000b1c <__aeabi_dcmplt>
 800d5b4:	b140      	cbz	r0, 800d5c8 <_dtoa_r+0x168>
 800d5b6:	4638      	mov	r0, r7
 800d5b8:	f7f2 ffd4 	bl	8000564 <__aeabi_i2d>
 800d5bc:	4622      	mov	r2, r4
 800d5be:	462b      	mov	r3, r5
 800d5c0:	f7f3 faa2 	bl	8000b08 <__aeabi_dcmpeq>
 800d5c4:	b900      	cbnz	r0, 800d5c8 <_dtoa_r+0x168>
 800d5c6:	3f01      	subs	r7, #1
 800d5c8:	2f16      	cmp	r7, #22
 800d5ca:	d851      	bhi.n	800d670 <_dtoa_r+0x210>
 800d5cc:	4b5b      	ldr	r3, [pc, #364]	@ (800d73c <_dtoa_r+0x2dc>)
 800d5ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d5da:	f7f3 fa9f 	bl	8000b1c <__aeabi_dcmplt>
 800d5de:	2800      	cmp	r0, #0
 800d5e0:	d048      	beq.n	800d674 <_dtoa_r+0x214>
 800d5e2:	3f01      	subs	r7, #1
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	9312      	str	r3, [sp, #72]	@ 0x48
 800d5e8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d5ea:	1b9b      	subs	r3, r3, r6
 800d5ec:	1e5a      	subs	r2, r3, #1
 800d5ee:	bf44      	itt	mi
 800d5f0:	f1c3 0801 	rsbmi	r8, r3, #1
 800d5f4:	2300      	movmi	r3, #0
 800d5f6:	9208      	str	r2, [sp, #32]
 800d5f8:	bf54      	ite	pl
 800d5fa:	f04f 0800 	movpl.w	r8, #0
 800d5fe:	9308      	strmi	r3, [sp, #32]
 800d600:	2f00      	cmp	r7, #0
 800d602:	db39      	blt.n	800d678 <_dtoa_r+0x218>
 800d604:	9b08      	ldr	r3, [sp, #32]
 800d606:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d608:	443b      	add	r3, r7
 800d60a:	9308      	str	r3, [sp, #32]
 800d60c:	2300      	movs	r3, #0
 800d60e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d610:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d612:	2b09      	cmp	r3, #9
 800d614:	d864      	bhi.n	800d6e0 <_dtoa_r+0x280>
 800d616:	2b05      	cmp	r3, #5
 800d618:	bfc4      	itt	gt
 800d61a:	3b04      	subgt	r3, #4
 800d61c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d61e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d620:	f1a3 0302 	sub.w	r3, r3, #2
 800d624:	bfcc      	ite	gt
 800d626:	2400      	movgt	r4, #0
 800d628:	2401      	movle	r4, #1
 800d62a:	2b03      	cmp	r3, #3
 800d62c:	d863      	bhi.n	800d6f6 <_dtoa_r+0x296>
 800d62e:	e8df f003 	tbb	[pc, r3]
 800d632:	372a      	.short	0x372a
 800d634:	5535      	.short	0x5535
 800d636:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d63a:	441e      	add	r6, r3
 800d63c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d640:	2b20      	cmp	r3, #32
 800d642:	bfc1      	itttt	gt
 800d644:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d648:	409f      	lslgt	r7, r3
 800d64a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d64e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d652:	bfd6      	itet	le
 800d654:	f1c3 0320 	rsble	r3, r3, #32
 800d658:	ea47 0003 	orrgt.w	r0, r7, r3
 800d65c:	fa04 f003 	lslle.w	r0, r4, r3
 800d660:	f7f2 ff70 	bl	8000544 <__aeabi_ui2d>
 800d664:	2201      	movs	r2, #1
 800d666:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d66a:	3e01      	subs	r6, #1
 800d66c:	9214      	str	r2, [sp, #80]	@ 0x50
 800d66e:	e777      	b.n	800d560 <_dtoa_r+0x100>
 800d670:	2301      	movs	r3, #1
 800d672:	e7b8      	b.n	800d5e6 <_dtoa_r+0x186>
 800d674:	9012      	str	r0, [sp, #72]	@ 0x48
 800d676:	e7b7      	b.n	800d5e8 <_dtoa_r+0x188>
 800d678:	427b      	negs	r3, r7
 800d67a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d67c:	2300      	movs	r3, #0
 800d67e:	eba8 0807 	sub.w	r8, r8, r7
 800d682:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d684:	e7c4      	b.n	800d610 <_dtoa_r+0x1b0>
 800d686:	2300      	movs	r3, #0
 800d688:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d68a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	dc35      	bgt.n	800d6fc <_dtoa_r+0x29c>
 800d690:	2301      	movs	r3, #1
 800d692:	9300      	str	r3, [sp, #0]
 800d694:	9307      	str	r3, [sp, #28]
 800d696:	461a      	mov	r2, r3
 800d698:	920e      	str	r2, [sp, #56]	@ 0x38
 800d69a:	e00b      	b.n	800d6b4 <_dtoa_r+0x254>
 800d69c:	2301      	movs	r3, #1
 800d69e:	e7f3      	b.n	800d688 <_dtoa_r+0x228>
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d6a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d6a6:	18fb      	adds	r3, r7, r3
 800d6a8:	9300      	str	r3, [sp, #0]
 800d6aa:	3301      	adds	r3, #1
 800d6ac:	2b01      	cmp	r3, #1
 800d6ae:	9307      	str	r3, [sp, #28]
 800d6b0:	bfb8      	it	lt
 800d6b2:	2301      	movlt	r3, #1
 800d6b4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d6b8:	2100      	movs	r1, #0
 800d6ba:	2204      	movs	r2, #4
 800d6bc:	f102 0514 	add.w	r5, r2, #20
 800d6c0:	429d      	cmp	r5, r3
 800d6c2:	d91f      	bls.n	800d704 <_dtoa_r+0x2a4>
 800d6c4:	6041      	str	r1, [r0, #4]
 800d6c6:	4658      	mov	r0, fp
 800d6c8:	f000 fd8e 	bl	800e1e8 <_Balloc>
 800d6cc:	4682      	mov	sl, r0
 800d6ce:	2800      	cmp	r0, #0
 800d6d0:	d13c      	bne.n	800d74c <_dtoa_r+0x2ec>
 800d6d2:	4b1b      	ldr	r3, [pc, #108]	@ (800d740 <_dtoa_r+0x2e0>)
 800d6d4:	4602      	mov	r2, r0
 800d6d6:	f240 11af 	movw	r1, #431	@ 0x1af
 800d6da:	e6d8      	b.n	800d48e <_dtoa_r+0x2e>
 800d6dc:	2301      	movs	r3, #1
 800d6de:	e7e0      	b.n	800d6a2 <_dtoa_r+0x242>
 800d6e0:	2401      	movs	r4, #1
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6e6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d6e8:	f04f 33ff 	mov.w	r3, #4294967295
 800d6ec:	9300      	str	r3, [sp, #0]
 800d6ee:	9307      	str	r3, [sp, #28]
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	2312      	movs	r3, #18
 800d6f4:	e7d0      	b.n	800d698 <_dtoa_r+0x238>
 800d6f6:	2301      	movs	r3, #1
 800d6f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d6fa:	e7f5      	b.n	800d6e8 <_dtoa_r+0x288>
 800d6fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d6fe:	9300      	str	r3, [sp, #0]
 800d700:	9307      	str	r3, [sp, #28]
 800d702:	e7d7      	b.n	800d6b4 <_dtoa_r+0x254>
 800d704:	3101      	adds	r1, #1
 800d706:	0052      	lsls	r2, r2, #1
 800d708:	e7d8      	b.n	800d6bc <_dtoa_r+0x25c>
 800d70a:	bf00      	nop
 800d70c:	f3af 8000 	nop.w
 800d710:	636f4361 	.word	0x636f4361
 800d714:	3fd287a7 	.word	0x3fd287a7
 800d718:	8b60c8b3 	.word	0x8b60c8b3
 800d71c:	3fc68a28 	.word	0x3fc68a28
 800d720:	509f79fb 	.word	0x509f79fb
 800d724:	3fd34413 	.word	0x3fd34413
 800d728:	08010d8a 	.word	0x08010d8a
 800d72c:	08010da1 	.word	0x08010da1
 800d730:	7ff00000 	.word	0x7ff00000
 800d734:	08010d55 	.word	0x08010d55
 800d738:	3ff80000 	.word	0x3ff80000
 800d73c:	08010e98 	.word	0x08010e98
 800d740:	08010df9 	.word	0x08010df9
 800d744:	08010d86 	.word	0x08010d86
 800d748:	08010d54 	.word	0x08010d54
 800d74c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d750:	6018      	str	r0, [r3, #0]
 800d752:	9b07      	ldr	r3, [sp, #28]
 800d754:	2b0e      	cmp	r3, #14
 800d756:	f200 80a4 	bhi.w	800d8a2 <_dtoa_r+0x442>
 800d75a:	2c00      	cmp	r4, #0
 800d75c:	f000 80a1 	beq.w	800d8a2 <_dtoa_r+0x442>
 800d760:	2f00      	cmp	r7, #0
 800d762:	dd33      	ble.n	800d7cc <_dtoa_r+0x36c>
 800d764:	4bad      	ldr	r3, [pc, #692]	@ (800da1c <_dtoa_r+0x5bc>)
 800d766:	f007 020f 	and.w	r2, r7, #15
 800d76a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d76e:	ed93 7b00 	vldr	d7, [r3]
 800d772:	05f8      	lsls	r0, r7, #23
 800d774:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d778:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d77c:	d516      	bpl.n	800d7ac <_dtoa_r+0x34c>
 800d77e:	4ba8      	ldr	r3, [pc, #672]	@ (800da20 <_dtoa_r+0x5c0>)
 800d780:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d784:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d788:	f7f3 f880 	bl	800088c <__aeabi_ddiv>
 800d78c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d790:	f004 040f 	and.w	r4, r4, #15
 800d794:	2603      	movs	r6, #3
 800d796:	4da2      	ldr	r5, [pc, #648]	@ (800da20 <_dtoa_r+0x5c0>)
 800d798:	b954      	cbnz	r4, 800d7b0 <_dtoa_r+0x350>
 800d79a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d79e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7a2:	f7f3 f873 	bl	800088c <__aeabi_ddiv>
 800d7a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d7aa:	e028      	b.n	800d7fe <_dtoa_r+0x39e>
 800d7ac:	2602      	movs	r6, #2
 800d7ae:	e7f2      	b.n	800d796 <_dtoa_r+0x336>
 800d7b0:	07e1      	lsls	r1, r4, #31
 800d7b2:	d508      	bpl.n	800d7c6 <_dtoa_r+0x366>
 800d7b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d7b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d7bc:	f7f2 ff3c 	bl	8000638 <__aeabi_dmul>
 800d7c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d7c4:	3601      	adds	r6, #1
 800d7c6:	1064      	asrs	r4, r4, #1
 800d7c8:	3508      	adds	r5, #8
 800d7ca:	e7e5      	b.n	800d798 <_dtoa_r+0x338>
 800d7cc:	f000 80d2 	beq.w	800d974 <_dtoa_r+0x514>
 800d7d0:	427c      	negs	r4, r7
 800d7d2:	4b92      	ldr	r3, [pc, #584]	@ (800da1c <_dtoa_r+0x5bc>)
 800d7d4:	4d92      	ldr	r5, [pc, #584]	@ (800da20 <_dtoa_r+0x5c0>)
 800d7d6:	f004 020f 	and.w	r2, r4, #15
 800d7da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d7e6:	f7f2 ff27 	bl	8000638 <__aeabi_dmul>
 800d7ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d7ee:	1124      	asrs	r4, r4, #4
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	2602      	movs	r6, #2
 800d7f4:	2c00      	cmp	r4, #0
 800d7f6:	f040 80b2 	bne.w	800d95e <_dtoa_r+0x4fe>
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d1d3      	bne.n	800d7a6 <_dtoa_r+0x346>
 800d7fe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d800:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d804:	2b00      	cmp	r3, #0
 800d806:	f000 80b7 	beq.w	800d978 <_dtoa_r+0x518>
 800d80a:	4b86      	ldr	r3, [pc, #536]	@ (800da24 <_dtoa_r+0x5c4>)
 800d80c:	2200      	movs	r2, #0
 800d80e:	4620      	mov	r0, r4
 800d810:	4629      	mov	r1, r5
 800d812:	f7f3 f983 	bl	8000b1c <__aeabi_dcmplt>
 800d816:	2800      	cmp	r0, #0
 800d818:	f000 80ae 	beq.w	800d978 <_dtoa_r+0x518>
 800d81c:	9b07      	ldr	r3, [sp, #28]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	f000 80aa 	beq.w	800d978 <_dtoa_r+0x518>
 800d824:	9b00      	ldr	r3, [sp, #0]
 800d826:	2b00      	cmp	r3, #0
 800d828:	dd37      	ble.n	800d89a <_dtoa_r+0x43a>
 800d82a:	1e7b      	subs	r3, r7, #1
 800d82c:	9304      	str	r3, [sp, #16]
 800d82e:	4620      	mov	r0, r4
 800d830:	4b7d      	ldr	r3, [pc, #500]	@ (800da28 <_dtoa_r+0x5c8>)
 800d832:	2200      	movs	r2, #0
 800d834:	4629      	mov	r1, r5
 800d836:	f7f2 feff 	bl	8000638 <__aeabi_dmul>
 800d83a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d83e:	9c00      	ldr	r4, [sp, #0]
 800d840:	3601      	adds	r6, #1
 800d842:	4630      	mov	r0, r6
 800d844:	f7f2 fe8e 	bl	8000564 <__aeabi_i2d>
 800d848:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d84c:	f7f2 fef4 	bl	8000638 <__aeabi_dmul>
 800d850:	4b76      	ldr	r3, [pc, #472]	@ (800da2c <_dtoa_r+0x5cc>)
 800d852:	2200      	movs	r2, #0
 800d854:	f7f2 fd3a 	bl	80002cc <__adddf3>
 800d858:	4605      	mov	r5, r0
 800d85a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d85e:	2c00      	cmp	r4, #0
 800d860:	f040 808d 	bne.w	800d97e <_dtoa_r+0x51e>
 800d864:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d868:	4b71      	ldr	r3, [pc, #452]	@ (800da30 <_dtoa_r+0x5d0>)
 800d86a:	2200      	movs	r2, #0
 800d86c:	f7f2 fd2c 	bl	80002c8 <__aeabi_dsub>
 800d870:	4602      	mov	r2, r0
 800d872:	460b      	mov	r3, r1
 800d874:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d878:	462a      	mov	r2, r5
 800d87a:	4633      	mov	r3, r6
 800d87c:	f7f3 f96c 	bl	8000b58 <__aeabi_dcmpgt>
 800d880:	2800      	cmp	r0, #0
 800d882:	f040 828b 	bne.w	800dd9c <_dtoa_r+0x93c>
 800d886:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d88a:	462a      	mov	r2, r5
 800d88c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d890:	f7f3 f944 	bl	8000b1c <__aeabi_dcmplt>
 800d894:	2800      	cmp	r0, #0
 800d896:	f040 8128 	bne.w	800daea <_dtoa_r+0x68a>
 800d89a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d89e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d8a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	f2c0 815a 	blt.w	800db5e <_dtoa_r+0x6fe>
 800d8aa:	2f0e      	cmp	r7, #14
 800d8ac:	f300 8157 	bgt.w	800db5e <_dtoa_r+0x6fe>
 800d8b0:	4b5a      	ldr	r3, [pc, #360]	@ (800da1c <_dtoa_r+0x5bc>)
 800d8b2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d8b6:	ed93 7b00 	vldr	d7, [r3]
 800d8ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	ed8d 7b00 	vstr	d7, [sp]
 800d8c2:	da03      	bge.n	800d8cc <_dtoa_r+0x46c>
 800d8c4:	9b07      	ldr	r3, [sp, #28]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	f340 8101 	ble.w	800dace <_dtoa_r+0x66e>
 800d8cc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d8d0:	4656      	mov	r6, sl
 800d8d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d8d6:	4620      	mov	r0, r4
 800d8d8:	4629      	mov	r1, r5
 800d8da:	f7f2 ffd7 	bl	800088c <__aeabi_ddiv>
 800d8de:	f7f3 f95b 	bl	8000b98 <__aeabi_d2iz>
 800d8e2:	4680      	mov	r8, r0
 800d8e4:	f7f2 fe3e 	bl	8000564 <__aeabi_i2d>
 800d8e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d8ec:	f7f2 fea4 	bl	8000638 <__aeabi_dmul>
 800d8f0:	4602      	mov	r2, r0
 800d8f2:	460b      	mov	r3, r1
 800d8f4:	4620      	mov	r0, r4
 800d8f6:	4629      	mov	r1, r5
 800d8f8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d8fc:	f7f2 fce4 	bl	80002c8 <__aeabi_dsub>
 800d900:	f806 4b01 	strb.w	r4, [r6], #1
 800d904:	9d07      	ldr	r5, [sp, #28]
 800d906:	eba6 040a 	sub.w	r4, r6, sl
 800d90a:	42a5      	cmp	r5, r4
 800d90c:	4602      	mov	r2, r0
 800d90e:	460b      	mov	r3, r1
 800d910:	f040 8117 	bne.w	800db42 <_dtoa_r+0x6e2>
 800d914:	f7f2 fcda 	bl	80002cc <__adddf3>
 800d918:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d91c:	4604      	mov	r4, r0
 800d91e:	460d      	mov	r5, r1
 800d920:	f7f3 f91a 	bl	8000b58 <__aeabi_dcmpgt>
 800d924:	2800      	cmp	r0, #0
 800d926:	f040 80f9 	bne.w	800db1c <_dtoa_r+0x6bc>
 800d92a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d92e:	4620      	mov	r0, r4
 800d930:	4629      	mov	r1, r5
 800d932:	f7f3 f8e9 	bl	8000b08 <__aeabi_dcmpeq>
 800d936:	b118      	cbz	r0, 800d940 <_dtoa_r+0x4e0>
 800d938:	f018 0f01 	tst.w	r8, #1
 800d93c:	f040 80ee 	bne.w	800db1c <_dtoa_r+0x6bc>
 800d940:	4649      	mov	r1, r9
 800d942:	4658      	mov	r0, fp
 800d944:	f000 fc90 	bl	800e268 <_Bfree>
 800d948:	2300      	movs	r3, #0
 800d94a:	7033      	strb	r3, [r6, #0]
 800d94c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d94e:	3701      	adds	r7, #1
 800d950:	601f      	str	r7, [r3, #0]
 800d952:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d954:	2b00      	cmp	r3, #0
 800d956:	f000 831d 	beq.w	800df94 <_dtoa_r+0xb34>
 800d95a:	601e      	str	r6, [r3, #0]
 800d95c:	e31a      	b.n	800df94 <_dtoa_r+0xb34>
 800d95e:	07e2      	lsls	r2, r4, #31
 800d960:	d505      	bpl.n	800d96e <_dtoa_r+0x50e>
 800d962:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d966:	f7f2 fe67 	bl	8000638 <__aeabi_dmul>
 800d96a:	3601      	adds	r6, #1
 800d96c:	2301      	movs	r3, #1
 800d96e:	1064      	asrs	r4, r4, #1
 800d970:	3508      	adds	r5, #8
 800d972:	e73f      	b.n	800d7f4 <_dtoa_r+0x394>
 800d974:	2602      	movs	r6, #2
 800d976:	e742      	b.n	800d7fe <_dtoa_r+0x39e>
 800d978:	9c07      	ldr	r4, [sp, #28]
 800d97a:	9704      	str	r7, [sp, #16]
 800d97c:	e761      	b.n	800d842 <_dtoa_r+0x3e2>
 800d97e:	4b27      	ldr	r3, [pc, #156]	@ (800da1c <_dtoa_r+0x5bc>)
 800d980:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d982:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d986:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d98a:	4454      	add	r4, sl
 800d98c:	2900      	cmp	r1, #0
 800d98e:	d053      	beq.n	800da38 <_dtoa_r+0x5d8>
 800d990:	4928      	ldr	r1, [pc, #160]	@ (800da34 <_dtoa_r+0x5d4>)
 800d992:	2000      	movs	r0, #0
 800d994:	f7f2 ff7a 	bl	800088c <__aeabi_ddiv>
 800d998:	4633      	mov	r3, r6
 800d99a:	462a      	mov	r2, r5
 800d99c:	f7f2 fc94 	bl	80002c8 <__aeabi_dsub>
 800d9a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d9a4:	4656      	mov	r6, sl
 800d9a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9aa:	f7f3 f8f5 	bl	8000b98 <__aeabi_d2iz>
 800d9ae:	4605      	mov	r5, r0
 800d9b0:	f7f2 fdd8 	bl	8000564 <__aeabi_i2d>
 800d9b4:	4602      	mov	r2, r0
 800d9b6:	460b      	mov	r3, r1
 800d9b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9bc:	f7f2 fc84 	bl	80002c8 <__aeabi_dsub>
 800d9c0:	3530      	adds	r5, #48	@ 0x30
 800d9c2:	4602      	mov	r2, r0
 800d9c4:	460b      	mov	r3, r1
 800d9c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d9ca:	f806 5b01 	strb.w	r5, [r6], #1
 800d9ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d9d2:	f7f3 f8a3 	bl	8000b1c <__aeabi_dcmplt>
 800d9d6:	2800      	cmp	r0, #0
 800d9d8:	d171      	bne.n	800dabe <_dtoa_r+0x65e>
 800d9da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d9de:	4911      	ldr	r1, [pc, #68]	@ (800da24 <_dtoa_r+0x5c4>)
 800d9e0:	2000      	movs	r0, #0
 800d9e2:	f7f2 fc71 	bl	80002c8 <__aeabi_dsub>
 800d9e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d9ea:	f7f3 f897 	bl	8000b1c <__aeabi_dcmplt>
 800d9ee:	2800      	cmp	r0, #0
 800d9f0:	f040 8095 	bne.w	800db1e <_dtoa_r+0x6be>
 800d9f4:	42a6      	cmp	r6, r4
 800d9f6:	f43f af50 	beq.w	800d89a <_dtoa_r+0x43a>
 800d9fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d9fe:	4b0a      	ldr	r3, [pc, #40]	@ (800da28 <_dtoa_r+0x5c8>)
 800da00:	2200      	movs	r2, #0
 800da02:	f7f2 fe19 	bl	8000638 <__aeabi_dmul>
 800da06:	4b08      	ldr	r3, [pc, #32]	@ (800da28 <_dtoa_r+0x5c8>)
 800da08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800da0c:	2200      	movs	r2, #0
 800da0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da12:	f7f2 fe11 	bl	8000638 <__aeabi_dmul>
 800da16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da1a:	e7c4      	b.n	800d9a6 <_dtoa_r+0x546>
 800da1c:	08010e98 	.word	0x08010e98
 800da20:	08010e70 	.word	0x08010e70
 800da24:	3ff00000 	.word	0x3ff00000
 800da28:	40240000 	.word	0x40240000
 800da2c:	401c0000 	.word	0x401c0000
 800da30:	40140000 	.word	0x40140000
 800da34:	3fe00000 	.word	0x3fe00000
 800da38:	4631      	mov	r1, r6
 800da3a:	4628      	mov	r0, r5
 800da3c:	f7f2 fdfc 	bl	8000638 <__aeabi_dmul>
 800da40:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800da44:	9415      	str	r4, [sp, #84]	@ 0x54
 800da46:	4656      	mov	r6, sl
 800da48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da4c:	f7f3 f8a4 	bl	8000b98 <__aeabi_d2iz>
 800da50:	4605      	mov	r5, r0
 800da52:	f7f2 fd87 	bl	8000564 <__aeabi_i2d>
 800da56:	4602      	mov	r2, r0
 800da58:	460b      	mov	r3, r1
 800da5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da5e:	f7f2 fc33 	bl	80002c8 <__aeabi_dsub>
 800da62:	3530      	adds	r5, #48	@ 0x30
 800da64:	f806 5b01 	strb.w	r5, [r6], #1
 800da68:	4602      	mov	r2, r0
 800da6a:	460b      	mov	r3, r1
 800da6c:	42a6      	cmp	r6, r4
 800da6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800da72:	f04f 0200 	mov.w	r2, #0
 800da76:	d124      	bne.n	800dac2 <_dtoa_r+0x662>
 800da78:	4bac      	ldr	r3, [pc, #688]	@ (800dd2c <_dtoa_r+0x8cc>)
 800da7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800da7e:	f7f2 fc25 	bl	80002cc <__adddf3>
 800da82:	4602      	mov	r2, r0
 800da84:	460b      	mov	r3, r1
 800da86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da8a:	f7f3 f865 	bl	8000b58 <__aeabi_dcmpgt>
 800da8e:	2800      	cmp	r0, #0
 800da90:	d145      	bne.n	800db1e <_dtoa_r+0x6be>
 800da92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800da96:	49a5      	ldr	r1, [pc, #660]	@ (800dd2c <_dtoa_r+0x8cc>)
 800da98:	2000      	movs	r0, #0
 800da9a:	f7f2 fc15 	bl	80002c8 <__aeabi_dsub>
 800da9e:	4602      	mov	r2, r0
 800daa0:	460b      	mov	r3, r1
 800daa2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800daa6:	f7f3 f839 	bl	8000b1c <__aeabi_dcmplt>
 800daaa:	2800      	cmp	r0, #0
 800daac:	f43f aef5 	beq.w	800d89a <_dtoa_r+0x43a>
 800dab0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800dab2:	1e73      	subs	r3, r6, #1
 800dab4:	9315      	str	r3, [sp, #84]	@ 0x54
 800dab6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800daba:	2b30      	cmp	r3, #48	@ 0x30
 800dabc:	d0f8      	beq.n	800dab0 <_dtoa_r+0x650>
 800dabe:	9f04      	ldr	r7, [sp, #16]
 800dac0:	e73e      	b.n	800d940 <_dtoa_r+0x4e0>
 800dac2:	4b9b      	ldr	r3, [pc, #620]	@ (800dd30 <_dtoa_r+0x8d0>)
 800dac4:	f7f2 fdb8 	bl	8000638 <__aeabi_dmul>
 800dac8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dacc:	e7bc      	b.n	800da48 <_dtoa_r+0x5e8>
 800dace:	d10c      	bne.n	800daea <_dtoa_r+0x68a>
 800dad0:	4b98      	ldr	r3, [pc, #608]	@ (800dd34 <_dtoa_r+0x8d4>)
 800dad2:	2200      	movs	r2, #0
 800dad4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dad8:	f7f2 fdae 	bl	8000638 <__aeabi_dmul>
 800dadc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dae0:	f7f3 f830 	bl	8000b44 <__aeabi_dcmpge>
 800dae4:	2800      	cmp	r0, #0
 800dae6:	f000 8157 	beq.w	800dd98 <_dtoa_r+0x938>
 800daea:	2400      	movs	r4, #0
 800daec:	4625      	mov	r5, r4
 800daee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800daf0:	43db      	mvns	r3, r3
 800daf2:	9304      	str	r3, [sp, #16]
 800daf4:	4656      	mov	r6, sl
 800daf6:	2700      	movs	r7, #0
 800daf8:	4621      	mov	r1, r4
 800dafa:	4658      	mov	r0, fp
 800dafc:	f000 fbb4 	bl	800e268 <_Bfree>
 800db00:	2d00      	cmp	r5, #0
 800db02:	d0dc      	beq.n	800dabe <_dtoa_r+0x65e>
 800db04:	b12f      	cbz	r7, 800db12 <_dtoa_r+0x6b2>
 800db06:	42af      	cmp	r7, r5
 800db08:	d003      	beq.n	800db12 <_dtoa_r+0x6b2>
 800db0a:	4639      	mov	r1, r7
 800db0c:	4658      	mov	r0, fp
 800db0e:	f000 fbab 	bl	800e268 <_Bfree>
 800db12:	4629      	mov	r1, r5
 800db14:	4658      	mov	r0, fp
 800db16:	f000 fba7 	bl	800e268 <_Bfree>
 800db1a:	e7d0      	b.n	800dabe <_dtoa_r+0x65e>
 800db1c:	9704      	str	r7, [sp, #16]
 800db1e:	4633      	mov	r3, r6
 800db20:	461e      	mov	r6, r3
 800db22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800db26:	2a39      	cmp	r2, #57	@ 0x39
 800db28:	d107      	bne.n	800db3a <_dtoa_r+0x6da>
 800db2a:	459a      	cmp	sl, r3
 800db2c:	d1f8      	bne.n	800db20 <_dtoa_r+0x6c0>
 800db2e:	9a04      	ldr	r2, [sp, #16]
 800db30:	3201      	adds	r2, #1
 800db32:	9204      	str	r2, [sp, #16]
 800db34:	2230      	movs	r2, #48	@ 0x30
 800db36:	f88a 2000 	strb.w	r2, [sl]
 800db3a:	781a      	ldrb	r2, [r3, #0]
 800db3c:	3201      	adds	r2, #1
 800db3e:	701a      	strb	r2, [r3, #0]
 800db40:	e7bd      	b.n	800dabe <_dtoa_r+0x65e>
 800db42:	4b7b      	ldr	r3, [pc, #492]	@ (800dd30 <_dtoa_r+0x8d0>)
 800db44:	2200      	movs	r2, #0
 800db46:	f7f2 fd77 	bl	8000638 <__aeabi_dmul>
 800db4a:	2200      	movs	r2, #0
 800db4c:	2300      	movs	r3, #0
 800db4e:	4604      	mov	r4, r0
 800db50:	460d      	mov	r5, r1
 800db52:	f7f2 ffd9 	bl	8000b08 <__aeabi_dcmpeq>
 800db56:	2800      	cmp	r0, #0
 800db58:	f43f aebb 	beq.w	800d8d2 <_dtoa_r+0x472>
 800db5c:	e6f0      	b.n	800d940 <_dtoa_r+0x4e0>
 800db5e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800db60:	2a00      	cmp	r2, #0
 800db62:	f000 80db 	beq.w	800dd1c <_dtoa_r+0x8bc>
 800db66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db68:	2a01      	cmp	r2, #1
 800db6a:	f300 80bf 	bgt.w	800dcec <_dtoa_r+0x88c>
 800db6e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800db70:	2a00      	cmp	r2, #0
 800db72:	f000 80b7 	beq.w	800dce4 <_dtoa_r+0x884>
 800db76:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800db7a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800db7c:	4646      	mov	r6, r8
 800db7e:	9a08      	ldr	r2, [sp, #32]
 800db80:	2101      	movs	r1, #1
 800db82:	441a      	add	r2, r3
 800db84:	4658      	mov	r0, fp
 800db86:	4498      	add	r8, r3
 800db88:	9208      	str	r2, [sp, #32]
 800db8a:	f000 fc6b 	bl	800e464 <__i2b>
 800db8e:	4605      	mov	r5, r0
 800db90:	b15e      	cbz	r6, 800dbaa <_dtoa_r+0x74a>
 800db92:	9b08      	ldr	r3, [sp, #32]
 800db94:	2b00      	cmp	r3, #0
 800db96:	dd08      	ble.n	800dbaa <_dtoa_r+0x74a>
 800db98:	42b3      	cmp	r3, r6
 800db9a:	9a08      	ldr	r2, [sp, #32]
 800db9c:	bfa8      	it	ge
 800db9e:	4633      	movge	r3, r6
 800dba0:	eba8 0803 	sub.w	r8, r8, r3
 800dba4:	1af6      	subs	r6, r6, r3
 800dba6:	1ad3      	subs	r3, r2, r3
 800dba8:	9308      	str	r3, [sp, #32]
 800dbaa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dbac:	b1f3      	cbz	r3, 800dbec <_dtoa_r+0x78c>
 800dbae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	f000 80b7 	beq.w	800dd24 <_dtoa_r+0x8c4>
 800dbb6:	b18c      	cbz	r4, 800dbdc <_dtoa_r+0x77c>
 800dbb8:	4629      	mov	r1, r5
 800dbba:	4622      	mov	r2, r4
 800dbbc:	4658      	mov	r0, fp
 800dbbe:	f000 fd11 	bl	800e5e4 <__pow5mult>
 800dbc2:	464a      	mov	r2, r9
 800dbc4:	4601      	mov	r1, r0
 800dbc6:	4605      	mov	r5, r0
 800dbc8:	4658      	mov	r0, fp
 800dbca:	f000 fc61 	bl	800e490 <__multiply>
 800dbce:	4649      	mov	r1, r9
 800dbd0:	9004      	str	r0, [sp, #16]
 800dbd2:	4658      	mov	r0, fp
 800dbd4:	f000 fb48 	bl	800e268 <_Bfree>
 800dbd8:	9b04      	ldr	r3, [sp, #16]
 800dbda:	4699      	mov	r9, r3
 800dbdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dbde:	1b1a      	subs	r2, r3, r4
 800dbe0:	d004      	beq.n	800dbec <_dtoa_r+0x78c>
 800dbe2:	4649      	mov	r1, r9
 800dbe4:	4658      	mov	r0, fp
 800dbe6:	f000 fcfd 	bl	800e5e4 <__pow5mult>
 800dbea:	4681      	mov	r9, r0
 800dbec:	2101      	movs	r1, #1
 800dbee:	4658      	mov	r0, fp
 800dbf0:	f000 fc38 	bl	800e464 <__i2b>
 800dbf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dbf6:	4604      	mov	r4, r0
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	f000 81cf 	beq.w	800df9c <_dtoa_r+0xb3c>
 800dbfe:	461a      	mov	r2, r3
 800dc00:	4601      	mov	r1, r0
 800dc02:	4658      	mov	r0, fp
 800dc04:	f000 fcee 	bl	800e5e4 <__pow5mult>
 800dc08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc0a:	2b01      	cmp	r3, #1
 800dc0c:	4604      	mov	r4, r0
 800dc0e:	f300 8095 	bgt.w	800dd3c <_dtoa_r+0x8dc>
 800dc12:	9b02      	ldr	r3, [sp, #8]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	f040 8087 	bne.w	800dd28 <_dtoa_r+0x8c8>
 800dc1a:	9b03      	ldr	r3, [sp, #12]
 800dc1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	f040 8089 	bne.w	800dd38 <_dtoa_r+0x8d8>
 800dc26:	9b03      	ldr	r3, [sp, #12]
 800dc28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dc2c:	0d1b      	lsrs	r3, r3, #20
 800dc2e:	051b      	lsls	r3, r3, #20
 800dc30:	b12b      	cbz	r3, 800dc3e <_dtoa_r+0x7de>
 800dc32:	9b08      	ldr	r3, [sp, #32]
 800dc34:	3301      	adds	r3, #1
 800dc36:	9308      	str	r3, [sp, #32]
 800dc38:	f108 0801 	add.w	r8, r8, #1
 800dc3c:	2301      	movs	r3, #1
 800dc3e:	930a      	str	r3, [sp, #40]	@ 0x28
 800dc40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	f000 81b0 	beq.w	800dfa8 <_dtoa_r+0xb48>
 800dc48:	6923      	ldr	r3, [r4, #16]
 800dc4a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dc4e:	6918      	ldr	r0, [r3, #16]
 800dc50:	f000 fbbc 	bl	800e3cc <__hi0bits>
 800dc54:	f1c0 0020 	rsb	r0, r0, #32
 800dc58:	9b08      	ldr	r3, [sp, #32]
 800dc5a:	4418      	add	r0, r3
 800dc5c:	f010 001f 	ands.w	r0, r0, #31
 800dc60:	d077      	beq.n	800dd52 <_dtoa_r+0x8f2>
 800dc62:	f1c0 0320 	rsb	r3, r0, #32
 800dc66:	2b04      	cmp	r3, #4
 800dc68:	dd6b      	ble.n	800dd42 <_dtoa_r+0x8e2>
 800dc6a:	9b08      	ldr	r3, [sp, #32]
 800dc6c:	f1c0 001c 	rsb	r0, r0, #28
 800dc70:	4403      	add	r3, r0
 800dc72:	4480      	add	r8, r0
 800dc74:	4406      	add	r6, r0
 800dc76:	9308      	str	r3, [sp, #32]
 800dc78:	f1b8 0f00 	cmp.w	r8, #0
 800dc7c:	dd05      	ble.n	800dc8a <_dtoa_r+0x82a>
 800dc7e:	4649      	mov	r1, r9
 800dc80:	4642      	mov	r2, r8
 800dc82:	4658      	mov	r0, fp
 800dc84:	f000 fd08 	bl	800e698 <__lshift>
 800dc88:	4681      	mov	r9, r0
 800dc8a:	9b08      	ldr	r3, [sp, #32]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	dd05      	ble.n	800dc9c <_dtoa_r+0x83c>
 800dc90:	4621      	mov	r1, r4
 800dc92:	461a      	mov	r2, r3
 800dc94:	4658      	mov	r0, fp
 800dc96:	f000 fcff 	bl	800e698 <__lshift>
 800dc9a:	4604      	mov	r4, r0
 800dc9c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d059      	beq.n	800dd56 <_dtoa_r+0x8f6>
 800dca2:	4621      	mov	r1, r4
 800dca4:	4648      	mov	r0, r9
 800dca6:	f000 fd63 	bl	800e770 <__mcmp>
 800dcaa:	2800      	cmp	r0, #0
 800dcac:	da53      	bge.n	800dd56 <_dtoa_r+0x8f6>
 800dcae:	1e7b      	subs	r3, r7, #1
 800dcb0:	9304      	str	r3, [sp, #16]
 800dcb2:	4649      	mov	r1, r9
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	220a      	movs	r2, #10
 800dcb8:	4658      	mov	r0, fp
 800dcba:	f000 faf7 	bl	800e2ac <__multadd>
 800dcbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dcc0:	4681      	mov	r9, r0
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	f000 8172 	beq.w	800dfac <_dtoa_r+0xb4c>
 800dcc8:	2300      	movs	r3, #0
 800dcca:	4629      	mov	r1, r5
 800dccc:	220a      	movs	r2, #10
 800dcce:	4658      	mov	r0, fp
 800dcd0:	f000 faec 	bl	800e2ac <__multadd>
 800dcd4:	9b00      	ldr	r3, [sp, #0]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	4605      	mov	r5, r0
 800dcda:	dc67      	bgt.n	800ddac <_dtoa_r+0x94c>
 800dcdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dcde:	2b02      	cmp	r3, #2
 800dce0:	dc41      	bgt.n	800dd66 <_dtoa_r+0x906>
 800dce2:	e063      	b.n	800ddac <_dtoa_r+0x94c>
 800dce4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800dce6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800dcea:	e746      	b.n	800db7a <_dtoa_r+0x71a>
 800dcec:	9b07      	ldr	r3, [sp, #28]
 800dcee:	1e5c      	subs	r4, r3, #1
 800dcf0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dcf2:	42a3      	cmp	r3, r4
 800dcf4:	bfbf      	itttt	lt
 800dcf6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800dcf8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800dcfa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800dcfc:	1ae3      	sublt	r3, r4, r3
 800dcfe:	bfb4      	ite	lt
 800dd00:	18d2      	addlt	r2, r2, r3
 800dd02:	1b1c      	subge	r4, r3, r4
 800dd04:	9b07      	ldr	r3, [sp, #28]
 800dd06:	bfbc      	itt	lt
 800dd08:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800dd0a:	2400      	movlt	r4, #0
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	bfb5      	itete	lt
 800dd10:	eba8 0603 	sublt.w	r6, r8, r3
 800dd14:	9b07      	ldrge	r3, [sp, #28]
 800dd16:	2300      	movlt	r3, #0
 800dd18:	4646      	movge	r6, r8
 800dd1a:	e730      	b.n	800db7e <_dtoa_r+0x71e>
 800dd1c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800dd1e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800dd20:	4646      	mov	r6, r8
 800dd22:	e735      	b.n	800db90 <_dtoa_r+0x730>
 800dd24:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dd26:	e75c      	b.n	800dbe2 <_dtoa_r+0x782>
 800dd28:	2300      	movs	r3, #0
 800dd2a:	e788      	b.n	800dc3e <_dtoa_r+0x7de>
 800dd2c:	3fe00000 	.word	0x3fe00000
 800dd30:	40240000 	.word	0x40240000
 800dd34:	40140000 	.word	0x40140000
 800dd38:	9b02      	ldr	r3, [sp, #8]
 800dd3a:	e780      	b.n	800dc3e <_dtoa_r+0x7de>
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	930a      	str	r3, [sp, #40]	@ 0x28
 800dd40:	e782      	b.n	800dc48 <_dtoa_r+0x7e8>
 800dd42:	d099      	beq.n	800dc78 <_dtoa_r+0x818>
 800dd44:	9a08      	ldr	r2, [sp, #32]
 800dd46:	331c      	adds	r3, #28
 800dd48:	441a      	add	r2, r3
 800dd4a:	4498      	add	r8, r3
 800dd4c:	441e      	add	r6, r3
 800dd4e:	9208      	str	r2, [sp, #32]
 800dd50:	e792      	b.n	800dc78 <_dtoa_r+0x818>
 800dd52:	4603      	mov	r3, r0
 800dd54:	e7f6      	b.n	800dd44 <_dtoa_r+0x8e4>
 800dd56:	9b07      	ldr	r3, [sp, #28]
 800dd58:	9704      	str	r7, [sp, #16]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	dc20      	bgt.n	800dda0 <_dtoa_r+0x940>
 800dd5e:	9300      	str	r3, [sp, #0]
 800dd60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd62:	2b02      	cmp	r3, #2
 800dd64:	dd1e      	ble.n	800dda4 <_dtoa_r+0x944>
 800dd66:	9b00      	ldr	r3, [sp, #0]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	f47f aec0 	bne.w	800daee <_dtoa_r+0x68e>
 800dd6e:	4621      	mov	r1, r4
 800dd70:	2205      	movs	r2, #5
 800dd72:	4658      	mov	r0, fp
 800dd74:	f000 fa9a 	bl	800e2ac <__multadd>
 800dd78:	4601      	mov	r1, r0
 800dd7a:	4604      	mov	r4, r0
 800dd7c:	4648      	mov	r0, r9
 800dd7e:	f000 fcf7 	bl	800e770 <__mcmp>
 800dd82:	2800      	cmp	r0, #0
 800dd84:	f77f aeb3 	ble.w	800daee <_dtoa_r+0x68e>
 800dd88:	4656      	mov	r6, sl
 800dd8a:	2331      	movs	r3, #49	@ 0x31
 800dd8c:	f806 3b01 	strb.w	r3, [r6], #1
 800dd90:	9b04      	ldr	r3, [sp, #16]
 800dd92:	3301      	adds	r3, #1
 800dd94:	9304      	str	r3, [sp, #16]
 800dd96:	e6ae      	b.n	800daf6 <_dtoa_r+0x696>
 800dd98:	9c07      	ldr	r4, [sp, #28]
 800dd9a:	9704      	str	r7, [sp, #16]
 800dd9c:	4625      	mov	r5, r4
 800dd9e:	e7f3      	b.n	800dd88 <_dtoa_r+0x928>
 800dda0:	9b07      	ldr	r3, [sp, #28]
 800dda2:	9300      	str	r3, [sp, #0]
 800dda4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	f000 8104 	beq.w	800dfb4 <_dtoa_r+0xb54>
 800ddac:	2e00      	cmp	r6, #0
 800ddae:	dd05      	ble.n	800ddbc <_dtoa_r+0x95c>
 800ddb0:	4629      	mov	r1, r5
 800ddb2:	4632      	mov	r2, r6
 800ddb4:	4658      	mov	r0, fp
 800ddb6:	f000 fc6f 	bl	800e698 <__lshift>
 800ddba:	4605      	mov	r5, r0
 800ddbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d05a      	beq.n	800de78 <_dtoa_r+0xa18>
 800ddc2:	6869      	ldr	r1, [r5, #4]
 800ddc4:	4658      	mov	r0, fp
 800ddc6:	f000 fa0f 	bl	800e1e8 <_Balloc>
 800ddca:	4606      	mov	r6, r0
 800ddcc:	b928      	cbnz	r0, 800ddda <_dtoa_r+0x97a>
 800ddce:	4b84      	ldr	r3, [pc, #528]	@ (800dfe0 <_dtoa_r+0xb80>)
 800ddd0:	4602      	mov	r2, r0
 800ddd2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ddd6:	f7ff bb5a 	b.w	800d48e <_dtoa_r+0x2e>
 800ddda:	692a      	ldr	r2, [r5, #16]
 800dddc:	3202      	adds	r2, #2
 800ddde:	0092      	lsls	r2, r2, #2
 800dde0:	f105 010c 	add.w	r1, r5, #12
 800dde4:	300c      	adds	r0, #12
 800dde6:	f002 f93b 	bl	8010060 <memcpy>
 800ddea:	2201      	movs	r2, #1
 800ddec:	4631      	mov	r1, r6
 800ddee:	4658      	mov	r0, fp
 800ddf0:	f000 fc52 	bl	800e698 <__lshift>
 800ddf4:	f10a 0301 	add.w	r3, sl, #1
 800ddf8:	9307      	str	r3, [sp, #28]
 800ddfa:	9b00      	ldr	r3, [sp, #0]
 800ddfc:	4453      	add	r3, sl
 800ddfe:	930b      	str	r3, [sp, #44]	@ 0x2c
 800de00:	9b02      	ldr	r3, [sp, #8]
 800de02:	f003 0301 	and.w	r3, r3, #1
 800de06:	462f      	mov	r7, r5
 800de08:	930a      	str	r3, [sp, #40]	@ 0x28
 800de0a:	4605      	mov	r5, r0
 800de0c:	9b07      	ldr	r3, [sp, #28]
 800de0e:	4621      	mov	r1, r4
 800de10:	3b01      	subs	r3, #1
 800de12:	4648      	mov	r0, r9
 800de14:	9300      	str	r3, [sp, #0]
 800de16:	f7ff fa99 	bl	800d34c <quorem>
 800de1a:	4639      	mov	r1, r7
 800de1c:	9002      	str	r0, [sp, #8]
 800de1e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800de22:	4648      	mov	r0, r9
 800de24:	f000 fca4 	bl	800e770 <__mcmp>
 800de28:	462a      	mov	r2, r5
 800de2a:	9008      	str	r0, [sp, #32]
 800de2c:	4621      	mov	r1, r4
 800de2e:	4658      	mov	r0, fp
 800de30:	f000 fcba 	bl	800e7a8 <__mdiff>
 800de34:	68c2      	ldr	r2, [r0, #12]
 800de36:	4606      	mov	r6, r0
 800de38:	bb02      	cbnz	r2, 800de7c <_dtoa_r+0xa1c>
 800de3a:	4601      	mov	r1, r0
 800de3c:	4648      	mov	r0, r9
 800de3e:	f000 fc97 	bl	800e770 <__mcmp>
 800de42:	4602      	mov	r2, r0
 800de44:	4631      	mov	r1, r6
 800de46:	4658      	mov	r0, fp
 800de48:	920e      	str	r2, [sp, #56]	@ 0x38
 800de4a:	f000 fa0d 	bl	800e268 <_Bfree>
 800de4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de50:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800de52:	9e07      	ldr	r6, [sp, #28]
 800de54:	ea43 0102 	orr.w	r1, r3, r2
 800de58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de5a:	4319      	orrs	r1, r3
 800de5c:	d110      	bne.n	800de80 <_dtoa_r+0xa20>
 800de5e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800de62:	d029      	beq.n	800deb8 <_dtoa_r+0xa58>
 800de64:	9b08      	ldr	r3, [sp, #32]
 800de66:	2b00      	cmp	r3, #0
 800de68:	dd02      	ble.n	800de70 <_dtoa_r+0xa10>
 800de6a:	9b02      	ldr	r3, [sp, #8]
 800de6c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800de70:	9b00      	ldr	r3, [sp, #0]
 800de72:	f883 8000 	strb.w	r8, [r3]
 800de76:	e63f      	b.n	800daf8 <_dtoa_r+0x698>
 800de78:	4628      	mov	r0, r5
 800de7a:	e7bb      	b.n	800ddf4 <_dtoa_r+0x994>
 800de7c:	2201      	movs	r2, #1
 800de7e:	e7e1      	b.n	800de44 <_dtoa_r+0x9e4>
 800de80:	9b08      	ldr	r3, [sp, #32]
 800de82:	2b00      	cmp	r3, #0
 800de84:	db04      	blt.n	800de90 <_dtoa_r+0xa30>
 800de86:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800de88:	430b      	orrs	r3, r1
 800de8a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800de8c:	430b      	orrs	r3, r1
 800de8e:	d120      	bne.n	800ded2 <_dtoa_r+0xa72>
 800de90:	2a00      	cmp	r2, #0
 800de92:	dded      	ble.n	800de70 <_dtoa_r+0xa10>
 800de94:	4649      	mov	r1, r9
 800de96:	2201      	movs	r2, #1
 800de98:	4658      	mov	r0, fp
 800de9a:	f000 fbfd 	bl	800e698 <__lshift>
 800de9e:	4621      	mov	r1, r4
 800dea0:	4681      	mov	r9, r0
 800dea2:	f000 fc65 	bl	800e770 <__mcmp>
 800dea6:	2800      	cmp	r0, #0
 800dea8:	dc03      	bgt.n	800deb2 <_dtoa_r+0xa52>
 800deaa:	d1e1      	bne.n	800de70 <_dtoa_r+0xa10>
 800deac:	f018 0f01 	tst.w	r8, #1
 800deb0:	d0de      	beq.n	800de70 <_dtoa_r+0xa10>
 800deb2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800deb6:	d1d8      	bne.n	800de6a <_dtoa_r+0xa0a>
 800deb8:	9a00      	ldr	r2, [sp, #0]
 800deba:	2339      	movs	r3, #57	@ 0x39
 800debc:	7013      	strb	r3, [r2, #0]
 800debe:	4633      	mov	r3, r6
 800dec0:	461e      	mov	r6, r3
 800dec2:	3b01      	subs	r3, #1
 800dec4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800dec8:	2a39      	cmp	r2, #57	@ 0x39
 800deca:	d052      	beq.n	800df72 <_dtoa_r+0xb12>
 800decc:	3201      	adds	r2, #1
 800dece:	701a      	strb	r2, [r3, #0]
 800ded0:	e612      	b.n	800daf8 <_dtoa_r+0x698>
 800ded2:	2a00      	cmp	r2, #0
 800ded4:	dd07      	ble.n	800dee6 <_dtoa_r+0xa86>
 800ded6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800deda:	d0ed      	beq.n	800deb8 <_dtoa_r+0xa58>
 800dedc:	9a00      	ldr	r2, [sp, #0]
 800dede:	f108 0301 	add.w	r3, r8, #1
 800dee2:	7013      	strb	r3, [r2, #0]
 800dee4:	e608      	b.n	800daf8 <_dtoa_r+0x698>
 800dee6:	9b07      	ldr	r3, [sp, #28]
 800dee8:	9a07      	ldr	r2, [sp, #28]
 800deea:	f803 8c01 	strb.w	r8, [r3, #-1]
 800deee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800def0:	4293      	cmp	r3, r2
 800def2:	d028      	beq.n	800df46 <_dtoa_r+0xae6>
 800def4:	4649      	mov	r1, r9
 800def6:	2300      	movs	r3, #0
 800def8:	220a      	movs	r2, #10
 800defa:	4658      	mov	r0, fp
 800defc:	f000 f9d6 	bl	800e2ac <__multadd>
 800df00:	42af      	cmp	r7, r5
 800df02:	4681      	mov	r9, r0
 800df04:	f04f 0300 	mov.w	r3, #0
 800df08:	f04f 020a 	mov.w	r2, #10
 800df0c:	4639      	mov	r1, r7
 800df0e:	4658      	mov	r0, fp
 800df10:	d107      	bne.n	800df22 <_dtoa_r+0xac2>
 800df12:	f000 f9cb 	bl	800e2ac <__multadd>
 800df16:	4607      	mov	r7, r0
 800df18:	4605      	mov	r5, r0
 800df1a:	9b07      	ldr	r3, [sp, #28]
 800df1c:	3301      	adds	r3, #1
 800df1e:	9307      	str	r3, [sp, #28]
 800df20:	e774      	b.n	800de0c <_dtoa_r+0x9ac>
 800df22:	f000 f9c3 	bl	800e2ac <__multadd>
 800df26:	4629      	mov	r1, r5
 800df28:	4607      	mov	r7, r0
 800df2a:	2300      	movs	r3, #0
 800df2c:	220a      	movs	r2, #10
 800df2e:	4658      	mov	r0, fp
 800df30:	f000 f9bc 	bl	800e2ac <__multadd>
 800df34:	4605      	mov	r5, r0
 800df36:	e7f0      	b.n	800df1a <_dtoa_r+0xaba>
 800df38:	9b00      	ldr	r3, [sp, #0]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	bfcc      	ite	gt
 800df3e:	461e      	movgt	r6, r3
 800df40:	2601      	movle	r6, #1
 800df42:	4456      	add	r6, sl
 800df44:	2700      	movs	r7, #0
 800df46:	4649      	mov	r1, r9
 800df48:	2201      	movs	r2, #1
 800df4a:	4658      	mov	r0, fp
 800df4c:	f000 fba4 	bl	800e698 <__lshift>
 800df50:	4621      	mov	r1, r4
 800df52:	4681      	mov	r9, r0
 800df54:	f000 fc0c 	bl	800e770 <__mcmp>
 800df58:	2800      	cmp	r0, #0
 800df5a:	dcb0      	bgt.n	800debe <_dtoa_r+0xa5e>
 800df5c:	d102      	bne.n	800df64 <_dtoa_r+0xb04>
 800df5e:	f018 0f01 	tst.w	r8, #1
 800df62:	d1ac      	bne.n	800debe <_dtoa_r+0xa5e>
 800df64:	4633      	mov	r3, r6
 800df66:	461e      	mov	r6, r3
 800df68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800df6c:	2a30      	cmp	r2, #48	@ 0x30
 800df6e:	d0fa      	beq.n	800df66 <_dtoa_r+0xb06>
 800df70:	e5c2      	b.n	800daf8 <_dtoa_r+0x698>
 800df72:	459a      	cmp	sl, r3
 800df74:	d1a4      	bne.n	800dec0 <_dtoa_r+0xa60>
 800df76:	9b04      	ldr	r3, [sp, #16]
 800df78:	3301      	adds	r3, #1
 800df7a:	9304      	str	r3, [sp, #16]
 800df7c:	2331      	movs	r3, #49	@ 0x31
 800df7e:	f88a 3000 	strb.w	r3, [sl]
 800df82:	e5b9      	b.n	800daf8 <_dtoa_r+0x698>
 800df84:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800df86:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800dfe4 <_dtoa_r+0xb84>
 800df8a:	b11b      	cbz	r3, 800df94 <_dtoa_r+0xb34>
 800df8c:	f10a 0308 	add.w	r3, sl, #8
 800df90:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800df92:	6013      	str	r3, [r2, #0]
 800df94:	4650      	mov	r0, sl
 800df96:	b019      	add	sp, #100	@ 0x64
 800df98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df9e:	2b01      	cmp	r3, #1
 800dfa0:	f77f ae37 	ble.w	800dc12 <_dtoa_r+0x7b2>
 800dfa4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dfa6:	930a      	str	r3, [sp, #40]	@ 0x28
 800dfa8:	2001      	movs	r0, #1
 800dfaa:	e655      	b.n	800dc58 <_dtoa_r+0x7f8>
 800dfac:	9b00      	ldr	r3, [sp, #0]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	f77f aed6 	ble.w	800dd60 <_dtoa_r+0x900>
 800dfb4:	4656      	mov	r6, sl
 800dfb6:	4621      	mov	r1, r4
 800dfb8:	4648      	mov	r0, r9
 800dfba:	f7ff f9c7 	bl	800d34c <quorem>
 800dfbe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800dfc2:	f806 8b01 	strb.w	r8, [r6], #1
 800dfc6:	9b00      	ldr	r3, [sp, #0]
 800dfc8:	eba6 020a 	sub.w	r2, r6, sl
 800dfcc:	4293      	cmp	r3, r2
 800dfce:	ddb3      	ble.n	800df38 <_dtoa_r+0xad8>
 800dfd0:	4649      	mov	r1, r9
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	220a      	movs	r2, #10
 800dfd6:	4658      	mov	r0, fp
 800dfd8:	f000 f968 	bl	800e2ac <__multadd>
 800dfdc:	4681      	mov	r9, r0
 800dfde:	e7ea      	b.n	800dfb6 <_dtoa_r+0xb56>
 800dfe0:	08010df9 	.word	0x08010df9
 800dfe4:	08010d7d 	.word	0x08010d7d

0800dfe8 <_free_r>:
 800dfe8:	b538      	push	{r3, r4, r5, lr}
 800dfea:	4605      	mov	r5, r0
 800dfec:	2900      	cmp	r1, #0
 800dfee:	d041      	beq.n	800e074 <_free_r+0x8c>
 800dff0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dff4:	1f0c      	subs	r4, r1, #4
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	bfb8      	it	lt
 800dffa:	18e4      	addlt	r4, r4, r3
 800dffc:	f000 f8e8 	bl	800e1d0 <__malloc_lock>
 800e000:	4a1d      	ldr	r2, [pc, #116]	@ (800e078 <_free_r+0x90>)
 800e002:	6813      	ldr	r3, [r2, #0]
 800e004:	b933      	cbnz	r3, 800e014 <_free_r+0x2c>
 800e006:	6063      	str	r3, [r4, #4]
 800e008:	6014      	str	r4, [r2, #0]
 800e00a:	4628      	mov	r0, r5
 800e00c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e010:	f000 b8e4 	b.w	800e1dc <__malloc_unlock>
 800e014:	42a3      	cmp	r3, r4
 800e016:	d908      	bls.n	800e02a <_free_r+0x42>
 800e018:	6820      	ldr	r0, [r4, #0]
 800e01a:	1821      	adds	r1, r4, r0
 800e01c:	428b      	cmp	r3, r1
 800e01e:	bf01      	itttt	eq
 800e020:	6819      	ldreq	r1, [r3, #0]
 800e022:	685b      	ldreq	r3, [r3, #4]
 800e024:	1809      	addeq	r1, r1, r0
 800e026:	6021      	streq	r1, [r4, #0]
 800e028:	e7ed      	b.n	800e006 <_free_r+0x1e>
 800e02a:	461a      	mov	r2, r3
 800e02c:	685b      	ldr	r3, [r3, #4]
 800e02e:	b10b      	cbz	r3, 800e034 <_free_r+0x4c>
 800e030:	42a3      	cmp	r3, r4
 800e032:	d9fa      	bls.n	800e02a <_free_r+0x42>
 800e034:	6811      	ldr	r1, [r2, #0]
 800e036:	1850      	adds	r0, r2, r1
 800e038:	42a0      	cmp	r0, r4
 800e03a:	d10b      	bne.n	800e054 <_free_r+0x6c>
 800e03c:	6820      	ldr	r0, [r4, #0]
 800e03e:	4401      	add	r1, r0
 800e040:	1850      	adds	r0, r2, r1
 800e042:	4283      	cmp	r3, r0
 800e044:	6011      	str	r1, [r2, #0]
 800e046:	d1e0      	bne.n	800e00a <_free_r+0x22>
 800e048:	6818      	ldr	r0, [r3, #0]
 800e04a:	685b      	ldr	r3, [r3, #4]
 800e04c:	6053      	str	r3, [r2, #4]
 800e04e:	4408      	add	r0, r1
 800e050:	6010      	str	r0, [r2, #0]
 800e052:	e7da      	b.n	800e00a <_free_r+0x22>
 800e054:	d902      	bls.n	800e05c <_free_r+0x74>
 800e056:	230c      	movs	r3, #12
 800e058:	602b      	str	r3, [r5, #0]
 800e05a:	e7d6      	b.n	800e00a <_free_r+0x22>
 800e05c:	6820      	ldr	r0, [r4, #0]
 800e05e:	1821      	adds	r1, r4, r0
 800e060:	428b      	cmp	r3, r1
 800e062:	bf04      	itt	eq
 800e064:	6819      	ldreq	r1, [r3, #0]
 800e066:	685b      	ldreq	r3, [r3, #4]
 800e068:	6063      	str	r3, [r4, #4]
 800e06a:	bf04      	itt	eq
 800e06c:	1809      	addeq	r1, r1, r0
 800e06e:	6021      	streq	r1, [r4, #0]
 800e070:	6054      	str	r4, [r2, #4]
 800e072:	e7ca      	b.n	800e00a <_free_r+0x22>
 800e074:	bd38      	pop	{r3, r4, r5, pc}
 800e076:	bf00      	nop
 800e078:	20012d90 	.word	0x20012d90

0800e07c <malloc>:
 800e07c:	4b02      	ldr	r3, [pc, #8]	@ (800e088 <malloc+0xc>)
 800e07e:	4601      	mov	r1, r0
 800e080:	6818      	ldr	r0, [r3, #0]
 800e082:	f000 b825 	b.w	800e0d0 <_malloc_r>
 800e086:	bf00      	nop
 800e088:	20000118 	.word	0x20000118

0800e08c <sbrk_aligned>:
 800e08c:	b570      	push	{r4, r5, r6, lr}
 800e08e:	4e0f      	ldr	r6, [pc, #60]	@ (800e0cc <sbrk_aligned+0x40>)
 800e090:	460c      	mov	r4, r1
 800e092:	6831      	ldr	r1, [r6, #0]
 800e094:	4605      	mov	r5, r0
 800e096:	b911      	cbnz	r1, 800e09e <sbrk_aligned+0x12>
 800e098:	f001 ffd2 	bl	8010040 <_sbrk_r>
 800e09c:	6030      	str	r0, [r6, #0]
 800e09e:	4621      	mov	r1, r4
 800e0a0:	4628      	mov	r0, r5
 800e0a2:	f001 ffcd 	bl	8010040 <_sbrk_r>
 800e0a6:	1c43      	adds	r3, r0, #1
 800e0a8:	d103      	bne.n	800e0b2 <sbrk_aligned+0x26>
 800e0aa:	f04f 34ff 	mov.w	r4, #4294967295
 800e0ae:	4620      	mov	r0, r4
 800e0b0:	bd70      	pop	{r4, r5, r6, pc}
 800e0b2:	1cc4      	adds	r4, r0, #3
 800e0b4:	f024 0403 	bic.w	r4, r4, #3
 800e0b8:	42a0      	cmp	r0, r4
 800e0ba:	d0f8      	beq.n	800e0ae <sbrk_aligned+0x22>
 800e0bc:	1a21      	subs	r1, r4, r0
 800e0be:	4628      	mov	r0, r5
 800e0c0:	f001 ffbe 	bl	8010040 <_sbrk_r>
 800e0c4:	3001      	adds	r0, #1
 800e0c6:	d1f2      	bne.n	800e0ae <sbrk_aligned+0x22>
 800e0c8:	e7ef      	b.n	800e0aa <sbrk_aligned+0x1e>
 800e0ca:	bf00      	nop
 800e0cc:	20012d8c 	.word	0x20012d8c

0800e0d0 <_malloc_r>:
 800e0d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0d4:	1ccd      	adds	r5, r1, #3
 800e0d6:	f025 0503 	bic.w	r5, r5, #3
 800e0da:	3508      	adds	r5, #8
 800e0dc:	2d0c      	cmp	r5, #12
 800e0de:	bf38      	it	cc
 800e0e0:	250c      	movcc	r5, #12
 800e0e2:	2d00      	cmp	r5, #0
 800e0e4:	4606      	mov	r6, r0
 800e0e6:	db01      	blt.n	800e0ec <_malloc_r+0x1c>
 800e0e8:	42a9      	cmp	r1, r5
 800e0ea:	d904      	bls.n	800e0f6 <_malloc_r+0x26>
 800e0ec:	230c      	movs	r3, #12
 800e0ee:	6033      	str	r3, [r6, #0]
 800e0f0:	2000      	movs	r0, #0
 800e0f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e1cc <_malloc_r+0xfc>
 800e0fa:	f000 f869 	bl	800e1d0 <__malloc_lock>
 800e0fe:	f8d8 3000 	ldr.w	r3, [r8]
 800e102:	461c      	mov	r4, r3
 800e104:	bb44      	cbnz	r4, 800e158 <_malloc_r+0x88>
 800e106:	4629      	mov	r1, r5
 800e108:	4630      	mov	r0, r6
 800e10a:	f7ff ffbf 	bl	800e08c <sbrk_aligned>
 800e10e:	1c43      	adds	r3, r0, #1
 800e110:	4604      	mov	r4, r0
 800e112:	d158      	bne.n	800e1c6 <_malloc_r+0xf6>
 800e114:	f8d8 4000 	ldr.w	r4, [r8]
 800e118:	4627      	mov	r7, r4
 800e11a:	2f00      	cmp	r7, #0
 800e11c:	d143      	bne.n	800e1a6 <_malloc_r+0xd6>
 800e11e:	2c00      	cmp	r4, #0
 800e120:	d04b      	beq.n	800e1ba <_malloc_r+0xea>
 800e122:	6823      	ldr	r3, [r4, #0]
 800e124:	4639      	mov	r1, r7
 800e126:	4630      	mov	r0, r6
 800e128:	eb04 0903 	add.w	r9, r4, r3
 800e12c:	f001 ff88 	bl	8010040 <_sbrk_r>
 800e130:	4581      	cmp	r9, r0
 800e132:	d142      	bne.n	800e1ba <_malloc_r+0xea>
 800e134:	6821      	ldr	r1, [r4, #0]
 800e136:	1a6d      	subs	r5, r5, r1
 800e138:	4629      	mov	r1, r5
 800e13a:	4630      	mov	r0, r6
 800e13c:	f7ff ffa6 	bl	800e08c <sbrk_aligned>
 800e140:	3001      	adds	r0, #1
 800e142:	d03a      	beq.n	800e1ba <_malloc_r+0xea>
 800e144:	6823      	ldr	r3, [r4, #0]
 800e146:	442b      	add	r3, r5
 800e148:	6023      	str	r3, [r4, #0]
 800e14a:	f8d8 3000 	ldr.w	r3, [r8]
 800e14e:	685a      	ldr	r2, [r3, #4]
 800e150:	bb62      	cbnz	r2, 800e1ac <_malloc_r+0xdc>
 800e152:	f8c8 7000 	str.w	r7, [r8]
 800e156:	e00f      	b.n	800e178 <_malloc_r+0xa8>
 800e158:	6822      	ldr	r2, [r4, #0]
 800e15a:	1b52      	subs	r2, r2, r5
 800e15c:	d420      	bmi.n	800e1a0 <_malloc_r+0xd0>
 800e15e:	2a0b      	cmp	r2, #11
 800e160:	d917      	bls.n	800e192 <_malloc_r+0xc2>
 800e162:	1961      	adds	r1, r4, r5
 800e164:	42a3      	cmp	r3, r4
 800e166:	6025      	str	r5, [r4, #0]
 800e168:	bf18      	it	ne
 800e16a:	6059      	strne	r1, [r3, #4]
 800e16c:	6863      	ldr	r3, [r4, #4]
 800e16e:	bf08      	it	eq
 800e170:	f8c8 1000 	streq.w	r1, [r8]
 800e174:	5162      	str	r2, [r4, r5]
 800e176:	604b      	str	r3, [r1, #4]
 800e178:	4630      	mov	r0, r6
 800e17a:	f000 f82f 	bl	800e1dc <__malloc_unlock>
 800e17e:	f104 000b 	add.w	r0, r4, #11
 800e182:	1d23      	adds	r3, r4, #4
 800e184:	f020 0007 	bic.w	r0, r0, #7
 800e188:	1ac2      	subs	r2, r0, r3
 800e18a:	bf1c      	itt	ne
 800e18c:	1a1b      	subne	r3, r3, r0
 800e18e:	50a3      	strne	r3, [r4, r2]
 800e190:	e7af      	b.n	800e0f2 <_malloc_r+0x22>
 800e192:	6862      	ldr	r2, [r4, #4]
 800e194:	42a3      	cmp	r3, r4
 800e196:	bf0c      	ite	eq
 800e198:	f8c8 2000 	streq.w	r2, [r8]
 800e19c:	605a      	strne	r2, [r3, #4]
 800e19e:	e7eb      	b.n	800e178 <_malloc_r+0xa8>
 800e1a0:	4623      	mov	r3, r4
 800e1a2:	6864      	ldr	r4, [r4, #4]
 800e1a4:	e7ae      	b.n	800e104 <_malloc_r+0x34>
 800e1a6:	463c      	mov	r4, r7
 800e1a8:	687f      	ldr	r7, [r7, #4]
 800e1aa:	e7b6      	b.n	800e11a <_malloc_r+0x4a>
 800e1ac:	461a      	mov	r2, r3
 800e1ae:	685b      	ldr	r3, [r3, #4]
 800e1b0:	42a3      	cmp	r3, r4
 800e1b2:	d1fb      	bne.n	800e1ac <_malloc_r+0xdc>
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	6053      	str	r3, [r2, #4]
 800e1b8:	e7de      	b.n	800e178 <_malloc_r+0xa8>
 800e1ba:	230c      	movs	r3, #12
 800e1bc:	6033      	str	r3, [r6, #0]
 800e1be:	4630      	mov	r0, r6
 800e1c0:	f000 f80c 	bl	800e1dc <__malloc_unlock>
 800e1c4:	e794      	b.n	800e0f0 <_malloc_r+0x20>
 800e1c6:	6005      	str	r5, [r0, #0]
 800e1c8:	e7d6      	b.n	800e178 <_malloc_r+0xa8>
 800e1ca:	bf00      	nop
 800e1cc:	20012d90 	.word	0x20012d90

0800e1d0 <__malloc_lock>:
 800e1d0:	4801      	ldr	r0, [pc, #4]	@ (800e1d8 <__malloc_lock+0x8>)
 800e1d2:	f7ff b8b2 	b.w	800d33a <__retarget_lock_acquire_recursive>
 800e1d6:	bf00      	nop
 800e1d8:	20012d88 	.word	0x20012d88

0800e1dc <__malloc_unlock>:
 800e1dc:	4801      	ldr	r0, [pc, #4]	@ (800e1e4 <__malloc_unlock+0x8>)
 800e1de:	f7ff b8ad 	b.w	800d33c <__retarget_lock_release_recursive>
 800e1e2:	bf00      	nop
 800e1e4:	20012d88 	.word	0x20012d88

0800e1e8 <_Balloc>:
 800e1e8:	b570      	push	{r4, r5, r6, lr}
 800e1ea:	69c6      	ldr	r6, [r0, #28]
 800e1ec:	4604      	mov	r4, r0
 800e1ee:	460d      	mov	r5, r1
 800e1f0:	b976      	cbnz	r6, 800e210 <_Balloc+0x28>
 800e1f2:	2010      	movs	r0, #16
 800e1f4:	f7ff ff42 	bl	800e07c <malloc>
 800e1f8:	4602      	mov	r2, r0
 800e1fa:	61e0      	str	r0, [r4, #28]
 800e1fc:	b920      	cbnz	r0, 800e208 <_Balloc+0x20>
 800e1fe:	4b18      	ldr	r3, [pc, #96]	@ (800e260 <_Balloc+0x78>)
 800e200:	4818      	ldr	r0, [pc, #96]	@ (800e264 <_Balloc+0x7c>)
 800e202:	216b      	movs	r1, #107	@ 0x6b
 800e204:	f001 ff44 	bl	8010090 <__assert_func>
 800e208:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e20c:	6006      	str	r6, [r0, #0]
 800e20e:	60c6      	str	r6, [r0, #12]
 800e210:	69e6      	ldr	r6, [r4, #28]
 800e212:	68f3      	ldr	r3, [r6, #12]
 800e214:	b183      	cbz	r3, 800e238 <_Balloc+0x50>
 800e216:	69e3      	ldr	r3, [r4, #28]
 800e218:	68db      	ldr	r3, [r3, #12]
 800e21a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e21e:	b9b8      	cbnz	r0, 800e250 <_Balloc+0x68>
 800e220:	2101      	movs	r1, #1
 800e222:	fa01 f605 	lsl.w	r6, r1, r5
 800e226:	1d72      	adds	r2, r6, #5
 800e228:	0092      	lsls	r2, r2, #2
 800e22a:	4620      	mov	r0, r4
 800e22c:	f001 ff4e 	bl	80100cc <_calloc_r>
 800e230:	b160      	cbz	r0, 800e24c <_Balloc+0x64>
 800e232:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e236:	e00e      	b.n	800e256 <_Balloc+0x6e>
 800e238:	2221      	movs	r2, #33	@ 0x21
 800e23a:	2104      	movs	r1, #4
 800e23c:	4620      	mov	r0, r4
 800e23e:	f001 ff45 	bl	80100cc <_calloc_r>
 800e242:	69e3      	ldr	r3, [r4, #28]
 800e244:	60f0      	str	r0, [r6, #12]
 800e246:	68db      	ldr	r3, [r3, #12]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d1e4      	bne.n	800e216 <_Balloc+0x2e>
 800e24c:	2000      	movs	r0, #0
 800e24e:	bd70      	pop	{r4, r5, r6, pc}
 800e250:	6802      	ldr	r2, [r0, #0]
 800e252:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e256:	2300      	movs	r3, #0
 800e258:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e25c:	e7f7      	b.n	800e24e <_Balloc+0x66>
 800e25e:	bf00      	nop
 800e260:	08010d8a 	.word	0x08010d8a
 800e264:	08010e0a 	.word	0x08010e0a

0800e268 <_Bfree>:
 800e268:	b570      	push	{r4, r5, r6, lr}
 800e26a:	69c6      	ldr	r6, [r0, #28]
 800e26c:	4605      	mov	r5, r0
 800e26e:	460c      	mov	r4, r1
 800e270:	b976      	cbnz	r6, 800e290 <_Bfree+0x28>
 800e272:	2010      	movs	r0, #16
 800e274:	f7ff ff02 	bl	800e07c <malloc>
 800e278:	4602      	mov	r2, r0
 800e27a:	61e8      	str	r0, [r5, #28]
 800e27c:	b920      	cbnz	r0, 800e288 <_Bfree+0x20>
 800e27e:	4b09      	ldr	r3, [pc, #36]	@ (800e2a4 <_Bfree+0x3c>)
 800e280:	4809      	ldr	r0, [pc, #36]	@ (800e2a8 <_Bfree+0x40>)
 800e282:	218f      	movs	r1, #143	@ 0x8f
 800e284:	f001 ff04 	bl	8010090 <__assert_func>
 800e288:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e28c:	6006      	str	r6, [r0, #0]
 800e28e:	60c6      	str	r6, [r0, #12]
 800e290:	b13c      	cbz	r4, 800e2a2 <_Bfree+0x3a>
 800e292:	69eb      	ldr	r3, [r5, #28]
 800e294:	6862      	ldr	r2, [r4, #4]
 800e296:	68db      	ldr	r3, [r3, #12]
 800e298:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e29c:	6021      	str	r1, [r4, #0]
 800e29e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e2a2:	bd70      	pop	{r4, r5, r6, pc}
 800e2a4:	08010d8a 	.word	0x08010d8a
 800e2a8:	08010e0a 	.word	0x08010e0a

0800e2ac <__multadd>:
 800e2ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2b0:	690d      	ldr	r5, [r1, #16]
 800e2b2:	4607      	mov	r7, r0
 800e2b4:	460c      	mov	r4, r1
 800e2b6:	461e      	mov	r6, r3
 800e2b8:	f101 0c14 	add.w	ip, r1, #20
 800e2bc:	2000      	movs	r0, #0
 800e2be:	f8dc 3000 	ldr.w	r3, [ip]
 800e2c2:	b299      	uxth	r1, r3
 800e2c4:	fb02 6101 	mla	r1, r2, r1, r6
 800e2c8:	0c1e      	lsrs	r6, r3, #16
 800e2ca:	0c0b      	lsrs	r3, r1, #16
 800e2cc:	fb02 3306 	mla	r3, r2, r6, r3
 800e2d0:	b289      	uxth	r1, r1
 800e2d2:	3001      	adds	r0, #1
 800e2d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e2d8:	4285      	cmp	r5, r0
 800e2da:	f84c 1b04 	str.w	r1, [ip], #4
 800e2de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e2e2:	dcec      	bgt.n	800e2be <__multadd+0x12>
 800e2e4:	b30e      	cbz	r6, 800e32a <__multadd+0x7e>
 800e2e6:	68a3      	ldr	r3, [r4, #8]
 800e2e8:	42ab      	cmp	r3, r5
 800e2ea:	dc19      	bgt.n	800e320 <__multadd+0x74>
 800e2ec:	6861      	ldr	r1, [r4, #4]
 800e2ee:	4638      	mov	r0, r7
 800e2f0:	3101      	adds	r1, #1
 800e2f2:	f7ff ff79 	bl	800e1e8 <_Balloc>
 800e2f6:	4680      	mov	r8, r0
 800e2f8:	b928      	cbnz	r0, 800e306 <__multadd+0x5a>
 800e2fa:	4602      	mov	r2, r0
 800e2fc:	4b0c      	ldr	r3, [pc, #48]	@ (800e330 <__multadd+0x84>)
 800e2fe:	480d      	ldr	r0, [pc, #52]	@ (800e334 <__multadd+0x88>)
 800e300:	21ba      	movs	r1, #186	@ 0xba
 800e302:	f001 fec5 	bl	8010090 <__assert_func>
 800e306:	6922      	ldr	r2, [r4, #16]
 800e308:	3202      	adds	r2, #2
 800e30a:	f104 010c 	add.w	r1, r4, #12
 800e30e:	0092      	lsls	r2, r2, #2
 800e310:	300c      	adds	r0, #12
 800e312:	f001 fea5 	bl	8010060 <memcpy>
 800e316:	4621      	mov	r1, r4
 800e318:	4638      	mov	r0, r7
 800e31a:	f7ff ffa5 	bl	800e268 <_Bfree>
 800e31e:	4644      	mov	r4, r8
 800e320:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e324:	3501      	adds	r5, #1
 800e326:	615e      	str	r6, [r3, #20]
 800e328:	6125      	str	r5, [r4, #16]
 800e32a:	4620      	mov	r0, r4
 800e32c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e330:	08010df9 	.word	0x08010df9
 800e334:	08010e0a 	.word	0x08010e0a

0800e338 <__s2b>:
 800e338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e33c:	460c      	mov	r4, r1
 800e33e:	4615      	mov	r5, r2
 800e340:	461f      	mov	r7, r3
 800e342:	2209      	movs	r2, #9
 800e344:	3308      	adds	r3, #8
 800e346:	4606      	mov	r6, r0
 800e348:	fb93 f3f2 	sdiv	r3, r3, r2
 800e34c:	2100      	movs	r1, #0
 800e34e:	2201      	movs	r2, #1
 800e350:	429a      	cmp	r2, r3
 800e352:	db09      	blt.n	800e368 <__s2b+0x30>
 800e354:	4630      	mov	r0, r6
 800e356:	f7ff ff47 	bl	800e1e8 <_Balloc>
 800e35a:	b940      	cbnz	r0, 800e36e <__s2b+0x36>
 800e35c:	4602      	mov	r2, r0
 800e35e:	4b19      	ldr	r3, [pc, #100]	@ (800e3c4 <__s2b+0x8c>)
 800e360:	4819      	ldr	r0, [pc, #100]	@ (800e3c8 <__s2b+0x90>)
 800e362:	21d3      	movs	r1, #211	@ 0xd3
 800e364:	f001 fe94 	bl	8010090 <__assert_func>
 800e368:	0052      	lsls	r2, r2, #1
 800e36a:	3101      	adds	r1, #1
 800e36c:	e7f0      	b.n	800e350 <__s2b+0x18>
 800e36e:	9b08      	ldr	r3, [sp, #32]
 800e370:	6143      	str	r3, [r0, #20]
 800e372:	2d09      	cmp	r5, #9
 800e374:	f04f 0301 	mov.w	r3, #1
 800e378:	6103      	str	r3, [r0, #16]
 800e37a:	dd16      	ble.n	800e3aa <__s2b+0x72>
 800e37c:	f104 0909 	add.w	r9, r4, #9
 800e380:	46c8      	mov	r8, r9
 800e382:	442c      	add	r4, r5
 800e384:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e388:	4601      	mov	r1, r0
 800e38a:	3b30      	subs	r3, #48	@ 0x30
 800e38c:	220a      	movs	r2, #10
 800e38e:	4630      	mov	r0, r6
 800e390:	f7ff ff8c 	bl	800e2ac <__multadd>
 800e394:	45a0      	cmp	r8, r4
 800e396:	d1f5      	bne.n	800e384 <__s2b+0x4c>
 800e398:	f1a5 0408 	sub.w	r4, r5, #8
 800e39c:	444c      	add	r4, r9
 800e39e:	1b2d      	subs	r5, r5, r4
 800e3a0:	1963      	adds	r3, r4, r5
 800e3a2:	42bb      	cmp	r3, r7
 800e3a4:	db04      	blt.n	800e3b0 <__s2b+0x78>
 800e3a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3aa:	340a      	adds	r4, #10
 800e3ac:	2509      	movs	r5, #9
 800e3ae:	e7f6      	b.n	800e39e <__s2b+0x66>
 800e3b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e3b4:	4601      	mov	r1, r0
 800e3b6:	3b30      	subs	r3, #48	@ 0x30
 800e3b8:	220a      	movs	r2, #10
 800e3ba:	4630      	mov	r0, r6
 800e3bc:	f7ff ff76 	bl	800e2ac <__multadd>
 800e3c0:	e7ee      	b.n	800e3a0 <__s2b+0x68>
 800e3c2:	bf00      	nop
 800e3c4:	08010df9 	.word	0x08010df9
 800e3c8:	08010e0a 	.word	0x08010e0a

0800e3cc <__hi0bits>:
 800e3cc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e3d0:	4603      	mov	r3, r0
 800e3d2:	bf36      	itet	cc
 800e3d4:	0403      	lslcc	r3, r0, #16
 800e3d6:	2000      	movcs	r0, #0
 800e3d8:	2010      	movcc	r0, #16
 800e3da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e3de:	bf3c      	itt	cc
 800e3e0:	021b      	lslcc	r3, r3, #8
 800e3e2:	3008      	addcc	r0, #8
 800e3e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e3e8:	bf3c      	itt	cc
 800e3ea:	011b      	lslcc	r3, r3, #4
 800e3ec:	3004      	addcc	r0, #4
 800e3ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e3f2:	bf3c      	itt	cc
 800e3f4:	009b      	lslcc	r3, r3, #2
 800e3f6:	3002      	addcc	r0, #2
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	db05      	blt.n	800e408 <__hi0bits+0x3c>
 800e3fc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e400:	f100 0001 	add.w	r0, r0, #1
 800e404:	bf08      	it	eq
 800e406:	2020      	moveq	r0, #32
 800e408:	4770      	bx	lr

0800e40a <__lo0bits>:
 800e40a:	6803      	ldr	r3, [r0, #0]
 800e40c:	4602      	mov	r2, r0
 800e40e:	f013 0007 	ands.w	r0, r3, #7
 800e412:	d00b      	beq.n	800e42c <__lo0bits+0x22>
 800e414:	07d9      	lsls	r1, r3, #31
 800e416:	d421      	bmi.n	800e45c <__lo0bits+0x52>
 800e418:	0798      	lsls	r0, r3, #30
 800e41a:	bf49      	itett	mi
 800e41c:	085b      	lsrmi	r3, r3, #1
 800e41e:	089b      	lsrpl	r3, r3, #2
 800e420:	2001      	movmi	r0, #1
 800e422:	6013      	strmi	r3, [r2, #0]
 800e424:	bf5c      	itt	pl
 800e426:	6013      	strpl	r3, [r2, #0]
 800e428:	2002      	movpl	r0, #2
 800e42a:	4770      	bx	lr
 800e42c:	b299      	uxth	r1, r3
 800e42e:	b909      	cbnz	r1, 800e434 <__lo0bits+0x2a>
 800e430:	0c1b      	lsrs	r3, r3, #16
 800e432:	2010      	movs	r0, #16
 800e434:	b2d9      	uxtb	r1, r3
 800e436:	b909      	cbnz	r1, 800e43c <__lo0bits+0x32>
 800e438:	3008      	adds	r0, #8
 800e43a:	0a1b      	lsrs	r3, r3, #8
 800e43c:	0719      	lsls	r1, r3, #28
 800e43e:	bf04      	itt	eq
 800e440:	091b      	lsreq	r3, r3, #4
 800e442:	3004      	addeq	r0, #4
 800e444:	0799      	lsls	r1, r3, #30
 800e446:	bf04      	itt	eq
 800e448:	089b      	lsreq	r3, r3, #2
 800e44a:	3002      	addeq	r0, #2
 800e44c:	07d9      	lsls	r1, r3, #31
 800e44e:	d403      	bmi.n	800e458 <__lo0bits+0x4e>
 800e450:	085b      	lsrs	r3, r3, #1
 800e452:	f100 0001 	add.w	r0, r0, #1
 800e456:	d003      	beq.n	800e460 <__lo0bits+0x56>
 800e458:	6013      	str	r3, [r2, #0]
 800e45a:	4770      	bx	lr
 800e45c:	2000      	movs	r0, #0
 800e45e:	4770      	bx	lr
 800e460:	2020      	movs	r0, #32
 800e462:	4770      	bx	lr

0800e464 <__i2b>:
 800e464:	b510      	push	{r4, lr}
 800e466:	460c      	mov	r4, r1
 800e468:	2101      	movs	r1, #1
 800e46a:	f7ff febd 	bl	800e1e8 <_Balloc>
 800e46e:	4602      	mov	r2, r0
 800e470:	b928      	cbnz	r0, 800e47e <__i2b+0x1a>
 800e472:	4b05      	ldr	r3, [pc, #20]	@ (800e488 <__i2b+0x24>)
 800e474:	4805      	ldr	r0, [pc, #20]	@ (800e48c <__i2b+0x28>)
 800e476:	f240 1145 	movw	r1, #325	@ 0x145
 800e47a:	f001 fe09 	bl	8010090 <__assert_func>
 800e47e:	2301      	movs	r3, #1
 800e480:	6144      	str	r4, [r0, #20]
 800e482:	6103      	str	r3, [r0, #16]
 800e484:	bd10      	pop	{r4, pc}
 800e486:	bf00      	nop
 800e488:	08010df9 	.word	0x08010df9
 800e48c:	08010e0a 	.word	0x08010e0a

0800e490 <__multiply>:
 800e490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e494:	4614      	mov	r4, r2
 800e496:	690a      	ldr	r2, [r1, #16]
 800e498:	6923      	ldr	r3, [r4, #16]
 800e49a:	429a      	cmp	r2, r3
 800e49c:	bfa8      	it	ge
 800e49e:	4623      	movge	r3, r4
 800e4a0:	460f      	mov	r7, r1
 800e4a2:	bfa4      	itt	ge
 800e4a4:	460c      	movge	r4, r1
 800e4a6:	461f      	movge	r7, r3
 800e4a8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e4ac:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e4b0:	68a3      	ldr	r3, [r4, #8]
 800e4b2:	6861      	ldr	r1, [r4, #4]
 800e4b4:	eb0a 0609 	add.w	r6, sl, r9
 800e4b8:	42b3      	cmp	r3, r6
 800e4ba:	b085      	sub	sp, #20
 800e4bc:	bfb8      	it	lt
 800e4be:	3101      	addlt	r1, #1
 800e4c0:	f7ff fe92 	bl	800e1e8 <_Balloc>
 800e4c4:	b930      	cbnz	r0, 800e4d4 <__multiply+0x44>
 800e4c6:	4602      	mov	r2, r0
 800e4c8:	4b44      	ldr	r3, [pc, #272]	@ (800e5dc <__multiply+0x14c>)
 800e4ca:	4845      	ldr	r0, [pc, #276]	@ (800e5e0 <__multiply+0x150>)
 800e4cc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e4d0:	f001 fdde 	bl	8010090 <__assert_func>
 800e4d4:	f100 0514 	add.w	r5, r0, #20
 800e4d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e4dc:	462b      	mov	r3, r5
 800e4de:	2200      	movs	r2, #0
 800e4e0:	4543      	cmp	r3, r8
 800e4e2:	d321      	bcc.n	800e528 <__multiply+0x98>
 800e4e4:	f107 0114 	add.w	r1, r7, #20
 800e4e8:	f104 0214 	add.w	r2, r4, #20
 800e4ec:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e4f0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e4f4:	9302      	str	r3, [sp, #8]
 800e4f6:	1b13      	subs	r3, r2, r4
 800e4f8:	3b15      	subs	r3, #21
 800e4fa:	f023 0303 	bic.w	r3, r3, #3
 800e4fe:	3304      	adds	r3, #4
 800e500:	f104 0715 	add.w	r7, r4, #21
 800e504:	42ba      	cmp	r2, r7
 800e506:	bf38      	it	cc
 800e508:	2304      	movcc	r3, #4
 800e50a:	9301      	str	r3, [sp, #4]
 800e50c:	9b02      	ldr	r3, [sp, #8]
 800e50e:	9103      	str	r1, [sp, #12]
 800e510:	428b      	cmp	r3, r1
 800e512:	d80c      	bhi.n	800e52e <__multiply+0x9e>
 800e514:	2e00      	cmp	r6, #0
 800e516:	dd03      	ble.n	800e520 <__multiply+0x90>
 800e518:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d05b      	beq.n	800e5d8 <__multiply+0x148>
 800e520:	6106      	str	r6, [r0, #16]
 800e522:	b005      	add	sp, #20
 800e524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e528:	f843 2b04 	str.w	r2, [r3], #4
 800e52c:	e7d8      	b.n	800e4e0 <__multiply+0x50>
 800e52e:	f8b1 a000 	ldrh.w	sl, [r1]
 800e532:	f1ba 0f00 	cmp.w	sl, #0
 800e536:	d024      	beq.n	800e582 <__multiply+0xf2>
 800e538:	f104 0e14 	add.w	lr, r4, #20
 800e53c:	46a9      	mov	r9, r5
 800e53e:	f04f 0c00 	mov.w	ip, #0
 800e542:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e546:	f8d9 3000 	ldr.w	r3, [r9]
 800e54a:	fa1f fb87 	uxth.w	fp, r7
 800e54e:	b29b      	uxth	r3, r3
 800e550:	fb0a 330b 	mla	r3, sl, fp, r3
 800e554:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e558:	f8d9 7000 	ldr.w	r7, [r9]
 800e55c:	4463      	add	r3, ip
 800e55e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e562:	fb0a c70b 	mla	r7, sl, fp, ip
 800e566:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e56a:	b29b      	uxth	r3, r3
 800e56c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e570:	4572      	cmp	r2, lr
 800e572:	f849 3b04 	str.w	r3, [r9], #4
 800e576:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e57a:	d8e2      	bhi.n	800e542 <__multiply+0xb2>
 800e57c:	9b01      	ldr	r3, [sp, #4]
 800e57e:	f845 c003 	str.w	ip, [r5, r3]
 800e582:	9b03      	ldr	r3, [sp, #12]
 800e584:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e588:	3104      	adds	r1, #4
 800e58a:	f1b9 0f00 	cmp.w	r9, #0
 800e58e:	d021      	beq.n	800e5d4 <__multiply+0x144>
 800e590:	682b      	ldr	r3, [r5, #0]
 800e592:	f104 0c14 	add.w	ip, r4, #20
 800e596:	46ae      	mov	lr, r5
 800e598:	f04f 0a00 	mov.w	sl, #0
 800e59c:	f8bc b000 	ldrh.w	fp, [ip]
 800e5a0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e5a4:	fb09 770b 	mla	r7, r9, fp, r7
 800e5a8:	4457      	add	r7, sl
 800e5aa:	b29b      	uxth	r3, r3
 800e5ac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e5b0:	f84e 3b04 	str.w	r3, [lr], #4
 800e5b4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e5b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e5bc:	f8be 3000 	ldrh.w	r3, [lr]
 800e5c0:	fb09 330a 	mla	r3, r9, sl, r3
 800e5c4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e5c8:	4562      	cmp	r2, ip
 800e5ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e5ce:	d8e5      	bhi.n	800e59c <__multiply+0x10c>
 800e5d0:	9f01      	ldr	r7, [sp, #4]
 800e5d2:	51eb      	str	r3, [r5, r7]
 800e5d4:	3504      	adds	r5, #4
 800e5d6:	e799      	b.n	800e50c <__multiply+0x7c>
 800e5d8:	3e01      	subs	r6, #1
 800e5da:	e79b      	b.n	800e514 <__multiply+0x84>
 800e5dc:	08010df9 	.word	0x08010df9
 800e5e0:	08010e0a 	.word	0x08010e0a

0800e5e4 <__pow5mult>:
 800e5e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5e8:	4615      	mov	r5, r2
 800e5ea:	f012 0203 	ands.w	r2, r2, #3
 800e5ee:	4607      	mov	r7, r0
 800e5f0:	460e      	mov	r6, r1
 800e5f2:	d007      	beq.n	800e604 <__pow5mult+0x20>
 800e5f4:	4c25      	ldr	r4, [pc, #148]	@ (800e68c <__pow5mult+0xa8>)
 800e5f6:	3a01      	subs	r2, #1
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e5fe:	f7ff fe55 	bl	800e2ac <__multadd>
 800e602:	4606      	mov	r6, r0
 800e604:	10ad      	asrs	r5, r5, #2
 800e606:	d03d      	beq.n	800e684 <__pow5mult+0xa0>
 800e608:	69fc      	ldr	r4, [r7, #28]
 800e60a:	b97c      	cbnz	r4, 800e62c <__pow5mult+0x48>
 800e60c:	2010      	movs	r0, #16
 800e60e:	f7ff fd35 	bl	800e07c <malloc>
 800e612:	4602      	mov	r2, r0
 800e614:	61f8      	str	r0, [r7, #28]
 800e616:	b928      	cbnz	r0, 800e624 <__pow5mult+0x40>
 800e618:	4b1d      	ldr	r3, [pc, #116]	@ (800e690 <__pow5mult+0xac>)
 800e61a:	481e      	ldr	r0, [pc, #120]	@ (800e694 <__pow5mult+0xb0>)
 800e61c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e620:	f001 fd36 	bl	8010090 <__assert_func>
 800e624:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e628:	6004      	str	r4, [r0, #0]
 800e62a:	60c4      	str	r4, [r0, #12]
 800e62c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e630:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e634:	b94c      	cbnz	r4, 800e64a <__pow5mult+0x66>
 800e636:	f240 2171 	movw	r1, #625	@ 0x271
 800e63a:	4638      	mov	r0, r7
 800e63c:	f7ff ff12 	bl	800e464 <__i2b>
 800e640:	2300      	movs	r3, #0
 800e642:	f8c8 0008 	str.w	r0, [r8, #8]
 800e646:	4604      	mov	r4, r0
 800e648:	6003      	str	r3, [r0, #0]
 800e64a:	f04f 0900 	mov.w	r9, #0
 800e64e:	07eb      	lsls	r3, r5, #31
 800e650:	d50a      	bpl.n	800e668 <__pow5mult+0x84>
 800e652:	4631      	mov	r1, r6
 800e654:	4622      	mov	r2, r4
 800e656:	4638      	mov	r0, r7
 800e658:	f7ff ff1a 	bl	800e490 <__multiply>
 800e65c:	4631      	mov	r1, r6
 800e65e:	4680      	mov	r8, r0
 800e660:	4638      	mov	r0, r7
 800e662:	f7ff fe01 	bl	800e268 <_Bfree>
 800e666:	4646      	mov	r6, r8
 800e668:	106d      	asrs	r5, r5, #1
 800e66a:	d00b      	beq.n	800e684 <__pow5mult+0xa0>
 800e66c:	6820      	ldr	r0, [r4, #0]
 800e66e:	b938      	cbnz	r0, 800e680 <__pow5mult+0x9c>
 800e670:	4622      	mov	r2, r4
 800e672:	4621      	mov	r1, r4
 800e674:	4638      	mov	r0, r7
 800e676:	f7ff ff0b 	bl	800e490 <__multiply>
 800e67a:	6020      	str	r0, [r4, #0]
 800e67c:	f8c0 9000 	str.w	r9, [r0]
 800e680:	4604      	mov	r4, r0
 800e682:	e7e4      	b.n	800e64e <__pow5mult+0x6a>
 800e684:	4630      	mov	r0, r6
 800e686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e68a:	bf00      	nop
 800e68c:	08010e64 	.word	0x08010e64
 800e690:	08010d8a 	.word	0x08010d8a
 800e694:	08010e0a 	.word	0x08010e0a

0800e698 <__lshift>:
 800e698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e69c:	460c      	mov	r4, r1
 800e69e:	6849      	ldr	r1, [r1, #4]
 800e6a0:	6923      	ldr	r3, [r4, #16]
 800e6a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e6a6:	68a3      	ldr	r3, [r4, #8]
 800e6a8:	4607      	mov	r7, r0
 800e6aa:	4691      	mov	r9, r2
 800e6ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e6b0:	f108 0601 	add.w	r6, r8, #1
 800e6b4:	42b3      	cmp	r3, r6
 800e6b6:	db0b      	blt.n	800e6d0 <__lshift+0x38>
 800e6b8:	4638      	mov	r0, r7
 800e6ba:	f7ff fd95 	bl	800e1e8 <_Balloc>
 800e6be:	4605      	mov	r5, r0
 800e6c0:	b948      	cbnz	r0, 800e6d6 <__lshift+0x3e>
 800e6c2:	4602      	mov	r2, r0
 800e6c4:	4b28      	ldr	r3, [pc, #160]	@ (800e768 <__lshift+0xd0>)
 800e6c6:	4829      	ldr	r0, [pc, #164]	@ (800e76c <__lshift+0xd4>)
 800e6c8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e6cc:	f001 fce0 	bl	8010090 <__assert_func>
 800e6d0:	3101      	adds	r1, #1
 800e6d2:	005b      	lsls	r3, r3, #1
 800e6d4:	e7ee      	b.n	800e6b4 <__lshift+0x1c>
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	f100 0114 	add.w	r1, r0, #20
 800e6dc:	f100 0210 	add.w	r2, r0, #16
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	4553      	cmp	r3, sl
 800e6e4:	db33      	blt.n	800e74e <__lshift+0xb6>
 800e6e6:	6920      	ldr	r0, [r4, #16]
 800e6e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e6ec:	f104 0314 	add.w	r3, r4, #20
 800e6f0:	f019 091f 	ands.w	r9, r9, #31
 800e6f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e6f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e6fc:	d02b      	beq.n	800e756 <__lshift+0xbe>
 800e6fe:	f1c9 0e20 	rsb	lr, r9, #32
 800e702:	468a      	mov	sl, r1
 800e704:	2200      	movs	r2, #0
 800e706:	6818      	ldr	r0, [r3, #0]
 800e708:	fa00 f009 	lsl.w	r0, r0, r9
 800e70c:	4310      	orrs	r0, r2
 800e70e:	f84a 0b04 	str.w	r0, [sl], #4
 800e712:	f853 2b04 	ldr.w	r2, [r3], #4
 800e716:	459c      	cmp	ip, r3
 800e718:	fa22 f20e 	lsr.w	r2, r2, lr
 800e71c:	d8f3      	bhi.n	800e706 <__lshift+0x6e>
 800e71e:	ebac 0304 	sub.w	r3, ip, r4
 800e722:	3b15      	subs	r3, #21
 800e724:	f023 0303 	bic.w	r3, r3, #3
 800e728:	3304      	adds	r3, #4
 800e72a:	f104 0015 	add.w	r0, r4, #21
 800e72e:	4584      	cmp	ip, r0
 800e730:	bf38      	it	cc
 800e732:	2304      	movcc	r3, #4
 800e734:	50ca      	str	r2, [r1, r3]
 800e736:	b10a      	cbz	r2, 800e73c <__lshift+0xa4>
 800e738:	f108 0602 	add.w	r6, r8, #2
 800e73c:	3e01      	subs	r6, #1
 800e73e:	4638      	mov	r0, r7
 800e740:	612e      	str	r6, [r5, #16]
 800e742:	4621      	mov	r1, r4
 800e744:	f7ff fd90 	bl	800e268 <_Bfree>
 800e748:	4628      	mov	r0, r5
 800e74a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e74e:	f842 0f04 	str.w	r0, [r2, #4]!
 800e752:	3301      	adds	r3, #1
 800e754:	e7c5      	b.n	800e6e2 <__lshift+0x4a>
 800e756:	3904      	subs	r1, #4
 800e758:	f853 2b04 	ldr.w	r2, [r3], #4
 800e75c:	f841 2f04 	str.w	r2, [r1, #4]!
 800e760:	459c      	cmp	ip, r3
 800e762:	d8f9      	bhi.n	800e758 <__lshift+0xc0>
 800e764:	e7ea      	b.n	800e73c <__lshift+0xa4>
 800e766:	bf00      	nop
 800e768:	08010df9 	.word	0x08010df9
 800e76c:	08010e0a 	.word	0x08010e0a

0800e770 <__mcmp>:
 800e770:	690a      	ldr	r2, [r1, #16]
 800e772:	4603      	mov	r3, r0
 800e774:	6900      	ldr	r0, [r0, #16]
 800e776:	1a80      	subs	r0, r0, r2
 800e778:	b530      	push	{r4, r5, lr}
 800e77a:	d10e      	bne.n	800e79a <__mcmp+0x2a>
 800e77c:	3314      	adds	r3, #20
 800e77e:	3114      	adds	r1, #20
 800e780:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e784:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e788:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e78c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e790:	4295      	cmp	r5, r2
 800e792:	d003      	beq.n	800e79c <__mcmp+0x2c>
 800e794:	d205      	bcs.n	800e7a2 <__mcmp+0x32>
 800e796:	f04f 30ff 	mov.w	r0, #4294967295
 800e79a:	bd30      	pop	{r4, r5, pc}
 800e79c:	42a3      	cmp	r3, r4
 800e79e:	d3f3      	bcc.n	800e788 <__mcmp+0x18>
 800e7a0:	e7fb      	b.n	800e79a <__mcmp+0x2a>
 800e7a2:	2001      	movs	r0, #1
 800e7a4:	e7f9      	b.n	800e79a <__mcmp+0x2a>
	...

0800e7a8 <__mdiff>:
 800e7a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7ac:	4689      	mov	r9, r1
 800e7ae:	4606      	mov	r6, r0
 800e7b0:	4611      	mov	r1, r2
 800e7b2:	4648      	mov	r0, r9
 800e7b4:	4614      	mov	r4, r2
 800e7b6:	f7ff ffdb 	bl	800e770 <__mcmp>
 800e7ba:	1e05      	subs	r5, r0, #0
 800e7bc:	d112      	bne.n	800e7e4 <__mdiff+0x3c>
 800e7be:	4629      	mov	r1, r5
 800e7c0:	4630      	mov	r0, r6
 800e7c2:	f7ff fd11 	bl	800e1e8 <_Balloc>
 800e7c6:	4602      	mov	r2, r0
 800e7c8:	b928      	cbnz	r0, 800e7d6 <__mdiff+0x2e>
 800e7ca:	4b3f      	ldr	r3, [pc, #252]	@ (800e8c8 <__mdiff+0x120>)
 800e7cc:	f240 2137 	movw	r1, #567	@ 0x237
 800e7d0:	483e      	ldr	r0, [pc, #248]	@ (800e8cc <__mdiff+0x124>)
 800e7d2:	f001 fc5d 	bl	8010090 <__assert_func>
 800e7d6:	2301      	movs	r3, #1
 800e7d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e7dc:	4610      	mov	r0, r2
 800e7de:	b003      	add	sp, #12
 800e7e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7e4:	bfbc      	itt	lt
 800e7e6:	464b      	movlt	r3, r9
 800e7e8:	46a1      	movlt	r9, r4
 800e7ea:	4630      	mov	r0, r6
 800e7ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e7f0:	bfba      	itte	lt
 800e7f2:	461c      	movlt	r4, r3
 800e7f4:	2501      	movlt	r5, #1
 800e7f6:	2500      	movge	r5, #0
 800e7f8:	f7ff fcf6 	bl	800e1e8 <_Balloc>
 800e7fc:	4602      	mov	r2, r0
 800e7fe:	b918      	cbnz	r0, 800e808 <__mdiff+0x60>
 800e800:	4b31      	ldr	r3, [pc, #196]	@ (800e8c8 <__mdiff+0x120>)
 800e802:	f240 2145 	movw	r1, #581	@ 0x245
 800e806:	e7e3      	b.n	800e7d0 <__mdiff+0x28>
 800e808:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e80c:	6926      	ldr	r6, [r4, #16]
 800e80e:	60c5      	str	r5, [r0, #12]
 800e810:	f109 0310 	add.w	r3, r9, #16
 800e814:	f109 0514 	add.w	r5, r9, #20
 800e818:	f104 0e14 	add.w	lr, r4, #20
 800e81c:	f100 0b14 	add.w	fp, r0, #20
 800e820:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e824:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e828:	9301      	str	r3, [sp, #4]
 800e82a:	46d9      	mov	r9, fp
 800e82c:	f04f 0c00 	mov.w	ip, #0
 800e830:	9b01      	ldr	r3, [sp, #4]
 800e832:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e836:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e83a:	9301      	str	r3, [sp, #4]
 800e83c:	fa1f f38a 	uxth.w	r3, sl
 800e840:	4619      	mov	r1, r3
 800e842:	b283      	uxth	r3, r0
 800e844:	1acb      	subs	r3, r1, r3
 800e846:	0c00      	lsrs	r0, r0, #16
 800e848:	4463      	add	r3, ip
 800e84a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e84e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e852:	b29b      	uxth	r3, r3
 800e854:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e858:	4576      	cmp	r6, lr
 800e85a:	f849 3b04 	str.w	r3, [r9], #4
 800e85e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e862:	d8e5      	bhi.n	800e830 <__mdiff+0x88>
 800e864:	1b33      	subs	r3, r6, r4
 800e866:	3b15      	subs	r3, #21
 800e868:	f023 0303 	bic.w	r3, r3, #3
 800e86c:	3415      	adds	r4, #21
 800e86e:	3304      	adds	r3, #4
 800e870:	42a6      	cmp	r6, r4
 800e872:	bf38      	it	cc
 800e874:	2304      	movcc	r3, #4
 800e876:	441d      	add	r5, r3
 800e878:	445b      	add	r3, fp
 800e87a:	461e      	mov	r6, r3
 800e87c:	462c      	mov	r4, r5
 800e87e:	4544      	cmp	r4, r8
 800e880:	d30e      	bcc.n	800e8a0 <__mdiff+0xf8>
 800e882:	f108 0103 	add.w	r1, r8, #3
 800e886:	1b49      	subs	r1, r1, r5
 800e888:	f021 0103 	bic.w	r1, r1, #3
 800e88c:	3d03      	subs	r5, #3
 800e88e:	45a8      	cmp	r8, r5
 800e890:	bf38      	it	cc
 800e892:	2100      	movcc	r1, #0
 800e894:	440b      	add	r3, r1
 800e896:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e89a:	b191      	cbz	r1, 800e8c2 <__mdiff+0x11a>
 800e89c:	6117      	str	r7, [r2, #16]
 800e89e:	e79d      	b.n	800e7dc <__mdiff+0x34>
 800e8a0:	f854 1b04 	ldr.w	r1, [r4], #4
 800e8a4:	46e6      	mov	lr, ip
 800e8a6:	0c08      	lsrs	r0, r1, #16
 800e8a8:	fa1c fc81 	uxtah	ip, ip, r1
 800e8ac:	4471      	add	r1, lr
 800e8ae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e8b2:	b289      	uxth	r1, r1
 800e8b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e8b8:	f846 1b04 	str.w	r1, [r6], #4
 800e8bc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e8c0:	e7dd      	b.n	800e87e <__mdiff+0xd6>
 800e8c2:	3f01      	subs	r7, #1
 800e8c4:	e7e7      	b.n	800e896 <__mdiff+0xee>
 800e8c6:	bf00      	nop
 800e8c8:	08010df9 	.word	0x08010df9
 800e8cc:	08010e0a 	.word	0x08010e0a

0800e8d0 <__ulp>:
 800e8d0:	b082      	sub	sp, #8
 800e8d2:	ed8d 0b00 	vstr	d0, [sp]
 800e8d6:	9a01      	ldr	r2, [sp, #4]
 800e8d8:	4b0f      	ldr	r3, [pc, #60]	@ (800e918 <__ulp+0x48>)
 800e8da:	4013      	ands	r3, r2
 800e8dc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	dc08      	bgt.n	800e8f6 <__ulp+0x26>
 800e8e4:	425b      	negs	r3, r3
 800e8e6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e8ea:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e8ee:	da04      	bge.n	800e8fa <__ulp+0x2a>
 800e8f0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e8f4:	4113      	asrs	r3, r2
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	e008      	b.n	800e90c <__ulp+0x3c>
 800e8fa:	f1a2 0314 	sub.w	r3, r2, #20
 800e8fe:	2b1e      	cmp	r3, #30
 800e900:	bfda      	itte	le
 800e902:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e906:	40da      	lsrle	r2, r3
 800e908:	2201      	movgt	r2, #1
 800e90a:	2300      	movs	r3, #0
 800e90c:	4619      	mov	r1, r3
 800e90e:	4610      	mov	r0, r2
 800e910:	ec41 0b10 	vmov	d0, r0, r1
 800e914:	b002      	add	sp, #8
 800e916:	4770      	bx	lr
 800e918:	7ff00000 	.word	0x7ff00000

0800e91c <__b2d>:
 800e91c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e920:	6906      	ldr	r6, [r0, #16]
 800e922:	f100 0814 	add.w	r8, r0, #20
 800e926:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e92a:	1f37      	subs	r7, r6, #4
 800e92c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e930:	4610      	mov	r0, r2
 800e932:	f7ff fd4b 	bl	800e3cc <__hi0bits>
 800e936:	f1c0 0320 	rsb	r3, r0, #32
 800e93a:	280a      	cmp	r0, #10
 800e93c:	600b      	str	r3, [r1, #0]
 800e93e:	491b      	ldr	r1, [pc, #108]	@ (800e9ac <__b2d+0x90>)
 800e940:	dc15      	bgt.n	800e96e <__b2d+0x52>
 800e942:	f1c0 0c0b 	rsb	ip, r0, #11
 800e946:	fa22 f30c 	lsr.w	r3, r2, ip
 800e94a:	45b8      	cmp	r8, r7
 800e94c:	ea43 0501 	orr.w	r5, r3, r1
 800e950:	bf34      	ite	cc
 800e952:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e956:	2300      	movcs	r3, #0
 800e958:	3015      	adds	r0, #21
 800e95a:	fa02 f000 	lsl.w	r0, r2, r0
 800e95e:	fa23 f30c 	lsr.w	r3, r3, ip
 800e962:	4303      	orrs	r3, r0
 800e964:	461c      	mov	r4, r3
 800e966:	ec45 4b10 	vmov	d0, r4, r5
 800e96a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e96e:	45b8      	cmp	r8, r7
 800e970:	bf3a      	itte	cc
 800e972:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e976:	f1a6 0708 	subcc.w	r7, r6, #8
 800e97a:	2300      	movcs	r3, #0
 800e97c:	380b      	subs	r0, #11
 800e97e:	d012      	beq.n	800e9a6 <__b2d+0x8a>
 800e980:	f1c0 0120 	rsb	r1, r0, #32
 800e984:	fa23 f401 	lsr.w	r4, r3, r1
 800e988:	4082      	lsls	r2, r0
 800e98a:	4322      	orrs	r2, r4
 800e98c:	4547      	cmp	r7, r8
 800e98e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e992:	bf8c      	ite	hi
 800e994:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e998:	2200      	movls	r2, #0
 800e99a:	4083      	lsls	r3, r0
 800e99c:	40ca      	lsrs	r2, r1
 800e99e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e9a2:	4313      	orrs	r3, r2
 800e9a4:	e7de      	b.n	800e964 <__b2d+0x48>
 800e9a6:	ea42 0501 	orr.w	r5, r2, r1
 800e9aa:	e7db      	b.n	800e964 <__b2d+0x48>
 800e9ac:	3ff00000 	.word	0x3ff00000

0800e9b0 <__d2b>:
 800e9b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e9b4:	460f      	mov	r7, r1
 800e9b6:	2101      	movs	r1, #1
 800e9b8:	ec59 8b10 	vmov	r8, r9, d0
 800e9bc:	4616      	mov	r6, r2
 800e9be:	f7ff fc13 	bl	800e1e8 <_Balloc>
 800e9c2:	4604      	mov	r4, r0
 800e9c4:	b930      	cbnz	r0, 800e9d4 <__d2b+0x24>
 800e9c6:	4602      	mov	r2, r0
 800e9c8:	4b23      	ldr	r3, [pc, #140]	@ (800ea58 <__d2b+0xa8>)
 800e9ca:	4824      	ldr	r0, [pc, #144]	@ (800ea5c <__d2b+0xac>)
 800e9cc:	f240 310f 	movw	r1, #783	@ 0x30f
 800e9d0:	f001 fb5e 	bl	8010090 <__assert_func>
 800e9d4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e9d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e9dc:	b10d      	cbz	r5, 800e9e2 <__d2b+0x32>
 800e9de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e9e2:	9301      	str	r3, [sp, #4]
 800e9e4:	f1b8 0300 	subs.w	r3, r8, #0
 800e9e8:	d023      	beq.n	800ea32 <__d2b+0x82>
 800e9ea:	4668      	mov	r0, sp
 800e9ec:	9300      	str	r3, [sp, #0]
 800e9ee:	f7ff fd0c 	bl	800e40a <__lo0bits>
 800e9f2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e9f6:	b1d0      	cbz	r0, 800ea2e <__d2b+0x7e>
 800e9f8:	f1c0 0320 	rsb	r3, r0, #32
 800e9fc:	fa02 f303 	lsl.w	r3, r2, r3
 800ea00:	430b      	orrs	r3, r1
 800ea02:	40c2      	lsrs	r2, r0
 800ea04:	6163      	str	r3, [r4, #20]
 800ea06:	9201      	str	r2, [sp, #4]
 800ea08:	9b01      	ldr	r3, [sp, #4]
 800ea0a:	61a3      	str	r3, [r4, #24]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	bf0c      	ite	eq
 800ea10:	2201      	moveq	r2, #1
 800ea12:	2202      	movne	r2, #2
 800ea14:	6122      	str	r2, [r4, #16]
 800ea16:	b1a5      	cbz	r5, 800ea42 <__d2b+0x92>
 800ea18:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ea1c:	4405      	add	r5, r0
 800ea1e:	603d      	str	r5, [r7, #0]
 800ea20:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ea24:	6030      	str	r0, [r6, #0]
 800ea26:	4620      	mov	r0, r4
 800ea28:	b003      	add	sp, #12
 800ea2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea2e:	6161      	str	r1, [r4, #20]
 800ea30:	e7ea      	b.n	800ea08 <__d2b+0x58>
 800ea32:	a801      	add	r0, sp, #4
 800ea34:	f7ff fce9 	bl	800e40a <__lo0bits>
 800ea38:	9b01      	ldr	r3, [sp, #4]
 800ea3a:	6163      	str	r3, [r4, #20]
 800ea3c:	3020      	adds	r0, #32
 800ea3e:	2201      	movs	r2, #1
 800ea40:	e7e8      	b.n	800ea14 <__d2b+0x64>
 800ea42:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ea46:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ea4a:	6038      	str	r0, [r7, #0]
 800ea4c:	6918      	ldr	r0, [r3, #16]
 800ea4e:	f7ff fcbd 	bl	800e3cc <__hi0bits>
 800ea52:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ea56:	e7e5      	b.n	800ea24 <__d2b+0x74>
 800ea58:	08010df9 	.word	0x08010df9
 800ea5c:	08010e0a 	.word	0x08010e0a

0800ea60 <__ratio>:
 800ea60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea64:	b085      	sub	sp, #20
 800ea66:	e9cd 1000 	strd	r1, r0, [sp]
 800ea6a:	a902      	add	r1, sp, #8
 800ea6c:	f7ff ff56 	bl	800e91c <__b2d>
 800ea70:	9800      	ldr	r0, [sp, #0]
 800ea72:	a903      	add	r1, sp, #12
 800ea74:	ec55 4b10 	vmov	r4, r5, d0
 800ea78:	f7ff ff50 	bl	800e91c <__b2d>
 800ea7c:	9b01      	ldr	r3, [sp, #4]
 800ea7e:	6919      	ldr	r1, [r3, #16]
 800ea80:	9b00      	ldr	r3, [sp, #0]
 800ea82:	691b      	ldr	r3, [r3, #16]
 800ea84:	1ac9      	subs	r1, r1, r3
 800ea86:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ea8a:	1a9b      	subs	r3, r3, r2
 800ea8c:	ec5b ab10 	vmov	sl, fp, d0
 800ea90:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	bfce      	itee	gt
 800ea98:	462a      	movgt	r2, r5
 800ea9a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ea9e:	465a      	movle	r2, fp
 800eaa0:	462f      	mov	r7, r5
 800eaa2:	46d9      	mov	r9, fp
 800eaa4:	bfcc      	ite	gt
 800eaa6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800eaaa:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800eaae:	464b      	mov	r3, r9
 800eab0:	4652      	mov	r2, sl
 800eab2:	4620      	mov	r0, r4
 800eab4:	4639      	mov	r1, r7
 800eab6:	f7f1 fee9 	bl	800088c <__aeabi_ddiv>
 800eaba:	ec41 0b10 	vmov	d0, r0, r1
 800eabe:	b005      	add	sp, #20
 800eac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800eac4 <__copybits>:
 800eac4:	3901      	subs	r1, #1
 800eac6:	b570      	push	{r4, r5, r6, lr}
 800eac8:	1149      	asrs	r1, r1, #5
 800eaca:	6914      	ldr	r4, [r2, #16]
 800eacc:	3101      	adds	r1, #1
 800eace:	f102 0314 	add.w	r3, r2, #20
 800ead2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ead6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800eada:	1f05      	subs	r5, r0, #4
 800eadc:	42a3      	cmp	r3, r4
 800eade:	d30c      	bcc.n	800eafa <__copybits+0x36>
 800eae0:	1aa3      	subs	r3, r4, r2
 800eae2:	3b11      	subs	r3, #17
 800eae4:	f023 0303 	bic.w	r3, r3, #3
 800eae8:	3211      	adds	r2, #17
 800eaea:	42a2      	cmp	r2, r4
 800eaec:	bf88      	it	hi
 800eaee:	2300      	movhi	r3, #0
 800eaf0:	4418      	add	r0, r3
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	4288      	cmp	r0, r1
 800eaf6:	d305      	bcc.n	800eb04 <__copybits+0x40>
 800eaf8:	bd70      	pop	{r4, r5, r6, pc}
 800eafa:	f853 6b04 	ldr.w	r6, [r3], #4
 800eafe:	f845 6f04 	str.w	r6, [r5, #4]!
 800eb02:	e7eb      	b.n	800eadc <__copybits+0x18>
 800eb04:	f840 3b04 	str.w	r3, [r0], #4
 800eb08:	e7f4      	b.n	800eaf4 <__copybits+0x30>

0800eb0a <__any_on>:
 800eb0a:	f100 0214 	add.w	r2, r0, #20
 800eb0e:	6900      	ldr	r0, [r0, #16]
 800eb10:	114b      	asrs	r3, r1, #5
 800eb12:	4298      	cmp	r0, r3
 800eb14:	b510      	push	{r4, lr}
 800eb16:	db11      	blt.n	800eb3c <__any_on+0x32>
 800eb18:	dd0a      	ble.n	800eb30 <__any_on+0x26>
 800eb1a:	f011 011f 	ands.w	r1, r1, #31
 800eb1e:	d007      	beq.n	800eb30 <__any_on+0x26>
 800eb20:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800eb24:	fa24 f001 	lsr.w	r0, r4, r1
 800eb28:	fa00 f101 	lsl.w	r1, r0, r1
 800eb2c:	428c      	cmp	r4, r1
 800eb2e:	d10b      	bne.n	800eb48 <__any_on+0x3e>
 800eb30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800eb34:	4293      	cmp	r3, r2
 800eb36:	d803      	bhi.n	800eb40 <__any_on+0x36>
 800eb38:	2000      	movs	r0, #0
 800eb3a:	bd10      	pop	{r4, pc}
 800eb3c:	4603      	mov	r3, r0
 800eb3e:	e7f7      	b.n	800eb30 <__any_on+0x26>
 800eb40:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800eb44:	2900      	cmp	r1, #0
 800eb46:	d0f5      	beq.n	800eb34 <__any_on+0x2a>
 800eb48:	2001      	movs	r0, #1
 800eb4a:	e7f6      	b.n	800eb3a <__any_on+0x30>

0800eb4c <sulp>:
 800eb4c:	b570      	push	{r4, r5, r6, lr}
 800eb4e:	4604      	mov	r4, r0
 800eb50:	460d      	mov	r5, r1
 800eb52:	ec45 4b10 	vmov	d0, r4, r5
 800eb56:	4616      	mov	r6, r2
 800eb58:	f7ff feba 	bl	800e8d0 <__ulp>
 800eb5c:	ec51 0b10 	vmov	r0, r1, d0
 800eb60:	b17e      	cbz	r6, 800eb82 <sulp+0x36>
 800eb62:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800eb66:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	dd09      	ble.n	800eb82 <sulp+0x36>
 800eb6e:	051b      	lsls	r3, r3, #20
 800eb70:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800eb74:	2400      	movs	r4, #0
 800eb76:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800eb7a:	4622      	mov	r2, r4
 800eb7c:	462b      	mov	r3, r5
 800eb7e:	f7f1 fd5b 	bl	8000638 <__aeabi_dmul>
 800eb82:	ec41 0b10 	vmov	d0, r0, r1
 800eb86:	bd70      	pop	{r4, r5, r6, pc}

0800eb88 <_strtod_l>:
 800eb88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb8c:	b09f      	sub	sp, #124	@ 0x7c
 800eb8e:	460c      	mov	r4, r1
 800eb90:	9217      	str	r2, [sp, #92]	@ 0x5c
 800eb92:	2200      	movs	r2, #0
 800eb94:	921a      	str	r2, [sp, #104]	@ 0x68
 800eb96:	9005      	str	r0, [sp, #20]
 800eb98:	f04f 0a00 	mov.w	sl, #0
 800eb9c:	f04f 0b00 	mov.w	fp, #0
 800eba0:	460a      	mov	r2, r1
 800eba2:	9219      	str	r2, [sp, #100]	@ 0x64
 800eba4:	7811      	ldrb	r1, [r2, #0]
 800eba6:	292b      	cmp	r1, #43	@ 0x2b
 800eba8:	d04a      	beq.n	800ec40 <_strtod_l+0xb8>
 800ebaa:	d838      	bhi.n	800ec1e <_strtod_l+0x96>
 800ebac:	290d      	cmp	r1, #13
 800ebae:	d832      	bhi.n	800ec16 <_strtod_l+0x8e>
 800ebb0:	2908      	cmp	r1, #8
 800ebb2:	d832      	bhi.n	800ec1a <_strtod_l+0x92>
 800ebb4:	2900      	cmp	r1, #0
 800ebb6:	d03b      	beq.n	800ec30 <_strtod_l+0xa8>
 800ebb8:	2200      	movs	r2, #0
 800ebba:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ebbc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ebbe:	782a      	ldrb	r2, [r5, #0]
 800ebc0:	2a30      	cmp	r2, #48	@ 0x30
 800ebc2:	f040 80b3 	bne.w	800ed2c <_strtod_l+0x1a4>
 800ebc6:	786a      	ldrb	r2, [r5, #1]
 800ebc8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ebcc:	2a58      	cmp	r2, #88	@ 0x58
 800ebce:	d16e      	bne.n	800ecae <_strtod_l+0x126>
 800ebd0:	9302      	str	r3, [sp, #8]
 800ebd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ebd4:	9301      	str	r3, [sp, #4]
 800ebd6:	ab1a      	add	r3, sp, #104	@ 0x68
 800ebd8:	9300      	str	r3, [sp, #0]
 800ebda:	4a8e      	ldr	r2, [pc, #568]	@ (800ee14 <_strtod_l+0x28c>)
 800ebdc:	9805      	ldr	r0, [sp, #20]
 800ebde:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ebe0:	a919      	add	r1, sp, #100	@ 0x64
 800ebe2:	f001 faef 	bl	80101c4 <__gethex>
 800ebe6:	f010 060f 	ands.w	r6, r0, #15
 800ebea:	4604      	mov	r4, r0
 800ebec:	d005      	beq.n	800ebfa <_strtod_l+0x72>
 800ebee:	2e06      	cmp	r6, #6
 800ebf0:	d128      	bne.n	800ec44 <_strtod_l+0xbc>
 800ebf2:	3501      	adds	r5, #1
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	9519      	str	r5, [sp, #100]	@ 0x64
 800ebf8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ebfa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	f040 858e 	bne.w	800f71e <_strtod_l+0xb96>
 800ec02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ec04:	b1cb      	cbz	r3, 800ec3a <_strtod_l+0xb2>
 800ec06:	4652      	mov	r2, sl
 800ec08:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ec0c:	ec43 2b10 	vmov	d0, r2, r3
 800ec10:	b01f      	add	sp, #124	@ 0x7c
 800ec12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec16:	2920      	cmp	r1, #32
 800ec18:	d1ce      	bne.n	800ebb8 <_strtod_l+0x30>
 800ec1a:	3201      	adds	r2, #1
 800ec1c:	e7c1      	b.n	800eba2 <_strtod_l+0x1a>
 800ec1e:	292d      	cmp	r1, #45	@ 0x2d
 800ec20:	d1ca      	bne.n	800ebb8 <_strtod_l+0x30>
 800ec22:	2101      	movs	r1, #1
 800ec24:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ec26:	1c51      	adds	r1, r2, #1
 800ec28:	9119      	str	r1, [sp, #100]	@ 0x64
 800ec2a:	7852      	ldrb	r2, [r2, #1]
 800ec2c:	2a00      	cmp	r2, #0
 800ec2e:	d1c5      	bne.n	800ebbc <_strtod_l+0x34>
 800ec30:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ec32:	9419      	str	r4, [sp, #100]	@ 0x64
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	f040 8570 	bne.w	800f71a <_strtod_l+0xb92>
 800ec3a:	4652      	mov	r2, sl
 800ec3c:	465b      	mov	r3, fp
 800ec3e:	e7e5      	b.n	800ec0c <_strtod_l+0x84>
 800ec40:	2100      	movs	r1, #0
 800ec42:	e7ef      	b.n	800ec24 <_strtod_l+0x9c>
 800ec44:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ec46:	b13a      	cbz	r2, 800ec58 <_strtod_l+0xd0>
 800ec48:	2135      	movs	r1, #53	@ 0x35
 800ec4a:	a81c      	add	r0, sp, #112	@ 0x70
 800ec4c:	f7ff ff3a 	bl	800eac4 <__copybits>
 800ec50:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ec52:	9805      	ldr	r0, [sp, #20]
 800ec54:	f7ff fb08 	bl	800e268 <_Bfree>
 800ec58:	3e01      	subs	r6, #1
 800ec5a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ec5c:	2e04      	cmp	r6, #4
 800ec5e:	d806      	bhi.n	800ec6e <_strtod_l+0xe6>
 800ec60:	e8df f006 	tbb	[pc, r6]
 800ec64:	201d0314 	.word	0x201d0314
 800ec68:	14          	.byte	0x14
 800ec69:	00          	.byte	0x00
 800ec6a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ec6e:	05e1      	lsls	r1, r4, #23
 800ec70:	bf48      	it	mi
 800ec72:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ec76:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ec7a:	0d1b      	lsrs	r3, r3, #20
 800ec7c:	051b      	lsls	r3, r3, #20
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d1bb      	bne.n	800ebfa <_strtod_l+0x72>
 800ec82:	f7fe fb2f 	bl	800d2e4 <__errno>
 800ec86:	2322      	movs	r3, #34	@ 0x22
 800ec88:	6003      	str	r3, [r0, #0]
 800ec8a:	e7b6      	b.n	800ebfa <_strtod_l+0x72>
 800ec8c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ec90:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ec94:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ec98:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ec9c:	e7e7      	b.n	800ec6e <_strtod_l+0xe6>
 800ec9e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800ee1c <_strtod_l+0x294>
 800eca2:	e7e4      	b.n	800ec6e <_strtod_l+0xe6>
 800eca4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800eca8:	f04f 3aff 	mov.w	sl, #4294967295
 800ecac:	e7df      	b.n	800ec6e <_strtod_l+0xe6>
 800ecae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ecb0:	1c5a      	adds	r2, r3, #1
 800ecb2:	9219      	str	r2, [sp, #100]	@ 0x64
 800ecb4:	785b      	ldrb	r3, [r3, #1]
 800ecb6:	2b30      	cmp	r3, #48	@ 0x30
 800ecb8:	d0f9      	beq.n	800ecae <_strtod_l+0x126>
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d09d      	beq.n	800ebfa <_strtod_l+0x72>
 800ecbe:	2301      	movs	r3, #1
 800ecc0:	9309      	str	r3, [sp, #36]	@ 0x24
 800ecc2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ecc4:	930c      	str	r3, [sp, #48]	@ 0x30
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	9308      	str	r3, [sp, #32]
 800ecca:	930a      	str	r3, [sp, #40]	@ 0x28
 800eccc:	461f      	mov	r7, r3
 800ecce:	220a      	movs	r2, #10
 800ecd0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ecd2:	7805      	ldrb	r5, [r0, #0]
 800ecd4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ecd8:	b2d9      	uxtb	r1, r3
 800ecda:	2909      	cmp	r1, #9
 800ecdc:	d928      	bls.n	800ed30 <_strtod_l+0x1a8>
 800ecde:	494e      	ldr	r1, [pc, #312]	@ (800ee18 <_strtod_l+0x290>)
 800ece0:	2201      	movs	r2, #1
 800ece2:	f001 f979 	bl	800ffd8 <strncmp>
 800ece6:	2800      	cmp	r0, #0
 800ece8:	d032      	beq.n	800ed50 <_strtod_l+0x1c8>
 800ecea:	2000      	movs	r0, #0
 800ecec:	462a      	mov	r2, r5
 800ecee:	4681      	mov	r9, r0
 800ecf0:	463d      	mov	r5, r7
 800ecf2:	4603      	mov	r3, r0
 800ecf4:	2a65      	cmp	r2, #101	@ 0x65
 800ecf6:	d001      	beq.n	800ecfc <_strtod_l+0x174>
 800ecf8:	2a45      	cmp	r2, #69	@ 0x45
 800ecfa:	d114      	bne.n	800ed26 <_strtod_l+0x19e>
 800ecfc:	b91d      	cbnz	r5, 800ed06 <_strtod_l+0x17e>
 800ecfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ed00:	4302      	orrs	r2, r0
 800ed02:	d095      	beq.n	800ec30 <_strtod_l+0xa8>
 800ed04:	2500      	movs	r5, #0
 800ed06:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ed08:	1c62      	adds	r2, r4, #1
 800ed0a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ed0c:	7862      	ldrb	r2, [r4, #1]
 800ed0e:	2a2b      	cmp	r2, #43	@ 0x2b
 800ed10:	d077      	beq.n	800ee02 <_strtod_l+0x27a>
 800ed12:	2a2d      	cmp	r2, #45	@ 0x2d
 800ed14:	d07b      	beq.n	800ee0e <_strtod_l+0x286>
 800ed16:	f04f 0c00 	mov.w	ip, #0
 800ed1a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ed1e:	2909      	cmp	r1, #9
 800ed20:	f240 8082 	bls.w	800ee28 <_strtod_l+0x2a0>
 800ed24:	9419      	str	r4, [sp, #100]	@ 0x64
 800ed26:	f04f 0800 	mov.w	r8, #0
 800ed2a:	e0a2      	b.n	800ee72 <_strtod_l+0x2ea>
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	e7c7      	b.n	800ecc0 <_strtod_l+0x138>
 800ed30:	2f08      	cmp	r7, #8
 800ed32:	bfd5      	itete	le
 800ed34:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800ed36:	9908      	ldrgt	r1, [sp, #32]
 800ed38:	fb02 3301 	mlale	r3, r2, r1, r3
 800ed3c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ed40:	f100 0001 	add.w	r0, r0, #1
 800ed44:	bfd4      	ite	le
 800ed46:	930a      	strle	r3, [sp, #40]	@ 0x28
 800ed48:	9308      	strgt	r3, [sp, #32]
 800ed4a:	3701      	adds	r7, #1
 800ed4c:	9019      	str	r0, [sp, #100]	@ 0x64
 800ed4e:	e7bf      	b.n	800ecd0 <_strtod_l+0x148>
 800ed50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ed52:	1c5a      	adds	r2, r3, #1
 800ed54:	9219      	str	r2, [sp, #100]	@ 0x64
 800ed56:	785a      	ldrb	r2, [r3, #1]
 800ed58:	b37f      	cbz	r7, 800edba <_strtod_l+0x232>
 800ed5a:	4681      	mov	r9, r0
 800ed5c:	463d      	mov	r5, r7
 800ed5e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ed62:	2b09      	cmp	r3, #9
 800ed64:	d912      	bls.n	800ed8c <_strtod_l+0x204>
 800ed66:	2301      	movs	r3, #1
 800ed68:	e7c4      	b.n	800ecf4 <_strtod_l+0x16c>
 800ed6a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ed6c:	1c5a      	adds	r2, r3, #1
 800ed6e:	9219      	str	r2, [sp, #100]	@ 0x64
 800ed70:	785a      	ldrb	r2, [r3, #1]
 800ed72:	3001      	adds	r0, #1
 800ed74:	2a30      	cmp	r2, #48	@ 0x30
 800ed76:	d0f8      	beq.n	800ed6a <_strtod_l+0x1e2>
 800ed78:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ed7c:	2b08      	cmp	r3, #8
 800ed7e:	f200 84d3 	bhi.w	800f728 <_strtod_l+0xba0>
 800ed82:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ed84:	930c      	str	r3, [sp, #48]	@ 0x30
 800ed86:	4681      	mov	r9, r0
 800ed88:	2000      	movs	r0, #0
 800ed8a:	4605      	mov	r5, r0
 800ed8c:	3a30      	subs	r2, #48	@ 0x30
 800ed8e:	f100 0301 	add.w	r3, r0, #1
 800ed92:	d02a      	beq.n	800edea <_strtod_l+0x262>
 800ed94:	4499      	add	r9, r3
 800ed96:	eb00 0c05 	add.w	ip, r0, r5
 800ed9a:	462b      	mov	r3, r5
 800ed9c:	210a      	movs	r1, #10
 800ed9e:	4563      	cmp	r3, ip
 800eda0:	d10d      	bne.n	800edbe <_strtod_l+0x236>
 800eda2:	1c69      	adds	r1, r5, #1
 800eda4:	4401      	add	r1, r0
 800eda6:	4428      	add	r0, r5
 800eda8:	2808      	cmp	r0, #8
 800edaa:	dc16      	bgt.n	800edda <_strtod_l+0x252>
 800edac:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800edae:	230a      	movs	r3, #10
 800edb0:	fb03 2300 	mla	r3, r3, r0, r2
 800edb4:	930a      	str	r3, [sp, #40]	@ 0x28
 800edb6:	2300      	movs	r3, #0
 800edb8:	e018      	b.n	800edec <_strtod_l+0x264>
 800edba:	4638      	mov	r0, r7
 800edbc:	e7da      	b.n	800ed74 <_strtod_l+0x1ec>
 800edbe:	2b08      	cmp	r3, #8
 800edc0:	f103 0301 	add.w	r3, r3, #1
 800edc4:	dc03      	bgt.n	800edce <_strtod_l+0x246>
 800edc6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800edc8:	434e      	muls	r6, r1
 800edca:	960a      	str	r6, [sp, #40]	@ 0x28
 800edcc:	e7e7      	b.n	800ed9e <_strtod_l+0x216>
 800edce:	2b10      	cmp	r3, #16
 800edd0:	bfde      	ittt	le
 800edd2:	9e08      	ldrle	r6, [sp, #32]
 800edd4:	434e      	mulle	r6, r1
 800edd6:	9608      	strle	r6, [sp, #32]
 800edd8:	e7e1      	b.n	800ed9e <_strtod_l+0x216>
 800edda:	280f      	cmp	r0, #15
 800eddc:	dceb      	bgt.n	800edb6 <_strtod_l+0x22e>
 800edde:	9808      	ldr	r0, [sp, #32]
 800ede0:	230a      	movs	r3, #10
 800ede2:	fb03 2300 	mla	r3, r3, r0, r2
 800ede6:	9308      	str	r3, [sp, #32]
 800ede8:	e7e5      	b.n	800edb6 <_strtod_l+0x22e>
 800edea:	4629      	mov	r1, r5
 800edec:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800edee:	1c50      	adds	r0, r2, #1
 800edf0:	9019      	str	r0, [sp, #100]	@ 0x64
 800edf2:	7852      	ldrb	r2, [r2, #1]
 800edf4:	4618      	mov	r0, r3
 800edf6:	460d      	mov	r5, r1
 800edf8:	e7b1      	b.n	800ed5e <_strtod_l+0x1d6>
 800edfa:	f04f 0900 	mov.w	r9, #0
 800edfe:	2301      	movs	r3, #1
 800ee00:	e77d      	b.n	800ecfe <_strtod_l+0x176>
 800ee02:	f04f 0c00 	mov.w	ip, #0
 800ee06:	1ca2      	adds	r2, r4, #2
 800ee08:	9219      	str	r2, [sp, #100]	@ 0x64
 800ee0a:	78a2      	ldrb	r2, [r4, #2]
 800ee0c:	e785      	b.n	800ed1a <_strtod_l+0x192>
 800ee0e:	f04f 0c01 	mov.w	ip, #1
 800ee12:	e7f8      	b.n	800ee06 <_strtod_l+0x27e>
 800ee14:	08010f78 	.word	0x08010f78
 800ee18:	08010f60 	.word	0x08010f60
 800ee1c:	7ff00000 	.word	0x7ff00000
 800ee20:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ee22:	1c51      	adds	r1, r2, #1
 800ee24:	9119      	str	r1, [sp, #100]	@ 0x64
 800ee26:	7852      	ldrb	r2, [r2, #1]
 800ee28:	2a30      	cmp	r2, #48	@ 0x30
 800ee2a:	d0f9      	beq.n	800ee20 <_strtod_l+0x298>
 800ee2c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ee30:	2908      	cmp	r1, #8
 800ee32:	f63f af78 	bhi.w	800ed26 <_strtod_l+0x19e>
 800ee36:	3a30      	subs	r2, #48	@ 0x30
 800ee38:	920e      	str	r2, [sp, #56]	@ 0x38
 800ee3a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ee3c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ee3e:	f04f 080a 	mov.w	r8, #10
 800ee42:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ee44:	1c56      	adds	r6, r2, #1
 800ee46:	9619      	str	r6, [sp, #100]	@ 0x64
 800ee48:	7852      	ldrb	r2, [r2, #1]
 800ee4a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ee4e:	f1be 0f09 	cmp.w	lr, #9
 800ee52:	d939      	bls.n	800eec8 <_strtod_l+0x340>
 800ee54:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ee56:	1a76      	subs	r6, r6, r1
 800ee58:	2e08      	cmp	r6, #8
 800ee5a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ee5e:	dc03      	bgt.n	800ee68 <_strtod_l+0x2e0>
 800ee60:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ee62:	4588      	cmp	r8, r1
 800ee64:	bfa8      	it	ge
 800ee66:	4688      	movge	r8, r1
 800ee68:	f1bc 0f00 	cmp.w	ip, #0
 800ee6c:	d001      	beq.n	800ee72 <_strtod_l+0x2ea>
 800ee6e:	f1c8 0800 	rsb	r8, r8, #0
 800ee72:	2d00      	cmp	r5, #0
 800ee74:	d14e      	bne.n	800ef14 <_strtod_l+0x38c>
 800ee76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ee78:	4308      	orrs	r0, r1
 800ee7a:	f47f aebe 	bne.w	800ebfa <_strtod_l+0x72>
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	f47f aed6 	bne.w	800ec30 <_strtod_l+0xa8>
 800ee84:	2a69      	cmp	r2, #105	@ 0x69
 800ee86:	d028      	beq.n	800eeda <_strtod_l+0x352>
 800ee88:	dc25      	bgt.n	800eed6 <_strtod_l+0x34e>
 800ee8a:	2a49      	cmp	r2, #73	@ 0x49
 800ee8c:	d025      	beq.n	800eeda <_strtod_l+0x352>
 800ee8e:	2a4e      	cmp	r2, #78	@ 0x4e
 800ee90:	f47f aece 	bne.w	800ec30 <_strtod_l+0xa8>
 800ee94:	499b      	ldr	r1, [pc, #620]	@ (800f104 <_strtod_l+0x57c>)
 800ee96:	a819      	add	r0, sp, #100	@ 0x64
 800ee98:	f001 fbb6 	bl	8010608 <__match>
 800ee9c:	2800      	cmp	r0, #0
 800ee9e:	f43f aec7 	beq.w	800ec30 <_strtod_l+0xa8>
 800eea2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eea4:	781b      	ldrb	r3, [r3, #0]
 800eea6:	2b28      	cmp	r3, #40	@ 0x28
 800eea8:	d12e      	bne.n	800ef08 <_strtod_l+0x380>
 800eeaa:	4997      	ldr	r1, [pc, #604]	@ (800f108 <_strtod_l+0x580>)
 800eeac:	aa1c      	add	r2, sp, #112	@ 0x70
 800eeae:	a819      	add	r0, sp, #100	@ 0x64
 800eeb0:	f001 fbbe 	bl	8010630 <__hexnan>
 800eeb4:	2805      	cmp	r0, #5
 800eeb6:	d127      	bne.n	800ef08 <_strtod_l+0x380>
 800eeb8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800eeba:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800eebe:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800eec2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800eec6:	e698      	b.n	800ebfa <_strtod_l+0x72>
 800eec8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800eeca:	fb08 2101 	mla	r1, r8, r1, r2
 800eece:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800eed2:	920e      	str	r2, [sp, #56]	@ 0x38
 800eed4:	e7b5      	b.n	800ee42 <_strtod_l+0x2ba>
 800eed6:	2a6e      	cmp	r2, #110	@ 0x6e
 800eed8:	e7da      	b.n	800ee90 <_strtod_l+0x308>
 800eeda:	498c      	ldr	r1, [pc, #560]	@ (800f10c <_strtod_l+0x584>)
 800eedc:	a819      	add	r0, sp, #100	@ 0x64
 800eede:	f001 fb93 	bl	8010608 <__match>
 800eee2:	2800      	cmp	r0, #0
 800eee4:	f43f aea4 	beq.w	800ec30 <_strtod_l+0xa8>
 800eee8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eeea:	4989      	ldr	r1, [pc, #548]	@ (800f110 <_strtod_l+0x588>)
 800eeec:	3b01      	subs	r3, #1
 800eeee:	a819      	add	r0, sp, #100	@ 0x64
 800eef0:	9319      	str	r3, [sp, #100]	@ 0x64
 800eef2:	f001 fb89 	bl	8010608 <__match>
 800eef6:	b910      	cbnz	r0, 800eefe <_strtod_l+0x376>
 800eef8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eefa:	3301      	adds	r3, #1
 800eefc:	9319      	str	r3, [sp, #100]	@ 0x64
 800eefe:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800f120 <_strtod_l+0x598>
 800ef02:	f04f 0a00 	mov.w	sl, #0
 800ef06:	e678      	b.n	800ebfa <_strtod_l+0x72>
 800ef08:	4882      	ldr	r0, [pc, #520]	@ (800f114 <_strtod_l+0x58c>)
 800ef0a:	f001 f8b9 	bl	8010080 <nan>
 800ef0e:	ec5b ab10 	vmov	sl, fp, d0
 800ef12:	e672      	b.n	800ebfa <_strtod_l+0x72>
 800ef14:	eba8 0309 	sub.w	r3, r8, r9
 800ef18:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ef1a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef1c:	2f00      	cmp	r7, #0
 800ef1e:	bf08      	it	eq
 800ef20:	462f      	moveq	r7, r5
 800ef22:	2d10      	cmp	r5, #16
 800ef24:	462c      	mov	r4, r5
 800ef26:	bfa8      	it	ge
 800ef28:	2410      	movge	r4, #16
 800ef2a:	f7f1 fb0b 	bl	8000544 <__aeabi_ui2d>
 800ef2e:	2d09      	cmp	r5, #9
 800ef30:	4682      	mov	sl, r0
 800ef32:	468b      	mov	fp, r1
 800ef34:	dc13      	bgt.n	800ef5e <_strtod_l+0x3d6>
 800ef36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	f43f ae5e 	beq.w	800ebfa <_strtod_l+0x72>
 800ef3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef40:	dd78      	ble.n	800f034 <_strtod_l+0x4ac>
 800ef42:	2b16      	cmp	r3, #22
 800ef44:	dc5f      	bgt.n	800f006 <_strtod_l+0x47e>
 800ef46:	4974      	ldr	r1, [pc, #464]	@ (800f118 <_strtod_l+0x590>)
 800ef48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ef4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef50:	4652      	mov	r2, sl
 800ef52:	465b      	mov	r3, fp
 800ef54:	f7f1 fb70 	bl	8000638 <__aeabi_dmul>
 800ef58:	4682      	mov	sl, r0
 800ef5a:	468b      	mov	fp, r1
 800ef5c:	e64d      	b.n	800ebfa <_strtod_l+0x72>
 800ef5e:	4b6e      	ldr	r3, [pc, #440]	@ (800f118 <_strtod_l+0x590>)
 800ef60:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ef64:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ef68:	f7f1 fb66 	bl	8000638 <__aeabi_dmul>
 800ef6c:	4682      	mov	sl, r0
 800ef6e:	9808      	ldr	r0, [sp, #32]
 800ef70:	468b      	mov	fp, r1
 800ef72:	f7f1 fae7 	bl	8000544 <__aeabi_ui2d>
 800ef76:	4602      	mov	r2, r0
 800ef78:	460b      	mov	r3, r1
 800ef7a:	4650      	mov	r0, sl
 800ef7c:	4659      	mov	r1, fp
 800ef7e:	f7f1 f9a5 	bl	80002cc <__adddf3>
 800ef82:	2d0f      	cmp	r5, #15
 800ef84:	4682      	mov	sl, r0
 800ef86:	468b      	mov	fp, r1
 800ef88:	ddd5      	ble.n	800ef36 <_strtod_l+0x3ae>
 800ef8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef8c:	1b2c      	subs	r4, r5, r4
 800ef8e:	441c      	add	r4, r3
 800ef90:	2c00      	cmp	r4, #0
 800ef92:	f340 8096 	ble.w	800f0c2 <_strtod_l+0x53a>
 800ef96:	f014 030f 	ands.w	r3, r4, #15
 800ef9a:	d00a      	beq.n	800efb2 <_strtod_l+0x42a>
 800ef9c:	495e      	ldr	r1, [pc, #376]	@ (800f118 <_strtod_l+0x590>)
 800ef9e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800efa2:	4652      	mov	r2, sl
 800efa4:	465b      	mov	r3, fp
 800efa6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800efaa:	f7f1 fb45 	bl	8000638 <__aeabi_dmul>
 800efae:	4682      	mov	sl, r0
 800efb0:	468b      	mov	fp, r1
 800efb2:	f034 040f 	bics.w	r4, r4, #15
 800efb6:	d073      	beq.n	800f0a0 <_strtod_l+0x518>
 800efb8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800efbc:	dd48      	ble.n	800f050 <_strtod_l+0x4c8>
 800efbe:	2400      	movs	r4, #0
 800efc0:	46a0      	mov	r8, r4
 800efc2:	940a      	str	r4, [sp, #40]	@ 0x28
 800efc4:	46a1      	mov	r9, r4
 800efc6:	9a05      	ldr	r2, [sp, #20]
 800efc8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800f120 <_strtod_l+0x598>
 800efcc:	2322      	movs	r3, #34	@ 0x22
 800efce:	6013      	str	r3, [r2, #0]
 800efd0:	f04f 0a00 	mov.w	sl, #0
 800efd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	f43f ae0f 	beq.w	800ebfa <_strtod_l+0x72>
 800efdc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800efde:	9805      	ldr	r0, [sp, #20]
 800efe0:	f7ff f942 	bl	800e268 <_Bfree>
 800efe4:	9805      	ldr	r0, [sp, #20]
 800efe6:	4649      	mov	r1, r9
 800efe8:	f7ff f93e 	bl	800e268 <_Bfree>
 800efec:	9805      	ldr	r0, [sp, #20]
 800efee:	4641      	mov	r1, r8
 800eff0:	f7ff f93a 	bl	800e268 <_Bfree>
 800eff4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800eff6:	9805      	ldr	r0, [sp, #20]
 800eff8:	f7ff f936 	bl	800e268 <_Bfree>
 800effc:	9805      	ldr	r0, [sp, #20]
 800effe:	4621      	mov	r1, r4
 800f000:	f7ff f932 	bl	800e268 <_Bfree>
 800f004:	e5f9      	b.n	800ebfa <_strtod_l+0x72>
 800f006:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f008:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800f00c:	4293      	cmp	r3, r2
 800f00e:	dbbc      	blt.n	800ef8a <_strtod_l+0x402>
 800f010:	4c41      	ldr	r4, [pc, #260]	@ (800f118 <_strtod_l+0x590>)
 800f012:	f1c5 050f 	rsb	r5, r5, #15
 800f016:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f01a:	4652      	mov	r2, sl
 800f01c:	465b      	mov	r3, fp
 800f01e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f022:	f7f1 fb09 	bl	8000638 <__aeabi_dmul>
 800f026:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f028:	1b5d      	subs	r5, r3, r5
 800f02a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f02e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f032:	e78f      	b.n	800ef54 <_strtod_l+0x3cc>
 800f034:	3316      	adds	r3, #22
 800f036:	dba8      	blt.n	800ef8a <_strtod_l+0x402>
 800f038:	4b37      	ldr	r3, [pc, #220]	@ (800f118 <_strtod_l+0x590>)
 800f03a:	eba9 0808 	sub.w	r8, r9, r8
 800f03e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800f042:	e9d8 2300 	ldrd	r2, r3, [r8]
 800f046:	4650      	mov	r0, sl
 800f048:	4659      	mov	r1, fp
 800f04a:	f7f1 fc1f 	bl	800088c <__aeabi_ddiv>
 800f04e:	e783      	b.n	800ef58 <_strtod_l+0x3d0>
 800f050:	4b32      	ldr	r3, [pc, #200]	@ (800f11c <_strtod_l+0x594>)
 800f052:	9308      	str	r3, [sp, #32]
 800f054:	2300      	movs	r3, #0
 800f056:	1124      	asrs	r4, r4, #4
 800f058:	4650      	mov	r0, sl
 800f05a:	4659      	mov	r1, fp
 800f05c:	461e      	mov	r6, r3
 800f05e:	2c01      	cmp	r4, #1
 800f060:	dc21      	bgt.n	800f0a6 <_strtod_l+0x51e>
 800f062:	b10b      	cbz	r3, 800f068 <_strtod_l+0x4e0>
 800f064:	4682      	mov	sl, r0
 800f066:	468b      	mov	fp, r1
 800f068:	492c      	ldr	r1, [pc, #176]	@ (800f11c <_strtod_l+0x594>)
 800f06a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800f06e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800f072:	4652      	mov	r2, sl
 800f074:	465b      	mov	r3, fp
 800f076:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f07a:	f7f1 fadd 	bl	8000638 <__aeabi_dmul>
 800f07e:	4b28      	ldr	r3, [pc, #160]	@ (800f120 <_strtod_l+0x598>)
 800f080:	460a      	mov	r2, r1
 800f082:	400b      	ands	r3, r1
 800f084:	4927      	ldr	r1, [pc, #156]	@ (800f124 <_strtod_l+0x59c>)
 800f086:	428b      	cmp	r3, r1
 800f088:	4682      	mov	sl, r0
 800f08a:	d898      	bhi.n	800efbe <_strtod_l+0x436>
 800f08c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800f090:	428b      	cmp	r3, r1
 800f092:	bf86      	itte	hi
 800f094:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800f128 <_strtod_l+0x5a0>
 800f098:	f04f 3aff 	movhi.w	sl, #4294967295
 800f09c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	9308      	str	r3, [sp, #32]
 800f0a4:	e07a      	b.n	800f19c <_strtod_l+0x614>
 800f0a6:	07e2      	lsls	r2, r4, #31
 800f0a8:	d505      	bpl.n	800f0b6 <_strtod_l+0x52e>
 800f0aa:	9b08      	ldr	r3, [sp, #32]
 800f0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0b0:	f7f1 fac2 	bl	8000638 <__aeabi_dmul>
 800f0b4:	2301      	movs	r3, #1
 800f0b6:	9a08      	ldr	r2, [sp, #32]
 800f0b8:	3208      	adds	r2, #8
 800f0ba:	3601      	adds	r6, #1
 800f0bc:	1064      	asrs	r4, r4, #1
 800f0be:	9208      	str	r2, [sp, #32]
 800f0c0:	e7cd      	b.n	800f05e <_strtod_l+0x4d6>
 800f0c2:	d0ed      	beq.n	800f0a0 <_strtod_l+0x518>
 800f0c4:	4264      	negs	r4, r4
 800f0c6:	f014 020f 	ands.w	r2, r4, #15
 800f0ca:	d00a      	beq.n	800f0e2 <_strtod_l+0x55a>
 800f0cc:	4b12      	ldr	r3, [pc, #72]	@ (800f118 <_strtod_l+0x590>)
 800f0ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f0d2:	4650      	mov	r0, sl
 800f0d4:	4659      	mov	r1, fp
 800f0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0da:	f7f1 fbd7 	bl	800088c <__aeabi_ddiv>
 800f0de:	4682      	mov	sl, r0
 800f0e0:	468b      	mov	fp, r1
 800f0e2:	1124      	asrs	r4, r4, #4
 800f0e4:	d0dc      	beq.n	800f0a0 <_strtod_l+0x518>
 800f0e6:	2c1f      	cmp	r4, #31
 800f0e8:	dd20      	ble.n	800f12c <_strtod_l+0x5a4>
 800f0ea:	2400      	movs	r4, #0
 800f0ec:	46a0      	mov	r8, r4
 800f0ee:	940a      	str	r4, [sp, #40]	@ 0x28
 800f0f0:	46a1      	mov	r9, r4
 800f0f2:	9a05      	ldr	r2, [sp, #20]
 800f0f4:	2322      	movs	r3, #34	@ 0x22
 800f0f6:	f04f 0a00 	mov.w	sl, #0
 800f0fa:	f04f 0b00 	mov.w	fp, #0
 800f0fe:	6013      	str	r3, [r2, #0]
 800f100:	e768      	b.n	800efd4 <_strtod_l+0x44c>
 800f102:	bf00      	nop
 800f104:	08010d51 	.word	0x08010d51
 800f108:	08010f64 	.word	0x08010f64
 800f10c:	08010d49 	.word	0x08010d49
 800f110:	08010d80 	.word	0x08010d80
 800f114:	0801110d 	.word	0x0801110d
 800f118:	08010e98 	.word	0x08010e98
 800f11c:	08010e70 	.word	0x08010e70
 800f120:	7ff00000 	.word	0x7ff00000
 800f124:	7ca00000 	.word	0x7ca00000
 800f128:	7fefffff 	.word	0x7fefffff
 800f12c:	f014 0310 	ands.w	r3, r4, #16
 800f130:	bf18      	it	ne
 800f132:	236a      	movne	r3, #106	@ 0x6a
 800f134:	4ea9      	ldr	r6, [pc, #676]	@ (800f3dc <_strtod_l+0x854>)
 800f136:	9308      	str	r3, [sp, #32]
 800f138:	4650      	mov	r0, sl
 800f13a:	4659      	mov	r1, fp
 800f13c:	2300      	movs	r3, #0
 800f13e:	07e2      	lsls	r2, r4, #31
 800f140:	d504      	bpl.n	800f14c <_strtod_l+0x5c4>
 800f142:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f146:	f7f1 fa77 	bl	8000638 <__aeabi_dmul>
 800f14a:	2301      	movs	r3, #1
 800f14c:	1064      	asrs	r4, r4, #1
 800f14e:	f106 0608 	add.w	r6, r6, #8
 800f152:	d1f4      	bne.n	800f13e <_strtod_l+0x5b6>
 800f154:	b10b      	cbz	r3, 800f15a <_strtod_l+0x5d2>
 800f156:	4682      	mov	sl, r0
 800f158:	468b      	mov	fp, r1
 800f15a:	9b08      	ldr	r3, [sp, #32]
 800f15c:	b1b3      	cbz	r3, 800f18c <_strtod_l+0x604>
 800f15e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f162:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800f166:	2b00      	cmp	r3, #0
 800f168:	4659      	mov	r1, fp
 800f16a:	dd0f      	ble.n	800f18c <_strtod_l+0x604>
 800f16c:	2b1f      	cmp	r3, #31
 800f16e:	dd55      	ble.n	800f21c <_strtod_l+0x694>
 800f170:	2b34      	cmp	r3, #52	@ 0x34
 800f172:	bfde      	ittt	le
 800f174:	f04f 33ff 	movle.w	r3, #4294967295
 800f178:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800f17c:	4093      	lslle	r3, r2
 800f17e:	f04f 0a00 	mov.w	sl, #0
 800f182:	bfcc      	ite	gt
 800f184:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800f188:	ea03 0b01 	andle.w	fp, r3, r1
 800f18c:	2200      	movs	r2, #0
 800f18e:	2300      	movs	r3, #0
 800f190:	4650      	mov	r0, sl
 800f192:	4659      	mov	r1, fp
 800f194:	f7f1 fcb8 	bl	8000b08 <__aeabi_dcmpeq>
 800f198:	2800      	cmp	r0, #0
 800f19a:	d1a6      	bne.n	800f0ea <_strtod_l+0x562>
 800f19c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f19e:	9300      	str	r3, [sp, #0]
 800f1a0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f1a2:	9805      	ldr	r0, [sp, #20]
 800f1a4:	462b      	mov	r3, r5
 800f1a6:	463a      	mov	r2, r7
 800f1a8:	f7ff f8c6 	bl	800e338 <__s2b>
 800f1ac:	900a      	str	r0, [sp, #40]	@ 0x28
 800f1ae:	2800      	cmp	r0, #0
 800f1b0:	f43f af05 	beq.w	800efbe <_strtod_l+0x436>
 800f1b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f1b6:	2a00      	cmp	r2, #0
 800f1b8:	eba9 0308 	sub.w	r3, r9, r8
 800f1bc:	bfa8      	it	ge
 800f1be:	2300      	movge	r3, #0
 800f1c0:	9312      	str	r3, [sp, #72]	@ 0x48
 800f1c2:	2400      	movs	r4, #0
 800f1c4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f1c8:	9316      	str	r3, [sp, #88]	@ 0x58
 800f1ca:	46a0      	mov	r8, r4
 800f1cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f1ce:	9805      	ldr	r0, [sp, #20]
 800f1d0:	6859      	ldr	r1, [r3, #4]
 800f1d2:	f7ff f809 	bl	800e1e8 <_Balloc>
 800f1d6:	4681      	mov	r9, r0
 800f1d8:	2800      	cmp	r0, #0
 800f1da:	f43f aef4 	beq.w	800efc6 <_strtod_l+0x43e>
 800f1de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f1e0:	691a      	ldr	r2, [r3, #16]
 800f1e2:	3202      	adds	r2, #2
 800f1e4:	f103 010c 	add.w	r1, r3, #12
 800f1e8:	0092      	lsls	r2, r2, #2
 800f1ea:	300c      	adds	r0, #12
 800f1ec:	f000 ff38 	bl	8010060 <memcpy>
 800f1f0:	ec4b ab10 	vmov	d0, sl, fp
 800f1f4:	9805      	ldr	r0, [sp, #20]
 800f1f6:	aa1c      	add	r2, sp, #112	@ 0x70
 800f1f8:	a91b      	add	r1, sp, #108	@ 0x6c
 800f1fa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800f1fe:	f7ff fbd7 	bl	800e9b0 <__d2b>
 800f202:	901a      	str	r0, [sp, #104]	@ 0x68
 800f204:	2800      	cmp	r0, #0
 800f206:	f43f aede 	beq.w	800efc6 <_strtod_l+0x43e>
 800f20a:	9805      	ldr	r0, [sp, #20]
 800f20c:	2101      	movs	r1, #1
 800f20e:	f7ff f929 	bl	800e464 <__i2b>
 800f212:	4680      	mov	r8, r0
 800f214:	b948      	cbnz	r0, 800f22a <_strtod_l+0x6a2>
 800f216:	f04f 0800 	mov.w	r8, #0
 800f21a:	e6d4      	b.n	800efc6 <_strtod_l+0x43e>
 800f21c:	f04f 32ff 	mov.w	r2, #4294967295
 800f220:	fa02 f303 	lsl.w	r3, r2, r3
 800f224:	ea03 0a0a 	and.w	sl, r3, sl
 800f228:	e7b0      	b.n	800f18c <_strtod_l+0x604>
 800f22a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800f22c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f22e:	2d00      	cmp	r5, #0
 800f230:	bfab      	itete	ge
 800f232:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800f234:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800f236:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800f238:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800f23a:	bfac      	ite	ge
 800f23c:	18ef      	addge	r7, r5, r3
 800f23e:	1b5e      	sublt	r6, r3, r5
 800f240:	9b08      	ldr	r3, [sp, #32]
 800f242:	1aed      	subs	r5, r5, r3
 800f244:	4415      	add	r5, r2
 800f246:	4b66      	ldr	r3, [pc, #408]	@ (800f3e0 <_strtod_l+0x858>)
 800f248:	3d01      	subs	r5, #1
 800f24a:	429d      	cmp	r5, r3
 800f24c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f250:	da50      	bge.n	800f2f4 <_strtod_l+0x76c>
 800f252:	1b5b      	subs	r3, r3, r5
 800f254:	2b1f      	cmp	r3, #31
 800f256:	eba2 0203 	sub.w	r2, r2, r3
 800f25a:	f04f 0101 	mov.w	r1, #1
 800f25e:	dc3d      	bgt.n	800f2dc <_strtod_l+0x754>
 800f260:	fa01 f303 	lsl.w	r3, r1, r3
 800f264:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f266:	2300      	movs	r3, #0
 800f268:	9310      	str	r3, [sp, #64]	@ 0x40
 800f26a:	18bd      	adds	r5, r7, r2
 800f26c:	9b08      	ldr	r3, [sp, #32]
 800f26e:	42af      	cmp	r7, r5
 800f270:	4416      	add	r6, r2
 800f272:	441e      	add	r6, r3
 800f274:	463b      	mov	r3, r7
 800f276:	bfa8      	it	ge
 800f278:	462b      	movge	r3, r5
 800f27a:	42b3      	cmp	r3, r6
 800f27c:	bfa8      	it	ge
 800f27e:	4633      	movge	r3, r6
 800f280:	2b00      	cmp	r3, #0
 800f282:	bfc2      	ittt	gt
 800f284:	1aed      	subgt	r5, r5, r3
 800f286:	1af6      	subgt	r6, r6, r3
 800f288:	1aff      	subgt	r7, r7, r3
 800f28a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	dd16      	ble.n	800f2be <_strtod_l+0x736>
 800f290:	4641      	mov	r1, r8
 800f292:	9805      	ldr	r0, [sp, #20]
 800f294:	461a      	mov	r2, r3
 800f296:	f7ff f9a5 	bl	800e5e4 <__pow5mult>
 800f29a:	4680      	mov	r8, r0
 800f29c:	2800      	cmp	r0, #0
 800f29e:	d0ba      	beq.n	800f216 <_strtod_l+0x68e>
 800f2a0:	4601      	mov	r1, r0
 800f2a2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f2a4:	9805      	ldr	r0, [sp, #20]
 800f2a6:	f7ff f8f3 	bl	800e490 <__multiply>
 800f2aa:	900e      	str	r0, [sp, #56]	@ 0x38
 800f2ac:	2800      	cmp	r0, #0
 800f2ae:	f43f ae8a 	beq.w	800efc6 <_strtod_l+0x43e>
 800f2b2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f2b4:	9805      	ldr	r0, [sp, #20]
 800f2b6:	f7fe ffd7 	bl	800e268 <_Bfree>
 800f2ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f2bc:	931a      	str	r3, [sp, #104]	@ 0x68
 800f2be:	2d00      	cmp	r5, #0
 800f2c0:	dc1d      	bgt.n	800f2fe <_strtod_l+0x776>
 800f2c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	dd23      	ble.n	800f310 <_strtod_l+0x788>
 800f2c8:	4649      	mov	r1, r9
 800f2ca:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800f2cc:	9805      	ldr	r0, [sp, #20]
 800f2ce:	f7ff f989 	bl	800e5e4 <__pow5mult>
 800f2d2:	4681      	mov	r9, r0
 800f2d4:	b9e0      	cbnz	r0, 800f310 <_strtod_l+0x788>
 800f2d6:	f04f 0900 	mov.w	r9, #0
 800f2da:	e674      	b.n	800efc6 <_strtod_l+0x43e>
 800f2dc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800f2e0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800f2e4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800f2e8:	35e2      	adds	r5, #226	@ 0xe2
 800f2ea:	fa01 f305 	lsl.w	r3, r1, r5
 800f2ee:	9310      	str	r3, [sp, #64]	@ 0x40
 800f2f0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f2f2:	e7ba      	b.n	800f26a <_strtod_l+0x6e2>
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	9310      	str	r3, [sp, #64]	@ 0x40
 800f2f8:	2301      	movs	r3, #1
 800f2fa:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f2fc:	e7b5      	b.n	800f26a <_strtod_l+0x6e2>
 800f2fe:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f300:	9805      	ldr	r0, [sp, #20]
 800f302:	462a      	mov	r2, r5
 800f304:	f7ff f9c8 	bl	800e698 <__lshift>
 800f308:	901a      	str	r0, [sp, #104]	@ 0x68
 800f30a:	2800      	cmp	r0, #0
 800f30c:	d1d9      	bne.n	800f2c2 <_strtod_l+0x73a>
 800f30e:	e65a      	b.n	800efc6 <_strtod_l+0x43e>
 800f310:	2e00      	cmp	r6, #0
 800f312:	dd07      	ble.n	800f324 <_strtod_l+0x79c>
 800f314:	4649      	mov	r1, r9
 800f316:	9805      	ldr	r0, [sp, #20]
 800f318:	4632      	mov	r2, r6
 800f31a:	f7ff f9bd 	bl	800e698 <__lshift>
 800f31e:	4681      	mov	r9, r0
 800f320:	2800      	cmp	r0, #0
 800f322:	d0d8      	beq.n	800f2d6 <_strtod_l+0x74e>
 800f324:	2f00      	cmp	r7, #0
 800f326:	dd08      	ble.n	800f33a <_strtod_l+0x7b2>
 800f328:	4641      	mov	r1, r8
 800f32a:	9805      	ldr	r0, [sp, #20]
 800f32c:	463a      	mov	r2, r7
 800f32e:	f7ff f9b3 	bl	800e698 <__lshift>
 800f332:	4680      	mov	r8, r0
 800f334:	2800      	cmp	r0, #0
 800f336:	f43f ae46 	beq.w	800efc6 <_strtod_l+0x43e>
 800f33a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f33c:	9805      	ldr	r0, [sp, #20]
 800f33e:	464a      	mov	r2, r9
 800f340:	f7ff fa32 	bl	800e7a8 <__mdiff>
 800f344:	4604      	mov	r4, r0
 800f346:	2800      	cmp	r0, #0
 800f348:	f43f ae3d 	beq.w	800efc6 <_strtod_l+0x43e>
 800f34c:	68c3      	ldr	r3, [r0, #12]
 800f34e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f350:	2300      	movs	r3, #0
 800f352:	60c3      	str	r3, [r0, #12]
 800f354:	4641      	mov	r1, r8
 800f356:	f7ff fa0b 	bl	800e770 <__mcmp>
 800f35a:	2800      	cmp	r0, #0
 800f35c:	da46      	bge.n	800f3ec <_strtod_l+0x864>
 800f35e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f360:	ea53 030a 	orrs.w	r3, r3, sl
 800f364:	d16c      	bne.n	800f440 <_strtod_l+0x8b8>
 800f366:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d168      	bne.n	800f440 <_strtod_l+0x8b8>
 800f36e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f372:	0d1b      	lsrs	r3, r3, #20
 800f374:	051b      	lsls	r3, r3, #20
 800f376:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f37a:	d961      	bls.n	800f440 <_strtod_l+0x8b8>
 800f37c:	6963      	ldr	r3, [r4, #20]
 800f37e:	b913      	cbnz	r3, 800f386 <_strtod_l+0x7fe>
 800f380:	6923      	ldr	r3, [r4, #16]
 800f382:	2b01      	cmp	r3, #1
 800f384:	dd5c      	ble.n	800f440 <_strtod_l+0x8b8>
 800f386:	4621      	mov	r1, r4
 800f388:	2201      	movs	r2, #1
 800f38a:	9805      	ldr	r0, [sp, #20]
 800f38c:	f7ff f984 	bl	800e698 <__lshift>
 800f390:	4641      	mov	r1, r8
 800f392:	4604      	mov	r4, r0
 800f394:	f7ff f9ec 	bl	800e770 <__mcmp>
 800f398:	2800      	cmp	r0, #0
 800f39a:	dd51      	ble.n	800f440 <_strtod_l+0x8b8>
 800f39c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f3a0:	9a08      	ldr	r2, [sp, #32]
 800f3a2:	0d1b      	lsrs	r3, r3, #20
 800f3a4:	051b      	lsls	r3, r3, #20
 800f3a6:	2a00      	cmp	r2, #0
 800f3a8:	d06b      	beq.n	800f482 <_strtod_l+0x8fa>
 800f3aa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f3ae:	d868      	bhi.n	800f482 <_strtod_l+0x8fa>
 800f3b0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800f3b4:	f67f ae9d 	bls.w	800f0f2 <_strtod_l+0x56a>
 800f3b8:	4b0a      	ldr	r3, [pc, #40]	@ (800f3e4 <_strtod_l+0x85c>)
 800f3ba:	4650      	mov	r0, sl
 800f3bc:	4659      	mov	r1, fp
 800f3be:	2200      	movs	r2, #0
 800f3c0:	f7f1 f93a 	bl	8000638 <__aeabi_dmul>
 800f3c4:	4b08      	ldr	r3, [pc, #32]	@ (800f3e8 <_strtod_l+0x860>)
 800f3c6:	400b      	ands	r3, r1
 800f3c8:	4682      	mov	sl, r0
 800f3ca:	468b      	mov	fp, r1
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	f47f ae05 	bne.w	800efdc <_strtod_l+0x454>
 800f3d2:	9a05      	ldr	r2, [sp, #20]
 800f3d4:	2322      	movs	r3, #34	@ 0x22
 800f3d6:	6013      	str	r3, [r2, #0]
 800f3d8:	e600      	b.n	800efdc <_strtod_l+0x454>
 800f3da:	bf00      	nop
 800f3dc:	08010f90 	.word	0x08010f90
 800f3e0:	fffffc02 	.word	0xfffffc02
 800f3e4:	39500000 	.word	0x39500000
 800f3e8:	7ff00000 	.word	0x7ff00000
 800f3ec:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f3f0:	d165      	bne.n	800f4be <_strtod_l+0x936>
 800f3f2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f3f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f3f8:	b35a      	cbz	r2, 800f452 <_strtod_l+0x8ca>
 800f3fa:	4a9f      	ldr	r2, [pc, #636]	@ (800f678 <_strtod_l+0xaf0>)
 800f3fc:	4293      	cmp	r3, r2
 800f3fe:	d12b      	bne.n	800f458 <_strtod_l+0x8d0>
 800f400:	9b08      	ldr	r3, [sp, #32]
 800f402:	4651      	mov	r1, sl
 800f404:	b303      	cbz	r3, 800f448 <_strtod_l+0x8c0>
 800f406:	4b9d      	ldr	r3, [pc, #628]	@ (800f67c <_strtod_l+0xaf4>)
 800f408:	465a      	mov	r2, fp
 800f40a:	4013      	ands	r3, r2
 800f40c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800f410:	f04f 32ff 	mov.w	r2, #4294967295
 800f414:	d81b      	bhi.n	800f44e <_strtod_l+0x8c6>
 800f416:	0d1b      	lsrs	r3, r3, #20
 800f418:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f41c:	fa02 f303 	lsl.w	r3, r2, r3
 800f420:	4299      	cmp	r1, r3
 800f422:	d119      	bne.n	800f458 <_strtod_l+0x8d0>
 800f424:	4b96      	ldr	r3, [pc, #600]	@ (800f680 <_strtod_l+0xaf8>)
 800f426:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f428:	429a      	cmp	r2, r3
 800f42a:	d102      	bne.n	800f432 <_strtod_l+0x8aa>
 800f42c:	3101      	adds	r1, #1
 800f42e:	f43f adca 	beq.w	800efc6 <_strtod_l+0x43e>
 800f432:	4b92      	ldr	r3, [pc, #584]	@ (800f67c <_strtod_l+0xaf4>)
 800f434:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f436:	401a      	ands	r2, r3
 800f438:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800f43c:	f04f 0a00 	mov.w	sl, #0
 800f440:	9b08      	ldr	r3, [sp, #32]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d1b8      	bne.n	800f3b8 <_strtod_l+0x830>
 800f446:	e5c9      	b.n	800efdc <_strtod_l+0x454>
 800f448:	f04f 33ff 	mov.w	r3, #4294967295
 800f44c:	e7e8      	b.n	800f420 <_strtod_l+0x898>
 800f44e:	4613      	mov	r3, r2
 800f450:	e7e6      	b.n	800f420 <_strtod_l+0x898>
 800f452:	ea53 030a 	orrs.w	r3, r3, sl
 800f456:	d0a1      	beq.n	800f39c <_strtod_l+0x814>
 800f458:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f45a:	b1db      	cbz	r3, 800f494 <_strtod_l+0x90c>
 800f45c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f45e:	4213      	tst	r3, r2
 800f460:	d0ee      	beq.n	800f440 <_strtod_l+0x8b8>
 800f462:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f464:	9a08      	ldr	r2, [sp, #32]
 800f466:	4650      	mov	r0, sl
 800f468:	4659      	mov	r1, fp
 800f46a:	b1bb      	cbz	r3, 800f49c <_strtod_l+0x914>
 800f46c:	f7ff fb6e 	bl	800eb4c <sulp>
 800f470:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f474:	ec53 2b10 	vmov	r2, r3, d0
 800f478:	f7f0 ff28 	bl	80002cc <__adddf3>
 800f47c:	4682      	mov	sl, r0
 800f47e:	468b      	mov	fp, r1
 800f480:	e7de      	b.n	800f440 <_strtod_l+0x8b8>
 800f482:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f486:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f48a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f48e:	f04f 3aff 	mov.w	sl, #4294967295
 800f492:	e7d5      	b.n	800f440 <_strtod_l+0x8b8>
 800f494:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f496:	ea13 0f0a 	tst.w	r3, sl
 800f49a:	e7e1      	b.n	800f460 <_strtod_l+0x8d8>
 800f49c:	f7ff fb56 	bl	800eb4c <sulp>
 800f4a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f4a4:	ec53 2b10 	vmov	r2, r3, d0
 800f4a8:	f7f0 ff0e 	bl	80002c8 <__aeabi_dsub>
 800f4ac:	2200      	movs	r2, #0
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	4682      	mov	sl, r0
 800f4b2:	468b      	mov	fp, r1
 800f4b4:	f7f1 fb28 	bl	8000b08 <__aeabi_dcmpeq>
 800f4b8:	2800      	cmp	r0, #0
 800f4ba:	d0c1      	beq.n	800f440 <_strtod_l+0x8b8>
 800f4bc:	e619      	b.n	800f0f2 <_strtod_l+0x56a>
 800f4be:	4641      	mov	r1, r8
 800f4c0:	4620      	mov	r0, r4
 800f4c2:	f7ff facd 	bl	800ea60 <__ratio>
 800f4c6:	ec57 6b10 	vmov	r6, r7, d0
 800f4ca:	2200      	movs	r2, #0
 800f4cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f4d0:	4630      	mov	r0, r6
 800f4d2:	4639      	mov	r1, r7
 800f4d4:	f7f1 fb2c 	bl	8000b30 <__aeabi_dcmple>
 800f4d8:	2800      	cmp	r0, #0
 800f4da:	d06f      	beq.n	800f5bc <_strtod_l+0xa34>
 800f4dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d17a      	bne.n	800f5d8 <_strtod_l+0xa50>
 800f4e2:	f1ba 0f00 	cmp.w	sl, #0
 800f4e6:	d158      	bne.n	800f59a <_strtod_l+0xa12>
 800f4e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f4ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d15a      	bne.n	800f5a8 <_strtod_l+0xa20>
 800f4f2:	4b64      	ldr	r3, [pc, #400]	@ (800f684 <_strtod_l+0xafc>)
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	4630      	mov	r0, r6
 800f4f8:	4639      	mov	r1, r7
 800f4fa:	f7f1 fb0f 	bl	8000b1c <__aeabi_dcmplt>
 800f4fe:	2800      	cmp	r0, #0
 800f500:	d159      	bne.n	800f5b6 <_strtod_l+0xa2e>
 800f502:	4630      	mov	r0, r6
 800f504:	4639      	mov	r1, r7
 800f506:	4b60      	ldr	r3, [pc, #384]	@ (800f688 <_strtod_l+0xb00>)
 800f508:	2200      	movs	r2, #0
 800f50a:	f7f1 f895 	bl	8000638 <__aeabi_dmul>
 800f50e:	4606      	mov	r6, r0
 800f510:	460f      	mov	r7, r1
 800f512:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800f516:	9606      	str	r6, [sp, #24]
 800f518:	9307      	str	r3, [sp, #28]
 800f51a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f51e:	4d57      	ldr	r5, [pc, #348]	@ (800f67c <_strtod_l+0xaf4>)
 800f520:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f524:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f526:	401d      	ands	r5, r3
 800f528:	4b58      	ldr	r3, [pc, #352]	@ (800f68c <_strtod_l+0xb04>)
 800f52a:	429d      	cmp	r5, r3
 800f52c:	f040 80b2 	bne.w	800f694 <_strtod_l+0xb0c>
 800f530:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f532:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800f536:	ec4b ab10 	vmov	d0, sl, fp
 800f53a:	f7ff f9c9 	bl	800e8d0 <__ulp>
 800f53e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f542:	ec51 0b10 	vmov	r0, r1, d0
 800f546:	f7f1 f877 	bl	8000638 <__aeabi_dmul>
 800f54a:	4652      	mov	r2, sl
 800f54c:	465b      	mov	r3, fp
 800f54e:	f7f0 febd 	bl	80002cc <__adddf3>
 800f552:	460b      	mov	r3, r1
 800f554:	4949      	ldr	r1, [pc, #292]	@ (800f67c <_strtod_l+0xaf4>)
 800f556:	4a4e      	ldr	r2, [pc, #312]	@ (800f690 <_strtod_l+0xb08>)
 800f558:	4019      	ands	r1, r3
 800f55a:	4291      	cmp	r1, r2
 800f55c:	4682      	mov	sl, r0
 800f55e:	d942      	bls.n	800f5e6 <_strtod_l+0xa5e>
 800f560:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f562:	4b47      	ldr	r3, [pc, #284]	@ (800f680 <_strtod_l+0xaf8>)
 800f564:	429a      	cmp	r2, r3
 800f566:	d103      	bne.n	800f570 <_strtod_l+0x9e8>
 800f568:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f56a:	3301      	adds	r3, #1
 800f56c:	f43f ad2b 	beq.w	800efc6 <_strtod_l+0x43e>
 800f570:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800f680 <_strtod_l+0xaf8>
 800f574:	f04f 3aff 	mov.w	sl, #4294967295
 800f578:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f57a:	9805      	ldr	r0, [sp, #20]
 800f57c:	f7fe fe74 	bl	800e268 <_Bfree>
 800f580:	9805      	ldr	r0, [sp, #20]
 800f582:	4649      	mov	r1, r9
 800f584:	f7fe fe70 	bl	800e268 <_Bfree>
 800f588:	9805      	ldr	r0, [sp, #20]
 800f58a:	4641      	mov	r1, r8
 800f58c:	f7fe fe6c 	bl	800e268 <_Bfree>
 800f590:	9805      	ldr	r0, [sp, #20]
 800f592:	4621      	mov	r1, r4
 800f594:	f7fe fe68 	bl	800e268 <_Bfree>
 800f598:	e618      	b.n	800f1cc <_strtod_l+0x644>
 800f59a:	f1ba 0f01 	cmp.w	sl, #1
 800f59e:	d103      	bne.n	800f5a8 <_strtod_l+0xa20>
 800f5a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	f43f ada5 	beq.w	800f0f2 <_strtod_l+0x56a>
 800f5a8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800f658 <_strtod_l+0xad0>
 800f5ac:	4f35      	ldr	r7, [pc, #212]	@ (800f684 <_strtod_l+0xafc>)
 800f5ae:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f5b2:	2600      	movs	r6, #0
 800f5b4:	e7b1      	b.n	800f51a <_strtod_l+0x992>
 800f5b6:	4f34      	ldr	r7, [pc, #208]	@ (800f688 <_strtod_l+0xb00>)
 800f5b8:	2600      	movs	r6, #0
 800f5ba:	e7aa      	b.n	800f512 <_strtod_l+0x98a>
 800f5bc:	4b32      	ldr	r3, [pc, #200]	@ (800f688 <_strtod_l+0xb00>)
 800f5be:	4630      	mov	r0, r6
 800f5c0:	4639      	mov	r1, r7
 800f5c2:	2200      	movs	r2, #0
 800f5c4:	f7f1 f838 	bl	8000638 <__aeabi_dmul>
 800f5c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f5ca:	4606      	mov	r6, r0
 800f5cc:	460f      	mov	r7, r1
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d09f      	beq.n	800f512 <_strtod_l+0x98a>
 800f5d2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f5d6:	e7a0      	b.n	800f51a <_strtod_l+0x992>
 800f5d8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800f660 <_strtod_l+0xad8>
 800f5dc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f5e0:	ec57 6b17 	vmov	r6, r7, d7
 800f5e4:	e799      	b.n	800f51a <_strtod_l+0x992>
 800f5e6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800f5ea:	9b08      	ldr	r3, [sp, #32]
 800f5ec:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d1c1      	bne.n	800f578 <_strtod_l+0x9f0>
 800f5f4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f5f8:	0d1b      	lsrs	r3, r3, #20
 800f5fa:	051b      	lsls	r3, r3, #20
 800f5fc:	429d      	cmp	r5, r3
 800f5fe:	d1bb      	bne.n	800f578 <_strtod_l+0x9f0>
 800f600:	4630      	mov	r0, r6
 800f602:	4639      	mov	r1, r7
 800f604:	f7f1 fb78 	bl	8000cf8 <__aeabi_d2lz>
 800f608:	f7f0 ffe8 	bl	80005dc <__aeabi_l2d>
 800f60c:	4602      	mov	r2, r0
 800f60e:	460b      	mov	r3, r1
 800f610:	4630      	mov	r0, r6
 800f612:	4639      	mov	r1, r7
 800f614:	f7f0 fe58 	bl	80002c8 <__aeabi_dsub>
 800f618:	460b      	mov	r3, r1
 800f61a:	4602      	mov	r2, r0
 800f61c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800f620:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800f624:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f626:	ea46 060a 	orr.w	r6, r6, sl
 800f62a:	431e      	orrs	r6, r3
 800f62c:	d06f      	beq.n	800f70e <_strtod_l+0xb86>
 800f62e:	a30e      	add	r3, pc, #56	@ (adr r3, 800f668 <_strtod_l+0xae0>)
 800f630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f634:	f7f1 fa72 	bl	8000b1c <__aeabi_dcmplt>
 800f638:	2800      	cmp	r0, #0
 800f63a:	f47f accf 	bne.w	800efdc <_strtod_l+0x454>
 800f63e:	a30c      	add	r3, pc, #48	@ (adr r3, 800f670 <_strtod_l+0xae8>)
 800f640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f644:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f648:	f7f1 fa86 	bl	8000b58 <__aeabi_dcmpgt>
 800f64c:	2800      	cmp	r0, #0
 800f64e:	d093      	beq.n	800f578 <_strtod_l+0x9f0>
 800f650:	e4c4      	b.n	800efdc <_strtod_l+0x454>
 800f652:	bf00      	nop
 800f654:	f3af 8000 	nop.w
 800f658:	00000000 	.word	0x00000000
 800f65c:	bff00000 	.word	0xbff00000
 800f660:	00000000 	.word	0x00000000
 800f664:	3ff00000 	.word	0x3ff00000
 800f668:	94a03595 	.word	0x94a03595
 800f66c:	3fdfffff 	.word	0x3fdfffff
 800f670:	35afe535 	.word	0x35afe535
 800f674:	3fe00000 	.word	0x3fe00000
 800f678:	000fffff 	.word	0x000fffff
 800f67c:	7ff00000 	.word	0x7ff00000
 800f680:	7fefffff 	.word	0x7fefffff
 800f684:	3ff00000 	.word	0x3ff00000
 800f688:	3fe00000 	.word	0x3fe00000
 800f68c:	7fe00000 	.word	0x7fe00000
 800f690:	7c9fffff 	.word	0x7c9fffff
 800f694:	9b08      	ldr	r3, [sp, #32]
 800f696:	b323      	cbz	r3, 800f6e2 <_strtod_l+0xb5a>
 800f698:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800f69c:	d821      	bhi.n	800f6e2 <_strtod_l+0xb5a>
 800f69e:	a328      	add	r3, pc, #160	@ (adr r3, 800f740 <_strtod_l+0xbb8>)
 800f6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6a4:	4630      	mov	r0, r6
 800f6a6:	4639      	mov	r1, r7
 800f6a8:	f7f1 fa42 	bl	8000b30 <__aeabi_dcmple>
 800f6ac:	b1a0      	cbz	r0, 800f6d8 <_strtod_l+0xb50>
 800f6ae:	4639      	mov	r1, r7
 800f6b0:	4630      	mov	r0, r6
 800f6b2:	f7f1 fa99 	bl	8000be8 <__aeabi_d2uiz>
 800f6b6:	2801      	cmp	r0, #1
 800f6b8:	bf38      	it	cc
 800f6ba:	2001      	movcc	r0, #1
 800f6bc:	f7f0 ff42 	bl	8000544 <__aeabi_ui2d>
 800f6c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f6c2:	4606      	mov	r6, r0
 800f6c4:	460f      	mov	r7, r1
 800f6c6:	b9fb      	cbnz	r3, 800f708 <_strtod_l+0xb80>
 800f6c8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f6cc:	9014      	str	r0, [sp, #80]	@ 0x50
 800f6ce:	9315      	str	r3, [sp, #84]	@ 0x54
 800f6d0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800f6d4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f6d8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f6da:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800f6de:	1b5b      	subs	r3, r3, r5
 800f6e0:	9311      	str	r3, [sp, #68]	@ 0x44
 800f6e2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f6e6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800f6ea:	f7ff f8f1 	bl	800e8d0 <__ulp>
 800f6ee:	4650      	mov	r0, sl
 800f6f0:	ec53 2b10 	vmov	r2, r3, d0
 800f6f4:	4659      	mov	r1, fp
 800f6f6:	f7f0 ff9f 	bl	8000638 <__aeabi_dmul>
 800f6fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f6fe:	f7f0 fde5 	bl	80002cc <__adddf3>
 800f702:	4682      	mov	sl, r0
 800f704:	468b      	mov	fp, r1
 800f706:	e770      	b.n	800f5ea <_strtod_l+0xa62>
 800f708:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800f70c:	e7e0      	b.n	800f6d0 <_strtod_l+0xb48>
 800f70e:	a30e      	add	r3, pc, #56	@ (adr r3, 800f748 <_strtod_l+0xbc0>)
 800f710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f714:	f7f1 fa02 	bl	8000b1c <__aeabi_dcmplt>
 800f718:	e798      	b.n	800f64c <_strtod_l+0xac4>
 800f71a:	2300      	movs	r3, #0
 800f71c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f71e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800f720:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f722:	6013      	str	r3, [r2, #0]
 800f724:	f7ff ba6d 	b.w	800ec02 <_strtod_l+0x7a>
 800f728:	2a65      	cmp	r2, #101	@ 0x65
 800f72a:	f43f ab66 	beq.w	800edfa <_strtod_l+0x272>
 800f72e:	2a45      	cmp	r2, #69	@ 0x45
 800f730:	f43f ab63 	beq.w	800edfa <_strtod_l+0x272>
 800f734:	2301      	movs	r3, #1
 800f736:	f7ff bb9e 	b.w	800ee76 <_strtod_l+0x2ee>
 800f73a:	bf00      	nop
 800f73c:	f3af 8000 	nop.w
 800f740:	ffc00000 	.word	0xffc00000
 800f744:	41dfffff 	.word	0x41dfffff
 800f748:	94a03595 	.word	0x94a03595
 800f74c:	3fcfffff 	.word	0x3fcfffff

0800f750 <_strtod_r>:
 800f750:	4b01      	ldr	r3, [pc, #4]	@ (800f758 <_strtod_r+0x8>)
 800f752:	f7ff ba19 	b.w	800eb88 <_strtod_l>
 800f756:	bf00      	nop
 800f758:	20000168 	.word	0x20000168

0800f75c <_strtol_l.constprop.0>:
 800f75c:	2b24      	cmp	r3, #36	@ 0x24
 800f75e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f762:	4686      	mov	lr, r0
 800f764:	4690      	mov	r8, r2
 800f766:	d801      	bhi.n	800f76c <_strtol_l.constprop.0+0x10>
 800f768:	2b01      	cmp	r3, #1
 800f76a:	d106      	bne.n	800f77a <_strtol_l.constprop.0+0x1e>
 800f76c:	f7fd fdba 	bl	800d2e4 <__errno>
 800f770:	2316      	movs	r3, #22
 800f772:	6003      	str	r3, [r0, #0]
 800f774:	2000      	movs	r0, #0
 800f776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f77a:	4834      	ldr	r0, [pc, #208]	@ (800f84c <_strtol_l.constprop.0+0xf0>)
 800f77c:	460d      	mov	r5, r1
 800f77e:	462a      	mov	r2, r5
 800f780:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f784:	5d06      	ldrb	r6, [r0, r4]
 800f786:	f016 0608 	ands.w	r6, r6, #8
 800f78a:	d1f8      	bne.n	800f77e <_strtol_l.constprop.0+0x22>
 800f78c:	2c2d      	cmp	r4, #45	@ 0x2d
 800f78e:	d12d      	bne.n	800f7ec <_strtol_l.constprop.0+0x90>
 800f790:	782c      	ldrb	r4, [r5, #0]
 800f792:	2601      	movs	r6, #1
 800f794:	1c95      	adds	r5, r2, #2
 800f796:	f033 0210 	bics.w	r2, r3, #16
 800f79a:	d109      	bne.n	800f7b0 <_strtol_l.constprop.0+0x54>
 800f79c:	2c30      	cmp	r4, #48	@ 0x30
 800f79e:	d12a      	bne.n	800f7f6 <_strtol_l.constprop.0+0x9a>
 800f7a0:	782a      	ldrb	r2, [r5, #0]
 800f7a2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f7a6:	2a58      	cmp	r2, #88	@ 0x58
 800f7a8:	d125      	bne.n	800f7f6 <_strtol_l.constprop.0+0x9a>
 800f7aa:	786c      	ldrb	r4, [r5, #1]
 800f7ac:	2310      	movs	r3, #16
 800f7ae:	3502      	adds	r5, #2
 800f7b0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f7b4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f7b8:	2200      	movs	r2, #0
 800f7ba:	fbbc f9f3 	udiv	r9, ip, r3
 800f7be:	4610      	mov	r0, r2
 800f7c0:	fb03 ca19 	mls	sl, r3, r9, ip
 800f7c4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f7c8:	2f09      	cmp	r7, #9
 800f7ca:	d81b      	bhi.n	800f804 <_strtol_l.constprop.0+0xa8>
 800f7cc:	463c      	mov	r4, r7
 800f7ce:	42a3      	cmp	r3, r4
 800f7d0:	dd27      	ble.n	800f822 <_strtol_l.constprop.0+0xc6>
 800f7d2:	1c57      	adds	r7, r2, #1
 800f7d4:	d007      	beq.n	800f7e6 <_strtol_l.constprop.0+0x8a>
 800f7d6:	4581      	cmp	r9, r0
 800f7d8:	d320      	bcc.n	800f81c <_strtol_l.constprop.0+0xc0>
 800f7da:	d101      	bne.n	800f7e0 <_strtol_l.constprop.0+0x84>
 800f7dc:	45a2      	cmp	sl, r4
 800f7de:	db1d      	blt.n	800f81c <_strtol_l.constprop.0+0xc0>
 800f7e0:	fb00 4003 	mla	r0, r0, r3, r4
 800f7e4:	2201      	movs	r2, #1
 800f7e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f7ea:	e7eb      	b.n	800f7c4 <_strtol_l.constprop.0+0x68>
 800f7ec:	2c2b      	cmp	r4, #43	@ 0x2b
 800f7ee:	bf04      	itt	eq
 800f7f0:	782c      	ldrbeq	r4, [r5, #0]
 800f7f2:	1c95      	addeq	r5, r2, #2
 800f7f4:	e7cf      	b.n	800f796 <_strtol_l.constprop.0+0x3a>
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d1da      	bne.n	800f7b0 <_strtol_l.constprop.0+0x54>
 800f7fa:	2c30      	cmp	r4, #48	@ 0x30
 800f7fc:	bf0c      	ite	eq
 800f7fe:	2308      	moveq	r3, #8
 800f800:	230a      	movne	r3, #10
 800f802:	e7d5      	b.n	800f7b0 <_strtol_l.constprop.0+0x54>
 800f804:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800f808:	2f19      	cmp	r7, #25
 800f80a:	d801      	bhi.n	800f810 <_strtol_l.constprop.0+0xb4>
 800f80c:	3c37      	subs	r4, #55	@ 0x37
 800f80e:	e7de      	b.n	800f7ce <_strtol_l.constprop.0+0x72>
 800f810:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f814:	2f19      	cmp	r7, #25
 800f816:	d804      	bhi.n	800f822 <_strtol_l.constprop.0+0xc6>
 800f818:	3c57      	subs	r4, #87	@ 0x57
 800f81a:	e7d8      	b.n	800f7ce <_strtol_l.constprop.0+0x72>
 800f81c:	f04f 32ff 	mov.w	r2, #4294967295
 800f820:	e7e1      	b.n	800f7e6 <_strtol_l.constprop.0+0x8a>
 800f822:	1c53      	adds	r3, r2, #1
 800f824:	d108      	bne.n	800f838 <_strtol_l.constprop.0+0xdc>
 800f826:	2322      	movs	r3, #34	@ 0x22
 800f828:	f8ce 3000 	str.w	r3, [lr]
 800f82c:	4660      	mov	r0, ip
 800f82e:	f1b8 0f00 	cmp.w	r8, #0
 800f832:	d0a0      	beq.n	800f776 <_strtol_l.constprop.0+0x1a>
 800f834:	1e69      	subs	r1, r5, #1
 800f836:	e006      	b.n	800f846 <_strtol_l.constprop.0+0xea>
 800f838:	b106      	cbz	r6, 800f83c <_strtol_l.constprop.0+0xe0>
 800f83a:	4240      	negs	r0, r0
 800f83c:	f1b8 0f00 	cmp.w	r8, #0
 800f840:	d099      	beq.n	800f776 <_strtol_l.constprop.0+0x1a>
 800f842:	2a00      	cmp	r2, #0
 800f844:	d1f6      	bne.n	800f834 <_strtol_l.constprop.0+0xd8>
 800f846:	f8c8 1000 	str.w	r1, [r8]
 800f84a:	e794      	b.n	800f776 <_strtol_l.constprop.0+0x1a>
 800f84c:	08010fb9 	.word	0x08010fb9

0800f850 <_strtol_r>:
 800f850:	f7ff bf84 	b.w	800f75c <_strtol_l.constprop.0>

0800f854 <__ssputs_r>:
 800f854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f858:	688e      	ldr	r6, [r1, #8]
 800f85a:	461f      	mov	r7, r3
 800f85c:	42be      	cmp	r6, r7
 800f85e:	680b      	ldr	r3, [r1, #0]
 800f860:	4682      	mov	sl, r0
 800f862:	460c      	mov	r4, r1
 800f864:	4690      	mov	r8, r2
 800f866:	d82d      	bhi.n	800f8c4 <__ssputs_r+0x70>
 800f868:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f86c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f870:	d026      	beq.n	800f8c0 <__ssputs_r+0x6c>
 800f872:	6965      	ldr	r5, [r4, #20]
 800f874:	6909      	ldr	r1, [r1, #16]
 800f876:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f87a:	eba3 0901 	sub.w	r9, r3, r1
 800f87e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f882:	1c7b      	adds	r3, r7, #1
 800f884:	444b      	add	r3, r9
 800f886:	106d      	asrs	r5, r5, #1
 800f888:	429d      	cmp	r5, r3
 800f88a:	bf38      	it	cc
 800f88c:	461d      	movcc	r5, r3
 800f88e:	0553      	lsls	r3, r2, #21
 800f890:	d527      	bpl.n	800f8e2 <__ssputs_r+0x8e>
 800f892:	4629      	mov	r1, r5
 800f894:	f7fe fc1c 	bl	800e0d0 <_malloc_r>
 800f898:	4606      	mov	r6, r0
 800f89a:	b360      	cbz	r0, 800f8f6 <__ssputs_r+0xa2>
 800f89c:	6921      	ldr	r1, [r4, #16]
 800f89e:	464a      	mov	r2, r9
 800f8a0:	f000 fbde 	bl	8010060 <memcpy>
 800f8a4:	89a3      	ldrh	r3, [r4, #12]
 800f8a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f8aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f8ae:	81a3      	strh	r3, [r4, #12]
 800f8b0:	6126      	str	r6, [r4, #16]
 800f8b2:	6165      	str	r5, [r4, #20]
 800f8b4:	444e      	add	r6, r9
 800f8b6:	eba5 0509 	sub.w	r5, r5, r9
 800f8ba:	6026      	str	r6, [r4, #0]
 800f8bc:	60a5      	str	r5, [r4, #8]
 800f8be:	463e      	mov	r6, r7
 800f8c0:	42be      	cmp	r6, r7
 800f8c2:	d900      	bls.n	800f8c6 <__ssputs_r+0x72>
 800f8c4:	463e      	mov	r6, r7
 800f8c6:	6820      	ldr	r0, [r4, #0]
 800f8c8:	4632      	mov	r2, r6
 800f8ca:	4641      	mov	r1, r8
 800f8cc:	f000 fb6a 	bl	800ffa4 <memmove>
 800f8d0:	68a3      	ldr	r3, [r4, #8]
 800f8d2:	1b9b      	subs	r3, r3, r6
 800f8d4:	60a3      	str	r3, [r4, #8]
 800f8d6:	6823      	ldr	r3, [r4, #0]
 800f8d8:	4433      	add	r3, r6
 800f8da:	6023      	str	r3, [r4, #0]
 800f8dc:	2000      	movs	r0, #0
 800f8de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8e2:	462a      	mov	r2, r5
 800f8e4:	f000 ff51 	bl	801078a <_realloc_r>
 800f8e8:	4606      	mov	r6, r0
 800f8ea:	2800      	cmp	r0, #0
 800f8ec:	d1e0      	bne.n	800f8b0 <__ssputs_r+0x5c>
 800f8ee:	6921      	ldr	r1, [r4, #16]
 800f8f0:	4650      	mov	r0, sl
 800f8f2:	f7fe fb79 	bl	800dfe8 <_free_r>
 800f8f6:	230c      	movs	r3, #12
 800f8f8:	f8ca 3000 	str.w	r3, [sl]
 800f8fc:	89a3      	ldrh	r3, [r4, #12]
 800f8fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f902:	81a3      	strh	r3, [r4, #12]
 800f904:	f04f 30ff 	mov.w	r0, #4294967295
 800f908:	e7e9      	b.n	800f8de <__ssputs_r+0x8a>
	...

0800f90c <_svfiprintf_r>:
 800f90c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f910:	4698      	mov	r8, r3
 800f912:	898b      	ldrh	r3, [r1, #12]
 800f914:	061b      	lsls	r3, r3, #24
 800f916:	b09d      	sub	sp, #116	@ 0x74
 800f918:	4607      	mov	r7, r0
 800f91a:	460d      	mov	r5, r1
 800f91c:	4614      	mov	r4, r2
 800f91e:	d510      	bpl.n	800f942 <_svfiprintf_r+0x36>
 800f920:	690b      	ldr	r3, [r1, #16]
 800f922:	b973      	cbnz	r3, 800f942 <_svfiprintf_r+0x36>
 800f924:	2140      	movs	r1, #64	@ 0x40
 800f926:	f7fe fbd3 	bl	800e0d0 <_malloc_r>
 800f92a:	6028      	str	r0, [r5, #0]
 800f92c:	6128      	str	r0, [r5, #16]
 800f92e:	b930      	cbnz	r0, 800f93e <_svfiprintf_r+0x32>
 800f930:	230c      	movs	r3, #12
 800f932:	603b      	str	r3, [r7, #0]
 800f934:	f04f 30ff 	mov.w	r0, #4294967295
 800f938:	b01d      	add	sp, #116	@ 0x74
 800f93a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f93e:	2340      	movs	r3, #64	@ 0x40
 800f940:	616b      	str	r3, [r5, #20]
 800f942:	2300      	movs	r3, #0
 800f944:	9309      	str	r3, [sp, #36]	@ 0x24
 800f946:	2320      	movs	r3, #32
 800f948:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f94c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f950:	2330      	movs	r3, #48	@ 0x30
 800f952:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800faf0 <_svfiprintf_r+0x1e4>
 800f956:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f95a:	f04f 0901 	mov.w	r9, #1
 800f95e:	4623      	mov	r3, r4
 800f960:	469a      	mov	sl, r3
 800f962:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f966:	b10a      	cbz	r2, 800f96c <_svfiprintf_r+0x60>
 800f968:	2a25      	cmp	r2, #37	@ 0x25
 800f96a:	d1f9      	bne.n	800f960 <_svfiprintf_r+0x54>
 800f96c:	ebba 0b04 	subs.w	fp, sl, r4
 800f970:	d00b      	beq.n	800f98a <_svfiprintf_r+0x7e>
 800f972:	465b      	mov	r3, fp
 800f974:	4622      	mov	r2, r4
 800f976:	4629      	mov	r1, r5
 800f978:	4638      	mov	r0, r7
 800f97a:	f7ff ff6b 	bl	800f854 <__ssputs_r>
 800f97e:	3001      	adds	r0, #1
 800f980:	f000 80a7 	beq.w	800fad2 <_svfiprintf_r+0x1c6>
 800f984:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f986:	445a      	add	r2, fp
 800f988:	9209      	str	r2, [sp, #36]	@ 0x24
 800f98a:	f89a 3000 	ldrb.w	r3, [sl]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	f000 809f 	beq.w	800fad2 <_svfiprintf_r+0x1c6>
 800f994:	2300      	movs	r3, #0
 800f996:	f04f 32ff 	mov.w	r2, #4294967295
 800f99a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f99e:	f10a 0a01 	add.w	sl, sl, #1
 800f9a2:	9304      	str	r3, [sp, #16]
 800f9a4:	9307      	str	r3, [sp, #28]
 800f9a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f9aa:	931a      	str	r3, [sp, #104]	@ 0x68
 800f9ac:	4654      	mov	r4, sl
 800f9ae:	2205      	movs	r2, #5
 800f9b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9b4:	484e      	ldr	r0, [pc, #312]	@ (800faf0 <_svfiprintf_r+0x1e4>)
 800f9b6:	f7f0 fc2b 	bl	8000210 <memchr>
 800f9ba:	9a04      	ldr	r2, [sp, #16]
 800f9bc:	b9d8      	cbnz	r0, 800f9f6 <_svfiprintf_r+0xea>
 800f9be:	06d0      	lsls	r0, r2, #27
 800f9c0:	bf44      	itt	mi
 800f9c2:	2320      	movmi	r3, #32
 800f9c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f9c8:	0711      	lsls	r1, r2, #28
 800f9ca:	bf44      	itt	mi
 800f9cc:	232b      	movmi	r3, #43	@ 0x2b
 800f9ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f9d2:	f89a 3000 	ldrb.w	r3, [sl]
 800f9d6:	2b2a      	cmp	r3, #42	@ 0x2a
 800f9d8:	d015      	beq.n	800fa06 <_svfiprintf_r+0xfa>
 800f9da:	9a07      	ldr	r2, [sp, #28]
 800f9dc:	4654      	mov	r4, sl
 800f9de:	2000      	movs	r0, #0
 800f9e0:	f04f 0c0a 	mov.w	ip, #10
 800f9e4:	4621      	mov	r1, r4
 800f9e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f9ea:	3b30      	subs	r3, #48	@ 0x30
 800f9ec:	2b09      	cmp	r3, #9
 800f9ee:	d94b      	bls.n	800fa88 <_svfiprintf_r+0x17c>
 800f9f0:	b1b0      	cbz	r0, 800fa20 <_svfiprintf_r+0x114>
 800f9f2:	9207      	str	r2, [sp, #28]
 800f9f4:	e014      	b.n	800fa20 <_svfiprintf_r+0x114>
 800f9f6:	eba0 0308 	sub.w	r3, r0, r8
 800f9fa:	fa09 f303 	lsl.w	r3, r9, r3
 800f9fe:	4313      	orrs	r3, r2
 800fa00:	9304      	str	r3, [sp, #16]
 800fa02:	46a2      	mov	sl, r4
 800fa04:	e7d2      	b.n	800f9ac <_svfiprintf_r+0xa0>
 800fa06:	9b03      	ldr	r3, [sp, #12]
 800fa08:	1d19      	adds	r1, r3, #4
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	9103      	str	r1, [sp, #12]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	bfbb      	ittet	lt
 800fa12:	425b      	neglt	r3, r3
 800fa14:	f042 0202 	orrlt.w	r2, r2, #2
 800fa18:	9307      	strge	r3, [sp, #28]
 800fa1a:	9307      	strlt	r3, [sp, #28]
 800fa1c:	bfb8      	it	lt
 800fa1e:	9204      	strlt	r2, [sp, #16]
 800fa20:	7823      	ldrb	r3, [r4, #0]
 800fa22:	2b2e      	cmp	r3, #46	@ 0x2e
 800fa24:	d10a      	bne.n	800fa3c <_svfiprintf_r+0x130>
 800fa26:	7863      	ldrb	r3, [r4, #1]
 800fa28:	2b2a      	cmp	r3, #42	@ 0x2a
 800fa2a:	d132      	bne.n	800fa92 <_svfiprintf_r+0x186>
 800fa2c:	9b03      	ldr	r3, [sp, #12]
 800fa2e:	1d1a      	adds	r2, r3, #4
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	9203      	str	r2, [sp, #12]
 800fa34:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fa38:	3402      	adds	r4, #2
 800fa3a:	9305      	str	r3, [sp, #20]
 800fa3c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800fb00 <_svfiprintf_r+0x1f4>
 800fa40:	7821      	ldrb	r1, [r4, #0]
 800fa42:	2203      	movs	r2, #3
 800fa44:	4650      	mov	r0, sl
 800fa46:	f7f0 fbe3 	bl	8000210 <memchr>
 800fa4a:	b138      	cbz	r0, 800fa5c <_svfiprintf_r+0x150>
 800fa4c:	9b04      	ldr	r3, [sp, #16]
 800fa4e:	eba0 000a 	sub.w	r0, r0, sl
 800fa52:	2240      	movs	r2, #64	@ 0x40
 800fa54:	4082      	lsls	r2, r0
 800fa56:	4313      	orrs	r3, r2
 800fa58:	3401      	adds	r4, #1
 800fa5a:	9304      	str	r3, [sp, #16]
 800fa5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa60:	4824      	ldr	r0, [pc, #144]	@ (800faf4 <_svfiprintf_r+0x1e8>)
 800fa62:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fa66:	2206      	movs	r2, #6
 800fa68:	f7f0 fbd2 	bl	8000210 <memchr>
 800fa6c:	2800      	cmp	r0, #0
 800fa6e:	d036      	beq.n	800fade <_svfiprintf_r+0x1d2>
 800fa70:	4b21      	ldr	r3, [pc, #132]	@ (800faf8 <_svfiprintf_r+0x1ec>)
 800fa72:	bb1b      	cbnz	r3, 800fabc <_svfiprintf_r+0x1b0>
 800fa74:	9b03      	ldr	r3, [sp, #12]
 800fa76:	3307      	adds	r3, #7
 800fa78:	f023 0307 	bic.w	r3, r3, #7
 800fa7c:	3308      	adds	r3, #8
 800fa7e:	9303      	str	r3, [sp, #12]
 800fa80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa82:	4433      	add	r3, r6
 800fa84:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa86:	e76a      	b.n	800f95e <_svfiprintf_r+0x52>
 800fa88:	fb0c 3202 	mla	r2, ip, r2, r3
 800fa8c:	460c      	mov	r4, r1
 800fa8e:	2001      	movs	r0, #1
 800fa90:	e7a8      	b.n	800f9e4 <_svfiprintf_r+0xd8>
 800fa92:	2300      	movs	r3, #0
 800fa94:	3401      	adds	r4, #1
 800fa96:	9305      	str	r3, [sp, #20]
 800fa98:	4619      	mov	r1, r3
 800fa9a:	f04f 0c0a 	mov.w	ip, #10
 800fa9e:	4620      	mov	r0, r4
 800faa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800faa4:	3a30      	subs	r2, #48	@ 0x30
 800faa6:	2a09      	cmp	r2, #9
 800faa8:	d903      	bls.n	800fab2 <_svfiprintf_r+0x1a6>
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d0c6      	beq.n	800fa3c <_svfiprintf_r+0x130>
 800faae:	9105      	str	r1, [sp, #20]
 800fab0:	e7c4      	b.n	800fa3c <_svfiprintf_r+0x130>
 800fab2:	fb0c 2101 	mla	r1, ip, r1, r2
 800fab6:	4604      	mov	r4, r0
 800fab8:	2301      	movs	r3, #1
 800faba:	e7f0      	b.n	800fa9e <_svfiprintf_r+0x192>
 800fabc:	ab03      	add	r3, sp, #12
 800fabe:	9300      	str	r3, [sp, #0]
 800fac0:	462a      	mov	r2, r5
 800fac2:	4b0e      	ldr	r3, [pc, #56]	@ (800fafc <_svfiprintf_r+0x1f0>)
 800fac4:	a904      	add	r1, sp, #16
 800fac6:	4638      	mov	r0, r7
 800fac8:	f7fc fc22 	bl	800c310 <_printf_float>
 800facc:	1c42      	adds	r2, r0, #1
 800face:	4606      	mov	r6, r0
 800fad0:	d1d6      	bne.n	800fa80 <_svfiprintf_r+0x174>
 800fad2:	89ab      	ldrh	r3, [r5, #12]
 800fad4:	065b      	lsls	r3, r3, #25
 800fad6:	f53f af2d 	bmi.w	800f934 <_svfiprintf_r+0x28>
 800fada:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fadc:	e72c      	b.n	800f938 <_svfiprintf_r+0x2c>
 800fade:	ab03      	add	r3, sp, #12
 800fae0:	9300      	str	r3, [sp, #0]
 800fae2:	462a      	mov	r2, r5
 800fae4:	4b05      	ldr	r3, [pc, #20]	@ (800fafc <_svfiprintf_r+0x1f0>)
 800fae6:	a904      	add	r1, sp, #16
 800fae8:	4638      	mov	r0, r7
 800faea:	f7fc fea9 	bl	800c840 <_printf_i>
 800faee:	e7ed      	b.n	800facc <_svfiprintf_r+0x1c0>
 800faf0:	080110b9 	.word	0x080110b9
 800faf4:	080110c3 	.word	0x080110c3
 800faf8:	0800c311 	.word	0x0800c311
 800fafc:	0800f855 	.word	0x0800f855
 800fb00:	080110bf 	.word	0x080110bf

0800fb04 <__sfputc_r>:
 800fb04:	6893      	ldr	r3, [r2, #8]
 800fb06:	3b01      	subs	r3, #1
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	b410      	push	{r4}
 800fb0c:	6093      	str	r3, [r2, #8]
 800fb0e:	da08      	bge.n	800fb22 <__sfputc_r+0x1e>
 800fb10:	6994      	ldr	r4, [r2, #24]
 800fb12:	42a3      	cmp	r3, r4
 800fb14:	db01      	blt.n	800fb1a <__sfputc_r+0x16>
 800fb16:	290a      	cmp	r1, #10
 800fb18:	d103      	bne.n	800fb22 <__sfputc_r+0x1e>
 800fb1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb1e:	f7fd bafa 	b.w	800d116 <__swbuf_r>
 800fb22:	6813      	ldr	r3, [r2, #0]
 800fb24:	1c58      	adds	r0, r3, #1
 800fb26:	6010      	str	r0, [r2, #0]
 800fb28:	7019      	strb	r1, [r3, #0]
 800fb2a:	4608      	mov	r0, r1
 800fb2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb30:	4770      	bx	lr

0800fb32 <__sfputs_r>:
 800fb32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb34:	4606      	mov	r6, r0
 800fb36:	460f      	mov	r7, r1
 800fb38:	4614      	mov	r4, r2
 800fb3a:	18d5      	adds	r5, r2, r3
 800fb3c:	42ac      	cmp	r4, r5
 800fb3e:	d101      	bne.n	800fb44 <__sfputs_r+0x12>
 800fb40:	2000      	movs	r0, #0
 800fb42:	e007      	b.n	800fb54 <__sfputs_r+0x22>
 800fb44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb48:	463a      	mov	r2, r7
 800fb4a:	4630      	mov	r0, r6
 800fb4c:	f7ff ffda 	bl	800fb04 <__sfputc_r>
 800fb50:	1c43      	adds	r3, r0, #1
 800fb52:	d1f3      	bne.n	800fb3c <__sfputs_r+0xa>
 800fb54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fb58 <_vfiprintf_r>:
 800fb58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb5c:	460d      	mov	r5, r1
 800fb5e:	b09d      	sub	sp, #116	@ 0x74
 800fb60:	4614      	mov	r4, r2
 800fb62:	4698      	mov	r8, r3
 800fb64:	4606      	mov	r6, r0
 800fb66:	b118      	cbz	r0, 800fb70 <_vfiprintf_r+0x18>
 800fb68:	6a03      	ldr	r3, [r0, #32]
 800fb6a:	b90b      	cbnz	r3, 800fb70 <_vfiprintf_r+0x18>
 800fb6c:	f7fd fa28 	bl	800cfc0 <__sinit>
 800fb70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fb72:	07d9      	lsls	r1, r3, #31
 800fb74:	d405      	bmi.n	800fb82 <_vfiprintf_r+0x2a>
 800fb76:	89ab      	ldrh	r3, [r5, #12]
 800fb78:	059a      	lsls	r2, r3, #22
 800fb7a:	d402      	bmi.n	800fb82 <_vfiprintf_r+0x2a>
 800fb7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fb7e:	f7fd fbdc 	bl	800d33a <__retarget_lock_acquire_recursive>
 800fb82:	89ab      	ldrh	r3, [r5, #12]
 800fb84:	071b      	lsls	r3, r3, #28
 800fb86:	d501      	bpl.n	800fb8c <_vfiprintf_r+0x34>
 800fb88:	692b      	ldr	r3, [r5, #16]
 800fb8a:	b99b      	cbnz	r3, 800fbb4 <_vfiprintf_r+0x5c>
 800fb8c:	4629      	mov	r1, r5
 800fb8e:	4630      	mov	r0, r6
 800fb90:	f7fd fb00 	bl	800d194 <__swsetup_r>
 800fb94:	b170      	cbz	r0, 800fbb4 <_vfiprintf_r+0x5c>
 800fb96:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fb98:	07dc      	lsls	r4, r3, #31
 800fb9a:	d504      	bpl.n	800fba6 <_vfiprintf_r+0x4e>
 800fb9c:	f04f 30ff 	mov.w	r0, #4294967295
 800fba0:	b01d      	add	sp, #116	@ 0x74
 800fba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fba6:	89ab      	ldrh	r3, [r5, #12]
 800fba8:	0598      	lsls	r0, r3, #22
 800fbaa:	d4f7      	bmi.n	800fb9c <_vfiprintf_r+0x44>
 800fbac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fbae:	f7fd fbc5 	bl	800d33c <__retarget_lock_release_recursive>
 800fbb2:	e7f3      	b.n	800fb9c <_vfiprintf_r+0x44>
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	9309      	str	r3, [sp, #36]	@ 0x24
 800fbb8:	2320      	movs	r3, #32
 800fbba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fbbe:	f8cd 800c 	str.w	r8, [sp, #12]
 800fbc2:	2330      	movs	r3, #48	@ 0x30
 800fbc4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fd74 <_vfiprintf_r+0x21c>
 800fbc8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fbcc:	f04f 0901 	mov.w	r9, #1
 800fbd0:	4623      	mov	r3, r4
 800fbd2:	469a      	mov	sl, r3
 800fbd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fbd8:	b10a      	cbz	r2, 800fbde <_vfiprintf_r+0x86>
 800fbda:	2a25      	cmp	r2, #37	@ 0x25
 800fbdc:	d1f9      	bne.n	800fbd2 <_vfiprintf_r+0x7a>
 800fbde:	ebba 0b04 	subs.w	fp, sl, r4
 800fbe2:	d00b      	beq.n	800fbfc <_vfiprintf_r+0xa4>
 800fbe4:	465b      	mov	r3, fp
 800fbe6:	4622      	mov	r2, r4
 800fbe8:	4629      	mov	r1, r5
 800fbea:	4630      	mov	r0, r6
 800fbec:	f7ff ffa1 	bl	800fb32 <__sfputs_r>
 800fbf0:	3001      	adds	r0, #1
 800fbf2:	f000 80a7 	beq.w	800fd44 <_vfiprintf_r+0x1ec>
 800fbf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fbf8:	445a      	add	r2, fp
 800fbfa:	9209      	str	r2, [sp, #36]	@ 0x24
 800fbfc:	f89a 3000 	ldrb.w	r3, [sl]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	f000 809f 	beq.w	800fd44 <_vfiprintf_r+0x1ec>
 800fc06:	2300      	movs	r3, #0
 800fc08:	f04f 32ff 	mov.w	r2, #4294967295
 800fc0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fc10:	f10a 0a01 	add.w	sl, sl, #1
 800fc14:	9304      	str	r3, [sp, #16]
 800fc16:	9307      	str	r3, [sp, #28]
 800fc18:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fc1c:	931a      	str	r3, [sp, #104]	@ 0x68
 800fc1e:	4654      	mov	r4, sl
 800fc20:	2205      	movs	r2, #5
 800fc22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc26:	4853      	ldr	r0, [pc, #332]	@ (800fd74 <_vfiprintf_r+0x21c>)
 800fc28:	f7f0 faf2 	bl	8000210 <memchr>
 800fc2c:	9a04      	ldr	r2, [sp, #16]
 800fc2e:	b9d8      	cbnz	r0, 800fc68 <_vfiprintf_r+0x110>
 800fc30:	06d1      	lsls	r1, r2, #27
 800fc32:	bf44      	itt	mi
 800fc34:	2320      	movmi	r3, #32
 800fc36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fc3a:	0713      	lsls	r3, r2, #28
 800fc3c:	bf44      	itt	mi
 800fc3e:	232b      	movmi	r3, #43	@ 0x2b
 800fc40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fc44:	f89a 3000 	ldrb.w	r3, [sl]
 800fc48:	2b2a      	cmp	r3, #42	@ 0x2a
 800fc4a:	d015      	beq.n	800fc78 <_vfiprintf_r+0x120>
 800fc4c:	9a07      	ldr	r2, [sp, #28]
 800fc4e:	4654      	mov	r4, sl
 800fc50:	2000      	movs	r0, #0
 800fc52:	f04f 0c0a 	mov.w	ip, #10
 800fc56:	4621      	mov	r1, r4
 800fc58:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fc5c:	3b30      	subs	r3, #48	@ 0x30
 800fc5e:	2b09      	cmp	r3, #9
 800fc60:	d94b      	bls.n	800fcfa <_vfiprintf_r+0x1a2>
 800fc62:	b1b0      	cbz	r0, 800fc92 <_vfiprintf_r+0x13a>
 800fc64:	9207      	str	r2, [sp, #28]
 800fc66:	e014      	b.n	800fc92 <_vfiprintf_r+0x13a>
 800fc68:	eba0 0308 	sub.w	r3, r0, r8
 800fc6c:	fa09 f303 	lsl.w	r3, r9, r3
 800fc70:	4313      	orrs	r3, r2
 800fc72:	9304      	str	r3, [sp, #16]
 800fc74:	46a2      	mov	sl, r4
 800fc76:	e7d2      	b.n	800fc1e <_vfiprintf_r+0xc6>
 800fc78:	9b03      	ldr	r3, [sp, #12]
 800fc7a:	1d19      	adds	r1, r3, #4
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	9103      	str	r1, [sp, #12]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	bfbb      	ittet	lt
 800fc84:	425b      	neglt	r3, r3
 800fc86:	f042 0202 	orrlt.w	r2, r2, #2
 800fc8a:	9307      	strge	r3, [sp, #28]
 800fc8c:	9307      	strlt	r3, [sp, #28]
 800fc8e:	bfb8      	it	lt
 800fc90:	9204      	strlt	r2, [sp, #16]
 800fc92:	7823      	ldrb	r3, [r4, #0]
 800fc94:	2b2e      	cmp	r3, #46	@ 0x2e
 800fc96:	d10a      	bne.n	800fcae <_vfiprintf_r+0x156>
 800fc98:	7863      	ldrb	r3, [r4, #1]
 800fc9a:	2b2a      	cmp	r3, #42	@ 0x2a
 800fc9c:	d132      	bne.n	800fd04 <_vfiprintf_r+0x1ac>
 800fc9e:	9b03      	ldr	r3, [sp, #12]
 800fca0:	1d1a      	adds	r2, r3, #4
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	9203      	str	r2, [sp, #12]
 800fca6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fcaa:	3402      	adds	r4, #2
 800fcac:	9305      	str	r3, [sp, #20]
 800fcae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fd84 <_vfiprintf_r+0x22c>
 800fcb2:	7821      	ldrb	r1, [r4, #0]
 800fcb4:	2203      	movs	r2, #3
 800fcb6:	4650      	mov	r0, sl
 800fcb8:	f7f0 faaa 	bl	8000210 <memchr>
 800fcbc:	b138      	cbz	r0, 800fcce <_vfiprintf_r+0x176>
 800fcbe:	9b04      	ldr	r3, [sp, #16]
 800fcc0:	eba0 000a 	sub.w	r0, r0, sl
 800fcc4:	2240      	movs	r2, #64	@ 0x40
 800fcc6:	4082      	lsls	r2, r0
 800fcc8:	4313      	orrs	r3, r2
 800fcca:	3401      	adds	r4, #1
 800fccc:	9304      	str	r3, [sp, #16]
 800fcce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fcd2:	4829      	ldr	r0, [pc, #164]	@ (800fd78 <_vfiprintf_r+0x220>)
 800fcd4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fcd8:	2206      	movs	r2, #6
 800fcda:	f7f0 fa99 	bl	8000210 <memchr>
 800fcde:	2800      	cmp	r0, #0
 800fce0:	d03f      	beq.n	800fd62 <_vfiprintf_r+0x20a>
 800fce2:	4b26      	ldr	r3, [pc, #152]	@ (800fd7c <_vfiprintf_r+0x224>)
 800fce4:	bb1b      	cbnz	r3, 800fd2e <_vfiprintf_r+0x1d6>
 800fce6:	9b03      	ldr	r3, [sp, #12]
 800fce8:	3307      	adds	r3, #7
 800fcea:	f023 0307 	bic.w	r3, r3, #7
 800fcee:	3308      	adds	r3, #8
 800fcf0:	9303      	str	r3, [sp, #12]
 800fcf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fcf4:	443b      	add	r3, r7
 800fcf6:	9309      	str	r3, [sp, #36]	@ 0x24
 800fcf8:	e76a      	b.n	800fbd0 <_vfiprintf_r+0x78>
 800fcfa:	fb0c 3202 	mla	r2, ip, r2, r3
 800fcfe:	460c      	mov	r4, r1
 800fd00:	2001      	movs	r0, #1
 800fd02:	e7a8      	b.n	800fc56 <_vfiprintf_r+0xfe>
 800fd04:	2300      	movs	r3, #0
 800fd06:	3401      	adds	r4, #1
 800fd08:	9305      	str	r3, [sp, #20]
 800fd0a:	4619      	mov	r1, r3
 800fd0c:	f04f 0c0a 	mov.w	ip, #10
 800fd10:	4620      	mov	r0, r4
 800fd12:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fd16:	3a30      	subs	r2, #48	@ 0x30
 800fd18:	2a09      	cmp	r2, #9
 800fd1a:	d903      	bls.n	800fd24 <_vfiprintf_r+0x1cc>
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d0c6      	beq.n	800fcae <_vfiprintf_r+0x156>
 800fd20:	9105      	str	r1, [sp, #20]
 800fd22:	e7c4      	b.n	800fcae <_vfiprintf_r+0x156>
 800fd24:	fb0c 2101 	mla	r1, ip, r1, r2
 800fd28:	4604      	mov	r4, r0
 800fd2a:	2301      	movs	r3, #1
 800fd2c:	e7f0      	b.n	800fd10 <_vfiprintf_r+0x1b8>
 800fd2e:	ab03      	add	r3, sp, #12
 800fd30:	9300      	str	r3, [sp, #0]
 800fd32:	462a      	mov	r2, r5
 800fd34:	4b12      	ldr	r3, [pc, #72]	@ (800fd80 <_vfiprintf_r+0x228>)
 800fd36:	a904      	add	r1, sp, #16
 800fd38:	4630      	mov	r0, r6
 800fd3a:	f7fc fae9 	bl	800c310 <_printf_float>
 800fd3e:	4607      	mov	r7, r0
 800fd40:	1c78      	adds	r0, r7, #1
 800fd42:	d1d6      	bne.n	800fcf2 <_vfiprintf_r+0x19a>
 800fd44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fd46:	07d9      	lsls	r1, r3, #31
 800fd48:	d405      	bmi.n	800fd56 <_vfiprintf_r+0x1fe>
 800fd4a:	89ab      	ldrh	r3, [r5, #12]
 800fd4c:	059a      	lsls	r2, r3, #22
 800fd4e:	d402      	bmi.n	800fd56 <_vfiprintf_r+0x1fe>
 800fd50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fd52:	f7fd faf3 	bl	800d33c <__retarget_lock_release_recursive>
 800fd56:	89ab      	ldrh	r3, [r5, #12]
 800fd58:	065b      	lsls	r3, r3, #25
 800fd5a:	f53f af1f 	bmi.w	800fb9c <_vfiprintf_r+0x44>
 800fd5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fd60:	e71e      	b.n	800fba0 <_vfiprintf_r+0x48>
 800fd62:	ab03      	add	r3, sp, #12
 800fd64:	9300      	str	r3, [sp, #0]
 800fd66:	462a      	mov	r2, r5
 800fd68:	4b05      	ldr	r3, [pc, #20]	@ (800fd80 <_vfiprintf_r+0x228>)
 800fd6a:	a904      	add	r1, sp, #16
 800fd6c:	4630      	mov	r0, r6
 800fd6e:	f7fc fd67 	bl	800c840 <_printf_i>
 800fd72:	e7e4      	b.n	800fd3e <_vfiprintf_r+0x1e6>
 800fd74:	080110b9 	.word	0x080110b9
 800fd78:	080110c3 	.word	0x080110c3
 800fd7c:	0800c311 	.word	0x0800c311
 800fd80:	0800fb33 	.word	0x0800fb33
 800fd84:	080110bf 	.word	0x080110bf

0800fd88 <__sflush_r>:
 800fd88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fd8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd90:	0716      	lsls	r6, r2, #28
 800fd92:	4605      	mov	r5, r0
 800fd94:	460c      	mov	r4, r1
 800fd96:	d454      	bmi.n	800fe42 <__sflush_r+0xba>
 800fd98:	684b      	ldr	r3, [r1, #4]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	dc02      	bgt.n	800fda4 <__sflush_r+0x1c>
 800fd9e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	dd48      	ble.n	800fe36 <__sflush_r+0xae>
 800fda4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fda6:	2e00      	cmp	r6, #0
 800fda8:	d045      	beq.n	800fe36 <__sflush_r+0xae>
 800fdaa:	2300      	movs	r3, #0
 800fdac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fdb0:	682f      	ldr	r7, [r5, #0]
 800fdb2:	6a21      	ldr	r1, [r4, #32]
 800fdb4:	602b      	str	r3, [r5, #0]
 800fdb6:	d030      	beq.n	800fe1a <__sflush_r+0x92>
 800fdb8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fdba:	89a3      	ldrh	r3, [r4, #12]
 800fdbc:	0759      	lsls	r1, r3, #29
 800fdbe:	d505      	bpl.n	800fdcc <__sflush_r+0x44>
 800fdc0:	6863      	ldr	r3, [r4, #4]
 800fdc2:	1ad2      	subs	r2, r2, r3
 800fdc4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fdc6:	b10b      	cbz	r3, 800fdcc <__sflush_r+0x44>
 800fdc8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fdca:	1ad2      	subs	r2, r2, r3
 800fdcc:	2300      	movs	r3, #0
 800fdce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fdd0:	6a21      	ldr	r1, [r4, #32]
 800fdd2:	4628      	mov	r0, r5
 800fdd4:	47b0      	blx	r6
 800fdd6:	1c43      	adds	r3, r0, #1
 800fdd8:	89a3      	ldrh	r3, [r4, #12]
 800fdda:	d106      	bne.n	800fdea <__sflush_r+0x62>
 800fddc:	6829      	ldr	r1, [r5, #0]
 800fdde:	291d      	cmp	r1, #29
 800fde0:	d82b      	bhi.n	800fe3a <__sflush_r+0xb2>
 800fde2:	4a2a      	ldr	r2, [pc, #168]	@ (800fe8c <__sflush_r+0x104>)
 800fde4:	410a      	asrs	r2, r1
 800fde6:	07d6      	lsls	r6, r2, #31
 800fde8:	d427      	bmi.n	800fe3a <__sflush_r+0xb2>
 800fdea:	2200      	movs	r2, #0
 800fdec:	6062      	str	r2, [r4, #4]
 800fdee:	04d9      	lsls	r1, r3, #19
 800fdf0:	6922      	ldr	r2, [r4, #16]
 800fdf2:	6022      	str	r2, [r4, #0]
 800fdf4:	d504      	bpl.n	800fe00 <__sflush_r+0x78>
 800fdf6:	1c42      	adds	r2, r0, #1
 800fdf8:	d101      	bne.n	800fdfe <__sflush_r+0x76>
 800fdfa:	682b      	ldr	r3, [r5, #0]
 800fdfc:	b903      	cbnz	r3, 800fe00 <__sflush_r+0x78>
 800fdfe:	6560      	str	r0, [r4, #84]	@ 0x54
 800fe00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fe02:	602f      	str	r7, [r5, #0]
 800fe04:	b1b9      	cbz	r1, 800fe36 <__sflush_r+0xae>
 800fe06:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fe0a:	4299      	cmp	r1, r3
 800fe0c:	d002      	beq.n	800fe14 <__sflush_r+0x8c>
 800fe0e:	4628      	mov	r0, r5
 800fe10:	f7fe f8ea 	bl	800dfe8 <_free_r>
 800fe14:	2300      	movs	r3, #0
 800fe16:	6363      	str	r3, [r4, #52]	@ 0x34
 800fe18:	e00d      	b.n	800fe36 <__sflush_r+0xae>
 800fe1a:	2301      	movs	r3, #1
 800fe1c:	4628      	mov	r0, r5
 800fe1e:	47b0      	blx	r6
 800fe20:	4602      	mov	r2, r0
 800fe22:	1c50      	adds	r0, r2, #1
 800fe24:	d1c9      	bne.n	800fdba <__sflush_r+0x32>
 800fe26:	682b      	ldr	r3, [r5, #0]
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d0c6      	beq.n	800fdba <__sflush_r+0x32>
 800fe2c:	2b1d      	cmp	r3, #29
 800fe2e:	d001      	beq.n	800fe34 <__sflush_r+0xac>
 800fe30:	2b16      	cmp	r3, #22
 800fe32:	d11e      	bne.n	800fe72 <__sflush_r+0xea>
 800fe34:	602f      	str	r7, [r5, #0]
 800fe36:	2000      	movs	r0, #0
 800fe38:	e022      	b.n	800fe80 <__sflush_r+0xf8>
 800fe3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fe3e:	b21b      	sxth	r3, r3
 800fe40:	e01b      	b.n	800fe7a <__sflush_r+0xf2>
 800fe42:	690f      	ldr	r7, [r1, #16]
 800fe44:	2f00      	cmp	r7, #0
 800fe46:	d0f6      	beq.n	800fe36 <__sflush_r+0xae>
 800fe48:	0793      	lsls	r3, r2, #30
 800fe4a:	680e      	ldr	r6, [r1, #0]
 800fe4c:	bf08      	it	eq
 800fe4e:	694b      	ldreq	r3, [r1, #20]
 800fe50:	600f      	str	r7, [r1, #0]
 800fe52:	bf18      	it	ne
 800fe54:	2300      	movne	r3, #0
 800fe56:	eba6 0807 	sub.w	r8, r6, r7
 800fe5a:	608b      	str	r3, [r1, #8]
 800fe5c:	f1b8 0f00 	cmp.w	r8, #0
 800fe60:	dde9      	ble.n	800fe36 <__sflush_r+0xae>
 800fe62:	6a21      	ldr	r1, [r4, #32]
 800fe64:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800fe66:	4643      	mov	r3, r8
 800fe68:	463a      	mov	r2, r7
 800fe6a:	4628      	mov	r0, r5
 800fe6c:	47b0      	blx	r6
 800fe6e:	2800      	cmp	r0, #0
 800fe70:	dc08      	bgt.n	800fe84 <__sflush_r+0xfc>
 800fe72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fe7a:	81a3      	strh	r3, [r4, #12]
 800fe7c:	f04f 30ff 	mov.w	r0, #4294967295
 800fe80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe84:	4407      	add	r7, r0
 800fe86:	eba8 0800 	sub.w	r8, r8, r0
 800fe8a:	e7e7      	b.n	800fe5c <__sflush_r+0xd4>
 800fe8c:	dfbffffe 	.word	0xdfbffffe

0800fe90 <_fflush_r>:
 800fe90:	b538      	push	{r3, r4, r5, lr}
 800fe92:	690b      	ldr	r3, [r1, #16]
 800fe94:	4605      	mov	r5, r0
 800fe96:	460c      	mov	r4, r1
 800fe98:	b913      	cbnz	r3, 800fea0 <_fflush_r+0x10>
 800fe9a:	2500      	movs	r5, #0
 800fe9c:	4628      	mov	r0, r5
 800fe9e:	bd38      	pop	{r3, r4, r5, pc}
 800fea0:	b118      	cbz	r0, 800feaa <_fflush_r+0x1a>
 800fea2:	6a03      	ldr	r3, [r0, #32]
 800fea4:	b90b      	cbnz	r3, 800feaa <_fflush_r+0x1a>
 800fea6:	f7fd f88b 	bl	800cfc0 <__sinit>
 800feaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d0f3      	beq.n	800fe9a <_fflush_r+0xa>
 800feb2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800feb4:	07d0      	lsls	r0, r2, #31
 800feb6:	d404      	bmi.n	800fec2 <_fflush_r+0x32>
 800feb8:	0599      	lsls	r1, r3, #22
 800feba:	d402      	bmi.n	800fec2 <_fflush_r+0x32>
 800febc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800febe:	f7fd fa3c 	bl	800d33a <__retarget_lock_acquire_recursive>
 800fec2:	4628      	mov	r0, r5
 800fec4:	4621      	mov	r1, r4
 800fec6:	f7ff ff5f 	bl	800fd88 <__sflush_r>
 800feca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fecc:	07da      	lsls	r2, r3, #31
 800fece:	4605      	mov	r5, r0
 800fed0:	d4e4      	bmi.n	800fe9c <_fflush_r+0xc>
 800fed2:	89a3      	ldrh	r3, [r4, #12]
 800fed4:	059b      	lsls	r3, r3, #22
 800fed6:	d4e1      	bmi.n	800fe9c <_fflush_r+0xc>
 800fed8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800feda:	f7fd fa2f 	bl	800d33c <__retarget_lock_release_recursive>
 800fede:	e7dd      	b.n	800fe9c <_fflush_r+0xc>

0800fee0 <__swhatbuf_r>:
 800fee0:	b570      	push	{r4, r5, r6, lr}
 800fee2:	460c      	mov	r4, r1
 800fee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fee8:	2900      	cmp	r1, #0
 800feea:	b096      	sub	sp, #88	@ 0x58
 800feec:	4615      	mov	r5, r2
 800feee:	461e      	mov	r6, r3
 800fef0:	da0d      	bge.n	800ff0e <__swhatbuf_r+0x2e>
 800fef2:	89a3      	ldrh	r3, [r4, #12]
 800fef4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fef8:	f04f 0100 	mov.w	r1, #0
 800fefc:	bf14      	ite	ne
 800fefe:	2340      	movne	r3, #64	@ 0x40
 800ff00:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ff04:	2000      	movs	r0, #0
 800ff06:	6031      	str	r1, [r6, #0]
 800ff08:	602b      	str	r3, [r5, #0]
 800ff0a:	b016      	add	sp, #88	@ 0x58
 800ff0c:	bd70      	pop	{r4, r5, r6, pc}
 800ff0e:	466a      	mov	r2, sp
 800ff10:	f000 f874 	bl	800fffc <_fstat_r>
 800ff14:	2800      	cmp	r0, #0
 800ff16:	dbec      	blt.n	800fef2 <__swhatbuf_r+0x12>
 800ff18:	9901      	ldr	r1, [sp, #4]
 800ff1a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ff1e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ff22:	4259      	negs	r1, r3
 800ff24:	4159      	adcs	r1, r3
 800ff26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ff2a:	e7eb      	b.n	800ff04 <__swhatbuf_r+0x24>

0800ff2c <__smakebuf_r>:
 800ff2c:	898b      	ldrh	r3, [r1, #12]
 800ff2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ff30:	079d      	lsls	r5, r3, #30
 800ff32:	4606      	mov	r6, r0
 800ff34:	460c      	mov	r4, r1
 800ff36:	d507      	bpl.n	800ff48 <__smakebuf_r+0x1c>
 800ff38:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ff3c:	6023      	str	r3, [r4, #0]
 800ff3e:	6123      	str	r3, [r4, #16]
 800ff40:	2301      	movs	r3, #1
 800ff42:	6163      	str	r3, [r4, #20]
 800ff44:	b003      	add	sp, #12
 800ff46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff48:	ab01      	add	r3, sp, #4
 800ff4a:	466a      	mov	r2, sp
 800ff4c:	f7ff ffc8 	bl	800fee0 <__swhatbuf_r>
 800ff50:	9f00      	ldr	r7, [sp, #0]
 800ff52:	4605      	mov	r5, r0
 800ff54:	4639      	mov	r1, r7
 800ff56:	4630      	mov	r0, r6
 800ff58:	f7fe f8ba 	bl	800e0d0 <_malloc_r>
 800ff5c:	b948      	cbnz	r0, 800ff72 <__smakebuf_r+0x46>
 800ff5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff62:	059a      	lsls	r2, r3, #22
 800ff64:	d4ee      	bmi.n	800ff44 <__smakebuf_r+0x18>
 800ff66:	f023 0303 	bic.w	r3, r3, #3
 800ff6a:	f043 0302 	orr.w	r3, r3, #2
 800ff6e:	81a3      	strh	r3, [r4, #12]
 800ff70:	e7e2      	b.n	800ff38 <__smakebuf_r+0xc>
 800ff72:	89a3      	ldrh	r3, [r4, #12]
 800ff74:	6020      	str	r0, [r4, #0]
 800ff76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ff7a:	81a3      	strh	r3, [r4, #12]
 800ff7c:	9b01      	ldr	r3, [sp, #4]
 800ff7e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ff82:	b15b      	cbz	r3, 800ff9c <__smakebuf_r+0x70>
 800ff84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ff88:	4630      	mov	r0, r6
 800ff8a:	f000 f849 	bl	8010020 <_isatty_r>
 800ff8e:	b128      	cbz	r0, 800ff9c <__smakebuf_r+0x70>
 800ff90:	89a3      	ldrh	r3, [r4, #12]
 800ff92:	f023 0303 	bic.w	r3, r3, #3
 800ff96:	f043 0301 	orr.w	r3, r3, #1
 800ff9a:	81a3      	strh	r3, [r4, #12]
 800ff9c:	89a3      	ldrh	r3, [r4, #12]
 800ff9e:	431d      	orrs	r5, r3
 800ffa0:	81a5      	strh	r5, [r4, #12]
 800ffa2:	e7cf      	b.n	800ff44 <__smakebuf_r+0x18>

0800ffa4 <memmove>:
 800ffa4:	4288      	cmp	r0, r1
 800ffa6:	b510      	push	{r4, lr}
 800ffa8:	eb01 0402 	add.w	r4, r1, r2
 800ffac:	d902      	bls.n	800ffb4 <memmove+0x10>
 800ffae:	4284      	cmp	r4, r0
 800ffb0:	4623      	mov	r3, r4
 800ffb2:	d807      	bhi.n	800ffc4 <memmove+0x20>
 800ffb4:	1e43      	subs	r3, r0, #1
 800ffb6:	42a1      	cmp	r1, r4
 800ffb8:	d008      	beq.n	800ffcc <memmove+0x28>
 800ffba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ffbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ffc2:	e7f8      	b.n	800ffb6 <memmove+0x12>
 800ffc4:	4402      	add	r2, r0
 800ffc6:	4601      	mov	r1, r0
 800ffc8:	428a      	cmp	r2, r1
 800ffca:	d100      	bne.n	800ffce <memmove+0x2a>
 800ffcc:	bd10      	pop	{r4, pc}
 800ffce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ffd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ffd6:	e7f7      	b.n	800ffc8 <memmove+0x24>

0800ffd8 <strncmp>:
 800ffd8:	b510      	push	{r4, lr}
 800ffda:	b16a      	cbz	r2, 800fff8 <strncmp+0x20>
 800ffdc:	3901      	subs	r1, #1
 800ffde:	1884      	adds	r4, r0, r2
 800ffe0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ffe4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ffe8:	429a      	cmp	r2, r3
 800ffea:	d103      	bne.n	800fff4 <strncmp+0x1c>
 800ffec:	42a0      	cmp	r0, r4
 800ffee:	d001      	beq.n	800fff4 <strncmp+0x1c>
 800fff0:	2a00      	cmp	r2, #0
 800fff2:	d1f5      	bne.n	800ffe0 <strncmp+0x8>
 800fff4:	1ad0      	subs	r0, r2, r3
 800fff6:	bd10      	pop	{r4, pc}
 800fff8:	4610      	mov	r0, r2
 800fffa:	e7fc      	b.n	800fff6 <strncmp+0x1e>

0800fffc <_fstat_r>:
 800fffc:	b538      	push	{r3, r4, r5, lr}
 800fffe:	4d07      	ldr	r5, [pc, #28]	@ (801001c <_fstat_r+0x20>)
 8010000:	2300      	movs	r3, #0
 8010002:	4604      	mov	r4, r0
 8010004:	4608      	mov	r0, r1
 8010006:	4611      	mov	r1, r2
 8010008:	602b      	str	r3, [r5, #0]
 801000a:	f7f2 f9bb 	bl	8002384 <_fstat>
 801000e:	1c43      	adds	r3, r0, #1
 8010010:	d102      	bne.n	8010018 <_fstat_r+0x1c>
 8010012:	682b      	ldr	r3, [r5, #0]
 8010014:	b103      	cbz	r3, 8010018 <_fstat_r+0x1c>
 8010016:	6023      	str	r3, [r4, #0]
 8010018:	bd38      	pop	{r3, r4, r5, pc}
 801001a:	bf00      	nop
 801001c:	20012d84 	.word	0x20012d84

08010020 <_isatty_r>:
 8010020:	b538      	push	{r3, r4, r5, lr}
 8010022:	4d06      	ldr	r5, [pc, #24]	@ (801003c <_isatty_r+0x1c>)
 8010024:	2300      	movs	r3, #0
 8010026:	4604      	mov	r4, r0
 8010028:	4608      	mov	r0, r1
 801002a:	602b      	str	r3, [r5, #0]
 801002c:	f7f2 f9ba 	bl	80023a4 <_isatty>
 8010030:	1c43      	adds	r3, r0, #1
 8010032:	d102      	bne.n	801003a <_isatty_r+0x1a>
 8010034:	682b      	ldr	r3, [r5, #0]
 8010036:	b103      	cbz	r3, 801003a <_isatty_r+0x1a>
 8010038:	6023      	str	r3, [r4, #0]
 801003a:	bd38      	pop	{r3, r4, r5, pc}
 801003c:	20012d84 	.word	0x20012d84

08010040 <_sbrk_r>:
 8010040:	b538      	push	{r3, r4, r5, lr}
 8010042:	4d06      	ldr	r5, [pc, #24]	@ (801005c <_sbrk_r+0x1c>)
 8010044:	2300      	movs	r3, #0
 8010046:	4604      	mov	r4, r0
 8010048:	4608      	mov	r0, r1
 801004a:	602b      	str	r3, [r5, #0]
 801004c:	f7f2 f9c2 	bl	80023d4 <_sbrk>
 8010050:	1c43      	adds	r3, r0, #1
 8010052:	d102      	bne.n	801005a <_sbrk_r+0x1a>
 8010054:	682b      	ldr	r3, [r5, #0]
 8010056:	b103      	cbz	r3, 801005a <_sbrk_r+0x1a>
 8010058:	6023      	str	r3, [r4, #0]
 801005a:	bd38      	pop	{r3, r4, r5, pc}
 801005c:	20012d84 	.word	0x20012d84

08010060 <memcpy>:
 8010060:	440a      	add	r2, r1
 8010062:	4291      	cmp	r1, r2
 8010064:	f100 33ff 	add.w	r3, r0, #4294967295
 8010068:	d100      	bne.n	801006c <memcpy+0xc>
 801006a:	4770      	bx	lr
 801006c:	b510      	push	{r4, lr}
 801006e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010072:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010076:	4291      	cmp	r1, r2
 8010078:	d1f9      	bne.n	801006e <memcpy+0xe>
 801007a:	bd10      	pop	{r4, pc}
 801007c:	0000      	movs	r0, r0
	...

08010080 <nan>:
 8010080:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010088 <nan+0x8>
 8010084:	4770      	bx	lr
 8010086:	bf00      	nop
 8010088:	00000000 	.word	0x00000000
 801008c:	7ff80000 	.word	0x7ff80000

08010090 <__assert_func>:
 8010090:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010092:	4614      	mov	r4, r2
 8010094:	461a      	mov	r2, r3
 8010096:	4b09      	ldr	r3, [pc, #36]	@ (80100bc <__assert_func+0x2c>)
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	4605      	mov	r5, r0
 801009c:	68d8      	ldr	r0, [r3, #12]
 801009e:	b954      	cbnz	r4, 80100b6 <__assert_func+0x26>
 80100a0:	4b07      	ldr	r3, [pc, #28]	@ (80100c0 <__assert_func+0x30>)
 80100a2:	461c      	mov	r4, r3
 80100a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80100a8:	9100      	str	r1, [sp, #0]
 80100aa:	462b      	mov	r3, r5
 80100ac:	4905      	ldr	r1, [pc, #20]	@ (80100c4 <__assert_func+0x34>)
 80100ae:	f000 fba7 	bl	8010800 <fiprintf>
 80100b2:	f000 fbb7 	bl	8010824 <abort>
 80100b6:	4b04      	ldr	r3, [pc, #16]	@ (80100c8 <__assert_func+0x38>)
 80100b8:	e7f4      	b.n	80100a4 <__assert_func+0x14>
 80100ba:	bf00      	nop
 80100bc:	20000118 	.word	0x20000118
 80100c0:	0801110d 	.word	0x0801110d
 80100c4:	080110df 	.word	0x080110df
 80100c8:	080110d2 	.word	0x080110d2

080100cc <_calloc_r>:
 80100cc:	b570      	push	{r4, r5, r6, lr}
 80100ce:	fba1 5402 	umull	r5, r4, r1, r2
 80100d2:	b93c      	cbnz	r4, 80100e4 <_calloc_r+0x18>
 80100d4:	4629      	mov	r1, r5
 80100d6:	f7fd fffb 	bl	800e0d0 <_malloc_r>
 80100da:	4606      	mov	r6, r0
 80100dc:	b928      	cbnz	r0, 80100ea <_calloc_r+0x1e>
 80100de:	2600      	movs	r6, #0
 80100e0:	4630      	mov	r0, r6
 80100e2:	bd70      	pop	{r4, r5, r6, pc}
 80100e4:	220c      	movs	r2, #12
 80100e6:	6002      	str	r2, [r0, #0]
 80100e8:	e7f9      	b.n	80100de <_calloc_r+0x12>
 80100ea:	462a      	mov	r2, r5
 80100ec:	4621      	mov	r1, r4
 80100ee:	f7fd f8a7 	bl	800d240 <memset>
 80100f2:	e7f5      	b.n	80100e0 <_calloc_r+0x14>

080100f4 <rshift>:
 80100f4:	6903      	ldr	r3, [r0, #16]
 80100f6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80100fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80100fe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010102:	f100 0414 	add.w	r4, r0, #20
 8010106:	dd45      	ble.n	8010194 <rshift+0xa0>
 8010108:	f011 011f 	ands.w	r1, r1, #31
 801010c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010110:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010114:	d10c      	bne.n	8010130 <rshift+0x3c>
 8010116:	f100 0710 	add.w	r7, r0, #16
 801011a:	4629      	mov	r1, r5
 801011c:	42b1      	cmp	r1, r6
 801011e:	d334      	bcc.n	801018a <rshift+0x96>
 8010120:	1a9b      	subs	r3, r3, r2
 8010122:	009b      	lsls	r3, r3, #2
 8010124:	1eea      	subs	r2, r5, #3
 8010126:	4296      	cmp	r6, r2
 8010128:	bf38      	it	cc
 801012a:	2300      	movcc	r3, #0
 801012c:	4423      	add	r3, r4
 801012e:	e015      	b.n	801015c <rshift+0x68>
 8010130:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010134:	f1c1 0820 	rsb	r8, r1, #32
 8010138:	40cf      	lsrs	r7, r1
 801013a:	f105 0e04 	add.w	lr, r5, #4
 801013e:	46a1      	mov	r9, r4
 8010140:	4576      	cmp	r6, lr
 8010142:	46f4      	mov	ip, lr
 8010144:	d815      	bhi.n	8010172 <rshift+0x7e>
 8010146:	1a9a      	subs	r2, r3, r2
 8010148:	0092      	lsls	r2, r2, #2
 801014a:	3a04      	subs	r2, #4
 801014c:	3501      	adds	r5, #1
 801014e:	42ae      	cmp	r6, r5
 8010150:	bf38      	it	cc
 8010152:	2200      	movcc	r2, #0
 8010154:	18a3      	adds	r3, r4, r2
 8010156:	50a7      	str	r7, [r4, r2]
 8010158:	b107      	cbz	r7, 801015c <rshift+0x68>
 801015a:	3304      	adds	r3, #4
 801015c:	1b1a      	subs	r2, r3, r4
 801015e:	42a3      	cmp	r3, r4
 8010160:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010164:	bf08      	it	eq
 8010166:	2300      	moveq	r3, #0
 8010168:	6102      	str	r2, [r0, #16]
 801016a:	bf08      	it	eq
 801016c:	6143      	streq	r3, [r0, #20]
 801016e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010172:	f8dc c000 	ldr.w	ip, [ip]
 8010176:	fa0c fc08 	lsl.w	ip, ip, r8
 801017a:	ea4c 0707 	orr.w	r7, ip, r7
 801017e:	f849 7b04 	str.w	r7, [r9], #4
 8010182:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010186:	40cf      	lsrs	r7, r1
 8010188:	e7da      	b.n	8010140 <rshift+0x4c>
 801018a:	f851 cb04 	ldr.w	ip, [r1], #4
 801018e:	f847 cf04 	str.w	ip, [r7, #4]!
 8010192:	e7c3      	b.n	801011c <rshift+0x28>
 8010194:	4623      	mov	r3, r4
 8010196:	e7e1      	b.n	801015c <rshift+0x68>

08010198 <__hexdig_fun>:
 8010198:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801019c:	2b09      	cmp	r3, #9
 801019e:	d802      	bhi.n	80101a6 <__hexdig_fun+0xe>
 80101a0:	3820      	subs	r0, #32
 80101a2:	b2c0      	uxtb	r0, r0
 80101a4:	4770      	bx	lr
 80101a6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80101aa:	2b05      	cmp	r3, #5
 80101ac:	d801      	bhi.n	80101b2 <__hexdig_fun+0x1a>
 80101ae:	3847      	subs	r0, #71	@ 0x47
 80101b0:	e7f7      	b.n	80101a2 <__hexdig_fun+0xa>
 80101b2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80101b6:	2b05      	cmp	r3, #5
 80101b8:	d801      	bhi.n	80101be <__hexdig_fun+0x26>
 80101ba:	3827      	subs	r0, #39	@ 0x27
 80101bc:	e7f1      	b.n	80101a2 <__hexdig_fun+0xa>
 80101be:	2000      	movs	r0, #0
 80101c0:	4770      	bx	lr
	...

080101c4 <__gethex>:
 80101c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101c8:	b085      	sub	sp, #20
 80101ca:	468a      	mov	sl, r1
 80101cc:	9302      	str	r3, [sp, #8]
 80101ce:	680b      	ldr	r3, [r1, #0]
 80101d0:	9001      	str	r0, [sp, #4]
 80101d2:	4690      	mov	r8, r2
 80101d4:	1c9c      	adds	r4, r3, #2
 80101d6:	46a1      	mov	r9, r4
 80101d8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80101dc:	2830      	cmp	r0, #48	@ 0x30
 80101de:	d0fa      	beq.n	80101d6 <__gethex+0x12>
 80101e0:	eba9 0303 	sub.w	r3, r9, r3
 80101e4:	f1a3 0b02 	sub.w	fp, r3, #2
 80101e8:	f7ff ffd6 	bl	8010198 <__hexdig_fun>
 80101ec:	4605      	mov	r5, r0
 80101ee:	2800      	cmp	r0, #0
 80101f0:	d168      	bne.n	80102c4 <__gethex+0x100>
 80101f2:	49a0      	ldr	r1, [pc, #640]	@ (8010474 <__gethex+0x2b0>)
 80101f4:	2201      	movs	r2, #1
 80101f6:	4648      	mov	r0, r9
 80101f8:	f7ff feee 	bl	800ffd8 <strncmp>
 80101fc:	4607      	mov	r7, r0
 80101fe:	2800      	cmp	r0, #0
 8010200:	d167      	bne.n	80102d2 <__gethex+0x10e>
 8010202:	f899 0001 	ldrb.w	r0, [r9, #1]
 8010206:	4626      	mov	r6, r4
 8010208:	f7ff ffc6 	bl	8010198 <__hexdig_fun>
 801020c:	2800      	cmp	r0, #0
 801020e:	d062      	beq.n	80102d6 <__gethex+0x112>
 8010210:	4623      	mov	r3, r4
 8010212:	7818      	ldrb	r0, [r3, #0]
 8010214:	2830      	cmp	r0, #48	@ 0x30
 8010216:	4699      	mov	r9, r3
 8010218:	f103 0301 	add.w	r3, r3, #1
 801021c:	d0f9      	beq.n	8010212 <__gethex+0x4e>
 801021e:	f7ff ffbb 	bl	8010198 <__hexdig_fun>
 8010222:	fab0 f580 	clz	r5, r0
 8010226:	096d      	lsrs	r5, r5, #5
 8010228:	f04f 0b01 	mov.w	fp, #1
 801022c:	464a      	mov	r2, r9
 801022e:	4616      	mov	r6, r2
 8010230:	3201      	adds	r2, #1
 8010232:	7830      	ldrb	r0, [r6, #0]
 8010234:	f7ff ffb0 	bl	8010198 <__hexdig_fun>
 8010238:	2800      	cmp	r0, #0
 801023a:	d1f8      	bne.n	801022e <__gethex+0x6a>
 801023c:	498d      	ldr	r1, [pc, #564]	@ (8010474 <__gethex+0x2b0>)
 801023e:	2201      	movs	r2, #1
 8010240:	4630      	mov	r0, r6
 8010242:	f7ff fec9 	bl	800ffd8 <strncmp>
 8010246:	2800      	cmp	r0, #0
 8010248:	d13f      	bne.n	80102ca <__gethex+0x106>
 801024a:	b944      	cbnz	r4, 801025e <__gethex+0x9a>
 801024c:	1c74      	adds	r4, r6, #1
 801024e:	4622      	mov	r2, r4
 8010250:	4616      	mov	r6, r2
 8010252:	3201      	adds	r2, #1
 8010254:	7830      	ldrb	r0, [r6, #0]
 8010256:	f7ff ff9f 	bl	8010198 <__hexdig_fun>
 801025a:	2800      	cmp	r0, #0
 801025c:	d1f8      	bne.n	8010250 <__gethex+0x8c>
 801025e:	1ba4      	subs	r4, r4, r6
 8010260:	00a7      	lsls	r7, r4, #2
 8010262:	7833      	ldrb	r3, [r6, #0]
 8010264:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010268:	2b50      	cmp	r3, #80	@ 0x50
 801026a:	d13e      	bne.n	80102ea <__gethex+0x126>
 801026c:	7873      	ldrb	r3, [r6, #1]
 801026e:	2b2b      	cmp	r3, #43	@ 0x2b
 8010270:	d033      	beq.n	80102da <__gethex+0x116>
 8010272:	2b2d      	cmp	r3, #45	@ 0x2d
 8010274:	d034      	beq.n	80102e0 <__gethex+0x11c>
 8010276:	1c71      	adds	r1, r6, #1
 8010278:	2400      	movs	r4, #0
 801027a:	7808      	ldrb	r0, [r1, #0]
 801027c:	f7ff ff8c 	bl	8010198 <__hexdig_fun>
 8010280:	1e43      	subs	r3, r0, #1
 8010282:	b2db      	uxtb	r3, r3
 8010284:	2b18      	cmp	r3, #24
 8010286:	d830      	bhi.n	80102ea <__gethex+0x126>
 8010288:	f1a0 0210 	sub.w	r2, r0, #16
 801028c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010290:	f7ff ff82 	bl	8010198 <__hexdig_fun>
 8010294:	f100 3cff 	add.w	ip, r0, #4294967295
 8010298:	fa5f fc8c 	uxtb.w	ip, ip
 801029c:	f1bc 0f18 	cmp.w	ip, #24
 80102a0:	f04f 030a 	mov.w	r3, #10
 80102a4:	d91e      	bls.n	80102e4 <__gethex+0x120>
 80102a6:	b104      	cbz	r4, 80102aa <__gethex+0xe6>
 80102a8:	4252      	negs	r2, r2
 80102aa:	4417      	add	r7, r2
 80102ac:	f8ca 1000 	str.w	r1, [sl]
 80102b0:	b1ed      	cbz	r5, 80102ee <__gethex+0x12a>
 80102b2:	f1bb 0f00 	cmp.w	fp, #0
 80102b6:	bf0c      	ite	eq
 80102b8:	2506      	moveq	r5, #6
 80102ba:	2500      	movne	r5, #0
 80102bc:	4628      	mov	r0, r5
 80102be:	b005      	add	sp, #20
 80102c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102c4:	2500      	movs	r5, #0
 80102c6:	462c      	mov	r4, r5
 80102c8:	e7b0      	b.n	801022c <__gethex+0x68>
 80102ca:	2c00      	cmp	r4, #0
 80102cc:	d1c7      	bne.n	801025e <__gethex+0x9a>
 80102ce:	4627      	mov	r7, r4
 80102d0:	e7c7      	b.n	8010262 <__gethex+0x9e>
 80102d2:	464e      	mov	r6, r9
 80102d4:	462f      	mov	r7, r5
 80102d6:	2501      	movs	r5, #1
 80102d8:	e7c3      	b.n	8010262 <__gethex+0x9e>
 80102da:	2400      	movs	r4, #0
 80102dc:	1cb1      	adds	r1, r6, #2
 80102de:	e7cc      	b.n	801027a <__gethex+0xb6>
 80102e0:	2401      	movs	r4, #1
 80102e2:	e7fb      	b.n	80102dc <__gethex+0x118>
 80102e4:	fb03 0002 	mla	r0, r3, r2, r0
 80102e8:	e7ce      	b.n	8010288 <__gethex+0xc4>
 80102ea:	4631      	mov	r1, r6
 80102ec:	e7de      	b.n	80102ac <__gethex+0xe8>
 80102ee:	eba6 0309 	sub.w	r3, r6, r9
 80102f2:	3b01      	subs	r3, #1
 80102f4:	4629      	mov	r1, r5
 80102f6:	2b07      	cmp	r3, #7
 80102f8:	dc0a      	bgt.n	8010310 <__gethex+0x14c>
 80102fa:	9801      	ldr	r0, [sp, #4]
 80102fc:	f7fd ff74 	bl	800e1e8 <_Balloc>
 8010300:	4604      	mov	r4, r0
 8010302:	b940      	cbnz	r0, 8010316 <__gethex+0x152>
 8010304:	4b5c      	ldr	r3, [pc, #368]	@ (8010478 <__gethex+0x2b4>)
 8010306:	4602      	mov	r2, r0
 8010308:	21e4      	movs	r1, #228	@ 0xe4
 801030a:	485c      	ldr	r0, [pc, #368]	@ (801047c <__gethex+0x2b8>)
 801030c:	f7ff fec0 	bl	8010090 <__assert_func>
 8010310:	3101      	adds	r1, #1
 8010312:	105b      	asrs	r3, r3, #1
 8010314:	e7ef      	b.n	80102f6 <__gethex+0x132>
 8010316:	f100 0a14 	add.w	sl, r0, #20
 801031a:	2300      	movs	r3, #0
 801031c:	4655      	mov	r5, sl
 801031e:	469b      	mov	fp, r3
 8010320:	45b1      	cmp	r9, r6
 8010322:	d337      	bcc.n	8010394 <__gethex+0x1d0>
 8010324:	f845 bb04 	str.w	fp, [r5], #4
 8010328:	eba5 050a 	sub.w	r5, r5, sl
 801032c:	10ad      	asrs	r5, r5, #2
 801032e:	6125      	str	r5, [r4, #16]
 8010330:	4658      	mov	r0, fp
 8010332:	f7fe f84b 	bl	800e3cc <__hi0bits>
 8010336:	016d      	lsls	r5, r5, #5
 8010338:	f8d8 6000 	ldr.w	r6, [r8]
 801033c:	1a2d      	subs	r5, r5, r0
 801033e:	42b5      	cmp	r5, r6
 8010340:	dd54      	ble.n	80103ec <__gethex+0x228>
 8010342:	1bad      	subs	r5, r5, r6
 8010344:	4629      	mov	r1, r5
 8010346:	4620      	mov	r0, r4
 8010348:	f7fe fbdf 	bl	800eb0a <__any_on>
 801034c:	4681      	mov	r9, r0
 801034e:	b178      	cbz	r0, 8010370 <__gethex+0x1ac>
 8010350:	1e6b      	subs	r3, r5, #1
 8010352:	1159      	asrs	r1, r3, #5
 8010354:	f003 021f 	and.w	r2, r3, #31
 8010358:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801035c:	f04f 0901 	mov.w	r9, #1
 8010360:	fa09 f202 	lsl.w	r2, r9, r2
 8010364:	420a      	tst	r2, r1
 8010366:	d003      	beq.n	8010370 <__gethex+0x1ac>
 8010368:	454b      	cmp	r3, r9
 801036a:	dc36      	bgt.n	80103da <__gethex+0x216>
 801036c:	f04f 0902 	mov.w	r9, #2
 8010370:	4629      	mov	r1, r5
 8010372:	4620      	mov	r0, r4
 8010374:	f7ff febe 	bl	80100f4 <rshift>
 8010378:	442f      	add	r7, r5
 801037a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801037e:	42bb      	cmp	r3, r7
 8010380:	da42      	bge.n	8010408 <__gethex+0x244>
 8010382:	9801      	ldr	r0, [sp, #4]
 8010384:	4621      	mov	r1, r4
 8010386:	f7fd ff6f 	bl	800e268 <_Bfree>
 801038a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801038c:	2300      	movs	r3, #0
 801038e:	6013      	str	r3, [r2, #0]
 8010390:	25a3      	movs	r5, #163	@ 0xa3
 8010392:	e793      	b.n	80102bc <__gethex+0xf8>
 8010394:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010398:	2a2e      	cmp	r2, #46	@ 0x2e
 801039a:	d012      	beq.n	80103c2 <__gethex+0x1fe>
 801039c:	2b20      	cmp	r3, #32
 801039e:	d104      	bne.n	80103aa <__gethex+0x1e6>
 80103a0:	f845 bb04 	str.w	fp, [r5], #4
 80103a4:	f04f 0b00 	mov.w	fp, #0
 80103a8:	465b      	mov	r3, fp
 80103aa:	7830      	ldrb	r0, [r6, #0]
 80103ac:	9303      	str	r3, [sp, #12]
 80103ae:	f7ff fef3 	bl	8010198 <__hexdig_fun>
 80103b2:	9b03      	ldr	r3, [sp, #12]
 80103b4:	f000 000f 	and.w	r0, r0, #15
 80103b8:	4098      	lsls	r0, r3
 80103ba:	ea4b 0b00 	orr.w	fp, fp, r0
 80103be:	3304      	adds	r3, #4
 80103c0:	e7ae      	b.n	8010320 <__gethex+0x15c>
 80103c2:	45b1      	cmp	r9, r6
 80103c4:	d8ea      	bhi.n	801039c <__gethex+0x1d8>
 80103c6:	492b      	ldr	r1, [pc, #172]	@ (8010474 <__gethex+0x2b0>)
 80103c8:	9303      	str	r3, [sp, #12]
 80103ca:	2201      	movs	r2, #1
 80103cc:	4630      	mov	r0, r6
 80103ce:	f7ff fe03 	bl	800ffd8 <strncmp>
 80103d2:	9b03      	ldr	r3, [sp, #12]
 80103d4:	2800      	cmp	r0, #0
 80103d6:	d1e1      	bne.n	801039c <__gethex+0x1d8>
 80103d8:	e7a2      	b.n	8010320 <__gethex+0x15c>
 80103da:	1ea9      	subs	r1, r5, #2
 80103dc:	4620      	mov	r0, r4
 80103de:	f7fe fb94 	bl	800eb0a <__any_on>
 80103e2:	2800      	cmp	r0, #0
 80103e4:	d0c2      	beq.n	801036c <__gethex+0x1a8>
 80103e6:	f04f 0903 	mov.w	r9, #3
 80103ea:	e7c1      	b.n	8010370 <__gethex+0x1ac>
 80103ec:	da09      	bge.n	8010402 <__gethex+0x23e>
 80103ee:	1b75      	subs	r5, r6, r5
 80103f0:	4621      	mov	r1, r4
 80103f2:	9801      	ldr	r0, [sp, #4]
 80103f4:	462a      	mov	r2, r5
 80103f6:	f7fe f94f 	bl	800e698 <__lshift>
 80103fa:	1b7f      	subs	r7, r7, r5
 80103fc:	4604      	mov	r4, r0
 80103fe:	f100 0a14 	add.w	sl, r0, #20
 8010402:	f04f 0900 	mov.w	r9, #0
 8010406:	e7b8      	b.n	801037a <__gethex+0x1b6>
 8010408:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801040c:	42bd      	cmp	r5, r7
 801040e:	dd6f      	ble.n	80104f0 <__gethex+0x32c>
 8010410:	1bed      	subs	r5, r5, r7
 8010412:	42ae      	cmp	r6, r5
 8010414:	dc34      	bgt.n	8010480 <__gethex+0x2bc>
 8010416:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801041a:	2b02      	cmp	r3, #2
 801041c:	d022      	beq.n	8010464 <__gethex+0x2a0>
 801041e:	2b03      	cmp	r3, #3
 8010420:	d024      	beq.n	801046c <__gethex+0x2a8>
 8010422:	2b01      	cmp	r3, #1
 8010424:	d115      	bne.n	8010452 <__gethex+0x28e>
 8010426:	42ae      	cmp	r6, r5
 8010428:	d113      	bne.n	8010452 <__gethex+0x28e>
 801042a:	2e01      	cmp	r6, #1
 801042c:	d10b      	bne.n	8010446 <__gethex+0x282>
 801042e:	9a02      	ldr	r2, [sp, #8]
 8010430:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010434:	6013      	str	r3, [r2, #0]
 8010436:	2301      	movs	r3, #1
 8010438:	6123      	str	r3, [r4, #16]
 801043a:	f8ca 3000 	str.w	r3, [sl]
 801043e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010440:	2562      	movs	r5, #98	@ 0x62
 8010442:	601c      	str	r4, [r3, #0]
 8010444:	e73a      	b.n	80102bc <__gethex+0xf8>
 8010446:	1e71      	subs	r1, r6, #1
 8010448:	4620      	mov	r0, r4
 801044a:	f7fe fb5e 	bl	800eb0a <__any_on>
 801044e:	2800      	cmp	r0, #0
 8010450:	d1ed      	bne.n	801042e <__gethex+0x26a>
 8010452:	9801      	ldr	r0, [sp, #4]
 8010454:	4621      	mov	r1, r4
 8010456:	f7fd ff07 	bl	800e268 <_Bfree>
 801045a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801045c:	2300      	movs	r3, #0
 801045e:	6013      	str	r3, [r2, #0]
 8010460:	2550      	movs	r5, #80	@ 0x50
 8010462:	e72b      	b.n	80102bc <__gethex+0xf8>
 8010464:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010466:	2b00      	cmp	r3, #0
 8010468:	d1f3      	bne.n	8010452 <__gethex+0x28e>
 801046a:	e7e0      	b.n	801042e <__gethex+0x26a>
 801046c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801046e:	2b00      	cmp	r3, #0
 8010470:	d1dd      	bne.n	801042e <__gethex+0x26a>
 8010472:	e7ee      	b.n	8010452 <__gethex+0x28e>
 8010474:	08010f60 	.word	0x08010f60
 8010478:	08010df9 	.word	0x08010df9
 801047c:	0801110e 	.word	0x0801110e
 8010480:	1e6f      	subs	r7, r5, #1
 8010482:	f1b9 0f00 	cmp.w	r9, #0
 8010486:	d130      	bne.n	80104ea <__gethex+0x326>
 8010488:	b127      	cbz	r7, 8010494 <__gethex+0x2d0>
 801048a:	4639      	mov	r1, r7
 801048c:	4620      	mov	r0, r4
 801048e:	f7fe fb3c 	bl	800eb0a <__any_on>
 8010492:	4681      	mov	r9, r0
 8010494:	117a      	asrs	r2, r7, #5
 8010496:	2301      	movs	r3, #1
 8010498:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801049c:	f007 071f 	and.w	r7, r7, #31
 80104a0:	40bb      	lsls	r3, r7
 80104a2:	4213      	tst	r3, r2
 80104a4:	4629      	mov	r1, r5
 80104a6:	4620      	mov	r0, r4
 80104a8:	bf18      	it	ne
 80104aa:	f049 0902 	orrne.w	r9, r9, #2
 80104ae:	f7ff fe21 	bl	80100f4 <rshift>
 80104b2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80104b6:	1b76      	subs	r6, r6, r5
 80104b8:	2502      	movs	r5, #2
 80104ba:	f1b9 0f00 	cmp.w	r9, #0
 80104be:	d047      	beq.n	8010550 <__gethex+0x38c>
 80104c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80104c4:	2b02      	cmp	r3, #2
 80104c6:	d015      	beq.n	80104f4 <__gethex+0x330>
 80104c8:	2b03      	cmp	r3, #3
 80104ca:	d017      	beq.n	80104fc <__gethex+0x338>
 80104cc:	2b01      	cmp	r3, #1
 80104ce:	d109      	bne.n	80104e4 <__gethex+0x320>
 80104d0:	f019 0f02 	tst.w	r9, #2
 80104d4:	d006      	beq.n	80104e4 <__gethex+0x320>
 80104d6:	f8da 3000 	ldr.w	r3, [sl]
 80104da:	ea49 0903 	orr.w	r9, r9, r3
 80104de:	f019 0f01 	tst.w	r9, #1
 80104e2:	d10e      	bne.n	8010502 <__gethex+0x33e>
 80104e4:	f045 0510 	orr.w	r5, r5, #16
 80104e8:	e032      	b.n	8010550 <__gethex+0x38c>
 80104ea:	f04f 0901 	mov.w	r9, #1
 80104ee:	e7d1      	b.n	8010494 <__gethex+0x2d0>
 80104f0:	2501      	movs	r5, #1
 80104f2:	e7e2      	b.n	80104ba <__gethex+0x2f6>
 80104f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80104f6:	f1c3 0301 	rsb	r3, r3, #1
 80104fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80104fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d0f0      	beq.n	80104e4 <__gethex+0x320>
 8010502:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010506:	f104 0314 	add.w	r3, r4, #20
 801050a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801050e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010512:	f04f 0c00 	mov.w	ip, #0
 8010516:	4618      	mov	r0, r3
 8010518:	f853 2b04 	ldr.w	r2, [r3], #4
 801051c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010520:	d01b      	beq.n	801055a <__gethex+0x396>
 8010522:	3201      	adds	r2, #1
 8010524:	6002      	str	r2, [r0, #0]
 8010526:	2d02      	cmp	r5, #2
 8010528:	f104 0314 	add.w	r3, r4, #20
 801052c:	d13c      	bne.n	80105a8 <__gethex+0x3e4>
 801052e:	f8d8 2000 	ldr.w	r2, [r8]
 8010532:	3a01      	subs	r2, #1
 8010534:	42b2      	cmp	r2, r6
 8010536:	d109      	bne.n	801054c <__gethex+0x388>
 8010538:	1171      	asrs	r1, r6, #5
 801053a:	2201      	movs	r2, #1
 801053c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010540:	f006 061f 	and.w	r6, r6, #31
 8010544:	fa02 f606 	lsl.w	r6, r2, r6
 8010548:	421e      	tst	r6, r3
 801054a:	d13a      	bne.n	80105c2 <__gethex+0x3fe>
 801054c:	f045 0520 	orr.w	r5, r5, #32
 8010550:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010552:	601c      	str	r4, [r3, #0]
 8010554:	9b02      	ldr	r3, [sp, #8]
 8010556:	601f      	str	r7, [r3, #0]
 8010558:	e6b0      	b.n	80102bc <__gethex+0xf8>
 801055a:	4299      	cmp	r1, r3
 801055c:	f843 cc04 	str.w	ip, [r3, #-4]
 8010560:	d8d9      	bhi.n	8010516 <__gethex+0x352>
 8010562:	68a3      	ldr	r3, [r4, #8]
 8010564:	459b      	cmp	fp, r3
 8010566:	db17      	blt.n	8010598 <__gethex+0x3d4>
 8010568:	6861      	ldr	r1, [r4, #4]
 801056a:	9801      	ldr	r0, [sp, #4]
 801056c:	3101      	adds	r1, #1
 801056e:	f7fd fe3b 	bl	800e1e8 <_Balloc>
 8010572:	4681      	mov	r9, r0
 8010574:	b918      	cbnz	r0, 801057e <__gethex+0x3ba>
 8010576:	4b1a      	ldr	r3, [pc, #104]	@ (80105e0 <__gethex+0x41c>)
 8010578:	4602      	mov	r2, r0
 801057a:	2184      	movs	r1, #132	@ 0x84
 801057c:	e6c5      	b.n	801030a <__gethex+0x146>
 801057e:	6922      	ldr	r2, [r4, #16]
 8010580:	3202      	adds	r2, #2
 8010582:	f104 010c 	add.w	r1, r4, #12
 8010586:	0092      	lsls	r2, r2, #2
 8010588:	300c      	adds	r0, #12
 801058a:	f7ff fd69 	bl	8010060 <memcpy>
 801058e:	4621      	mov	r1, r4
 8010590:	9801      	ldr	r0, [sp, #4]
 8010592:	f7fd fe69 	bl	800e268 <_Bfree>
 8010596:	464c      	mov	r4, r9
 8010598:	6923      	ldr	r3, [r4, #16]
 801059a:	1c5a      	adds	r2, r3, #1
 801059c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80105a0:	6122      	str	r2, [r4, #16]
 80105a2:	2201      	movs	r2, #1
 80105a4:	615a      	str	r2, [r3, #20]
 80105a6:	e7be      	b.n	8010526 <__gethex+0x362>
 80105a8:	6922      	ldr	r2, [r4, #16]
 80105aa:	455a      	cmp	r2, fp
 80105ac:	dd0b      	ble.n	80105c6 <__gethex+0x402>
 80105ae:	2101      	movs	r1, #1
 80105b0:	4620      	mov	r0, r4
 80105b2:	f7ff fd9f 	bl	80100f4 <rshift>
 80105b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80105ba:	3701      	adds	r7, #1
 80105bc:	42bb      	cmp	r3, r7
 80105be:	f6ff aee0 	blt.w	8010382 <__gethex+0x1be>
 80105c2:	2501      	movs	r5, #1
 80105c4:	e7c2      	b.n	801054c <__gethex+0x388>
 80105c6:	f016 061f 	ands.w	r6, r6, #31
 80105ca:	d0fa      	beq.n	80105c2 <__gethex+0x3fe>
 80105cc:	4453      	add	r3, sl
 80105ce:	f1c6 0620 	rsb	r6, r6, #32
 80105d2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80105d6:	f7fd fef9 	bl	800e3cc <__hi0bits>
 80105da:	42b0      	cmp	r0, r6
 80105dc:	dbe7      	blt.n	80105ae <__gethex+0x3ea>
 80105de:	e7f0      	b.n	80105c2 <__gethex+0x3fe>
 80105e0:	08010df9 	.word	0x08010df9

080105e4 <L_shift>:
 80105e4:	f1c2 0208 	rsb	r2, r2, #8
 80105e8:	0092      	lsls	r2, r2, #2
 80105ea:	b570      	push	{r4, r5, r6, lr}
 80105ec:	f1c2 0620 	rsb	r6, r2, #32
 80105f0:	6843      	ldr	r3, [r0, #4]
 80105f2:	6804      	ldr	r4, [r0, #0]
 80105f4:	fa03 f506 	lsl.w	r5, r3, r6
 80105f8:	432c      	orrs	r4, r5
 80105fa:	40d3      	lsrs	r3, r2
 80105fc:	6004      	str	r4, [r0, #0]
 80105fe:	f840 3f04 	str.w	r3, [r0, #4]!
 8010602:	4288      	cmp	r0, r1
 8010604:	d3f4      	bcc.n	80105f0 <L_shift+0xc>
 8010606:	bd70      	pop	{r4, r5, r6, pc}

08010608 <__match>:
 8010608:	b530      	push	{r4, r5, lr}
 801060a:	6803      	ldr	r3, [r0, #0]
 801060c:	3301      	adds	r3, #1
 801060e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010612:	b914      	cbnz	r4, 801061a <__match+0x12>
 8010614:	6003      	str	r3, [r0, #0]
 8010616:	2001      	movs	r0, #1
 8010618:	bd30      	pop	{r4, r5, pc}
 801061a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801061e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8010622:	2d19      	cmp	r5, #25
 8010624:	bf98      	it	ls
 8010626:	3220      	addls	r2, #32
 8010628:	42a2      	cmp	r2, r4
 801062a:	d0f0      	beq.n	801060e <__match+0x6>
 801062c:	2000      	movs	r0, #0
 801062e:	e7f3      	b.n	8010618 <__match+0x10>

08010630 <__hexnan>:
 8010630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010634:	680b      	ldr	r3, [r1, #0]
 8010636:	6801      	ldr	r1, [r0, #0]
 8010638:	115e      	asrs	r6, r3, #5
 801063a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801063e:	f013 031f 	ands.w	r3, r3, #31
 8010642:	b087      	sub	sp, #28
 8010644:	bf18      	it	ne
 8010646:	3604      	addne	r6, #4
 8010648:	2500      	movs	r5, #0
 801064a:	1f37      	subs	r7, r6, #4
 801064c:	4682      	mov	sl, r0
 801064e:	4690      	mov	r8, r2
 8010650:	9301      	str	r3, [sp, #4]
 8010652:	f846 5c04 	str.w	r5, [r6, #-4]
 8010656:	46b9      	mov	r9, r7
 8010658:	463c      	mov	r4, r7
 801065a:	9502      	str	r5, [sp, #8]
 801065c:	46ab      	mov	fp, r5
 801065e:	784a      	ldrb	r2, [r1, #1]
 8010660:	1c4b      	adds	r3, r1, #1
 8010662:	9303      	str	r3, [sp, #12]
 8010664:	b342      	cbz	r2, 80106b8 <__hexnan+0x88>
 8010666:	4610      	mov	r0, r2
 8010668:	9105      	str	r1, [sp, #20]
 801066a:	9204      	str	r2, [sp, #16]
 801066c:	f7ff fd94 	bl	8010198 <__hexdig_fun>
 8010670:	2800      	cmp	r0, #0
 8010672:	d151      	bne.n	8010718 <__hexnan+0xe8>
 8010674:	9a04      	ldr	r2, [sp, #16]
 8010676:	9905      	ldr	r1, [sp, #20]
 8010678:	2a20      	cmp	r2, #32
 801067a:	d818      	bhi.n	80106ae <__hexnan+0x7e>
 801067c:	9b02      	ldr	r3, [sp, #8]
 801067e:	459b      	cmp	fp, r3
 8010680:	dd13      	ble.n	80106aa <__hexnan+0x7a>
 8010682:	454c      	cmp	r4, r9
 8010684:	d206      	bcs.n	8010694 <__hexnan+0x64>
 8010686:	2d07      	cmp	r5, #7
 8010688:	dc04      	bgt.n	8010694 <__hexnan+0x64>
 801068a:	462a      	mov	r2, r5
 801068c:	4649      	mov	r1, r9
 801068e:	4620      	mov	r0, r4
 8010690:	f7ff ffa8 	bl	80105e4 <L_shift>
 8010694:	4544      	cmp	r4, r8
 8010696:	d952      	bls.n	801073e <__hexnan+0x10e>
 8010698:	2300      	movs	r3, #0
 801069a:	f1a4 0904 	sub.w	r9, r4, #4
 801069e:	f844 3c04 	str.w	r3, [r4, #-4]
 80106a2:	f8cd b008 	str.w	fp, [sp, #8]
 80106a6:	464c      	mov	r4, r9
 80106a8:	461d      	mov	r5, r3
 80106aa:	9903      	ldr	r1, [sp, #12]
 80106ac:	e7d7      	b.n	801065e <__hexnan+0x2e>
 80106ae:	2a29      	cmp	r2, #41	@ 0x29
 80106b0:	d157      	bne.n	8010762 <__hexnan+0x132>
 80106b2:	3102      	adds	r1, #2
 80106b4:	f8ca 1000 	str.w	r1, [sl]
 80106b8:	f1bb 0f00 	cmp.w	fp, #0
 80106bc:	d051      	beq.n	8010762 <__hexnan+0x132>
 80106be:	454c      	cmp	r4, r9
 80106c0:	d206      	bcs.n	80106d0 <__hexnan+0xa0>
 80106c2:	2d07      	cmp	r5, #7
 80106c4:	dc04      	bgt.n	80106d0 <__hexnan+0xa0>
 80106c6:	462a      	mov	r2, r5
 80106c8:	4649      	mov	r1, r9
 80106ca:	4620      	mov	r0, r4
 80106cc:	f7ff ff8a 	bl	80105e4 <L_shift>
 80106d0:	4544      	cmp	r4, r8
 80106d2:	d936      	bls.n	8010742 <__hexnan+0x112>
 80106d4:	f1a8 0204 	sub.w	r2, r8, #4
 80106d8:	4623      	mov	r3, r4
 80106da:	f853 1b04 	ldr.w	r1, [r3], #4
 80106de:	f842 1f04 	str.w	r1, [r2, #4]!
 80106e2:	429f      	cmp	r7, r3
 80106e4:	d2f9      	bcs.n	80106da <__hexnan+0xaa>
 80106e6:	1b3b      	subs	r3, r7, r4
 80106e8:	f023 0303 	bic.w	r3, r3, #3
 80106ec:	3304      	adds	r3, #4
 80106ee:	3401      	adds	r4, #1
 80106f0:	3e03      	subs	r6, #3
 80106f2:	42b4      	cmp	r4, r6
 80106f4:	bf88      	it	hi
 80106f6:	2304      	movhi	r3, #4
 80106f8:	4443      	add	r3, r8
 80106fa:	2200      	movs	r2, #0
 80106fc:	f843 2b04 	str.w	r2, [r3], #4
 8010700:	429f      	cmp	r7, r3
 8010702:	d2fb      	bcs.n	80106fc <__hexnan+0xcc>
 8010704:	683b      	ldr	r3, [r7, #0]
 8010706:	b91b      	cbnz	r3, 8010710 <__hexnan+0xe0>
 8010708:	4547      	cmp	r7, r8
 801070a:	d128      	bne.n	801075e <__hexnan+0x12e>
 801070c:	2301      	movs	r3, #1
 801070e:	603b      	str	r3, [r7, #0]
 8010710:	2005      	movs	r0, #5
 8010712:	b007      	add	sp, #28
 8010714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010718:	3501      	adds	r5, #1
 801071a:	2d08      	cmp	r5, #8
 801071c:	f10b 0b01 	add.w	fp, fp, #1
 8010720:	dd06      	ble.n	8010730 <__hexnan+0x100>
 8010722:	4544      	cmp	r4, r8
 8010724:	d9c1      	bls.n	80106aa <__hexnan+0x7a>
 8010726:	2300      	movs	r3, #0
 8010728:	f844 3c04 	str.w	r3, [r4, #-4]
 801072c:	2501      	movs	r5, #1
 801072e:	3c04      	subs	r4, #4
 8010730:	6822      	ldr	r2, [r4, #0]
 8010732:	f000 000f 	and.w	r0, r0, #15
 8010736:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801073a:	6020      	str	r0, [r4, #0]
 801073c:	e7b5      	b.n	80106aa <__hexnan+0x7a>
 801073e:	2508      	movs	r5, #8
 8010740:	e7b3      	b.n	80106aa <__hexnan+0x7a>
 8010742:	9b01      	ldr	r3, [sp, #4]
 8010744:	2b00      	cmp	r3, #0
 8010746:	d0dd      	beq.n	8010704 <__hexnan+0xd4>
 8010748:	f1c3 0320 	rsb	r3, r3, #32
 801074c:	f04f 32ff 	mov.w	r2, #4294967295
 8010750:	40da      	lsrs	r2, r3
 8010752:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010756:	4013      	ands	r3, r2
 8010758:	f846 3c04 	str.w	r3, [r6, #-4]
 801075c:	e7d2      	b.n	8010704 <__hexnan+0xd4>
 801075e:	3f04      	subs	r7, #4
 8010760:	e7d0      	b.n	8010704 <__hexnan+0xd4>
 8010762:	2004      	movs	r0, #4
 8010764:	e7d5      	b.n	8010712 <__hexnan+0xe2>

08010766 <__ascii_mbtowc>:
 8010766:	b082      	sub	sp, #8
 8010768:	b901      	cbnz	r1, 801076c <__ascii_mbtowc+0x6>
 801076a:	a901      	add	r1, sp, #4
 801076c:	b142      	cbz	r2, 8010780 <__ascii_mbtowc+0x1a>
 801076e:	b14b      	cbz	r3, 8010784 <__ascii_mbtowc+0x1e>
 8010770:	7813      	ldrb	r3, [r2, #0]
 8010772:	600b      	str	r3, [r1, #0]
 8010774:	7812      	ldrb	r2, [r2, #0]
 8010776:	1e10      	subs	r0, r2, #0
 8010778:	bf18      	it	ne
 801077a:	2001      	movne	r0, #1
 801077c:	b002      	add	sp, #8
 801077e:	4770      	bx	lr
 8010780:	4610      	mov	r0, r2
 8010782:	e7fb      	b.n	801077c <__ascii_mbtowc+0x16>
 8010784:	f06f 0001 	mvn.w	r0, #1
 8010788:	e7f8      	b.n	801077c <__ascii_mbtowc+0x16>

0801078a <_realloc_r>:
 801078a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801078e:	4680      	mov	r8, r0
 8010790:	4615      	mov	r5, r2
 8010792:	460c      	mov	r4, r1
 8010794:	b921      	cbnz	r1, 80107a0 <_realloc_r+0x16>
 8010796:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801079a:	4611      	mov	r1, r2
 801079c:	f7fd bc98 	b.w	800e0d0 <_malloc_r>
 80107a0:	b92a      	cbnz	r2, 80107ae <_realloc_r+0x24>
 80107a2:	f7fd fc21 	bl	800dfe8 <_free_r>
 80107a6:	2400      	movs	r4, #0
 80107a8:	4620      	mov	r0, r4
 80107aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107ae:	f000 f840 	bl	8010832 <_malloc_usable_size_r>
 80107b2:	4285      	cmp	r5, r0
 80107b4:	4606      	mov	r6, r0
 80107b6:	d802      	bhi.n	80107be <_realloc_r+0x34>
 80107b8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80107bc:	d8f4      	bhi.n	80107a8 <_realloc_r+0x1e>
 80107be:	4629      	mov	r1, r5
 80107c0:	4640      	mov	r0, r8
 80107c2:	f7fd fc85 	bl	800e0d0 <_malloc_r>
 80107c6:	4607      	mov	r7, r0
 80107c8:	2800      	cmp	r0, #0
 80107ca:	d0ec      	beq.n	80107a6 <_realloc_r+0x1c>
 80107cc:	42b5      	cmp	r5, r6
 80107ce:	462a      	mov	r2, r5
 80107d0:	4621      	mov	r1, r4
 80107d2:	bf28      	it	cs
 80107d4:	4632      	movcs	r2, r6
 80107d6:	f7ff fc43 	bl	8010060 <memcpy>
 80107da:	4621      	mov	r1, r4
 80107dc:	4640      	mov	r0, r8
 80107de:	f7fd fc03 	bl	800dfe8 <_free_r>
 80107e2:	463c      	mov	r4, r7
 80107e4:	e7e0      	b.n	80107a8 <_realloc_r+0x1e>

080107e6 <__ascii_wctomb>:
 80107e6:	4603      	mov	r3, r0
 80107e8:	4608      	mov	r0, r1
 80107ea:	b141      	cbz	r1, 80107fe <__ascii_wctomb+0x18>
 80107ec:	2aff      	cmp	r2, #255	@ 0xff
 80107ee:	d904      	bls.n	80107fa <__ascii_wctomb+0x14>
 80107f0:	228a      	movs	r2, #138	@ 0x8a
 80107f2:	601a      	str	r2, [r3, #0]
 80107f4:	f04f 30ff 	mov.w	r0, #4294967295
 80107f8:	4770      	bx	lr
 80107fa:	700a      	strb	r2, [r1, #0]
 80107fc:	2001      	movs	r0, #1
 80107fe:	4770      	bx	lr

08010800 <fiprintf>:
 8010800:	b40e      	push	{r1, r2, r3}
 8010802:	b503      	push	{r0, r1, lr}
 8010804:	4601      	mov	r1, r0
 8010806:	ab03      	add	r3, sp, #12
 8010808:	4805      	ldr	r0, [pc, #20]	@ (8010820 <fiprintf+0x20>)
 801080a:	f853 2b04 	ldr.w	r2, [r3], #4
 801080e:	6800      	ldr	r0, [r0, #0]
 8010810:	9301      	str	r3, [sp, #4]
 8010812:	f7ff f9a1 	bl	800fb58 <_vfiprintf_r>
 8010816:	b002      	add	sp, #8
 8010818:	f85d eb04 	ldr.w	lr, [sp], #4
 801081c:	b003      	add	sp, #12
 801081e:	4770      	bx	lr
 8010820:	20000118 	.word	0x20000118

08010824 <abort>:
 8010824:	b508      	push	{r3, lr}
 8010826:	2006      	movs	r0, #6
 8010828:	f000 f834 	bl	8010894 <raise>
 801082c:	2001      	movs	r0, #1
 801082e:	f7f1 fd75 	bl	800231c <_exit>

08010832 <_malloc_usable_size_r>:
 8010832:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010836:	1f18      	subs	r0, r3, #4
 8010838:	2b00      	cmp	r3, #0
 801083a:	bfbc      	itt	lt
 801083c:	580b      	ldrlt	r3, [r1, r0]
 801083e:	18c0      	addlt	r0, r0, r3
 8010840:	4770      	bx	lr

08010842 <_raise_r>:
 8010842:	291f      	cmp	r1, #31
 8010844:	b538      	push	{r3, r4, r5, lr}
 8010846:	4605      	mov	r5, r0
 8010848:	460c      	mov	r4, r1
 801084a:	d904      	bls.n	8010856 <_raise_r+0x14>
 801084c:	2316      	movs	r3, #22
 801084e:	6003      	str	r3, [r0, #0]
 8010850:	f04f 30ff 	mov.w	r0, #4294967295
 8010854:	bd38      	pop	{r3, r4, r5, pc}
 8010856:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010858:	b112      	cbz	r2, 8010860 <_raise_r+0x1e>
 801085a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801085e:	b94b      	cbnz	r3, 8010874 <_raise_r+0x32>
 8010860:	4628      	mov	r0, r5
 8010862:	f000 f831 	bl	80108c8 <_getpid_r>
 8010866:	4622      	mov	r2, r4
 8010868:	4601      	mov	r1, r0
 801086a:	4628      	mov	r0, r5
 801086c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010870:	f000 b818 	b.w	80108a4 <_kill_r>
 8010874:	2b01      	cmp	r3, #1
 8010876:	d00a      	beq.n	801088e <_raise_r+0x4c>
 8010878:	1c59      	adds	r1, r3, #1
 801087a:	d103      	bne.n	8010884 <_raise_r+0x42>
 801087c:	2316      	movs	r3, #22
 801087e:	6003      	str	r3, [r0, #0]
 8010880:	2001      	movs	r0, #1
 8010882:	e7e7      	b.n	8010854 <_raise_r+0x12>
 8010884:	2100      	movs	r1, #0
 8010886:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801088a:	4620      	mov	r0, r4
 801088c:	4798      	blx	r3
 801088e:	2000      	movs	r0, #0
 8010890:	e7e0      	b.n	8010854 <_raise_r+0x12>
	...

08010894 <raise>:
 8010894:	4b02      	ldr	r3, [pc, #8]	@ (80108a0 <raise+0xc>)
 8010896:	4601      	mov	r1, r0
 8010898:	6818      	ldr	r0, [r3, #0]
 801089a:	f7ff bfd2 	b.w	8010842 <_raise_r>
 801089e:	bf00      	nop
 80108a0:	20000118 	.word	0x20000118

080108a4 <_kill_r>:
 80108a4:	b538      	push	{r3, r4, r5, lr}
 80108a6:	4d07      	ldr	r5, [pc, #28]	@ (80108c4 <_kill_r+0x20>)
 80108a8:	2300      	movs	r3, #0
 80108aa:	4604      	mov	r4, r0
 80108ac:	4608      	mov	r0, r1
 80108ae:	4611      	mov	r1, r2
 80108b0:	602b      	str	r3, [r5, #0]
 80108b2:	f7f1 fd23 	bl	80022fc <_kill>
 80108b6:	1c43      	adds	r3, r0, #1
 80108b8:	d102      	bne.n	80108c0 <_kill_r+0x1c>
 80108ba:	682b      	ldr	r3, [r5, #0]
 80108bc:	b103      	cbz	r3, 80108c0 <_kill_r+0x1c>
 80108be:	6023      	str	r3, [r4, #0]
 80108c0:	bd38      	pop	{r3, r4, r5, pc}
 80108c2:	bf00      	nop
 80108c4:	20012d84 	.word	0x20012d84

080108c8 <_getpid_r>:
 80108c8:	f7f1 bd10 	b.w	80022ec <_getpid>

080108cc <atan2f>:
 80108cc:	f000 b822 	b.w	8010914 <__ieee754_atan2f>

080108d0 <sqrtf>:
 80108d0:	b508      	push	{r3, lr}
 80108d2:	ed2d 8b02 	vpush	{d8}
 80108d6:	eeb0 8a40 	vmov.f32	s16, s0
 80108da:	f000 f817 	bl	801090c <__ieee754_sqrtf>
 80108de:	eeb4 8a48 	vcmp.f32	s16, s16
 80108e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108e6:	d60c      	bvs.n	8010902 <sqrtf+0x32>
 80108e8:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8010908 <sqrtf+0x38>
 80108ec:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80108f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108f4:	d505      	bpl.n	8010902 <sqrtf+0x32>
 80108f6:	f7fc fcf5 	bl	800d2e4 <__errno>
 80108fa:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80108fe:	2321      	movs	r3, #33	@ 0x21
 8010900:	6003      	str	r3, [r0, #0]
 8010902:	ecbd 8b02 	vpop	{d8}
 8010906:	bd08      	pop	{r3, pc}
 8010908:	00000000 	.word	0x00000000

0801090c <__ieee754_sqrtf>:
 801090c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010910:	4770      	bx	lr
	...

08010914 <__ieee754_atan2f>:
 8010914:	ee10 2a90 	vmov	r2, s1
 8010918:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 801091c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8010920:	b510      	push	{r4, lr}
 8010922:	eef0 7a40 	vmov.f32	s15, s0
 8010926:	d806      	bhi.n	8010936 <__ieee754_atan2f+0x22>
 8010928:	ee10 0a10 	vmov	r0, s0
 801092c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8010930:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010934:	d904      	bls.n	8010940 <__ieee754_atan2f+0x2c>
 8010936:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801093a:	eeb0 0a67 	vmov.f32	s0, s15
 801093e:	bd10      	pop	{r4, pc}
 8010940:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8010944:	d103      	bne.n	801094e <__ieee754_atan2f+0x3a>
 8010946:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801094a:	f000 b883 	b.w	8010a54 <atanf>
 801094e:	1794      	asrs	r4, r2, #30
 8010950:	f004 0402 	and.w	r4, r4, #2
 8010954:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8010958:	b943      	cbnz	r3, 801096c <__ieee754_atan2f+0x58>
 801095a:	2c02      	cmp	r4, #2
 801095c:	d05e      	beq.n	8010a1c <__ieee754_atan2f+0x108>
 801095e:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8010a30 <__ieee754_atan2f+0x11c>
 8010962:	2c03      	cmp	r4, #3
 8010964:	bf08      	it	eq
 8010966:	eef0 7a47 	vmoveq.f32	s15, s14
 801096a:	e7e6      	b.n	801093a <__ieee754_atan2f+0x26>
 801096c:	b941      	cbnz	r1, 8010980 <__ieee754_atan2f+0x6c>
 801096e:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8010a34 <__ieee754_atan2f+0x120>
 8010972:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8010a38 <__ieee754_atan2f+0x124>
 8010976:	2800      	cmp	r0, #0
 8010978:	bfb8      	it	lt
 801097a:	eef0 7a47 	vmovlt.f32	s15, s14
 801097e:	e7dc      	b.n	801093a <__ieee754_atan2f+0x26>
 8010980:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8010984:	d110      	bne.n	80109a8 <__ieee754_atan2f+0x94>
 8010986:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801098a:	f104 34ff 	add.w	r4, r4, #4294967295
 801098e:	d107      	bne.n	80109a0 <__ieee754_atan2f+0x8c>
 8010990:	2c02      	cmp	r4, #2
 8010992:	d846      	bhi.n	8010a22 <__ieee754_atan2f+0x10e>
 8010994:	4b29      	ldr	r3, [pc, #164]	@ (8010a3c <__ieee754_atan2f+0x128>)
 8010996:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801099a:	edd3 7a00 	vldr	s15, [r3]
 801099e:	e7cc      	b.n	801093a <__ieee754_atan2f+0x26>
 80109a0:	2c02      	cmp	r4, #2
 80109a2:	d841      	bhi.n	8010a28 <__ieee754_atan2f+0x114>
 80109a4:	4b26      	ldr	r3, [pc, #152]	@ (8010a40 <__ieee754_atan2f+0x12c>)
 80109a6:	e7f6      	b.n	8010996 <__ieee754_atan2f+0x82>
 80109a8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80109ac:	d0df      	beq.n	801096e <__ieee754_atan2f+0x5a>
 80109ae:	1a5b      	subs	r3, r3, r1
 80109b0:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 80109b4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80109b8:	da1a      	bge.n	80109f0 <__ieee754_atan2f+0xdc>
 80109ba:	2a00      	cmp	r2, #0
 80109bc:	da01      	bge.n	80109c2 <__ieee754_atan2f+0xae>
 80109be:	313c      	adds	r1, #60	@ 0x3c
 80109c0:	db19      	blt.n	80109f6 <__ieee754_atan2f+0xe2>
 80109c2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80109c6:	f000 f919 	bl	8010bfc <fabsf>
 80109ca:	f000 f843 	bl	8010a54 <atanf>
 80109ce:	eef0 7a40 	vmov.f32	s15, s0
 80109d2:	2c01      	cmp	r4, #1
 80109d4:	d012      	beq.n	80109fc <__ieee754_atan2f+0xe8>
 80109d6:	2c02      	cmp	r4, #2
 80109d8:	d017      	beq.n	8010a0a <__ieee754_atan2f+0xf6>
 80109da:	2c00      	cmp	r4, #0
 80109dc:	d0ad      	beq.n	801093a <__ieee754_atan2f+0x26>
 80109de:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8010a44 <__ieee754_atan2f+0x130>
 80109e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80109e6:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8010a48 <__ieee754_atan2f+0x134>
 80109ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80109ee:	e7a4      	b.n	801093a <__ieee754_atan2f+0x26>
 80109f0:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8010a34 <__ieee754_atan2f+0x120>
 80109f4:	e7ed      	b.n	80109d2 <__ieee754_atan2f+0xbe>
 80109f6:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8010a4c <__ieee754_atan2f+0x138>
 80109fa:	e7ea      	b.n	80109d2 <__ieee754_atan2f+0xbe>
 80109fc:	ee17 3a90 	vmov	r3, s15
 8010a00:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8010a04:	ee07 3a90 	vmov	s15, r3
 8010a08:	e797      	b.n	801093a <__ieee754_atan2f+0x26>
 8010a0a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8010a44 <__ieee754_atan2f+0x130>
 8010a0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010a12:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8010a48 <__ieee754_atan2f+0x134>
 8010a16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010a1a:	e78e      	b.n	801093a <__ieee754_atan2f+0x26>
 8010a1c:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8010a48 <__ieee754_atan2f+0x134>
 8010a20:	e78b      	b.n	801093a <__ieee754_atan2f+0x26>
 8010a22:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8010a50 <__ieee754_atan2f+0x13c>
 8010a26:	e788      	b.n	801093a <__ieee754_atan2f+0x26>
 8010a28:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8010a4c <__ieee754_atan2f+0x138>
 8010a2c:	e785      	b.n	801093a <__ieee754_atan2f+0x26>
 8010a2e:	bf00      	nop
 8010a30:	c0490fdb 	.word	0xc0490fdb
 8010a34:	3fc90fdb 	.word	0x3fc90fdb
 8010a38:	bfc90fdb 	.word	0xbfc90fdb
 8010a3c:	0801117c 	.word	0x0801117c
 8010a40:	08011170 	.word	0x08011170
 8010a44:	33bbbd2e 	.word	0x33bbbd2e
 8010a48:	40490fdb 	.word	0x40490fdb
 8010a4c:	00000000 	.word	0x00000000
 8010a50:	3f490fdb 	.word	0x3f490fdb

08010a54 <atanf>:
 8010a54:	b538      	push	{r3, r4, r5, lr}
 8010a56:	ee10 5a10 	vmov	r5, s0
 8010a5a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8010a5e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8010a62:	eef0 7a40 	vmov.f32	s15, s0
 8010a66:	d310      	bcc.n	8010a8a <atanf+0x36>
 8010a68:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8010a6c:	d904      	bls.n	8010a78 <atanf+0x24>
 8010a6e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8010a72:	eeb0 0a67 	vmov.f32	s0, s15
 8010a76:	bd38      	pop	{r3, r4, r5, pc}
 8010a78:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8010bb0 <atanf+0x15c>
 8010a7c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8010bb4 <atanf+0x160>
 8010a80:	2d00      	cmp	r5, #0
 8010a82:	bfc8      	it	gt
 8010a84:	eef0 7a47 	vmovgt.f32	s15, s14
 8010a88:	e7f3      	b.n	8010a72 <atanf+0x1e>
 8010a8a:	4b4b      	ldr	r3, [pc, #300]	@ (8010bb8 <atanf+0x164>)
 8010a8c:	429c      	cmp	r4, r3
 8010a8e:	d810      	bhi.n	8010ab2 <atanf+0x5e>
 8010a90:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8010a94:	d20a      	bcs.n	8010aac <atanf+0x58>
 8010a96:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8010bbc <atanf+0x168>
 8010a9a:	ee30 7a07 	vadd.f32	s14, s0, s14
 8010a9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010aa2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8010aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010aaa:	dce2      	bgt.n	8010a72 <atanf+0x1e>
 8010aac:	f04f 33ff 	mov.w	r3, #4294967295
 8010ab0:	e013      	b.n	8010ada <atanf+0x86>
 8010ab2:	f000 f8a3 	bl	8010bfc <fabsf>
 8010ab6:	4b42      	ldr	r3, [pc, #264]	@ (8010bc0 <atanf+0x16c>)
 8010ab8:	429c      	cmp	r4, r3
 8010aba:	d84f      	bhi.n	8010b5c <atanf+0x108>
 8010abc:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8010ac0:	429c      	cmp	r4, r3
 8010ac2:	d841      	bhi.n	8010b48 <atanf+0xf4>
 8010ac4:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8010ac8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8010acc:	eea0 7a27 	vfma.f32	s14, s0, s15
 8010ad0:	2300      	movs	r3, #0
 8010ad2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010ad6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010ada:	1c5a      	adds	r2, r3, #1
 8010adc:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8010ae0:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8010bc4 <atanf+0x170>
 8010ae4:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8010bc8 <atanf+0x174>
 8010ae8:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8010bcc <atanf+0x178>
 8010aec:	ee66 6a06 	vmul.f32	s13, s12, s12
 8010af0:	eee6 5a87 	vfma.f32	s11, s13, s14
 8010af4:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8010bd0 <atanf+0x17c>
 8010af8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8010afc:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8010bd4 <atanf+0x180>
 8010b00:	eee7 5a26 	vfma.f32	s11, s14, s13
 8010b04:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8010bd8 <atanf+0x184>
 8010b08:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8010b0c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8010bdc <atanf+0x188>
 8010b10:	eee7 5a26 	vfma.f32	s11, s14, s13
 8010b14:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8010be0 <atanf+0x18c>
 8010b18:	eea6 5a87 	vfma.f32	s10, s13, s14
 8010b1c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8010be4 <atanf+0x190>
 8010b20:	eea5 7a26 	vfma.f32	s14, s10, s13
 8010b24:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8010be8 <atanf+0x194>
 8010b28:	eea7 5a26 	vfma.f32	s10, s14, s13
 8010b2c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8010bec <atanf+0x198>
 8010b30:	eea5 7a26 	vfma.f32	s14, s10, s13
 8010b34:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010b38:	eea5 7a86 	vfma.f32	s14, s11, s12
 8010b3c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010b40:	d121      	bne.n	8010b86 <atanf+0x132>
 8010b42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010b46:	e794      	b.n	8010a72 <atanf+0x1e>
 8010b48:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010b4c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8010b50:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010b54:	2301      	movs	r3, #1
 8010b56:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010b5a:	e7be      	b.n	8010ada <atanf+0x86>
 8010b5c:	4b24      	ldr	r3, [pc, #144]	@ (8010bf0 <atanf+0x19c>)
 8010b5e:	429c      	cmp	r4, r3
 8010b60:	d80b      	bhi.n	8010b7a <atanf+0x126>
 8010b62:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8010b66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010b6a:	eea0 7a27 	vfma.f32	s14, s0, s15
 8010b6e:	2302      	movs	r3, #2
 8010b70:	ee70 6a67 	vsub.f32	s13, s0, s15
 8010b74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010b78:	e7af      	b.n	8010ada <atanf+0x86>
 8010b7a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8010b7e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010b82:	2303      	movs	r3, #3
 8010b84:	e7a9      	b.n	8010ada <atanf+0x86>
 8010b86:	4a1b      	ldr	r2, [pc, #108]	@ (8010bf4 <atanf+0x1a0>)
 8010b88:	491b      	ldr	r1, [pc, #108]	@ (8010bf8 <atanf+0x1a4>)
 8010b8a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010b8e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8010b92:	edd3 6a00 	vldr	s13, [r3]
 8010b96:	ee37 7a66 	vsub.f32	s14, s14, s13
 8010b9a:	2d00      	cmp	r5, #0
 8010b9c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010ba0:	edd2 7a00 	vldr	s15, [r2]
 8010ba4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010ba8:	bfb8      	it	lt
 8010baa:	eef1 7a67 	vneglt.f32	s15, s15
 8010bae:	e760      	b.n	8010a72 <atanf+0x1e>
 8010bb0:	bfc90fdb 	.word	0xbfc90fdb
 8010bb4:	3fc90fdb 	.word	0x3fc90fdb
 8010bb8:	3edfffff 	.word	0x3edfffff
 8010bbc:	7149f2ca 	.word	0x7149f2ca
 8010bc0:	3f97ffff 	.word	0x3f97ffff
 8010bc4:	3c8569d7 	.word	0x3c8569d7
 8010bc8:	3d4bda59 	.word	0x3d4bda59
 8010bcc:	bd6ef16b 	.word	0xbd6ef16b
 8010bd0:	3d886b35 	.word	0x3d886b35
 8010bd4:	3dba2e6e 	.word	0x3dba2e6e
 8010bd8:	3e124925 	.word	0x3e124925
 8010bdc:	3eaaaaab 	.word	0x3eaaaaab
 8010be0:	bd15a221 	.word	0xbd15a221
 8010be4:	bd9d8795 	.word	0xbd9d8795
 8010be8:	bde38e38 	.word	0xbde38e38
 8010bec:	be4ccccd 	.word	0xbe4ccccd
 8010bf0:	401bffff 	.word	0x401bffff
 8010bf4:	08011198 	.word	0x08011198
 8010bf8:	08011188 	.word	0x08011188

08010bfc <fabsf>:
 8010bfc:	ee10 3a10 	vmov	r3, s0
 8010c00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010c04:	ee00 3a10 	vmov	s0, r3
 8010c08:	4770      	bx	lr
	...

08010c0c <_init>:
 8010c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c0e:	bf00      	nop
 8010c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c12:	bc08      	pop	{r3}
 8010c14:	469e      	mov	lr, r3
 8010c16:	4770      	bx	lr

08010c18 <_fini>:
 8010c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c1a:	bf00      	nop
 8010c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c1e:	bc08      	pop	{r3}
 8010c20:	469e      	mov	lr, r3
 8010c22:	4770      	bx	lr
